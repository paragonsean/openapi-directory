/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Done from '../model/Done';
import Group from '../model/Group';
import Outage from '../model/Outage';
import SnowMonkeyConfig from '../model/SnowMonkeyConfig';

/**
* Snowmonkey service.
* @module api/SnowmonkeyApi
* @version 1.5.0-dev
*/
export default class SnowmonkeyApi {

    /**
    * Constructs a new SnowmonkeyApi. 
    * @alias module:api/SnowmonkeyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSnowMonkeyConfig operation.
     * @callback module:api/SnowmonkeyApi~getSnowMonkeyConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnowMonkeyConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current Snow Monkey config
     * Get current Snow Monkey config
     * @param {module:api/SnowmonkeyApi~getSnowMonkeyConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnowMonkeyConfig}
     */
    getSnowMonkeyConfig(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SnowMonkeyConfig;
      return this.apiClient.callApi(
        '/api/snowmonkey/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSnowMonkeyOutages operation.
     * @callback module:api/SnowmonkeyApi~getSnowMonkeyOutagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Outage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all current Snow Monkey ourages
     * Get all current Snow Monkey ourages
     * @param {module:api/SnowmonkeyApi~getSnowMonkeyOutagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Outage>}
     */
    getSnowMonkeyOutages(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Outage];
      return this.apiClient.callApi(
        '/api/snowmonkey/outages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchSnowMonkey operation.
     * @callback module:api/SnowmonkeyApi~patchSnowMonkeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnowMonkeyConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update current Snow Monkey config
     * Update current Snow Monkey config
     * @param {Object} opts Optional parameters
     * @param {module:model/Group} [group] 
     * @param {module:api/SnowmonkeyApi~patchSnowMonkeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnowMonkeyConfig}
     */
    patchSnowMonkey(opts, callback) {
      opts = opts || {};
      let postBody = opts['group'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SnowMonkeyConfig;
      return this.apiClient.callApi(
        '/api/snowmonkey/config', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetSnowMonkey operation.
     * @callback module:api/SnowmonkeyApi~resetSnowMonkeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Done} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset Snow Monkey Outages for the day
     * Reset Snow Monkey Outages for the day
     * @param {module:api/SnowmonkeyApi~resetSnowMonkeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Done}
     */
    resetSnowMonkey(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Done;
      return this.apiClient.callApi(
        '/api/snowmonkey/outages', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startSnowMonkey operation.
     * @callback module:api/SnowmonkeyApi~startSnowMonkeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Done} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start the Snow Monkey
     * Start the Snow Monkey
     * @param {module:api/SnowmonkeyApi~startSnowMonkeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Done}
     */
    startSnowMonkey(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Done;
      return this.apiClient.callApi(
        '/api/snowmonkey/_start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopSnowMonkey operation.
     * @callback module:api/SnowmonkeyApi~stopSnowMonkeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Done} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop the Snow Monkey
     * Stop the Snow Monkey
     * @param {module:api/SnowmonkeyApi~stopSnowMonkeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Done}
     */
    stopSnowMonkey(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Done;
      return this.apiClient.callApi(
        '/api/snowmonkey/_stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSnowMonkey operation.
     * @callback module:api/SnowmonkeyApi~updateSnowMonkeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnowMonkeyConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update current Snow Monkey config
     * Update current Snow Monkey config
     * @param {Object} opts Optional parameters
     * @param {module:model/Group} [group] 
     * @param {module:api/SnowmonkeyApi~updateSnowMonkeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnowMonkeyConfig}
     */
    updateSnowMonkey(opts, callback) {
      opts = opts || {};
      let postBody = opts['group'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['otoroshi_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SnowMonkeyConfig;
      return this.apiClient.callApi(
        '/api/snowmonkey/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
