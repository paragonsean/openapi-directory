/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Location model module.
 * @module model/Location
 * @version 1.5.0-dev
 */
class Location {
    /**
     * Constructs a new <code>Location</code>.
     * @alias module:model/Location
     * @param teams {Array.<Object.<String, String>>} Team ids
     * @param tenant {String} Tenant id
     */
    constructor(teams, tenant) { 
        
        Location.initialize(this, teams, tenant);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, teams, tenant) { 
        obj['teams'] = teams;
        obj['tenant'] = tenant;
    }

    /**
     * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Location} obj Optional instance to populate.
     * @return {module:model/Location} The populated <code>Location</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Location();

            if (data.hasOwnProperty('teams')) {
                obj['teams'] = ApiClient.convertToType(data['teams'], [{'String': 'String'}]);
            }
            if (data.hasOwnProperty('tenant')) {
                obj['tenant'] = ApiClient.convertToType(data['tenant'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Location</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Location</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Location.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['teams'])) {
            throw new Error("Expected the field `teams` to be an array in the JSON data but got " + data['teams']);
        }
        // ensure the json data is a string
        if (data['tenant'] && !(typeof data['tenant'] === 'string' || data['tenant'] instanceof String)) {
            throw new Error("Expected the field `tenant` to be a primitive type in the JSON string but got " + data['tenant']);
        }

        return true;
    }


}

Location.RequiredProperties = ["teams", "tenant"];

/**
 * Team ids
 * @member {Array.<Object.<String, String>>} teams
 */
Location.prototype['teams'] = undefined;

/**
 * Tenant id
 * @member {String} tenant
 */
Location.prototype['tenant'] = undefined;






export default Location;

