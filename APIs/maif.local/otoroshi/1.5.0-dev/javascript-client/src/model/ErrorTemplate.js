/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ErrorTemplate model module.
 * @module model/ErrorTemplate
 * @version 1.5.0-dev
 */
class ErrorTemplate {
    /**
     * Constructs a new <code>ErrorTemplate</code>.
     * Error templates for a service descriptor
     * @alias module:model/ErrorTemplate
     * @param messages {Object.<String, String>} Map for custom messages
     * @param serviceId {String} The Id of the service for which the error template is enabled
     * @param template40x {String} The html template for 40x errors
     * @param template50x {String} The html template for 50x errors
     * @param templateBuild {String} The html template for build page
     * @param templateMaintenance {String} The html template for maintenance page
     */
    constructor(messages, serviceId, template40x, template50x, templateBuild, templateMaintenance) { 
        
        ErrorTemplate.initialize(this, messages, serviceId, template40x, template50x, templateBuild, templateMaintenance);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, messages, serviceId, template40x, template50x, templateBuild, templateMaintenance) { 
        obj['messages'] = messages;
        obj['serviceId'] = serviceId;
        obj['template40x'] = template40x;
        obj['template50x'] = template50x;
        obj['templateBuild'] = templateBuild;
        obj['templateMaintenance'] = templateMaintenance;
    }

    /**
     * Constructs a <code>ErrorTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorTemplate} obj Optional instance to populate.
     * @return {module:model/ErrorTemplate} The populated <code>ErrorTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorTemplate();

            if (data.hasOwnProperty('messages')) {
                obj['messages'] = ApiClient.convertToType(data['messages'], {'String': 'String'});
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
            if (data.hasOwnProperty('template40x')) {
                obj['template40x'] = ApiClient.convertToType(data['template40x'], 'String');
            }
            if (data.hasOwnProperty('template50x')) {
                obj['template50x'] = ApiClient.convertToType(data['template50x'], 'String');
            }
            if (data.hasOwnProperty('templateBuild')) {
                obj['templateBuild'] = ApiClient.convertToType(data['templateBuild'], 'String');
            }
            if (data.hasOwnProperty('templateMaintenance')) {
                obj['templateMaintenance'] = ApiClient.convertToType(data['templateMaintenance'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorTemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ErrorTemplate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }
        // ensure the json data is a string
        if (data['template40x'] && !(typeof data['template40x'] === 'string' || data['template40x'] instanceof String)) {
            throw new Error("Expected the field `template40x` to be a primitive type in the JSON string but got " + data['template40x']);
        }
        // ensure the json data is a string
        if (data['template50x'] && !(typeof data['template50x'] === 'string' || data['template50x'] instanceof String)) {
            throw new Error("Expected the field `template50x` to be a primitive type in the JSON string but got " + data['template50x']);
        }
        // ensure the json data is a string
        if (data['templateBuild'] && !(typeof data['templateBuild'] === 'string' || data['templateBuild'] instanceof String)) {
            throw new Error("Expected the field `templateBuild` to be a primitive type in the JSON string but got " + data['templateBuild']);
        }
        // ensure the json data is a string
        if (data['templateMaintenance'] && !(typeof data['templateMaintenance'] === 'string' || data['templateMaintenance'] instanceof String)) {
            throw new Error("Expected the field `templateMaintenance` to be a primitive type in the JSON string but got " + data['templateMaintenance']);
        }

        return true;
    }


}

ErrorTemplate.RequiredProperties = ["messages", "serviceId", "template40x", "template50x", "templateBuild", "templateMaintenance"];

/**
 * Map for custom messages
 * @member {Object.<String, String>} messages
 */
ErrorTemplate.prototype['messages'] = undefined;

/**
 * The Id of the service for which the error template is enabled
 * @member {String} serviceId
 */
ErrorTemplate.prototype['serviceId'] = undefined;

/**
 * The html template for 40x errors
 * @member {String} template40x
 */
ErrorTemplate.prototype['template40x'] = undefined;

/**
 * The html template for 50x errors
 * @member {String} template50x
 */
ErrorTemplate.prototype['template50x'] = undefined;

/**
 * The html template for build page
 * @member {String} templateBuild
 */
ErrorTemplate.prototype['templateBuild'] = undefined;

/**
 * The html template for maintenance page
 * @member {String} templateMaintenance
 */
ErrorTemplate.prototype['templateMaintenance'] = undefined;






export default ErrorTemplate;

