/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MappingSettings model module.
 * @module model/MappingSettings
 * @version 1.5.0-dev
 */
class MappingSettings {
    /**
     * Constructs a new <code>MappingSettings</code>.
     * Settings to change fields of a JWT token
     * @alias module:model/MappingSettings
     * @param map {Object.<String, String>} Fields to rename
     * @param remove {Array.<String>} Fields to remove
     * @param values {Object.<String, String>} Fields to set
     */
    constructor(map, remove, values) { 
        
        MappingSettings.initialize(this, map, remove, values);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, map, remove, values) { 
        obj['map'] = map;
        obj['remove'] = remove;
        obj['values'] = values;
    }

    /**
     * Constructs a <code>MappingSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MappingSettings} obj Optional instance to populate.
     * @return {module:model/MappingSettings} The populated <code>MappingSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MappingSettings();

            if (data.hasOwnProperty('map')) {
                obj['map'] = ApiClient.convertToType(data['map'], {'String': 'String'});
            }
            if (data.hasOwnProperty('remove')) {
                obj['remove'] = ApiClient.convertToType(data['remove'], ['String']);
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MappingSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MappingSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MappingSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['remove'])) {
            throw new Error("Expected the field `remove` to be an array in the JSON data but got " + data['remove']);
        }

        return true;
    }


}

MappingSettings.RequiredProperties = ["map", "remove", "values"];

/**
 * Fields to rename
 * @member {Object.<String, String>} map
 */
MappingSettings.prototype['map'] = undefined;

/**
 * Fields to remove
 * @member {Array.<String>} remove
 */
MappingSettings.prototype['remove'] = undefined;

/**
 * Fields to set
 * @member {Object.<String, String>} values
 */
MappingSettings.prototype['values'] = undefined;






export default MappingSettings;

