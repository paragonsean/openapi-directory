/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ValidationAuthority model module.
 * @module model/ValidationAuthority
 * @version 1.5.0-dev
 */
class ValidationAuthority {
    /**
     * Constructs a new <code>ValidationAuthority</code>.
     * Settings to access a validation authority server
     * @alias module:model/ValidationAuthority
     * @param alwaysValid {Boolean} Bypass http calls, every certificates are valids
     * @param badTtl {Number} The TTL for invalid access response caching
     * @param description {String} The description of the settings
     * @param goodTtl {Number} The TTL for valid access response caching
     * @param headers {Object.<String, String>} HTTP call headers
     * @param host {String} The host of the server
     * @param id {String} The id of the settings
     * @param method {String} The HTTP method
     * @param name {String} The name of the settings
     * @param noCache {Boolean} Avoid caching responses
     * @param path {String} The URL path
     * @param timeout {Number} The call timeout
     * @param url {String} The URL of the server
     */
    constructor(alwaysValid, badTtl, description, goodTtl, headers, host, id, method, name, noCache, path, timeout, url) { 
        
        ValidationAuthority.initialize(this, alwaysValid, badTtl, description, goodTtl, headers, host, id, method, name, noCache, path, timeout, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, alwaysValid, badTtl, description, goodTtl, headers, host, id, method, name, noCache, path, timeout, url) { 
        obj['alwaysValid'] = alwaysValid;
        obj['badTtl'] = badTtl;
        obj['description'] = description;
        obj['goodTtl'] = goodTtl;
        obj['headers'] = headers;
        obj['host'] = host;
        obj['id'] = id;
        obj['method'] = method;
        obj['name'] = name;
        obj['noCache'] = noCache;
        obj['path'] = path;
        obj['timeout'] = timeout;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>ValidationAuthority</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValidationAuthority} obj Optional instance to populate.
     * @return {module:model/ValidationAuthority} The populated <code>ValidationAuthority</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValidationAuthority();

            if (data.hasOwnProperty('alwaysValid')) {
                obj['alwaysValid'] = ApiClient.convertToType(data['alwaysValid'], 'Boolean');
            }
            if (data.hasOwnProperty('badTtl')) {
                obj['badTtl'] = ApiClient.convertToType(data['badTtl'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('goodTtl')) {
                obj['goodTtl'] = ApiClient.convertToType(data['goodTtl'], 'Number');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], {'String': 'String'});
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('noCache')) {
                obj['noCache'] = ApiClient.convertToType(data['noCache'], 'Boolean');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValidationAuthority</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValidationAuthority</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ValidationAuthority.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

ValidationAuthority.RequiredProperties = ["alwaysValid", "badTtl", "description", "goodTtl", "headers", "host", "id", "method", "name", "noCache", "path", "timeout", "url"];

/**
 * Bypass http calls, every certificates are valids
 * @member {Boolean} alwaysValid
 */
ValidationAuthority.prototype['alwaysValid'] = undefined;

/**
 * The TTL for invalid access response caching
 * @member {Number} badTtl
 */
ValidationAuthority.prototype['badTtl'] = undefined;

/**
 * The description of the settings
 * @member {String} description
 */
ValidationAuthority.prototype['description'] = undefined;

/**
 * The TTL for valid access response caching
 * @member {Number} goodTtl
 */
ValidationAuthority.prototype['goodTtl'] = undefined;

/**
 * HTTP call headers
 * @member {Object.<String, String>} headers
 */
ValidationAuthority.prototype['headers'] = undefined;

/**
 * The host of the server
 * @member {String} host
 */
ValidationAuthority.prototype['host'] = undefined;

/**
 * The id of the settings
 * @member {String} id
 */
ValidationAuthority.prototype['id'] = undefined;

/**
 * The HTTP method
 * @member {String} method
 */
ValidationAuthority.prototype['method'] = undefined;

/**
 * The name of the settings
 * @member {String} name
 */
ValidationAuthority.prototype['name'] = undefined;

/**
 * Avoid caching responses
 * @member {Boolean} noCache
 */
ValidationAuthority.prototype['noCache'] = undefined;

/**
 * The URL path
 * @member {String} path
 */
ValidationAuthority.prototype['path'] = undefined;

/**
 * The call timeout
 * @member {Number} timeout
 */
ValidationAuthority.prototype['timeout'] = undefined;

/**
 * The URL of the server
 * @member {String} url
 */
ValidationAuthority.prototype['url'] = undefined;






export default ValidationAuthority;

