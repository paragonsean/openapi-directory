/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ElasticConfig model module.
 * @module model/ElasticConfig
 * @version 1.5.0-dev
 */
class ElasticConfig {
    /**
     * Constructs a new <code>ElasticConfig</code>.
     * The configuration for elastic access
     * @alias module:model/ElasticConfig
     * @param clusterUri {String} URL of the elastic cluster
     * @param headers {Object.<String, String>} Additionnal http headers
     * @param index {String} Index for events. Default is otoroshi-events
     * @param password {String} Optional password
     * @param type {String} Type of events. Default is event
     * @param user {String} Optional user
     */
    constructor(clusterUri, headers, index, password, type, user) { 
        
        ElasticConfig.initialize(this, clusterUri, headers, index, password, type, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clusterUri, headers, index, password, type, user) { 
        obj['clusterUri'] = clusterUri;
        obj['headers'] = headers;
        obj['index'] = index;
        obj['password'] = password;
        obj['type'] = type;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>ElasticConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ElasticConfig} obj Optional instance to populate.
     * @return {module:model/ElasticConfig} The populated <code>ElasticConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ElasticConfig();

            if (data.hasOwnProperty('clusterUri')) {
                obj['clusterUri'] = ApiClient.convertToType(data['clusterUri'], 'String');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], {'String': 'String'});
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ElasticConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ElasticConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ElasticConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clusterUri'] && !(typeof data['clusterUri'] === 'string' || data['clusterUri'] instanceof String)) {
            throw new Error("Expected the field `clusterUri` to be a primitive type in the JSON string but got " + data['clusterUri']);
        }
        // ensure the json data is a string
        if (data['index'] && !(typeof data['index'] === 'string' || data['index'] instanceof String)) {
            throw new Error("Expected the field `index` to be a primitive type in the JSON string but got " + data['index']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }

        return true;
    }


}

ElasticConfig.RequiredProperties = ["clusterUri", "headers", "index", "password", "type", "user"];

/**
 * URL of the elastic cluster
 * @member {String} clusterUri
 */
ElasticConfig.prototype['clusterUri'] = undefined;

/**
 * Additionnal http headers
 * @member {Object.<String, String>} headers
 */
ElasticConfig.prototype['headers'] = undefined;

/**
 * Index for events. Default is otoroshi-events
 * @member {String} index
 */
ElasticConfig.prototype['index'] = undefined;

/**
 * Optional password
 * @member {String} password
 */
ElasticConfig.prototype['password'] = undefined;

/**
 * Type of events. Default is event
 * @member {String} type
 */
ElasticConfig.prototype['type'] = undefined;

/**
 * Optional user
 * @member {String} user
 */
ElasticConfig.prototype['user'] = undefined;






export default ElasticConfig;

