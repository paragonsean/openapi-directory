/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KafkaConfig model module.
 * @module model/KafkaConfig
 * @version 1.5.0-dev
 */
class KafkaConfig {
    /**
     * Constructs a new <code>KafkaConfig</code>.
     * The configuration for kafka access
     * @alias module:model/KafkaConfig
     * @param servers {Array.<String>} URLs of the kafka servers
     */
    constructor(servers) { 
        
        KafkaConfig.initialize(this, servers);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, servers) { 
        obj['servers'] = servers;
    }

    /**
     * Constructs a <code>KafkaConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KafkaConfig} obj Optional instance to populate.
     * @return {module:model/KafkaConfig} The populated <code>KafkaConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KafkaConfig();

            if (data.hasOwnProperty('keyPass')) {
                obj['keyPass'] = ApiClient.convertToType(data['keyPass'], 'String');
            }
            if (data.hasOwnProperty('keyStore')) {
                obj['keyStore'] = ApiClient.convertToType(data['keyStore'], 'String');
            }
            if (data.hasOwnProperty('servers')) {
                obj['servers'] = ApiClient.convertToType(data['servers'], ['String']);
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
            if (data.hasOwnProperty('trustore')) {
                obj['trustore'] = ApiClient.convertToType(data['trustore'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KafkaConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KafkaConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KafkaConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['keyPass'] && !(typeof data['keyPass'] === 'string' || data['keyPass'] instanceof String)) {
            throw new Error("Expected the field `keyPass` to be a primitive type in the JSON string but got " + data['keyPass']);
        }
        // ensure the json data is a string
        if (data['keyStore'] && !(typeof data['keyStore'] === 'string' || data['keyStore'] instanceof String)) {
            throw new Error("Expected the field `keyStore` to be a primitive type in the JSON string but got " + data['keyStore']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['servers'])) {
            throw new Error("Expected the field `servers` to be an array in the JSON data but got " + data['servers']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }
        // ensure the json data is a string
        if (data['trustore'] && !(typeof data['trustore'] === 'string' || data['trustore'] instanceof String)) {
            throw new Error("Expected the field `trustore` to be a primitive type in the JSON string but got " + data['trustore']);
        }

        return true;
    }


}

KafkaConfig.RequiredProperties = ["servers"];

/**
 * Optional keypass
 * @member {String} keyPass
 */
KafkaConfig.prototype['keyPass'] = undefined;

/**
 * Optional path to keystore
 * @member {String} keyStore
 */
KafkaConfig.prototype['keyStore'] = undefined;

/**
 * URLs of the kafka servers
 * @member {Array.<String>} servers
 */
KafkaConfig.prototype['servers'] = undefined;

/**
 * Optional kafka topic (otoroshi-events by default)
 * @member {String} topic
 */
KafkaConfig.prototype['topic'] = undefined;

/**
 * Optional path to trustore
 * @member {String} trustore
 */
KafkaConfig.prototype['trustore'] = undefined;






export default KafkaConfig;

