/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Stats model module.
 * @module model/Stats
 * @version 1.5.0-dev
 */
class Stats {
    /**
     * Constructs a new <code>Stats</code>.
     * Live stats for a service or globally
     * @alias module:model/Stats
     * @param calls {Number} Number of calls on the specified service or globally
     * @param concurrentHandledRequests {Number} The number of concurrent request currently
     * @param dataIn {Number} The amount of data sent to the specified service or Otoroshi globally
     * @param dataInRate {Number} The rate of data sent to the specified service or Otoroshi globally
     * @param dataOut {Number} The amount of data sent from the specified service or Otoroshi globally
     * @param dataOutRate {Number} The rate of data sent from the specified service or Otoroshi globally
     * @param duration {Number} The average duration for a call
     * @param overhead {Number} The average overhead time induced by Otoroshi for each call
     * @param rate {Number} The rate of data sent from and to the specified service or Otoroshi globally
     */
    constructor(calls, concurrentHandledRequests, dataIn, dataInRate, dataOut, dataOutRate, duration, overhead, rate) { 
        
        Stats.initialize(this, calls, concurrentHandledRequests, dataIn, dataInRate, dataOut, dataOutRate, duration, overhead, rate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, calls, concurrentHandledRequests, dataIn, dataInRate, dataOut, dataOutRate, duration, overhead, rate) { 
        obj['calls'] = calls;
        obj['concurrentHandledRequests'] = concurrentHandledRequests;
        obj['dataIn'] = dataIn;
        obj['dataInRate'] = dataInRate;
        obj['dataOut'] = dataOut;
        obj['dataOutRate'] = dataOutRate;
        obj['duration'] = duration;
        obj['overhead'] = overhead;
        obj['rate'] = rate;
    }

    /**
     * Constructs a <code>Stats</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Stats} obj Optional instance to populate.
     * @return {module:model/Stats} The populated <code>Stats</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Stats();

            if (data.hasOwnProperty('calls')) {
                obj['calls'] = ApiClient.convertToType(data['calls'], 'Number');
            }
            if (data.hasOwnProperty('concurrentHandledRequests')) {
                obj['concurrentHandledRequests'] = ApiClient.convertToType(data['concurrentHandledRequests'], 'Number');
            }
            if (data.hasOwnProperty('dataIn')) {
                obj['dataIn'] = ApiClient.convertToType(data['dataIn'], 'Number');
            }
            if (data.hasOwnProperty('dataInRate')) {
                obj['dataInRate'] = ApiClient.convertToType(data['dataInRate'], 'Number');
            }
            if (data.hasOwnProperty('dataOut')) {
                obj['dataOut'] = ApiClient.convertToType(data['dataOut'], 'Number');
            }
            if (data.hasOwnProperty('dataOutRate')) {
                obj['dataOutRate'] = ApiClient.convertToType(data['dataOutRate'], 'Number');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('overhead')) {
                obj['overhead'] = ApiClient.convertToType(data['overhead'], 'Number');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Stats</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Stats</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Stats.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

Stats.RequiredProperties = ["calls", "concurrentHandledRequests", "dataIn", "dataInRate", "dataOut", "dataOutRate", "duration", "overhead", "rate"];

/**
 * Number of calls on the specified service or globally
 * @member {Number} calls
 */
Stats.prototype['calls'] = undefined;

/**
 * The number of concurrent request currently
 * @member {Number} concurrentHandledRequests
 */
Stats.prototype['concurrentHandledRequests'] = undefined;

/**
 * The amount of data sent to the specified service or Otoroshi globally
 * @member {Number} dataIn
 */
Stats.prototype['dataIn'] = undefined;

/**
 * The rate of data sent to the specified service or Otoroshi globally
 * @member {Number} dataInRate
 */
Stats.prototype['dataInRate'] = undefined;

/**
 * The amount of data sent from the specified service or Otoroshi globally
 * @member {Number} dataOut
 */
Stats.prototype['dataOut'] = undefined;

/**
 * The rate of data sent from the specified service or Otoroshi globally
 * @member {Number} dataOutRate
 */
Stats.prototype['dataOutRate'] = undefined;

/**
 * The average duration for a call
 * @member {Number} duration
 */
Stats.prototype['duration'] = undefined;

/**
 * The average overhead time induced by Otoroshi for each call
 * @member {Number} overhead
 */
Stats.prototype['overhead'] = undefined;

/**
 * The rate of data sent from and to the specified service or Otoroshi globally
 * @member {Number} rate
 */
Stats.prototype['rate'] = undefined;






export default Stats;

