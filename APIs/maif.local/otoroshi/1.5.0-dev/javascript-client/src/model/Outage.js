/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Outage model module.
 * @module model/Outage
 * @version 1.5.0-dev
 */
class Outage {
    /**
     * Constructs a new <code>Outage</code>.
     * An outage by the Snow Monkey on a service
     * @alias module:model/Outage
     * @param descriptorId {String} The service impacted by outage
     * @param descriptorName {String} The name of service impacted by outage
     * @param duration {Number} The duration of the outage
     * @param until {String} The end of the outage
     */
    constructor(descriptorId, descriptorName, duration, until) { 
        
        Outage.initialize(this, descriptorId, descriptorName, duration, until);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, descriptorId, descriptorName, duration, until) { 
        obj['descriptorId'] = descriptorId;
        obj['descriptorName'] = descriptorName;
        obj['duration'] = duration;
        obj['until'] = until;
    }

    /**
     * Constructs a <code>Outage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Outage} obj Optional instance to populate.
     * @return {module:model/Outage} The populated <code>Outage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Outage();

            if (data.hasOwnProperty('descriptorId')) {
                obj['descriptorId'] = ApiClient.convertToType(data['descriptorId'], 'String');
            }
            if (data.hasOwnProperty('descriptorName')) {
                obj['descriptorName'] = ApiClient.convertToType(data['descriptorName'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('until')) {
                obj['until'] = ApiClient.convertToType(data['until'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Outage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Outage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Outage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['descriptorId'] && !(typeof data['descriptorId'] === 'string' || data['descriptorId'] instanceof String)) {
            throw new Error("Expected the field `descriptorId` to be a primitive type in the JSON string but got " + data['descriptorId']);
        }
        // ensure the json data is a string
        if (data['descriptorName'] && !(typeof data['descriptorName'] === 'string' || data['descriptorName'] instanceof String)) {
            throw new Error("Expected the field `descriptorName` to be a primitive type in the JSON string but got " + data['descriptorName']);
        }
        // ensure the json data is a string
        if (data['until'] && !(typeof data['until'] === 'string' || data['until'] instanceof String)) {
            throw new Error("Expected the field `until` to be a primitive type in the JSON string but got " + data['until']);
        }

        return true;
    }


}

Outage.RequiredProperties = ["descriptorId", "descriptorName", "duration", "until"];

/**
 * The service impacted by outage
 * @member {String} descriptorId
 */
Outage.prototype['descriptorId'] = undefined;

/**
 * The name of service impacted by outage
 * @member {String} descriptorName
 */
Outage.prototype['descriptorName'] = undefined;

/**
 * The duration of the outage
 * @member {Number} duration
 */
Outage.prototype['duration'] = undefined;

/**
 * The end of the outage
 * @member {String} until
 */
Outage.prototype['until'] = undefined;






export default Outage;

