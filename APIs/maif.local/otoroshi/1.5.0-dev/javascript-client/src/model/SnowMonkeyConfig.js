/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChaosConfig from './ChaosConfig';
import OutageStrategy from './OutageStrategy';

/**
 * The SnowMonkeyConfig model module.
 * @module model/SnowMonkeyConfig
 * @version 1.5.0-dev
 */
class SnowMonkeyConfig {
    /**
     * Constructs a new <code>SnowMonkeyConfig</code>.
     * Configuration for the faults that can be injected in requests. The name Snow Monkey is an hommage to Netflix&#39;s Chaos Monkey ðŸ˜‰
     * @alias module:model/SnowMonkeyConfig
     * @param chaosConfig {module:model/ChaosConfig} 
     * @param dryRun {Boolean} Whether or not outages will actualy impact requests
     * @param enabled {Boolean} Whether or not this config is enabled
     * @param includeUserFacingDescriptors {Boolean} Whether or not user facing apps. will be impacted by Snow Monkey
     * @param outageDurationFrom {Number} Start of outage duration range
     * @param outageDurationTo {Number} End of outage duration range
     * @param outageStrategy {module:model/OutageStrategy} 
     * @param startTime {String} Start time of Snow Monkey each day
     * @param stopTime {String} Stop time of Snow Monkey each day
     * @param targetGroups {Array.<String>} Groups impacted by Snow Monkey. If empty, all groups will be impacted
     * @param timesPerDay {Number} Number of time per day each service will be outage
     */
    constructor(chaosConfig, dryRun, enabled, includeUserFacingDescriptors, outageDurationFrom, outageDurationTo, outageStrategy, startTime, stopTime, targetGroups, timesPerDay) { 
        
        SnowMonkeyConfig.initialize(this, chaosConfig, dryRun, enabled, includeUserFacingDescriptors, outageDurationFrom, outageDurationTo, outageStrategy, startTime, stopTime, targetGroups, timesPerDay);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chaosConfig, dryRun, enabled, includeUserFacingDescriptors, outageDurationFrom, outageDurationTo, outageStrategy, startTime, stopTime, targetGroups, timesPerDay) { 
        obj['chaosConfig'] = chaosConfig;
        obj['dryRun'] = dryRun;
        obj['enabled'] = enabled;
        obj['includeUserFacingDescriptors'] = includeUserFacingDescriptors;
        obj['outageDurationFrom'] = outageDurationFrom;
        obj['outageDurationTo'] = outageDurationTo;
        obj['outageStrategy'] = outageStrategy;
        obj['startTime'] = startTime;
        obj['stopTime'] = stopTime;
        obj['targetGroups'] = targetGroups;
        obj['timesPerDay'] = timesPerDay;
    }

    /**
     * Constructs a <code>SnowMonkeyConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SnowMonkeyConfig} obj Optional instance to populate.
     * @return {module:model/SnowMonkeyConfig} The populated <code>SnowMonkeyConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SnowMonkeyConfig();

            if (data.hasOwnProperty('chaosConfig')) {
                obj['chaosConfig'] = ChaosConfig.constructFromObject(data['chaosConfig']);
            }
            if (data.hasOwnProperty('dryRun')) {
                obj['dryRun'] = ApiClient.convertToType(data['dryRun'], 'Boolean');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('includeUserFacingDescriptors')) {
                obj['includeUserFacingDescriptors'] = ApiClient.convertToType(data['includeUserFacingDescriptors'], 'Boolean');
            }
            if (data.hasOwnProperty('outageDurationFrom')) {
                obj['outageDurationFrom'] = ApiClient.convertToType(data['outageDurationFrom'], 'Number');
            }
            if (data.hasOwnProperty('outageDurationTo')) {
                obj['outageDurationTo'] = ApiClient.convertToType(data['outageDurationTo'], 'Number');
            }
            if (data.hasOwnProperty('outageStrategy')) {
                obj['outageStrategy'] = OutageStrategy.constructFromObject(data['outageStrategy']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('stopTime')) {
                obj['stopTime'] = ApiClient.convertToType(data['stopTime'], 'String');
            }
            if (data.hasOwnProperty('targetGroups')) {
                obj['targetGroups'] = ApiClient.convertToType(data['targetGroups'], ['String']);
            }
            if (data.hasOwnProperty('timesPerDay')) {
                obj['timesPerDay'] = ApiClient.convertToType(data['timesPerDay'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SnowMonkeyConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SnowMonkeyConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SnowMonkeyConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `chaosConfig`
        if (data['chaosConfig']) { // data not null
          ChaosConfig.validateJSON(data['chaosConfig']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['stopTime'] && !(typeof data['stopTime'] === 'string' || data['stopTime'] instanceof String)) {
            throw new Error("Expected the field `stopTime` to be a primitive type in the JSON string but got " + data['stopTime']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['targetGroups'])) {
            throw new Error("Expected the field `targetGroups` to be an array in the JSON data but got " + data['targetGroups']);
        }

        return true;
    }


}

SnowMonkeyConfig.RequiredProperties = ["chaosConfig", "dryRun", "enabled", "includeUserFacingDescriptors", "outageDurationFrom", "outageDurationTo", "outageStrategy", "startTime", "stopTime", "targetGroups", "timesPerDay"];

/**
 * @member {module:model/ChaosConfig} chaosConfig
 */
SnowMonkeyConfig.prototype['chaosConfig'] = undefined;

/**
 * Whether or not outages will actualy impact requests
 * @member {Boolean} dryRun
 */
SnowMonkeyConfig.prototype['dryRun'] = undefined;

/**
 * Whether or not this config is enabled
 * @member {Boolean} enabled
 */
SnowMonkeyConfig.prototype['enabled'] = undefined;

/**
 * Whether or not user facing apps. will be impacted by Snow Monkey
 * @member {Boolean} includeUserFacingDescriptors
 */
SnowMonkeyConfig.prototype['includeUserFacingDescriptors'] = undefined;

/**
 * Start of outage duration range
 * @member {Number} outageDurationFrom
 */
SnowMonkeyConfig.prototype['outageDurationFrom'] = undefined;

/**
 * End of outage duration range
 * @member {Number} outageDurationTo
 */
SnowMonkeyConfig.prototype['outageDurationTo'] = undefined;

/**
 * @member {module:model/OutageStrategy} outageStrategy
 */
SnowMonkeyConfig.prototype['outageStrategy'] = undefined;

/**
 * Start time of Snow Monkey each day
 * @member {String} startTime
 */
SnowMonkeyConfig.prototype['startTime'] = undefined;

/**
 * Stop time of Snow Monkey each day
 * @member {String} stopTime
 */
SnowMonkeyConfig.prototype['stopTime'] = undefined;

/**
 * Groups impacted by Snow Monkey. If empty, all groups will be impacted
 * @member {Array.<String>} targetGroups
 */
SnowMonkeyConfig.prototype['targetGroups'] = undefined;

/**
 * Number of time per day each service will be outage
 * @member {Number} timesPerDay
 */
SnowMonkeyConfig.prototype['timesPerDay'] = undefined;






export default SnowMonkeyConfig;

