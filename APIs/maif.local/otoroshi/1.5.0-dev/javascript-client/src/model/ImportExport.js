/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GlobalConfig from './GlobalConfig';
import ImportExportAdminsInner from './ImportExportAdminsInner';
import ImportExportApiKeysInner from './ImportExportApiKeysInner';
import ImportExportErrorTemplatesInner from './ImportExportErrorTemplatesInner';
import ImportExportServiceDescriptorsInner from './ImportExportServiceDescriptorsInner';
import ImportExportServiceGroupsInner from './ImportExportServiceGroupsInner';
import ImportExportSimpleAdminsInner from './ImportExportSimpleAdminsInner';
import ImportExportStats from './ImportExportStats';

/**
 * The ImportExport model module.
 * @module model/ImportExport
 * @version 1.5.0-dev
 */
class ImportExport {
    /**
     * Constructs a new <code>ImportExport</code>.
     * The structure that can be imported to or exported from Otoroshi. It represent the memory state of Otoroshi
     * @alias module:model/ImportExport
     * @param admins {Array.<module:model/ImportExportAdminsInner>} Current U2F admin at the time of export
     * @param apiKeys {Array.<module:model/ImportExportApiKeysInner>} Current apik keys at the time of export
     * @param config {module:model/GlobalConfig} 
     * @param date {Date} 
     * @param dateRaw {Number} 
     * @param errorTemplates {Array.<module:model/ImportExportErrorTemplatesInner>} Current error templates at the time of export
     * @param label {String} 
     * @param serviceDescriptors {Array.<module:model/ImportExportServiceDescriptorsInner>} Current service descriptors at the time of export
     * @param serviceGroups {Array.<module:model/ImportExportServiceGroupsInner>} Current service groups at the time of export
     * @param simpleAdmins {Array.<module:model/ImportExportSimpleAdminsInner>} Current simple admins at the time of export
     * @param stats {module:model/ImportExportStats} 
     */
    constructor(admins, apiKeys, config, date, dateRaw, errorTemplates, label, serviceDescriptors, serviceGroups, simpleAdmins, stats) { 
        
        ImportExport.initialize(this, admins, apiKeys, config, date, dateRaw, errorTemplates, label, serviceDescriptors, serviceGroups, simpleAdmins, stats);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, admins, apiKeys, config, date, dateRaw, errorTemplates, label, serviceDescriptors, serviceGroups, simpleAdmins, stats) { 
        obj['admins'] = admins;
        obj['apiKeys'] = apiKeys;
        obj['config'] = config;
        obj['date'] = date;
        obj['dateRaw'] = dateRaw;
        obj['errorTemplates'] = errorTemplates;
        obj['label'] = label;
        obj['serviceDescriptors'] = serviceDescriptors;
        obj['serviceGroups'] = serviceGroups;
        obj['simpleAdmins'] = simpleAdmins;
        obj['stats'] = stats;
    }

    /**
     * Constructs a <code>ImportExport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportExport} obj Optional instance to populate.
     * @return {module:model/ImportExport} The populated <code>ImportExport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportExport();

            if (data.hasOwnProperty('admins')) {
                obj['admins'] = ApiClient.convertToType(data['admins'], [ImportExportAdminsInner]);
            }
            if (data.hasOwnProperty('apiKeys')) {
                obj['apiKeys'] = ApiClient.convertToType(data['apiKeys'], [ImportExportApiKeysInner]);
            }
            if (data.hasOwnProperty('appConfig')) {
                obj['appConfig'] = ApiClient.convertToType(data['appConfig'], {'String': 'String'});
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = GlobalConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('dateRaw')) {
                obj['dateRaw'] = ApiClient.convertToType(data['dateRaw'], 'Number');
            }
            if (data.hasOwnProperty('errorTemplates')) {
                obj['errorTemplates'] = ApiClient.convertToType(data['errorTemplates'], [ImportExportErrorTemplatesInner]);
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('serviceDescriptors')) {
                obj['serviceDescriptors'] = ApiClient.convertToType(data['serviceDescriptors'], [ImportExportServiceDescriptorsInner]);
            }
            if (data.hasOwnProperty('serviceGroups')) {
                obj['serviceGroups'] = ApiClient.convertToType(data['serviceGroups'], [ImportExportServiceGroupsInner]);
            }
            if (data.hasOwnProperty('simpleAdmins')) {
                obj['simpleAdmins'] = ApiClient.convertToType(data['simpleAdmins'], [ImportExportSimpleAdminsInner]);
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = ImportExportStats.constructFromObject(data['stats']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportExport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportExport</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImportExport.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['admins']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['admins'])) {
                throw new Error("Expected the field `admins` to be an array in the JSON data but got " + data['admins']);
            }
            // validate the optional field `admins` (array)
            for (const item of data['admins']) {
                ImportExportAdminsInner.validateJSON(item);
            };
        }
        if (data['apiKeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['apiKeys'])) {
                throw new Error("Expected the field `apiKeys` to be an array in the JSON data but got " + data['apiKeys']);
            }
            // validate the optional field `apiKeys` (array)
            for (const item of data['apiKeys']) {
                ImportExportApiKeysInner.validateJSON(item);
            };
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          GlobalConfig.validateJSON(data['config']);
        }
        if (data['errorTemplates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errorTemplates'])) {
                throw new Error("Expected the field `errorTemplates` to be an array in the JSON data but got " + data['errorTemplates']);
            }
            // validate the optional field `errorTemplates` (array)
            for (const item of data['errorTemplates']) {
                ImportExportErrorTemplatesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        if (data['serviceDescriptors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['serviceDescriptors'])) {
                throw new Error("Expected the field `serviceDescriptors` to be an array in the JSON data but got " + data['serviceDescriptors']);
            }
            // validate the optional field `serviceDescriptors` (array)
            for (const item of data['serviceDescriptors']) {
                ImportExportServiceDescriptorsInner.validateJSON(item);
            };
        }
        if (data['serviceGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['serviceGroups'])) {
                throw new Error("Expected the field `serviceGroups` to be an array in the JSON data but got " + data['serviceGroups']);
            }
            // validate the optional field `serviceGroups` (array)
            for (const item of data['serviceGroups']) {
                ImportExportServiceGroupsInner.validateJSON(item);
            };
        }
        if (data['simpleAdmins']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['simpleAdmins'])) {
                throw new Error("Expected the field `simpleAdmins` to be an array in the JSON data but got " + data['simpleAdmins']);
            }
            // validate the optional field `simpleAdmins` (array)
            for (const item of data['simpleAdmins']) {
                ImportExportSimpleAdminsInner.validateJSON(item);
            };
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          ImportExportStats.validateJSON(data['stats']);
        }

        return true;
    }


}

ImportExport.RequiredProperties = ["admins", "apiKeys", "config", "date", "dateRaw", "errorTemplates", "label", "serviceDescriptors", "serviceGroups", "simpleAdmins", "stats"];

/**
 * Current U2F admin at the time of export
 * @member {Array.<module:model/ImportExportAdminsInner>} admins
 */
ImportExport.prototype['admins'] = undefined;

/**
 * Current apik keys at the time of export
 * @member {Array.<module:model/ImportExportApiKeysInner>} apiKeys
 */
ImportExport.prototype['apiKeys'] = undefined;

/**
 * Current env variables at the time of export
 * @member {Object.<String, String>} appConfig
 */
ImportExport.prototype['appConfig'] = undefined;

/**
 * @member {module:model/GlobalConfig} config
 */
ImportExport.prototype['config'] = undefined;

/**
 * @member {Date} date
 */
ImportExport.prototype['date'] = undefined;

/**
 * @member {Number} dateRaw
 */
ImportExport.prototype['dateRaw'] = undefined;

/**
 * Current error templates at the time of export
 * @member {Array.<module:model/ImportExportErrorTemplatesInner>} errorTemplates
 */
ImportExport.prototype['errorTemplates'] = undefined;

/**
 * @member {String} label
 */
ImportExport.prototype['label'] = undefined;

/**
 * Current service descriptors at the time of export
 * @member {Array.<module:model/ImportExportServiceDescriptorsInner>} serviceDescriptors
 */
ImportExport.prototype['serviceDescriptors'] = undefined;

/**
 * Current service groups at the time of export
 * @member {Array.<module:model/ImportExportServiceGroupsInner>} serviceGroups
 */
ImportExport.prototype['serviceGroups'] = undefined;

/**
 * Current simple admins at the time of export
 * @member {Array.<module:model/ImportExportSimpleAdminsInner>} simpleAdmins
 */
ImportExport.prototype['simpleAdmins'] = undefined;

/**
 * @member {module:model/ImportExportStats} stats
 */
ImportExport.prototype['stats'] = undefined;






export default ImportExport;

