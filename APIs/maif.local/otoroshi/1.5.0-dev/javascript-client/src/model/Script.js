/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Script model module.
 * @module model/Script
 * @version 1.5.0-dev
 */
class Script {
    /**
     * Constructs a new <code>Script</code>.
     * A script to transformer otoroshi requests 
     * @alias module:model/Script
     * @param code {Object.<String, String>} The code of the script
     * @param desc {Object.<String, String>} The description of the script
     * @param id {String} The id of the script
     * @param name {String} The name of the script
     */
    constructor(code, desc, id, name) { 
        
        Script.initialize(this, code, desc, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, desc, id, name) { 
        obj['code'] = code;
        obj['desc'] = desc;
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Script</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Script} obj Optional instance to populate.
     * @return {module:model/Script} The populated <code>Script</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Script();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], {'String': 'String'});
            }
            if (data.hasOwnProperty('desc')) {
                obj['desc'] = ApiClient.convertToType(data['desc'], {'String': 'String'});
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Script</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Script</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Script.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

Script.RequiredProperties = ["code", "desc", "id", "name"];

/**
 * The code of the script
 * @member {Object.<String, String>} code
 */
Script.prototype['code'] = undefined;

/**
 * The description of the script
 * @member {Object.<String, String>} desc
 */
Script.prototype['desc'] = undefined;

/**
 * The id of the script
 * @member {String} id
 */
Script.prototype['id'] = undefined;

/**
 * The name of the script
 * @member {String} name
 */
Script.prototype['name'] = undefined;






export default Script;

