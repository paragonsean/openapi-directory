/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LatencyInjectionFaultConfig model module.
 * @module model/LatencyInjectionFaultConfig
 * @version 1.5.0-dev
 */
class LatencyInjectionFaultConfig {
    /**
     * Constructs a new <code>LatencyInjectionFaultConfig</code>.
     * Config for large latency injection fault
     * @alias module:model/LatencyInjectionFaultConfig
     * @param from {Number} The start range of latency added to the request
     * @param ratio {Number} The percentage of requests affected by this fault. Value should be between 0.0 and 1.0
     * @param to {Number} The end range of latency added to the request
     */
    constructor(from, ratio, to) { 
        
        LatencyInjectionFaultConfig.initialize(this, from, ratio, to);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, from, ratio, to) { 
        obj['from'] = from;
        obj['ratio'] = ratio;
        obj['to'] = to;
    }

    /**
     * Constructs a <code>LatencyInjectionFaultConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LatencyInjectionFaultConfig} obj Optional instance to populate.
     * @return {module:model/LatencyInjectionFaultConfig} The populated <code>LatencyInjectionFaultConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LatencyInjectionFaultConfig();

            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'Number');
            }
            if (data.hasOwnProperty('ratio')) {
                obj['ratio'] = ApiClient.convertToType(data['ratio'], 'Number');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LatencyInjectionFaultConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LatencyInjectionFaultConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LatencyInjectionFaultConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

LatencyInjectionFaultConfig.RequiredProperties = ["from", "ratio", "to"];

/**
 * The start range of latency added to the request
 * @member {Number} from
 */
LatencyInjectionFaultConfig.prototype['from'] = undefined;

/**
 * The percentage of requests affected by this fault. Value should be between 0.0 and 1.0
 * @member {Number} ratio
 */
LatencyInjectionFaultConfig.prototype['ratio'] = undefined;

/**
 * The end range of latency added to the request
 * @member {Number} to
 */
LatencyInjectionFaultConfig.prototype['to'] = undefined;






export default LatencyInjectionFaultConfig;

