/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExposedApi model module.
 * @module model/ExposedApi
 * @version 1.5.0-dev
 */
class ExposedApi {
    /**
     * Constructs a new <code>ExposedApi</code>.
     * The Open API configuration for your service (if one)
     * @alias module:model/ExposedApi
     * @param exposeApi {Boolean} Whether or not the current service expose an API with an Open API descriptor
     */
    constructor(exposeApi) { 
        
        ExposedApi.initialize(this, exposeApi);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, exposeApi) { 
        obj['exposeApi'] = exposeApi;
    }

    /**
     * Constructs a <code>ExposedApi</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExposedApi} obj Optional instance to populate.
     * @return {module:model/ExposedApi} The populated <code>ExposedApi</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExposedApi();

            if (data.hasOwnProperty('exposeApi')) {
                obj['exposeApi'] = ApiClient.convertToType(data['exposeApi'], 'Boolean');
            }
            if (data.hasOwnProperty('openApiDescriptorUrl')) {
                obj['openApiDescriptorUrl'] = ApiClient.convertToType(data['openApiDescriptorUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExposedApi</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExposedApi</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExposedApi.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['openApiDescriptorUrl'] && !(typeof data['openApiDescriptorUrl'] === 'string' || data['openApiDescriptorUrl'] instanceof String)) {
            throw new Error("Expected the field `openApiDescriptorUrl` to be a primitive type in the JSON string but got " + data['openApiDescriptorUrl']);
        }

        return true;
    }


}

ExposedApi.RequiredProperties = ["exposeApi"];

/**
 * Whether or not the current service expose an API with an Open API descriptor
 * @member {Boolean} exposeApi
 */
ExposedApi.prototype['exposeApi'] = undefined;

/**
 * The URL of the Open API descriptor
 * @member {String} openApiDescriptorUrl
 */
ExposedApi.prototype['openApiDescriptorUrl'] = undefined;






export default ExposedApi;

