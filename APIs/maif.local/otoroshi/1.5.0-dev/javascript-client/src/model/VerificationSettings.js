/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MappingSettings from './MappingSettings';

/**
 * The VerificationSettings model module.
 * @module model/VerificationSettings
 * @version 1.5.0-dev
 */
class VerificationSettings {
    /**
     * Constructs a new <code>VerificationSettings</code>.
     * Settings to verify the value of JWT token fields
     * @alias module:model/VerificationSettings
     * @param fields {Object.<String, String>} Fields to verify with their values
     */
    constructor(fields) { 
        
        VerificationSettings.initialize(this, fields);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fields) { 
        obj['fields'] = fields;
    }

    /**
     * Constructs a <code>VerificationSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerificationSettings} obj Optional instance to populate.
     * @return {module:model/VerificationSettings} The populated <code>VerificationSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VerificationSettings();

            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], {'String': 'String'});
            }
            if (data.hasOwnProperty('mappingSettings')) {
                obj['mappingSettings'] = MappingSettings.constructFromObject(data['mappingSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VerificationSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VerificationSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VerificationSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `mappingSettings`
        if (data['mappingSettings']) { // data not null
          MappingSettings.validateJSON(data['mappingSettings']);
        }

        return true;
    }


}

VerificationSettings.RequiredProperties = ["fields"];

/**
 * Fields to verify with their values
 * @member {Object.<String, String>} fields
 */
VerificationSettings.prototype['fields'] = undefined;

/**
 * @member {module:model/MappingSettings} mappingSettings
 */
VerificationSettings.prototype['mappingSettings'] = undefined;






export default VerificationSettings;

