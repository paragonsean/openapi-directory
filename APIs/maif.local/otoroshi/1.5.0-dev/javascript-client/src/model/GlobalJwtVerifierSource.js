/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InCookie from './InCookie';
import InHeader from './InHeader';
import InQueryParam from './InQueryParam';

/**
 * The GlobalJwtVerifierSource model module.
 * @module model/GlobalJwtVerifierSource
 * @version 1.5.0-dev
 */
class GlobalJwtVerifierSource {
    /**
     * Constructs a new <code>GlobalJwtVerifierSource</code>.
     * @alias module:model/GlobalJwtVerifierSource
     * @param {(module:model/InCookie|module:model/InHeader|module:model/InQueryParam)} instance The actual instance to initialize GlobalJwtVerifierSource.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "InQueryParam") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                InQueryParam.validateJSON(instance); // throw an exception if no match
                // create InQueryParam from JS object
                this.actualInstance = InQueryParam.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into InQueryParam
            errorMessages.push("Failed to construct InQueryParam: " + err)
        }

        try {
            if (typeof instance === "InHeader") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                InHeader.validateJSON(instance); // throw an exception if no match
                // create InHeader from JS object
                this.actualInstance = InHeader.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into InHeader
            errorMessages.push("Failed to construct InHeader: " + err)
        }

        try {
            if (typeof instance === "InCookie") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                InCookie.validateJSON(instance); // throw an exception if no match
                // create InCookie from JS object
                this.actualInstance = InCookie.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into InCookie
            errorMessages.push("Failed to construct InCookie: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `GlobalJwtVerifierSource` with oneOf schemas InCookie, InHeader, InQueryParam. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `GlobalJwtVerifierSource` with oneOf schemas InCookie, InHeader, InQueryParam. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>GlobalJwtVerifierSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GlobalJwtVerifierSource} obj Optional instance to populate.
     * @return {module:model/GlobalJwtVerifierSource} The populated <code>GlobalJwtVerifierSource</code> instance.
     */
    static constructFromObject(data, obj) {
        return new GlobalJwtVerifierSource(data);
    }

    /**
     * Gets the actual instance, which can be <code>InCookie</code>, <code>InHeader</code>, <code>InQueryParam</code>.
     * @return {(module:model/InCookie|module:model/InHeader|module:model/InQueryParam)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>InCookie</code>, <code>InHeader</code>, <code>InQueryParam</code>.
     * @param {(module:model/InCookie|module:model/InHeader|module:model/InQueryParam)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = GlobalJwtVerifierSource.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of GlobalJwtVerifierSource from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/GlobalJwtVerifierSource} An instance of GlobalJwtVerifierSource.
     */
    static fromJSON = function(json_string){
        return GlobalJwtVerifierSource.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * Name of the cookie
 * @member {String} name
 */
GlobalJwtVerifierSource.prototype['name'] = undefined;

/**
 * String with value InCookie
 * @member {String} type
 */
GlobalJwtVerifierSource.prototype['type'] = undefined;

/**
 * Remove regex inside the value, like 'Bearer '
 * @member {String} remove
 */
GlobalJwtVerifierSource.prototype['remove'] = undefined;


GlobalJwtVerifierSource.OneOf = ["InCookie", "InHeader", "InQueryParam"];

export default GlobalJwtVerifierSource;

