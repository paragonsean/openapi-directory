/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IpFiltering model module.
 * @module model/IpFiltering
 * @version 1.5.0-dev
 */
class IpFiltering {
    /**
     * Constructs a new <code>IpFiltering</code>.
     * The filtering configuration block for a service of globally.
     * @alias module:model/IpFiltering
     * @param blacklist {Array.<String>} Blacklisted IP addresses
     * @param whitelist {Array.<String>} Whitelisted IP addresses
     */
    constructor(blacklist, whitelist) { 
        
        IpFiltering.initialize(this, blacklist, whitelist);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, blacklist, whitelist) { 
        obj['blacklist'] = blacklist;
        obj['whitelist'] = whitelist;
    }

    /**
     * Constructs a <code>IpFiltering</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IpFiltering} obj Optional instance to populate.
     * @return {module:model/IpFiltering} The populated <code>IpFiltering</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IpFiltering();

            if (data.hasOwnProperty('blacklist')) {
                obj['blacklist'] = ApiClient.convertToType(data['blacklist'], ['String']);
            }
            if (data.hasOwnProperty('whitelist')) {
                obj['whitelist'] = ApiClient.convertToType(data['whitelist'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IpFiltering</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IpFiltering</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IpFiltering.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blacklist'])) {
            throw new Error("Expected the field `blacklist` to be an array in the JSON data but got " + data['blacklist']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['whitelist'])) {
            throw new Error("Expected the field `whitelist` to be an array in the JSON data but got " + data['whitelist']);
        }

        return true;
    }


}

IpFiltering.RequiredProperties = ["blacklist", "whitelist"];

/**
 * Blacklisted IP addresses
 * @member {Array.<String>} blacklist
 */
IpFiltering.prototype['blacklist'] = undefined;

/**
 * Whitelisted IP addresses
 * @member {Array.<String>} whitelist
 */
IpFiltering.prototype['whitelist'] = undefined;






export default IpFiltering;

