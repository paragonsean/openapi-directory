/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GlobalJwtVerifierAlgoSettings from './GlobalJwtVerifierAlgoSettings';
import PassThrough from './PassThrough';
import Sign from './Sign';
import Transform from './Transform';
import TransformSettings from './TransformSettings';
import VerificationSettings from './VerificationSettings';

/**
 * The GlobalJwtVerifierStrategy model module.
 * @module model/GlobalJwtVerifierStrategy
 * @version 1.5.0-dev
 */
class GlobalJwtVerifierStrategy {
    /**
     * Constructs a new <code>GlobalJwtVerifierStrategy</code>.
     * @alias module:model/GlobalJwtVerifierStrategy
     * @param {(module:model/PassThrough|module:model/Sign|module:model/Transform)} instance The actual instance to initialize GlobalJwtVerifierStrategy.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "PassThrough") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PassThrough.validateJSON(instance); // throw an exception if no match
                // create PassThrough from JS object
                this.actualInstance = PassThrough.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PassThrough
            errorMessages.push("Failed to construct PassThrough: " + err)
        }

        try {
            if (typeof instance === "Sign") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Sign.validateJSON(instance); // throw an exception if no match
                // create Sign from JS object
                this.actualInstance = Sign.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Sign
            errorMessages.push("Failed to construct Sign: " + err)
        }

        try {
            if (typeof instance === "Transform") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Transform.validateJSON(instance); // throw an exception if no match
                // create Transform from JS object
                this.actualInstance = Transform.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Transform
            errorMessages.push("Failed to construct Transform: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `GlobalJwtVerifierStrategy` with oneOf schemas PassThrough, Sign, Transform. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `GlobalJwtVerifierStrategy` with oneOf schemas PassThrough, Sign, Transform. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>GlobalJwtVerifierStrategy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GlobalJwtVerifierStrategy} obj Optional instance to populate.
     * @return {module:model/GlobalJwtVerifierStrategy} The populated <code>GlobalJwtVerifierStrategy</code> instance.
     */
    static constructFromObject(data, obj) {
        return new GlobalJwtVerifierStrategy(data);
    }

    /**
     * Gets the actual instance, which can be <code>PassThrough</code>, <code>Sign</code>, <code>Transform</code>.
     * @return {(module:model/PassThrough|module:model/Sign|module:model/Transform)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>PassThrough</code>, <code>Sign</code>, <code>Transform</code>.
     * @param {(module:model/PassThrough|module:model/Sign|module:model/Transform)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = GlobalJwtVerifierStrategy.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of GlobalJwtVerifierStrategy from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/GlobalJwtVerifierStrategy} An instance of GlobalJwtVerifierStrategy.
     */
    static fromJSON = function(json_string){
        return GlobalJwtVerifierStrategy.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * String with value Transform
 * @member {String} type
 */
GlobalJwtVerifierStrategy.prototype['type'] = undefined;

/**
 * @member {module:model/VerificationSettings} verificationSettings
 */
GlobalJwtVerifierStrategy.prototype['verificationSettings'] = undefined;

/**
 * @member {module:model/GlobalJwtVerifierAlgoSettings} algoSettings
 */
GlobalJwtVerifierStrategy.prototype['algoSettings'] = undefined;

/**
 * @member {module:model/TransformSettings} transformSettings
 */
GlobalJwtVerifierStrategy.prototype['transformSettings'] = undefined;


GlobalJwtVerifierStrategy.OneOf = ["PassThrough", "Sign", "Transform"];

export default GlobalJwtVerifierStrategy;

