/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Gzip model module.
 * @module model/Gzip
 * @version 1.5.0-dev
 */
class Gzip {
    /**
     * Constructs a new <code>Gzip</code>.
     * Configuration for gzip of service responses
     * @alias module:model/Gzip
     * @param blackList {Array.<String>} Blacklisted mime types. Wildcard supported
     * @param bufferSize {Number} Size of the GZip buffer
     * @param chunkedThreshold {Number} Threshold for chunking data
     * @param compressionLevel {Number} Compression level. From 0 to 9
     * @param enabled {Boolean} Whether gzip compression is enabled or not
     * @param excludedPatterns {Array.<String>} Patterns that are excluded from gzipping
     * @param whiteList {Array.<String>} Whitelisted mime types. Wildcard supported
     */
    constructor(blackList, bufferSize, chunkedThreshold, compressionLevel, enabled, excludedPatterns, whiteList) { 
        
        Gzip.initialize(this, blackList, bufferSize, chunkedThreshold, compressionLevel, enabled, excludedPatterns, whiteList);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, blackList, bufferSize, chunkedThreshold, compressionLevel, enabled, excludedPatterns, whiteList) { 
        obj['blackList'] = blackList;
        obj['bufferSize'] = bufferSize;
        obj['chunkedThreshold'] = chunkedThreshold;
        obj['compressionLevel'] = compressionLevel;
        obj['enabled'] = enabled;
        obj['excludedPatterns'] = excludedPatterns;
        obj['whiteList'] = whiteList;
    }

    /**
     * Constructs a <code>Gzip</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Gzip} obj Optional instance to populate.
     * @return {module:model/Gzip} The populated <code>Gzip</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Gzip();

            if (data.hasOwnProperty('blackList')) {
                obj['blackList'] = ApiClient.convertToType(data['blackList'], ['String']);
            }
            if (data.hasOwnProperty('bufferSize')) {
                obj['bufferSize'] = ApiClient.convertToType(data['bufferSize'], 'Number');
            }
            if (data.hasOwnProperty('chunkedThreshold')) {
                obj['chunkedThreshold'] = ApiClient.convertToType(data['chunkedThreshold'], 'Number');
            }
            if (data.hasOwnProperty('compressionLevel')) {
                obj['compressionLevel'] = ApiClient.convertToType(data['compressionLevel'], 'Number');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('excludedPatterns')) {
                obj['excludedPatterns'] = ApiClient.convertToType(data['excludedPatterns'], ['String']);
            }
            if (data.hasOwnProperty('whiteList')) {
                obj['whiteList'] = ApiClient.convertToType(data['whiteList'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Gzip</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Gzip</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Gzip.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blackList'])) {
            throw new Error("Expected the field `blackList` to be an array in the JSON data but got " + data['blackList']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludedPatterns'])) {
            throw new Error("Expected the field `excludedPatterns` to be an array in the JSON data but got " + data['excludedPatterns']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['whiteList'])) {
            throw new Error("Expected the field `whiteList` to be an array in the JSON data but got " + data['whiteList']);
        }

        return true;
    }


}

Gzip.RequiredProperties = ["blackList", "bufferSize", "chunkedThreshold", "compressionLevel", "enabled", "excludedPatterns", "whiteList"];

/**
 * Blacklisted mime types. Wildcard supported
 * @member {Array.<String>} blackList
 */
Gzip.prototype['blackList'] = undefined;

/**
 * Size of the GZip buffer
 * @member {Number} bufferSize
 */
Gzip.prototype['bufferSize'] = undefined;

/**
 * Threshold for chunking data
 * @member {Number} chunkedThreshold
 */
Gzip.prototype['chunkedThreshold'] = undefined;

/**
 * Compression level. From 0 to 9
 * @member {Number} compressionLevel
 */
Gzip.prototype['compressionLevel'] = undefined;

/**
 * Whether gzip compression is enabled or not
 * @member {Boolean} enabled
 */
Gzip.prototype['enabled'] = undefined;

/**
 * Patterns that are excluded from gzipping
 * @member {Array.<String>} excludedPatterns
 */
Gzip.prototype['excludedPatterns'] = undefined;

/**
 * Whitelisted mime types. Wildcard supported
 * @member {Array.<String>} whiteList
 */
Gzip.prototype['whiteList'] = undefined;






export default Gzip;

