/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ClientConfig model module.
 * @module model/ClientConfig
 * @version 1.5.0-dev
 */
class ClientConfig {
    /**
     * Constructs a new <code>ClientConfig</code>.
     * The configuration of the circuit breaker for a service descriptor
     * @alias module:model/ClientConfig
     * @param backoffFactor {Number} Specify the factor to multiply the delay for each retry
     * @param callTimeout {Number} Specify how long each call should last at most in milliseconds
     * @param globalTimeout {Number} Specify how long the global call (with retries) should last at most in milliseconds
     * @param maxErrors {Number} Specify how many errors can pass before opening the circuit breaker
     * @param retries {Number} Specify how many times the client will try to fetch the result of the request after an error before giving up.
     * @param retryInitialDelay {Number} Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor
     * @param sampleInterval {Number} Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted
     * @param useCircuitBreaker {Boolean} Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !
     */
    constructor(backoffFactor, callTimeout, globalTimeout, maxErrors, retries, retryInitialDelay, sampleInterval, useCircuitBreaker) { 
        
        ClientConfig.initialize(this, backoffFactor, callTimeout, globalTimeout, maxErrors, retries, retryInitialDelay, sampleInterval, useCircuitBreaker);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, backoffFactor, callTimeout, globalTimeout, maxErrors, retries, retryInitialDelay, sampleInterval, useCircuitBreaker) { 
        obj['backoffFactor'] = backoffFactor;
        obj['callTimeout'] = callTimeout;
        obj['globalTimeout'] = globalTimeout;
        obj['maxErrors'] = maxErrors;
        obj['retries'] = retries;
        obj['retryInitialDelay'] = retryInitialDelay;
        obj['sampleInterval'] = sampleInterval;
        obj['useCircuitBreaker'] = useCircuitBreaker;
    }

    /**
     * Constructs a <code>ClientConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClientConfig} obj Optional instance to populate.
     * @return {module:model/ClientConfig} The populated <code>ClientConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClientConfig();

            if (data.hasOwnProperty('backoffFactor')) {
                obj['backoffFactor'] = ApiClient.convertToType(data['backoffFactor'], 'Number');
            }
            if (data.hasOwnProperty('callTimeout')) {
                obj['callTimeout'] = ApiClient.convertToType(data['callTimeout'], 'Number');
            }
            if (data.hasOwnProperty('globalTimeout')) {
                obj['globalTimeout'] = ApiClient.convertToType(data['globalTimeout'], 'Number');
            }
            if (data.hasOwnProperty('maxErrors')) {
                obj['maxErrors'] = ApiClient.convertToType(data['maxErrors'], 'Number');
            }
            if (data.hasOwnProperty('retries')) {
                obj['retries'] = ApiClient.convertToType(data['retries'], 'Number');
            }
            if (data.hasOwnProperty('retryInitialDelay')) {
                obj['retryInitialDelay'] = ApiClient.convertToType(data['retryInitialDelay'], 'Number');
            }
            if (data.hasOwnProperty('sampleInterval')) {
                obj['sampleInterval'] = ApiClient.convertToType(data['sampleInterval'], 'Number');
            }
            if (data.hasOwnProperty('useCircuitBreaker')) {
                obj['useCircuitBreaker'] = ApiClient.convertToType(data['useCircuitBreaker'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClientConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClientConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ClientConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

ClientConfig.RequiredProperties = ["backoffFactor", "callTimeout", "globalTimeout", "maxErrors", "retries", "retryInitialDelay", "sampleInterval", "useCircuitBreaker"];

/**
 * Specify the factor to multiply the delay for each retry
 * @member {Number} backoffFactor
 */
ClientConfig.prototype['backoffFactor'] = undefined;

/**
 * Specify how long each call should last at most in milliseconds
 * @member {Number} callTimeout
 */
ClientConfig.prototype['callTimeout'] = undefined;

/**
 * Specify how long the global call (with retries) should last at most in milliseconds
 * @member {Number} globalTimeout
 */
ClientConfig.prototype['globalTimeout'] = undefined;

/**
 * Specify how many errors can pass before opening the circuit breaker
 * @member {Number} maxErrors
 */
ClientConfig.prototype['maxErrors'] = undefined;

/**
 * Specify how many times the client will try to fetch the result of the request after an error before giving up.
 * @member {Number} retries
 */
ClientConfig.prototype['retries'] = undefined;

/**
 * Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor
 * @member {Number} retryInitialDelay
 */
ClientConfig.prototype['retryInitialDelay'] = undefined;

/**
 * Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted
 * @member {Number} sampleInterval
 */
ClientConfig.prototype['sampleInterval'] = undefined;

/**
 * Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !
 * @member {Boolean} useCircuitBreaker
 */
ClientConfig.prototype['useCircuitBreaker'] = undefined;






export default ClientConfig;

