/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Target from './Target';

/**
 * The Canary model module.
 * @module model/Canary
 * @version 1.5.0-dev
 */
class Canary {
    /**
     * Constructs a new <code>Canary</code>.
     * The configuration of the canary mode for a service descriptor
     * @alias module:model/Canary
     * @param enabled {Boolean} Use canary mode for this service
     * @param root {String} Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar
     * @param targets {Array.<module:model/Target>} The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures
     * @param traffic {Number} Ratio of traffic that will be sent to canary targets.
     */
    constructor(enabled, root, targets, traffic) { 
        
        Canary.initialize(this, enabled, root, targets, traffic);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enabled, root, targets, traffic) { 
        obj['enabled'] = enabled;
        obj['root'] = root;
        obj['targets'] = targets;
        obj['traffic'] = traffic;
    }

    /**
     * Constructs a <code>Canary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Canary} obj Optional instance to populate.
     * @return {module:model/Canary} The populated <code>Canary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Canary();

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('root')) {
                obj['root'] = ApiClient.convertToType(data['root'], 'String');
            }
            if (data.hasOwnProperty('targets')) {
                obj['targets'] = ApiClient.convertToType(data['targets'], [Target]);
            }
            if (data.hasOwnProperty('traffic')) {
                obj['traffic'] = ApiClient.convertToType(data['traffic'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Canary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Canary</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Canary.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['root'] && !(typeof data['root'] === 'string' || data['root'] instanceof String)) {
            throw new Error("Expected the field `root` to be a primitive type in the JSON string but got " + data['root']);
        }
        if (data['targets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['targets'])) {
                throw new Error("Expected the field `targets` to be an array in the JSON data but got " + data['targets']);
            }
            // validate the optional field `targets` (array)
            for (const item of data['targets']) {
                Target.validateJSON(item);
            };
        }

        return true;
    }


}

Canary.RequiredProperties = ["enabled", "root", "targets", "traffic"];

/**
 * Use canary mode for this service
 * @member {Boolean} enabled
 */
Canary.prototype['enabled'] = undefined;

/**
 * Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar
 * @member {String} root
 */
Canary.prototype['root'] = undefined;

/**
 * The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures
 * @member {Array.<module:model/Target>} targets
 */
Canary.prototype['targets'] = undefined;

/**
 * Ratio of traffic that will be sent to canary targets.
 * @member {Number} traffic
 */
Canary.prototype['traffic'] = undefined;






export default Canary;

