/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GlobalJwtVerifierSource from './GlobalJwtVerifierSource';
import MappingSettings from './MappingSettings';

/**
 * The TransformSettings model module.
 * @module model/TransformSettings
 * @version 1.5.0-dev
 */
class TransformSettings {
    /**
     * Constructs a new <code>TransformSettings</code>.
     * Settings to transform a JWT token and its location
     * @alias module:model/TransformSettings
     * @param location {module:model/GlobalJwtVerifierSource} 
     * @param mappingSettings {module:model/MappingSettings} 
     */
    constructor(location, mappingSettings) { 
        
        TransformSettings.initialize(this, location, mappingSettings);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, location, mappingSettings) { 
        obj['location'] = location;
        obj['mappingSettings'] = mappingSettings;
    }

    /**
     * Constructs a <code>TransformSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransformSettings} obj Optional instance to populate.
     * @return {module:model/TransformSettings} The populated <code>TransformSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransformSettings();

            if (data.hasOwnProperty('location')) {
                obj['location'] = GlobalJwtVerifierSource.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('mappingSettings')) {
                obj['mappingSettings'] = MappingSettings.constructFromObject(data['mappingSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransformSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransformSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransformSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          GlobalJwtVerifierSource.validateJSON(data['location']);
        }
        // validate the optional field `mappingSettings`
        if (data['mappingSettings']) { // data not null
          MappingSettings.validateJSON(data['mappingSettings']);
        }

        return true;
    }


}

TransformSettings.RequiredProperties = ["location", "mappingSettings"];

/**
 * @member {module:model/GlobalJwtVerifierSource} location
 */
TransformSettings.prototype['location'] = undefined;

/**
 * @member {module:model/MappingSettings} mappingSettings
 */
TransformSettings.prototype['mappingSettings'] = undefined;






export default TransformSettings;

