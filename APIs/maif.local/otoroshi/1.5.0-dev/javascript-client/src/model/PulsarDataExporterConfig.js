/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PulsarDataExporterConfig model module.
 * @module model/PulsarDataExporterConfig
 * @version 1.5.0-dev
 */
class PulsarDataExporterConfig {
    /**
     * Constructs a new <code>PulsarDataExporterConfig</code>.
     * The configuration for kafka access
     * @alias module:model/PulsarDataExporterConfig
     * @param namespace {String} Namespace
     * @param tenant {String} Tenant
     * @param topic {String} Topic
     * @param uri {Array.<String>} URI of the pulsar server
     */
    constructor(namespace, tenant, topic, uri) { 
        
        PulsarDataExporterConfig.initialize(this, namespace, tenant, topic, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, namespace, tenant, topic, uri) { 
        obj['namespace'] = namespace;
        obj['tenant'] = tenant;
        obj['topic'] = topic;
        obj['uri'] = uri;
    }

    /**
     * Constructs a <code>PulsarDataExporterConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PulsarDataExporterConfig} obj Optional instance to populate.
     * @return {module:model/PulsarDataExporterConfig} The populated <code>PulsarDataExporterConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PulsarDataExporterConfig();

            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('tenant')) {
                obj['tenant'] = ApiClient.convertToType(data['tenant'], 'String');
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PulsarDataExporterConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PulsarDataExporterConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PulsarDataExporterConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['tenant'] && !(typeof data['tenant'] === 'string' || data['tenant'] instanceof String)) {
            throw new Error("Expected the field `tenant` to be a primitive type in the JSON string but got " + data['tenant']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['uri'])) {
            throw new Error("Expected the field `uri` to be an array in the JSON data but got " + data['uri']);
        }

        return true;
    }


}

PulsarDataExporterConfig.RequiredProperties = ["namespace", "tenant", "topic", "uri"];

/**
 * Namespace
 * @member {String} namespace
 */
PulsarDataExporterConfig.prototype['namespace'] = undefined;

/**
 * Tenant
 * @member {String} tenant
 */
PulsarDataExporterConfig.prototype['tenant'] = undefined;

/**
 * Topic
 * @member {String} topic
 */
PulsarDataExporterConfig.prototype['topic'] = undefined;

/**
 * URI of the pulsar server
 * @member {Array.<String>} uri
 */
PulsarDataExporterConfig.prototype['uri'] = undefined;






export default PulsarDataExporterConfig;

