/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LdapAuthModuleConfig model module.
 * @module model/LdapAuthModuleConfig
 * @version 1.5.0-dev
 */
class LdapAuthModuleConfig {
    /**
     * Constructs a new <code>LdapAuthModuleConfig</code>.
     * Settings to authenticate users using a generic OAuth2 provider
     * @alias module:model/LdapAuthModuleConfig
     * @param adminPassword {String} The admin password
     * @param adminUsername {String} The admin username
     * @param desc {String} Description of the config
     * @param emailField {String} Field name to get email from user profile
     * @param groupFilter {String} Filter for groups
     * @param id {String} Unique id of the config
     * @param name {String} Name of the config
     * @param nameField {String} Field name to get name from user profile
     * @param searchBase {String} LDAP search base
     * @param searchFilter {String} Filter for users
     * @param serverUrl {String} URL of the ldap server
     * @param sessionMaxAge {Number} Max age of the session
     * @param type {String} Type of settings. value is ldap
     * @param userBase {String} LDAP user base DN
     */
    constructor(adminPassword, adminUsername, desc, emailField, groupFilter, id, name, nameField, searchBase, searchFilter, serverUrl, sessionMaxAge, type, userBase) { 
        
        LdapAuthModuleConfig.initialize(this, adminPassword, adminUsername, desc, emailField, groupFilter, id, name, nameField, searchBase, searchFilter, serverUrl, sessionMaxAge, type, userBase);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, adminPassword, adminUsername, desc, emailField, groupFilter, id, name, nameField, searchBase, searchFilter, serverUrl, sessionMaxAge, type, userBase) { 
        obj['adminPassword'] = adminPassword;
        obj['adminUsername'] = adminUsername;
        obj['desc'] = desc;
        obj['emailField'] = emailField;
        obj['groupFilter'] = groupFilter;
        obj['id'] = id;
        obj['name'] = name;
        obj['nameField'] = nameField;
        obj['searchBase'] = searchBase;
        obj['searchFilter'] = searchFilter;
        obj['serverUrl'] = serverUrl;
        obj['sessionMaxAge'] = sessionMaxAge;
        obj['type'] = type;
        obj['userBase'] = userBase;
    }

    /**
     * Constructs a <code>LdapAuthModuleConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LdapAuthModuleConfig} obj Optional instance to populate.
     * @return {module:model/LdapAuthModuleConfig} The populated <code>LdapAuthModuleConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LdapAuthModuleConfig();

            if (data.hasOwnProperty('adminPassword')) {
                obj['adminPassword'] = ApiClient.convertToType(data['adminPassword'], 'String');
            }
            if (data.hasOwnProperty('adminUsername')) {
                obj['adminUsername'] = ApiClient.convertToType(data['adminUsername'], 'String');
            }
            if (data.hasOwnProperty('desc')) {
                obj['desc'] = ApiClient.convertToType(data['desc'], 'String');
            }
            if (data.hasOwnProperty('emailField')) {
                obj['emailField'] = ApiClient.convertToType(data['emailField'], 'String');
            }
            if (data.hasOwnProperty('groupFilter')) {
                obj['groupFilter'] = ApiClient.convertToType(data['groupFilter'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nameField')) {
                obj['nameField'] = ApiClient.convertToType(data['nameField'], 'String');
            }
            if (data.hasOwnProperty('otoroshiDataField')) {
                obj['otoroshiDataField'] = ApiClient.convertToType(data['otoroshiDataField'], 'String');
            }
            if (data.hasOwnProperty('searchBase')) {
                obj['searchBase'] = ApiClient.convertToType(data['searchBase'], 'String');
            }
            if (data.hasOwnProperty('searchFilter')) {
                obj['searchFilter'] = ApiClient.convertToType(data['searchFilter'], 'String');
            }
            if (data.hasOwnProperty('serverUrl')) {
                obj['serverUrl'] = ApiClient.convertToType(data['serverUrl'], 'String');
            }
            if (data.hasOwnProperty('sessionMaxAge')) {
                obj['sessionMaxAge'] = ApiClient.convertToType(data['sessionMaxAge'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('userBase')) {
                obj['userBase'] = ApiClient.convertToType(data['userBase'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LdapAuthModuleConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LdapAuthModuleConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LdapAuthModuleConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['adminPassword'] && !(typeof data['adminPassword'] === 'string' || data['adminPassword'] instanceof String)) {
            throw new Error("Expected the field `adminPassword` to be a primitive type in the JSON string but got " + data['adminPassword']);
        }
        // ensure the json data is a string
        if (data['adminUsername'] && !(typeof data['adminUsername'] === 'string' || data['adminUsername'] instanceof String)) {
            throw new Error("Expected the field `adminUsername` to be a primitive type in the JSON string but got " + data['adminUsername']);
        }
        // ensure the json data is a string
        if (data['desc'] && !(typeof data['desc'] === 'string' || data['desc'] instanceof String)) {
            throw new Error("Expected the field `desc` to be a primitive type in the JSON string but got " + data['desc']);
        }
        // ensure the json data is a string
        if (data['emailField'] && !(typeof data['emailField'] === 'string' || data['emailField'] instanceof String)) {
            throw new Error("Expected the field `emailField` to be a primitive type in the JSON string but got " + data['emailField']);
        }
        // ensure the json data is a string
        if (data['groupFilter'] && !(typeof data['groupFilter'] === 'string' || data['groupFilter'] instanceof String)) {
            throw new Error("Expected the field `groupFilter` to be a primitive type in the JSON string but got " + data['groupFilter']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nameField'] && !(typeof data['nameField'] === 'string' || data['nameField'] instanceof String)) {
            throw new Error("Expected the field `nameField` to be a primitive type in the JSON string but got " + data['nameField']);
        }
        // ensure the json data is a string
        if (data['otoroshiDataField'] && !(typeof data['otoroshiDataField'] === 'string' || data['otoroshiDataField'] instanceof String)) {
            throw new Error("Expected the field `otoroshiDataField` to be a primitive type in the JSON string but got " + data['otoroshiDataField']);
        }
        // ensure the json data is a string
        if (data['searchBase'] && !(typeof data['searchBase'] === 'string' || data['searchBase'] instanceof String)) {
            throw new Error("Expected the field `searchBase` to be a primitive type in the JSON string but got " + data['searchBase']);
        }
        // ensure the json data is a string
        if (data['searchFilter'] && !(typeof data['searchFilter'] === 'string' || data['searchFilter'] instanceof String)) {
            throw new Error("Expected the field `searchFilter` to be a primitive type in the JSON string but got " + data['searchFilter']);
        }
        // ensure the json data is a string
        if (data['serverUrl'] && !(typeof data['serverUrl'] === 'string' || data['serverUrl'] instanceof String)) {
            throw new Error("Expected the field `serverUrl` to be a primitive type in the JSON string but got " + data['serverUrl']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['userBase'] && !(typeof data['userBase'] === 'string' || data['userBase'] instanceof String)) {
            throw new Error("Expected the field `userBase` to be a primitive type in the JSON string but got " + data['userBase']);
        }

        return true;
    }


}

LdapAuthModuleConfig.RequiredProperties = ["adminPassword", "adminUsername", "desc", "emailField", "groupFilter", "id", "name", "nameField", "searchBase", "searchFilter", "serverUrl", "sessionMaxAge", "type", "userBase"];

/**
 * The admin password
 * @member {String} adminPassword
 */
LdapAuthModuleConfig.prototype['adminPassword'] = undefined;

/**
 * The admin username
 * @member {String} adminUsername
 */
LdapAuthModuleConfig.prototype['adminUsername'] = undefined;

/**
 * Description of the config
 * @member {String} desc
 */
LdapAuthModuleConfig.prototype['desc'] = undefined;

/**
 * Field name to get email from user profile
 * @member {String} emailField
 */
LdapAuthModuleConfig.prototype['emailField'] = undefined;

/**
 * Filter for groups
 * @member {String} groupFilter
 */
LdapAuthModuleConfig.prototype['groupFilter'] = undefined;

/**
 * Unique id of the config
 * @member {String} id
 */
LdapAuthModuleConfig.prototype['id'] = undefined;

/**
 * Name of the config
 * @member {String} name
 */
LdapAuthModuleConfig.prototype['name'] = undefined;

/**
 * Field name to get name from user profile
 * @member {String} nameField
 */
LdapAuthModuleConfig.prototype['nameField'] = undefined;

/**
 * Field name to get otoroshi metadata from. You can specify sub fields using | as separator
 * @member {String} otoroshiDataField
 */
LdapAuthModuleConfig.prototype['otoroshiDataField'] = undefined;

/**
 * LDAP search base
 * @member {String} searchBase
 */
LdapAuthModuleConfig.prototype['searchBase'] = undefined;

/**
 * Filter for users
 * @member {String} searchFilter
 */
LdapAuthModuleConfig.prototype['searchFilter'] = undefined;

/**
 * URL of the ldap server
 * @member {String} serverUrl
 */
LdapAuthModuleConfig.prototype['serverUrl'] = undefined;

/**
 * Max age of the session
 * @member {Number} sessionMaxAge
 */
LdapAuthModuleConfig.prototype['sessionMaxAge'] = undefined;

/**
 * Type of settings. value is ldap
 * @member {String} type
 */
LdapAuthModuleConfig.prototype['type'] = undefined;

/**
 * LDAP user base DN
 * @member {String} userBase
 */
LdapAuthModuleConfig.prototype['userBase'] = undefined;






export default LdapAuthModuleConfig;

