/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Auth0Config model module.
 * @module model/Auth0Config
 * @version 1.5.0-dev
 */
class Auth0Config {
    /**
     * Constructs a new <code>Auth0Config</code>.
     * Configuration for Auth0 domain
     * @alias module:model/Auth0Config
     * @param callbackUrl {String} Auth0 callback URL
     * @param clientId {String} Auth0 client id
     * @param clientSecret {String} Auth0 client secret
     * @param domain {String} Auth0 domain
     */
    constructor(callbackUrl, clientId, clientSecret, domain) { 
        
        Auth0Config.initialize(this, callbackUrl, clientId, clientSecret, domain);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, callbackUrl, clientId, clientSecret, domain) { 
        obj['callbackUrl'] = callbackUrl;
        obj['clientId'] = clientId;
        obj['clientSecret'] = clientSecret;
        obj['domain'] = domain;
    }

    /**
     * Constructs a <code>Auth0Config</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Auth0Config} obj Optional instance to populate.
     * @return {module:model/Auth0Config} The populated <code>Auth0Config</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Auth0Config();

            if (data.hasOwnProperty('callbackUrl')) {
                obj['callbackUrl'] = ApiClient.convertToType(data['callbackUrl'], 'String');
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('clientSecret')) {
                obj['clientSecret'] = ApiClient.convertToType(data['clientSecret'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Auth0Config</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Auth0Config</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Auth0Config.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['callbackUrl'] && !(typeof data['callbackUrl'] === 'string' || data['callbackUrl'] instanceof String)) {
            throw new Error("Expected the field `callbackUrl` to be a primitive type in the JSON string but got " + data['callbackUrl']);
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['clientSecret'] && !(typeof data['clientSecret'] === 'string' || data['clientSecret'] instanceof String)) {
            throw new Error("Expected the field `clientSecret` to be a primitive type in the JSON string but got " + data['clientSecret']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }

        return true;
    }


}

Auth0Config.RequiredProperties = ["callbackUrl", "clientId", "clientSecret", "domain"];

/**
 * Auth0 callback URL
 * @member {String} callbackUrl
 */
Auth0Config.prototype['callbackUrl'] = undefined;

/**
 * Auth0 client id
 * @member {String} clientId
 */
Auth0Config.prototype['clientId'] = undefined;

/**
 * Auth0 client secret
 * @member {String} clientSecret
 */
Auth0Config.prototype['clientSecret'] = undefined;

/**
 * Auth0 domain
 * @member {String} domain
 */
Auth0Config.prototype['domain'] = undefined;






export default Auth0Config;

