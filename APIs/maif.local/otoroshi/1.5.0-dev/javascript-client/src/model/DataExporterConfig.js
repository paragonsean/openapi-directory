/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataExporterConfigConfig from './DataExporterConfigConfig';
import Filtering from './Filtering';
import Location from './Location';

/**
 * The DataExporterConfig model module.
 * @module model/DataExporterConfig
 * @version 1.5.0-dev
 */
class DataExporterConfig {
    /**
     * Constructs a new <code>DataExporterConfig</code>.
     * Settings to export Otorshi events
     * @alias module:model/DataExporterConfig
     */
    constructor() { 
        
        DataExporterConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataExporterConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataExporterConfig} obj Optional instance to populate.
     * @return {module:model/DataExporterConfig} The populated <code>DataExporterConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataExporterConfig();

            if (data.hasOwnProperty('bufferSize')) {
                obj['bufferSize'] = ApiClient.convertToType(data['bufferSize'], 'Number');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = DataExporterConfigConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('desc')) {
                obj['desc'] = ApiClient.convertToType(data['desc'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'String');
            }
            if (data.hasOwnProperty('filtering')) {
                obj['filtering'] = Filtering.constructFromObject(data['filtering']);
            }
            if (data.hasOwnProperty('groupDuration')) {
                obj['groupDuration'] = ApiClient.convertToType(data['groupDuration'], 'Number');
            }
            if (data.hasOwnProperty('groupSize')) {
                obj['groupSize'] = ApiClient.convertToType(data['groupSize'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('jsonWorkers')) {
                obj['jsonWorkers'] = ApiClient.convertToType(data['jsonWorkers'], 'Number');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('projection')) {
                obj['projection'] = ApiClient.convertToType(data['projection'], {'String': 'String'});
            }
            if (data.hasOwnProperty('sendWorkers')) {
                obj['sendWorkers'] = ApiClient.convertToType(data['sendWorkers'], 'Number');
            }
            if (data.hasOwnProperty('typ')) {
                obj['typ'] = ApiClient.convertToType(data['typ'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataExporterConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataExporterConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `config`
        if (data['config']) { // data not null
          DataExporterConfigConfig.validateJSON(data['config']);
        }
        // ensure the json data is a string
        if (data['desc'] && !(typeof data['desc'] === 'string' || data['desc'] instanceof String)) {
            throw new Error("Expected the field `desc` to be a primitive type in the JSON string but got " + data['desc']);
        }
        // ensure the json data is a string
        if (data['enabled'] && !(typeof data['enabled'] === 'string' || data['enabled'] instanceof String)) {
            throw new Error("Expected the field `enabled` to be a primitive type in the JSON string but got " + data['enabled']);
        }
        // validate the optional field `filtering`
        if (data['filtering']) { // data not null
          Filtering.validateJSON(data['filtering']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['typ'] && !(typeof data['typ'] === 'string' || data['typ'] instanceof String)) {
            throw new Error("Expected the field `typ` to be a primitive type in the JSON string but got " + data['typ']);
        }

        return true;
    }


}



/**
 * buffer size
 * @member {Number} bufferSize
 */
DataExporterConfig.prototype['bufferSize'] = undefined;

/**
 * @member {module:model/DataExporterConfigConfig} config
 */
DataExporterConfig.prototype['config'] = undefined;

/**
 * Description
 * @member {String} desc
 */
DataExporterConfig.prototype['desc'] = undefined;

/**
 * Boolean
 * @member {String} enabled
 */
DataExporterConfig.prototype['enabled'] = undefined;

/**
 * @member {module:model/Filtering} filtering
 */
DataExporterConfig.prototype['filtering'] = undefined;

/**
 * duration
 * @member {Number} groupDuration
 */
DataExporterConfig.prototype['groupDuration'] = undefined;

/**
 * Group size
 * @member {Number} groupSize
 */
DataExporterConfig.prototype['groupSize'] = undefined;

/**
 * Id
 * @member {String} id
 */
DataExporterConfig.prototype['id'] = undefined;

/**
 * nb workers
 * @member {Number} jsonWorkers
 */
DataExporterConfig.prototype['jsonWorkers'] = undefined;

/**
 * @member {module:model/Location} location
 */
DataExporterConfig.prototype['location'] = undefined;

/**
 * Metadata
 * @member {Object.<String, String>} metadata
 */
DataExporterConfig.prototype['metadata'] = undefined;

/**
 * Name
 * @member {String} name
 */
DataExporterConfig.prototype['name'] = undefined;

/**
 * projection
 * @member {Object.<String, String>} projection
 */
DataExporterConfig.prototype['projection'] = undefined;

/**
 * send workers
 * @member {Number} sendWorkers
 */
DataExporterConfig.prototype['sendWorkers'] = undefined;

/**
 * Type of data exporter
 * @member {module:model/DataExporterConfig.TypEnum} typ
 */
DataExporterConfig.prototype['typ'] = undefined;





/**
 * Allowed values for the <code>typ</code> property.
 * @enum {String}
 * @readonly
 */
DataExporterConfig['TypEnum'] = {

    /**
     * value: "kafka"
     * @const
     */
    "kafka": "kafka",

    /**
     * value: "pulsar"
     * @const
     */
    "pulsar": "pulsar",

    /**
     * value: "file"
     * @const
     */
    "file": "file",

    /**
     * value: "mailer"
     * @const
     */
    "mailer": "mailer",

    /**
     * value: "elastic"
     * @const
     */
    "elastic": "elastic",

    /**
     * value: "console"
     * @const
     */
    "console": "console",

    /**
     * value: "custom"
     * @const
     */
    "custom": "custom"
};



export default DataExporterConfig;

