/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImportExportApiKeysInner model module.
 * @module model/ImportExportApiKeysInner
 * @version 1.5.0-dev
 */
class ImportExportApiKeysInner {
    /**
     * Constructs a new <code>ImportExportApiKeysInner</code>.
     * An Otoroshi Api Key. An Api Key is defined for a group of services to allow usage of the same Api Key for multiple services.
     * @alias module:model/ImportExportApiKeysInner
     * @param authorizedEntities {Array.<String>} The group/service ids (prefixed by group_ or service_ on which the key is authorized
     * @param clientId {String} The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything
     * @param clientName {String} The name of the api key, for humans ;-)
     * @param clientSecret {String} The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything
     * @param enabled {Boolean} Whether or not the key is enabled. If disabled, resources won't be available to calls using this key
     */
    constructor(authorizedEntities, clientId, clientName, clientSecret, enabled) { 
        
        ImportExportApiKeysInner.initialize(this, authorizedEntities, clientId, clientName, clientSecret, enabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authorizedEntities, clientId, clientName, clientSecret, enabled) { 
        obj['authorizedEntities'] = authorizedEntities;
        obj['clientId'] = clientId;
        obj['clientName'] = clientName;
        obj['clientSecret'] = clientSecret;
        obj['enabled'] = enabled;
    }

    /**
     * Constructs a <code>ImportExportApiKeysInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportExportApiKeysInner} obj Optional instance to populate.
     * @return {module:model/ImportExportApiKeysInner} The populated <code>ImportExportApiKeysInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportExportApiKeysInner();

            if (data.hasOwnProperty('authorizedEntities')) {
                obj['authorizedEntities'] = ApiClient.convertToType(data['authorizedEntities'], ['String']);
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('clientName')) {
                obj['clientName'] = ApiClient.convertToType(data['clientName'], 'String');
            }
            if (data.hasOwnProperty('clientSecret')) {
                obj['clientSecret'] = ApiClient.convertToType(data['clientSecret'], 'String');
            }
            if (data.hasOwnProperty('dailyQuota')) {
                obj['dailyQuota'] = ApiClient.convertToType(data['dailyQuota'], 'Number');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('monthlyQuota')) {
                obj['monthlyQuota'] = ApiClient.convertToType(data['monthlyQuota'], 'Number');
            }
            if (data.hasOwnProperty('throttlingQuota')) {
                obj['throttlingQuota'] = ApiClient.convertToType(data['throttlingQuota'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportExportApiKeysInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportExportApiKeysInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImportExportApiKeysInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['authorizedEntities'])) {
            throw new Error("Expected the field `authorizedEntities` to be an array in the JSON data but got " + data['authorizedEntities']);
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['clientName'] && !(typeof data['clientName'] === 'string' || data['clientName'] instanceof String)) {
            throw new Error("Expected the field `clientName` to be a primitive type in the JSON string but got " + data['clientName']);
        }
        // ensure the json data is a string
        if (data['clientSecret'] && !(typeof data['clientSecret'] === 'string' || data['clientSecret'] instanceof String)) {
            throw new Error("Expected the field `clientSecret` to be a primitive type in the JSON string but got " + data['clientSecret']);
        }

        return true;
    }


}

ImportExportApiKeysInner.RequiredProperties = ["authorizedEntities", "clientId", "clientName", "clientSecret", "enabled"];

/**
 * The group/service ids (prefixed by group_ or service_ on which the key is authorized
 * @member {Array.<String>} authorizedEntities
 */
ImportExportApiKeysInner.prototype['authorizedEntities'] = undefined;

/**
 * The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything
 * @member {String} clientId
 */
ImportExportApiKeysInner.prototype['clientId'] = undefined;

/**
 * The name of the api key, for humans ;-)
 * @member {String} clientName
 */
ImportExportApiKeysInner.prototype['clientName'] = undefined;

/**
 * The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything
 * @member {String} clientSecret
 */
ImportExportApiKeysInner.prototype['clientSecret'] = undefined;

/**
 * Authorized number of calls per day
 * @member {Number} dailyQuota
 */
ImportExportApiKeysInner.prototype['dailyQuota'] = undefined;

/**
 * Whether or not the key is enabled. If disabled, resources won't be available to calls using this key
 * @member {Boolean} enabled
 */
ImportExportApiKeysInner.prototype['enabled'] = undefined;

/**
 * Bunch of metadata for the key
 * @member {Object.<String, String>} metadata
 */
ImportExportApiKeysInner.prototype['metadata'] = undefined;

/**
 * Authorized number of calls per month
 * @member {Number} monthlyQuota
 */
ImportExportApiKeysInner.prototype['monthlyQuota'] = undefined;

/**
 * Authorized number of calls per second, measured on 10 seconds
 * @member {Number} throttlingQuota
 */
ImportExportApiKeysInner.prototype['throttlingQuota'] = undefined;






export default ImportExportApiKeysInner;

