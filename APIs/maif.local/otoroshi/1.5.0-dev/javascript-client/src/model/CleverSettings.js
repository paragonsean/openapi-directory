/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CleverSettings model module.
 * @module model/CleverSettings
 * @version 1.5.0-dev
 */
class CleverSettings {
    /**
     * Constructs a new <code>CleverSettings</code>.
     * Configuration for CleverCloud client
     * @alias module:model/CleverSettings
     * @param consumerKey {String} CleverCloud consumer key
     * @param consumerSecret {String} CleverCloud consumer token
     * @param orgaId {String} CleverCloud organization id
     * @param secret {String} CleverCloud oauth secret
     * @param token {String} CleverCloud oauth token
     */
    constructor(consumerKey, consumerSecret, orgaId, secret, token) { 
        
        CleverSettings.initialize(this, consumerKey, consumerSecret, orgaId, secret, token);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, consumerKey, consumerSecret, orgaId, secret, token) { 
        obj['consumerKey'] = consumerKey;
        obj['consumerSecret'] = consumerSecret;
        obj['orgaId'] = orgaId;
        obj['secret'] = secret;
        obj['token'] = token;
    }

    /**
     * Constructs a <code>CleverSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CleverSettings} obj Optional instance to populate.
     * @return {module:model/CleverSettings} The populated <code>CleverSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CleverSettings();

            if (data.hasOwnProperty('consumerKey')) {
                obj['consumerKey'] = ApiClient.convertToType(data['consumerKey'], 'String');
            }
            if (data.hasOwnProperty('consumerSecret')) {
                obj['consumerSecret'] = ApiClient.convertToType(data['consumerSecret'], 'String');
            }
            if (data.hasOwnProperty('orgaId')) {
                obj['orgaId'] = ApiClient.convertToType(data['orgaId'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CleverSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CleverSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CleverSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['consumerKey'] && !(typeof data['consumerKey'] === 'string' || data['consumerKey'] instanceof String)) {
            throw new Error("Expected the field `consumerKey` to be a primitive type in the JSON string but got " + data['consumerKey']);
        }
        // ensure the json data is a string
        if (data['consumerSecret'] && !(typeof data['consumerSecret'] === 'string' || data['consumerSecret'] instanceof String)) {
            throw new Error("Expected the field `consumerSecret` to be a primitive type in the JSON string but got " + data['consumerSecret']);
        }
        // ensure the json data is a string
        if (data['orgaId'] && !(typeof data['orgaId'] === 'string' || data['orgaId'] instanceof String)) {
            throw new Error("Expected the field `orgaId` to be a primitive type in the JSON string but got " + data['orgaId']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }

        return true;
    }


}

CleverSettings.RequiredProperties = ["consumerKey", "consumerSecret", "orgaId", "secret", "token"];

/**
 * CleverCloud consumer key
 * @member {String} consumerKey
 */
CleverSettings.prototype['consumerKey'] = undefined;

/**
 * CleverCloud consumer token
 * @member {String} consumerSecret
 */
CleverSettings.prototype['consumerSecret'] = undefined;

/**
 * CleverCloud organization id
 * @member {String} orgaId
 */
CleverSettings.prototype['orgaId'] = undefined;

/**
 * CleverCloud oauth secret
 * @member {String} secret
 */
CleverSettings.prototype['secret'] = undefined;

/**
 * CleverCloud oauth token
 * @member {String} token
 */
CleverSettings.prototype['token'] = undefined;






export default CleverSettings;

