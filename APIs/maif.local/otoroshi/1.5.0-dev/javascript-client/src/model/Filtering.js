/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Filtering model module.
 * @module model/Filtering
 * @version 1.5.0-dev
 */
class Filtering {
    /**
     * Constructs a new <code>Filtering</code>.
     * @alias module:model/Filtering
     */
    constructor() { 
        
        Filtering.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Filtering</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Filtering} obj Optional instance to populate.
     * @return {module:model/Filtering} The populated <code>Filtering</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Filtering();

            if (data.hasOwnProperty('exclude')) {
                obj['exclude'] = ApiClient.convertToType(data['exclude'], [{'String': 'String'}]);
            }
            if (data.hasOwnProperty('include')) {
                obj['include'] = ApiClient.convertToType(data['include'], [{'String': 'String'}]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Filtering</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Filtering</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['exclude'])) {
            throw new Error("Expected the field `exclude` to be an array in the JSON data but got " + data['exclude']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['include'])) {
            throw new Error("Expected the field `include` to be an array in the JSON data but got " + data['include']);
        }

        return true;
    }


}



/**
 * Excluding pattern
 * @member {Array.<Object.<String, String>>} exclude
 */
Filtering.prototype['exclude'] = undefined;

/**
 * Including pattern
 * @member {Array.<Object.<String, String>>} include
 */
Filtering.prototype['include'] = undefined;






export default Filtering;

