/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MailerSettings model module.
 * @module model/MailerSettings
 * @version 1.5.0-dev
 */
class MailerSettings {
    /**
     * Constructs a new <code>MailerSettings</code>.
     * Configuration for mailgun api client
     * @alias module:model/MailerSettings
     * @param apiKey {String} Mailgun mailer api key
     * @param domain {String} Mailgun mailer domain
     */
    constructor(apiKey, domain) { 
        
        MailerSettings.initialize(this, apiKey, domain);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, apiKey, domain) { 
        obj['apiKey'] = apiKey;
        obj['domain'] = domain;
    }

    /**
     * Constructs a <code>MailerSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MailerSettings} obj Optional instance to populate.
     * @return {module:model/MailerSettings} The populated <code>MailerSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MailerSettings();

            if (data.hasOwnProperty('apiKey')) {
                obj['apiKey'] = ApiClient.convertToType(data['apiKey'], 'String');
            }
            if (data.hasOwnProperty('apiKeyPrivate')) {
                obj['apiKeyPrivate'] = ApiClient.convertToType(data['apiKeyPrivate'], 'String');
            }
            if (data.hasOwnProperty('apiKeyPublic')) {
                obj['apiKeyPublic'] = ApiClient.convertToType(data['apiKeyPublic'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('eu')) {
                obj['eu'] = ApiClient.convertToType(data['eu'], 'Boolean');
            }
            if (data.hasOwnProperty('header')) {
                obj['header'] = ApiClient.convertToType(data['header'], {'String': 'String'});
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MailerSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MailerSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MailerSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['apiKey'] && !(typeof data['apiKey'] === 'string' || data['apiKey'] instanceof String)) {
            throw new Error("Expected the field `apiKey` to be a primitive type in the JSON string but got " + data['apiKey']);
        }
        // ensure the json data is a string
        if (data['apiKeyPrivate'] && !(typeof data['apiKeyPrivate'] === 'string' || data['apiKeyPrivate'] instanceof String)) {
            throw new Error("Expected the field `apiKeyPrivate` to be a primitive type in the JSON string but got " + data['apiKeyPrivate']);
        }
        // ensure the json data is a string
        if (data['apiKeyPublic'] && !(typeof data['apiKeyPublic'] === 'string' || data['apiKeyPublic'] instanceof String)) {
            throw new Error("Expected the field `apiKeyPublic` to be a primitive type in the JSON string but got " + data['apiKeyPublic']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

MailerSettings.RequiredProperties = ["apiKey", "domain"];

/**
 * Mailgun mailer api key
 * @member {String} apiKey
 */
MailerSettings.prototype['apiKey'] = undefined;

/**
 * Mailjet mailer private api key
 * @member {String} apiKeyPrivate
 */
MailerSettings.prototype['apiKeyPrivate'] = undefined;

/**
 * Mailjet mailer public api key
 * @member {String} apiKeyPublic
 */
MailerSettings.prototype['apiKeyPublic'] = undefined;

/**
 * Mailgun mailer domain
 * @member {String} domain
 */
MailerSettings.prototype['domain'] = undefined;

/**
 * Mailgun mailer, use EU tenant api
 * @member {Boolean} eu
 */
MailerSettings.prototype['eu'] = undefined;

/**
 * Generic mailer headers
 * @member {Object.<String, String>} header
 */
MailerSettings.prototype['header'] = undefined;

/**
 * Type of the mailer: console, generic, mailgun, mailjet
 * @member {String} type
 */
MailerSettings.prototype['type'] = undefined;

/**
 * Generic mailer url
 * @member {String} url
 */
MailerSettings.prototype['url'] = undefined;






export default MailerSettings;

