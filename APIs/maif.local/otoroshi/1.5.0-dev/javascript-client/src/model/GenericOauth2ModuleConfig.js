/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GenericOauth2ModuleConfigJwtVerifier from './GenericOauth2ModuleConfigJwtVerifier';

/**
 * The GenericOauth2ModuleConfig model module.
 * @module model/GenericOauth2ModuleConfig
 * @version 1.5.0-dev
 */
class GenericOauth2ModuleConfig {
    /**
     * Constructs a new <code>GenericOauth2ModuleConfig</code>.
     * Settings to authenticate users using a generic OAuth2 provider
     * @alias module:model/GenericOauth2ModuleConfig
     * @param accessTokenField {String} Field name to get access token
     * @param authorizeUrl {String} OAuth authorize URL
     * @param callbackUrl {String} Otoroshi callback URL
     * @param clientId {String} OAuth Client id
     * @param clientSecret {String} OAuth Client secret
     * @param desc {String} Description of the config
     * @param emailField {String} Field name to get email from user profile
     * @param id {String} Unique id of the config
     * @param loginUrl {String} OAuth login URL
     * @param logoutUrl {String} OAuth logout URL
     * @param name {String} Name of the config
     * @param nameField {String} Field name to get name from user profile
     * @param otoroshiDataField {String} Field name to get otoroshi metadata from. You can specify sub fields using | as separator
     * @param sessionMaxAge {Number} Max age of the session
     * @param tokenUrl {String} OAuth token URL
     * @param type {String} Type of settings. value is oauth2
     * @param userInfoUrl {String} OAuth userinfo to get user profile
     */
    constructor(accessTokenField, authorizeUrl, callbackUrl, clientId, clientSecret, desc, emailField, id, loginUrl, logoutUrl, name, nameField, otoroshiDataField, sessionMaxAge, tokenUrl, type, userInfoUrl) { 
        
        GenericOauth2ModuleConfig.initialize(this, accessTokenField, authorizeUrl, callbackUrl, clientId, clientSecret, desc, emailField, id, loginUrl, logoutUrl, name, nameField, otoroshiDataField, sessionMaxAge, tokenUrl, type, userInfoUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessTokenField, authorizeUrl, callbackUrl, clientId, clientSecret, desc, emailField, id, loginUrl, logoutUrl, name, nameField, otoroshiDataField, sessionMaxAge, tokenUrl, type, userInfoUrl) { 
        obj['accessTokenField'] = accessTokenField;
        obj['authorizeUrl'] = authorizeUrl;
        obj['callbackUrl'] = callbackUrl;
        obj['clientId'] = clientId;
        obj['clientSecret'] = clientSecret;
        obj['desc'] = desc;
        obj['emailField'] = emailField;
        obj['id'] = id;
        obj['loginUrl'] = loginUrl;
        obj['logoutUrl'] = logoutUrl;
        obj['name'] = name;
        obj['nameField'] = nameField;
        obj['otoroshiDataField'] = otoroshiDataField;
        obj['sessionMaxAge'] = sessionMaxAge;
        obj['tokenUrl'] = tokenUrl;
        obj['type'] = type;
        obj['userInfoUrl'] = userInfoUrl;
    }

    /**
     * Constructs a <code>GenericOauth2ModuleConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GenericOauth2ModuleConfig} obj Optional instance to populate.
     * @return {module:model/GenericOauth2ModuleConfig} The populated <code>GenericOauth2ModuleConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GenericOauth2ModuleConfig();

            if (data.hasOwnProperty('accessTokenField')) {
                obj['accessTokenField'] = ApiClient.convertToType(data['accessTokenField'], 'String');
            }
            if (data.hasOwnProperty('authorizeUrl')) {
                obj['authorizeUrl'] = ApiClient.convertToType(data['authorizeUrl'], 'String');
            }
            if (data.hasOwnProperty('callbackUrl')) {
                obj['callbackUrl'] = ApiClient.convertToType(data['callbackUrl'], 'String');
            }
            if (data.hasOwnProperty('claims')) {
                obj['claims'] = ApiClient.convertToType(data['claims'], 'String');
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('clientSecret')) {
                obj['clientSecret'] = ApiClient.convertToType(data['clientSecret'], 'String');
            }
            if (data.hasOwnProperty('desc')) {
                obj['desc'] = ApiClient.convertToType(data['desc'], 'String');
            }
            if (data.hasOwnProperty('emailField')) {
                obj['emailField'] = ApiClient.convertToType(data['emailField'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('jwtVerifier')) {
                obj['jwtVerifier'] = GenericOauth2ModuleConfigJwtVerifier.constructFromObject(data['jwtVerifier']);
            }
            if (data.hasOwnProperty('loginUrl')) {
                obj['loginUrl'] = ApiClient.convertToType(data['loginUrl'], 'String');
            }
            if (data.hasOwnProperty('logoutUrl')) {
                obj['logoutUrl'] = ApiClient.convertToType(data['logoutUrl'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nameField')) {
                obj['nameField'] = ApiClient.convertToType(data['nameField'], 'String');
            }
            if (data.hasOwnProperty('oidConfig')) {
                obj['oidConfig'] = ApiClient.convertToType(data['oidConfig'], 'String');
            }
            if (data.hasOwnProperty('otoroshiDataField')) {
                obj['otoroshiDataField'] = ApiClient.convertToType(data['otoroshiDataField'], 'String');
            }
            if (data.hasOwnProperty('readProfileFromToken')) {
                obj['readProfileFromToken'] = ApiClient.convertToType(data['readProfileFromToken'], 'Boolean');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('sessionMaxAge')) {
                obj['sessionMaxAge'] = ApiClient.convertToType(data['sessionMaxAge'], 'Number');
            }
            if (data.hasOwnProperty('tokenUrl')) {
                obj['tokenUrl'] = ApiClient.convertToType(data['tokenUrl'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('useCookies')) {
                obj['useCookies'] = ApiClient.convertToType(data['useCookies'], 'Boolean');
            }
            if (data.hasOwnProperty('useJson')) {
                obj['useJson'] = ApiClient.convertToType(data['useJson'], 'Boolean');
            }
            if (data.hasOwnProperty('userInfoUrl')) {
                obj['userInfoUrl'] = ApiClient.convertToType(data['userInfoUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GenericOauth2ModuleConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GenericOauth2ModuleConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GenericOauth2ModuleConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accessTokenField'] && !(typeof data['accessTokenField'] === 'string' || data['accessTokenField'] instanceof String)) {
            throw new Error("Expected the field `accessTokenField` to be a primitive type in the JSON string but got " + data['accessTokenField']);
        }
        // ensure the json data is a string
        if (data['authorizeUrl'] && !(typeof data['authorizeUrl'] === 'string' || data['authorizeUrl'] instanceof String)) {
            throw new Error("Expected the field `authorizeUrl` to be a primitive type in the JSON string but got " + data['authorizeUrl']);
        }
        // ensure the json data is a string
        if (data['callbackUrl'] && !(typeof data['callbackUrl'] === 'string' || data['callbackUrl'] instanceof String)) {
            throw new Error("Expected the field `callbackUrl` to be a primitive type in the JSON string but got " + data['callbackUrl']);
        }
        // ensure the json data is a string
        if (data['claims'] && !(typeof data['claims'] === 'string' || data['claims'] instanceof String)) {
            throw new Error("Expected the field `claims` to be a primitive type in the JSON string but got " + data['claims']);
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['clientSecret'] && !(typeof data['clientSecret'] === 'string' || data['clientSecret'] instanceof String)) {
            throw new Error("Expected the field `clientSecret` to be a primitive type in the JSON string but got " + data['clientSecret']);
        }
        // ensure the json data is a string
        if (data['desc'] && !(typeof data['desc'] === 'string' || data['desc'] instanceof String)) {
            throw new Error("Expected the field `desc` to be a primitive type in the JSON string but got " + data['desc']);
        }
        // ensure the json data is a string
        if (data['emailField'] && !(typeof data['emailField'] === 'string' || data['emailField'] instanceof String)) {
            throw new Error("Expected the field `emailField` to be a primitive type in the JSON string but got " + data['emailField']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `jwtVerifier`
        if (data['jwtVerifier']) { // data not null
          GenericOauth2ModuleConfigJwtVerifier.validateJSON(data['jwtVerifier']);
        }
        // ensure the json data is a string
        if (data['loginUrl'] && !(typeof data['loginUrl'] === 'string' || data['loginUrl'] instanceof String)) {
            throw new Error("Expected the field `loginUrl` to be a primitive type in the JSON string but got " + data['loginUrl']);
        }
        // ensure the json data is a string
        if (data['logoutUrl'] && !(typeof data['logoutUrl'] === 'string' || data['logoutUrl'] instanceof String)) {
            throw new Error("Expected the field `logoutUrl` to be a primitive type in the JSON string but got " + data['logoutUrl']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nameField'] && !(typeof data['nameField'] === 'string' || data['nameField'] instanceof String)) {
            throw new Error("Expected the field `nameField` to be a primitive type in the JSON string but got " + data['nameField']);
        }
        // ensure the json data is a string
        if (data['oidConfig'] && !(typeof data['oidConfig'] === 'string' || data['oidConfig'] instanceof String)) {
            throw new Error("Expected the field `oidConfig` to be a primitive type in the JSON string but got " + data['oidConfig']);
        }
        // ensure the json data is a string
        if (data['otoroshiDataField'] && !(typeof data['otoroshiDataField'] === 'string' || data['otoroshiDataField'] instanceof String)) {
            throw new Error("Expected the field `otoroshiDataField` to be a primitive type in the JSON string but got " + data['otoroshiDataField']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['tokenUrl'] && !(typeof data['tokenUrl'] === 'string' || data['tokenUrl'] instanceof String)) {
            throw new Error("Expected the field `tokenUrl` to be a primitive type in the JSON string but got " + data['tokenUrl']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['userInfoUrl'] && !(typeof data['userInfoUrl'] === 'string' || data['userInfoUrl'] instanceof String)) {
            throw new Error("Expected the field `userInfoUrl` to be a primitive type in the JSON string but got " + data['userInfoUrl']);
        }

        return true;
    }


}

GenericOauth2ModuleConfig.RequiredProperties = ["accessTokenField", "authorizeUrl", "callbackUrl", "clientId", "clientSecret", "desc", "emailField", "id", "loginUrl", "logoutUrl", "name", "nameField", "otoroshiDataField", "sessionMaxAge", "tokenUrl", "type", "userInfoUrl"];

/**
 * Field name to get access token
 * @member {String} accessTokenField
 */
GenericOauth2ModuleConfig.prototype['accessTokenField'] = undefined;

/**
 * OAuth authorize URL
 * @member {String} authorizeUrl
 */
GenericOauth2ModuleConfig.prototype['authorizeUrl'] = undefined;

/**
 * Otoroshi callback URL
 * @member {String} callbackUrl
 */
GenericOauth2ModuleConfig.prototype['callbackUrl'] = undefined;

/**
 * The claims of the token
 * @member {String} claims
 */
GenericOauth2ModuleConfig.prototype['claims'] = undefined;

/**
 * OAuth Client id
 * @member {String} clientId
 */
GenericOauth2ModuleConfig.prototype['clientId'] = undefined;

/**
 * OAuth Client secret
 * @member {String} clientSecret
 */
GenericOauth2ModuleConfig.prototype['clientSecret'] = undefined;

/**
 * Description of the config
 * @member {String} desc
 */
GenericOauth2ModuleConfig.prototype['desc'] = undefined;

/**
 * Field name to get email from user profile
 * @member {String} emailField
 */
GenericOauth2ModuleConfig.prototype['emailField'] = undefined;

/**
 * Unique id of the config
 * @member {String} id
 */
GenericOauth2ModuleConfig.prototype['id'] = undefined;

/**
 * @member {module:model/GenericOauth2ModuleConfigJwtVerifier} jwtVerifier
 */
GenericOauth2ModuleConfig.prototype['jwtVerifier'] = undefined;

/**
 * OAuth login URL
 * @member {String} loginUrl
 */
GenericOauth2ModuleConfig.prototype['loginUrl'] = undefined;

/**
 * OAuth logout URL
 * @member {String} logoutUrl
 */
GenericOauth2ModuleConfig.prototype['logoutUrl'] = undefined;

/**
 * Name of the config
 * @member {String} name
 */
GenericOauth2ModuleConfig.prototype['name'] = undefined;

/**
 * Field name to get name from user profile
 * @member {String} nameField
 */
GenericOauth2ModuleConfig.prototype['nameField'] = undefined;

/**
 * URL of the OIDC config. file
 * @member {String} oidConfig
 */
GenericOauth2ModuleConfig.prototype['oidConfig'] = undefined;

/**
 * Field name to get otoroshi metadata from. You can specify sub fields using | as separator
 * @member {String} otoroshiDataField
 */
GenericOauth2ModuleConfig.prototype['otoroshiDataField'] = undefined;

/**
 * The user profile will be read from the JWT token in id_token
 * @member {Boolean} readProfileFromToken
 */
GenericOauth2ModuleConfig.prototype['readProfileFromToken'] = undefined;

/**
 * The scope of the token
 * @member {String} scope
 */
GenericOauth2ModuleConfig.prototype['scope'] = undefined;

/**
 * Max age of the session
 * @member {Number} sessionMaxAge
 */
GenericOauth2ModuleConfig.prototype['sessionMaxAge'] = undefined;

/**
 * OAuth token URL
 * @member {String} tokenUrl
 */
GenericOauth2ModuleConfig.prototype['tokenUrl'] = undefined;

/**
 * Type of settings. value is oauth2
 * @member {String} type
 */
GenericOauth2ModuleConfig.prototype['type'] = undefined;

/**
 * Use for redirection to actual service
 * @member {Boolean} useCookies
 */
GenericOauth2ModuleConfig.prototype['useCookies'] = undefined;

/**
 * Use JSON or URL Form Encoded as payload with the OAuth provider
 * @member {Boolean} useJson
 */
GenericOauth2ModuleConfig.prototype['useJson'] = undefined;

/**
 * OAuth userinfo to get user profile
 * @member {String} userInfoUrl
 */
GenericOauth2ModuleConfig.prototype['userInfoUrl'] = undefined;






export default GenericOauth2ModuleConfig;

