/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Auth0Config from './Auth0Config';
import CleverSettings from './CleverSettings';
import ElasticConfig from './ElasticConfig';
import IpFiltering from './IpFiltering';
import MailerSettings from './MailerSettings';
import Webhook from './Webhook';

/**
 * The GlobalConfig model module.
 * @module model/GlobalConfig
 * @version 1.5.0-dev
 */
class GlobalConfig {
    /**
     * Constructs a new <code>GlobalConfig</code>.
     * The global config object of Otoroshi, used to customize settings of the current Otoroshi instance
     * @alias module:model/GlobalConfig
     * @param alertsEmails {Array.<String>} Email addresses that will receive all Otoroshi alert events
     * @param alertsWebhooks {Array.<module:model/Webhook>} Webhook that will receive all Otoroshi alert events
     * @param analyticsWebhooks {Array.<module:model/Webhook>} Webhook that will receive all internal Otoroshi events
     * @param apiReadOnly {Boolean} If enabled, Admin API won't be able to write/update/delete entities
     * @param autoLinkToDefaultGroup {Boolean} If not defined, every new service descriptor will be added to the default group
     * @param endlessIpAddresses {Array.<String>} IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros
     * @param ipFiltering {module:model/IpFiltering} 
     * @param limitConcurrentRequests {Boolean} If enabled, Otoroshi will reject new request if too much at the same time
     * @param maxConcurrentRequests {Number} The number of authorized request processed at the same time
     * @param perIpThrottlingQuota {Number} Authorized number of calls per second globally per IP address, measured on 10 seconds
     * @param streamEntityOnly {Boolean} HTTP will be streamed only. Doesn't work with old browsers
     * @param throttlingQuota {Number} Authorized number of calls per second globally, measured on 10 seconds
     * @param u2fLoginOnly {Boolean} If enabled, login to backoffice through Auth0 will be disabled
     * @param useCircuitBreakers {Boolean} If enabled, services will be authorized to use circuit breakers
     */
    constructor(alertsEmails, alertsWebhooks, analyticsWebhooks, apiReadOnly, autoLinkToDefaultGroup, endlessIpAddresses, ipFiltering, limitConcurrentRequests, maxConcurrentRequests, perIpThrottlingQuota, streamEntityOnly, throttlingQuota, u2fLoginOnly, useCircuitBreakers) { 
        
        GlobalConfig.initialize(this, alertsEmails, alertsWebhooks, analyticsWebhooks, apiReadOnly, autoLinkToDefaultGroup, endlessIpAddresses, ipFiltering, limitConcurrentRequests, maxConcurrentRequests, perIpThrottlingQuota, streamEntityOnly, throttlingQuota, u2fLoginOnly, useCircuitBreakers);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, alertsEmails, alertsWebhooks, analyticsWebhooks, apiReadOnly, autoLinkToDefaultGroup, endlessIpAddresses, ipFiltering, limitConcurrentRequests, maxConcurrentRequests, perIpThrottlingQuota, streamEntityOnly, throttlingQuota, u2fLoginOnly, useCircuitBreakers) { 
        obj['alertsEmails'] = alertsEmails;
        obj['alertsWebhooks'] = alertsWebhooks;
        obj['analyticsWebhooks'] = analyticsWebhooks;
        obj['apiReadOnly'] = apiReadOnly;
        obj['autoLinkToDefaultGroup'] = autoLinkToDefaultGroup;
        obj['endlessIpAddresses'] = endlessIpAddresses;
        obj['ipFiltering'] = ipFiltering;
        obj['limitConcurrentRequests'] = limitConcurrentRequests;
        obj['maxConcurrentRequests'] = maxConcurrentRequests;
        obj['perIpThrottlingQuota'] = perIpThrottlingQuota;
        obj['streamEntityOnly'] = streamEntityOnly;
        obj['throttlingQuota'] = throttlingQuota;
        obj['u2fLoginOnly'] = u2fLoginOnly;
        obj['useCircuitBreakers'] = useCircuitBreakers;
    }

    /**
     * Constructs a <code>GlobalConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GlobalConfig} obj Optional instance to populate.
     * @return {module:model/GlobalConfig} The populated <code>GlobalConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GlobalConfig();

            if (data.hasOwnProperty('alertsEmails')) {
                obj['alertsEmails'] = ApiClient.convertToType(data['alertsEmails'], ['String']);
            }
            if (data.hasOwnProperty('alertsWebhooks')) {
                obj['alertsWebhooks'] = ApiClient.convertToType(data['alertsWebhooks'], [Webhook]);
            }
            if (data.hasOwnProperty('analyticsWebhooks')) {
                obj['analyticsWebhooks'] = ApiClient.convertToType(data['analyticsWebhooks'], [Webhook]);
            }
            if (data.hasOwnProperty('apiReadOnly')) {
                obj['apiReadOnly'] = ApiClient.convertToType(data['apiReadOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('autoLinkToDefaultGroup')) {
                obj['autoLinkToDefaultGroup'] = ApiClient.convertToType(data['autoLinkToDefaultGroup'], 'Boolean');
            }
            if (data.hasOwnProperty('backofficeAuth0Config')) {
                obj['backofficeAuth0Config'] = Auth0Config.constructFromObject(data['backofficeAuth0Config']);
            }
            if (data.hasOwnProperty('cleverSettings')) {
                obj['cleverSettings'] = CleverSettings.constructFromObject(data['cleverSettings']);
            }
            if (data.hasOwnProperty('elasticReadsConfig')) {
                obj['elasticReadsConfig'] = ElasticConfig.constructFromObject(data['elasticReadsConfig']);
            }
            if (data.hasOwnProperty('elasticWritesConfigs')) {
                obj['elasticWritesConfigs'] = ApiClient.convertToType(data['elasticWritesConfigs'], [ElasticConfig]);
            }
            if (data.hasOwnProperty('endlessIpAddresses')) {
                obj['endlessIpAddresses'] = ApiClient.convertToType(data['endlessIpAddresses'], ['String']);
            }
            if (data.hasOwnProperty('ipFiltering')) {
                obj['ipFiltering'] = IpFiltering.constructFromObject(data['ipFiltering']);
            }
            if (data.hasOwnProperty('limitConcurrentRequests')) {
                obj['limitConcurrentRequests'] = ApiClient.convertToType(data['limitConcurrentRequests'], 'Boolean');
            }
            if (data.hasOwnProperty('lines')) {
                obj['lines'] = ApiClient.convertToType(data['lines'], ['String']);
            }
            if (data.hasOwnProperty('mailerSettings')) {
                obj['mailerSettings'] = MailerSettings.constructFromObject(data['mailerSettings']);
            }
            if (data.hasOwnProperty('maxConcurrentRequests')) {
                obj['maxConcurrentRequests'] = ApiClient.convertToType(data['maxConcurrentRequests'], 'Number');
            }
            if (data.hasOwnProperty('maxHttp10ResponseSize')) {
                obj['maxHttp10ResponseSize'] = ApiClient.convertToType(data['maxHttp10ResponseSize'], 'Number');
            }
            if (data.hasOwnProperty('maxLogsSize')) {
                obj['maxLogsSize'] = ApiClient.convertToType(data['maxLogsSize'], 'Number');
            }
            if (data.hasOwnProperty('middleFingers')) {
                obj['middleFingers'] = ApiClient.convertToType(data['middleFingers'], 'Boolean');
            }
            if (data.hasOwnProperty('perIpThrottlingQuota')) {
                obj['perIpThrottlingQuota'] = ApiClient.convertToType(data['perIpThrottlingQuota'], 'Number');
            }
            if (data.hasOwnProperty('privateAppsAuth0Config')) {
                obj['privateAppsAuth0Config'] = Auth0Config.constructFromObject(data['privateAppsAuth0Config']);
            }
            if (data.hasOwnProperty('streamEntityOnly')) {
                obj['streamEntityOnly'] = ApiClient.convertToType(data['streamEntityOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('throttlingQuota')) {
                obj['throttlingQuota'] = ApiClient.convertToType(data['throttlingQuota'], 'Number');
            }
            if (data.hasOwnProperty('u2fLoginOnly')) {
                obj['u2fLoginOnly'] = ApiClient.convertToType(data['u2fLoginOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('useCircuitBreakers')) {
                obj['useCircuitBreakers'] = ApiClient.convertToType(data['useCircuitBreakers'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GlobalConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GlobalConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GlobalConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['alertsEmails'])) {
            throw new Error("Expected the field `alertsEmails` to be an array in the JSON data but got " + data['alertsEmails']);
        }
        if (data['alertsWebhooks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['alertsWebhooks'])) {
                throw new Error("Expected the field `alertsWebhooks` to be an array in the JSON data but got " + data['alertsWebhooks']);
            }
            // validate the optional field `alertsWebhooks` (array)
            for (const item of data['alertsWebhooks']) {
                Webhook.validateJSON(item);
            };
        }
        if (data['analyticsWebhooks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['analyticsWebhooks'])) {
                throw new Error("Expected the field `analyticsWebhooks` to be an array in the JSON data but got " + data['analyticsWebhooks']);
            }
            // validate the optional field `analyticsWebhooks` (array)
            for (const item of data['analyticsWebhooks']) {
                Webhook.validateJSON(item);
            };
        }
        // validate the optional field `backofficeAuth0Config`
        if (data['backofficeAuth0Config']) { // data not null
          Auth0Config.validateJSON(data['backofficeAuth0Config']);
        }
        // validate the optional field `cleverSettings`
        if (data['cleverSettings']) { // data not null
          CleverSettings.validateJSON(data['cleverSettings']);
        }
        // validate the optional field `elasticReadsConfig`
        if (data['elasticReadsConfig']) { // data not null
          ElasticConfig.validateJSON(data['elasticReadsConfig']);
        }
        if (data['elasticWritesConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['elasticWritesConfigs'])) {
                throw new Error("Expected the field `elasticWritesConfigs` to be an array in the JSON data but got " + data['elasticWritesConfigs']);
            }
            // validate the optional field `elasticWritesConfigs` (array)
            for (const item of data['elasticWritesConfigs']) {
                ElasticConfig.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['endlessIpAddresses'])) {
            throw new Error("Expected the field `endlessIpAddresses` to be an array in the JSON data but got " + data['endlessIpAddresses']);
        }
        // validate the optional field `ipFiltering`
        if (data['ipFiltering']) { // data not null
          IpFiltering.validateJSON(data['ipFiltering']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['lines'])) {
            throw new Error("Expected the field `lines` to be an array in the JSON data but got " + data['lines']);
        }
        // validate the optional field `mailerSettings`
        if (data['mailerSettings']) { // data not null
          MailerSettings.validateJSON(data['mailerSettings']);
        }
        // validate the optional field `privateAppsAuth0Config`
        if (data['privateAppsAuth0Config']) { // data not null
          Auth0Config.validateJSON(data['privateAppsAuth0Config']);
        }

        return true;
    }


}

GlobalConfig.RequiredProperties = ["alertsEmails", "alertsWebhooks", "analyticsWebhooks", "apiReadOnly", "autoLinkToDefaultGroup", "endlessIpAddresses", "ipFiltering", "limitConcurrentRequests", "maxConcurrentRequests", "perIpThrottlingQuota", "streamEntityOnly", "throttlingQuota", "u2fLoginOnly", "useCircuitBreakers"];

/**
 * Email addresses that will receive all Otoroshi alert events
 * @member {Array.<String>} alertsEmails
 */
GlobalConfig.prototype['alertsEmails'] = undefined;

/**
 * Webhook that will receive all Otoroshi alert events
 * @member {Array.<module:model/Webhook>} alertsWebhooks
 */
GlobalConfig.prototype['alertsWebhooks'] = undefined;

/**
 * Webhook that will receive all internal Otoroshi events
 * @member {Array.<module:model/Webhook>} analyticsWebhooks
 */
GlobalConfig.prototype['analyticsWebhooks'] = undefined;

/**
 * If enabled, Admin API won't be able to write/update/delete entities
 * @member {Boolean} apiReadOnly
 */
GlobalConfig.prototype['apiReadOnly'] = undefined;

/**
 * If not defined, every new service descriptor will be added to the default group
 * @member {Boolean} autoLinkToDefaultGroup
 */
GlobalConfig.prototype['autoLinkToDefaultGroup'] = undefined;

/**
 * @member {module:model/Auth0Config} backofficeAuth0Config
 */
GlobalConfig.prototype['backofficeAuth0Config'] = undefined;

/**
 * @member {module:model/CleverSettings} cleverSettings
 */
GlobalConfig.prototype['cleverSettings'] = undefined;

/**
 * @member {module:model/ElasticConfig} elasticReadsConfig
 */
GlobalConfig.prototype['elasticReadsConfig'] = undefined;

/**
 * Configs. for Elastic writes
 * @member {Array.<module:model/ElasticConfig>} elasticWritesConfigs
 */
GlobalConfig.prototype['elasticWritesConfigs'] = undefined;

/**
 * IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros
 * @member {Array.<String>} endlessIpAddresses
 */
GlobalConfig.prototype['endlessIpAddresses'] = undefined;

/**
 * @member {module:model/IpFiltering} ipFiltering
 */
GlobalConfig.prototype['ipFiltering'] = undefined;

/**
 * If enabled, Otoroshi will reject new request if too much at the same time
 * @member {Boolean} limitConcurrentRequests
 */
GlobalConfig.prototype['limitConcurrentRequests'] = undefined;

/**
 * Possibles lines for Otoroshi
 * @member {Array.<String>} lines
 */
GlobalConfig.prototype['lines'] = undefined;

/**
 * @member {module:model/MailerSettings} mailerSettings
 */
GlobalConfig.prototype['mailerSettings'] = undefined;

/**
 * The number of authorized request processed at the same time
 * @member {Number} maxConcurrentRequests
 */
GlobalConfig.prototype['maxConcurrentRequests'] = undefined;

/**
 * The max size in bytes of an HTTP 1.0 response
 * @member {Number} maxHttp10ResponseSize
 */
GlobalConfig.prototype['maxHttp10ResponseSize'] = undefined;

/**
 * Number of events kept locally
 * @member {Number} maxLogsSize
 */
GlobalConfig.prototype['maxLogsSize'] = undefined;

/**
 * Use middle finger emoji as a response character for endless HTTP responses
 * @member {Boolean} middleFingers
 */
GlobalConfig.prototype['middleFingers'] = undefined;

/**
 * Authorized number of calls per second globally per IP address, measured on 10 seconds
 * @member {Number} perIpThrottlingQuota
 */
GlobalConfig.prototype['perIpThrottlingQuota'] = undefined;

/**
 * @member {module:model/Auth0Config} privateAppsAuth0Config
 */
GlobalConfig.prototype['privateAppsAuth0Config'] = undefined;

/**
 * HTTP will be streamed only. Doesn't work with old browsers
 * @member {Boolean} streamEntityOnly
 */
GlobalConfig.prototype['streamEntityOnly'] = undefined;

/**
 * Authorized number of calls per second globally, measured on 10 seconds
 * @member {Number} throttlingQuota
 */
GlobalConfig.prototype['throttlingQuota'] = undefined;

/**
 * If enabled, login to backoffice through Auth0 will be disabled
 * @member {Boolean} u2fLoginOnly
 */
GlobalConfig.prototype['u2fLoginOnly'] = undefined;

/**
 * If enabled, services will be authorized to use circuit breakers
 * @member {Boolean} useCircuitBreakers
 */
GlobalConfig.prototype['useCircuitBreakers'] = undefined;






export default GlobalConfig;

