/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OtoroshiHealth model module.
 * @module model/OtoroshiHealth
 * @version 1.5.0-dev
 */
class OtoroshiHealth {
    /**
     * Constructs a new <code>OtoroshiHealth</code>.
     * The structure that represent current Otoroshi health
     * @alias module:model/OtoroshiHealth
     * @param datastore {module:model/OtoroshiHealth.DatastoreEnum} 
     * @param otoroshi {module:model/OtoroshiHealth.OtoroshiEnum} 
     */
    constructor(datastore, otoroshi) { 
        
        OtoroshiHealth.initialize(this, datastore, otoroshi);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, datastore, otoroshi) { 
        obj['datastore'] = datastore;
        obj['otoroshi'] = otoroshi;
    }

    /**
     * Constructs a <code>OtoroshiHealth</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OtoroshiHealth} obj Optional instance to populate.
     * @return {module:model/OtoroshiHealth} The populated <code>OtoroshiHealth</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OtoroshiHealth();

            if (data.hasOwnProperty('datastore')) {
                obj['datastore'] = ApiClient.convertToType(data['datastore'], 'String');
            }
            if (data.hasOwnProperty('otoroshi')) {
                obj['otoroshi'] = ApiClient.convertToType(data['otoroshi'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OtoroshiHealth</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OtoroshiHealth</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OtoroshiHealth.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['datastore'] && !(typeof data['datastore'] === 'string' || data['datastore'] instanceof String)) {
            throw new Error("Expected the field `datastore` to be a primitive type in the JSON string but got " + data['datastore']);
        }
        // ensure the json data is a string
        if (data['otoroshi'] && !(typeof data['otoroshi'] === 'string' || data['otoroshi'] instanceof String)) {
            throw new Error("Expected the field `otoroshi` to be a primitive type in the JSON string but got " + data['otoroshi']);
        }

        return true;
    }


}

OtoroshiHealth.RequiredProperties = ["datastore", "otoroshi"];

/**
 * @member {module:model/OtoroshiHealth.DatastoreEnum} datastore
 */
OtoroshiHealth.prototype['datastore'] = undefined;

/**
 * @member {module:model/OtoroshiHealth.OtoroshiEnum} otoroshi
 */
OtoroshiHealth.prototype['otoroshi'] = undefined;





/**
 * Allowed values for the <code>datastore</code> property.
 * @enum {String}
 * @readonly
 */
OtoroshiHealth['DatastoreEnum'] = {

    /**
     * value: "healthy"
     * @const
     */
    "healthy": "healthy",

    /**
     * value: "unhealthy"
     * @const
     */
    "unhealthy": "unhealthy",

    /**
     * value: "unreachable"
     * @const
     */
    "unreachable": "unreachable"
};


/**
 * Allowed values for the <code>otoroshi</code> property.
 * @enum {String}
 * @readonly
 */
OtoroshiHealth['OtoroshiEnum'] = {

    /**
     * value: "healthy"
     * @const
     */
    "healthy": "healthy",

    /**
     * value: "unhealthy"
     * @const
     */
    "unhealthy": "unhealthy",

    /**
     * value: "down"
     * @const
     */
    "down": "down"
};



export default OtoroshiHealth;

