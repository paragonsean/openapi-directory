/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BadResponse model module.
 * @module model/BadResponse
 * @version 1.5.0-dev
 */
class BadResponse {
    /**
     * Constructs a new <code>BadResponse</code>.
     * An HTTP response that is not supposed to be returned by a service
     * @alias module:model/BadResponse
     * @param body {String} The body of the HTTP response
     * @param headers {Object.<String, String>} The HTTP headers of the response
     * @param status {Number} The HTTP status for the response
     */
    constructor(body, headers, status) { 
        
        BadResponse.initialize(this, body, headers, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, body, headers, status) { 
        obj['body'] = body;
        obj['headers'] = headers;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>BadResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BadResponse} obj Optional instance to populate.
     * @return {module:model/BadResponse} The populated <code>BadResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BadResponse();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], {'String': 'String'});
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BadResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BadResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BadResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }

        return true;
    }


}

BadResponse.RequiredProperties = ["body", "headers", "status"];

/**
 * The body of the HTTP response
 * @member {String} body
 */
BadResponse.prototype['body'] = undefined;

/**
 * The HTTP headers of the response
 * @member {Object.<String, String>} headers
 */
BadResponse.prototype['headers'] = undefined;

/**
 * The HTTP status for the response
 * @member {Number} status
 */
BadResponse.prototype['status'] = undefined;






export default BadResponse;

