/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScriptCompilationError model module.
 * @module model/ScriptCompilationError
 * @version 1.5.0-dev
 */
class ScriptCompilationError {
    /**
     * Constructs a new <code>ScriptCompilationError</code>.
     * The error of the compilation of a Script
     * @alias module:model/ScriptCompilationError
     * @param column {String} The column of the error
     * @param file {Object.<String, String>} The file where the error is located
     * @param line {String} The line of the error
     * @param message {Object.<String, String>} The message to display for the error
     * @param rawMessage {Object.<String, String>} The raw message from the compiler
     */
    constructor(column, file, line, message, rawMessage) { 
        
        ScriptCompilationError.initialize(this, column, file, line, message, rawMessage);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, column, file, line, message, rawMessage) { 
        obj['column'] = column;
        obj['file'] = file;
        obj['line'] = line;
        obj['message'] = message;
        obj['rawMessage'] = rawMessage;
    }

    /**
     * Constructs a <code>ScriptCompilationError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScriptCompilationError} obj Optional instance to populate.
     * @return {module:model/ScriptCompilationError} The populated <code>ScriptCompilationError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScriptCompilationError();

            if (data.hasOwnProperty('column')) {
                obj['column'] = ApiClient.convertToType(data['column'], 'String');
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = ApiClient.convertToType(data['file'], {'String': 'String'});
            }
            if (data.hasOwnProperty('line')) {
                obj['line'] = ApiClient.convertToType(data['line'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], {'String': 'String'});
            }
            if (data.hasOwnProperty('rawMessage')) {
                obj['rawMessage'] = ApiClient.convertToType(data['rawMessage'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScriptCompilationError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScriptCompilationError</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ScriptCompilationError.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['column'] && !(typeof data['column'] === 'string' || data['column'] instanceof String)) {
            throw new Error("Expected the field `column` to be a primitive type in the JSON string but got " + data['column']);
        }
        // ensure the json data is a string
        if (data['line'] && !(typeof data['line'] === 'string' || data['line'] instanceof String)) {
            throw new Error("Expected the field `line` to be a primitive type in the JSON string but got " + data['line']);
        }

        return true;
    }


}

ScriptCompilationError.RequiredProperties = ["column", "file", "line", "message", "rawMessage"];

/**
 * The column of the error
 * @member {String} column
 */
ScriptCompilationError.prototype['column'] = undefined;

/**
 * The file where the error is located
 * @member {Object.<String, String>} file
 */
ScriptCompilationError.prototype['file'] = undefined;

/**
 * The line of the error
 * @member {String} line
 */
ScriptCompilationError.prototype['line'] = undefined;

/**
 * The message to display for the error
 * @member {Object.<String, String>} message
 */
ScriptCompilationError.prototype['message'] = undefined;

/**
 * The raw message from the compiler
 * @member {Object.<String, String>} rawMessage
 */
ScriptCompilationError.prototype['rawMessage'] = undefined;






export default ScriptCompilationError;

