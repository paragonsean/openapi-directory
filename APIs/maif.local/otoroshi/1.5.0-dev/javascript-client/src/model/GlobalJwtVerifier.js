/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GlobalJwtVerifierAlgoSettings from './GlobalJwtVerifierAlgoSettings';
import GlobalJwtVerifierSource from './GlobalJwtVerifierSource';
import GlobalJwtVerifierStrategy from './GlobalJwtVerifierStrategy';

/**
 * The GlobalJwtVerifier model module.
 * @module model/GlobalJwtVerifier
 * @version 1.5.0-dev
 */
class GlobalJwtVerifier {
    /**
     * Constructs a new <code>GlobalJwtVerifier</code>.
     * A JWT verifier used by multiple service descriptor
     * @alias module:model/GlobalJwtVerifier
     * @param algoSettings {module:model/GlobalJwtVerifierAlgoSettings} 
     * @param desc {String} Verifier description
     * @param enabled {Boolean} Is it enabled
     * @param id {String} Verifier id
     * @param name {String} Verifier name
     * @param source {module:model/GlobalJwtVerifierSource} 
     * @param strategy {module:model/GlobalJwtVerifierStrategy} 
     * @param strict {Boolean} Does it fail if JWT not found
     */
    constructor(algoSettings, desc, enabled, id, name, source, strategy, strict) { 
        
        GlobalJwtVerifier.initialize(this, algoSettings, desc, enabled, id, name, source, strategy, strict);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, algoSettings, desc, enabled, id, name, source, strategy, strict) { 
        obj['algoSettings'] = algoSettings;
        obj['desc'] = desc;
        obj['enabled'] = enabled;
        obj['id'] = id;
        obj['name'] = name;
        obj['source'] = source;
        obj['strategy'] = strategy;
        obj['strict'] = strict;
    }

    /**
     * Constructs a <code>GlobalJwtVerifier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GlobalJwtVerifier} obj Optional instance to populate.
     * @return {module:model/GlobalJwtVerifier} The populated <code>GlobalJwtVerifier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GlobalJwtVerifier();

            if (data.hasOwnProperty('algoSettings')) {
                obj['algoSettings'] = GlobalJwtVerifierAlgoSettings.constructFromObject(data['algoSettings']);
            }
            if (data.hasOwnProperty('desc')) {
                obj['desc'] = ApiClient.convertToType(data['desc'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = GlobalJwtVerifierSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('strategy')) {
                obj['strategy'] = GlobalJwtVerifierStrategy.constructFromObject(data['strategy']);
            }
            if (data.hasOwnProperty('strict')) {
                obj['strict'] = ApiClient.convertToType(data['strict'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GlobalJwtVerifier</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GlobalJwtVerifier</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GlobalJwtVerifier.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `algoSettings`
        if (data['algoSettings']) { // data not null
          GlobalJwtVerifierAlgoSettings.validateJSON(data['algoSettings']);
        }
        // ensure the json data is a string
        if (data['desc'] && !(typeof data['desc'] === 'string' || data['desc'] instanceof String)) {
            throw new Error("Expected the field `desc` to be a primitive type in the JSON string but got " + data['desc']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          GlobalJwtVerifierSource.validateJSON(data['source']);
        }
        // validate the optional field `strategy`
        if (data['strategy']) { // data not null
          GlobalJwtVerifierStrategy.validateJSON(data['strategy']);
        }

        return true;
    }


}

GlobalJwtVerifier.RequiredProperties = ["algoSettings", "desc", "enabled", "id", "name", "source", "strategy", "strict"];

/**
 * @member {module:model/GlobalJwtVerifierAlgoSettings} algoSettings
 */
GlobalJwtVerifier.prototype['algoSettings'] = undefined;

/**
 * Verifier description
 * @member {String} desc
 */
GlobalJwtVerifier.prototype['desc'] = undefined;

/**
 * Is it enabled
 * @member {Boolean} enabled
 */
GlobalJwtVerifier.prototype['enabled'] = undefined;

/**
 * Verifier id
 * @member {String} id
 */
GlobalJwtVerifier.prototype['id'] = undefined;

/**
 * Verifier name
 * @member {String} name
 */
GlobalJwtVerifier.prototype['name'] = undefined;

/**
 * @member {module:model/GlobalJwtVerifierSource} source
 */
GlobalJwtVerifier.prototype['source'] = undefined;

/**
 * @member {module:model/GlobalJwtVerifierStrategy} strategy
 */
GlobalJwtVerifier.prototype['strategy'] = undefined;

/**
 * Does it fail if JWT not found
 * @member {Boolean} strict
 */
GlobalJwtVerifier.prototype['strict'] = undefined;






export default GlobalJwtVerifier;

