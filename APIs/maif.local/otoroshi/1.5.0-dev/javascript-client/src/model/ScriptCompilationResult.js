/**
 * Otoroshi Admin API
 * Admin API of the Otoroshi reverse proxy
 *
 * The version of the OpenAPI document: 1.5.0-dev
 * Contact: oss@maif.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScriptCompilationError from './ScriptCompilationError';

/**
 * The ScriptCompilationResult model module.
 * @module model/ScriptCompilationResult
 * @version 1.5.0-dev
 */
class ScriptCompilationResult {
    /**
     * Constructs a new <code>ScriptCompilationResult</code>.
     * The result of the compilation of a Script
     * @alias module:model/ScriptCompilationResult
     * @param done {Boolean} Is the task done or not
     */
    constructor(done) { 
        
        ScriptCompilationResult.initialize(this, done);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, done) { 
        obj['done'] = done;
    }

    /**
     * Constructs a <code>ScriptCompilationResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScriptCompilationResult} obj Optional instance to populate.
     * @return {module:model/ScriptCompilationResult} The populated <code>ScriptCompilationResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScriptCompilationResult();

            if (data.hasOwnProperty('done')) {
                obj['done'] = ApiClient.convertToType(data['done'], 'Boolean');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ScriptCompilationError.constructFromObject(data['error']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScriptCompilationResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScriptCompilationResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ScriptCompilationResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          ScriptCompilationError.validateJSON(data['error']);
        }

        return true;
    }


}

ScriptCompilationResult.RequiredProperties = ["done"];

/**
 * Is the task done or not
 * @member {Boolean} done
 */
ScriptCompilationResult.prototype['done'] = undefined;

/**
 * @member {module:model/ScriptCompilationError} error
 */
ScriptCompilationResult.prototype['error'] = undefined;






export default ScriptCompilationResult;

