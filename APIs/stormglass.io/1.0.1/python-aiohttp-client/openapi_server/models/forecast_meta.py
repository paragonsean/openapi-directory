# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ForecastMeta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, daily_quota: int=None, lat: float=None, lng: float=None, request_count: int=None):
        """ForecastMeta - a model defined in OpenAPI

        :param daily_quota: The daily_quota of this ForecastMeta.
        :param lat: The lat of this ForecastMeta.
        :param lng: The lng of this ForecastMeta.
        :param request_count: The request_count of this ForecastMeta.
        """
        self.openapi_types = {
            'daily_quota': int,
            'lat': float,
            'lng': float,
            'request_count': int
        }

        self.attribute_map = {
            'daily_quota': 'dailyQuota',
            'lat': 'lat',
            'lng': 'lng',
            'request_count': 'requestCount'
        }

        self._daily_quota = daily_quota
        self._lat = lat
        self._lng = lng
        self._request_count = request_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForecastMeta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Forecast_meta of this ForecastMeta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def daily_quota(self):
        """Gets the daily_quota of this ForecastMeta.

        The number of successful requests you can do on one day

        :return: The daily_quota of this ForecastMeta.
        :rtype: int
        """
        return self._daily_quota

    @daily_quota.setter
    def daily_quota(self, daily_quota):
        """Sets the daily_quota of this ForecastMeta.

        The number of successful requests you can do on one day

        :param daily_quota: The daily_quota of this ForecastMeta.
        :type daily_quota: int
        """

        self._daily_quota = daily_quota

    @property
    def lat(self):
        """Gets the lat of this ForecastMeta.

        The latitude the response is showing forecast data for

        :return: The lat of this ForecastMeta.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this ForecastMeta.

        The latitude the response is showing forecast data for

        :param lat: The lat of this ForecastMeta.
        :type lat: float
        """

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this ForecastMeta.

        The longitude the response is showing forecast data for

        :return: The lng of this ForecastMeta.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this ForecastMeta.

        The longitude the response is showing forecast data for

        :param lng: The lng of this ForecastMeta.
        :type lng: float
        """

        self._lng = lng

    @property
    def request_count(self):
        """Gets the request_count of this ForecastMeta.

        The number of successful requests made this day.

        :return: The request_count of this ForecastMeta.
        :rtype: int
        """
        return self._request_count

    @request_count.setter
    def request_count(self, request_count):
        """Sets the request_count of this ForecastMeta.

        The number of successful requests made this day.

        :param request_count: The request_count of this ForecastMeta.
        :type request_count: int
        """

        self._request_count = request_count
