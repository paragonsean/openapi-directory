# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.forecast_hours_inner_air_temperature_inner import ForecastHoursInnerAirTemperatureInner
from openapi_server.models.forecast_hours_inner_swell_direction_inner import ForecastHoursInnerSwellDirectionInner
from openapi_server.models.forecast_hours_inner_swell_height_inner import ForecastHoursInnerSwellHeightInner
from openapi_server.models.forecast_hours_inner_swell_period_inner import ForecastHoursInnerSwellPeriodInner
from openapi_server.models.forecast_hours_inner_water_temperature_inner import ForecastHoursInnerWaterTemperatureInner
from openapi_server.models.forecast_hours_inner_wave_direction_inner import ForecastHoursInnerWaveDirectionInner
from openapi_server.models.forecast_hours_inner_wave_height_inner import ForecastHoursInnerWaveHeightInner
from openapi_server.models.forecast_hours_inner_wave_period_inner import ForecastHoursInnerWavePeriodInner
from openapi_server.models.forecast_hours_inner_wind_direction_inner import ForecastHoursInnerWindDirectionInner
from openapi_server.models.forecast_hours_inner_wind_speed_inner import ForecastHoursInnerWindSpeedInner
from openapi_server import util


class ForecastHoursInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, air_temperature: List[ForecastHoursInnerAirTemperatureInner]=None, swell_direction: List[ForecastHoursInnerSwellDirectionInner]=None, swell_height: List[ForecastHoursInnerSwellHeightInner]=None, swell_period: List[ForecastHoursInnerSwellPeriodInner]=None, time: str=None, water_temperature: List[ForecastHoursInnerWaterTemperatureInner]=None, wave_direction: List[ForecastHoursInnerWaveDirectionInner]=None, wave_height: List[ForecastHoursInnerWaveHeightInner]=None, wave_period: List[ForecastHoursInnerWavePeriodInner]=None, wind_direction: List[ForecastHoursInnerWindDirectionInner]=None, wind_speed: List[ForecastHoursInnerWindSpeedInner]=None):
        """ForecastHoursInner - a model defined in OpenAPI

        :param air_temperature: The air_temperature of this ForecastHoursInner.
        :param swell_direction: The swell_direction of this ForecastHoursInner.
        :param swell_height: The swell_height of this ForecastHoursInner.
        :param swell_period: The swell_period of this ForecastHoursInner.
        :param time: The time of this ForecastHoursInner.
        :param water_temperature: The water_temperature of this ForecastHoursInner.
        :param wave_direction: The wave_direction of this ForecastHoursInner.
        :param wave_height: The wave_height of this ForecastHoursInner.
        :param wave_period: The wave_period of this ForecastHoursInner.
        :param wind_direction: The wind_direction of this ForecastHoursInner.
        :param wind_speed: The wind_speed of this ForecastHoursInner.
        """
        self.openapi_types = {
            'air_temperature': List[ForecastHoursInnerAirTemperatureInner],
            'swell_direction': List[ForecastHoursInnerSwellDirectionInner],
            'swell_height': List[ForecastHoursInnerSwellHeightInner],
            'swell_period': List[ForecastHoursInnerSwellPeriodInner],
            'time': str,
            'water_temperature': List[ForecastHoursInnerWaterTemperatureInner],
            'wave_direction': List[ForecastHoursInnerWaveDirectionInner],
            'wave_height': List[ForecastHoursInnerWaveHeightInner],
            'wave_period': List[ForecastHoursInnerWavePeriodInner],
            'wind_direction': List[ForecastHoursInnerWindDirectionInner],
            'wind_speed': List[ForecastHoursInnerWindSpeedInner]
        }

        self.attribute_map = {
            'air_temperature': 'airTemperature',
            'swell_direction': 'swellDirection',
            'swell_height': 'swellHeight',
            'swell_period': 'swellPeriod',
            'time': 'time',
            'water_temperature': 'waterTemperature',
            'wave_direction': 'waveDirection',
            'wave_height': 'waveHeight',
            'wave_period': 'wavePeriod',
            'wind_direction': 'windDirection',
            'wind_speed': 'windSpeed'
        }

        self._air_temperature = air_temperature
        self._swell_direction = swell_direction
        self._swell_height = swell_height
        self._swell_period = swell_period
        self._time = time
        self._water_temperature = water_temperature
        self._wave_direction = wave_direction
        self._wave_height = wave_height
        self._wave_period = wave_period
        self._wind_direction = wind_direction
        self._wind_speed = wind_speed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForecastHoursInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Forecast_hours_inner of this ForecastHoursInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def air_temperature(self):
        """Gets the air_temperature of this ForecastHoursInner.


        :return: The air_temperature of this ForecastHoursInner.
        :rtype: List[ForecastHoursInnerAirTemperatureInner]
        """
        return self._air_temperature

    @air_temperature.setter
    def air_temperature(self, air_temperature):
        """Sets the air_temperature of this ForecastHoursInner.


        :param air_temperature: The air_temperature of this ForecastHoursInner.
        :type air_temperature: List[ForecastHoursInnerAirTemperatureInner]
        """

        self._air_temperature = air_temperature

    @property
    def swell_direction(self):
        """Gets the swell_direction of this ForecastHoursInner.


        :return: The swell_direction of this ForecastHoursInner.
        :rtype: List[ForecastHoursInnerSwellDirectionInner]
        """
        return self._swell_direction

    @swell_direction.setter
    def swell_direction(self, swell_direction):
        """Sets the swell_direction of this ForecastHoursInner.


        :param swell_direction: The swell_direction of this ForecastHoursInner.
        :type swell_direction: List[ForecastHoursInnerSwellDirectionInner]
        """

        self._swell_direction = swell_direction

    @property
    def swell_height(self):
        """Gets the swell_height of this ForecastHoursInner.


        :return: The swell_height of this ForecastHoursInner.
        :rtype: List[ForecastHoursInnerSwellHeightInner]
        """
        return self._swell_height

    @swell_height.setter
    def swell_height(self, swell_height):
        """Sets the swell_height of this ForecastHoursInner.


        :param swell_height: The swell_height of this ForecastHoursInner.
        :type swell_height: List[ForecastHoursInnerSwellHeightInner]
        """

        self._swell_height = swell_height

    @property
    def swell_period(self):
        """Gets the swell_period of this ForecastHoursInner.


        :return: The swell_period of this ForecastHoursInner.
        :rtype: List[ForecastHoursInnerSwellPeriodInner]
        """
        return self._swell_period

    @swell_period.setter
    def swell_period(self, swell_period):
        """Sets the swell_period of this ForecastHoursInner.


        :param swell_period: The swell_period of this ForecastHoursInner.
        :type swell_period: List[ForecastHoursInnerSwellPeriodInner]
        """

        self._swell_period = swell_period

    @property
    def time(self):
        """Gets the time of this ForecastHoursInner.

        Timestamp in utc for the hour represented

        :return: The time of this ForecastHoursInner.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ForecastHoursInner.

        Timestamp in utc for the hour represented

        :param time: The time of this ForecastHoursInner.
        :type time: str
        """

        self._time = time

    @property
    def water_temperature(self):
        """Gets the water_temperature of this ForecastHoursInner.


        :return: The water_temperature of this ForecastHoursInner.
        :rtype: List[ForecastHoursInnerWaterTemperatureInner]
        """
        return self._water_temperature

    @water_temperature.setter
    def water_temperature(self, water_temperature):
        """Sets the water_temperature of this ForecastHoursInner.


        :param water_temperature: The water_temperature of this ForecastHoursInner.
        :type water_temperature: List[ForecastHoursInnerWaterTemperatureInner]
        """

        self._water_temperature = water_temperature

    @property
    def wave_direction(self):
        """Gets the wave_direction of this ForecastHoursInner.


        :return: The wave_direction of this ForecastHoursInner.
        :rtype: List[ForecastHoursInnerWaveDirectionInner]
        """
        return self._wave_direction

    @wave_direction.setter
    def wave_direction(self, wave_direction):
        """Sets the wave_direction of this ForecastHoursInner.


        :param wave_direction: The wave_direction of this ForecastHoursInner.
        :type wave_direction: List[ForecastHoursInnerWaveDirectionInner]
        """

        self._wave_direction = wave_direction

    @property
    def wave_height(self):
        """Gets the wave_height of this ForecastHoursInner.


        :return: The wave_height of this ForecastHoursInner.
        :rtype: List[ForecastHoursInnerWaveHeightInner]
        """
        return self._wave_height

    @wave_height.setter
    def wave_height(self, wave_height):
        """Sets the wave_height of this ForecastHoursInner.


        :param wave_height: The wave_height of this ForecastHoursInner.
        :type wave_height: List[ForecastHoursInnerWaveHeightInner]
        """

        self._wave_height = wave_height

    @property
    def wave_period(self):
        """Gets the wave_period of this ForecastHoursInner.


        :return: The wave_period of this ForecastHoursInner.
        :rtype: List[ForecastHoursInnerWavePeriodInner]
        """
        return self._wave_period

    @wave_period.setter
    def wave_period(self, wave_period):
        """Sets the wave_period of this ForecastHoursInner.


        :param wave_period: The wave_period of this ForecastHoursInner.
        :type wave_period: List[ForecastHoursInnerWavePeriodInner]
        """

        self._wave_period = wave_period

    @property
    def wind_direction(self):
        """Gets the wind_direction of this ForecastHoursInner.


        :return: The wind_direction of this ForecastHoursInner.
        :rtype: List[ForecastHoursInnerWindDirectionInner]
        """
        return self._wind_direction

    @wind_direction.setter
    def wind_direction(self, wind_direction):
        """Sets the wind_direction of this ForecastHoursInner.


        :param wind_direction: The wind_direction of this ForecastHoursInner.
        :type wind_direction: List[ForecastHoursInnerWindDirectionInner]
        """

        self._wind_direction = wind_direction

    @property
    def wind_speed(self):
        """Gets the wind_speed of this ForecastHoursInner.


        :return: The wind_speed of this ForecastHoursInner.
        :rtype: List[ForecastHoursInnerWindSpeedInner]
        """
        return self._wind_speed

    @wind_speed.setter
    def wind_speed(self, wind_speed):
        """Sets the wind_speed of this ForecastHoursInner.


        :param wind_speed: The wind_speed of this ForecastHoursInner.
        :type wind_speed: List[ForecastHoursInnerWindSpeedInner]
        """

        self._wind_speed = wind_speed
