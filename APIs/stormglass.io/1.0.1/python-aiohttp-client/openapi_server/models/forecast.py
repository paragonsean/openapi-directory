# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.forecast_hours_inner import ForecastHoursInner
from openapi_server.models.forecast_meta import ForecastMeta
from openapi_server import util


class Forecast(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hours: List[ForecastHoursInner]=None, meta: ForecastMeta=None):
        """Forecast - a model defined in OpenAPI

        :param hours: The hours of this Forecast.
        :param meta: The meta of this Forecast.
        """
        self.openapi_types = {
            'hours': List[ForecastHoursInner],
            'meta': ForecastMeta
        }

        self.attribute_map = {
            'hours': 'hours',
            'meta': 'meta'
        }

        self._hours = hours
        self._meta = meta

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Forecast':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Forecast of this Forecast.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hours(self):
        """Gets the hours of this Forecast.

        Every hour with forecast data is represented with an object in this array

        :return: The hours of this Forecast.
        :rtype: List[ForecastHoursInner]
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this Forecast.

        Every hour with forecast data is represented with an object in this array

        :param hours: The hours of this Forecast.
        :type hours: List[ForecastHoursInner]
        """

        self._hours = hours

    @property
    def meta(self):
        """Gets the meta of this Forecast.


        :return: The meta of this Forecast.
        :rtype: ForecastMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Forecast.


        :param meta: The meta of this Forecast.
        :type meta: ForecastMeta
        """

        self._meta = meta
