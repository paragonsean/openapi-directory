/**
 * Storm Glass Marine Weather
 * Global marine weather data from multiple sources in one single API with hourly resolution. Get your API key by visiting the Storm Glass web site.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@stormglass.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForecast_meta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForecast_meta::OAIForecast_meta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForecast_meta::OAIForecast_meta() {
    this->initializeModel();
}

OAIForecast_meta::~OAIForecast_meta() {}

void OAIForecast_meta::initializeModel() {

    m_daily_quota_isSet = false;
    m_daily_quota_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_request_count_isSet = false;
    m_request_count_isValid = false;
}

void OAIForecast_meta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForecast_meta::fromJsonObject(QJsonObject json) {

    m_daily_quota_isValid = ::OpenAPI::fromJsonValue(m_daily_quota, json[QString("dailyQuota")]);
    m_daily_quota_isSet = !json[QString("dailyQuota")].isNull() && m_daily_quota_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_request_count_isValid = ::OpenAPI::fromJsonValue(m_request_count, json[QString("requestCount")]);
    m_request_count_isSet = !json[QString("requestCount")].isNull() && m_request_count_isValid;
}

QString OAIForecast_meta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForecast_meta::asJsonObject() const {
    QJsonObject obj;
    if (m_daily_quota_isSet) {
        obj.insert(QString("dailyQuota"), ::OpenAPI::toJsonValue(m_daily_quota));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_request_count_isSet) {
        obj.insert(QString("requestCount"), ::OpenAPI::toJsonValue(m_request_count));
    }
    return obj;
}

qint32 OAIForecast_meta::getDailyQuota() const {
    return m_daily_quota;
}
void OAIForecast_meta::setDailyQuota(const qint32 &daily_quota) {
    m_daily_quota = daily_quota;
    m_daily_quota_isSet = true;
}

bool OAIForecast_meta::is_daily_quota_Set() const{
    return m_daily_quota_isSet;
}

bool OAIForecast_meta::is_daily_quota_Valid() const{
    return m_daily_quota_isValid;
}

double OAIForecast_meta::getLat() const {
    return m_lat;
}
void OAIForecast_meta::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIForecast_meta::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIForecast_meta::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIForecast_meta::getLng() const {
    return m_lng;
}
void OAIForecast_meta::setLng(const double &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAIForecast_meta::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAIForecast_meta::is_lng_Valid() const{
    return m_lng_isValid;
}

qint32 OAIForecast_meta::getRequestCount() const {
    return m_request_count;
}
void OAIForecast_meta::setRequestCount(const qint32 &request_count) {
    m_request_count = request_count;
    m_request_count_isSet = true;
}

bool OAIForecast_meta::is_request_count_Set() const{
    return m_request_count_isSet;
}

bool OAIForecast_meta::is_request_count_Valid() const{
    return m_request_count_isValid;
}

bool OAIForecast_meta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_daily_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForecast_meta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
