/*
 * Storm Glass Marine Weather
 * Global marine weather data from multiple sources in one single API with hourly resolution. Get your API key by visiting the Storm Glass web site.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@stormglass.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ForecastHoursInnerAirTemperatureInner;
import org.openapitools.client.model.ForecastHoursInnerSwellDirectionInner;
import org.openapitools.client.model.ForecastHoursInnerSwellHeightInner;
import org.openapitools.client.model.ForecastHoursInnerSwellPeriodInner;
import org.openapitools.client.model.ForecastHoursInnerWaterTemperatureInner;
import org.openapitools.client.model.ForecastHoursInnerWaveDirectionInner;
import org.openapitools.client.model.ForecastHoursInnerWaveHeightInner;
import org.openapitools.client.model.ForecastHoursInnerWavePeriodInner;
import org.openapitools.client.model.ForecastHoursInnerWindDirectionInner;
import org.openapitools.client.model.ForecastHoursInnerWindSpeedInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Hourly forecast information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:05.997794-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ForecastHoursInner {
  public static final String SERIALIZED_NAME_AIR_TEMPERATURE = "airTemperature";
  @SerializedName(SERIALIZED_NAME_AIR_TEMPERATURE)
  private List<ForecastHoursInnerAirTemperatureInner> airTemperature = new ArrayList<>();

  public static final String SERIALIZED_NAME_SWELL_DIRECTION = "swellDirection";
  @SerializedName(SERIALIZED_NAME_SWELL_DIRECTION)
  private List<ForecastHoursInnerSwellDirectionInner> swellDirection = new ArrayList<>();

  public static final String SERIALIZED_NAME_SWELL_HEIGHT = "swellHeight";
  @SerializedName(SERIALIZED_NAME_SWELL_HEIGHT)
  private List<ForecastHoursInnerSwellHeightInner> swellHeight = new ArrayList<>();

  public static final String SERIALIZED_NAME_SWELL_PERIOD = "swellPeriod";
  @SerializedName(SERIALIZED_NAME_SWELL_PERIOD)
  private List<ForecastHoursInnerSwellPeriodInner> swellPeriod = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  public static final String SERIALIZED_NAME_WATER_TEMPERATURE = "waterTemperature";
  @SerializedName(SERIALIZED_NAME_WATER_TEMPERATURE)
  private List<ForecastHoursInnerWaterTemperatureInner> waterTemperature = new ArrayList<>();

  public static final String SERIALIZED_NAME_WAVE_DIRECTION = "waveDirection";
  @SerializedName(SERIALIZED_NAME_WAVE_DIRECTION)
  private List<ForecastHoursInnerWaveDirectionInner> waveDirection = new ArrayList<>();

  public static final String SERIALIZED_NAME_WAVE_HEIGHT = "waveHeight";
  @SerializedName(SERIALIZED_NAME_WAVE_HEIGHT)
  private List<ForecastHoursInnerWaveHeightInner> waveHeight = new ArrayList<>();

  public static final String SERIALIZED_NAME_WAVE_PERIOD = "wavePeriod";
  @SerializedName(SERIALIZED_NAME_WAVE_PERIOD)
  private List<ForecastHoursInnerWavePeriodInner> wavePeriod = new ArrayList<>();

  public static final String SERIALIZED_NAME_WIND_DIRECTION = "windDirection";
  @SerializedName(SERIALIZED_NAME_WIND_DIRECTION)
  private List<ForecastHoursInnerWindDirectionInner> windDirection = new ArrayList<>();

  public static final String SERIALIZED_NAME_WIND_SPEED = "windSpeed";
  @SerializedName(SERIALIZED_NAME_WIND_SPEED)
  private List<ForecastHoursInnerWindSpeedInner> windSpeed = new ArrayList<>();

  public ForecastHoursInner() {
  }

  public ForecastHoursInner airTemperature(List<ForecastHoursInnerAirTemperatureInner> airTemperature) {
    this.airTemperature = airTemperature;
    return this;
  }

  public ForecastHoursInner addAirTemperatureItem(ForecastHoursInnerAirTemperatureInner airTemperatureItem) {
    if (this.airTemperature == null) {
      this.airTemperature = new ArrayList<>();
    }
    this.airTemperature.add(airTemperatureItem);
    return this;
  }

  /**
   * Get airTemperature
   * @return airTemperature
   */
  @javax.annotation.Nullable
  public List<ForecastHoursInnerAirTemperatureInner> getAirTemperature() {
    return airTemperature;
  }

  public void setAirTemperature(List<ForecastHoursInnerAirTemperatureInner> airTemperature) {
    this.airTemperature = airTemperature;
  }


  public ForecastHoursInner swellDirection(List<ForecastHoursInnerSwellDirectionInner> swellDirection) {
    this.swellDirection = swellDirection;
    return this;
  }

  public ForecastHoursInner addSwellDirectionItem(ForecastHoursInnerSwellDirectionInner swellDirectionItem) {
    if (this.swellDirection == null) {
      this.swellDirection = new ArrayList<>();
    }
    this.swellDirection.add(swellDirectionItem);
    return this;
  }

  /**
   * Get swellDirection
   * @return swellDirection
   */
  @javax.annotation.Nullable
  public List<ForecastHoursInnerSwellDirectionInner> getSwellDirection() {
    return swellDirection;
  }

  public void setSwellDirection(List<ForecastHoursInnerSwellDirectionInner> swellDirection) {
    this.swellDirection = swellDirection;
  }


  public ForecastHoursInner swellHeight(List<ForecastHoursInnerSwellHeightInner> swellHeight) {
    this.swellHeight = swellHeight;
    return this;
  }

  public ForecastHoursInner addSwellHeightItem(ForecastHoursInnerSwellHeightInner swellHeightItem) {
    if (this.swellHeight == null) {
      this.swellHeight = new ArrayList<>();
    }
    this.swellHeight.add(swellHeightItem);
    return this;
  }

  /**
   * Get swellHeight
   * @return swellHeight
   */
  @javax.annotation.Nullable
  public List<ForecastHoursInnerSwellHeightInner> getSwellHeight() {
    return swellHeight;
  }

  public void setSwellHeight(List<ForecastHoursInnerSwellHeightInner> swellHeight) {
    this.swellHeight = swellHeight;
  }


  public ForecastHoursInner swellPeriod(List<ForecastHoursInnerSwellPeriodInner> swellPeriod) {
    this.swellPeriod = swellPeriod;
    return this;
  }

  public ForecastHoursInner addSwellPeriodItem(ForecastHoursInnerSwellPeriodInner swellPeriodItem) {
    if (this.swellPeriod == null) {
      this.swellPeriod = new ArrayList<>();
    }
    this.swellPeriod.add(swellPeriodItem);
    return this;
  }

  /**
   * Get swellPeriod
   * @return swellPeriod
   */
  @javax.annotation.Nullable
  public List<ForecastHoursInnerSwellPeriodInner> getSwellPeriod() {
    return swellPeriod;
  }

  public void setSwellPeriod(List<ForecastHoursInnerSwellPeriodInner> swellPeriod) {
    this.swellPeriod = swellPeriod;
  }


  public ForecastHoursInner time(String time) {
    this.time = time;
    return this;
  }

  /**
   * Timestamp in utc for the hour represented
   * @return time
   */
  @javax.annotation.Nullable
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }


  public ForecastHoursInner waterTemperature(List<ForecastHoursInnerWaterTemperatureInner> waterTemperature) {
    this.waterTemperature = waterTemperature;
    return this;
  }

  public ForecastHoursInner addWaterTemperatureItem(ForecastHoursInnerWaterTemperatureInner waterTemperatureItem) {
    if (this.waterTemperature == null) {
      this.waterTemperature = new ArrayList<>();
    }
    this.waterTemperature.add(waterTemperatureItem);
    return this;
  }

  /**
   * Get waterTemperature
   * @return waterTemperature
   */
  @javax.annotation.Nullable
  public List<ForecastHoursInnerWaterTemperatureInner> getWaterTemperature() {
    return waterTemperature;
  }

  public void setWaterTemperature(List<ForecastHoursInnerWaterTemperatureInner> waterTemperature) {
    this.waterTemperature = waterTemperature;
  }


  public ForecastHoursInner waveDirection(List<ForecastHoursInnerWaveDirectionInner> waveDirection) {
    this.waveDirection = waveDirection;
    return this;
  }

  public ForecastHoursInner addWaveDirectionItem(ForecastHoursInnerWaveDirectionInner waveDirectionItem) {
    if (this.waveDirection == null) {
      this.waveDirection = new ArrayList<>();
    }
    this.waveDirection.add(waveDirectionItem);
    return this;
  }

  /**
   * Get waveDirection
   * @return waveDirection
   */
  @javax.annotation.Nullable
  public List<ForecastHoursInnerWaveDirectionInner> getWaveDirection() {
    return waveDirection;
  }

  public void setWaveDirection(List<ForecastHoursInnerWaveDirectionInner> waveDirection) {
    this.waveDirection = waveDirection;
  }


  public ForecastHoursInner waveHeight(List<ForecastHoursInnerWaveHeightInner> waveHeight) {
    this.waveHeight = waveHeight;
    return this;
  }

  public ForecastHoursInner addWaveHeightItem(ForecastHoursInnerWaveHeightInner waveHeightItem) {
    if (this.waveHeight == null) {
      this.waveHeight = new ArrayList<>();
    }
    this.waveHeight.add(waveHeightItem);
    return this;
  }

  /**
   * Get waveHeight
   * @return waveHeight
   */
  @javax.annotation.Nullable
  public List<ForecastHoursInnerWaveHeightInner> getWaveHeight() {
    return waveHeight;
  }

  public void setWaveHeight(List<ForecastHoursInnerWaveHeightInner> waveHeight) {
    this.waveHeight = waveHeight;
  }


  public ForecastHoursInner wavePeriod(List<ForecastHoursInnerWavePeriodInner> wavePeriod) {
    this.wavePeriod = wavePeriod;
    return this;
  }

  public ForecastHoursInner addWavePeriodItem(ForecastHoursInnerWavePeriodInner wavePeriodItem) {
    if (this.wavePeriod == null) {
      this.wavePeriod = new ArrayList<>();
    }
    this.wavePeriod.add(wavePeriodItem);
    return this;
  }

  /**
   * Get wavePeriod
   * @return wavePeriod
   */
  @javax.annotation.Nullable
  public List<ForecastHoursInnerWavePeriodInner> getWavePeriod() {
    return wavePeriod;
  }

  public void setWavePeriod(List<ForecastHoursInnerWavePeriodInner> wavePeriod) {
    this.wavePeriod = wavePeriod;
  }


  public ForecastHoursInner windDirection(List<ForecastHoursInnerWindDirectionInner> windDirection) {
    this.windDirection = windDirection;
    return this;
  }

  public ForecastHoursInner addWindDirectionItem(ForecastHoursInnerWindDirectionInner windDirectionItem) {
    if (this.windDirection == null) {
      this.windDirection = new ArrayList<>();
    }
    this.windDirection.add(windDirectionItem);
    return this;
  }

  /**
   * Get windDirection
   * @return windDirection
   */
  @javax.annotation.Nullable
  public List<ForecastHoursInnerWindDirectionInner> getWindDirection() {
    return windDirection;
  }

  public void setWindDirection(List<ForecastHoursInnerWindDirectionInner> windDirection) {
    this.windDirection = windDirection;
  }


  public ForecastHoursInner windSpeed(List<ForecastHoursInnerWindSpeedInner> windSpeed) {
    this.windSpeed = windSpeed;
    return this;
  }

  public ForecastHoursInner addWindSpeedItem(ForecastHoursInnerWindSpeedInner windSpeedItem) {
    if (this.windSpeed == null) {
      this.windSpeed = new ArrayList<>();
    }
    this.windSpeed.add(windSpeedItem);
    return this;
  }

  /**
   * Get windSpeed
   * @return windSpeed
   */
  @javax.annotation.Nullable
  public List<ForecastHoursInnerWindSpeedInner> getWindSpeed() {
    return windSpeed;
  }

  public void setWindSpeed(List<ForecastHoursInnerWindSpeedInner> windSpeed) {
    this.windSpeed = windSpeed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastHoursInner forecastHoursInner = (ForecastHoursInner) o;
    return Objects.equals(this.airTemperature, forecastHoursInner.airTemperature) &&
        Objects.equals(this.swellDirection, forecastHoursInner.swellDirection) &&
        Objects.equals(this.swellHeight, forecastHoursInner.swellHeight) &&
        Objects.equals(this.swellPeriod, forecastHoursInner.swellPeriod) &&
        Objects.equals(this.time, forecastHoursInner.time) &&
        Objects.equals(this.waterTemperature, forecastHoursInner.waterTemperature) &&
        Objects.equals(this.waveDirection, forecastHoursInner.waveDirection) &&
        Objects.equals(this.waveHeight, forecastHoursInner.waveHeight) &&
        Objects.equals(this.wavePeriod, forecastHoursInner.wavePeriod) &&
        Objects.equals(this.windDirection, forecastHoursInner.windDirection) &&
        Objects.equals(this.windSpeed, forecastHoursInner.windSpeed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airTemperature, swellDirection, swellHeight, swellPeriod, time, waterTemperature, waveDirection, waveHeight, wavePeriod, windDirection, windSpeed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastHoursInner {\n");
    sb.append("    airTemperature: ").append(toIndentedString(airTemperature)).append("\n");
    sb.append("    swellDirection: ").append(toIndentedString(swellDirection)).append("\n");
    sb.append("    swellHeight: ").append(toIndentedString(swellHeight)).append("\n");
    sb.append("    swellPeriod: ").append(toIndentedString(swellPeriod)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    waterTemperature: ").append(toIndentedString(waterTemperature)).append("\n");
    sb.append("    waveDirection: ").append(toIndentedString(waveDirection)).append("\n");
    sb.append("    waveHeight: ").append(toIndentedString(waveHeight)).append("\n");
    sb.append("    wavePeriod: ").append(toIndentedString(wavePeriod)).append("\n");
    sb.append("    windDirection: ").append(toIndentedString(windDirection)).append("\n");
    sb.append("    windSpeed: ").append(toIndentedString(windSpeed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("airTemperature");
    openapiFields.add("swellDirection");
    openapiFields.add("swellHeight");
    openapiFields.add("swellPeriod");
    openapiFields.add("time");
    openapiFields.add("waterTemperature");
    openapiFields.add("waveDirection");
    openapiFields.add("waveHeight");
    openapiFields.add("wavePeriod");
    openapiFields.add("windDirection");
    openapiFields.add("windSpeed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ForecastHoursInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ForecastHoursInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ForecastHoursInner is not found in the empty JSON string", ForecastHoursInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ForecastHoursInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ForecastHoursInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("airTemperature") != null && !jsonObj.get("airTemperature").isJsonNull()) {
        JsonArray jsonArrayairTemperature = jsonObj.getAsJsonArray("airTemperature");
        if (jsonArrayairTemperature != null) {
          // ensure the json data is an array
          if (!jsonObj.get("airTemperature").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `airTemperature` to be an array in the JSON string but got `%s`", jsonObj.get("airTemperature").toString()));
          }

          // validate the optional field `airTemperature` (array)
          for (int i = 0; i < jsonArrayairTemperature.size(); i++) {
            ForecastHoursInnerAirTemperatureInner.validateJsonElement(jsonArrayairTemperature.get(i));
          };
        }
      }
      if (jsonObj.get("swellDirection") != null && !jsonObj.get("swellDirection").isJsonNull()) {
        JsonArray jsonArrayswellDirection = jsonObj.getAsJsonArray("swellDirection");
        if (jsonArrayswellDirection != null) {
          // ensure the json data is an array
          if (!jsonObj.get("swellDirection").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `swellDirection` to be an array in the JSON string but got `%s`", jsonObj.get("swellDirection").toString()));
          }

          // validate the optional field `swellDirection` (array)
          for (int i = 0; i < jsonArrayswellDirection.size(); i++) {
            ForecastHoursInnerSwellDirectionInner.validateJsonElement(jsonArrayswellDirection.get(i));
          };
        }
      }
      if (jsonObj.get("swellHeight") != null && !jsonObj.get("swellHeight").isJsonNull()) {
        JsonArray jsonArrayswellHeight = jsonObj.getAsJsonArray("swellHeight");
        if (jsonArrayswellHeight != null) {
          // ensure the json data is an array
          if (!jsonObj.get("swellHeight").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `swellHeight` to be an array in the JSON string but got `%s`", jsonObj.get("swellHeight").toString()));
          }

          // validate the optional field `swellHeight` (array)
          for (int i = 0; i < jsonArrayswellHeight.size(); i++) {
            ForecastHoursInnerSwellHeightInner.validateJsonElement(jsonArrayswellHeight.get(i));
          };
        }
      }
      if (jsonObj.get("swellPeriod") != null && !jsonObj.get("swellPeriod").isJsonNull()) {
        JsonArray jsonArrayswellPeriod = jsonObj.getAsJsonArray("swellPeriod");
        if (jsonArrayswellPeriod != null) {
          // ensure the json data is an array
          if (!jsonObj.get("swellPeriod").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `swellPeriod` to be an array in the JSON string but got `%s`", jsonObj.get("swellPeriod").toString()));
          }

          // validate the optional field `swellPeriod` (array)
          for (int i = 0; i < jsonArrayswellPeriod.size(); i++) {
            ForecastHoursInnerSwellPeriodInner.validateJsonElement(jsonArrayswellPeriod.get(i));
          };
        }
      }
      if ((jsonObj.get("time") != null && !jsonObj.get("time").isJsonNull()) && !jsonObj.get("time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time").toString()));
      }
      if (jsonObj.get("waterTemperature") != null && !jsonObj.get("waterTemperature").isJsonNull()) {
        JsonArray jsonArraywaterTemperature = jsonObj.getAsJsonArray("waterTemperature");
        if (jsonArraywaterTemperature != null) {
          // ensure the json data is an array
          if (!jsonObj.get("waterTemperature").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `waterTemperature` to be an array in the JSON string but got `%s`", jsonObj.get("waterTemperature").toString()));
          }

          // validate the optional field `waterTemperature` (array)
          for (int i = 0; i < jsonArraywaterTemperature.size(); i++) {
            ForecastHoursInnerWaterTemperatureInner.validateJsonElement(jsonArraywaterTemperature.get(i));
          };
        }
      }
      if (jsonObj.get("waveDirection") != null && !jsonObj.get("waveDirection").isJsonNull()) {
        JsonArray jsonArraywaveDirection = jsonObj.getAsJsonArray("waveDirection");
        if (jsonArraywaveDirection != null) {
          // ensure the json data is an array
          if (!jsonObj.get("waveDirection").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `waveDirection` to be an array in the JSON string but got `%s`", jsonObj.get("waveDirection").toString()));
          }

          // validate the optional field `waveDirection` (array)
          for (int i = 0; i < jsonArraywaveDirection.size(); i++) {
            ForecastHoursInnerWaveDirectionInner.validateJsonElement(jsonArraywaveDirection.get(i));
          };
        }
      }
      if (jsonObj.get("waveHeight") != null && !jsonObj.get("waveHeight").isJsonNull()) {
        JsonArray jsonArraywaveHeight = jsonObj.getAsJsonArray("waveHeight");
        if (jsonArraywaveHeight != null) {
          // ensure the json data is an array
          if (!jsonObj.get("waveHeight").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `waveHeight` to be an array in the JSON string but got `%s`", jsonObj.get("waveHeight").toString()));
          }

          // validate the optional field `waveHeight` (array)
          for (int i = 0; i < jsonArraywaveHeight.size(); i++) {
            ForecastHoursInnerWaveHeightInner.validateJsonElement(jsonArraywaveHeight.get(i));
          };
        }
      }
      if (jsonObj.get("wavePeriod") != null && !jsonObj.get("wavePeriod").isJsonNull()) {
        JsonArray jsonArraywavePeriod = jsonObj.getAsJsonArray("wavePeriod");
        if (jsonArraywavePeriod != null) {
          // ensure the json data is an array
          if (!jsonObj.get("wavePeriod").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `wavePeriod` to be an array in the JSON string but got `%s`", jsonObj.get("wavePeriod").toString()));
          }

          // validate the optional field `wavePeriod` (array)
          for (int i = 0; i < jsonArraywavePeriod.size(); i++) {
            ForecastHoursInnerWavePeriodInner.validateJsonElement(jsonArraywavePeriod.get(i));
          };
        }
      }
      if (jsonObj.get("windDirection") != null && !jsonObj.get("windDirection").isJsonNull()) {
        JsonArray jsonArraywindDirection = jsonObj.getAsJsonArray("windDirection");
        if (jsonArraywindDirection != null) {
          // ensure the json data is an array
          if (!jsonObj.get("windDirection").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `windDirection` to be an array in the JSON string but got `%s`", jsonObj.get("windDirection").toString()));
          }

          // validate the optional field `windDirection` (array)
          for (int i = 0; i < jsonArraywindDirection.size(); i++) {
            ForecastHoursInnerWindDirectionInner.validateJsonElement(jsonArraywindDirection.get(i));
          };
        }
      }
      if (jsonObj.get("windSpeed") != null && !jsonObj.get("windSpeed").isJsonNull()) {
        JsonArray jsonArraywindSpeed = jsonObj.getAsJsonArray("windSpeed");
        if (jsonArraywindSpeed != null) {
          // ensure the json data is an array
          if (!jsonObj.get("windSpeed").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `windSpeed` to be an array in the JSON string but got `%s`", jsonObj.get("windSpeed").toString()));
          }

          // validate the optional field `windSpeed` (array)
          for (int i = 0; i < jsonArraywindSpeed.size(); i++) {
            ForecastHoursInnerWindSpeedInner.validateJsonElement(jsonArraywindSpeed.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ForecastHoursInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ForecastHoursInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ForecastHoursInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ForecastHoursInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ForecastHoursInner>() {
           @Override
           public void write(JsonWriter out, ForecastHoursInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ForecastHoursInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ForecastHoursInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ForecastHoursInner
   * @throws IOException if the JSON string is invalid with respect to ForecastHoursInner
   */
  public static ForecastHoursInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ForecastHoursInner.class);
  }

  /**
   * Convert an instance of ForecastHoursInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

