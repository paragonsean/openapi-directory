/**
 * Storm Glass Marine Weather
 * Global marine weather data from multiple sources in one single API with hourly resolution. Get your API key by visiting the Storm Glass web site.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@stormglass.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ForecastHoursInnerAirTemperatureInner from './ForecastHoursInnerAirTemperatureInner';
import ForecastHoursInnerSwellDirectionInner from './ForecastHoursInnerSwellDirectionInner';
import ForecastHoursInnerSwellHeightInner from './ForecastHoursInnerSwellHeightInner';
import ForecastHoursInnerSwellPeriodInner from './ForecastHoursInnerSwellPeriodInner';
import ForecastHoursInnerWaterTemperatureInner from './ForecastHoursInnerWaterTemperatureInner';
import ForecastHoursInnerWaveDirectionInner from './ForecastHoursInnerWaveDirectionInner';
import ForecastHoursInnerWaveHeightInner from './ForecastHoursInnerWaveHeightInner';
import ForecastHoursInnerWavePeriodInner from './ForecastHoursInnerWavePeriodInner';
import ForecastHoursInnerWindDirectionInner from './ForecastHoursInnerWindDirectionInner';
import ForecastHoursInnerWindSpeedInner from './ForecastHoursInnerWindSpeedInner';

/**
 * The ForecastHoursInner model module.
 * @module model/ForecastHoursInner
 * @version 1.0.1
 */
class ForecastHoursInner {
    /**
     * Constructs a new <code>ForecastHoursInner</code>.
     * Hourly forecast information
     * @alias module:model/ForecastHoursInner
     */
    constructor() { 
        
        ForecastHoursInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ForecastHoursInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ForecastHoursInner} obj Optional instance to populate.
     * @return {module:model/ForecastHoursInner} The populated <code>ForecastHoursInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ForecastHoursInner();

            if (data.hasOwnProperty('airTemperature')) {
                obj['airTemperature'] = ApiClient.convertToType(data['airTemperature'], [ForecastHoursInnerAirTemperatureInner]);
            }
            if (data.hasOwnProperty('swellDirection')) {
                obj['swellDirection'] = ApiClient.convertToType(data['swellDirection'], [ForecastHoursInnerSwellDirectionInner]);
            }
            if (data.hasOwnProperty('swellHeight')) {
                obj['swellHeight'] = ApiClient.convertToType(data['swellHeight'], [ForecastHoursInnerSwellHeightInner]);
            }
            if (data.hasOwnProperty('swellPeriod')) {
                obj['swellPeriod'] = ApiClient.convertToType(data['swellPeriod'], [ForecastHoursInnerSwellPeriodInner]);
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'String');
            }
            if (data.hasOwnProperty('waterTemperature')) {
                obj['waterTemperature'] = ApiClient.convertToType(data['waterTemperature'], [ForecastHoursInnerWaterTemperatureInner]);
            }
            if (data.hasOwnProperty('waveDirection')) {
                obj['waveDirection'] = ApiClient.convertToType(data['waveDirection'], [ForecastHoursInnerWaveDirectionInner]);
            }
            if (data.hasOwnProperty('waveHeight')) {
                obj['waveHeight'] = ApiClient.convertToType(data['waveHeight'], [ForecastHoursInnerWaveHeightInner]);
            }
            if (data.hasOwnProperty('wavePeriod')) {
                obj['wavePeriod'] = ApiClient.convertToType(data['wavePeriod'], [ForecastHoursInnerWavePeriodInner]);
            }
            if (data.hasOwnProperty('windDirection')) {
                obj['windDirection'] = ApiClient.convertToType(data['windDirection'], [ForecastHoursInnerWindDirectionInner]);
            }
            if (data.hasOwnProperty('windSpeed')) {
                obj['windSpeed'] = ApiClient.convertToType(data['windSpeed'], [ForecastHoursInnerWindSpeedInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ForecastHoursInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ForecastHoursInner</code>.
     */
    static validateJSON(data) {
        if (data['airTemperature']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['airTemperature'])) {
                throw new Error("Expected the field `airTemperature` to be an array in the JSON data but got " + data['airTemperature']);
            }
            // validate the optional field `airTemperature` (array)
            for (const item of data['airTemperature']) {
                ForecastHoursInnerAirTemperatureInner.validateJSON(item);
            };
        }
        if (data['swellDirection']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['swellDirection'])) {
                throw new Error("Expected the field `swellDirection` to be an array in the JSON data but got " + data['swellDirection']);
            }
            // validate the optional field `swellDirection` (array)
            for (const item of data['swellDirection']) {
                ForecastHoursInnerSwellDirectionInner.validateJSON(item);
            };
        }
        if (data['swellHeight']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['swellHeight'])) {
                throw new Error("Expected the field `swellHeight` to be an array in the JSON data but got " + data['swellHeight']);
            }
            // validate the optional field `swellHeight` (array)
            for (const item of data['swellHeight']) {
                ForecastHoursInnerSwellHeightInner.validateJSON(item);
            };
        }
        if (data['swellPeriod']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['swellPeriod'])) {
                throw new Error("Expected the field `swellPeriod` to be an array in the JSON data but got " + data['swellPeriod']);
            }
            // validate the optional field `swellPeriod` (array)
            for (const item of data['swellPeriod']) {
                ForecastHoursInnerSwellPeriodInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['time'] && !(typeof data['time'] === 'string' || data['time'] instanceof String)) {
            throw new Error("Expected the field `time` to be a primitive type in the JSON string but got " + data['time']);
        }
        if (data['waterTemperature']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['waterTemperature'])) {
                throw new Error("Expected the field `waterTemperature` to be an array in the JSON data but got " + data['waterTemperature']);
            }
            // validate the optional field `waterTemperature` (array)
            for (const item of data['waterTemperature']) {
                ForecastHoursInnerWaterTemperatureInner.validateJSON(item);
            };
        }
        if (data['waveDirection']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['waveDirection'])) {
                throw new Error("Expected the field `waveDirection` to be an array in the JSON data but got " + data['waveDirection']);
            }
            // validate the optional field `waveDirection` (array)
            for (const item of data['waveDirection']) {
                ForecastHoursInnerWaveDirectionInner.validateJSON(item);
            };
        }
        if (data['waveHeight']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['waveHeight'])) {
                throw new Error("Expected the field `waveHeight` to be an array in the JSON data but got " + data['waveHeight']);
            }
            // validate the optional field `waveHeight` (array)
            for (const item of data['waveHeight']) {
                ForecastHoursInnerWaveHeightInner.validateJSON(item);
            };
        }
        if (data['wavePeriod']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['wavePeriod'])) {
                throw new Error("Expected the field `wavePeriod` to be an array in the JSON data but got " + data['wavePeriod']);
            }
            // validate the optional field `wavePeriod` (array)
            for (const item of data['wavePeriod']) {
                ForecastHoursInnerWavePeriodInner.validateJSON(item);
            };
        }
        if (data['windDirection']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['windDirection'])) {
                throw new Error("Expected the field `windDirection` to be an array in the JSON data but got " + data['windDirection']);
            }
            // validate the optional field `windDirection` (array)
            for (const item of data['windDirection']) {
                ForecastHoursInnerWindDirectionInner.validateJSON(item);
            };
        }
        if (data['windSpeed']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['windSpeed'])) {
                throw new Error("Expected the field `windSpeed` to be an array in the JSON data but got " + data['windSpeed']);
            }
            // validate the optional field `windSpeed` (array)
            for (const item of data['windSpeed']) {
                ForecastHoursInnerWindSpeedInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/ForecastHoursInnerAirTemperatureInner>} airTemperature
 */
ForecastHoursInner.prototype['airTemperature'] = undefined;

/**
 * @member {Array.<module:model/ForecastHoursInnerSwellDirectionInner>} swellDirection
 */
ForecastHoursInner.prototype['swellDirection'] = undefined;

/**
 * @member {Array.<module:model/ForecastHoursInnerSwellHeightInner>} swellHeight
 */
ForecastHoursInner.prototype['swellHeight'] = undefined;

/**
 * @member {Array.<module:model/ForecastHoursInnerSwellPeriodInner>} swellPeriod
 */
ForecastHoursInner.prototype['swellPeriod'] = undefined;

/**
 * Timestamp in utc for the hour represented
 * @member {String} time
 */
ForecastHoursInner.prototype['time'] = undefined;

/**
 * @member {Array.<module:model/ForecastHoursInnerWaterTemperatureInner>} waterTemperature
 */
ForecastHoursInner.prototype['waterTemperature'] = undefined;

/**
 * @member {Array.<module:model/ForecastHoursInnerWaveDirectionInner>} waveDirection
 */
ForecastHoursInner.prototype['waveDirection'] = undefined;

/**
 * @member {Array.<module:model/ForecastHoursInnerWaveHeightInner>} waveHeight
 */
ForecastHoursInner.prototype['waveHeight'] = undefined;

/**
 * @member {Array.<module:model/ForecastHoursInnerWavePeriodInner>} wavePeriod
 */
ForecastHoursInner.prototype['wavePeriod'] = undefined;

/**
 * @member {Array.<module:model/ForecastHoursInnerWindDirectionInner>} windDirection
 */
ForecastHoursInner.prototype['windDirection'] = undefined;

/**
 * @member {Array.<module:model/ForecastHoursInnerWindSpeedInner>} windSpeed
 */
ForecastHoursInner.prototype['windSpeed'] = undefined;






export default ForecastHoursInner;

