/**
 * Storm Glass Marine Weather
 * Global marine weather data from multiple sources in one single API with hourly resolution. Get your API key by visiting the Storm Glass web site.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@stormglass.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Forecast from '../model/Forecast';

/**
* Forecast service.
* @module api/ForecastApi
* @version 1.0.1
*/
export default class ForecastApi {

    /**
    * Constructs a new ForecastApi. 
    * @alias module:api/ForecastApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getForecast operation.
     * @callback module:api/ForecastApi~getForecastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Forecast} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get hourly forecasts by coordinates
     * Get forecast info for the given coordinates. For every hour and property, you will get a list of weather sources and their values.
     * @param {Number} lat The latitude for a location. Valid input is a number between -90 and 90.
     * @param {Number} lng The longitude for a location. Valid input is a number between -180 and 180.
     * @param {module:api/ForecastApi~getForecastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Forecast}
     */
    getForecast(lat, lng, callback) {
      let postBody = null;
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling getForecast");
      }
      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling getForecast");
      }

      let pathParams = {
      };
      let queryParams = {
        'lat': lat,
        'lng': lng
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authenticationToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Forecast;
      return this.apiClient.callApi(
        '/forecast', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
