/**
 * Storm Glass Marine Weather
 * Global marine weather data from multiple sources in one single API with hourly resolution. Get your API key by visiting the Storm Glass web site.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: support@stormglass.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StormGlassMarineWeather);
  }
}(this, function(expect, StormGlassMarineWeather) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StormGlassMarineWeather.ForecastHoursInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ForecastHoursInner', function() {
    it('should create an instance of ForecastHoursInner', function() {
      // uncomment below and update the code to test ForecastHoursInner
      //var instance = new StormGlassMarineWeather.ForecastHoursInner();
      //expect(instance).to.be.a(StormGlassMarineWeather.ForecastHoursInner);
    });

    it('should have the property airTemperature (base name: "airTemperature")', function() {
      // uncomment below and update the code to test the property airTemperature
      //var instance = new StormGlassMarineWeather.ForecastHoursInner();
      //expect(instance).to.be();
    });

    it('should have the property swellDirection (base name: "swellDirection")', function() {
      // uncomment below and update the code to test the property swellDirection
      //var instance = new StormGlassMarineWeather.ForecastHoursInner();
      //expect(instance).to.be();
    });

    it('should have the property swellHeight (base name: "swellHeight")', function() {
      // uncomment below and update the code to test the property swellHeight
      //var instance = new StormGlassMarineWeather.ForecastHoursInner();
      //expect(instance).to.be();
    });

    it('should have the property swellPeriod (base name: "swellPeriod")', function() {
      // uncomment below and update the code to test the property swellPeriod
      //var instance = new StormGlassMarineWeather.ForecastHoursInner();
      //expect(instance).to.be();
    });

    it('should have the property time (base name: "time")', function() {
      // uncomment below and update the code to test the property time
      //var instance = new StormGlassMarineWeather.ForecastHoursInner();
      //expect(instance).to.be();
    });

    it('should have the property waterTemperature (base name: "waterTemperature")', function() {
      // uncomment below and update the code to test the property waterTemperature
      //var instance = new StormGlassMarineWeather.ForecastHoursInner();
      //expect(instance).to.be();
    });

    it('should have the property waveDirection (base name: "waveDirection")', function() {
      // uncomment below and update the code to test the property waveDirection
      //var instance = new StormGlassMarineWeather.ForecastHoursInner();
      //expect(instance).to.be();
    });

    it('should have the property waveHeight (base name: "waveHeight")', function() {
      // uncomment below and update the code to test the property waveHeight
      //var instance = new StormGlassMarineWeather.ForecastHoursInner();
      //expect(instance).to.be();
    });

    it('should have the property wavePeriod (base name: "wavePeriod")', function() {
      // uncomment below and update the code to test the property wavePeriod
      //var instance = new StormGlassMarineWeather.ForecastHoursInner();
      //expect(instance).to.be();
    });

    it('should have the property windDirection (base name: "windDirection")', function() {
      // uncomment below and update the code to test the property windDirection
      //var instance = new StormGlassMarineWeather.ForecastHoursInner();
      //expect(instance).to.be();
    });

    it('should have the property windSpeed (base name: "windSpeed")', function() {
      // uncomment below and update the code to test the property windSpeed
      //var instance = new StormGlassMarineWeather.ForecastHoursInner();
      //expect(instance).to.be();
    });

  });

}));
