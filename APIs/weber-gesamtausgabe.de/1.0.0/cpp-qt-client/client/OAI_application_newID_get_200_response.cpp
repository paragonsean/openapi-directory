/**
 * WeGA API
 * ⚠️<b>DEPRECATION WARNING</b>⚠️<br/>This version of the WeGA API specification is outdated and superseded by [version 1.1.0](https://weber-gesamtausgabe.de/api/v1/openapi.json).  <br/> <br/> For feedback or requests about this API please contact stadler@weber-gesamtausgabe.de or start the discussion at https://github.com/Edirom/WeGA-WebApp
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_application_newID_get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_application_newID_get_200_response::OAI_application_newID_get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_application_newID_get_200_response::OAI_application_newID_get_200_response() {
    this->initializeModel();
}

OAI_application_newID_get_200_response::~OAI_application_newID_get_200_response() {}

void OAI_application_newID_get_200_response::initializeModel() {

    m_doc_id_isSet = false;
    m_doc_id_isValid = false;

    m_doc_type_isSet = false;
    m_doc_type_isValid = false;
}

void OAI_application_newID_get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_application_newID_get_200_response::fromJsonObject(QJsonObject json) {

    m_doc_id_isValid = ::OpenAPI::fromJsonValue(m_doc_id, json[QString("docID")]);
    m_doc_id_isSet = !json[QString("docID")].isNull() && m_doc_id_isValid;

    m_doc_type_isValid = ::OpenAPI::fromJsonValue(m_doc_type, json[QString("docType")]);
    m_doc_type_isSet = !json[QString("docType")].isNull() && m_doc_type_isValid;
}

QString OAI_application_newID_get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_application_newID_get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_doc_id_isSet) {
        obj.insert(QString("docID"), ::OpenAPI::toJsonValue(m_doc_id));
    }
    if (m_doc_type_isSet) {
        obj.insert(QString("docType"), ::OpenAPI::toJsonValue(m_doc_type));
    }
    return obj;
}

QString OAI_application_newID_get_200_response::getDocId() const {
    return m_doc_id;
}
void OAI_application_newID_get_200_response::setDocId(const QString &doc_id) {
    m_doc_id = doc_id;
    m_doc_id_isSet = true;
}

bool OAI_application_newID_get_200_response::is_doc_id_Set() const{
    return m_doc_id_isSet;
}

bool OAI_application_newID_get_200_response::is_doc_id_Valid() const{
    return m_doc_id_isValid;
}

QString OAI_application_newID_get_200_response::getDocType() const {
    return m_doc_type;
}
void OAI_application_newID_get_200_response::setDocType(const QString &doc_type) {
    m_doc_type = doc_type;
    m_doc_type_isSet = true;
}

bool OAI_application_newID_get_200_response::is_doc_type_Set() const{
    return m_doc_type_isSet;
}

bool OAI_application_newID_get_200_response::is_doc_type_Valid() const{
    return m_doc_type_isValid;
}

bool OAI_application_newID_get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_doc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_application_newID_get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
