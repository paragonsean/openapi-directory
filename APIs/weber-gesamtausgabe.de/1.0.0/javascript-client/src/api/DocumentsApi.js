/**
 * WeGA API
 * ⚠️<b>DEPRECATION WARNING</b>⚠️<br/>This version of the WeGA API specification is outdated and superseded by [version 1.1.0](https://weber-gesamtausgabe.de/api/v1/openapi.json).  <br/> <br/> For feedback or requests about this API please contact stadler@weber-gesamtausgabe.de or start the discussion at https://github.com/Edirom/WeGA-WebApp
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Document from '../model/Document';
import Error from '../model/Error';

/**
* Documents service.
* @module api/DocumentsApi
* @version 1.0.0
*/
export default class DocumentsApi {

    /**
    * Constructs a new DocumentsApi. 
    * @alias module:api/DocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the documentsDocIDGet operation.
     * @callback module:api/DocumentsApi~documentsDocIDGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Document>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns documents by ID
     * This endpoint returns documents, indicated by an ID.  Accepted ID formats are WeGA, e.g. A002068 or http://weber-gesamtausgabe.de/A002068, VIAF, e.g. http://viaf.org/viaf/14959938, or  GND, e.g. http://d-nb.info/gnd/118629662 
     * @param {String} docID The document identifier to search for
     * @param {module:api/DocumentsApi~documentsDocIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Document>}
     */
    documentsDocIDGet(docID, callback) {
      let postBody = null;
      // verify the required parameter 'docID' is set
      if (docID === undefined || docID === null) {
        throw new Error("Missing the required parameter 'docID' when calling documentsDocIDGet");
      }

      let pathParams = {
        'docID': docID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Document];
      return this.apiClient.callApi(
        '/documents/{docID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsFindByAuthorAuthorIDGet operation.
     * @callback module:api/DocumentsApi~documentsFindByAuthorAuthorIDGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Document>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds documents by author
     * This endpoint returns a list of documents by a given author – optionally filtered by document type  
     * @param {String} authorID The author ID to search for. Accepted ID formats are WeGA, e.g. A002068 or http://weber-gesamtausgabe.de/A002068, VIAF, e.g. http://viaf.org/viaf/14959938, or  GND, e.g. http://d-nb.info/gnd/118629662 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [docType] The WeGA document type
     * @param {Number} [offset = 1)] Position of first item to retrieve (starting from 1)
     * @param {Number} [limit = 10)] Number of items to retrieve (200 max)
     * @param {module:api/DocumentsApi~documentsFindByAuthorAuthorIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Document>}
     */
    documentsFindByAuthorAuthorIDGet(authorID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorID' is set
      if (authorID === undefined || authorID === null) {
        throw new Error("Missing the required parameter 'authorID' when calling documentsFindByAuthorAuthorIDGet");
      }

      let pathParams = {
        'authorID': authorID
      };
      let queryParams = {
        'docType': this.apiClient.buildCollectionParam(opts['docType'], 'csv'),
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Document];
      return this.apiClient.callApi(
        '/documents/findByAuthor/{authorID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsFindByDateGet operation.
     * @callback module:api/DocumentsApi~documentsFindByDateGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Document>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds documents by date
     * This endpoint returns a list of documents related to the given date – optionally filtered by document type.  
     * @param {Date} fromDate The min date to search for
     * @param {Object} opts Optional parameters
     * @param {Date} [toDate] The max date to search for
     * @param {Array.<module:model/String>} [docType] The WeGA document type
     * @param {Number} [offset = 1)] Position of first item to retrieve (starting from 1)
     * @param {Number} [limit = 10)] Number of items to retrieve (200 max)
     * @param {module:api/DocumentsApi~documentsFindByDateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Document>}
     */
    documentsFindByDateGet(fromDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fromDate' is set
      if (fromDate === undefined || fromDate === null) {
        throw new Error("Missing the required parameter 'fromDate' when calling documentsFindByDateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'fromDate': fromDate,
        'toDate': opts['toDate'],
        'docType': this.apiClient.buildCollectionParam(opts['docType'], 'csv'),
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Document];
      return this.apiClient.callApi(
        '/documents/findByDate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsFindByMentionDocIDGet operation.
     * @callback module:api/DocumentsApi~documentsFindByMentionDocIDGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Document>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds documents by reference
     * This endpoint returns a list of documents that reference a particular docID – optionally filtered by document type.  
     * @param {String} docID The document ID that is to be mentioned. Accepted ID formats are WeGA, e.g. A002068 or http://weber-gesamtausgabe.de/A002068, VIAF, e.g. http://viaf.org/viaf/14959938, or  GND, e.g. http://d-nb.info/gnd/118629662 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [docType] The WeGA document type
     * @param {Number} [offset = 1)] Position of first item to retrieve (starting from 1)
     * @param {Number} [limit = 10)] Number of items to retrieve (200 max)
     * @param {module:api/DocumentsApi~documentsFindByMentionDocIDGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Document>}
     */
    documentsFindByMentionDocIDGet(docID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'docID' is set
      if (docID === undefined || docID === null) {
        throw new Error("Missing the required parameter 'docID' when calling documentsFindByMentionDocIDGet");
      }

      let pathParams = {
        'docID': docID
      };
      let queryParams = {
        'docType': this.apiClient.buildCollectionParam(opts['docType'], 'csv'),
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Document];
      return this.apiClient.callApi(
        '/documents/findByMention/{docID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the documentsGet operation.
     * @callback module:api/DocumentsApi~documentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Document>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all documents
     * The Documents endpoint returns a list of all documents from the WeGA digital edition. 
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [docType] The WeGA document type
     * @param {Number} [offset = 1)] Position of first item to retrieve (starting from 1)
     * @param {Number} [limit = 10)] Number of items to retrieve (200 max)
     * @param {module:api/DocumentsApi~documentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Document>}
     */
    documentsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'docType': this.apiClient.buildCollectionParam(opts['docType'], 'csv'),
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Document];
      return this.apiClient.callApi(
        '/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
