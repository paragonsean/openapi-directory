/*
 * WeGA API
 * ⚠️<b>DEPRECATION WARNING</b>⚠️<br/>This version of the WeGA API specification is outdated and superseded by [version 1.1.0](https://weber-gesamtausgabe.de/api/v1/openapi.json).  <br/> <br/> For feedback or requests about this API please contact stadler@weber-gesamtausgabe.de or start the discussion at https://github.com/Edirom/WeGA-WebApp
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.Error;
import java.time.LocalDate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentsApi
 */
@Disabled
public class DocumentsApiTest {

    private final DocumentsApi api = new DocumentsApi();

    /**
     * Returns documents by ID
     *
     * This endpoint returns documents, indicated by an ID.  Accepted ID formats are WeGA, e.g. A002068 or http://weber-gesamtausgabe.de/A002068, VIAF, e.g. http://viaf.org/viaf/14959938, or  GND, e.g. http://d-nb.info/gnd/118629662 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentsDocIDGetTest() throws ApiException {
        String docID = null;
        List<Document> response = api.documentsDocIDGet(docID);
        // TODO: test validations
    }

    /**
     * Finds documents by author
     *
     * This endpoint returns a list of documents by a given author – optionally filtered by document type  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentsFindByAuthorAuthorIDGetTest() throws ApiException {
        String authorID = null;
        List<String> docType = null;
        Integer offset = null;
        Integer limit = null;
        List<Document> response = api.documentsFindByAuthorAuthorIDGet(authorID, docType, offset, limit);
        // TODO: test validations
    }

    /**
     * Finds documents by date
     *
     * This endpoint returns a list of documents related to the given date – optionally filtered by document type.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentsFindByDateGetTest() throws ApiException {
        LocalDate fromDate = null;
        LocalDate toDate = null;
        List<String> docType = null;
        Integer offset = null;
        Integer limit = null;
        List<Document> response = api.documentsFindByDateGet(fromDate, toDate, docType, offset, limit);
        // TODO: test validations
    }

    /**
     * Finds documents by reference
     *
     * This endpoint returns a list of documents that reference a particular docID – optionally filtered by document type.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentsFindByMentionDocIDGetTest() throws ApiException {
        String docID = null;
        List<String> docType = null;
        Integer offset = null;
        Integer limit = null;
        List<Document> response = api.documentsFindByMentionDocIDGet(docID, docType, offset, limit);
        // TODO: test validations
    }

    /**
     * Lists all documents
     *
     * The Documents endpoint returns a list of all documents from the WeGA digital edition. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentsGetTest() throws ApiException {
        List<String> docType = null;
        Integer offset = null;
        Integer limit = null;
        List<Document> response = api.documentsGet(docType, offset, limit);
        // TODO: test validations
    }

}
