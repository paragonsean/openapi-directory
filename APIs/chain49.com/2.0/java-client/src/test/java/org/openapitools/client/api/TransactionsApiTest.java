/*
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetMempoolV2200Response;
import org.openapitools.client.model.GetTransactionV2200Response;
import org.openapitools.client.model.PostSendTxV2200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Disabled
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    /**
     * Get Mempool V2
     *
     * Get a list of transaction IDs currently in the mempool of the node (meaning unconfirmed transactions not included in any block yet)  Note: this route was implemented by us and is therefore not yet supported by existing blockbook clients.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMempoolV2Test() throws ApiException {
        String blockchain = null;
        Integer page = null;
        Integer pageSize = null;
        GetMempoolV2200Response response = api.getMempoolV2(blockchain, page, pageSize);
        // TODO: test validations
    }

    /**
     * Send transaction (in URL) V2
     *
     * Sends new transaction to backend  It is recommended to use POST for sending transactions as there is a limit on how much data can be sent in the URL itself.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSendTxV2Test() throws ApiException {
        String blockchain = null;
        String hex = null;
        PostSendTxV2200Response response = api.getSendTxV2(blockchain, hex);
        // TODO: test validations
    }

    /**
     * Get transaction V2
     *
     * Get transaction returns \&quot;normalized\&quot; data about transaction, which has the same general structure for all supported coins. It does not return coin specific fields (for example information about Zcash shielded addresses).  A note about the blockTime field: for already mined transaction (confirmations &gt; 0), the field blockTime contains time of the block for transactions in mempool (confirmations &#x3D;&#x3D; 0), the field contains time when the running instance of Blockbook was first time notified about the transaction. This time may be different in different instances of Blockbook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionV2Test() throws ApiException {
        String blockchain = null;
        String txId = null;
        GetTransactionV2200Response response = api.getTransactionV2(blockchain, txId);
        // TODO: test validations
    }

    /**
     * Get transaction (as is from Backend) V2
     *
     * Returns transaction data in the exact format as returned by backend, including all coin specific fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTxSpecificV2Test() throws ApiException {
        String blockchain = null;
        String txId = null;
        Object response = api.getTxSpecificV2(blockchain, txId);
        // TODO: test validations
    }

    /**
     * Send transaction (POST) V2
     *
     * Sends new transaction to backend for broadcasting  The trailing slash &#39;/&#39; at the end is mandatory 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSendTxV2Test() throws ApiException {
        String blockchain = null;
        Object body = null;
        PostSendTxV2200Response response = api.postSendTxV2(blockchain, body);
        // TODO: test validations
    }

}
