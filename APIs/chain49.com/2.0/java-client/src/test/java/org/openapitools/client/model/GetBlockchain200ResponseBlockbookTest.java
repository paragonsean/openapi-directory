/*
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GetBlockchain200ResponseBlockbook
 */
public class GetBlockchain200ResponseBlockbookTest {
    private final GetBlockchain200ResponseBlockbook model = new GetBlockchain200ResponseBlockbook();

    /**
     * Model tests for GetBlockchain200ResponseBlockbook
     */
    @Test
    public void testGetBlockchain200ResponseBlockbook() {
        // TODO: test GetBlockchain200ResponseBlockbook
    }

    /**
     * Test the property 'about'
     */
    @Test
    public void aboutTest() {
        // TODO: test about
    }

    /**
     * Test the property 'bestHeight'
     */
    @Test
    public void bestHeightTest() {
        // TODO: test bestHeight
    }

    /**
     * Test the property 'buildTime'
     */
    @Test
    public void buildTimeTest() {
        // TODO: test buildTime
    }

    /**
     * Test the property 'coin'
     */
    @Test
    public void coinTest() {
        // TODO: test coin
    }

    /**
     * Test the property 'currentFiatRatesTime'
     */
    @Test
    public void currentFiatRatesTimeTest() {
        // TODO: test currentFiatRatesTime
    }

    /**
     * Test the property 'dbSize'
     */
    @Test
    public void dbSizeTest() {
        // TODO: test dbSize
    }

    /**
     * Test the property 'decimals'
     */
    @Test
    public void decimalsTest() {
        // TODO: test decimals
    }

    /**
     * Test the property 'gitCommit'
     */
    @Test
    public void gitCommitTest() {
        // TODO: test gitCommit
    }

    /**
     * Test the property 'hasFiatRates'
     */
    @Test
    public void hasFiatRatesTest() {
        // TODO: test hasFiatRates
    }

    /**
     * Test the property 'historicalFiatRatesTime'
     */
    @Test
    public void historicalFiatRatesTimeTest() {
        // TODO: test historicalFiatRatesTime
    }

    /**
     * Test the property 'host'
     */
    @Test
    public void hostTest() {
        // TODO: test host
    }

    /**
     * Test the property 'inSync'
     */
    @Test
    public void inSyncTest() {
        // TODO: test inSync
    }

    /**
     * Test the property 'inSyncMempool'
     */
    @Test
    public void inSyncMempoolTest() {
        // TODO: test inSyncMempool
    }

    /**
     * Test the property 'initialSync'
     */
    @Test
    public void initialSyncTest() {
        // TODO: test initialSync
    }

    /**
     * Test the property 'lastBlockTime'
     */
    @Test
    public void lastBlockTimeTest() {
        // TODO: test lastBlockTime
    }

    /**
     * Test the property 'lastMempoolTime'
     */
    @Test
    public void lastMempoolTimeTest() {
        // TODO: test lastMempoolTime
    }

    /**
     * Test the property 'mempoolSize'
     */
    @Test
    public void mempoolSizeTest() {
        // TODO: test mempoolSize
    }

    /**
     * Test the property 'syncMode'
     */
    @Test
    public void syncModeTest() {
        // TODO: test syncMode
    }

    /**
     * Test the property 'version'
     */
    @Test
    public void versionTest() {
        // TODO: test version
    }

}
