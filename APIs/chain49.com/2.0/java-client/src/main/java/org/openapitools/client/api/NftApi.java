/*
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetNFTMetaV2200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NftApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NftApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NftApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getNFTMetaV2
     * @param blockchain NFT-compatible blockchain name (required)
     * @param nftContract Address of NFT contract (required)
     * @param nftTokenId Unique token ID of NFT (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNFTMetaV2Call(String blockchain, String nftContract, String nftTokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{blockchain}/v2/nft/{nftContract}/{nftTokenId}"
            .replace("{" + "blockchain" + "}", localVarApiClient.escapeString(blockchain.toString()))
            .replace("{" + "nftContract" + "}", localVarApiClient.escapeString(nftContract.toString()))
            .replace("{" + "nftTokenId" + "}", localVarApiClient.escapeString(nftTokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-RapidAPI-Host", "X-API-Key", "X-RapidAPI-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNFTMetaV2ValidateBeforeCall(String blockchain, String nftContract, String nftTokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockchain' is set
        if (blockchain == null) {
            throw new ApiException("Missing the required parameter 'blockchain' when calling getNFTMetaV2(Async)");
        }

        // verify the required parameter 'nftContract' is set
        if (nftContract == null) {
            throw new ApiException("Missing the required parameter 'nftContract' when calling getNFTMetaV2(Async)");
        }

        // verify the required parameter 'nftTokenId' is set
        if (nftTokenId == null) {
            throw new ApiException("Missing the required parameter 'nftTokenId' when calling getNFTMetaV2(Async)");
        }

        return getNFTMetaV2Call(blockchain, nftContract, nftTokenId, _callback);

    }

    /**
     * Get NFT metadata V2
     * Only works on Ethereum-like blockchains (currently ethereum and bsc)  Get metadata like name or description for a specified contract and token ID. The resulting data contains a link which can then be used to request the IPFS link for the actual image to display in a block explorer for example.  Note: this route was implemented by us and is therefore not yet supported by existing blockbook clients.
     * @param blockchain NFT-compatible blockchain name (required)
     * @param nftContract Address of NFT contract (required)
     * @param nftTokenId Unique token ID of NFT (required)
     * @return GetNFTMetaV2200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetNFTMetaV2200Response getNFTMetaV2(String blockchain, String nftContract, String nftTokenId) throws ApiException {
        ApiResponse<GetNFTMetaV2200Response> localVarResp = getNFTMetaV2WithHttpInfo(blockchain, nftContract, nftTokenId);
        return localVarResp.getData();
    }

    /**
     * Get NFT metadata V2
     * Only works on Ethereum-like blockchains (currently ethereum and bsc)  Get metadata like name or description for a specified contract and token ID. The resulting data contains a link which can then be used to request the IPFS link for the actual image to display in a block explorer for example.  Note: this route was implemented by us and is therefore not yet supported by existing blockbook clients.
     * @param blockchain NFT-compatible blockchain name (required)
     * @param nftContract Address of NFT contract (required)
     * @param nftTokenId Unique token ID of NFT (required)
     * @return ApiResponse&lt;GetNFTMetaV2200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNFTMetaV2200Response> getNFTMetaV2WithHttpInfo(String blockchain, String nftContract, String nftTokenId) throws ApiException {
        okhttp3.Call localVarCall = getNFTMetaV2ValidateBeforeCall(blockchain, nftContract, nftTokenId, null);
        Type localVarReturnType = new TypeToken<GetNFTMetaV2200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get NFT metadata V2 (asynchronously)
     * Only works on Ethereum-like blockchains (currently ethereum and bsc)  Get metadata like name or description for a specified contract and token ID. The resulting data contains a link which can then be used to request the IPFS link for the actual image to display in a block explorer for example.  Note: this route was implemented by us and is therefore not yet supported by existing blockbook clients.
     * @param blockchain NFT-compatible blockchain name (required)
     * @param nftContract Address of NFT contract (required)
     * @param nftTokenId Unique token ID of NFT (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNFTMetaV2Async(String blockchain, String nftContract, String nftTokenId, final ApiCallback<GetNFTMetaV2200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNFTMetaV2ValidateBeforeCall(blockchain, nftContract, nftTokenId, _callback);
        Type localVarReturnType = new TypeToken<GetNFTMetaV2200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
