/*
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetBlockchain200ResponseBackend
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:48.868561-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetBlockchain200ResponseBackend {
  public static final String SERIALIZED_NAME_BEST_BLOCK_HASH = "bestBlockHash";
  @SerializedName(SERIALIZED_NAME_BEST_BLOCK_HASH)
  private String bestBlockHash;

  public static final String SERIALIZED_NAME_BLOCKS = "blocks";
  @SerializedName(SERIALIZED_NAME_BLOCKS)
  private Integer blocks;

  public static final String SERIALIZED_NAME_CHAIN = "chain";
  @SerializedName(SERIALIZED_NAME_CHAIN)
  private String chain;

  public static final String SERIALIZED_NAME_DIFFICULTY = "difficulty";
  @SerializedName(SERIALIZED_NAME_DIFFICULTY)
  private String difficulty;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Integer headers;

  public static final String SERIALIZED_NAME_PROTOCOL_VERSION = "protocolVersion";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_VERSION)
  private String protocolVersion;

  public static final String SERIALIZED_NAME_SIZE_ON_DISK = "sizeOnDisk";
  @SerializedName(SERIALIZED_NAME_SIZE_ON_DISK)
  private Integer sizeOnDisk;

  public static final String SERIALIZED_NAME_SUBVERSION = "subversion";
  @SerializedName(SERIALIZED_NAME_SUBVERSION)
  private String subversion;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public GetBlockchain200ResponseBackend() {
  }

  public GetBlockchain200ResponseBackend bestBlockHash(String bestBlockHash) {
    this.bestBlockHash = bestBlockHash;
    return this;
  }

  /**
   * Get bestBlockHash
   * @return bestBlockHash
   */
  @javax.annotation.Nullable
  public String getBestBlockHash() {
    return bestBlockHash;
  }

  public void setBestBlockHash(String bestBlockHash) {
    this.bestBlockHash = bestBlockHash;
  }


  public GetBlockchain200ResponseBackend blocks(Integer blocks) {
    this.blocks = blocks;
    return this;
  }

  /**
   * Get blocks
   * @return blocks
   */
  @javax.annotation.Nullable
  public Integer getBlocks() {
    return blocks;
  }

  public void setBlocks(Integer blocks) {
    this.blocks = blocks;
  }


  public GetBlockchain200ResponseBackend chain(String chain) {
    this.chain = chain;
    return this;
  }

  /**
   * Get chain
   * @return chain
   */
  @javax.annotation.Nullable
  public String getChain() {
    return chain;
  }

  public void setChain(String chain) {
    this.chain = chain;
  }


  public GetBlockchain200ResponseBackend difficulty(String difficulty) {
    this.difficulty = difficulty;
    return this;
  }

  /**
   * Get difficulty
   * @return difficulty
   */
  @javax.annotation.Nullable
  public String getDifficulty() {
    return difficulty;
  }

  public void setDifficulty(String difficulty) {
    this.difficulty = difficulty;
  }


  public GetBlockchain200ResponseBackend headers(Integer headers) {
    this.headers = headers;
    return this;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nullable
  public Integer getHeaders() {
    return headers;
  }

  public void setHeaders(Integer headers) {
    this.headers = headers;
  }


  public GetBlockchain200ResponseBackend protocolVersion(String protocolVersion) {
    this.protocolVersion = protocolVersion;
    return this;
  }

  /**
   * Get protocolVersion
   * @return protocolVersion
   */
  @javax.annotation.Nullable
  public String getProtocolVersion() {
    return protocolVersion;
  }

  public void setProtocolVersion(String protocolVersion) {
    this.protocolVersion = protocolVersion;
  }


  public GetBlockchain200ResponseBackend sizeOnDisk(Integer sizeOnDisk) {
    this.sizeOnDisk = sizeOnDisk;
    return this;
  }

  /**
   * Get sizeOnDisk
   * @return sizeOnDisk
   */
  @javax.annotation.Nullable
  public Integer getSizeOnDisk() {
    return sizeOnDisk;
  }

  public void setSizeOnDisk(Integer sizeOnDisk) {
    this.sizeOnDisk = sizeOnDisk;
  }


  public GetBlockchain200ResponseBackend subversion(String subversion) {
    this.subversion = subversion;
    return this;
  }

  /**
   * Get subversion
   * @return subversion
   */
  @javax.annotation.Nullable
  public String getSubversion() {
    return subversion;
  }

  public void setSubversion(String subversion) {
    this.subversion = subversion;
  }


  public GetBlockchain200ResponseBackend version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBlockchain200ResponseBackend getBlockchain200ResponseBackend = (GetBlockchain200ResponseBackend) o;
    return Objects.equals(this.bestBlockHash, getBlockchain200ResponseBackend.bestBlockHash) &&
        Objects.equals(this.blocks, getBlockchain200ResponseBackend.blocks) &&
        Objects.equals(this.chain, getBlockchain200ResponseBackend.chain) &&
        Objects.equals(this.difficulty, getBlockchain200ResponseBackend.difficulty) &&
        Objects.equals(this.headers, getBlockchain200ResponseBackend.headers) &&
        Objects.equals(this.protocolVersion, getBlockchain200ResponseBackend.protocolVersion) &&
        Objects.equals(this.sizeOnDisk, getBlockchain200ResponseBackend.sizeOnDisk) &&
        Objects.equals(this.subversion, getBlockchain200ResponseBackend.subversion) &&
        Objects.equals(this.version, getBlockchain200ResponseBackend.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestBlockHash, blocks, chain, difficulty, headers, protocolVersion, sizeOnDisk, subversion, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBlockchain200ResponseBackend {\n");
    sb.append("    bestBlockHash: ").append(toIndentedString(bestBlockHash)).append("\n");
    sb.append("    blocks: ").append(toIndentedString(blocks)).append("\n");
    sb.append("    chain: ").append(toIndentedString(chain)).append("\n");
    sb.append("    difficulty: ").append(toIndentedString(difficulty)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    protocolVersion: ").append(toIndentedString(protocolVersion)).append("\n");
    sb.append("    sizeOnDisk: ").append(toIndentedString(sizeOnDisk)).append("\n");
    sb.append("    subversion: ").append(toIndentedString(subversion)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bestBlockHash");
    openapiFields.add("blocks");
    openapiFields.add("chain");
    openapiFields.add("difficulty");
    openapiFields.add("headers");
    openapiFields.add("protocolVersion");
    openapiFields.add("sizeOnDisk");
    openapiFields.add("subversion");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetBlockchain200ResponseBackend
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBlockchain200ResponseBackend.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBlockchain200ResponseBackend is not found in the empty JSON string", GetBlockchain200ResponseBackend.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBlockchain200ResponseBackend.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBlockchain200ResponseBackend` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bestBlockHash") != null && !jsonObj.get("bestBlockHash").isJsonNull()) && !jsonObj.get("bestBlockHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bestBlockHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bestBlockHash").toString()));
      }
      if ((jsonObj.get("chain") != null && !jsonObj.get("chain").isJsonNull()) && !jsonObj.get("chain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chain").toString()));
      }
      if ((jsonObj.get("difficulty") != null && !jsonObj.get("difficulty").isJsonNull()) && !jsonObj.get("difficulty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `difficulty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("difficulty").toString()));
      }
      if ((jsonObj.get("protocolVersion") != null && !jsonObj.get("protocolVersion").isJsonNull()) && !jsonObj.get("protocolVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocolVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocolVersion").toString()));
      }
      if ((jsonObj.get("subversion") != null && !jsonObj.get("subversion").isJsonNull()) && !jsonObj.get("subversion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subversion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subversion").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBlockchain200ResponseBackend.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBlockchain200ResponseBackend' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBlockchain200ResponseBackend> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBlockchain200ResponseBackend.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBlockchain200ResponseBackend>() {
           @Override
           public void write(JsonWriter out, GetBlockchain200ResponseBackend value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBlockchain200ResponseBackend read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetBlockchain200ResponseBackend given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetBlockchain200ResponseBackend
   * @throws IOException if the JSON string is invalid with respect to GetBlockchain200ResponseBackend
   */
  public static GetBlockchain200ResponseBackend fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBlockchain200ResponseBackend.class);
  }

  /**
   * Convert an instance of GetBlockchain200ResponseBackend to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

