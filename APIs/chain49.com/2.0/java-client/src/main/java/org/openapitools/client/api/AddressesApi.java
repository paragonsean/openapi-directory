/*
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.GetBalanceHistoryV2200ResponseInner;
import org.openapitools.client.model.GetXpubV2200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddressesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AddressesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddressesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAddressV2
     * @param blockchain Blockchain name (required)
     * @param address Wallet address (required)
     * @param page specifies page of returned transactions, starting from 1. If out of range, Blockbook returns the closest possible page. (optional)
     * @param pageSize number of transactions returned by call (default and maximum 1000) (optional)
     * @param fromBlock filter of the returned transactions from block height to block height (default no filter) (optional)
     * @param toBlock filter of the returned transactions from block height to block height (default no filter) (optional)
     * @param details specifies level of details returned by request (optional, default to txids)
     * @param contract return only transactions which affect specified contract (applicable only to coins which support contracts) (optional)
     * @param secondary specifies secondary (fiat) currency in which the token and total balances are returned in addition to crypto values (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressV2Call(String blockchain, String address, Integer page, Integer pageSize, Integer fromBlock, Integer toBlock, String details, String contract, String secondary, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{blockchain}/v2/address/{address}"
            .replace("{" + "blockchain" + "}", localVarApiClient.escapeString(blockchain.toString()))
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (fromBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromBlock", fromBlock));
        }

        if (toBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toBlock", toBlock));
        }

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if (contract != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contract", contract));
        }

        if (secondary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secondary", secondary));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-RapidAPI-Host", "X-API-Key", "X-RapidAPI-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddressV2ValidateBeforeCall(String blockchain, String address, Integer page, Integer pageSize, Integer fromBlock, Integer toBlock, String details, String contract, String secondary, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockchain' is set
        if (blockchain == null) {
            throw new ApiException("Missing the required parameter 'blockchain' when calling getAddressV2(Async)");
        }

        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getAddressV2(Async)");
        }

        return getAddressV2Call(blockchain, address, page, pageSize, fromBlock, toBlock, details, contract, secondary, _callback);

    }

    /**
     * Get address V2
     * Returns balances and transactions of an address. The returned transactions are sorted by block height, newest blocks first.  The **details** query parameter can specify the level of details returned by the request (default: \&quot;txids\&quot;). Possible values are:  **basic**: return only xpub balances, without any derived addresses and transactions  **tokens**: basic + tokens (addresses) derived from the xpub, subject to tokens parameter  **tokenBalances**: basic + tokens (addresses) derived from the xpub with balances, subject to tokens parameter  **txids**: tokenBalances + list of txids, subject to from, to filter and paging  **txs**: tokenBalances + list of transaction with details, subject to from, to filter and paging 
     * @param blockchain Blockchain name (required)
     * @param address Wallet address (required)
     * @param page specifies page of returned transactions, starting from 1. If out of range, Blockbook returns the closest possible page. (optional)
     * @param pageSize number of transactions returned by call (default and maximum 1000) (optional)
     * @param fromBlock filter of the returned transactions from block height to block height (default no filter) (optional)
     * @param toBlock filter of the returned transactions from block height to block height (default no filter) (optional)
     * @param details specifies level of details returned by request (optional, default to txids)
     * @param contract return only transactions which affect specified contract (applicable only to coins which support contracts) (optional)
     * @param secondary specifies secondary (fiat) currency in which the token and total balances are returned in addition to crypto values (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object getAddressV2(String blockchain, String address, Integer page, Integer pageSize, Integer fromBlock, Integer toBlock, String details, String contract, String secondary) throws ApiException {
        ApiResponse<Object> localVarResp = getAddressV2WithHttpInfo(blockchain, address, page, pageSize, fromBlock, toBlock, details, contract, secondary);
        return localVarResp.getData();
    }

    /**
     * Get address V2
     * Returns balances and transactions of an address. The returned transactions are sorted by block height, newest blocks first.  The **details** query parameter can specify the level of details returned by the request (default: \&quot;txids\&quot;). Possible values are:  **basic**: return only xpub balances, without any derived addresses and transactions  **tokens**: basic + tokens (addresses) derived from the xpub, subject to tokens parameter  **tokenBalances**: basic + tokens (addresses) derived from the xpub with balances, subject to tokens parameter  **txids**: tokenBalances + list of txids, subject to from, to filter and paging  **txs**: tokenBalances + list of transaction with details, subject to from, to filter and paging 
     * @param blockchain Blockchain name (required)
     * @param address Wallet address (required)
     * @param page specifies page of returned transactions, starting from 1. If out of range, Blockbook returns the closest possible page. (optional)
     * @param pageSize number of transactions returned by call (default and maximum 1000) (optional)
     * @param fromBlock filter of the returned transactions from block height to block height (default no filter) (optional)
     * @param toBlock filter of the returned transactions from block height to block height (default no filter) (optional)
     * @param details specifies level of details returned by request (optional, default to txids)
     * @param contract return only transactions which affect specified contract (applicable only to coins which support contracts) (optional)
     * @param secondary specifies secondary (fiat) currency in which the token and total balances are returned in addition to crypto values (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getAddressV2WithHttpInfo(String blockchain, String address, Integer page, Integer pageSize, Integer fromBlock, Integer toBlock, String details, String contract, String secondary) throws ApiException {
        okhttp3.Call localVarCall = getAddressV2ValidateBeforeCall(blockchain, address, page, pageSize, fromBlock, toBlock, details, contract, secondary, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get address V2 (asynchronously)
     * Returns balances and transactions of an address. The returned transactions are sorted by block height, newest blocks first.  The **details** query parameter can specify the level of details returned by the request (default: \&quot;txids\&quot;). Possible values are:  **basic**: return only xpub balances, without any derived addresses and transactions  **tokens**: basic + tokens (addresses) derived from the xpub, subject to tokens parameter  **tokenBalances**: basic + tokens (addresses) derived from the xpub with balances, subject to tokens parameter  **txids**: tokenBalances + list of txids, subject to from, to filter and paging  **txs**: tokenBalances + list of transaction with details, subject to from, to filter and paging 
     * @param blockchain Blockchain name (required)
     * @param address Wallet address (required)
     * @param page specifies page of returned transactions, starting from 1. If out of range, Blockbook returns the closest possible page. (optional)
     * @param pageSize number of transactions returned by call (default and maximum 1000) (optional)
     * @param fromBlock filter of the returned transactions from block height to block height (default no filter) (optional)
     * @param toBlock filter of the returned transactions from block height to block height (default no filter) (optional)
     * @param details specifies level of details returned by request (optional, default to txids)
     * @param contract return only transactions which affect specified contract (applicable only to coins which support contracts) (optional)
     * @param secondary specifies secondary (fiat) currency in which the token and total balances are returned in addition to crypto values (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAddressV2Async(String blockchain, String address, Integer page, Integer pageSize, Integer fromBlock, Integer toBlock, String details, String contract, String secondary, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAddressV2ValidateBeforeCall(blockchain, address, page, pageSize, fromBlock, toBlock, details, contract, secondary, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBalanceHistoryV2
     * @param blockchain Blockchain name (required)
     * @param addressOrXpub Address or XPUB (required)
     * @param fromDate specifies a start date as a Unix timestamp (optional)
     * @param toDate specifies an end date as a Unix timestamp (optional)
     * @param fiatcurrency if specified, the response will contain secondary (fiat) rate at the time of transaction. If not, all available currencies will be returned (optional)
     * @param groupBy an interval in seconds, to group results by. Default is 3600 seconds (optional, default to 3600)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBalanceHistoryV2Call(String blockchain, String addressOrXpub, String fromDate, String toDate, String fiatcurrency, BigDecimal groupBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{blockchain}/v2/balancehistory/{addressOrXpub}"
            .replace("{" + "blockchain" + "}", localVarApiClient.escapeString(blockchain.toString()))
            .replace("{" + "addressOrXpub" + "}", localVarApiClient.escapeString(addressOrXpub.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (fiatcurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fiatcurrency", fiatcurrency));
        }

        if (groupBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupBy", groupBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-RapidAPI-Host", "X-API-Key", "X-RapidAPI-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBalanceHistoryV2ValidateBeforeCall(String blockchain, String addressOrXpub, String fromDate, String toDate, String fiatcurrency, BigDecimal groupBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockchain' is set
        if (blockchain == null) {
            throw new ApiException("Missing the required parameter 'blockchain' when calling getBalanceHistoryV2(Async)");
        }

        // verify the required parameter 'addressOrXpub' is set
        if (addressOrXpub == null) {
            throw new ApiException("Missing the required parameter 'addressOrXpub' when calling getBalanceHistoryV2(Async)");
        }

        return getBalanceHistoryV2Call(blockchain, addressOrXpub, fromDate, toDate, fiatcurrency, groupBy, _callback);

    }

    /**
     * Get Balance History V2
     * Returns a balance history for the specified XPUB or address  The value of sentToSelf is the amount sent from the same address to the same address or within addresses of xpub.
     * @param blockchain Blockchain name (required)
     * @param addressOrXpub Address or XPUB (required)
     * @param fromDate specifies a start date as a Unix timestamp (optional)
     * @param toDate specifies an end date as a Unix timestamp (optional)
     * @param fiatcurrency if specified, the response will contain secondary (fiat) rate at the time of transaction. If not, all available currencies will be returned (optional)
     * @param groupBy an interval in seconds, to group results by. Default is 3600 seconds (optional, default to 3600)
     * @return List&lt;GetBalanceHistoryV2200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<GetBalanceHistoryV2200ResponseInner> getBalanceHistoryV2(String blockchain, String addressOrXpub, String fromDate, String toDate, String fiatcurrency, BigDecimal groupBy) throws ApiException {
        ApiResponse<List<GetBalanceHistoryV2200ResponseInner>> localVarResp = getBalanceHistoryV2WithHttpInfo(blockchain, addressOrXpub, fromDate, toDate, fiatcurrency, groupBy);
        return localVarResp.getData();
    }

    /**
     * Get Balance History V2
     * Returns a balance history for the specified XPUB or address  The value of sentToSelf is the amount sent from the same address to the same address or within addresses of xpub.
     * @param blockchain Blockchain name (required)
     * @param addressOrXpub Address or XPUB (required)
     * @param fromDate specifies a start date as a Unix timestamp (optional)
     * @param toDate specifies an end date as a Unix timestamp (optional)
     * @param fiatcurrency if specified, the response will contain secondary (fiat) rate at the time of transaction. If not, all available currencies will be returned (optional)
     * @param groupBy an interval in seconds, to group results by. Default is 3600 seconds (optional, default to 3600)
     * @return ApiResponse&lt;List&lt;GetBalanceHistoryV2200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetBalanceHistoryV2200ResponseInner>> getBalanceHistoryV2WithHttpInfo(String blockchain, String addressOrXpub, String fromDate, String toDate, String fiatcurrency, BigDecimal groupBy) throws ApiException {
        okhttp3.Call localVarCall = getBalanceHistoryV2ValidateBeforeCall(blockchain, addressOrXpub, fromDate, toDate, fiatcurrency, groupBy, null);
        Type localVarReturnType = new TypeToken<List<GetBalanceHistoryV2200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Balance History V2 (asynchronously)
     * Returns a balance history for the specified XPUB or address  The value of sentToSelf is the amount sent from the same address to the same address or within addresses of xpub.
     * @param blockchain Blockchain name (required)
     * @param addressOrXpub Address or XPUB (required)
     * @param fromDate specifies a start date as a Unix timestamp (optional)
     * @param toDate specifies an end date as a Unix timestamp (optional)
     * @param fiatcurrency if specified, the response will contain secondary (fiat) rate at the time of transaction. If not, all available currencies will be returned (optional)
     * @param groupBy an interval in seconds, to group results by. Default is 3600 seconds (optional, default to 3600)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBalanceHistoryV2Async(String blockchain, String addressOrXpub, String fromDate, String toDate, String fiatcurrency, BigDecimal groupBy, final ApiCallback<List<GetBalanceHistoryV2200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBalanceHistoryV2ValidateBeforeCall(blockchain, addressOrXpub, fromDate, toDate, fiatcurrency, groupBy, _callback);
        Type localVarReturnType = new TypeToken<List<GetBalanceHistoryV2200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUTXOV2
     * @param blockchain Blockchain name (required)
     * @param addressOrXpub Address or XPUB (required)
     * @param confirmed confirmed&#x3D;true disables return of unconfirmed transactions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUTXOV2Call(String blockchain, String addressOrXpub, Boolean confirmed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{blockchain}/v2/utxo/{addressOrXpub}"
            .replace("{" + "blockchain" + "}", localVarApiClient.escapeString(blockchain.toString()))
            .replace("{" + "addressOrXpub" + "}", localVarApiClient.escapeString(addressOrXpub.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (confirmed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("confirmed", confirmed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-RapidAPI-Host", "X-API-Key", "X-RapidAPI-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUTXOV2ValidateBeforeCall(String blockchain, String addressOrXpub, Boolean confirmed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockchain' is set
        if (blockchain == null) {
            throw new ApiException("Missing the required parameter 'blockchain' when calling getUTXOV2(Async)");
        }

        // verify the required parameter 'addressOrXpub' is set
        if (addressOrXpub == null) {
            throw new ApiException("Missing the required parameter 'addressOrXpub' when calling getUTXOV2(Async)");
        }

        return getUTXOV2Call(blockchain, addressOrXpub, confirmed, _callback);

    }

    /**
     * Get UTXO V2
     * Returns array of unspent transaction outputs of address or xpub, applicable only for Bitcoin-type coins. By default, the list contains both confirmed and unconfirmed transactions. The query parameter confirmed&#x3D;true disables return of unconfirmed transactions. The returned utxos are sorted by block height, newest blocks first. For xpubs or output descriptors, the response also contains address and derivation path of the utxo.    Unconfirmed utxos do not have field height, the field confirmations has value 0 and may contain field lockTime, if not zero.  Coinbase utxos have field coinbase set to true, however due to performance reasons only up to minimum coinbase confirmations limit (100). After this limit, utxos are not detected as coinbase.
     * @param blockchain Blockchain name (required)
     * @param addressOrXpub Address or XPUB (required)
     * @param confirmed confirmed&#x3D;true disables return of unconfirmed transactions (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getUTXOV2(String blockchain, String addressOrXpub, Boolean confirmed) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getUTXOV2WithHttpInfo(blockchain, addressOrXpub, confirmed);
        return localVarResp.getData();
    }

    /**
     * Get UTXO V2
     * Returns array of unspent transaction outputs of address or xpub, applicable only for Bitcoin-type coins. By default, the list contains both confirmed and unconfirmed transactions. The query parameter confirmed&#x3D;true disables return of unconfirmed transactions. The returned utxos are sorted by block height, newest blocks first. For xpubs or output descriptors, the response also contains address and derivation path of the utxo.    Unconfirmed utxos do not have field height, the field confirmations has value 0 and may contain field lockTime, if not zero.  Coinbase utxos have field coinbase set to true, however due to performance reasons only up to minimum coinbase confirmations limit (100). After this limit, utxos are not detected as coinbase.
     * @param blockchain Blockchain name (required)
     * @param addressOrXpub Address or XPUB (required)
     * @param confirmed confirmed&#x3D;true disables return of unconfirmed transactions (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getUTXOV2WithHttpInfo(String blockchain, String addressOrXpub, Boolean confirmed) throws ApiException {
        okhttp3.Call localVarCall = getUTXOV2ValidateBeforeCall(blockchain, addressOrXpub, confirmed, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get UTXO V2 (asynchronously)
     * Returns array of unspent transaction outputs of address or xpub, applicable only for Bitcoin-type coins. By default, the list contains both confirmed and unconfirmed transactions. The query parameter confirmed&#x3D;true disables return of unconfirmed transactions. The returned utxos are sorted by block height, newest blocks first. For xpubs or output descriptors, the response also contains address and derivation path of the utxo.    Unconfirmed utxos do not have field height, the field confirmations has value 0 and may contain field lockTime, if not zero.  Coinbase utxos have field coinbase set to true, however due to performance reasons only up to minimum coinbase confirmations limit (100). After this limit, utxos are not detected as coinbase.
     * @param blockchain Blockchain name (required)
     * @param addressOrXpub Address or XPUB (required)
     * @param confirmed confirmed&#x3D;true disables return of unconfirmed transactions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUTXOV2Async(String blockchain, String addressOrXpub, Boolean confirmed, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUTXOV2ValidateBeforeCall(blockchain, addressOrXpub, confirmed, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getXpubV2
     * @param blockchain Blockchain name (required)
     * @param xpub xpub or output descriptor, applicable only for Bitcoin-type coins (required)
     * @param page specifies page of returned transactions, starting from 1. If out of range, Blockbook returns the closest possible page. (optional)
     * @param pageSize number of transactions returned by call (default and maximum 1000) (optional)
     * @param fromBlock filter of the returned transactions from block height to block height (default no filter) (optional)
     * @param toBlock filter of the returned transactions from block height to block height (default no filter) (optional)
     * @param details specifies level of details returned by request (optional, default to txids)
     * @param tokens specifies what tokens (xpub addresses) are returned by the request (default nonzero) (optional, default to nonzero)
     * @param secondary specifies secondary (fiat) currency in which the token and total balances are returned in addition to crypto values (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getXpubV2Call(String blockchain, String xpub, Integer page, Integer pageSize, Integer fromBlock, Integer toBlock, String details, String tokens, String secondary, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{blockchain}/v2/xpub/{xpub}"
            .replace("{" + "blockchain" + "}", localVarApiClient.escapeString(blockchain.toString()))
            .replace("{" + "xpub" + "}", localVarApiClient.escapeString(xpub.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (fromBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromBlock", fromBlock));
        }

        if (toBlock != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toBlock", toBlock));
        }

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if (tokens != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tokens", tokens));
        }

        if (secondary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secondary", secondary));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "X-RapidAPI-Host", "X-API-Key", "X-RapidAPI-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getXpubV2ValidateBeforeCall(String blockchain, String xpub, Integer page, Integer pageSize, Integer fromBlock, Integer toBlock, String details, String tokens, String secondary, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'blockchain' is set
        if (blockchain == null) {
            throw new ApiException("Missing the required parameter 'blockchain' when calling getXpubV2(Async)");
        }

        // verify the required parameter 'xpub' is set
        if (xpub == null) {
            throw new ApiException("Missing the required parameter 'xpub' when calling getXpubV2(Async)");
        }

        return getXpubV2Call(blockchain, xpub, page, pageSize, fromBlock, toBlock, details, tokens, secondary, _callback);

    }

    /**
     * Get xpub V2
     * Returns balances and transactions of an xpub or output descriptor, applicable only for Bitcoin-type coins.  Blockbook supports BIP44, BIP49, BIP84 and BIP86 (Taproot) derivation schemes, using either xpubs or output descriptors (see https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md)  Note: usedTokens always returns total number of used addresses of xpub.  Detailed documentation found here: https://github.com/trezor/blockbook/blob/master/docs/api.md#get-xpub
     * @param blockchain Blockchain name (required)
     * @param xpub xpub or output descriptor, applicable only for Bitcoin-type coins (required)
     * @param page specifies page of returned transactions, starting from 1. If out of range, Blockbook returns the closest possible page. (optional)
     * @param pageSize number of transactions returned by call (default and maximum 1000) (optional)
     * @param fromBlock filter of the returned transactions from block height to block height (default no filter) (optional)
     * @param toBlock filter of the returned transactions from block height to block height (default no filter) (optional)
     * @param details specifies level of details returned by request (optional, default to txids)
     * @param tokens specifies what tokens (xpub addresses) are returned by the request (default nonzero) (optional, default to nonzero)
     * @param secondary specifies secondary (fiat) currency in which the token and total balances are returned in addition to crypto values (optional)
     * @return GetXpubV2200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetXpubV2200Response getXpubV2(String blockchain, String xpub, Integer page, Integer pageSize, Integer fromBlock, Integer toBlock, String details, String tokens, String secondary) throws ApiException {
        ApiResponse<GetXpubV2200Response> localVarResp = getXpubV2WithHttpInfo(blockchain, xpub, page, pageSize, fromBlock, toBlock, details, tokens, secondary);
        return localVarResp.getData();
    }

    /**
     * Get xpub V2
     * Returns balances and transactions of an xpub or output descriptor, applicable only for Bitcoin-type coins.  Blockbook supports BIP44, BIP49, BIP84 and BIP86 (Taproot) derivation schemes, using either xpubs or output descriptors (see https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md)  Note: usedTokens always returns total number of used addresses of xpub.  Detailed documentation found here: https://github.com/trezor/blockbook/blob/master/docs/api.md#get-xpub
     * @param blockchain Blockchain name (required)
     * @param xpub xpub or output descriptor, applicable only for Bitcoin-type coins (required)
     * @param page specifies page of returned transactions, starting from 1. If out of range, Blockbook returns the closest possible page. (optional)
     * @param pageSize number of transactions returned by call (default and maximum 1000) (optional)
     * @param fromBlock filter of the returned transactions from block height to block height (default no filter) (optional)
     * @param toBlock filter of the returned transactions from block height to block height (default no filter) (optional)
     * @param details specifies level of details returned by request (optional, default to txids)
     * @param tokens specifies what tokens (xpub addresses) are returned by the request (default nonzero) (optional, default to nonzero)
     * @param secondary specifies secondary (fiat) currency in which the token and total balances are returned in addition to crypto values (optional)
     * @return ApiResponse&lt;GetXpubV2200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetXpubV2200Response> getXpubV2WithHttpInfo(String blockchain, String xpub, Integer page, Integer pageSize, Integer fromBlock, Integer toBlock, String details, String tokens, String secondary) throws ApiException {
        okhttp3.Call localVarCall = getXpubV2ValidateBeforeCall(blockchain, xpub, page, pageSize, fromBlock, toBlock, details, tokens, secondary, null);
        Type localVarReturnType = new TypeToken<GetXpubV2200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get xpub V2 (asynchronously)
     * Returns balances and transactions of an xpub or output descriptor, applicable only for Bitcoin-type coins.  Blockbook supports BIP44, BIP49, BIP84 and BIP86 (Taproot) derivation schemes, using either xpubs or output descriptors (see https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md)  Note: usedTokens always returns total number of used addresses of xpub.  Detailed documentation found here: https://github.com/trezor/blockbook/blob/master/docs/api.md#get-xpub
     * @param blockchain Blockchain name (required)
     * @param xpub xpub or output descriptor, applicable only for Bitcoin-type coins (required)
     * @param page specifies page of returned transactions, starting from 1. If out of range, Blockbook returns the closest possible page. (optional)
     * @param pageSize number of transactions returned by call (default and maximum 1000) (optional)
     * @param fromBlock filter of the returned transactions from block height to block height (default no filter) (optional)
     * @param toBlock filter of the returned transactions from block height to block height (default no filter) (optional)
     * @param details specifies level of details returned by request (optional, default to txids)
     * @param tokens specifies what tokens (xpub addresses) are returned by the request (default nonzero) (optional, default to nonzero)
     * @param secondary specifies secondary (fiat) currency in which the token and total balances are returned in addition to crypto values (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getXpubV2Async(String blockchain, String xpub, Integer page, Integer pageSize, Integer fromBlock, Integer toBlock, String details, String tokens, String secondary, final ApiCallback<GetXpubV2200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getXpubV2ValidateBeforeCall(blockchain, xpub, page, pageSize, fromBlock, toBlock, details, tokens, secondary, _callback);
        Type localVarReturnType = new TypeToken<GetXpubV2200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
