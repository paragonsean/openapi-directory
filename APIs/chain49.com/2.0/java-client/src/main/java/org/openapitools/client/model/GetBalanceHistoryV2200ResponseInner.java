/*
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetBalanceHistoryV2200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:48.868561-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetBalanceHistoryV2200ResponseInner {
  public static final String SERIALIZED_NAME_RATES = "rates";
  @SerializedName(SERIALIZED_NAME_RATES)
  private Object rates;

  public static final String SERIALIZED_NAME_RECEIVED = "received";
  @SerializedName(SERIALIZED_NAME_RECEIVED)
  private String received;

  public static final String SERIALIZED_NAME_SENT = "sent";
  @SerializedName(SERIALIZED_NAME_SENT)
  private String sent;

  public static final String SERIALIZED_NAME_SENT_TO_SELF = "sentToSelf";
  @SerializedName(SERIALIZED_NAME_SENT_TO_SELF)
  private String sentToSelf;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private Integer time;

  public static final String SERIALIZED_NAME_TXS = "txs";
  @SerializedName(SERIALIZED_NAME_TXS)
  private Integer txs;

  public GetBalanceHistoryV2200ResponseInner() {
  }

  public GetBalanceHistoryV2200ResponseInner rates(Object rates) {
    this.rates = rates;
    return this;
  }

  /**
   * Get rates
   * @return rates
   */
  @javax.annotation.Nullable
  public Object getRates() {
    return rates;
  }

  public void setRates(Object rates) {
    this.rates = rates;
  }


  public GetBalanceHistoryV2200ResponseInner received(String received) {
    this.received = received;
    return this;
  }

  /**
   * Get received
   * @return received
   */
  @javax.annotation.Nullable
  public String getReceived() {
    return received;
  }

  public void setReceived(String received) {
    this.received = received;
  }


  public GetBalanceHistoryV2200ResponseInner sent(String sent) {
    this.sent = sent;
    return this;
  }

  /**
   * Get sent
   * @return sent
   */
  @javax.annotation.Nullable
  public String getSent() {
    return sent;
  }

  public void setSent(String sent) {
    this.sent = sent;
  }


  public GetBalanceHistoryV2200ResponseInner sentToSelf(String sentToSelf) {
    this.sentToSelf = sentToSelf;
    return this;
  }

  /**
   * Get sentToSelf
   * @return sentToSelf
   */
  @javax.annotation.Nullable
  public String getSentToSelf() {
    return sentToSelf;
  }

  public void setSentToSelf(String sentToSelf) {
    this.sentToSelf = sentToSelf;
  }


  public GetBalanceHistoryV2200ResponseInner time(Integer time) {
    this.time = time;
    return this;
  }

  /**
   * Get time
   * @return time
   */
  @javax.annotation.Nullable
  public Integer getTime() {
    return time;
  }

  public void setTime(Integer time) {
    this.time = time;
  }


  public GetBalanceHistoryV2200ResponseInner txs(Integer txs) {
    this.txs = txs;
    return this;
  }

  /**
   * Get txs
   * @return txs
   */
  @javax.annotation.Nullable
  public Integer getTxs() {
    return txs;
  }

  public void setTxs(Integer txs) {
    this.txs = txs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBalanceHistoryV2200ResponseInner getBalanceHistoryV2200ResponseInner = (GetBalanceHistoryV2200ResponseInner) o;
    return Objects.equals(this.rates, getBalanceHistoryV2200ResponseInner.rates) &&
        Objects.equals(this.received, getBalanceHistoryV2200ResponseInner.received) &&
        Objects.equals(this.sent, getBalanceHistoryV2200ResponseInner.sent) &&
        Objects.equals(this.sentToSelf, getBalanceHistoryV2200ResponseInner.sentToSelf) &&
        Objects.equals(this.time, getBalanceHistoryV2200ResponseInner.time) &&
        Objects.equals(this.txs, getBalanceHistoryV2200ResponseInner.txs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rates, received, sent, sentToSelf, time, txs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBalanceHistoryV2200ResponseInner {\n");
    sb.append("    rates: ").append(toIndentedString(rates)).append("\n");
    sb.append("    received: ").append(toIndentedString(received)).append("\n");
    sb.append("    sent: ").append(toIndentedString(sent)).append("\n");
    sb.append("    sentToSelf: ").append(toIndentedString(sentToSelf)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    txs: ").append(toIndentedString(txs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rates");
    openapiFields.add("received");
    openapiFields.add("sent");
    openapiFields.add("sentToSelf");
    openapiFields.add("time");
    openapiFields.add("txs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetBalanceHistoryV2200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBalanceHistoryV2200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBalanceHistoryV2200ResponseInner is not found in the empty JSON string", GetBalanceHistoryV2200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBalanceHistoryV2200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBalanceHistoryV2200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("received") != null && !jsonObj.get("received").isJsonNull()) && !jsonObj.get("received").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `received` to be a primitive type in the JSON string but got `%s`", jsonObj.get("received").toString()));
      }
      if ((jsonObj.get("sent") != null && !jsonObj.get("sent").isJsonNull()) && !jsonObj.get("sent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sent").toString()));
      }
      if ((jsonObj.get("sentToSelf") != null && !jsonObj.get("sentToSelf").isJsonNull()) && !jsonObj.get("sentToSelf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentToSelf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentToSelf").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBalanceHistoryV2200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBalanceHistoryV2200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBalanceHistoryV2200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBalanceHistoryV2200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBalanceHistoryV2200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetBalanceHistoryV2200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBalanceHistoryV2200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetBalanceHistoryV2200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetBalanceHistoryV2200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetBalanceHistoryV2200ResponseInner
   */
  public static GetBalanceHistoryV2200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBalanceHistoryV2200ResponseInner.class);
  }

  /**
   * Convert an instance of GetBalanceHistoryV2200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

