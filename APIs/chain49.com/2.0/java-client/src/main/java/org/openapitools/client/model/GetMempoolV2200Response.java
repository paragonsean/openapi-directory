/*
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetMempoolV2200ResponseMempoolInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetMempoolV2200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:48.868561-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetMempoolV2200Response {
  public static final String SERIALIZED_NAME_ITEMS_ON_PAGE = "itemsOnPage";
  @SerializedName(SERIALIZED_NAME_ITEMS_ON_PAGE)
  private Integer itemsOnPage;

  public static final String SERIALIZED_NAME_MEMPOOL = "mempool";
  @SerializedName(SERIALIZED_NAME_MEMPOOL)
  private List<GetMempoolV2200ResponseMempoolInner> mempool = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEMPOOL_SIZE = "mempoolSize";
  @SerializedName(SERIALIZED_NAME_MEMPOOL_SIZE)
  private Integer mempoolSize;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_TOTAL_PAGES = "totalPages";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAGES)
  private Integer totalPages;

  public GetMempoolV2200Response() {
  }

  public GetMempoolV2200Response itemsOnPage(Integer itemsOnPage) {
    this.itemsOnPage = itemsOnPage;
    return this;
  }

  /**
   * Get itemsOnPage
   * @return itemsOnPage
   */
  @javax.annotation.Nullable
  public Integer getItemsOnPage() {
    return itemsOnPage;
  }

  public void setItemsOnPage(Integer itemsOnPage) {
    this.itemsOnPage = itemsOnPage;
  }


  public GetMempoolV2200Response mempool(List<GetMempoolV2200ResponseMempoolInner> mempool) {
    this.mempool = mempool;
    return this;
  }

  public GetMempoolV2200Response addMempoolItem(GetMempoolV2200ResponseMempoolInner mempoolItem) {
    if (this.mempool == null) {
      this.mempool = new ArrayList<>();
    }
    this.mempool.add(mempoolItem);
    return this;
  }

  /**
   * Get mempool
   * @return mempool
   */
  @javax.annotation.Nullable
  public List<GetMempoolV2200ResponseMempoolInner> getMempool() {
    return mempool;
  }

  public void setMempool(List<GetMempoolV2200ResponseMempoolInner> mempool) {
    this.mempool = mempool;
  }


  public GetMempoolV2200Response mempoolSize(Integer mempoolSize) {
    this.mempoolSize = mempoolSize;
    return this;
  }

  /**
   * Get mempoolSize
   * @return mempoolSize
   */
  @javax.annotation.Nullable
  public Integer getMempoolSize() {
    return mempoolSize;
  }

  public void setMempoolSize(Integer mempoolSize) {
    this.mempoolSize = mempoolSize;
  }


  public GetMempoolV2200Response page(Integer page) {
    this.page = page;
    return this;
  }

  /**
   * Get page
   * @return page
   */
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }


  public GetMempoolV2200Response totalPages(Integer totalPages) {
    this.totalPages = totalPages;
    return this;
  }

  /**
   * Get totalPages
   * @return totalPages
   */
  @javax.annotation.Nullable
  public Integer getTotalPages() {
    return totalPages;
  }

  public void setTotalPages(Integer totalPages) {
    this.totalPages = totalPages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetMempoolV2200Response getMempoolV2200Response = (GetMempoolV2200Response) o;
    return Objects.equals(this.itemsOnPage, getMempoolV2200Response.itemsOnPage) &&
        Objects.equals(this.mempool, getMempoolV2200Response.mempool) &&
        Objects.equals(this.mempoolSize, getMempoolV2200Response.mempoolSize) &&
        Objects.equals(this.page, getMempoolV2200Response.page) &&
        Objects.equals(this.totalPages, getMempoolV2200Response.totalPages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemsOnPage, mempool, mempoolSize, page, totalPages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetMempoolV2200Response {\n");
    sb.append("    itemsOnPage: ").append(toIndentedString(itemsOnPage)).append("\n");
    sb.append("    mempool: ").append(toIndentedString(mempool)).append("\n");
    sb.append("    mempoolSize: ").append(toIndentedString(mempoolSize)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itemsOnPage");
    openapiFields.add("mempool");
    openapiFields.add("mempoolSize");
    openapiFields.add("page");
    openapiFields.add("totalPages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetMempoolV2200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetMempoolV2200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetMempoolV2200Response is not found in the empty JSON string", GetMempoolV2200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetMempoolV2200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetMempoolV2200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("mempool") != null && !jsonObj.get("mempool").isJsonNull()) {
        JsonArray jsonArraymempool = jsonObj.getAsJsonArray("mempool");
        if (jsonArraymempool != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mempool").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mempool` to be an array in the JSON string but got `%s`", jsonObj.get("mempool").toString()));
          }

          // validate the optional field `mempool` (array)
          for (int i = 0; i < jsonArraymempool.size(); i++) {
            GetMempoolV2200ResponseMempoolInner.validateJsonElement(jsonArraymempool.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetMempoolV2200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetMempoolV2200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetMempoolV2200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetMempoolV2200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetMempoolV2200Response>() {
           @Override
           public void write(JsonWriter out, GetMempoolV2200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetMempoolV2200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetMempoolV2200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetMempoolV2200Response
   * @throws IOException if the JSON string is invalid with respect to GetMempoolV2200Response
   */
  public static GetMempoolV2200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetMempoolV2200Response.class);
  }

  /**
   * Convert an instance of GetMempoolV2200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

