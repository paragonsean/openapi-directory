/*
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetBlockchain200ResponseBlockbook
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:48.868561-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetBlockchain200ResponseBlockbook {
  public static final String SERIALIZED_NAME_ABOUT = "about";
  @SerializedName(SERIALIZED_NAME_ABOUT)
  private String about;

  public static final String SERIALIZED_NAME_BEST_HEIGHT = "bestHeight";
  @SerializedName(SERIALIZED_NAME_BEST_HEIGHT)
  private Integer bestHeight;

  public static final String SERIALIZED_NAME_BUILD_TIME = "buildTime";
  @SerializedName(SERIALIZED_NAME_BUILD_TIME)
  private String buildTime;

  public static final String SERIALIZED_NAME_COIN = "coin";
  @SerializedName(SERIALIZED_NAME_COIN)
  private String coin;

  public static final String SERIALIZED_NAME_CURRENT_FIAT_RATES_TIME = "currentFiatRatesTime";
  @SerializedName(SERIALIZED_NAME_CURRENT_FIAT_RATES_TIME)
  private String currentFiatRatesTime;

  public static final String SERIALIZED_NAME_DB_SIZE = "dbSize";
  @SerializedName(SERIALIZED_NAME_DB_SIZE)
  private Integer dbSize;

  public static final String SERIALIZED_NAME_DECIMALS = "decimals";
  @SerializedName(SERIALIZED_NAME_DECIMALS)
  private Integer decimals;

  public static final String SERIALIZED_NAME_GIT_COMMIT = "gitCommit";
  @SerializedName(SERIALIZED_NAME_GIT_COMMIT)
  private String gitCommit;

  public static final String SERIALIZED_NAME_HAS_FIAT_RATES = "hasFiatRates";
  @SerializedName(SERIALIZED_NAME_HAS_FIAT_RATES)
  private Boolean hasFiatRates;

  public static final String SERIALIZED_NAME_HISTORICAL_FIAT_RATES_TIME = "historicalFiatRatesTime";
  @SerializedName(SERIALIZED_NAME_HISTORICAL_FIAT_RATES_TIME)
  private String historicalFiatRatesTime;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_IN_SYNC = "inSync";
  @SerializedName(SERIALIZED_NAME_IN_SYNC)
  private Boolean inSync;

  public static final String SERIALIZED_NAME_IN_SYNC_MEMPOOL = "inSyncMempool";
  @SerializedName(SERIALIZED_NAME_IN_SYNC_MEMPOOL)
  private Boolean inSyncMempool;

  public static final String SERIALIZED_NAME_INITIAL_SYNC = "initialSync";
  @SerializedName(SERIALIZED_NAME_INITIAL_SYNC)
  private Boolean initialSync;

  public static final String SERIALIZED_NAME_LAST_BLOCK_TIME = "lastBlockTime";
  @SerializedName(SERIALIZED_NAME_LAST_BLOCK_TIME)
  private String lastBlockTime;

  public static final String SERIALIZED_NAME_LAST_MEMPOOL_TIME = "lastMempoolTime";
  @SerializedName(SERIALIZED_NAME_LAST_MEMPOOL_TIME)
  private String lastMempoolTime;

  public static final String SERIALIZED_NAME_MEMPOOL_SIZE = "mempoolSize";
  @SerializedName(SERIALIZED_NAME_MEMPOOL_SIZE)
  private Integer mempoolSize;

  public static final String SERIALIZED_NAME_SYNC_MODE = "syncMode";
  @SerializedName(SERIALIZED_NAME_SYNC_MODE)
  private Boolean syncMode;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public GetBlockchain200ResponseBlockbook() {
  }

  public GetBlockchain200ResponseBlockbook about(String about) {
    this.about = about;
    return this;
  }

  /**
   * Get about
   * @return about
   */
  @javax.annotation.Nullable
  public String getAbout() {
    return about;
  }

  public void setAbout(String about) {
    this.about = about;
  }


  public GetBlockchain200ResponseBlockbook bestHeight(Integer bestHeight) {
    this.bestHeight = bestHeight;
    return this;
  }

  /**
   * Get bestHeight
   * @return bestHeight
   */
  @javax.annotation.Nullable
  public Integer getBestHeight() {
    return bestHeight;
  }

  public void setBestHeight(Integer bestHeight) {
    this.bestHeight = bestHeight;
  }


  public GetBlockchain200ResponseBlockbook buildTime(String buildTime) {
    this.buildTime = buildTime;
    return this;
  }

  /**
   * Get buildTime
   * @return buildTime
   */
  @javax.annotation.Nullable
  public String getBuildTime() {
    return buildTime;
  }

  public void setBuildTime(String buildTime) {
    this.buildTime = buildTime;
  }


  public GetBlockchain200ResponseBlockbook coin(String coin) {
    this.coin = coin;
    return this;
  }

  /**
   * Get coin
   * @return coin
   */
  @javax.annotation.Nullable
  public String getCoin() {
    return coin;
  }

  public void setCoin(String coin) {
    this.coin = coin;
  }


  public GetBlockchain200ResponseBlockbook currentFiatRatesTime(String currentFiatRatesTime) {
    this.currentFiatRatesTime = currentFiatRatesTime;
    return this;
  }

  /**
   * Get currentFiatRatesTime
   * @return currentFiatRatesTime
   */
  @javax.annotation.Nullable
  public String getCurrentFiatRatesTime() {
    return currentFiatRatesTime;
  }

  public void setCurrentFiatRatesTime(String currentFiatRatesTime) {
    this.currentFiatRatesTime = currentFiatRatesTime;
  }


  public GetBlockchain200ResponseBlockbook dbSize(Integer dbSize) {
    this.dbSize = dbSize;
    return this;
  }

  /**
   * Get dbSize
   * @return dbSize
   */
  @javax.annotation.Nullable
  public Integer getDbSize() {
    return dbSize;
  }

  public void setDbSize(Integer dbSize) {
    this.dbSize = dbSize;
  }


  public GetBlockchain200ResponseBlockbook decimals(Integer decimals) {
    this.decimals = decimals;
    return this;
  }

  /**
   * Get decimals
   * @return decimals
   */
  @javax.annotation.Nullable
  public Integer getDecimals() {
    return decimals;
  }

  public void setDecimals(Integer decimals) {
    this.decimals = decimals;
  }


  public GetBlockchain200ResponseBlockbook gitCommit(String gitCommit) {
    this.gitCommit = gitCommit;
    return this;
  }

  /**
   * Get gitCommit
   * @return gitCommit
   */
  @javax.annotation.Nullable
  public String getGitCommit() {
    return gitCommit;
  }

  public void setGitCommit(String gitCommit) {
    this.gitCommit = gitCommit;
  }


  public GetBlockchain200ResponseBlockbook hasFiatRates(Boolean hasFiatRates) {
    this.hasFiatRates = hasFiatRates;
    return this;
  }

  /**
   * Get hasFiatRates
   * @return hasFiatRates
   */
  @javax.annotation.Nullable
  public Boolean getHasFiatRates() {
    return hasFiatRates;
  }

  public void setHasFiatRates(Boolean hasFiatRates) {
    this.hasFiatRates = hasFiatRates;
  }


  public GetBlockchain200ResponseBlockbook historicalFiatRatesTime(String historicalFiatRatesTime) {
    this.historicalFiatRatesTime = historicalFiatRatesTime;
    return this;
  }

  /**
   * Get historicalFiatRatesTime
   * @return historicalFiatRatesTime
   */
  @javax.annotation.Nullable
  public String getHistoricalFiatRatesTime() {
    return historicalFiatRatesTime;
  }

  public void setHistoricalFiatRatesTime(String historicalFiatRatesTime) {
    this.historicalFiatRatesTime = historicalFiatRatesTime;
  }


  public GetBlockchain200ResponseBlockbook host(String host) {
    this.host = host;
    return this;
  }

  /**
   * Get host
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public GetBlockchain200ResponseBlockbook inSync(Boolean inSync) {
    this.inSync = inSync;
    return this;
  }

  /**
   * Get inSync
   * @return inSync
   */
  @javax.annotation.Nullable
  public Boolean getInSync() {
    return inSync;
  }

  public void setInSync(Boolean inSync) {
    this.inSync = inSync;
  }


  public GetBlockchain200ResponseBlockbook inSyncMempool(Boolean inSyncMempool) {
    this.inSyncMempool = inSyncMempool;
    return this;
  }

  /**
   * Get inSyncMempool
   * @return inSyncMempool
   */
  @javax.annotation.Nullable
  public Boolean getInSyncMempool() {
    return inSyncMempool;
  }

  public void setInSyncMempool(Boolean inSyncMempool) {
    this.inSyncMempool = inSyncMempool;
  }


  public GetBlockchain200ResponseBlockbook initialSync(Boolean initialSync) {
    this.initialSync = initialSync;
    return this;
  }

  /**
   * Get initialSync
   * @return initialSync
   */
  @javax.annotation.Nullable
  public Boolean getInitialSync() {
    return initialSync;
  }

  public void setInitialSync(Boolean initialSync) {
    this.initialSync = initialSync;
  }


  public GetBlockchain200ResponseBlockbook lastBlockTime(String lastBlockTime) {
    this.lastBlockTime = lastBlockTime;
    return this;
  }

  /**
   * Get lastBlockTime
   * @return lastBlockTime
   */
  @javax.annotation.Nullable
  public String getLastBlockTime() {
    return lastBlockTime;
  }

  public void setLastBlockTime(String lastBlockTime) {
    this.lastBlockTime = lastBlockTime;
  }


  public GetBlockchain200ResponseBlockbook lastMempoolTime(String lastMempoolTime) {
    this.lastMempoolTime = lastMempoolTime;
    return this;
  }

  /**
   * Get lastMempoolTime
   * @return lastMempoolTime
   */
  @javax.annotation.Nullable
  public String getLastMempoolTime() {
    return lastMempoolTime;
  }

  public void setLastMempoolTime(String lastMempoolTime) {
    this.lastMempoolTime = lastMempoolTime;
  }


  public GetBlockchain200ResponseBlockbook mempoolSize(Integer mempoolSize) {
    this.mempoolSize = mempoolSize;
    return this;
  }

  /**
   * Get mempoolSize
   * @return mempoolSize
   */
  @javax.annotation.Nullable
  public Integer getMempoolSize() {
    return mempoolSize;
  }

  public void setMempoolSize(Integer mempoolSize) {
    this.mempoolSize = mempoolSize;
  }


  public GetBlockchain200ResponseBlockbook syncMode(Boolean syncMode) {
    this.syncMode = syncMode;
    return this;
  }

  /**
   * Get syncMode
   * @return syncMode
   */
  @javax.annotation.Nullable
  public Boolean getSyncMode() {
    return syncMode;
  }

  public void setSyncMode(Boolean syncMode) {
    this.syncMode = syncMode;
  }


  public GetBlockchain200ResponseBlockbook version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBlockchain200ResponseBlockbook getBlockchain200ResponseBlockbook = (GetBlockchain200ResponseBlockbook) o;
    return Objects.equals(this.about, getBlockchain200ResponseBlockbook.about) &&
        Objects.equals(this.bestHeight, getBlockchain200ResponseBlockbook.bestHeight) &&
        Objects.equals(this.buildTime, getBlockchain200ResponseBlockbook.buildTime) &&
        Objects.equals(this.coin, getBlockchain200ResponseBlockbook.coin) &&
        Objects.equals(this.currentFiatRatesTime, getBlockchain200ResponseBlockbook.currentFiatRatesTime) &&
        Objects.equals(this.dbSize, getBlockchain200ResponseBlockbook.dbSize) &&
        Objects.equals(this.decimals, getBlockchain200ResponseBlockbook.decimals) &&
        Objects.equals(this.gitCommit, getBlockchain200ResponseBlockbook.gitCommit) &&
        Objects.equals(this.hasFiatRates, getBlockchain200ResponseBlockbook.hasFiatRates) &&
        Objects.equals(this.historicalFiatRatesTime, getBlockchain200ResponseBlockbook.historicalFiatRatesTime) &&
        Objects.equals(this.host, getBlockchain200ResponseBlockbook.host) &&
        Objects.equals(this.inSync, getBlockchain200ResponseBlockbook.inSync) &&
        Objects.equals(this.inSyncMempool, getBlockchain200ResponseBlockbook.inSyncMempool) &&
        Objects.equals(this.initialSync, getBlockchain200ResponseBlockbook.initialSync) &&
        Objects.equals(this.lastBlockTime, getBlockchain200ResponseBlockbook.lastBlockTime) &&
        Objects.equals(this.lastMempoolTime, getBlockchain200ResponseBlockbook.lastMempoolTime) &&
        Objects.equals(this.mempoolSize, getBlockchain200ResponseBlockbook.mempoolSize) &&
        Objects.equals(this.syncMode, getBlockchain200ResponseBlockbook.syncMode) &&
        Objects.equals(this.version, getBlockchain200ResponseBlockbook.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(about, bestHeight, buildTime, coin, currentFiatRatesTime, dbSize, decimals, gitCommit, hasFiatRates, historicalFiatRatesTime, host, inSync, inSyncMempool, initialSync, lastBlockTime, lastMempoolTime, mempoolSize, syncMode, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBlockchain200ResponseBlockbook {\n");
    sb.append("    about: ").append(toIndentedString(about)).append("\n");
    sb.append("    bestHeight: ").append(toIndentedString(bestHeight)).append("\n");
    sb.append("    buildTime: ").append(toIndentedString(buildTime)).append("\n");
    sb.append("    coin: ").append(toIndentedString(coin)).append("\n");
    sb.append("    currentFiatRatesTime: ").append(toIndentedString(currentFiatRatesTime)).append("\n");
    sb.append("    dbSize: ").append(toIndentedString(dbSize)).append("\n");
    sb.append("    decimals: ").append(toIndentedString(decimals)).append("\n");
    sb.append("    gitCommit: ").append(toIndentedString(gitCommit)).append("\n");
    sb.append("    hasFiatRates: ").append(toIndentedString(hasFiatRates)).append("\n");
    sb.append("    historicalFiatRatesTime: ").append(toIndentedString(historicalFiatRatesTime)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    inSync: ").append(toIndentedString(inSync)).append("\n");
    sb.append("    inSyncMempool: ").append(toIndentedString(inSyncMempool)).append("\n");
    sb.append("    initialSync: ").append(toIndentedString(initialSync)).append("\n");
    sb.append("    lastBlockTime: ").append(toIndentedString(lastBlockTime)).append("\n");
    sb.append("    lastMempoolTime: ").append(toIndentedString(lastMempoolTime)).append("\n");
    sb.append("    mempoolSize: ").append(toIndentedString(mempoolSize)).append("\n");
    sb.append("    syncMode: ").append(toIndentedString(syncMode)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("about");
    openapiFields.add("bestHeight");
    openapiFields.add("buildTime");
    openapiFields.add("coin");
    openapiFields.add("currentFiatRatesTime");
    openapiFields.add("dbSize");
    openapiFields.add("decimals");
    openapiFields.add("gitCommit");
    openapiFields.add("hasFiatRates");
    openapiFields.add("historicalFiatRatesTime");
    openapiFields.add("host");
    openapiFields.add("inSync");
    openapiFields.add("inSyncMempool");
    openapiFields.add("initialSync");
    openapiFields.add("lastBlockTime");
    openapiFields.add("lastMempoolTime");
    openapiFields.add("mempoolSize");
    openapiFields.add("syncMode");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetBlockchain200ResponseBlockbook
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBlockchain200ResponseBlockbook.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBlockchain200ResponseBlockbook is not found in the empty JSON string", GetBlockchain200ResponseBlockbook.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBlockchain200ResponseBlockbook.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBlockchain200ResponseBlockbook` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("about") != null && !jsonObj.get("about").isJsonNull()) && !jsonObj.get("about").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `about` to be a primitive type in the JSON string but got `%s`", jsonObj.get("about").toString()));
      }
      if ((jsonObj.get("buildTime") != null && !jsonObj.get("buildTime").isJsonNull()) && !jsonObj.get("buildTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildTime").toString()));
      }
      if ((jsonObj.get("coin") != null && !jsonObj.get("coin").isJsonNull()) && !jsonObj.get("coin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coin").toString()));
      }
      if ((jsonObj.get("currentFiatRatesTime") != null && !jsonObj.get("currentFiatRatesTime").isJsonNull()) && !jsonObj.get("currentFiatRatesTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentFiatRatesTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentFiatRatesTime").toString()));
      }
      if ((jsonObj.get("gitCommit") != null && !jsonObj.get("gitCommit").isJsonNull()) && !jsonObj.get("gitCommit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitCommit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitCommit").toString()));
      }
      if ((jsonObj.get("historicalFiatRatesTime") != null && !jsonObj.get("historicalFiatRatesTime").isJsonNull()) && !jsonObj.get("historicalFiatRatesTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `historicalFiatRatesTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("historicalFiatRatesTime").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("lastBlockTime") != null && !jsonObj.get("lastBlockTime").isJsonNull()) && !jsonObj.get("lastBlockTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastBlockTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastBlockTime").toString()));
      }
      if ((jsonObj.get("lastMempoolTime") != null && !jsonObj.get("lastMempoolTime").isJsonNull()) && !jsonObj.get("lastMempoolTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastMempoolTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastMempoolTime").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBlockchain200ResponseBlockbook.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBlockchain200ResponseBlockbook' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBlockchain200ResponseBlockbook> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBlockchain200ResponseBlockbook.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBlockchain200ResponseBlockbook>() {
           @Override
           public void write(JsonWriter out, GetBlockchain200ResponseBlockbook value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBlockchain200ResponseBlockbook read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetBlockchain200ResponseBlockbook given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetBlockchain200ResponseBlockbook
   * @throws IOException if the JSON string is invalid with respect to GetBlockchain200ResponseBlockbook
   */
  public static GetBlockchain200ResponseBlockbook fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBlockchain200ResponseBlockbook.class);
  }

  /**
   * Convert an instance of GetBlockchain200ResponseBlockbook to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

