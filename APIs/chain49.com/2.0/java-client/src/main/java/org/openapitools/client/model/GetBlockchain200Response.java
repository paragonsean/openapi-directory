/*
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetBlockchain200ResponseBackend;
import org.openapitools.client.model.GetBlockchain200ResponseBlockbook;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetBlockchain200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:48.868561-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetBlockchain200Response {
  public static final String SERIALIZED_NAME_BACKEND = "backend";
  @SerializedName(SERIALIZED_NAME_BACKEND)
  private GetBlockchain200ResponseBackend backend;

  public static final String SERIALIZED_NAME_BLOCKBOOK = "blockbook";
  @SerializedName(SERIALIZED_NAME_BLOCKBOOK)
  private GetBlockchain200ResponseBlockbook blockbook;

  public GetBlockchain200Response() {
  }

  public GetBlockchain200Response backend(GetBlockchain200ResponseBackend backend) {
    this.backend = backend;
    return this;
  }

  /**
   * Get backend
   * @return backend
   */
  @javax.annotation.Nullable
  public GetBlockchain200ResponseBackend getBackend() {
    return backend;
  }

  public void setBackend(GetBlockchain200ResponseBackend backend) {
    this.backend = backend;
  }


  public GetBlockchain200Response blockbook(GetBlockchain200ResponseBlockbook blockbook) {
    this.blockbook = blockbook;
    return this;
  }

  /**
   * Get blockbook
   * @return blockbook
   */
  @javax.annotation.Nullable
  public GetBlockchain200ResponseBlockbook getBlockbook() {
    return blockbook;
  }

  public void setBlockbook(GetBlockchain200ResponseBlockbook blockbook) {
    this.blockbook = blockbook;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBlockchain200Response getBlockchain200Response = (GetBlockchain200Response) o;
    return Objects.equals(this.backend, getBlockchain200Response.backend) &&
        Objects.equals(this.blockbook, getBlockchain200Response.blockbook);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backend, blockbook);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBlockchain200Response {\n");
    sb.append("    backend: ").append(toIndentedString(backend)).append("\n");
    sb.append("    blockbook: ").append(toIndentedString(blockbook)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backend");
    openapiFields.add("blockbook");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetBlockchain200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBlockchain200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBlockchain200Response is not found in the empty JSON string", GetBlockchain200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBlockchain200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBlockchain200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backend`
      if (jsonObj.get("backend") != null && !jsonObj.get("backend").isJsonNull()) {
        GetBlockchain200ResponseBackend.validateJsonElement(jsonObj.get("backend"));
      }
      // validate the optional field `blockbook`
      if (jsonObj.get("blockbook") != null && !jsonObj.get("blockbook").isJsonNull()) {
        GetBlockchain200ResponseBlockbook.validateJsonElement(jsonObj.get("blockbook"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBlockchain200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBlockchain200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBlockchain200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBlockchain200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBlockchain200Response>() {
           @Override
           public void write(JsonWriter out, GetBlockchain200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBlockchain200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetBlockchain200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetBlockchain200Response
   * @throws IOException if the JSON string is invalid with respect to GetBlockchain200Response
   */
  public static GetBlockchain200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBlockchain200Response.class);
  }

  /**
   * Convert an instance of GetBlockchain200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

