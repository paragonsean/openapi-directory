/*
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetBlockV2200ResponseTxsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetBlockV2200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:48.868561-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetBlockV2200Response {
  public static final String SERIALIZED_NAME_BITS = "bits";
  @SerializedName(SERIALIZED_NAME_BITS)
  private String bits;

  public static final String SERIALIZED_NAME_CONFIRMATIONS = "confirmations";
  @SerializedName(SERIALIZED_NAME_CONFIRMATIONS)
  private Integer confirmations;

  public static final String SERIALIZED_NAME_DIFFICULTY = "difficulty";
  @SerializedName(SERIALIZED_NAME_DIFFICULTY)
  private String difficulty;

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_ITEMS_ON_PAGE = "itemsOnPage";
  @SerializedName(SERIALIZED_NAME_ITEMS_ON_PAGE)
  private Integer itemsOnPage;

  public static final String SERIALIZED_NAME_MERKLE_ROOT = "merkleRoot";
  @SerializedName(SERIALIZED_NAME_MERKLE_ROOT)
  private String merkleRoot;

  public static final String SERIALIZED_NAME_NEXT_BLOCK_HASH = "nextBlockHash";
  @SerializedName(SERIALIZED_NAME_NEXT_BLOCK_HASH)
  private String nextBlockHash;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_PREVIOUS_BLOCK_HASH = "previousBlockHash";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_BLOCK_HASH)
  private String previousBlockHash;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private Integer time;

  public static final String SERIALIZED_NAME_TOTAL_PAGES = "totalPages";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAGES)
  private Integer totalPages;

  public static final String SERIALIZED_NAME_TX_COUNT = "txCount";
  @SerializedName(SERIALIZED_NAME_TX_COUNT)
  private Integer txCount;

  public static final String SERIALIZED_NAME_TXS = "txs";
  @SerializedName(SERIALIZED_NAME_TXS)
  private List<GetBlockV2200ResponseTxsInner> txs = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public GetBlockV2200Response() {
  }

  public GetBlockV2200Response bits(String bits) {
    this.bits = bits;
    return this;
  }

  /**
   * Get bits
   * @return bits
   */
  @javax.annotation.Nullable
  public String getBits() {
    return bits;
  }

  public void setBits(String bits) {
    this.bits = bits;
  }


  public GetBlockV2200Response confirmations(Integer confirmations) {
    this.confirmations = confirmations;
    return this;
  }

  /**
   * Get confirmations
   * @return confirmations
   */
  @javax.annotation.Nullable
  public Integer getConfirmations() {
    return confirmations;
  }

  public void setConfirmations(Integer confirmations) {
    this.confirmations = confirmations;
  }


  public GetBlockV2200Response difficulty(String difficulty) {
    this.difficulty = difficulty;
    return this;
  }

  /**
   * Get difficulty
   * @return difficulty
   */
  @javax.annotation.Nullable
  public String getDifficulty() {
    return difficulty;
  }

  public void setDifficulty(String difficulty) {
    this.difficulty = difficulty;
  }


  public GetBlockV2200Response hash(String hash) {
    this.hash = hash;
    return this;
  }

  /**
   * Get hash
   * @return hash
   */
  @javax.annotation.Nullable
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }


  public GetBlockV2200Response height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public GetBlockV2200Response itemsOnPage(Integer itemsOnPage) {
    this.itemsOnPage = itemsOnPage;
    return this;
  }

  /**
   * Get itemsOnPage
   * @return itemsOnPage
   */
  @javax.annotation.Nullable
  public Integer getItemsOnPage() {
    return itemsOnPage;
  }

  public void setItemsOnPage(Integer itemsOnPage) {
    this.itemsOnPage = itemsOnPage;
  }


  public GetBlockV2200Response merkleRoot(String merkleRoot) {
    this.merkleRoot = merkleRoot;
    return this;
  }

  /**
   * Get merkleRoot
   * @return merkleRoot
   */
  @javax.annotation.Nullable
  public String getMerkleRoot() {
    return merkleRoot;
  }

  public void setMerkleRoot(String merkleRoot) {
    this.merkleRoot = merkleRoot;
  }


  public GetBlockV2200Response nextBlockHash(String nextBlockHash) {
    this.nextBlockHash = nextBlockHash;
    return this;
  }

  /**
   * Get nextBlockHash
   * @return nextBlockHash
   */
  @javax.annotation.Nullable
  public String getNextBlockHash() {
    return nextBlockHash;
  }

  public void setNextBlockHash(String nextBlockHash) {
    this.nextBlockHash = nextBlockHash;
  }


  public GetBlockV2200Response nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Get nonce
   * @return nonce
   */
  @javax.annotation.Nullable
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public GetBlockV2200Response page(Integer page) {
    this.page = page;
    return this;
  }

  /**
   * Get page
   * @return page
   */
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }


  public GetBlockV2200Response previousBlockHash(String previousBlockHash) {
    this.previousBlockHash = previousBlockHash;
    return this;
  }

  /**
   * Get previousBlockHash
   * @return previousBlockHash
   */
  @javax.annotation.Nullable
  public String getPreviousBlockHash() {
    return previousBlockHash;
  }

  public void setPreviousBlockHash(String previousBlockHash) {
    this.previousBlockHash = previousBlockHash;
  }


  public GetBlockV2200Response size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public GetBlockV2200Response time(Integer time) {
    this.time = time;
    return this;
  }

  /**
   * Get time
   * @return time
   */
  @javax.annotation.Nullable
  public Integer getTime() {
    return time;
  }

  public void setTime(Integer time) {
    this.time = time;
  }


  public GetBlockV2200Response totalPages(Integer totalPages) {
    this.totalPages = totalPages;
    return this;
  }

  /**
   * Get totalPages
   * @return totalPages
   */
  @javax.annotation.Nullable
  public Integer getTotalPages() {
    return totalPages;
  }

  public void setTotalPages(Integer totalPages) {
    this.totalPages = totalPages;
  }


  public GetBlockV2200Response txCount(Integer txCount) {
    this.txCount = txCount;
    return this;
  }

  /**
   * Get txCount
   * @return txCount
   */
  @javax.annotation.Nullable
  public Integer getTxCount() {
    return txCount;
  }

  public void setTxCount(Integer txCount) {
    this.txCount = txCount;
  }


  public GetBlockV2200Response txs(List<GetBlockV2200ResponseTxsInner> txs) {
    this.txs = txs;
    return this;
  }

  public GetBlockV2200Response addTxsItem(GetBlockV2200ResponseTxsInner txsItem) {
    if (this.txs == null) {
      this.txs = new ArrayList<>();
    }
    this.txs.add(txsItem);
    return this;
  }

  /**
   * Get txs
   * @return txs
   */
  @javax.annotation.Nullable
  public List<GetBlockV2200ResponseTxsInner> getTxs() {
    return txs;
  }

  public void setTxs(List<GetBlockV2200ResponseTxsInner> txs) {
    this.txs = txs;
  }


  public GetBlockV2200Response version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetBlockV2200Response getBlockV2200Response = (GetBlockV2200Response) o;
    return Objects.equals(this.bits, getBlockV2200Response.bits) &&
        Objects.equals(this.confirmations, getBlockV2200Response.confirmations) &&
        Objects.equals(this.difficulty, getBlockV2200Response.difficulty) &&
        Objects.equals(this.hash, getBlockV2200Response.hash) &&
        Objects.equals(this.height, getBlockV2200Response.height) &&
        Objects.equals(this.itemsOnPage, getBlockV2200Response.itemsOnPage) &&
        Objects.equals(this.merkleRoot, getBlockV2200Response.merkleRoot) &&
        Objects.equals(this.nextBlockHash, getBlockV2200Response.nextBlockHash) &&
        Objects.equals(this.nonce, getBlockV2200Response.nonce) &&
        Objects.equals(this.page, getBlockV2200Response.page) &&
        Objects.equals(this.previousBlockHash, getBlockV2200Response.previousBlockHash) &&
        Objects.equals(this.size, getBlockV2200Response.size) &&
        Objects.equals(this.time, getBlockV2200Response.time) &&
        Objects.equals(this.totalPages, getBlockV2200Response.totalPages) &&
        Objects.equals(this.txCount, getBlockV2200Response.txCount) &&
        Objects.equals(this.txs, getBlockV2200Response.txs) &&
        Objects.equals(this.version, getBlockV2200Response.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bits, confirmations, difficulty, hash, height, itemsOnPage, merkleRoot, nextBlockHash, nonce, page, previousBlockHash, size, time, totalPages, txCount, txs, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetBlockV2200Response {\n");
    sb.append("    bits: ").append(toIndentedString(bits)).append("\n");
    sb.append("    confirmations: ").append(toIndentedString(confirmations)).append("\n");
    sb.append("    difficulty: ").append(toIndentedString(difficulty)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    itemsOnPage: ").append(toIndentedString(itemsOnPage)).append("\n");
    sb.append("    merkleRoot: ").append(toIndentedString(merkleRoot)).append("\n");
    sb.append("    nextBlockHash: ").append(toIndentedString(nextBlockHash)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    previousBlockHash: ").append(toIndentedString(previousBlockHash)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("    txCount: ").append(toIndentedString(txCount)).append("\n");
    sb.append("    txs: ").append(toIndentedString(txs)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bits");
    openapiFields.add("confirmations");
    openapiFields.add("difficulty");
    openapiFields.add("hash");
    openapiFields.add("height");
    openapiFields.add("itemsOnPage");
    openapiFields.add("merkleRoot");
    openapiFields.add("nextBlockHash");
    openapiFields.add("nonce");
    openapiFields.add("page");
    openapiFields.add("previousBlockHash");
    openapiFields.add("size");
    openapiFields.add("time");
    openapiFields.add("totalPages");
    openapiFields.add("txCount");
    openapiFields.add("txs");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetBlockV2200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetBlockV2200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetBlockV2200Response is not found in the empty JSON string", GetBlockV2200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetBlockV2200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetBlockV2200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bits") != null && !jsonObj.get("bits").isJsonNull()) && !jsonObj.get("bits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bits").toString()));
      }
      if ((jsonObj.get("difficulty") != null && !jsonObj.get("difficulty").isJsonNull()) && !jsonObj.get("difficulty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `difficulty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("difficulty").toString()));
      }
      if ((jsonObj.get("hash") != null && !jsonObj.get("hash").isJsonNull()) && !jsonObj.get("hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash").toString()));
      }
      if ((jsonObj.get("merkleRoot") != null && !jsonObj.get("merkleRoot").isJsonNull()) && !jsonObj.get("merkleRoot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merkleRoot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merkleRoot").toString()));
      }
      if ((jsonObj.get("nextBlockHash") != null && !jsonObj.get("nextBlockHash").isJsonNull()) && !jsonObj.get("nextBlockHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextBlockHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextBlockHash").toString()));
      }
      if ((jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonNull()) && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      if ((jsonObj.get("previousBlockHash") != null && !jsonObj.get("previousBlockHash").isJsonNull()) && !jsonObj.get("previousBlockHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousBlockHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousBlockHash").toString()));
      }
      if (jsonObj.get("txs") != null && !jsonObj.get("txs").isJsonNull()) {
        JsonArray jsonArraytxs = jsonObj.getAsJsonArray("txs");
        if (jsonArraytxs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("txs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `txs` to be an array in the JSON string but got `%s`", jsonObj.get("txs").toString()));
          }

          // validate the optional field `txs` (array)
          for (int i = 0; i < jsonArraytxs.size(); i++) {
            GetBlockV2200ResponseTxsInner.validateJsonElement(jsonArraytxs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetBlockV2200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetBlockV2200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetBlockV2200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetBlockV2200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetBlockV2200Response>() {
           @Override
           public void write(JsonWriter out, GetBlockV2200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetBlockV2200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetBlockV2200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetBlockV2200Response
   * @throws IOException if the JSON string is invalid with respect to GetBlockV2200Response
   */
  public static GetBlockV2200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetBlockV2200Response.class);
  }

  /**
   * Convert an instance of GetBlockV2200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

