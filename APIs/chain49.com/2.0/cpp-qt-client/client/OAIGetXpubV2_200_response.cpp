/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetXpubV2_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetXpubV2_200_response::OAIGetXpubV2_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetXpubV2_200_response::OAIGetXpubV2_200_response() {
    this->initializeModel();
}

OAIGetXpubV2_200_response::~OAIGetXpubV2_200_response() {}

void OAIGetXpubV2_200_response::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_items_on_page_isSet = false;
    m_items_on_page_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_secondary_value_isSet = false;
    m_secondary_value_isValid = false;

    m_tokens_isSet = false;
    m_tokens_isValid = false;

    m_total_pages_isSet = false;
    m_total_pages_isValid = false;

    m_total_received_isSet = false;
    m_total_received_isValid = false;

    m_total_sent_isSet = false;
    m_total_sent_isValid = false;

    m_txids_isSet = false;
    m_txids_isValid = false;

    m_txs_isSet = false;
    m_txs_isValid = false;

    m_unconfirmed_balance_isSet = false;
    m_unconfirmed_balance_isValid = false;

    m_unconfirmed_txs_isSet = false;
    m_unconfirmed_txs_isValid = false;

    m_used_tokens_isSet = false;
    m_used_tokens_isValid = false;
}

void OAIGetXpubV2_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetXpubV2_200_response::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_items_on_page_isValid = ::OpenAPI::fromJsonValue(m_items_on_page, json[QString("itemsOnPage")]);
    m_items_on_page_isSet = !json[QString("itemsOnPage")].isNull() && m_items_on_page_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_secondary_value_isValid = ::OpenAPI::fromJsonValue(m_secondary_value, json[QString("secondaryValue")]);
    m_secondary_value_isSet = !json[QString("secondaryValue")].isNull() && m_secondary_value_isValid;

    m_tokens_isValid = ::OpenAPI::fromJsonValue(m_tokens, json[QString("tokens")]);
    m_tokens_isSet = !json[QString("tokens")].isNull() && m_tokens_isValid;

    m_total_pages_isValid = ::OpenAPI::fromJsonValue(m_total_pages, json[QString("totalPages")]);
    m_total_pages_isSet = !json[QString("totalPages")].isNull() && m_total_pages_isValid;

    m_total_received_isValid = ::OpenAPI::fromJsonValue(m_total_received, json[QString("totalReceived")]);
    m_total_received_isSet = !json[QString("totalReceived")].isNull() && m_total_received_isValid;

    m_total_sent_isValid = ::OpenAPI::fromJsonValue(m_total_sent, json[QString("totalSent")]);
    m_total_sent_isSet = !json[QString("totalSent")].isNull() && m_total_sent_isValid;

    m_txids_isValid = ::OpenAPI::fromJsonValue(m_txids, json[QString("txids")]);
    m_txids_isSet = !json[QString("txids")].isNull() && m_txids_isValid;

    m_txs_isValid = ::OpenAPI::fromJsonValue(m_txs, json[QString("txs")]);
    m_txs_isSet = !json[QString("txs")].isNull() && m_txs_isValid;

    m_unconfirmed_balance_isValid = ::OpenAPI::fromJsonValue(m_unconfirmed_balance, json[QString("unconfirmedBalance")]);
    m_unconfirmed_balance_isSet = !json[QString("unconfirmedBalance")].isNull() && m_unconfirmed_balance_isValid;

    m_unconfirmed_txs_isValid = ::OpenAPI::fromJsonValue(m_unconfirmed_txs, json[QString("unconfirmedTxs")]);
    m_unconfirmed_txs_isSet = !json[QString("unconfirmedTxs")].isNull() && m_unconfirmed_txs_isValid;

    m_used_tokens_isValid = ::OpenAPI::fromJsonValue(m_used_tokens, json[QString("usedTokens")]);
    m_used_tokens_isSet = !json[QString("usedTokens")].isNull() && m_used_tokens_isValid;
}

QString OAIGetXpubV2_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetXpubV2_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_items_on_page_isSet) {
        obj.insert(QString("itemsOnPage"), ::OpenAPI::toJsonValue(m_items_on_page));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_secondary_value_isSet) {
        obj.insert(QString("secondaryValue"), ::OpenAPI::toJsonValue(m_secondary_value));
    }
    if (m_tokens.size() > 0) {
        obj.insert(QString("tokens"), ::OpenAPI::toJsonValue(m_tokens));
    }
    if (m_total_pages_isSet) {
        obj.insert(QString("totalPages"), ::OpenAPI::toJsonValue(m_total_pages));
    }
    if (m_total_received_isSet) {
        obj.insert(QString("totalReceived"), ::OpenAPI::toJsonValue(m_total_received));
    }
    if (m_total_sent_isSet) {
        obj.insert(QString("totalSent"), ::OpenAPI::toJsonValue(m_total_sent));
    }
    if (m_txids.size() > 0) {
        obj.insert(QString("txids"), ::OpenAPI::toJsonValue(m_txids));
    }
    if (m_txs_isSet) {
        obj.insert(QString("txs"), ::OpenAPI::toJsonValue(m_txs));
    }
    if (m_unconfirmed_balance_isSet) {
        obj.insert(QString("unconfirmedBalance"), ::OpenAPI::toJsonValue(m_unconfirmed_balance));
    }
    if (m_unconfirmed_txs_isSet) {
        obj.insert(QString("unconfirmedTxs"), ::OpenAPI::toJsonValue(m_unconfirmed_txs));
    }
    if (m_used_tokens_isSet) {
        obj.insert(QString("usedTokens"), ::OpenAPI::toJsonValue(m_used_tokens));
    }
    return obj;
}

QString OAIGetXpubV2_200_response::getAddress() const {
    return m_address;
}
void OAIGetXpubV2_200_response::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIGetXpubV2_200_response::is_address_Set() const{
    return m_address_isSet;
}

bool OAIGetXpubV2_200_response::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIGetXpubV2_200_response::getBalance() const {
    return m_balance;
}
void OAIGetXpubV2_200_response::setBalance(const QString &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIGetXpubV2_200_response::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIGetXpubV2_200_response::is_balance_Valid() const{
    return m_balance_isValid;
}

qint32 OAIGetXpubV2_200_response::getItemsOnPage() const {
    return m_items_on_page;
}
void OAIGetXpubV2_200_response::setItemsOnPage(const qint32 &items_on_page) {
    m_items_on_page = items_on_page;
    m_items_on_page_isSet = true;
}

bool OAIGetXpubV2_200_response::is_items_on_page_Set() const{
    return m_items_on_page_isSet;
}

bool OAIGetXpubV2_200_response::is_items_on_page_Valid() const{
    return m_items_on_page_isValid;
}

qint32 OAIGetXpubV2_200_response::getPage() const {
    return m_page;
}
void OAIGetXpubV2_200_response::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIGetXpubV2_200_response::is_page_Set() const{
    return m_page_isSet;
}

bool OAIGetXpubV2_200_response::is_page_Valid() const{
    return m_page_isValid;
}

double OAIGetXpubV2_200_response::getSecondaryValue() const {
    return m_secondary_value;
}
void OAIGetXpubV2_200_response::setSecondaryValue(const double &secondary_value) {
    m_secondary_value = secondary_value;
    m_secondary_value_isSet = true;
}

bool OAIGetXpubV2_200_response::is_secondary_value_Set() const{
    return m_secondary_value_isSet;
}

bool OAIGetXpubV2_200_response::is_secondary_value_Valid() const{
    return m_secondary_value_isValid;
}

QList<OAIGetXpubV2_200_response_tokens_inner> OAIGetXpubV2_200_response::getTokens() const {
    return m_tokens;
}
void OAIGetXpubV2_200_response::setTokens(const QList<OAIGetXpubV2_200_response_tokens_inner> &tokens) {
    m_tokens = tokens;
    m_tokens_isSet = true;
}

bool OAIGetXpubV2_200_response::is_tokens_Set() const{
    return m_tokens_isSet;
}

bool OAIGetXpubV2_200_response::is_tokens_Valid() const{
    return m_tokens_isValid;
}

qint32 OAIGetXpubV2_200_response::getTotalPages() const {
    return m_total_pages;
}
void OAIGetXpubV2_200_response::setTotalPages(const qint32 &total_pages) {
    m_total_pages = total_pages;
    m_total_pages_isSet = true;
}

bool OAIGetXpubV2_200_response::is_total_pages_Set() const{
    return m_total_pages_isSet;
}

bool OAIGetXpubV2_200_response::is_total_pages_Valid() const{
    return m_total_pages_isValid;
}

QString OAIGetXpubV2_200_response::getTotalReceived() const {
    return m_total_received;
}
void OAIGetXpubV2_200_response::setTotalReceived(const QString &total_received) {
    m_total_received = total_received;
    m_total_received_isSet = true;
}

bool OAIGetXpubV2_200_response::is_total_received_Set() const{
    return m_total_received_isSet;
}

bool OAIGetXpubV2_200_response::is_total_received_Valid() const{
    return m_total_received_isValid;
}

QString OAIGetXpubV2_200_response::getTotalSent() const {
    return m_total_sent;
}
void OAIGetXpubV2_200_response::setTotalSent(const QString &total_sent) {
    m_total_sent = total_sent;
    m_total_sent_isSet = true;
}

bool OAIGetXpubV2_200_response::is_total_sent_Set() const{
    return m_total_sent_isSet;
}

bool OAIGetXpubV2_200_response::is_total_sent_Valid() const{
    return m_total_sent_isValid;
}

QList<QString> OAIGetXpubV2_200_response::getTxids() const {
    return m_txids;
}
void OAIGetXpubV2_200_response::setTxids(const QList<QString> &txids) {
    m_txids = txids;
    m_txids_isSet = true;
}

bool OAIGetXpubV2_200_response::is_txids_Set() const{
    return m_txids_isSet;
}

bool OAIGetXpubV2_200_response::is_txids_Valid() const{
    return m_txids_isValid;
}

qint32 OAIGetXpubV2_200_response::getTxs() const {
    return m_txs;
}
void OAIGetXpubV2_200_response::setTxs(const qint32 &txs) {
    m_txs = txs;
    m_txs_isSet = true;
}

bool OAIGetXpubV2_200_response::is_txs_Set() const{
    return m_txs_isSet;
}

bool OAIGetXpubV2_200_response::is_txs_Valid() const{
    return m_txs_isValid;
}

QString OAIGetXpubV2_200_response::getUnconfirmedBalance() const {
    return m_unconfirmed_balance;
}
void OAIGetXpubV2_200_response::setUnconfirmedBalance(const QString &unconfirmed_balance) {
    m_unconfirmed_balance = unconfirmed_balance;
    m_unconfirmed_balance_isSet = true;
}

bool OAIGetXpubV2_200_response::is_unconfirmed_balance_Set() const{
    return m_unconfirmed_balance_isSet;
}

bool OAIGetXpubV2_200_response::is_unconfirmed_balance_Valid() const{
    return m_unconfirmed_balance_isValid;
}

qint32 OAIGetXpubV2_200_response::getUnconfirmedTxs() const {
    return m_unconfirmed_txs;
}
void OAIGetXpubV2_200_response::setUnconfirmedTxs(const qint32 &unconfirmed_txs) {
    m_unconfirmed_txs = unconfirmed_txs;
    m_unconfirmed_txs_isSet = true;
}

bool OAIGetXpubV2_200_response::is_unconfirmed_txs_Set() const{
    return m_unconfirmed_txs_isSet;
}

bool OAIGetXpubV2_200_response::is_unconfirmed_txs_Valid() const{
    return m_unconfirmed_txs_isValid;
}

qint32 OAIGetXpubV2_200_response::getUsedTokens() const {
    return m_used_tokens;
}
void OAIGetXpubV2_200_response::setUsedTokens(const qint32 &used_tokens) {
    m_used_tokens = used_tokens;
    m_used_tokens_isSet = true;
}

bool OAIGetXpubV2_200_response::is_used_tokens_Set() const{
    return m_used_tokens_isSet;
}

bool OAIGetXpubV2_200_response::is_used_tokens_Valid() const{
    return m_used_tokens_isValid;
}

bool OAIGetXpubV2_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_on_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_txs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unconfirmed_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unconfirmed_txs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_tokens_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetXpubV2_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
