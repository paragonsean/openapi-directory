/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNFTMetaV2_200_response_contractInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNFTMetaV2_200_response_contractInfo::OAIGetNFTMetaV2_200_response_contractInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNFTMetaV2_200_response_contractInfo::OAIGetNFTMetaV2_200_response_contractInfo() {
    this->initializeModel();
}

OAIGetNFTMetaV2_200_response_contractInfo::~OAIGetNFTMetaV2_200_response_contractInfo() {}

void OAIGetNFTMetaV2_200_response_contractInfo::initializeModel() {

    m_contract_isSet = false;
    m_contract_isValid = false;

    m_decimals_isSet = false;
    m_decimals_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_symbol_isSet = false;
    m_symbol_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGetNFTMetaV2_200_response_contractInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNFTMetaV2_200_response_contractInfo::fromJsonObject(QJsonObject json) {

    m_contract_isValid = ::OpenAPI::fromJsonValue(m_contract, json[QString("contract")]);
    m_contract_isSet = !json[QString("contract")].isNull() && m_contract_isValid;

    m_decimals_isValid = ::OpenAPI::fromJsonValue(m_decimals, json[QString("decimals")]);
    m_decimals_isSet = !json[QString("decimals")].isNull() && m_decimals_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_symbol_isValid = ::OpenAPI::fromJsonValue(m_symbol, json[QString("symbol")]);
    m_symbol_isSet = !json[QString("symbol")].isNull() && m_symbol_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGetNFTMetaV2_200_response_contractInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNFTMetaV2_200_response_contractInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_contract_isSet) {
        obj.insert(QString("contract"), ::OpenAPI::toJsonValue(m_contract));
    }
    if (m_decimals_isSet) {
        obj.insert(QString("decimals"), ::OpenAPI::toJsonValue(m_decimals));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_symbol_isSet) {
        obj.insert(QString("symbol"), ::OpenAPI::toJsonValue(m_symbol));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGetNFTMetaV2_200_response_contractInfo::getContract() const {
    return m_contract;
}
void OAIGetNFTMetaV2_200_response_contractInfo::setContract(const QString &contract) {
    m_contract = contract;
    m_contract_isSet = true;
}

bool OAIGetNFTMetaV2_200_response_contractInfo::is_contract_Set() const{
    return m_contract_isSet;
}

bool OAIGetNFTMetaV2_200_response_contractInfo::is_contract_Valid() const{
    return m_contract_isValid;
}

qint32 OAIGetNFTMetaV2_200_response_contractInfo::getDecimals() const {
    return m_decimals;
}
void OAIGetNFTMetaV2_200_response_contractInfo::setDecimals(const qint32 &decimals) {
    m_decimals = decimals;
    m_decimals_isSet = true;
}

bool OAIGetNFTMetaV2_200_response_contractInfo::is_decimals_Set() const{
    return m_decimals_isSet;
}

bool OAIGetNFTMetaV2_200_response_contractInfo::is_decimals_Valid() const{
    return m_decimals_isValid;
}

QString OAIGetNFTMetaV2_200_response_contractInfo::getName() const {
    return m_name;
}
void OAIGetNFTMetaV2_200_response_contractInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetNFTMetaV2_200_response_contractInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetNFTMetaV2_200_response_contractInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetNFTMetaV2_200_response_contractInfo::getSymbol() const {
    return m_symbol;
}
void OAIGetNFTMetaV2_200_response_contractInfo::setSymbol(const QString &symbol) {
    m_symbol = symbol;
    m_symbol_isSet = true;
}

bool OAIGetNFTMetaV2_200_response_contractInfo::is_symbol_Set() const{
    return m_symbol_isSet;
}

bool OAIGetNFTMetaV2_200_response_contractInfo::is_symbol_Valid() const{
    return m_symbol_isValid;
}

QString OAIGetNFTMetaV2_200_response_contractInfo::getType() const {
    return m_type;
}
void OAIGetNFTMetaV2_200_response_contractInfo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetNFTMetaV2_200_response_contractInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetNFTMetaV2_200_response_contractInfo::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGetNFTMetaV2_200_response_contractInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNFTMetaV2_200_response_contractInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
