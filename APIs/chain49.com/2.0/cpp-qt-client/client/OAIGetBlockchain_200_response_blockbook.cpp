/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBlockchain_200_response_blockbook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBlockchain_200_response_blockbook::OAIGetBlockchain_200_response_blockbook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBlockchain_200_response_blockbook::OAIGetBlockchain_200_response_blockbook() {
    this->initializeModel();
}

OAIGetBlockchain_200_response_blockbook::~OAIGetBlockchain_200_response_blockbook() {}

void OAIGetBlockchain_200_response_blockbook::initializeModel() {

    m_about_isSet = false;
    m_about_isValid = false;

    m_best_height_isSet = false;
    m_best_height_isValid = false;

    m_build_time_isSet = false;
    m_build_time_isValid = false;

    m_coin_isSet = false;
    m_coin_isValid = false;

    m_current_fiat_rates_time_isSet = false;
    m_current_fiat_rates_time_isValid = false;

    m_db_size_isSet = false;
    m_db_size_isValid = false;

    m_decimals_isSet = false;
    m_decimals_isValid = false;

    m_git_commit_isSet = false;
    m_git_commit_isValid = false;

    m_has_fiat_rates_isSet = false;
    m_has_fiat_rates_isValid = false;

    m_historical_fiat_rates_time_isSet = false;
    m_historical_fiat_rates_time_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_in_sync_isSet = false;
    m_in_sync_isValid = false;

    m_in_sync_mempool_isSet = false;
    m_in_sync_mempool_isValid = false;

    m_initial_sync_isSet = false;
    m_initial_sync_isValid = false;

    m_last_block_time_isSet = false;
    m_last_block_time_isValid = false;

    m_last_mempool_time_isSet = false;
    m_last_mempool_time_isValid = false;

    m_mempool_size_isSet = false;
    m_mempool_size_isValid = false;

    m_sync_mode_isSet = false;
    m_sync_mode_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGetBlockchain_200_response_blockbook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBlockchain_200_response_blockbook::fromJsonObject(QJsonObject json) {

    m_about_isValid = ::OpenAPI::fromJsonValue(m_about, json[QString("about")]);
    m_about_isSet = !json[QString("about")].isNull() && m_about_isValid;

    m_best_height_isValid = ::OpenAPI::fromJsonValue(m_best_height, json[QString("bestHeight")]);
    m_best_height_isSet = !json[QString("bestHeight")].isNull() && m_best_height_isValid;

    m_build_time_isValid = ::OpenAPI::fromJsonValue(m_build_time, json[QString("buildTime")]);
    m_build_time_isSet = !json[QString("buildTime")].isNull() && m_build_time_isValid;

    m_coin_isValid = ::OpenAPI::fromJsonValue(m_coin, json[QString("coin")]);
    m_coin_isSet = !json[QString("coin")].isNull() && m_coin_isValid;

    m_current_fiat_rates_time_isValid = ::OpenAPI::fromJsonValue(m_current_fiat_rates_time, json[QString("currentFiatRatesTime")]);
    m_current_fiat_rates_time_isSet = !json[QString("currentFiatRatesTime")].isNull() && m_current_fiat_rates_time_isValid;

    m_db_size_isValid = ::OpenAPI::fromJsonValue(m_db_size, json[QString("dbSize")]);
    m_db_size_isSet = !json[QString("dbSize")].isNull() && m_db_size_isValid;

    m_decimals_isValid = ::OpenAPI::fromJsonValue(m_decimals, json[QString("decimals")]);
    m_decimals_isSet = !json[QString("decimals")].isNull() && m_decimals_isValid;

    m_git_commit_isValid = ::OpenAPI::fromJsonValue(m_git_commit, json[QString("gitCommit")]);
    m_git_commit_isSet = !json[QString("gitCommit")].isNull() && m_git_commit_isValid;

    m_has_fiat_rates_isValid = ::OpenAPI::fromJsonValue(m_has_fiat_rates, json[QString("hasFiatRates")]);
    m_has_fiat_rates_isSet = !json[QString("hasFiatRates")].isNull() && m_has_fiat_rates_isValid;

    m_historical_fiat_rates_time_isValid = ::OpenAPI::fromJsonValue(m_historical_fiat_rates_time, json[QString("historicalFiatRatesTime")]);
    m_historical_fiat_rates_time_isSet = !json[QString("historicalFiatRatesTime")].isNull() && m_historical_fiat_rates_time_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_in_sync_isValid = ::OpenAPI::fromJsonValue(m_in_sync, json[QString("inSync")]);
    m_in_sync_isSet = !json[QString("inSync")].isNull() && m_in_sync_isValid;

    m_in_sync_mempool_isValid = ::OpenAPI::fromJsonValue(m_in_sync_mempool, json[QString("inSyncMempool")]);
    m_in_sync_mempool_isSet = !json[QString("inSyncMempool")].isNull() && m_in_sync_mempool_isValid;

    m_initial_sync_isValid = ::OpenAPI::fromJsonValue(m_initial_sync, json[QString("initialSync")]);
    m_initial_sync_isSet = !json[QString("initialSync")].isNull() && m_initial_sync_isValid;

    m_last_block_time_isValid = ::OpenAPI::fromJsonValue(m_last_block_time, json[QString("lastBlockTime")]);
    m_last_block_time_isSet = !json[QString("lastBlockTime")].isNull() && m_last_block_time_isValid;

    m_last_mempool_time_isValid = ::OpenAPI::fromJsonValue(m_last_mempool_time, json[QString("lastMempoolTime")]);
    m_last_mempool_time_isSet = !json[QString("lastMempoolTime")].isNull() && m_last_mempool_time_isValid;

    m_mempool_size_isValid = ::OpenAPI::fromJsonValue(m_mempool_size, json[QString("mempoolSize")]);
    m_mempool_size_isSet = !json[QString("mempoolSize")].isNull() && m_mempool_size_isValid;

    m_sync_mode_isValid = ::OpenAPI::fromJsonValue(m_sync_mode, json[QString("syncMode")]);
    m_sync_mode_isSet = !json[QString("syncMode")].isNull() && m_sync_mode_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGetBlockchain_200_response_blockbook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBlockchain_200_response_blockbook::asJsonObject() const {
    QJsonObject obj;
    if (m_about_isSet) {
        obj.insert(QString("about"), ::OpenAPI::toJsonValue(m_about));
    }
    if (m_best_height_isSet) {
        obj.insert(QString("bestHeight"), ::OpenAPI::toJsonValue(m_best_height));
    }
    if (m_build_time_isSet) {
        obj.insert(QString("buildTime"), ::OpenAPI::toJsonValue(m_build_time));
    }
    if (m_coin_isSet) {
        obj.insert(QString("coin"), ::OpenAPI::toJsonValue(m_coin));
    }
    if (m_current_fiat_rates_time_isSet) {
        obj.insert(QString("currentFiatRatesTime"), ::OpenAPI::toJsonValue(m_current_fiat_rates_time));
    }
    if (m_db_size_isSet) {
        obj.insert(QString("dbSize"), ::OpenAPI::toJsonValue(m_db_size));
    }
    if (m_decimals_isSet) {
        obj.insert(QString("decimals"), ::OpenAPI::toJsonValue(m_decimals));
    }
    if (m_git_commit_isSet) {
        obj.insert(QString("gitCommit"), ::OpenAPI::toJsonValue(m_git_commit));
    }
    if (m_has_fiat_rates_isSet) {
        obj.insert(QString("hasFiatRates"), ::OpenAPI::toJsonValue(m_has_fiat_rates));
    }
    if (m_historical_fiat_rates_time_isSet) {
        obj.insert(QString("historicalFiatRatesTime"), ::OpenAPI::toJsonValue(m_historical_fiat_rates_time));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_in_sync_isSet) {
        obj.insert(QString("inSync"), ::OpenAPI::toJsonValue(m_in_sync));
    }
    if (m_in_sync_mempool_isSet) {
        obj.insert(QString("inSyncMempool"), ::OpenAPI::toJsonValue(m_in_sync_mempool));
    }
    if (m_initial_sync_isSet) {
        obj.insert(QString("initialSync"), ::OpenAPI::toJsonValue(m_initial_sync));
    }
    if (m_last_block_time_isSet) {
        obj.insert(QString("lastBlockTime"), ::OpenAPI::toJsonValue(m_last_block_time));
    }
    if (m_last_mempool_time_isSet) {
        obj.insert(QString("lastMempoolTime"), ::OpenAPI::toJsonValue(m_last_mempool_time));
    }
    if (m_mempool_size_isSet) {
        obj.insert(QString("mempoolSize"), ::OpenAPI::toJsonValue(m_mempool_size));
    }
    if (m_sync_mode_isSet) {
        obj.insert(QString("syncMode"), ::OpenAPI::toJsonValue(m_sync_mode));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIGetBlockchain_200_response_blockbook::getAbout() const {
    return m_about;
}
void OAIGetBlockchain_200_response_blockbook::setAbout(const QString &about) {
    m_about = about;
    m_about_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_about_Set() const{
    return m_about_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_about_Valid() const{
    return m_about_isValid;
}

qint32 OAIGetBlockchain_200_response_blockbook::getBestHeight() const {
    return m_best_height;
}
void OAIGetBlockchain_200_response_blockbook::setBestHeight(const qint32 &best_height) {
    m_best_height = best_height;
    m_best_height_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_best_height_Set() const{
    return m_best_height_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_best_height_Valid() const{
    return m_best_height_isValid;
}

QString OAIGetBlockchain_200_response_blockbook::getBuildTime() const {
    return m_build_time;
}
void OAIGetBlockchain_200_response_blockbook::setBuildTime(const QString &build_time) {
    m_build_time = build_time;
    m_build_time_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_build_time_Set() const{
    return m_build_time_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_build_time_Valid() const{
    return m_build_time_isValid;
}

QString OAIGetBlockchain_200_response_blockbook::getCoin() const {
    return m_coin;
}
void OAIGetBlockchain_200_response_blockbook::setCoin(const QString &coin) {
    m_coin = coin;
    m_coin_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_coin_Set() const{
    return m_coin_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_coin_Valid() const{
    return m_coin_isValid;
}

QString OAIGetBlockchain_200_response_blockbook::getCurrentFiatRatesTime() const {
    return m_current_fiat_rates_time;
}
void OAIGetBlockchain_200_response_blockbook::setCurrentFiatRatesTime(const QString &current_fiat_rates_time) {
    m_current_fiat_rates_time = current_fiat_rates_time;
    m_current_fiat_rates_time_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_current_fiat_rates_time_Set() const{
    return m_current_fiat_rates_time_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_current_fiat_rates_time_Valid() const{
    return m_current_fiat_rates_time_isValid;
}

qint32 OAIGetBlockchain_200_response_blockbook::getDbSize() const {
    return m_db_size;
}
void OAIGetBlockchain_200_response_blockbook::setDbSize(const qint32 &db_size) {
    m_db_size = db_size;
    m_db_size_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_db_size_Set() const{
    return m_db_size_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_db_size_Valid() const{
    return m_db_size_isValid;
}

qint32 OAIGetBlockchain_200_response_blockbook::getDecimals() const {
    return m_decimals;
}
void OAIGetBlockchain_200_response_blockbook::setDecimals(const qint32 &decimals) {
    m_decimals = decimals;
    m_decimals_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_decimals_Set() const{
    return m_decimals_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_decimals_Valid() const{
    return m_decimals_isValid;
}

QString OAIGetBlockchain_200_response_blockbook::getGitCommit() const {
    return m_git_commit;
}
void OAIGetBlockchain_200_response_blockbook::setGitCommit(const QString &git_commit) {
    m_git_commit = git_commit;
    m_git_commit_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_git_commit_Set() const{
    return m_git_commit_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_git_commit_Valid() const{
    return m_git_commit_isValid;
}

bool OAIGetBlockchain_200_response_blockbook::isHasFiatRates() const {
    return m_has_fiat_rates;
}
void OAIGetBlockchain_200_response_blockbook::setHasFiatRates(const bool &has_fiat_rates) {
    m_has_fiat_rates = has_fiat_rates;
    m_has_fiat_rates_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_has_fiat_rates_Set() const{
    return m_has_fiat_rates_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_has_fiat_rates_Valid() const{
    return m_has_fiat_rates_isValid;
}

QString OAIGetBlockchain_200_response_blockbook::getHistoricalFiatRatesTime() const {
    return m_historical_fiat_rates_time;
}
void OAIGetBlockchain_200_response_blockbook::setHistoricalFiatRatesTime(const QString &historical_fiat_rates_time) {
    m_historical_fiat_rates_time = historical_fiat_rates_time;
    m_historical_fiat_rates_time_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_historical_fiat_rates_time_Set() const{
    return m_historical_fiat_rates_time_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_historical_fiat_rates_time_Valid() const{
    return m_historical_fiat_rates_time_isValid;
}

QString OAIGetBlockchain_200_response_blockbook::getHost() const {
    return m_host;
}
void OAIGetBlockchain_200_response_blockbook::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_host_Set() const{
    return m_host_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_host_Valid() const{
    return m_host_isValid;
}

bool OAIGetBlockchain_200_response_blockbook::isInSync() const {
    return m_in_sync;
}
void OAIGetBlockchain_200_response_blockbook::setInSync(const bool &in_sync) {
    m_in_sync = in_sync;
    m_in_sync_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_in_sync_Set() const{
    return m_in_sync_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_in_sync_Valid() const{
    return m_in_sync_isValid;
}

bool OAIGetBlockchain_200_response_blockbook::isInSyncMempool() const {
    return m_in_sync_mempool;
}
void OAIGetBlockchain_200_response_blockbook::setInSyncMempool(const bool &in_sync_mempool) {
    m_in_sync_mempool = in_sync_mempool;
    m_in_sync_mempool_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_in_sync_mempool_Set() const{
    return m_in_sync_mempool_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_in_sync_mempool_Valid() const{
    return m_in_sync_mempool_isValid;
}

bool OAIGetBlockchain_200_response_blockbook::isInitialSync() const {
    return m_initial_sync;
}
void OAIGetBlockchain_200_response_blockbook::setInitialSync(const bool &initial_sync) {
    m_initial_sync = initial_sync;
    m_initial_sync_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_initial_sync_Set() const{
    return m_initial_sync_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_initial_sync_Valid() const{
    return m_initial_sync_isValid;
}

QString OAIGetBlockchain_200_response_blockbook::getLastBlockTime() const {
    return m_last_block_time;
}
void OAIGetBlockchain_200_response_blockbook::setLastBlockTime(const QString &last_block_time) {
    m_last_block_time = last_block_time;
    m_last_block_time_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_last_block_time_Set() const{
    return m_last_block_time_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_last_block_time_Valid() const{
    return m_last_block_time_isValid;
}

QString OAIGetBlockchain_200_response_blockbook::getLastMempoolTime() const {
    return m_last_mempool_time;
}
void OAIGetBlockchain_200_response_blockbook::setLastMempoolTime(const QString &last_mempool_time) {
    m_last_mempool_time = last_mempool_time;
    m_last_mempool_time_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_last_mempool_time_Set() const{
    return m_last_mempool_time_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_last_mempool_time_Valid() const{
    return m_last_mempool_time_isValid;
}

qint32 OAIGetBlockchain_200_response_blockbook::getMempoolSize() const {
    return m_mempool_size;
}
void OAIGetBlockchain_200_response_blockbook::setMempoolSize(const qint32 &mempool_size) {
    m_mempool_size = mempool_size;
    m_mempool_size_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_mempool_size_Set() const{
    return m_mempool_size_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_mempool_size_Valid() const{
    return m_mempool_size_isValid;
}

bool OAIGetBlockchain_200_response_blockbook::isSyncMode() const {
    return m_sync_mode;
}
void OAIGetBlockchain_200_response_blockbook::setSyncMode(const bool &sync_mode) {
    m_sync_mode = sync_mode;
    m_sync_mode_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_sync_mode_Set() const{
    return m_sync_mode_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_sync_mode_Valid() const{
    return m_sync_mode_isValid;
}

QString OAIGetBlockchain_200_response_blockbook::getVersion() const {
    return m_version;
}
void OAIGetBlockchain_200_response_blockbook::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGetBlockchain_200_response_blockbook::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGetBlockchain_200_response_blockbook::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGetBlockchain_200_response_blockbook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_about_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_best_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_fiat_rates_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_db_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_fiat_rates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_historical_fiat_rates_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_sync_mempool_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_block_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_mempool_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mempool_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBlockchain_200_response_blockbook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
