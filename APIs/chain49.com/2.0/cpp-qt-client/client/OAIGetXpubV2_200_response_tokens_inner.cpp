/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetXpubV2_200_response_tokens_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetXpubV2_200_response_tokens_inner::OAIGetXpubV2_200_response_tokens_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetXpubV2_200_response_tokens_inner::OAIGetXpubV2_200_response_tokens_inner() {
    this->initializeModel();
}

OAIGetXpubV2_200_response_tokens_inner::~OAIGetXpubV2_200_response_tokens_inner() {}

void OAIGetXpubV2_200_response_tokens_inner::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_decimals_isSet = false;
    m_decimals_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_total_received_isSet = false;
    m_total_received_isValid = false;

    m_total_sent_isSet = false;
    m_total_sent_isValid = false;

    m_transfers_isSet = false;
    m_transfers_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGetXpubV2_200_response_tokens_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetXpubV2_200_response_tokens_inner::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_decimals_isValid = ::OpenAPI::fromJsonValue(m_decimals, json[QString("decimals")]);
    m_decimals_isSet = !json[QString("decimals")].isNull() && m_decimals_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_total_received_isValid = ::OpenAPI::fromJsonValue(m_total_received, json[QString("totalReceived")]);
    m_total_received_isSet = !json[QString("totalReceived")].isNull() && m_total_received_isValid;

    m_total_sent_isValid = ::OpenAPI::fromJsonValue(m_total_sent, json[QString("totalSent")]);
    m_total_sent_isSet = !json[QString("totalSent")].isNull() && m_total_sent_isValid;

    m_transfers_isValid = ::OpenAPI::fromJsonValue(m_transfers, json[QString("transfers")]);
    m_transfers_isSet = !json[QString("transfers")].isNull() && m_transfers_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGetXpubV2_200_response_tokens_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetXpubV2_200_response_tokens_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_decimals_isSet) {
        obj.insert(QString("decimals"), ::OpenAPI::toJsonValue(m_decimals));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_total_received_isSet) {
        obj.insert(QString("totalReceived"), ::OpenAPI::toJsonValue(m_total_received));
    }
    if (m_total_sent_isSet) {
        obj.insert(QString("totalSent"), ::OpenAPI::toJsonValue(m_total_sent));
    }
    if (m_transfers_isSet) {
        obj.insert(QString("transfers"), ::OpenAPI::toJsonValue(m_transfers));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGetXpubV2_200_response_tokens_inner::getBalance() const {
    return m_balance;
}
void OAIGetXpubV2_200_response_tokens_inner::setBalance(const QString &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIGetXpubV2_200_response_tokens_inner::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIGetXpubV2_200_response_tokens_inner::is_balance_Valid() const{
    return m_balance_isValid;
}

qint32 OAIGetXpubV2_200_response_tokens_inner::getDecimals() const {
    return m_decimals;
}
void OAIGetXpubV2_200_response_tokens_inner::setDecimals(const qint32 &decimals) {
    m_decimals = decimals;
    m_decimals_isSet = true;
}

bool OAIGetXpubV2_200_response_tokens_inner::is_decimals_Set() const{
    return m_decimals_isSet;
}

bool OAIGetXpubV2_200_response_tokens_inner::is_decimals_Valid() const{
    return m_decimals_isValid;
}

QString OAIGetXpubV2_200_response_tokens_inner::getName() const {
    return m_name;
}
void OAIGetXpubV2_200_response_tokens_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetXpubV2_200_response_tokens_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetXpubV2_200_response_tokens_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetXpubV2_200_response_tokens_inner::getPath() const {
    return m_path;
}
void OAIGetXpubV2_200_response_tokens_inner::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGetXpubV2_200_response_tokens_inner::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGetXpubV2_200_response_tokens_inner::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIGetXpubV2_200_response_tokens_inner::getTotalReceived() const {
    return m_total_received;
}
void OAIGetXpubV2_200_response_tokens_inner::setTotalReceived(const QString &total_received) {
    m_total_received = total_received;
    m_total_received_isSet = true;
}

bool OAIGetXpubV2_200_response_tokens_inner::is_total_received_Set() const{
    return m_total_received_isSet;
}

bool OAIGetXpubV2_200_response_tokens_inner::is_total_received_Valid() const{
    return m_total_received_isValid;
}

QString OAIGetXpubV2_200_response_tokens_inner::getTotalSent() const {
    return m_total_sent;
}
void OAIGetXpubV2_200_response_tokens_inner::setTotalSent(const QString &total_sent) {
    m_total_sent = total_sent;
    m_total_sent_isSet = true;
}

bool OAIGetXpubV2_200_response_tokens_inner::is_total_sent_Set() const{
    return m_total_sent_isSet;
}

bool OAIGetXpubV2_200_response_tokens_inner::is_total_sent_Valid() const{
    return m_total_sent_isValid;
}

qint32 OAIGetXpubV2_200_response_tokens_inner::getTransfers() const {
    return m_transfers;
}
void OAIGetXpubV2_200_response_tokens_inner::setTransfers(const qint32 &transfers) {
    m_transfers = transfers;
    m_transfers_isSet = true;
}

bool OAIGetXpubV2_200_response_tokens_inner::is_transfers_Set() const{
    return m_transfers_isSet;
}

bool OAIGetXpubV2_200_response_tokens_inner::is_transfers_Valid() const{
    return m_transfers_isValid;
}

QString OAIGetXpubV2_200_response_tokens_inner::getType() const {
    return m_type;
}
void OAIGetXpubV2_200_response_tokens_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetXpubV2_200_response_tokens_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetXpubV2_200_response_tokens_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGetXpubV2_200_response_tokens_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetXpubV2_200_response_tokens_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
