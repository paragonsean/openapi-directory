/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAddressesApi_H
#define OAI_OAIAddressesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetBalanceHistoryV2_200_response_inner.h"
#include "OAIGetXpubV2_200_response.h"
#include "OAIObject.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAddressesApi : public QObject {
    Q_OBJECT

public:
    OAIAddressesApi(const int timeOut = 0);
    ~OAIAddressesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  blockchain QString [required]
    * @param[in]  address QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  from_block qint32 [optional]
    * @param[in]  to_block qint32 [optional]
    * @param[in]  details QString [optional]
    * @param[in]  contract QString [optional]
    * @param[in]  secondary QString [optional]
    */
    virtual void getAddressV2(const QString &blockchain, const QString &address, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &from_block = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_block = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &details = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contract = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &secondary = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  blockchain QString [required]
    * @param[in]  address_or_xpub QString [required]
    * @param[in]  from_date QString [optional]
    * @param[in]  to_date QString [optional]
    * @param[in]  fiatcurrency QString [optional]
    * @param[in]  group_by double [optional]
    */
    virtual void getBalanceHistoryV2(const QString &blockchain, const QString &address_or_xpub, const ::OpenAPI::OptionalParam<QString> &from_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fiatcurrency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &group_by = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  blockchain QString [required]
    * @param[in]  address_or_xpub QString [required]
    * @param[in]  confirmed bool [optional]
    */
    virtual void getUTXOV2(const QString &blockchain, const QString &address_or_xpub, const ::OpenAPI::OptionalParam<bool> &confirmed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  blockchain QString [required]
    * @param[in]  xpub QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  from_block qint32 [optional]
    * @param[in]  to_block qint32 [optional]
    * @param[in]  details QString [optional]
    * @param[in]  tokens QString [optional]
    * @param[in]  secondary QString [optional]
    */
    virtual void getXpubV2(const QString &blockchain, const QString &xpub, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &from_block = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_block = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &details = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tokens = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &secondary = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAddressV2Callback(OAIHttpRequestWorker *worker);
    void getBalanceHistoryV2Callback(OAIHttpRequestWorker *worker);
    void getUTXOV2Callback(OAIHttpRequestWorker *worker);
    void getXpubV2Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAddressV2Signal(OAIObject summary);
    void getBalanceHistoryV2Signal(QList<OAIGetBalanceHistoryV2_200_response_inner> summary);
    void getUTXOV2Signal(QList<QJsonValue> summary);
    void getXpubV2Signal(OAIGetXpubV2_200_response summary);


    void getAddressV2SignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getBalanceHistoryV2SignalFull(OAIHttpRequestWorker *worker, QList<OAIGetBalanceHistoryV2_200_response_inner> summary);
    void getUTXOV2SignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void getXpubV2SignalFull(OAIHttpRequestWorker *worker, OAIGetXpubV2_200_response summary);

    Q_DECL_DEPRECATED_X("Use getAddressV2SignalError() instead")
    void getAddressV2SignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressV2SignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBalanceHistoryV2SignalError() instead")
    void getBalanceHistoryV2SignalE(QList<OAIGetBalanceHistoryV2_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBalanceHistoryV2SignalError(QList<OAIGetBalanceHistoryV2_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUTXOV2SignalError() instead")
    void getUTXOV2SignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUTXOV2SignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getXpubV2SignalError() instead")
    void getXpubV2SignalE(OAIGetXpubV2_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getXpubV2SignalError(OAIGetXpubV2_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAddressV2SignalErrorFull() instead")
    void getAddressV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBalanceHistoryV2SignalErrorFull() instead")
    void getBalanceHistoryV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBalanceHistoryV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUTXOV2SignalErrorFull() instead")
    void getUTXOV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUTXOV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getXpubV2SignalErrorFull() instead")
    void getXpubV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getXpubV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
