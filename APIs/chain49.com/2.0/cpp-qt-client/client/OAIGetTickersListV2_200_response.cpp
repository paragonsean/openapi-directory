/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTickersListV2_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTickersListV2_200_response::OAIGetTickersListV2_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTickersListV2_200_response::OAIGetTickersListV2_200_response() {
    this->initializeModel();
}

OAIGetTickersListV2_200_response::~OAIGetTickersListV2_200_response() {}

void OAIGetTickersListV2_200_response::initializeModel() {

    m_available_currencies_isSet = false;
    m_available_currencies_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;
}

void OAIGetTickersListV2_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTickersListV2_200_response::fromJsonObject(QJsonObject json) {

    m_available_currencies_isValid = ::OpenAPI::fromJsonValue(m_available_currencies, json[QString("available_currencies")]);
    m_available_currencies_isSet = !json[QString("available_currencies")].isNull() && m_available_currencies_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;
}

QString OAIGetTickersListV2_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTickersListV2_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_available_currencies.size() > 0) {
        obj.insert(QString("available_currencies"), ::OpenAPI::toJsonValue(m_available_currencies));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    return obj;
}

QList<QString> OAIGetTickersListV2_200_response::getAvailableCurrencies() const {
    return m_available_currencies;
}
void OAIGetTickersListV2_200_response::setAvailableCurrencies(const QList<QString> &available_currencies) {
    m_available_currencies = available_currencies;
    m_available_currencies_isSet = true;
}

bool OAIGetTickersListV2_200_response::is_available_currencies_Set() const{
    return m_available_currencies_isSet;
}

bool OAIGetTickersListV2_200_response::is_available_currencies_Valid() const{
    return m_available_currencies_isValid;
}

qint32 OAIGetTickersListV2_200_response::getTs() const {
    return m_ts;
}
void OAIGetTickersListV2_200_response::setTs(const qint32 &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIGetTickersListV2_200_response::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIGetTickersListV2_200_response::is_ts_Valid() const{
    return m_ts_isValid;
}

bool OAIGetTickersListV2_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_currencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTickersListV2_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
