/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNFTMetaV2_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNFTMetaV2_200_response::OAIGetNFTMetaV2_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNFTMetaV2_200_response::OAIGetNFTMetaV2_200_response() {
    this->initializeModel();
}

OAIGetNFTMetaV2_200_response::~OAIGetNFTMetaV2_200_response() {}

void OAIGetNFTMetaV2_200_response::initializeModel() {

    m_contract_info_isSet = false;
    m_contract_info_isValid = false;

    m_token_id_isSet = false;
    m_token_id_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIGetNFTMetaV2_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNFTMetaV2_200_response::fromJsonObject(QJsonObject json) {

    m_contract_info_isValid = ::OpenAPI::fromJsonValue(m_contract_info, json[QString("contractInfo")]);
    m_contract_info_isSet = !json[QString("contractInfo")].isNull() && m_contract_info_isValid;

    m_token_id_isValid = ::OpenAPI::fromJsonValue(m_token_id, json[QString("tokenId")]);
    m_token_id_isSet = !json[QString("tokenId")].isNull() && m_token_id_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIGetNFTMetaV2_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNFTMetaV2_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_contract_info.isSet()) {
        obj.insert(QString("contractInfo"), ::OpenAPI::toJsonValue(m_contract_info));
    }
    if (m_token_id_isSet) {
        obj.insert(QString("tokenId"), ::OpenAPI::toJsonValue(m_token_id));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

OAIGetNFTMetaV2_200_response_contractInfo OAIGetNFTMetaV2_200_response::getContractInfo() const {
    return m_contract_info;
}
void OAIGetNFTMetaV2_200_response::setContractInfo(const OAIGetNFTMetaV2_200_response_contractInfo &contract_info) {
    m_contract_info = contract_info;
    m_contract_info_isSet = true;
}

bool OAIGetNFTMetaV2_200_response::is_contract_info_Set() const{
    return m_contract_info_isSet;
}

bool OAIGetNFTMetaV2_200_response::is_contract_info_Valid() const{
    return m_contract_info_isValid;
}

QString OAIGetNFTMetaV2_200_response::getTokenId() const {
    return m_token_id;
}
void OAIGetNFTMetaV2_200_response::setTokenId(const QString &token_id) {
    m_token_id = token_id;
    m_token_id_isSet = true;
}

bool OAIGetNFTMetaV2_200_response::is_token_id_Set() const{
    return m_token_id_isSet;
}

bool OAIGetNFTMetaV2_200_response::is_token_id_Valid() const{
    return m_token_id_isValid;
}

QString OAIGetNFTMetaV2_200_response::getUri() const {
    return m_uri;
}
void OAIGetNFTMetaV2_200_response::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIGetNFTMetaV2_200_response::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIGetNFTMetaV2_200_response::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIGetNFTMetaV2_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contract_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNFTMetaV2_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
