/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBlockV2_200_response_txs_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBlockV2_200_response_txs_inner::OAIGetBlockV2_200_response_txs_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBlockV2_200_response_txs_inner::OAIGetBlockV2_200_response_txs_inner() {
    this->initializeModel();
}

OAIGetBlockV2_200_response_txs_inner::~OAIGetBlockV2_200_response_txs_inner() {}

void OAIGetBlockV2_200_response_txs_inner::initializeModel() {

    m_block_hash_isSet = false;
    m_block_hash_isValid = false;

    m_block_height_isSet = false;
    m_block_height_isValid = false;

    m_block_time_isSet = false;
    m_block_time_isValid = false;

    m_confirmations_isSet = false;
    m_confirmations_isValid = false;

    m_fees_isSet = false;
    m_fees_isValid = false;

    m_txid_isSet = false;
    m_txid_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_value_in_isSet = false;
    m_value_in_isValid = false;

    m_vin_isSet = false;
    m_vin_isValid = false;

    m_vout_isSet = false;
    m_vout_isValid = false;
}

void OAIGetBlockV2_200_response_txs_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBlockV2_200_response_txs_inner::fromJsonObject(QJsonObject json) {

    m_block_hash_isValid = ::OpenAPI::fromJsonValue(m_block_hash, json[QString("blockHash")]);
    m_block_hash_isSet = !json[QString("blockHash")].isNull() && m_block_hash_isValid;

    m_block_height_isValid = ::OpenAPI::fromJsonValue(m_block_height, json[QString("blockHeight")]);
    m_block_height_isSet = !json[QString("blockHeight")].isNull() && m_block_height_isValid;

    m_block_time_isValid = ::OpenAPI::fromJsonValue(m_block_time, json[QString("blockTime")]);
    m_block_time_isSet = !json[QString("blockTime")].isNull() && m_block_time_isValid;

    m_confirmations_isValid = ::OpenAPI::fromJsonValue(m_confirmations, json[QString("confirmations")]);
    m_confirmations_isSet = !json[QString("confirmations")].isNull() && m_confirmations_isValid;

    m_fees_isValid = ::OpenAPI::fromJsonValue(m_fees, json[QString("fees")]);
    m_fees_isSet = !json[QString("fees")].isNull() && m_fees_isValid;

    m_txid_isValid = ::OpenAPI::fromJsonValue(m_txid, json[QString("txid")]);
    m_txid_isSet = !json[QString("txid")].isNull() && m_txid_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_value_in_isValid = ::OpenAPI::fromJsonValue(m_value_in, json[QString("valueIn")]);
    m_value_in_isSet = !json[QString("valueIn")].isNull() && m_value_in_isValid;

    m_vin_isValid = ::OpenAPI::fromJsonValue(m_vin, json[QString("vin")]);
    m_vin_isSet = !json[QString("vin")].isNull() && m_vin_isValid;

    m_vout_isValid = ::OpenAPI::fromJsonValue(m_vout, json[QString("vout")]);
    m_vout_isSet = !json[QString("vout")].isNull() && m_vout_isValid;
}

QString OAIGetBlockV2_200_response_txs_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBlockV2_200_response_txs_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_block_hash_isSet) {
        obj.insert(QString("blockHash"), ::OpenAPI::toJsonValue(m_block_hash));
    }
    if (m_block_height_isSet) {
        obj.insert(QString("blockHeight"), ::OpenAPI::toJsonValue(m_block_height));
    }
    if (m_block_time_isSet) {
        obj.insert(QString("blockTime"), ::OpenAPI::toJsonValue(m_block_time));
    }
    if (m_confirmations_isSet) {
        obj.insert(QString("confirmations"), ::OpenAPI::toJsonValue(m_confirmations));
    }
    if (m_fees_isSet) {
        obj.insert(QString("fees"), ::OpenAPI::toJsonValue(m_fees));
    }
    if (m_txid_isSet) {
        obj.insert(QString("txid"), ::OpenAPI::toJsonValue(m_txid));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_value_in_isSet) {
        obj.insert(QString("valueIn"), ::OpenAPI::toJsonValue(m_value_in));
    }
    if (m_vin.size() > 0) {
        obj.insert(QString("vin"), ::OpenAPI::toJsonValue(m_vin));
    }
    if (m_vout.size() > 0) {
        obj.insert(QString("vout"), ::OpenAPI::toJsonValue(m_vout));
    }
    return obj;
}

QString OAIGetBlockV2_200_response_txs_inner::getBlockHash() const {
    return m_block_hash;
}
void OAIGetBlockV2_200_response_txs_inner::setBlockHash(const QString &block_hash) {
    m_block_hash = block_hash;
    m_block_hash_isSet = true;
}

bool OAIGetBlockV2_200_response_txs_inner::is_block_hash_Set() const{
    return m_block_hash_isSet;
}

bool OAIGetBlockV2_200_response_txs_inner::is_block_hash_Valid() const{
    return m_block_hash_isValid;
}

qint32 OAIGetBlockV2_200_response_txs_inner::getBlockHeight() const {
    return m_block_height;
}
void OAIGetBlockV2_200_response_txs_inner::setBlockHeight(const qint32 &block_height) {
    m_block_height = block_height;
    m_block_height_isSet = true;
}

bool OAIGetBlockV2_200_response_txs_inner::is_block_height_Set() const{
    return m_block_height_isSet;
}

bool OAIGetBlockV2_200_response_txs_inner::is_block_height_Valid() const{
    return m_block_height_isValid;
}

qint32 OAIGetBlockV2_200_response_txs_inner::getBlockTime() const {
    return m_block_time;
}
void OAIGetBlockV2_200_response_txs_inner::setBlockTime(const qint32 &block_time) {
    m_block_time = block_time;
    m_block_time_isSet = true;
}

bool OAIGetBlockV2_200_response_txs_inner::is_block_time_Set() const{
    return m_block_time_isSet;
}

bool OAIGetBlockV2_200_response_txs_inner::is_block_time_Valid() const{
    return m_block_time_isValid;
}

qint32 OAIGetBlockV2_200_response_txs_inner::getConfirmations() const {
    return m_confirmations;
}
void OAIGetBlockV2_200_response_txs_inner::setConfirmations(const qint32 &confirmations) {
    m_confirmations = confirmations;
    m_confirmations_isSet = true;
}

bool OAIGetBlockV2_200_response_txs_inner::is_confirmations_Set() const{
    return m_confirmations_isSet;
}

bool OAIGetBlockV2_200_response_txs_inner::is_confirmations_Valid() const{
    return m_confirmations_isValid;
}

QString OAIGetBlockV2_200_response_txs_inner::getFees() const {
    return m_fees;
}
void OAIGetBlockV2_200_response_txs_inner::setFees(const QString &fees) {
    m_fees = fees;
    m_fees_isSet = true;
}

bool OAIGetBlockV2_200_response_txs_inner::is_fees_Set() const{
    return m_fees_isSet;
}

bool OAIGetBlockV2_200_response_txs_inner::is_fees_Valid() const{
    return m_fees_isValid;
}

QString OAIGetBlockV2_200_response_txs_inner::getTxid() const {
    return m_txid;
}
void OAIGetBlockV2_200_response_txs_inner::setTxid(const QString &txid) {
    m_txid = txid;
    m_txid_isSet = true;
}

bool OAIGetBlockV2_200_response_txs_inner::is_txid_Set() const{
    return m_txid_isSet;
}

bool OAIGetBlockV2_200_response_txs_inner::is_txid_Valid() const{
    return m_txid_isValid;
}

QString OAIGetBlockV2_200_response_txs_inner::getValue() const {
    return m_value;
}
void OAIGetBlockV2_200_response_txs_inner::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGetBlockV2_200_response_txs_inner::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGetBlockV2_200_response_txs_inner::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIGetBlockV2_200_response_txs_inner::getValueIn() const {
    return m_value_in;
}
void OAIGetBlockV2_200_response_txs_inner::setValueIn(const QString &value_in) {
    m_value_in = value_in;
    m_value_in_isSet = true;
}

bool OAIGetBlockV2_200_response_txs_inner::is_value_in_Set() const{
    return m_value_in_isSet;
}

bool OAIGetBlockV2_200_response_txs_inner::is_value_in_Valid() const{
    return m_value_in_isValid;
}

QList<OAIGetBlockV2_200_response_txs_inner_vin_inner> OAIGetBlockV2_200_response_txs_inner::getVin() const {
    return m_vin;
}
void OAIGetBlockV2_200_response_txs_inner::setVin(const QList<OAIGetBlockV2_200_response_txs_inner_vin_inner> &vin) {
    m_vin = vin;
    m_vin_isSet = true;
}

bool OAIGetBlockV2_200_response_txs_inner::is_vin_Set() const{
    return m_vin_isSet;
}

bool OAIGetBlockV2_200_response_txs_inner::is_vin_Valid() const{
    return m_vin_isValid;
}

QList<OAIGetBlockV2_200_response_txs_inner_vout_inner> OAIGetBlockV2_200_response_txs_inner::getVout() const {
    return m_vout;
}
void OAIGetBlockV2_200_response_txs_inner::setVout(const QList<OAIGetBlockV2_200_response_txs_inner_vout_inner> &vout) {
    m_vout = vout;
    m_vout_isSet = true;
}

bool OAIGetBlockV2_200_response_txs_inner::is_vout_Set() const{
    return m_vout_isSet;
}

bool OAIGetBlockV2_200_response_txs_inner::is_vout_Valid() const{
    return m_vout_isValid;
}

bool OAIGetBlockV2_200_response_txs_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_block_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vin.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vout.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBlockV2_200_response_txs_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
