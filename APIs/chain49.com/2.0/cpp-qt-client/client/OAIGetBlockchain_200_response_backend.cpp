/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBlockchain_200_response_backend.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBlockchain_200_response_backend::OAIGetBlockchain_200_response_backend(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBlockchain_200_response_backend::OAIGetBlockchain_200_response_backend() {
    this->initializeModel();
}

OAIGetBlockchain_200_response_backend::~OAIGetBlockchain_200_response_backend() {}

void OAIGetBlockchain_200_response_backend::initializeModel() {

    m_best_block_hash_isSet = false;
    m_best_block_hash_isValid = false;

    m_blocks_isSet = false;
    m_blocks_isValid = false;

    m_chain_isSet = false;
    m_chain_isValid = false;

    m_difficulty_isSet = false;
    m_difficulty_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_protocol_version_isSet = false;
    m_protocol_version_isValid = false;

    m_size_on_disk_isSet = false;
    m_size_on_disk_isValid = false;

    m_subversion_isSet = false;
    m_subversion_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGetBlockchain_200_response_backend::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBlockchain_200_response_backend::fromJsonObject(QJsonObject json) {

    m_best_block_hash_isValid = ::OpenAPI::fromJsonValue(m_best_block_hash, json[QString("bestBlockHash")]);
    m_best_block_hash_isSet = !json[QString("bestBlockHash")].isNull() && m_best_block_hash_isValid;

    m_blocks_isValid = ::OpenAPI::fromJsonValue(m_blocks, json[QString("blocks")]);
    m_blocks_isSet = !json[QString("blocks")].isNull() && m_blocks_isValid;

    m_chain_isValid = ::OpenAPI::fromJsonValue(m_chain, json[QString("chain")]);
    m_chain_isSet = !json[QString("chain")].isNull() && m_chain_isValid;

    m_difficulty_isValid = ::OpenAPI::fromJsonValue(m_difficulty, json[QString("difficulty")]);
    m_difficulty_isSet = !json[QString("difficulty")].isNull() && m_difficulty_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_protocol_version, json[QString("protocolVersion")]);
    m_protocol_version_isSet = !json[QString("protocolVersion")].isNull() && m_protocol_version_isValid;

    m_size_on_disk_isValid = ::OpenAPI::fromJsonValue(m_size_on_disk, json[QString("sizeOnDisk")]);
    m_size_on_disk_isSet = !json[QString("sizeOnDisk")].isNull() && m_size_on_disk_isValid;

    m_subversion_isValid = ::OpenAPI::fromJsonValue(m_subversion, json[QString("subversion")]);
    m_subversion_isSet = !json[QString("subversion")].isNull() && m_subversion_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGetBlockchain_200_response_backend::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBlockchain_200_response_backend::asJsonObject() const {
    QJsonObject obj;
    if (m_best_block_hash_isSet) {
        obj.insert(QString("bestBlockHash"), ::OpenAPI::toJsonValue(m_best_block_hash));
    }
    if (m_blocks_isSet) {
        obj.insert(QString("blocks"), ::OpenAPI::toJsonValue(m_blocks));
    }
    if (m_chain_isSet) {
        obj.insert(QString("chain"), ::OpenAPI::toJsonValue(m_chain));
    }
    if (m_difficulty_isSet) {
        obj.insert(QString("difficulty"), ::OpenAPI::toJsonValue(m_difficulty));
    }
    if (m_headers_isSet) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_protocol_version_isSet) {
        obj.insert(QString("protocolVersion"), ::OpenAPI::toJsonValue(m_protocol_version));
    }
    if (m_size_on_disk_isSet) {
        obj.insert(QString("sizeOnDisk"), ::OpenAPI::toJsonValue(m_size_on_disk));
    }
    if (m_subversion_isSet) {
        obj.insert(QString("subversion"), ::OpenAPI::toJsonValue(m_subversion));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIGetBlockchain_200_response_backend::getBestBlockHash() const {
    return m_best_block_hash;
}
void OAIGetBlockchain_200_response_backend::setBestBlockHash(const QString &best_block_hash) {
    m_best_block_hash = best_block_hash;
    m_best_block_hash_isSet = true;
}

bool OAIGetBlockchain_200_response_backend::is_best_block_hash_Set() const{
    return m_best_block_hash_isSet;
}

bool OAIGetBlockchain_200_response_backend::is_best_block_hash_Valid() const{
    return m_best_block_hash_isValid;
}

qint32 OAIGetBlockchain_200_response_backend::getBlocks() const {
    return m_blocks;
}
void OAIGetBlockchain_200_response_backend::setBlocks(const qint32 &blocks) {
    m_blocks = blocks;
    m_blocks_isSet = true;
}

bool OAIGetBlockchain_200_response_backend::is_blocks_Set() const{
    return m_blocks_isSet;
}

bool OAIGetBlockchain_200_response_backend::is_blocks_Valid() const{
    return m_blocks_isValid;
}

QString OAIGetBlockchain_200_response_backend::getChain() const {
    return m_chain;
}
void OAIGetBlockchain_200_response_backend::setChain(const QString &chain) {
    m_chain = chain;
    m_chain_isSet = true;
}

bool OAIGetBlockchain_200_response_backend::is_chain_Set() const{
    return m_chain_isSet;
}

bool OAIGetBlockchain_200_response_backend::is_chain_Valid() const{
    return m_chain_isValid;
}

QString OAIGetBlockchain_200_response_backend::getDifficulty() const {
    return m_difficulty;
}
void OAIGetBlockchain_200_response_backend::setDifficulty(const QString &difficulty) {
    m_difficulty = difficulty;
    m_difficulty_isSet = true;
}

bool OAIGetBlockchain_200_response_backend::is_difficulty_Set() const{
    return m_difficulty_isSet;
}

bool OAIGetBlockchain_200_response_backend::is_difficulty_Valid() const{
    return m_difficulty_isValid;
}

qint32 OAIGetBlockchain_200_response_backend::getHeaders() const {
    return m_headers;
}
void OAIGetBlockchain_200_response_backend::setHeaders(const qint32 &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIGetBlockchain_200_response_backend::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIGetBlockchain_200_response_backend::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIGetBlockchain_200_response_backend::getProtocolVersion() const {
    return m_protocol_version;
}
void OAIGetBlockchain_200_response_backend::setProtocolVersion(const QString &protocol_version) {
    m_protocol_version = protocol_version;
    m_protocol_version_isSet = true;
}

bool OAIGetBlockchain_200_response_backend::is_protocol_version_Set() const{
    return m_protocol_version_isSet;
}

bool OAIGetBlockchain_200_response_backend::is_protocol_version_Valid() const{
    return m_protocol_version_isValid;
}

qint32 OAIGetBlockchain_200_response_backend::getSizeOnDisk() const {
    return m_size_on_disk;
}
void OAIGetBlockchain_200_response_backend::setSizeOnDisk(const qint32 &size_on_disk) {
    m_size_on_disk = size_on_disk;
    m_size_on_disk_isSet = true;
}

bool OAIGetBlockchain_200_response_backend::is_size_on_disk_Set() const{
    return m_size_on_disk_isSet;
}

bool OAIGetBlockchain_200_response_backend::is_size_on_disk_Valid() const{
    return m_size_on_disk_isValid;
}

QString OAIGetBlockchain_200_response_backend::getSubversion() const {
    return m_subversion;
}
void OAIGetBlockchain_200_response_backend::setSubversion(const QString &subversion) {
    m_subversion = subversion;
    m_subversion_isSet = true;
}

bool OAIGetBlockchain_200_response_backend::is_subversion_Set() const{
    return m_subversion_isSet;
}

bool OAIGetBlockchain_200_response_backend::is_subversion_Valid() const{
    return m_subversion_isValid;
}

QString OAIGetBlockchain_200_response_backend::getVersion() const {
    return m_version;
}
void OAIGetBlockchain_200_response_backend::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGetBlockchain_200_response_backend::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGetBlockchain_200_response_backend::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGetBlockchain_200_response_backend::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_best_block_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_difficulty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_on_disk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subversion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBlockchain_200_response_backend::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
