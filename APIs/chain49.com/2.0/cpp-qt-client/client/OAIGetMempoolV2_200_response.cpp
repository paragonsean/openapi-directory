/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMempoolV2_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMempoolV2_200_response::OAIGetMempoolV2_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMempoolV2_200_response::OAIGetMempoolV2_200_response() {
    this->initializeModel();
}

OAIGetMempoolV2_200_response::~OAIGetMempoolV2_200_response() {}

void OAIGetMempoolV2_200_response::initializeModel() {

    m_items_on_page_isSet = false;
    m_items_on_page_isValid = false;

    m_mempool_isSet = false;
    m_mempool_isValid = false;

    m_mempool_size_isSet = false;
    m_mempool_size_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_total_pages_isSet = false;
    m_total_pages_isValid = false;
}

void OAIGetMempoolV2_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMempoolV2_200_response::fromJsonObject(QJsonObject json) {

    m_items_on_page_isValid = ::OpenAPI::fromJsonValue(m_items_on_page, json[QString("itemsOnPage")]);
    m_items_on_page_isSet = !json[QString("itemsOnPage")].isNull() && m_items_on_page_isValid;

    m_mempool_isValid = ::OpenAPI::fromJsonValue(m_mempool, json[QString("mempool")]);
    m_mempool_isSet = !json[QString("mempool")].isNull() && m_mempool_isValid;

    m_mempool_size_isValid = ::OpenAPI::fromJsonValue(m_mempool_size, json[QString("mempoolSize")]);
    m_mempool_size_isSet = !json[QString("mempoolSize")].isNull() && m_mempool_size_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_total_pages_isValid = ::OpenAPI::fromJsonValue(m_total_pages, json[QString("totalPages")]);
    m_total_pages_isSet = !json[QString("totalPages")].isNull() && m_total_pages_isValid;
}

QString OAIGetMempoolV2_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMempoolV2_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_items_on_page_isSet) {
        obj.insert(QString("itemsOnPage"), ::OpenAPI::toJsonValue(m_items_on_page));
    }
    if (m_mempool.size() > 0) {
        obj.insert(QString("mempool"), ::OpenAPI::toJsonValue(m_mempool));
    }
    if (m_mempool_size_isSet) {
        obj.insert(QString("mempoolSize"), ::OpenAPI::toJsonValue(m_mempool_size));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_total_pages_isSet) {
        obj.insert(QString("totalPages"), ::OpenAPI::toJsonValue(m_total_pages));
    }
    return obj;
}

qint32 OAIGetMempoolV2_200_response::getItemsOnPage() const {
    return m_items_on_page;
}
void OAIGetMempoolV2_200_response::setItemsOnPage(const qint32 &items_on_page) {
    m_items_on_page = items_on_page;
    m_items_on_page_isSet = true;
}

bool OAIGetMempoolV2_200_response::is_items_on_page_Set() const{
    return m_items_on_page_isSet;
}

bool OAIGetMempoolV2_200_response::is_items_on_page_Valid() const{
    return m_items_on_page_isValid;
}

QList<OAIGetMempoolV2_200_response_mempool_inner> OAIGetMempoolV2_200_response::getMempool() const {
    return m_mempool;
}
void OAIGetMempoolV2_200_response::setMempool(const QList<OAIGetMempoolV2_200_response_mempool_inner> &mempool) {
    m_mempool = mempool;
    m_mempool_isSet = true;
}

bool OAIGetMempoolV2_200_response::is_mempool_Set() const{
    return m_mempool_isSet;
}

bool OAIGetMempoolV2_200_response::is_mempool_Valid() const{
    return m_mempool_isValid;
}

qint32 OAIGetMempoolV2_200_response::getMempoolSize() const {
    return m_mempool_size;
}
void OAIGetMempoolV2_200_response::setMempoolSize(const qint32 &mempool_size) {
    m_mempool_size = mempool_size;
    m_mempool_size_isSet = true;
}

bool OAIGetMempoolV2_200_response::is_mempool_size_Set() const{
    return m_mempool_size_isSet;
}

bool OAIGetMempoolV2_200_response::is_mempool_size_Valid() const{
    return m_mempool_size_isValid;
}

qint32 OAIGetMempoolV2_200_response::getPage() const {
    return m_page;
}
void OAIGetMempoolV2_200_response::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIGetMempoolV2_200_response::is_page_Set() const{
    return m_page_isSet;
}

bool OAIGetMempoolV2_200_response::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAIGetMempoolV2_200_response::getTotalPages() const {
    return m_total_pages;
}
void OAIGetMempoolV2_200_response::setTotalPages(const qint32 &total_pages) {
    m_total_pages = total_pages;
    m_total_pages_isSet = true;
}

bool OAIGetMempoolV2_200_response::is_total_pages_Set() const{
    return m_total_pages_isSet;
}

bool OAIGetMempoolV2_200_response::is_total_pages_Valid() const{
    return m_total_pages_isValid;
}

bool OAIGetMempoolV2_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items_on_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mempool.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mempool_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMempoolV2_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
