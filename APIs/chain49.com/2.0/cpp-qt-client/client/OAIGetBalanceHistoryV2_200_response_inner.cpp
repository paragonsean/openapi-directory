/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBalanceHistoryV2_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBalanceHistoryV2_200_response_inner::OAIGetBalanceHistoryV2_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBalanceHistoryV2_200_response_inner::OAIGetBalanceHistoryV2_200_response_inner() {
    this->initializeModel();
}

OAIGetBalanceHistoryV2_200_response_inner::~OAIGetBalanceHistoryV2_200_response_inner() {}

void OAIGetBalanceHistoryV2_200_response_inner::initializeModel() {

    m_rates_isSet = false;
    m_rates_isValid = false;

    m_received_isSet = false;
    m_received_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;

    m_sent_to_self_isSet = false;
    m_sent_to_self_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_txs_isSet = false;
    m_txs_isValid = false;
}

void OAIGetBalanceHistoryV2_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBalanceHistoryV2_200_response_inner::fromJsonObject(QJsonObject json) {

    m_rates_isValid = ::OpenAPI::fromJsonValue(m_rates, json[QString("rates")]);
    m_rates_isSet = !json[QString("rates")].isNull() && m_rates_isValid;

    m_received_isValid = ::OpenAPI::fromJsonValue(m_received, json[QString("received")]);
    m_received_isSet = !json[QString("received")].isNull() && m_received_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("sent")]);
    m_sent_isSet = !json[QString("sent")].isNull() && m_sent_isValid;

    m_sent_to_self_isValid = ::OpenAPI::fromJsonValue(m_sent_to_self, json[QString("sentToSelf")]);
    m_sent_to_self_isSet = !json[QString("sentToSelf")].isNull() && m_sent_to_self_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_txs_isValid = ::OpenAPI::fromJsonValue(m_txs, json[QString("txs")]);
    m_txs_isSet = !json[QString("txs")].isNull() && m_txs_isValid;
}

QString OAIGetBalanceHistoryV2_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBalanceHistoryV2_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_rates_isSet) {
        obj.insert(QString("rates"), ::OpenAPI::toJsonValue(m_rates));
    }
    if (m_received_isSet) {
        obj.insert(QString("received"), ::OpenAPI::toJsonValue(m_received));
    }
    if (m_sent_isSet) {
        obj.insert(QString("sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    if (m_sent_to_self_isSet) {
        obj.insert(QString("sentToSelf"), ::OpenAPI::toJsonValue(m_sent_to_self));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_txs_isSet) {
        obj.insert(QString("txs"), ::OpenAPI::toJsonValue(m_txs));
    }
    return obj;
}

OAIObject OAIGetBalanceHistoryV2_200_response_inner::getRates() const {
    return m_rates;
}
void OAIGetBalanceHistoryV2_200_response_inner::setRates(const OAIObject &rates) {
    m_rates = rates;
    m_rates_isSet = true;
}

bool OAIGetBalanceHistoryV2_200_response_inner::is_rates_Set() const{
    return m_rates_isSet;
}

bool OAIGetBalanceHistoryV2_200_response_inner::is_rates_Valid() const{
    return m_rates_isValid;
}

QString OAIGetBalanceHistoryV2_200_response_inner::getReceived() const {
    return m_received;
}
void OAIGetBalanceHistoryV2_200_response_inner::setReceived(const QString &received) {
    m_received = received;
    m_received_isSet = true;
}

bool OAIGetBalanceHistoryV2_200_response_inner::is_received_Set() const{
    return m_received_isSet;
}

bool OAIGetBalanceHistoryV2_200_response_inner::is_received_Valid() const{
    return m_received_isValid;
}

QString OAIGetBalanceHistoryV2_200_response_inner::getSent() const {
    return m_sent;
}
void OAIGetBalanceHistoryV2_200_response_inner::setSent(const QString &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAIGetBalanceHistoryV2_200_response_inner::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAIGetBalanceHistoryV2_200_response_inner::is_sent_Valid() const{
    return m_sent_isValid;
}

QString OAIGetBalanceHistoryV2_200_response_inner::getSentToSelf() const {
    return m_sent_to_self;
}
void OAIGetBalanceHistoryV2_200_response_inner::setSentToSelf(const QString &sent_to_self) {
    m_sent_to_self = sent_to_self;
    m_sent_to_self_isSet = true;
}

bool OAIGetBalanceHistoryV2_200_response_inner::is_sent_to_self_Set() const{
    return m_sent_to_self_isSet;
}

bool OAIGetBalanceHistoryV2_200_response_inner::is_sent_to_self_Valid() const{
    return m_sent_to_self_isValid;
}

qint32 OAIGetBalanceHistoryV2_200_response_inner::getTime() const {
    return m_time;
}
void OAIGetBalanceHistoryV2_200_response_inner::setTime(const qint32 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIGetBalanceHistoryV2_200_response_inner::is_time_Set() const{
    return m_time_isSet;
}

bool OAIGetBalanceHistoryV2_200_response_inner::is_time_Valid() const{
    return m_time_isValid;
}

qint32 OAIGetBalanceHistoryV2_200_response_inner::getTxs() const {
    return m_txs;
}
void OAIGetBalanceHistoryV2_200_response_inner::setTxs(const qint32 &txs) {
    m_txs = txs;
    m_txs_isSet = true;
}

bool OAIGetBalanceHistoryV2_200_response_inner::is_txs_Set() const{
    return m_txs_isSet;
}

bool OAIGetBalanceHistoryV2_200_response_inner::is_txs_Valid() const{
    return m_txs_isValid;
}

bool OAIGetBalanceHistoryV2_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_to_self_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBalanceHistoryV2_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
