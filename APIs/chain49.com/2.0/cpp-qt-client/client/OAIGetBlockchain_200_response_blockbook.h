/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetBlockchain_200_response_blockbook.h
 *
 * 
 */

#ifndef OAIGetBlockchain_200_response_blockbook_H
#define OAIGetBlockchain_200_response_blockbook_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetBlockchain_200_response_blockbook : public OAIObject {
public:
    OAIGetBlockchain_200_response_blockbook();
    OAIGetBlockchain_200_response_blockbook(QString json);
    ~OAIGetBlockchain_200_response_blockbook() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAbout() const;
    void setAbout(const QString &about);
    bool is_about_Set() const;
    bool is_about_Valid() const;

    qint32 getBestHeight() const;
    void setBestHeight(const qint32 &best_height);
    bool is_best_height_Set() const;
    bool is_best_height_Valid() const;

    QString getBuildTime() const;
    void setBuildTime(const QString &build_time);
    bool is_build_time_Set() const;
    bool is_build_time_Valid() const;

    QString getCoin() const;
    void setCoin(const QString &coin);
    bool is_coin_Set() const;
    bool is_coin_Valid() const;

    QString getCurrentFiatRatesTime() const;
    void setCurrentFiatRatesTime(const QString &current_fiat_rates_time);
    bool is_current_fiat_rates_time_Set() const;
    bool is_current_fiat_rates_time_Valid() const;

    qint32 getDbSize() const;
    void setDbSize(const qint32 &db_size);
    bool is_db_size_Set() const;
    bool is_db_size_Valid() const;

    qint32 getDecimals() const;
    void setDecimals(const qint32 &decimals);
    bool is_decimals_Set() const;
    bool is_decimals_Valid() const;

    QString getGitCommit() const;
    void setGitCommit(const QString &git_commit);
    bool is_git_commit_Set() const;
    bool is_git_commit_Valid() const;

    bool isHasFiatRates() const;
    void setHasFiatRates(const bool &has_fiat_rates);
    bool is_has_fiat_rates_Set() const;
    bool is_has_fiat_rates_Valid() const;

    QString getHistoricalFiatRatesTime() const;
    void setHistoricalFiatRatesTime(const QString &historical_fiat_rates_time);
    bool is_historical_fiat_rates_time_Set() const;
    bool is_historical_fiat_rates_time_Valid() const;

    QString getHost() const;
    void setHost(const QString &host);
    bool is_host_Set() const;
    bool is_host_Valid() const;

    bool isInSync() const;
    void setInSync(const bool &in_sync);
    bool is_in_sync_Set() const;
    bool is_in_sync_Valid() const;

    bool isInSyncMempool() const;
    void setInSyncMempool(const bool &in_sync_mempool);
    bool is_in_sync_mempool_Set() const;
    bool is_in_sync_mempool_Valid() const;

    bool isInitialSync() const;
    void setInitialSync(const bool &initial_sync);
    bool is_initial_sync_Set() const;
    bool is_initial_sync_Valid() const;

    QString getLastBlockTime() const;
    void setLastBlockTime(const QString &last_block_time);
    bool is_last_block_time_Set() const;
    bool is_last_block_time_Valid() const;

    QString getLastMempoolTime() const;
    void setLastMempoolTime(const QString &last_mempool_time);
    bool is_last_mempool_time_Set() const;
    bool is_last_mempool_time_Valid() const;

    qint32 getMempoolSize() const;
    void setMempoolSize(const qint32 &mempool_size);
    bool is_mempool_size_Set() const;
    bool is_mempool_size_Valid() const;

    bool isSyncMode() const;
    void setSyncMode(const bool &sync_mode);
    bool is_sync_mode_Set() const;
    bool is_sync_mode_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_about;
    bool m_about_isSet;
    bool m_about_isValid;

    qint32 m_best_height;
    bool m_best_height_isSet;
    bool m_best_height_isValid;

    QString m_build_time;
    bool m_build_time_isSet;
    bool m_build_time_isValid;

    QString m_coin;
    bool m_coin_isSet;
    bool m_coin_isValid;

    QString m_current_fiat_rates_time;
    bool m_current_fiat_rates_time_isSet;
    bool m_current_fiat_rates_time_isValid;

    qint32 m_db_size;
    bool m_db_size_isSet;
    bool m_db_size_isValid;

    qint32 m_decimals;
    bool m_decimals_isSet;
    bool m_decimals_isValid;

    QString m_git_commit;
    bool m_git_commit_isSet;
    bool m_git_commit_isValid;

    bool m_has_fiat_rates;
    bool m_has_fiat_rates_isSet;
    bool m_has_fiat_rates_isValid;

    QString m_historical_fiat_rates_time;
    bool m_historical_fiat_rates_time_isSet;
    bool m_historical_fiat_rates_time_isValid;

    QString m_host;
    bool m_host_isSet;
    bool m_host_isValid;

    bool m_in_sync;
    bool m_in_sync_isSet;
    bool m_in_sync_isValid;

    bool m_in_sync_mempool;
    bool m_in_sync_mempool_isSet;
    bool m_in_sync_mempool_isValid;

    bool m_initial_sync;
    bool m_initial_sync_isSet;
    bool m_initial_sync_isValid;

    QString m_last_block_time;
    bool m_last_block_time_isSet;
    bool m_last_block_time_isValid;

    QString m_last_mempool_time;
    bool m_last_mempool_time_isSet;
    bool m_last_mempool_time_isValid;

    qint32 m_mempool_size;
    bool m_mempool_size_isSet;
    bool m_mempool_size_isValid;

    bool m_sync_mode;
    bool m_sync_mode_isSet;
    bool m_sync_mode_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetBlockchain_200_response_blockbook)

#endif // OAIGetBlockchain_200_response_blockbook_H
