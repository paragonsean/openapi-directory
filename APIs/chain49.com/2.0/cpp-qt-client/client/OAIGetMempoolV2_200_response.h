/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetMempoolV2_200_response.h
 *
 * 
 */

#ifndef OAIGetMempoolV2_200_response_H
#define OAIGetMempoolV2_200_response_H

#include <QJsonObject>

#include "OAIGetMempoolV2_200_response_mempool_inner.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetMempoolV2_200_response_mempool_inner;

class OAIGetMempoolV2_200_response : public OAIObject {
public:
    OAIGetMempoolV2_200_response();
    OAIGetMempoolV2_200_response(QString json);
    ~OAIGetMempoolV2_200_response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getItemsOnPage() const;
    void setItemsOnPage(const qint32 &items_on_page);
    bool is_items_on_page_Set() const;
    bool is_items_on_page_Valid() const;

    QList<OAIGetMempoolV2_200_response_mempool_inner> getMempool() const;
    void setMempool(const QList<OAIGetMempoolV2_200_response_mempool_inner> &mempool);
    bool is_mempool_Set() const;
    bool is_mempool_Valid() const;

    qint32 getMempoolSize() const;
    void setMempoolSize(const qint32 &mempool_size);
    bool is_mempool_size_Set() const;
    bool is_mempool_size_Valid() const;

    qint32 getPage() const;
    void setPage(const qint32 &page);
    bool is_page_Set() const;
    bool is_page_Valid() const;

    qint32 getTotalPages() const;
    void setTotalPages(const qint32 &total_pages);
    bool is_total_pages_Set() const;
    bool is_total_pages_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_items_on_page;
    bool m_items_on_page_isSet;
    bool m_items_on_page_isValid;

    QList<OAIGetMempoolV2_200_response_mempool_inner> m_mempool;
    bool m_mempool_isSet;
    bool m_mempool_isValid;

    qint32 m_mempool_size;
    bool m_mempool_size_isSet;
    bool m_mempool_size_isValid;

    qint32 m_page;
    bool m_page_isSet;
    bool m_page_isValid;

    qint32 m_total_pages;
    bool m_total_pages_isSet;
    bool m_total_pages_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetMempoolV2_200_response)

#endif // OAIGetMempoolV2_200_response_H
