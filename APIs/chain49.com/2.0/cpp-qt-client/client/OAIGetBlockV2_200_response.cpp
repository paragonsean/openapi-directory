/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetBlockV2_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetBlockV2_200_response::OAIGetBlockV2_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetBlockV2_200_response::OAIGetBlockV2_200_response() {
    this->initializeModel();
}

OAIGetBlockV2_200_response::~OAIGetBlockV2_200_response() {}

void OAIGetBlockV2_200_response::initializeModel() {

    m_bits_isSet = false;
    m_bits_isValid = false;

    m_confirmations_isSet = false;
    m_confirmations_isValid = false;

    m_difficulty_isSet = false;
    m_difficulty_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_items_on_page_isSet = false;
    m_items_on_page_isValid = false;

    m_merkle_root_isSet = false;
    m_merkle_root_isValid = false;

    m_next_block_hash_isSet = false;
    m_next_block_hash_isValid = false;

    m_nonce_isSet = false;
    m_nonce_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_previous_block_hash_isSet = false;
    m_previous_block_hash_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_total_pages_isSet = false;
    m_total_pages_isValid = false;

    m_tx_count_isSet = false;
    m_tx_count_isValid = false;

    m_txs_isSet = false;
    m_txs_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGetBlockV2_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetBlockV2_200_response::fromJsonObject(QJsonObject json) {

    m_bits_isValid = ::OpenAPI::fromJsonValue(m_bits, json[QString("bits")]);
    m_bits_isSet = !json[QString("bits")].isNull() && m_bits_isValid;

    m_confirmations_isValid = ::OpenAPI::fromJsonValue(m_confirmations, json[QString("confirmations")]);
    m_confirmations_isSet = !json[QString("confirmations")].isNull() && m_confirmations_isValid;

    m_difficulty_isValid = ::OpenAPI::fromJsonValue(m_difficulty, json[QString("difficulty")]);
    m_difficulty_isSet = !json[QString("difficulty")].isNull() && m_difficulty_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_items_on_page_isValid = ::OpenAPI::fromJsonValue(m_items_on_page, json[QString("itemsOnPage")]);
    m_items_on_page_isSet = !json[QString("itemsOnPage")].isNull() && m_items_on_page_isValid;

    m_merkle_root_isValid = ::OpenAPI::fromJsonValue(m_merkle_root, json[QString("merkleRoot")]);
    m_merkle_root_isSet = !json[QString("merkleRoot")].isNull() && m_merkle_root_isValid;

    m_next_block_hash_isValid = ::OpenAPI::fromJsonValue(m_next_block_hash, json[QString("nextBlockHash")]);
    m_next_block_hash_isSet = !json[QString("nextBlockHash")].isNull() && m_next_block_hash_isValid;

    m_nonce_isValid = ::OpenAPI::fromJsonValue(m_nonce, json[QString("nonce")]);
    m_nonce_isSet = !json[QString("nonce")].isNull() && m_nonce_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_previous_block_hash_isValid = ::OpenAPI::fromJsonValue(m_previous_block_hash, json[QString("previousBlockHash")]);
    m_previous_block_hash_isSet = !json[QString("previousBlockHash")].isNull() && m_previous_block_hash_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_total_pages_isValid = ::OpenAPI::fromJsonValue(m_total_pages, json[QString("totalPages")]);
    m_total_pages_isSet = !json[QString("totalPages")].isNull() && m_total_pages_isValid;

    m_tx_count_isValid = ::OpenAPI::fromJsonValue(m_tx_count, json[QString("txCount")]);
    m_tx_count_isSet = !json[QString("txCount")].isNull() && m_tx_count_isValid;

    m_txs_isValid = ::OpenAPI::fromJsonValue(m_txs, json[QString("txs")]);
    m_txs_isSet = !json[QString("txs")].isNull() && m_txs_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGetBlockV2_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetBlockV2_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_bits_isSet) {
        obj.insert(QString("bits"), ::OpenAPI::toJsonValue(m_bits));
    }
    if (m_confirmations_isSet) {
        obj.insert(QString("confirmations"), ::OpenAPI::toJsonValue(m_confirmations));
    }
    if (m_difficulty_isSet) {
        obj.insert(QString("difficulty"), ::OpenAPI::toJsonValue(m_difficulty));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_items_on_page_isSet) {
        obj.insert(QString("itemsOnPage"), ::OpenAPI::toJsonValue(m_items_on_page));
    }
    if (m_merkle_root_isSet) {
        obj.insert(QString("merkleRoot"), ::OpenAPI::toJsonValue(m_merkle_root));
    }
    if (m_next_block_hash_isSet) {
        obj.insert(QString("nextBlockHash"), ::OpenAPI::toJsonValue(m_next_block_hash));
    }
    if (m_nonce_isSet) {
        obj.insert(QString("nonce"), ::OpenAPI::toJsonValue(m_nonce));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_previous_block_hash_isSet) {
        obj.insert(QString("previousBlockHash"), ::OpenAPI::toJsonValue(m_previous_block_hash));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_total_pages_isSet) {
        obj.insert(QString("totalPages"), ::OpenAPI::toJsonValue(m_total_pages));
    }
    if (m_tx_count_isSet) {
        obj.insert(QString("txCount"), ::OpenAPI::toJsonValue(m_tx_count));
    }
    if (m_txs.size() > 0) {
        obj.insert(QString("txs"), ::OpenAPI::toJsonValue(m_txs));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIGetBlockV2_200_response::getBits() const {
    return m_bits;
}
void OAIGetBlockV2_200_response::setBits(const QString &bits) {
    m_bits = bits;
    m_bits_isSet = true;
}

bool OAIGetBlockV2_200_response::is_bits_Set() const{
    return m_bits_isSet;
}

bool OAIGetBlockV2_200_response::is_bits_Valid() const{
    return m_bits_isValid;
}

qint32 OAIGetBlockV2_200_response::getConfirmations() const {
    return m_confirmations;
}
void OAIGetBlockV2_200_response::setConfirmations(const qint32 &confirmations) {
    m_confirmations = confirmations;
    m_confirmations_isSet = true;
}

bool OAIGetBlockV2_200_response::is_confirmations_Set() const{
    return m_confirmations_isSet;
}

bool OAIGetBlockV2_200_response::is_confirmations_Valid() const{
    return m_confirmations_isValid;
}

QString OAIGetBlockV2_200_response::getDifficulty() const {
    return m_difficulty;
}
void OAIGetBlockV2_200_response::setDifficulty(const QString &difficulty) {
    m_difficulty = difficulty;
    m_difficulty_isSet = true;
}

bool OAIGetBlockV2_200_response::is_difficulty_Set() const{
    return m_difficulty_isSet;
}

bool OAIGetBlockV2_200_response::is_difficulty_Valid() const{
    return m_difficulty_isValid;
}

QString OAIGetBlockV2_200_response::getHash() const {
    return m_hash;
}
void OAIGetBlockV2_200_response::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIGetBlockV2_200_response::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIGetBlockV2_200_response::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIGetBlockV2_200_response::getHeight() const {
    return m_height;
}
void OAIGetBlockV2_200_response::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIGetBlockV2_200_response::is_height_Set() const{
    return m_height_isSet;
}

bool OAIGetBlockV2_200_response::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIGetBlockV2_200_response::getItemsOnPage() const {
    return m_items_on_page;
}
void OAIGetBlockV2_200_response::setItemsOnPage(const qint32 &items_on_page) {
    m_items_on_page = items_on_page;
    m_items_on_page_isSet = true;
}

bool OAIGetBlockV2_200_response::is_items_on_page_Set() const{
    return m_items_on_page_isSet;
}

bool OAIGetBlockV2_200_response::is_items_on_page_Valid() const{
    return m_items_on_page_isValid;
}

QString OAIGetBlockV2_200_response::getMerkleRoot() const {
    return m_merkle_root;
}
void OAIGetBlockV2_200_response::setMerkleRoot(const QString &merkle_root) {
    m_merkle_root = merkle_root;
    m_merkle_root_isSet = true;
}

bool OAIGetBlockV2_200_response::is_merkle_root_Set() const{
    return m_merkle_root_isSet;
}

bool OAIGetBlockV2_200_response::is_merkle_root_Valid() const{
    return m_merkle_root_isValid;
}

QString OAIGetBlockV2_200_response::getNextBlockHash() const {
    return m_next_block_hash;
}
void OAIGetBlockV2_200_response::setNextBlockHash(const QString &next_block_hash) {
    m_next_block_hash = next_block_hash;
    m_next_block_hash_isSet = true;
}

bool OAIGetBlockV2_200_response::is_next_block_hash_Set() const{
    return m_next_block_hash_isSet;
}

bool OAIGetBlockV2_200_response::is_next_block_hash_Valid() const{
    return m_next_block_hash_isValid;
}

QString OAIGetBlockV2_200_response::getNonce() const {
    return m_nonce;
}
void OAIGetBlockV2_200_response::setNonce(const QString &nonce) {
    m_nonce = nonce;
    m_nonce_isSet = true;
}

bool OAIGetBlockV2_200_response::is_nonce_Set() const{
    return m_nonce_isSet;
}

bool OAIGetBlockV2_200_response::is_nonce_Valid() const{
    return m_nonce_isValid;
}

qint32 OAIGetBlockV2_200_response::getPage() const {
    return m_page;
}
void OAIGetBlockV2_200_response::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIGetBlockV2_200_response::is_page_Set() const{
    return m_page_isSet;
}

bool OAIGetBlockV2_200_response::is_page_Valid() const{
    return m_page_isValid;
}

QString OAIGetBlockV2_200_response::getPreviousBlockHash() const {
    return m_previous_block_hash;
}
void OAIGetBlockV2_200_response::setPreviousBlockHash(const QString &previous_block_hash) {
    m_previous_block_hash = previous_block_hash;
    m_previous_block_hash_isSet = true;
}

bool OAIGetBlockV2_200_response::is_previous_block_hash_Set() const{
    return m_previous_block_hash_isSet;
}

bool OAIGetBlockV2_200_response::is_previous_block_hash_Valid() const{
    return m_previous_block_hash_isValid;
}

qint32 OAIGetBlockV2_200_response::getSize() const {
    return m_size;
}
void OAIGetBlockV2_200_response::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIGetBlockV2_200_response::is_size_Set() const{
    return m_size_isSet;
}

bool OAIGetBlockV2_200_response::is_size_Valid() const{
    return m_size_isValid;
}

qint32 OAIGetBlockV2_200_response::getTime() const {
    return m_time;
}
void OAIGetBlockV2_200_response::setTime(const qint32 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIGetBlockV2_200_response::is_time_Set() const{
    return m_time_isSet;
}

bool OAIGetBlockV2_200_response::is_time_Valid() const{
    return m_time_isValid;
}

qint32 OAIGetBlockV2_200_response::getTotalPages() const {
    return m_total_pages;
}
void OAIGetBlockV2_200_response::setTotalPages(const qint32 &total_pages) {
    m_total_pages = total_pages;
    m_total_pages_isSet = true;
}

bool OAIGetBlockV2_200_response::is_total_pages_Set() const{
    return m_total_pages_isSet;
}

bool OAIGetBlockV2_200_response::is_total_pages_Valid() const{
    return m_total_pages_isValid;
}

qint32 OAIGetBlockV2_200_response::getTxCount() const {
    return m_tx_count;
}
void OAIGetBlockV2_200_response::setTxCount(const qint32 &tx_count) {
    m_tx_count = tx_count;
    m_tx_count_isSet = true;
}

bool OAIGetBlockV2_200_response::is_tx_count_Set() const{
    return m_tx_count_isSet;
}

bool OAIGetBlockV2_200_response::is_tx_count_Valid() const{
    return m_tx_count_isValid;
}

QList<OAIGetBlockV2_200_response_txs_inner> OAIGetBlockV2_200_response::getTxs() const {
    return m_txs;
}
void OAIGetBlockV2_200_response::setTxs(const QList<OAIGetBlockV2_200_response_txs_inner> &txs) {
    m_txs = txs;
    m_txs_isSet = true;
}

bool OAIGetBlockV2_200_response::is_txs_Set() const{
    return m_txs_isSet;
}

bool OAIGetBlockV2_200_response::is_txs_Valid() const{
    return m_txs_isValid;
}

qint32 OAIGetBlockV2_200_response::getVersion() const {
    return m_version;
}
void OAIGetBlockV2_200_response::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGetBlockV2_200_response::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGetBlockV2_200_response::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGetBlockV2_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_difficulty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_on_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merkle_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_block_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nonce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_block_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tx_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetBlockV2_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
