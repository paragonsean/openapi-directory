/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetBlockchain_200_response_backend.h
 *
 * 
 */

#ifndef OAIGetBlockchain_200_response_backend_H
#define OAIGetBlockchain_200_response_backend_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetBlockchain_200_response_backend : public OAIObject {
public:
    OAIGetBlockchain_200_response_backend();
    OAIGetBlockchain_200_response_backend(QString json);
    ~OAIGetBlockchain_200_response_backend() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBestBlockHash() const;
    void setBestBlockHash(const QString &best_block_hash);
    bool is_best_block_hash_Set() const;
    bool is_best_block_hash_Valid() const;

    qint32 getBlocks() const;
    void setBlocks(const qint32 &blocks);
    bool is_blocks_Set() const;
    bool is_blocks_Valid() const;

    QString getChain() const;
    void setChain(const QString &chain);
    bool is_chain_Set() const;
    bool is_chain_Valid() const;

    QString getDifficulty() const;
    void setDifficulty(const QString &difficulty);
    bool is_difficulty_Set() const;
    bool is_difficulty_Valid() const;

    qint32 getHeaders() const;
    void setHeaders(const qint32 &headers);
    bool is_headers_Set() const;
    bool is_headers_Valid() const;

    QString getProtocolVersion() const;
    void setProtocolVersion(const QString &protocol_version);
    bool is_protocol_version_Set() const;
    bool is_protocol_version_Valid() const;

    qint32 getSizeOnDisk() const;
    void setSizeOnDisk(const qint32 &size_on_disk);
    bool is_size_on_disk_Set() const;
    bool is_size_on_disk_Valid() const;

    QString getSubversion() const;
    void setSubversion(const QString &subversion);
    bool is_subversion_Set() const;
    bool is_subversion_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_best_block_hash;
    bool m_best_block_hash_isSet;
    bool m_best_block_hash_isValid;

    qint32 m_blocks;
    bool m_blocks_isSet;
    bool m_blocks_isValid;

    QString m_chain;
    bool m_chain_isSet;
    bool m_chain_isValid;

    QString m_difficulty;
    bool m_difficulty_isSet;
    bool m_difficulty_isValid;

    qint32 m_headers;
    bool m_headers_isSet;
    bool m_headers_isValid;

    QString m_protocol_version;
    bool m_protocol_version_isSet;
    bool m_protocol_version_isValid;

    qint32 m_size_on_disk;
    bool m_size_on_disk_isSet;
    bool m_size_on_disk_isValid;

    QString m_subversion;
    bool m_subversion_isSet;
    bool m_subversion_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetBlockchain_200_response_backend)

#endif // OAIGetBlockchain_200_response_backend_H
