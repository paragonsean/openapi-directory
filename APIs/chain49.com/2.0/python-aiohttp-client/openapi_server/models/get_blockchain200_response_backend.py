# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetBlockchain200ResponseBackend(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, best_block_hash: str=None, blocks: int=None, chain: str=None, difficulty: str=None, headers: int=None, protocol_version: str=None, size_on_disk: int=None, subversion: str=None, version: str=None):
        """GetBlockchain200ResponseBackend - a model defined in OpenAPI

        :param best_block_hash: The best_block_hash of this GetBlockchain200ResponseBackend.
        :param blocks: The blocks of this GetBlockchain200ResponseBackend.
        :param chain: The chain of this GetBlockchain200ResponseBackend.
        :param difficulty: The difficulty of this GetBlockchain200ResponseBackend.
        :param headers: The headers of this GetBlockchain200ResponseBackend.
        :param protocol_version: The protocol_version of this GetBlockchain200ResponseBackend.
        :param size_on_disk: The size_on_disk of this GetBlockchain200ResponseBackend.
        :param subversion: The subversion of this GetBlockchain200ResponseBackend.
        :param version: The version of this GetBlockchain200ResponseBackend.
        """
        self.openapi_types = {
            'best_block_hash': str,
            'blocks': int,
            'chain': str,
            'difficulty': str,
            'headers': int,
            'protocol_version': str,
            'size_on_disk': int,
            'subversion': str,
            'version': str
        }

        self.attribute_map = {
            'best_block_hash': 'bestBlockHash',
            'blocks': 'blocks',
            'chain': 'chain',
            'difficulty': 'difficulty',
            'headers': 'headers',
            'protocol_version': 'protocolVersion',
            'size_on_disk': 'sizeOnDisk',
            'subversion': 'subversion',
            'version': 'version'
        }

        self._best_block_hash = best_block_hash
        self._blocks = blocks
        self._chain = chain
        self._difficulty = difficulty
        self._headers = headers
        self._protocol_version = protocol_version
        self._size_on_disk = size_on_disk
        self._subversion = subversion
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetBlockchain200ResponseBackend':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getBlockchain_200_response_backend of this GetBlockchain200ResponseBackend.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def best_block_hash(self):
        """Gets the best_block_hash of this GetBlockchain200ResponseBackend.


        :return: The best_block_hash of this GetBlockchain200ResponseBackend.
        :rtype: str
        """
        return self._best_block_hash

    @best_block_hash.setter
    def best_block_hash(self, best_block_hash):
        """Sets the best_block_hash of this GetBlockchain200ResponseBackend.


        :param best_block_hash: The best_block_hash of this GetBlockchain200ResponseBackend.
        :type best_block_hash: str
        """

        self._best_block_hash = best_block_hash

    @property
    def blocks(self):
        """Gets the blocks of this GetBlockchain200ResponseBackend.


        :return: The blocks of this GetBlockchain200ResponseBackend.
        :rtype: int
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this GetBlockchain200ResponseBackend.


        :param blocks: The blocks of this GetBlockchain200ResponseBackend.
        :type blocks: int
        """

        self._blocks = blocks

    @property
    def chain(self):
        """Gets the chain of this GetBlockchain200ResponseBackend.


        :return: The chain of this GetBlockchain200ResponseBackend.
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this GetBlockchain200ResponseBackend.


        :param chain: The chain of this GetBlockchain200ResponseBackend.
        :type chain: str
        """

        self._chain = chain

    @property
    def difficulty(self):
        """Gets the difficulty of this GetBlockchain200ResponseBackend.


        :return: The difficulty of this GetBlockchain200ResponseBackend.
        :rtype: str
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """Sets the difficulty of this GetBlockchain200ResponseBackend.


        :param difficulty: The difficulty of this GetBlockchain200ResponseBackend.
        :type difficulty: str
        """

        self._difficulty = difficulty

    @property
    def headers(self):
        """Gets the headers of this GetBlockchain200ResponseBackend.


        :return: The headers of this GetBlockchain200ResponseBackend.
        :rtype: int
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this GetBlockchain200ResponseBackend.


        :param headers: The headers of this GetBlockchain200ResponseBackend.
        :type headers: int
        """

        self._headers = headers

    @property
    def protocol_version(self):
        """Gets the protocol_version of this GetBlockchain200ResponseBackend.


        :return: The protocol_version of this GetBlockchain200ResponseBackend.
        :rtype: str
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this GetBlockchain200ResponseBackend.


        :param protocol_version: The protocol_version of this GetBlockchain200ResponseBackend.
        :type protocol_version: str
        """

        self._protocol_version = protocol_version

    @property
    def size_on_disk(self):
        """Gets the size_on_disk of this GetBlockchain200ResponseBackend.


        :return: The size_on_disk of this GetBlockchain200ResponseBackend.
        :rtype: int
        """
        return self._size_on_disk

    @size_on_disk.setter
    def size_on_disk(self, size_on_disk):
        """Sets the size_on_disk of this GetBlockchain200ResponseBackend.


        :param size_on_disk: The size_on_disk of this GetBlockchain200ResponseBackend.
        :type size_on_disk: int
        """

        self._size_on_disk = size_on_disk

    @property
    def subversion(self):
        """Gets the subversion of this GetBlockchain200ResponseBackend.


        :return: The subversion of this GetBlockchain200ResponseBackend.
        :rtype: str
        """
        return self._subversion

    @subversion.setter
    def subversion(self, subversion):
        """Sets the subversion of this GetBlockchain200ResponseBackend.


        :param subversion: The subversion of this GetBlockchain200ResponseBackend.
        :type subversion: str
        """

        self._subversion = subversion

    @property
    def version(self):
        """Gets the version of this GetBlockchain200ResponseBackend.


        :return: The version of this GetBlockchain200ResponseBackend.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GetBlockchain200ResponseBackend.


        :param version: The version of this GetBlockchain200ResponseBackend.
        :type version: str
        """

        self._version = version
