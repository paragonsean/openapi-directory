/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetNFTMetaV2200Response from '../model/GetNFTMetaV2200Response';

/**
* NFT service.
* @module api/NFTApi
* @version 2.0
*/
export default class NFTApi {

    /**
    * Constructs a new NFTApi. 
    * @alias module:api/NFTApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getNFTMetaV2 operation.
     * @callback module:api/NFTApi~getNFTMetaV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNFTMetaV2200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get NFT metadata V2
     * Only works on Ethereum-like blockchains (currently ethereum and bsc)  Get metadata like name or description for a specified contract and token ID. The resulting data contains a link which can then be used to request the IPFS link for the actual image to display in a block explorer for example.  Note: this route was implemented by us and is therefore not yet supported by existing blockbook clients.
     * @param {String} blockchain NFT-compatible blockchain name
     * @param {String} nftContract Address of NFT contract
     * @param {String} nftTokenId Unique token ID of NFT
     * @param {module:api/NFTApi~getNFTMetaV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNFTMetaV2200Response}
     */
    getNFTMetaV2(blockchain, nftContract, nftTokenId, callback) {
      let postBody = null;
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling getNFTMetaV2");
      }
      // verify the required parameter 'nftContract' is set
      if (nftContract === undefined || nftContract === null) {
        throw new Error("Missing the required parameter 'nftContract' when calling getNFTMetaV2");
      }
      // verify the required parameter 'nftTokenId' is set
      if (nftTokenId === undefined || nftTokenId === null) {
        throw new Error("Missing the required parameter 'nftTokenId' when calling getNFTMetaV2");
      }

      let pathParams = {
        'blockchain': blockchain,
        'nftContract': nftContract,
        'nftTokenId': nftTokenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-RapidAPI-Host', 'X-API-Key', 'X-RapidAPI-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNFTMetaV2200Response;
      return this.apiClient.callApi(
        '/{blockchain}/v2/nft/{nftContract}/{nftTokenId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
