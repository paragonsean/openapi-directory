/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetBalanceHistoryV2200ResponseInner from '../model/GetBalanceHistoryV2200ResponseInner';
import GetXpubV2200Response from '../model/GetXpubV2200Response';

/**
* Addresses service.
* @module api/AddressesApi
* @version 2.0
*/
export default class AddressesApi {

    /**
    * Constructs a new AddressesApi. 
    * @alias module:api/AddressesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAddressV2 operation.
     * @callback module:api/AddressesApi~getAddressV2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get address V2
     * Returns balances and transactions of an address. The returned transactions are sorted by block height, newest blocks first.  The **details** query parameter can specify the level of details returned by the request (default: \"txids\"). Possible values are:  **basic**: return only xpub balances, without any derived addresses and transactions  **tokens**: basic + tokens (addresses) derived from the xpub, subject to tokens parameter  **tokenBalances**: basic + tokens (addresses) derived from the xpub with balances, subject to tokens parameter  **txids**: tokenBalances + list of txids, subject to from, to filter and paging  **txs**: tokenBalances + list of transaction with details, subject to from, to filter and paging 
     * @param {String} blockchain Blockchain name
     * @param {String} address Wallet address
     * @param {Object} opts Optional parameters
     * @param {Number} [page] specifies page of returned transactions, starting from 1. If out of range, Blockbook returns the closest possible page.
     * @param {Number} [pageSize] number of transactions returned by call (default and maximum 1000)
     * @param {Number} [fromBlock] filter of the returned transactions from block height to block height (default no filter)
     * @param {Number} [toBlock] filter of the returned transactions from block height to block height (default no filter)
     * @param {module:model/String} [details = 'txids')] specifies level of details returned by request
     * @param {String} [contract] return only transactions which affect specified contract (applicable only to coins which support contracts)
     * @param {String} [secondary] specifies secondary (fiat) currency in which the token and total balances are returned in addition to crypto values
     * @param {module:api/AddressesApi~getAddressV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getAddressV2(blockchain, address, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling getAddressV2");
      }
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getAddressV2");
      }

      let pathParams = {
        'blockchain': blockchain,
        'address': address
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'fromBlock': opts['fromBlock'],
        'toBlock': opts['toBlock'],
        'details': opts['details'],
        'contract': opts['contract'],
        'secondary': opts['secondary']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-RapidAPI-Host', 'X-API-Key', 'X-RapidAPI-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/{blockchain}/v2/address/{address}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBalanceHistoryV2 operation.
     * @callback module:api/AddressesApi~getBalanceHistoryV2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetBalanceHistoryV2200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Balance History V2
     * Returns a balance history for the specified XPUB or address  The value of sentToSelf is the amount sent from the same address to the same address or within addresses of xpub.
     * @param {String} blockchain Blockchain name
     * @param {String} addressOrXpub Address or XPUB
     * @param {Object} opts Optional parameters
     * @param {String} [fromDate] specifies a start date as a Unix timestamp
     * @param {String} [toDate] specifies an end date as a Unix timestamp
     * @param {String} [fiatcurrency] if specified, the response will contain secondary (fiat) rate at the time of transaction. If not, all available currencies will be returned
     * @param {Number} [groupBy = 3600)] an interval in seconds, to group results by. Default is 3600 seconds
     * @param {module:api/AddressesApi~getBalanceHistoryV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetBalanceHistoryV2200ResponseInner>}
     */
    getBalanceHistoryV2(blockchain, addressOrXpub, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling getBalanceHistoryV2");
      }
      // verify the required parameter 'addressOrXpub' is set
      if (addressOrXpub === undefined || addressOrXpub === null) {
        throw new Error("Missing the required parameter 'addressOrXpub' when calling getBalanceHistoryV2");
      }

      let pathParams = {
        'blockchain': blockchain,
        'addressOrXpub': addressOrXpub
      };
      let queryParams = {
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'fiatcurrency': opts['fiatcurrency'],
        'groupBy': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-RapidAPI-Host', 'X-API-Key', 'X-RapidAPI-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetBalanceHistoryV2200ResponseInner];
      return this.apiClient.callApi(
        '/{blockchain}/v2/balancehistory/{addressOrXpub}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUTXOV2 operation.
     * @callback module:api/AddressesApi~getUTXOV2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get UTXO V2
     * Returns array of unspent transaction outputs of address or xpub, applicable only for Bitcoin-type coins. By default, the list contains both confirmed and unconfirmed transactions. The query parameter confirmed=true disables return of unconfirmed transactions. The returned utxos are sorted by block height, newest blocks first. For xpubs or output descriptors, the response also contains address and derivation path of the utxo.    Unconfirmed utxos do not have field height, the field confirmations has value 0 and may contain field lockTime, if not zero.  Coinbase utxos have field coinbase set to true, however due to performance reasons only up to minimum coinbase confirmations limit (100). After this limit, utxos are not detected as coinbase.
     * @param {String} blockchain Blockchain name
     * @param {String} addressOrXpub Address or XPUB
     * @param {Object} opts Optional parameters
     * @param {Boolean} [confirmed] confirmed=true disables return of unconfirmed transactions
     * @param {module:api/AddressesApi~getUTXOV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getUTXOV2(blockchain, addressOrXpub, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling getUTXOV2");
      }
      // verify the required parameter 'addressOrXpub' is set
      if (addressOrXpub === undefined || addressOrXpub === null) {
        throw new Error("Missing the required parameter 'addressOrXpub' when calling getUTXOV2");
      }

      let pathParams = {
        'blockchain': blockchain,
        'addressOrXpub': addressOrXpub
      };
      let queryParams = {
        'confirmed': opts['confirmed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-RapidAPI-Host', 'X-API-Key', 'X-RapidAPI-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/{blockchain}/v2/utxo/{addressOrXpub}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getXpubV2 operation.
     * @callback module:api/AddressesApi~getXpubV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetXpubV2200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get xpub V2
     * Returns balances and transactions of an xpub or output descriptor, applicable only for Bitcoin-type coins.  Blockbook supports BIP44, BIP49, BIP84 and BIP86 (Taproot) derivation schemes, using either xpubs or output descriptors (see https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md)  Note: usedTokens always returns total number of used addresses of xpub.  Detailed documentation found here: https://github.com/trezor/blockbook/blob/master/docs/api.md#get-xpub
     * @param {String} blockchain Blockchain name
     * @param {String} xpub xpub or output descriptor, applicable only for Bitcoin-type coins
     * @param {Object} opts Optional parameters
     * @param {Number} [page] specifies page of returned transactions, starting from 1. If out of range, Blockbook returns the closest possible page.
     * @param {Number} [pageSize] number of transactions returned by call (default and maximum 1000)
     * @param {Number} [fromBlock] filter of the returned transactions from block height to block height (default no filter)
     * @param {Number} [toBlock] filter of the returned transactions from block height to block height (default no filter)
     * @param {module:model/String} [details = 'txids')] specifies level of details returned by request
     * @param {module:model/String} [tokens = 'nonzero')] specifies what tokens (xpub addresses) are returned by the request (default nonzero)
     * @param {String} [secondary] specifies secondary (fiat) currency in which the token and total balances are returned in addition to crypto values
     * @param {module:api/AddressesApi~getXpubV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetXpubV2200Response}
     */
    getXpubV2(blockchain, xpub, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling getXpubV2");
      }
      // verify the required parameter 'xpub' is set
      if (xpub === undefined || xpub === null) {
        throw new Error("Missing the required parameter 'xpub' when calling getXpubV2");
      }

      let pathParams = {
        'blockchain': blockchain,
        'xpub': xpub
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'fromBlock': opts['fromBlock'],
        'toBlock': opts['toBlock'],
        'details': opts['details'],
        'tokens': opts['tokens'],
        'secondary': opts['secondary']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-RapidAPI-Host', 'X-API-Key', 'X-RapidAPI-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetXpubV2200Response;
      return this.apiClient.callApi(
        '/{blockchain}/v2/xpub/{xpub}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
