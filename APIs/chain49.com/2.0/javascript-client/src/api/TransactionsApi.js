/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetMempoolV2200Response from '../model/GetMempoolV2200Response';
import GetTransactionV2200Response from '../model/GetTransactionV2200Response';
import PostSendTxV2200Response from '../model/PostSendTxV2200Response';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 2.0
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getMempoolV2 operation.
     * @callback module:api/TransactionsApi~getMempoolV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMempoolV2200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Mempool V2
     * Get a list of transaction IDs currently in the mempool of the node (meaning unconfirmed transactions not included in any block yet)  Note: this route was implemented by us and is therefore not yet supported by existing blockbook clients.
     * @param {String} blockchain Blockchain name
     * @param {Object} opts Optional parameters
     * @param {Number} [page] specifies page of returned transactions, starting from 1. If out of range, Blockbook returns the closest possible page.
     * @param {Number} [pageSize] number of transactions returned by call (default and maximum 1000)
     * @param {module:api/TransactionsApi~getMempoolV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMempoolV2200Response}
     */
    getMempoolV2(blockchain, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling getMempoolV2");
      }

      let pathParams = {
        'blockchain': blockchain
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-RapidAPI-Host', 'X-API-Key', 'X-RapidAPI-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMempoolV2200Response;
      return this.apiClient.callApi(
        '/{blockchain}/v2/mempool/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSendTxV2 operation.
     * @callback module:api/TransactionsApi~getSendTxV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PostSendTxV2200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send transaction (in URL) V2
     * Sends new transaction to backend  It is recommended to use POST for sending transactions as there is a limit on how much data can be sent in the URL itself.
     * @param {String} blockchain Blockchain name
     * @param {String} hex Transaction hex data
     * @param {module:api/TransactionsApi~getSendTxV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostSendTxV2200Response}
     */
    getSendTxV2(blockchain, hex, callback) {
      let postBody = null;
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling getSendTxV2");
      }
      // verify the required parameter 'hex' is set
      if (hex === undefined || hex === null) {
        throw new Error("Missing the required parameter 'hex' when calling getSendTxV2");
      }

      let pathParams = {
        'blockchain': blockchain,
        'hex': hex
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-RapidAPI-Host', 'X-API-Key', 'X-RapidAPI-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostSendTxV2200Response;
      return this.apiClient.callApi(
        '/{blockchain}/v2/sendtx/{hex}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionV2 operation.
     * @callback module:api/TransactionsApi~getTransactionV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTransactionV2200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction V2
     * Get transaction returns \"normalized\" data about transaction, which has the same general structure for all supported coins. It does not return coin specific fields (for example information about Zcash shielded addresses).  A note about the blockTime field: for already mined transaction (confirmations > 0), the field blockTime contains time of the block for transactions in mempool (confirmations == 0), the field contains time when the running instance of Blockbook was first time notified about the transaction. This time may be different in different instances of Blockbook.
     * @param {String} blockchain Blockchain name
     * @param {String} txId Transaction ID
     * @param {module:api/TransactionsApi~getTransactionV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTransactionV2200Response}
     */
    getTransactionV2(blockchain, txId, callback) {
      let postBody = null;
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling getTransactionV2");
      }
      // verify the required parameter 'txId' is set
      if (txId === undefined || txId === null) {
        throw new Error("Missing the required parameter 'txId' when calling getTransactionV2");
      }

      let pathParams = {
        'blockchain': blockchain,
        'txId': txId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-RapidAPI-Host', 'X-API-Key', 'X-RapidAPI-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTransactionV2200Response;
      return this.apiClient.callApi(
        '/{blockchain}/v2/tx/{txId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTxSpecificV2 operation.
     * @callback module:api/TransactionsApi~getTxSpecificV2Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction (as is from Backend) V2
     * Returns transaction data in the exact format as returned by backend, including all coin specific fields
     * @param {String} blockchain Blockchain name
     * @param {String} txId Transaction ID
     * @param {module:api/TransactionsApi~getTxSpecificV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getTxSpecificV2(blockchain, txId, callback) {
      let postBody = null;
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling getTxSpecificV2");
      }
      // verify the required parameter 'txId' is set
      if (txId === undefined || txId === null) {
        throw new Error("Missing the required parameter 'txId' when calling getTxSpecificV2");
      }

      let pathParams = {
        'blockchain': blockchain,
        'txId': txId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-RapidAPI-Host', 'X-API-Key', 'X-RapidAPI-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/{blockchain}/v2/tx-specific/{txId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSendTxV2 operation.
     * @callback module:api/TransactionsApi~postSendTxV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PostSendTxV2200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send transaction (POST) V2
     * Sends new transaction to backend for broadcasting  The trailing slash '/' at the end is mandatory 
     * @param {String} blockchain Blockchain name
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] Transaction hex as plain text
     * @param {module:api/TransactionsApi~postSendTxV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostSendTxV2200Response}
     */
    postSendTxV2(blockchain, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'blockchain' is set
      if (blockchain === undefined || blockchain === null) {
        throw new Error("Missing the required parameter 'blockchain' when calling postSendTxV2");
      }

      let pathParams = {
        'blockchain': blockchain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['X-RapidAPI-Host', 'X-API-Key', 'X-RapidAPI-Key'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = PostSendTxV2200Response;
      return this.apiClient.callApi(
        '/{blockchain}/v2/sendtx/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
