/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Chain49Api);
  }
}(this, function(expect, Chain49Api) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetBlockchain200ResponseBlockbook', function() {
    it('should create an instance of GetBlockchain200ResponseBlockbook', function() {
      // uncomment below and update the code to test GetBlockchain200ResponseBlockbook
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be.a(Chain49Api.GetBlockchain200ResponseBlockbook);
    });

    it('should have the property about (base name: "about")', function() {
      // uncomment below and update the code to test the property about
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property bestHeight (base name: "bestHeight")', function() {
      // uncomment below and update the code to test the property bestHeight
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property buildTime (base name: "buildTime")', function() {
      // uncomment below and update the code to test the property buildTime
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property coin (base name: "coin")', function() {
      // uncomment below and update the code to test the property coin
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property currentFiatRatesTime (base name: "currentFiatRatesTime")', function() {
      // uncomment below and update the code to test the property currentFiatRatesTime
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property dbSize (base name: "dbSize")', function() {
      // uncomment below and update the code to test the property dbSize
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property decimals (base name: "decimals")', function() {
      // uncomment below and update the code to test the property decimals
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property gitCommit (base name: "gitCommit")', function() {
      // uncomment below and update the code to test the property gitCommit
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property hasFiatRates (base name: "hasFiatRates")', function() {
      // uncomment below and update the code to test the property hasFiatRates
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property historicalFiatRatesTime (base name: "historicalFiatRatesTime")', function() {
      // uncomment below and update the code to test the property historicalFiatRatesTime
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property host (base name: "host")', function() {
      // uncomment below and update the code to test the property host
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property inSync (base name: "inSync")', function() {
      // uncomment below and update the code to test the property inSync
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property inSyncMempool (base name: "inSyncMempool")', function() {
      // uncomment below and update the code to test the property inSyncMempool
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property initialSync (base name: "initialSync")', function() {
      // uncomment below and update the code to test the property initialSync
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property lastBlockTime (base name: "lastBlockTime")', function() {
      // uncomment below and update the code to test the property lastBlockTime
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property lastMempoolTime (base name: "lastMempoolTime")', function() {
      // uncomment below and update the code to test the property lastMempoolTime
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property mempoolSize (base name: "mempoolSize")', function() {
      // uncomment below and update the code to test the property mempoolSize
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property syncMode (base name: "syncMode")', function() {
      // uncomment below and update the code to test the property syncMode
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new Chain49Api.GetBlockchain200ResponseBlockbook();
      //expect(instance).to.be();
    });

  });

}));
