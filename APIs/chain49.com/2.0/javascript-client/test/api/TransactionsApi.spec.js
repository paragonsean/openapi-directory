/**
 * Chain49 API
 * Kickstart your next crypto project - extended trezor/blockbook API with 10+ blockchains available instantly and 50+ possible on request running on the finest hardware in Germany's best datacenters at Hetzner  Websocket only via api.chain49.com endpoint possible (RapidAPI does not support it yet)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: contact@chain49.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Chain49Api);
  }
}(this, function(expect, Chain49Api) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Chain49Api.TransactionsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TransactionsApi', function() {
    describe('getMempoolV2', function() {
      it('should call getMempoolV2 successfully', function(done) {
        //uncomment below and update the code to test getMempoolV2
        //instance.getMempoolV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSendTxV2', function() {
      it('should call getSendTxV2 successfully', function(done) {
        //uncomment below and update the code to test getSendTxV2
        //instance.getSendTxV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTransactionV2', function() {
      it('should call getTransactionV2 successfully', function(done) {
        //uncomment below and update the code to test getTransactionV2
        //instance.getTransactionV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTxSpecificV2', function() {
      it('should call getTxSpecificV2 successfully', function(done) {
        //uncomment below and update the code to test getTxSpecificV2
        //instance.getTxSpecificV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postSendTxV2', function() {
      it('should call postSendTxV2 successfully', function(done) {
        //uncomment below and update the code to test postSendTxV2
        //instance.postSendTxV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
