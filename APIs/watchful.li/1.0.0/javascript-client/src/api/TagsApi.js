/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Site from '../model/Site';
import Tag from '../model/Tag';

/**
* Tags service.
* @module api/TagsApi
* @version 1.0.0
*/
export default class TagsApi {

    /**
    * Constructs a new TagsApi. 
    * @alias module:api/TagsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTags operation.
     * @callback module:api/TagsApi~createTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a tag
     * Create a tag
     * @param {module:model/Tag} body JSON object Tag
     * @param {module:api/TagsApi~createTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    createTags(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitesByTags operation.
     * @callback module:api/TagsApi~getSitesByTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find sites by tag ID
     * Returns a list of sites based with a specific tag id
     * @param {Number} id ID of tag that needs to be fetched
     * @param {Object} opts Optional parameters
     * @param {String} [name] Do a 'LIKE' search, you can also use '%'
     * @param {String} [accessUrl] Do a 'LIKE' search, you can also use '%'
     * @param {String} [jVersion] Do a 'LIKE' search, you can also use '%'
     * @param {String} [ip] Do a 'LIKE' search, you can also use '%'
     * @param {module:model/Number} [jUpdate] Joomla core update
     * @param {module:model/Number} [published] is published
     * @param {String} [error] have errors
     * @param {String} [nbUpdates] 
     * @param {module:model/Number} [up] is the website online
     * @param {String} [fields] Fields to return separate by comas: name,id
     * @param {Number} [limit] Number of object to return (max 100, default 25)
     * @param {Number} [limitstart] Start of the return (default 0)
     * @param {String} [order] ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-
     * @param {module:api/TagsApi~getSitesByTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    getSitesByTags(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSitesByTags");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'name': opts['name'],
        'access_url': opts['accessUrl'],
        'j_version': opts['jVersion'],
        'ip': opts['ip'],
        'jUpdate': opts['jUpdate'],
        'published': opts['published'],
        'error': opts['error'],
        'nbUpdates': opts['nbUpdates'],
        'up': opts['up'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'limitstart': opts['limitstart'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/tags/{id}/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTagById operation.
     * @callback module:api/TagsApi~getTagByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find tag by ID
     * Returns a tag based on ID
     * @param {Number} id ID of tag that needs to be fetched
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Fields to return separate by comas: name,id
     * @param {module:api/TagsApi~getTagByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    getTagById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTagById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/tags/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsGet operation.
     * @callback module:api/TagsApi~tagsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of tags
     * Returns a list of tags
     * @param {Object} opts Optional parameters
     * @param {String} [name] Do a 'LIKE' search, you can also use '%'
     * @param {module:model/String} [type] Bootstrap color of the tag
     * @param {String} [fields] Fields to return separate by comas: name,id
     * @param {Number} [limit] Number of object to return (max 100, default 25)
     * @param {Number} [limitstart] Start of the return (default 0)
     * @param {String} [order] ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-
     * @param {module:api/TagsApi~tagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    tagsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'type': opts['type'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'limitstart': opts['limitstart'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsIdDelete operation.
     * @callback module:api/TagsApi~tagsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific tag
     * Delete a specific tag
     * @param {Number} id ID of tag that needs to be deleted
     * @param {module:api/TagsApi~tagsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    tagsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tagsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/tags/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsMetadataGet operation.
     * @callback module:api/TagsApi~tagsMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of fields
     * Returns a list of fields
     * @param {module:api/TagsApi~tagsMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    tagsMetadataGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/tags/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTag operation.
     * @callback module:api/TagsApi~updateTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a tag
     * Update a tag
     * @param {Number} id ID of tag
     * @param {module:model/Tag} body JSON object of the updated tag
     * @param {module:api/TagsApi~updateTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    updateTag(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTag");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTag");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/tags/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
