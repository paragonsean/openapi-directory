/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Audit from '../model/Audit';

/**
* Audits service.
* @module api/AuditsApi
* @version 1.0.0
*/
export default class AuditsApi {

    /**
    * Constructs a new AuditsApi. 
    * @alias module:api/AuditsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAuditById operation.
     * @callback module:api/AuditsApi~deleteAuditByIdCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific audit
     * Delete a specific audit
     * @param {Number} id ID of audit that needs to be deleted
     * @param {module:api/AuditsApi~deleteAuditByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    deleteAuditById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAuditById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/audits/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuditById operation.
     * @callback module:api/AuditsApi~getAuditByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Audit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find audit by ID
     * Returns a audit based on ID
     * @param {Number} id ID of audit that needs to be fetched
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Fields to return separate by comas: name,id
     * @param {module:api/AuditsApi~getAuditByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Audit}
     */
    getAuditById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAuditById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Audit;
      return this.apiClient.callApi(
        '/audits/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAudits operation.
     * @callback module:api/AuditsApi~getAuditsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Audit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of audits
     * Returns a list of audits
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Number of object to return (max 100, default 25)
     * @param {Number} [limitstart] Start of the return (default 0)
     * @param {String} [order] ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-
     * @param {module:api/AuditsApi~getAuditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Audit}
     */
    getAudits(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'limitstart': opts['limitstart'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Audit;
      return this.apiClient.callApi(
        '/audits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldsAudits operation.
     * @callback module:api/AuditsApi~getFieldsAuditsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of fields
     * Returns a list of fields
     * @param {module:api/AuditsApi~getFieldsAuditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getFieldsAudits(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/audits/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
