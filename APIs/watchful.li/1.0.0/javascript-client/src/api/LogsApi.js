/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Log from '../model/Log';

/**
* Logs service.
* @module api/LogsApi
* @version 1.0.0
*/
export default class LogsApi {

    /**
    * Constructs a new LogsApi. 
    * @alias module:api/LogsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteLogById operation.
     * @callback module:api/LogsApi~deleteLogByIdCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific log
     * Delete a specific log
     * @param {Number} id ID of log that needs to be deleted
     * @param {module:api/LogsApi~deleteLogByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    deleteLogById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteLogById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/logs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExportLogs operation.
     * @callback module:api/LogsApi~getExportLogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a CSV or PDF file contain the list of logs
     * Returns a file contain the list of logs
     * @param {module:model/String} format Format of exported file (PDF or CSV)
     * @param {Object} opts Optional parameters
     * @param {Number} [site] Site id of the log
     * @param {module:model/String} [filterType] Type of the log
     * @param {String} [search] Do a 'LIKE' search, you can also use '%'
     * @param {String} [startdate] Logs after this date, format YYYY-MM-DD HH:MM:SS
     * @param {String} [enddate] Logs before this date, format YYYY-MM-DD HH:MM:SS
     * @param {Number} [limit] Number of object to return (max 100, default 25)
     * @param {Number} [startid] Start of the return (default 0)
     * @param {module:api/LogsApi~getExportLogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getExportLogs(format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getExportLogs");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': format,
        'site': opts['site'],
        'filter_type': opts['filterType'],
        'search': opts['search'],
        'startdate': opts['startdate'],
        'enddate': opts['enddate'],
        'limit': opts['limit'],
        'startid': opts['startid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/logs/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldsLogs operation.
     * @callback module:api/LogsApi~getFieldsLogsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of fields
     * Returns a list of fields
     * @param {module:api/LogsApi~getFieldsLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getFieldsLogs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/logs/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTypesLogs operation.
     * @callback module:api/LogsApi~getTypesLogsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of log types
     * Returns a list of log types
     * @param {module:api/LogsApi~getTypesLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getTypesLogs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/logs/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logsGet operation.
     * @callback module:api/LogsApi~logsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Log} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of logs
     * Returns a list of logs
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [logType] Type of the log
     * @param {String} [logEntry] Do a 'LIKE' search, you can also use '%'
     * @param {String} [from] Logs after this date, format YYYY-MM-DD HH:MM:SS
     * @param {String} [to] Logs before this date, format YYYY-MM-DD HH:MM:SS
     * @param {String} [fields] Fields to return separate by comas: name,id
     * @param {Number} [limit] Number of object to return (max 100, default 25)
     * @param {Number} [limitstart] Start of the return (default 0)
     * @param {String} [order] ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-
     * @param {module:api/LogsApi~logsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Log}
     */
    logsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'log_type': opts['logType'],
        'log_entry': opts['logEntry'],
        'from': opts['from'],
        'to': opts['to'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'limitstart': opts['limitstart'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Log;
      return this.apiClient.callApi(
        '/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
