/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Extension from '../model/Extension';

/**
* Extensions service.
* @module api/ExtensionsApi
* @version 1.0.0
*/
export default class ExtensionsApi {

    /**
    * Constructs a new ExtensionsApi. 
    * @alias module:api/ExtensionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getExtensions operation.
     * @callback module:api/ExtensionsApi~getExtensionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Extension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list Extensions
     * Returns a list Extensions
     * @param {Object} opts Optional parameters
     * @param {String} [extName] Do a 'LIKE' search, you can also use '%'
     * @param {String} [siteids] List of sites id separated by comma
     * @param {String} [extPrefix] Do a 'LIKE' search, you can also use '%'. technical name of the extension com_xxxx
     * @param {String} [version] Do a 'LIKE' search, you can also use '%'
     * @param {module:model/Number} [vUpdate] update available for this extension
     * @param {String} [fields] Fields to return separate by comas: name,id
     * @param {Number} [limit] Number of object to return (max 100, default 25)
     * @param {Number} [limitstart] Start of the return (default 0)
     * @param {String} [order] ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-
     * @param {module:api/ExtensionsApi~getExtensionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Extension}
     */
    getExtensions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ext_name': opts['extName'],
        'siteids': opts['siteids'],
        'ext_prefix': opts['extPrefix'],
        'version': opts['version'],
        'vUpdate': opts['vUpdate'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'limitstart': opts['limitstart'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Extension;
      return this.apiClient.callApi(
        '/extensions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldsExtensions operation.
     * @callback module:api/ExtensionsApi~getFieldsExtensionsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of fields
     * Returns a list of fields
     * @param {module:api/ExtensionsApi~getFieldsExtensionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getFieldsExtensions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/extensions/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ignoreExtensionUpdate operation.
     * @callback module:api/ExtensionsApi~ignoreExtensionUpdateCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set 'ignore updates' for a given extension / site_id
     * Set 'ignore updates' for a given extension / site_id
     * @param {Number} id ID of the extension
     * @param {module:api/ExtensionsApi~ignoreExtensionUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    ignoreExtensionUpdate(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ignoreExtensionUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/extensions/{id}/ignore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unignoreExtensionUpdate operation.
     * @callback module:api/ExtensionsApi~unignoreExtensionUpdateCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove 'ignore updates' for a given extension
     * Remove 'ignore updates' for a given extension
     * @param {Number} id ID of the extension
     * @param {module:api/ExtensionsApi~unignoreExtensionUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    unignoreExtensionUpdate(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling unignoreExtensionUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/extensions/{id}/unignore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExtension operation.
     * @callback module:api/ExtensionsApi~updateExtensionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the extension on the remote site
     * Update the extension on the remote site
     * @param {Number} id ID of the extension
     * @param {module:api/ExtensionsApi~updateExtensionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    updateExtension(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateExtension");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/extensions/{id}/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
