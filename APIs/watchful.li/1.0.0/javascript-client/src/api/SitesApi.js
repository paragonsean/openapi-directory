/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Audit from '../model/Audit';
import Extension from '../model/Extension';
import Log from '../model/Log';
import PostLog from '../model/PostLog';
import PostSite from '../model/PostSite';
import Site from '../model/Site';
import Tag from '../model/Tag';

/**
* Sites service.
* @module api/SitesApi
* @version 1.0.0
*/
export default class SitesApi {

    /**
    * Constructs a new SitesApi. 
    * @alias module:api/SitesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addSiteToBackupQueue operation.
     * @callback module:api/SitesApi~addSiteToBackupQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add the site to the backup queue
     * Add the site to the backup queue
     * @param {Number} id ID of the website
     * @param {module:api/SitesApi~addSiteToBackupQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    addSiteToBackupQueue(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addSiteToBackupQueue");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/sites/{id}/backupnow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAudits operation.
     * @callback module:api/SitesApi~createAuditsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Audit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an audit for the site
     * Create an audit for the site
     * @param {Number} id ID of the website
     * @param {module:api/SitesApi~createAuditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Audit}
     */
    createAudits(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createAudits");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Audit;
      return this.apiClient.callApi(
        '/sites/{id}/audits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLog operation.
     * @callback module:api/SitesApi~createLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Log} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a custom log for a specific website
     * Create a custom log for a specific website
     * @param {Number} id ID of the website
     * @param {module:model/PostLog} body JSON object Log (only type custom)
     * @param {module:api/SitesApi~createLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Log}
     */
    createLog(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createLog");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createLog");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Log;
      return this.apiClient.callApi(
        '/sites/{id}/logs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSite operation.
     * @callback module:api/SitesApi~createSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a site
     * Create a site
     * @param {module:model/PostSite} body JSON object Site
     * @param {module:api/SitesApi~createSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    createSite(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSite");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/sites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMonitor operation.
     * @callback module:api/SitesApi~deleteMonitorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete uptime monitor
     * Return boolean
     * @param {Number} id ID of the website
     * @param {module:api/SitesApi~deleteMonitorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteMonitor(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMonitor");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/sites/{id}/monitor', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBackupProfiles operation.
     * @callback module:api/SitesApi~getBackupProfilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return backup profile
     * Return backup profile
     * @param {Number} id ID of the website
     * @param {module:api/SitesApi~getBackupProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getBackupProfiles(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBackupProfiles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sites/{id}/backupprofiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListBackups operation.
     * @callback module:api/SitesApi~getListBackupsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of latest backups
     * List of latest backups
     * @param {Number} id ID of the website
     * @param {module:api/SitesApi~getListBackupsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getListBackups(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getListBackups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sites/{id}/backups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteAudits operation.
     * @callback module:api/SitesApi~getSiteAuditsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Audit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return audits for a specific website
     * Return audits for a specific website
     * @param {Number} id ID of the website
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Fields to return separate by comas: name,id
     * @param {Number} [limit] Number of object to return (max 100, default 25)
     * @param {Number} [limitstart] Start of the return (default 0)
     * @param {String} [order] ORDER by this field
     * @param {module:api/SitesApi~getSiteAuditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Audit>}
     */
    getSiteAudits(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteAudits");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'limit': opts['limit'],
        'limitstart': opts['limitstart'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = [Audit];
      return this.apiClient.callApi(
        '/sites/{id}/audits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteById operation.
     * @callback module:api/SitesApi~getSiteByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find sites by ID
     * Return a site based on ID
     * @param {Number} id ID that needs to be fetched
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Fields to return separate by comas: name,id
     * @param {module:api/SitesApi~getSiteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    getSiteById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/sites/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSites operation.
     * @callback module:api/SitesApi~getSitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Sites
     * Returns a list of Sites
     * @param {Object} opts Optional parameters
     * @param {String} [siteids] List of sites id separated by comma
     * @param {String} [name] Site name. Do a 'LIKE' search, you can also use '%'
     * @param {String} [accessUrl] Access URL. Do a 'LIKE' search, you can also use '%'
     * @param {String} [jVersion] Joomla version. Do a 'LIKE' search, you can also use '%'
     * @param {String} [ip] Ip address. Do a 'LIKE' search, you can also use '%'
     * @param {module:model/Number} [jUpdate] Joomla core update status (1: update required, 0: update not required)
     * @param {module:model/Number} [canUpdate] canUpdate
     * @param {module:model/Number} [published] Is published
     * @param {String} [error] Has errors
     * @param {String} [nbUpdates] 
     * @param {module:model/Number} [up] Is online
     * @param {String} [fields] Fields to return separated by commas (e.g. name,id)
     * @param {Number} [limit] Number of objects to return (max 100, default 25)
     * @param {Number} [limitstart] Start of the return (default 0)
     * @param {String} [order] ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-
     * @param {module:api/SitesApi~getSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    getSites(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'siteids': opts['siteids'],
        'name': opts['name'],
        'access_url': opts['accessUrl'],
        'j_version': opts['jVersion'],
        'ip': opts['ip'],
        'jUpdate': opts['jUpdate'],
        'canUpdate': opts['canUpdate'],
        'published': opts['published'],
        'error': opts['error'],
        'nbUpdates': opts['nbUpdates'],
        'up': opts['up'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'limitstart': opts['limitstart'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUptime operation.
     * @callback module:api/SitesApi~getUptimeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return uptime data
     * Return uptime data
     * @param {Number} id ID of the website
     * @param {module:api/SitesApi~getUptimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getUptime(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUptime");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/sites/{id}/uptime', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the installExtension operation.
     * @callback module:api/SitesApi~installExtensionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Install extension
     * @param {Number} id ID of the website
     * @param {String} url URL to install the extension from
     * @param {module:api/SitesApi~installExtensionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    installExtension(id, url, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling installExtension");
      }
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling installExtension");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'url': url
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sites/{id}/extensions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postMonitor operation.
     * @callback module:api/SitesApi~postMonitorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post uptime monitor
     * Return boolean
     * @param {Number} id ID of the website
     * @param {module:api/SitesApi~postMonitorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    postMonitor(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postMonitor");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/sites/{id}/monitor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTags operation.
     * @callback module:api/SitesApi~postTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add tags for a specific website
     * Add tags for a specific website
     * @param {Number} id ID of the website
     * @param {module:model/Tag} body JSON object Tag
     * @param {module:api/SitesApi~postTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    postTags(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTags");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postTags");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/sites/{id}/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scanner operation.
     * @callback module:api/SitesApi~scannerCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scan the site for malware
     * Scan the site for malware
     * @param {Number} id ID of the website
     * @param {module:api/SitesApi~scannerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    scanner(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scanner");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/sites/{id}/scanner', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the seoAnalyze operation.
     * @callback module:api/SitesApi~seoAnalyzeCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SEO analyze for a page
     * SEO analyze for a page
     * @param {Number} id ID of the website
     * @param {module:api/SitesApi~seoAnalyzeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    seoAnalyze(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling seoAnalyze");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/sites/{id}/seo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesIdDelete operation.
     * @callback module:api/SitesApi~sitesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific Site
     * Delete a specific Site
     * @param {Number} id ID of Site that needs to be deleted
     * @param {module:api/SitesApi~sitesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    sitesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/sites/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesIdExtensionsGet operation.
     * @callback module:api/SitesApi~sitesIdExtensionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Extension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get extensions for a site
     * Get extensions for a site
     * @param {Number} id ID of the website
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Fields to return separate by comas: name,id
     * @param {Number} [limit] Number of object to return (max 100, default 25)
     * @param {Number} [limitstart] Start of the return (default 0)
     * @param {String} [order] ORDER by this field
     * @param {module:api/SitesApi~sitesIdExtensionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Extension}
     */
    sitesIdExtensionsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesIdExtensionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields'],
        'limit': opts['limit'],
        'limitstart': opts['limitstart'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Extension;
      return this.apiClient.callApi(
        '/sites/{id}/extensions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesIdLogsGet operation.
     * @callback module:api/SitesApi~sitesIdLogsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Log} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return logs for a specific website
     * Return logs for a specific website
     * @param {Number} id ID of the website
     * @param {Object} opts Optional parameters
     * @param {String} [logEntry] Do a 'LIKE' search, you can also use '%'
     * @param {module:model/String} [logType] Type of the log
     * @param {String} [from] Logs after this date, format YYYY-MM-DD HH:MM:SS
     * @param {String} [to] Logs before this date, format YYYY-MM-DD HH:MM:SS
     * @param {String} [fields] Fields to return separate by comas: name,id
     * @param {Number} [limit] Number of object to return (max 100, default 25)
     * @param {Number} [limitstart] Start of the return (default 0)
     * @param {String} [order] ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name-
     * @param {module:api/SitesApi~sitesIdLogsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Log}
     */
    sitesIdLogsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesIdLogsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'log_entry': opts['logEntry'],
        'log_type': opts['logType'],
        'from': opts['from'],
        'to': opts['to'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'limitstart': opts['limitstart'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Log;
      return this.apiClient.callApi(
        '/sites/{id}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesIdPut operation.
     * @callback module:api/SitesApi~sitesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a site
     * Update a site
     * @param {Number} id ID of the website that needs to be update
     * @param {module:model/PostSite} body JSON object Site
     * @param {module:api/SitesApi~sitesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    sitesIdPut(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sitesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/sites/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesIdTagsGet operation.
     * @callback module:api/SitesApi~sitesIdTagsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return tags for a specific website
     * Return tags for a specific website
     * @param {Number} id ID of the website
     * @param {Object} opts Optional parameters
     * @param {String} [name] Do a 'LIKE' search, you can also use '%'
     * @param {module:model/String} [type] Bootstrap color of the tag
     * @param {String} [fields] Fields to return separate by comas: name,id
     * @param {Number} [limit] Number of object to return (max 100, default 25)
     * @param {Number} [limitstart] Start of the return (default 0)
     * @param {String} [order] ORDER by this field
     * @param {module:api/SitesApi~sitesIdTagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    sitesIdTagsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesIdTagsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'name': opts['name'],
        'type': opts['type'],
        'fields': opts['fields'],
        'limit': opts['limit'],
        'limitstart': opts['limitstart'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/sites/{id}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesMetadataGet operation.
     * @callback module:api/SitesApi~sitesMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of fields
     * Returns a list of fields
     * @param {module:api/SitesApi~sitesMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    sitesMetadataGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/sites/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startSiteBackup operation.
     * @callback module:api/SitesApi~startSiteBackupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a remote backup for the site
     * Start a remote backup for the site
     * @param {Number} id ID of the website
     * @param {module:api/SitesApi~startSiteBackupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    startSiteBackup(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startSiteBackup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/sites/{id}/backupstart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stepSiteBackup operation.
     * @callback module:api/SitesApi~stepSiteBackupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Step (continue) a remote backup for the site
     * Step (continue) a remote backup for the site
     * @param {Number} id ID of the website
     * @param {module:api/SitesApi~stepSiteBackupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    stepSiteBackup(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stepSiteBackup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/sites/{id}/backupstep', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJoomla operation.
     * @callback module:api/SitesApi~updateJoomlaCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Joomla core on the remote site
     * Update Joomla core on the remote site
     * @param {Number} id ID of the website
     * @param {module:api/SitesApi~updateJoomlaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    updateJoomla(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateJoomla");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/sites/{id}/updatejoomla', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateDebugSite operation.
     * @callback module:api/SitesApi~validateDebugSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Log} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate the site, return the debug information
     * @param {Number} id ID of the website
     * @param {module:api/SitesApi~validateDebugSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Log}
     */
    validateDebugSite(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateDebugSite");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Log;
      return this.apiClient.callApi(
        '/sites/{id}/validatedebug', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateSite operation.
     * @callback module:api/SitesApi~validateSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Log} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate the site, return the new logs
     * validate the site
     * @param {Number} id ID of the website
     * @param {module:api/SitesApi~validateSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Log}
     */
    validateSite(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validateSite");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = Log;
      return this.apiClient.callApi(
        '/sites/{id}/validate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
