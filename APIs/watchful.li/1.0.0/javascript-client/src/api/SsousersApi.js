/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SsoUsers from '../model/SsoUsers';

/**
* Ssousers service.
* @module api/SsousersApi
* @version 1.0.0
*/
export default class SsousersApi {

    /**
    * Constructs a new SsousersApi. 
    * @alias module:api/SsousersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSsoUsers operation.
     * @callback module:api/SsousersApi~createSsoUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SsoUsers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a SSO User
     * Create a SSO User
     * @param {module:model/SsoUsers} body JSON object SsoUsers
     * @param {module:api/SsousersApi~createSsoUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SsoUsers}
     */
    createSsoUsers(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSsoUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = SsoUsers;
      return this.apiClient.callApi(
        '/ssousers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSsoUserById operation.
     * @callback module:api/SsousersApi~deleteSsoUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific SSO User
     * Delete a specific SSO User
     * @param {Number} id ID of SSO User that needs to be deleted
     * @param {module:api/SsousersApi~deleteSsoUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    deleteSsoUserById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSsoUserById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/ssousers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSsoUsers operation.
     * @callback module:api/SsousersApi~getSsoUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SsoUsers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of SSO Users
     * Returns a list of SSO Users
     * @param {module:api/SsousersApi~getSsoUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SsoUsers}
     */
    getSsoUsers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = SsoUsers;
      return this.apiClient.callApi(
        '/ssousers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSsoUsersById operation.
     * @callback module:api/SsousersApi~getSsoUsersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SsoUsers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find SSO User by ID
     * Returns a SSO User based on ID
     * @param {Number} id ID of SSO User that needs to be fetched
     * @param {Object} opts Optional parameters
     * @param {String} [fields] Fields to return separate by comas: name,id
     * @param {module:api/SsousersApi~getSsoUsersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SsoUsers}
     */
    getSsoUsersById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSsoUsersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = SsoUsers;
      return this.apiClient.callApi(
        '/ssousers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSsoUsers operation.
     * @callback module:api/SsousersApi~updateSsoUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SsoUsers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a SSO User
     * Update a SSO User
     * @param {Number} id ID of SSO User that needs to be updated
     * @param {module:model/SsoUsers} body JSON object SsoUsers
     * @param {module:api/SsousersApi~updateSsoUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SsoUsers}
     */
    updateSsoUsers(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSsoUsers");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSsoUsers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/plain'];
      let returnType = SsoUsers;
      return this.apiClient.callApi(
        '/ssousers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
