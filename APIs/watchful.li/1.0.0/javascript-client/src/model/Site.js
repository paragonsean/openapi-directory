/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Site model module.
 * @module model/Site
 * @version 1.0.0
 */
class Site {
    /**
     * Constructs a new <code>Site</code>.
     * @alias module:model/Site
     * @param siteid {Number} Unique identifier for the site
     */
    constructor(siteid) { 
        
        Site.initialize(this, siteid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, siteid) { 
        obj['siteid'] = siteid;
    }

    /**
     * Constructs a <code>Site</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Site} obj Optional instance to populate.
     * @return {module:model/Site} The populated <code>Site</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Site();

            if (data.hasOwnProperty('access_url')) {
                obj['access_url'] = ApiClient.convertToType(data['access_url'], 'String');
            }
            if (data.hasOwnProperty('admin_url')) {
                obj['admin_url'] = ApiClient.convertToType(data['admin_url'], 'String');
            }
            if (data.hasOwnProperty('akeebaProfile')) {
                obj['akeebaProfile'] = ApiClient.convertToType(data['akeebaProfile'], 'String');
            }
            if (data.hasOwnProperty('backupSchedule')) {
                obj['backupSchedule'] = ApiClient.convertToType(data['backupSchedule'], 'String');
            }
            if (data.hasOwnProperty('canBackup')) {
                obj['canBackup'] = ApiClient.convertToType(data['canBackup'], 'Boolean');
            }
            if (data.hasOwnProperty('canUpdate')) {
                obj['canUpdate'] = ApiClient.convertToType(data['canUpdate'], 'Boolean');
            }
            if (data.hasOwnProperty('dateBackup')) {
                obj['dateBackup'] = ApiClient.convertToType(data['dateBackup'], 'String');
            }
            if (data.hasOwnProperty('date_last_check')) {
                obj['date_last_check'] = ApiClient.convertToType(data['date_last_check'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'Boolean');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('jUpdate')) {
                obj['jUpdate'] = ApiClient.convertToType(data['jUpdate'], 'Boolean');
            }
            if (data.hasOwnProperty('j_version')) {
                obj['j_version'] = ApiClient.convertToType(data['j_version'], 'String');
            }
            if (data.hasOwnProperty('monitorid')) {
                obj['monitorid'] = ApiClient.convertToType(data['monitorid'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nbUpdates')) {
                obj['nbUpdates'] = ApiClient.convertToType(data['nbUpdates'], 'String');
            }
            if (data.hasOwnProperty('new_j_version')) {
                obj['new_j_version'] = ApiClient.convertToType(data['new_j_version'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = ApiClient.convertToType(data['published'], 'Boolean');
            }
            if (data.hasOwnProperty('secret_word')) {
                obj['secret_word'] = ApiClient.convertToType(data['secret_word'], 'String');
            }
            if (data.hasOwnProperty('siteid')) {
                obj['siteid'] = ApiClient.convertToType(data['siteid'], 'Number');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Object]);
            }
            if (data.hasOwnProperty('up')) {
                obj['up'] = ApiClient.convertToType(data['up'], 'Boolean');
            }
            if (data.hasOwnProperty('word_akeeba')) {
                obj['word_akeeba'] = ApiClient.convertToType(data['word_akeeba'], 'String');
            }
            if (data.hasOwnProperty('word_check')) {
                obj['word_check'] = ApiClient.convertToType(data['word_check'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Site</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Site</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Site.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['access_url'] && !(typeof data['access_url'] === 'string' || data['access_url'] instanceof String)) {
            throw new Error("Expected the field `access_url` to be a primitive type in the JSON string but got " + data['access_url']);
        }
        // ensure the json data is a string
        if (data['admin_url'] && !(typeof data['admin_url'] === 'string' || data['admin_url'] instanceof String)) {
            throw new Error("Expected the field `admin_url` to be a primitive type in the JSON string but got " + data['admin_url']);
        }
        // ensure the json data is a string
        if (data['akeebaProfile'] && !(typeof data['akeebaProfile'] === 'string' || data['akeebaProfile'] instanceof String)) {
            throw new Error("Expected the field `akeebaProfile` to be a primitive type in the JSON string but got " + data['akeebaProfile']);
        }
        // ensure the json data is a string
        if (data['backupSchedule'] && !(typeof data['backupSchedule'] === 'string' || data['backupSchedule'] instanceof String)) {
            throw new Error("Expected the field `backupSchedule` to be a primitive type in the JSON string but got " + data['backupSchedule']);
        }
        // ensure the json data is a string
        if (data['dateBackup'] && !(typeof data['dateBackup'] === 'string' || data['dateBackup'] instanceof String)) {
            throw new Error("Expected the field `dateBackup` to be a primitive type in the JSON string but got " + data['dateBackup']);
        }
        // ensure the json data is a string
        if (data['date_last_check'] && !(typeof data['date_last_check'] === 'string' || data['date_last_check'] instanceof String)) {
            throw new Error("Expected the field `date_last_check` to be a primitive type in the JSON string but got " + data['date_last_check']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['j_version'] && !(typeof data['j_version'] === 'string' || data['j_version'] instanceof String)) {
            throw new Error("Expected the field `j_version` to be a primitive type in the JSON string but got " + data['j_version']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nbUpdates'] && !(typeof data['nbUpdates'] === 'string' || data['nbUpdates'] instanceof String)) {
            throw new Error("Expected the field `nbUpdates` to be a primitive type in the JSON string but got " + data['nbUpdates']);
        }
        // ensure the json data is a string
        if (data['new_j_version'] && !(typeof data['new_j_version'] === 'string' || data['new_j_version'] instanceof String)) {
            throw new Error("Expected the field `new_j_version` to be a primitive type in the JSON string but got " + data['new_j_version']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['secret_word'] && !(typeof data['secret_word'] === 'string' || data['secret_word'] instanceof String)) {
            throw new Error("Expected the field `secret_word` to be a primitive type in the JSON string but got " + data['secret_word']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['word_akeeba'] && !(typeof data['word_akeeba'] === 'string' || data['word_akeeba'] instanceof String)) {
            throw new Error("Expected the field `word_akeeba` to be a primitive type in the JSON string but got " + data['word_akeeba']);
        }
        // ensure the json data is a string
        if (data['word_check'] && !(typeof data['word_check'] === 'string' || data['word_check'] instanceof String)) {
            throw new Error("Expected the field `word_check` to be a primitive type in the JSON string but got " + data['word_check']);
        }

        return true;
    }


}

Site.RequiredProperties = ["siteid"];

/**
 * URL of the site
 * @member {String} access_url
 */
Site.prototype['access_url'] = undefined;

/**
 * Adminsitration URL
 * @member {String} admin_url
 */
Site.prototype['admin_url'] = undefined;

/**
 * Akeeba Profile
 * @member {String} akeebaProfile
 */
Site.prototype['akeebaProfile'] = undefined;

/**
 * Backup Schedule
 * @member {String} backupSchedule
 */
Site.prototype['backupSchedule'] = undefined;

/**
 * Site can be backuped
 * @member {Boolean} canBackup
 */
Site.prototype['canBackup'] = undefined;

/**
 * Site can use remote installer
 * @member {Boolean} canUpdate
 */
Site.prototype['canUpdate'] = undefined;

/**
 * Date backup
 * @member {String} dateBackup
 */
Site.prototype['dateBackup'] = undefined;

/**
 * Watchful Last check
 * @member {String} date_last_check
 */
Site.prototype['date_last_check'] = undefined;

/**
 * Error status of site
 * @member {Boolean} error
 */
Site.prototype['error'] = undefined;

/**
 * server IP
 * @member {String} ip
 */
Site.prototype['ip'] = undefined;

/**
 * ?
 * @member {Boolean} jUpdate
 */
Site.prototype['jUpdate'] = undefined;

/**
 * Joomla site version
 * @member {String} j_version
 */
Site.prototype['j_version'] = undefined;

/**
 * Id of the associated UptimeRobot monitor
 * @member {Boolean} monitorid
 */
Site.prototype['monitorid'] = undefined;

/**
 * Friendly name for the site
 * @member {String} name
 */
Site.prototype['name'] = undefined;

/**
 * Number of updates
 * @member {String} nbUpdates
 */
Site.prototype['nbUpdates'] = undefined;

/**
 * Joomla site version
 * @member {String} new_j_version
 */
Site.prototype['new_j_version'] = undefined;

/**
 * Personnal note for the site
 * @member {String} notes
 */
Site.prototype['notes'] = undefined;

/**
 * Published status of site
 * @member {Boolean} published
 */
Site.prototype['published'] = undefined;

/**
 * Watchful secret word
 * @member {String} secret_word
 */
Site.prototype['secret_word'] = undefined;

/**
 * Unique identifier for the site
 * @member {Number} siteid
 */
Site.prototype['siteid'] = undefined;

/**
 * List of tags for this site
 * @member {Array.<Object>} tags
 */
Site.prototype['tags'] = undefined;

/**
 * Site status
 * @member {Boolean} up
 */
Site.prototype['up'] = undefined;

/**
 * Akeeba backup word
 * @member {String} word_akeeba
 */
Site.prototype['word_akeeba'] = undefined;

/**
 * Word checked for uptime
 * @member {String} word_check
 */
Site.prototype['word_check'] = undefined;






export default Site;

