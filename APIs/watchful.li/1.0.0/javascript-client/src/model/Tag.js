/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Tag model module.
 * @module model/Tag
 * @version 1.0.0
 */
class Tag {
    /**
     * Constructs a new <code>Tag</code>.
     * @alias module:model/Tag
     * @param id {Number} Unique identifier for the tag
     * @param name {String} Friendly name for the tag
     */
    constructor(id, name) { 
        
        Tag.initialize(this, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['type'] = 'default';
    }

    /**
     * Constructs a <code>Tag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tag} obj Optional instance to populate.
     * @return {module:model/Tag} The populated <code>Tag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tag();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nbSites')) {
                obj['nbSites'] = ApiClient.convertToType(data['nbSites'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tag</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tag</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Tag.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Tag.RequiredProperties = ["id", "name"];

/**
 * Unique identifier for the tag
 * @member {Number} id
 */
Tag.prototype['id'] = undefined;

/**
 * Friendly name for the tag
 * @member {String} name
 */
Tag.prototype['name'] = undefined;

/**
 * Number of sites use this tag (required field id)
 * @member {Number} nbSites
 */
Tag.prototype['nbSites'] = undefined;

/**
 * Bootstrap color of the tag
 * @member {module:model/Tag.TypeEnum} type
 * @default 'default'
 */
Tag.prototype['type'] = 'default';





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Tag['TypeEnum'] = {

    /**
     * value: "default"
     * @const
     */
    "default": "default",

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "warning"
     * @const
     */
    "warning": "warning",

    /**
     * value: "important"
     * @const
     */
    "important": "important",

    /**
     * value: "info"
     * @const
     */
    "info": "info",

    /**
     * value: "inverse"
     * @const
     */
    "inverse": "inverse"
};



export default Tag;

