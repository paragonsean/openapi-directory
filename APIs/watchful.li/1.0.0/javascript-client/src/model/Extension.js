/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Extension model module.
 * @module model/Extension
 * @version 1.0.0
 */
class Extension {
    /**
     * Constructs a new <code>Extension</code>.
     * @alias module:model/Extension
     * @param idxSite {Number} Unique identifier for the site
     * @param type {String} Datetime of the log
     */
    constructor(idxSite, type) { 
        
        Extension.initialize(this, idxSite, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, idxSite, type) { 
        obj['idx_site'] = idxSite;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Extension</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Extension} obj Optional instance to populate.
     * @return {module:model/Extension} The populated <code>Extension</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Extension();

            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('ext_name')) {
                obj['ext_name'] = ApiClient.convertToType(data['ext_name'], 'String');
            }
            if (data.hasOwnProperty('idx_site')) {
                obj['idx_site'] = ApiClient.convertToType(data['idx_site'], 'Number');
            }
            if (data.hasOwnProperty('newVersion')) {
                obj['newVersion'] = ApiClient.convertToType(data['newVersion'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('vUpdate')) {
                obj['vUpdate'] = ApiClient.convertToType(data['vUpdate'], 'Number');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Extension</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Extension</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Extension.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['ext_name'] && !(typeof data['ext_name'] === 'string' || data['ext_name'] instanceof String)) {
            throw new Error("Expected the field `ext_name` to be a primitive type in the JSON string but got " + data['ext_name']);
        }
        // ensure the json data is a string
        if (data['newVersion'] && !(typeof data['newVersion'] === 'string' || data['newVersion'] instanceof String)) {
            throw new Error("Expected the field `newVersion` to be a primitive type in the JSON string but got " + data['newVersion']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

Extension.RequiredProperties = ["idx_site", "type"];

/**
 * Date of release
 * @member {String} date
 */
Extension.prototype['date'] = undefined;

/**
 * Extension name
 * @member {String} ext_name
 */
Extension.prototype['ext_name'] = undefined;

/**
 * Unique identifier for the site
 * @member {Number} idx_site
 */
Extension.prototype['idx_site'] = undefined;

/**
 * New version
 * @member {String} newVersion
 */
Extension.prototype['newVersion'] = undefined;

/**
 * Datetime of the log
 * @member {String} type
 */
Extension.prototype['type'] = undefined;

/**
 * Author URL
 * @member {String} url
 */
Extension.prototype['url'] = undefined;

/**
 * Update is available
 * @member {Number} vUpdate
 */
Extension.prototype['vUpdate'] = undefined;

/**
 * Extension version
 * @member {String} version
 */
Extension.prototype['version'] = undefined;






export default Extension;

