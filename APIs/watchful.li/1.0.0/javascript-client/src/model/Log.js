/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Log model module.
 * @module model/Log
 * @version 1.0.0
 */
class Log {
    /**
     * Constructs a new <code>Log</code>.
     * @alias module:model/Log
     * @param idLog {Number} Unique identifier for the log
     * @param idxSite {Number} Unique identifier for the site
     * @param logDate {String} Datetime of the log
     * @param logEntry {String} Log information
     * @param logLevel {Number} Level of log
     * @param userid {Number} Unique identifier for the user
     */
    constructor(idLog, idxSite, logDate, logEntry, logLevel, userid) { 
        
        Log.initialize(this, idLog, idxSite, logDate, logEntry, logLevel, userid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, idLog, idxSite, logDate, logEntry, logLevel, userid) { 
        obj['id_log'] = idLog;
        obj['idx_site'] = idxSite;
        obj['log_date'] = logDate;
        obj['log_entry'] = logEntry;
        obj['log_level'] = logLevel;
        obj['userid'] = userid;
    }

    /**
     * Constructs a <code>Log</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Log} obj Optional instance to populate.
     * @return {module:model/Log} The populated <code>Log</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Log();

            if (data.hasOwnProperty('Site name')) {
                obj['Site name'] = ApiClient.convertToType(data['Site name'], 'String');
            }
            if (data.hasOwnProperty('id_log')) {
                obj['id_log'] = ApiClient.convertToType(data['id_log'], 'Number');
            }
            if (data.hasOwnProperty('idx_site')) {
                obj['idx_site'] = ApiClient.convertToType(data['idx_site'], 'Number');
            }
            if (data.hasOwnProperty('log_date')) {
                obj['log_date'] = ApiClient.convertToType(data['log_date'], 'String');
            }
            if (data.hasOwnProperty('log_entry')) {
                obj['log_entry'] = ApiClient.convertToType(data['log_entry'], 'String');
            }
            if (data.hasOwnProperty('log_level')) {
                obj['log_level'] = ApiClient.convertToType(data['log_level'], 'Number');
            }
            if (data.hasOwnProperty('log_type')) {
                obj['log_type'] = ApiClient.convertToType(data['log_type'], 'String');
            }
            if (data.hasOwnProperty('userid')) {
                obj['userid'] = ApiClient.convertToType(data['userid'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Log</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Log</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Log.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Site name'] && !(typeof data['Site name'] === 'string' || data['Site name'] instanceof String)) {
            throw new Error("Expected the field `Site name` to be a primitive type in the JSON string but got " + data['Site name']);
        }
        // ensure the json data is a string
        if (data['log_date'] && !(typeof data['log_date'] === 'string' || data['log_date'] instanceof String)) {
            throw new Error("Expected the field `log_date` to be a primitive type in the JSON string but got " + data['log_date']);
        }
        // ensure the json data is a string
        if (data['log_entry'] && !(typeof data['log_entry'] === 'string' || data['log_entry'] instanceof String)) {
            throw new Error("Expected the field `log_entry` to be a primitive type in the JSON string but got " + data['log_entry']);
        }
        // ensure the json data is a string
        if (data['log_type'] && !(typeof data['log_type'] === 'string' || data['log_type'] instanceof String)) {
            throw new Error("Expected the field `log_type` to be a primitive type in the JSON string but got " + data['log_type']);
        }

        return true;
    }


}

Log.RequiredProperties = ["id_log", "idx_site", "log_date", "log_entry", "log_level", "userid"];

/**
 * Name of the site / readyonly
 * @member {String} Site name
 */
Log.prototype['Site name'] = undefined;

/**
 * Unique identifier for the log
 * @member {Number} id_log
 */
Log.prototype['id_log'] = undefined;

/**
 * Unique identifier for the site
 * @member {Number} idx_site
 */
Log.prototype['idx_site'] = undefined;

/**
 * Datetime of the log
 * @member {String} log_date
 */
Log.prototype['log_date'] = undefined;

/**
 * Log information
 * @member {String} log_entry
 */
Log.prototype['log_entry'] = undefined;

/**
 * Level of log
 * @member {Number} log_level
 */
Log.prototype['log_level'] = undefined;

/**
 * Type of log
 * @member {String} log_type
 */
Log.prototype['log_type'] = undefined;

/**
 * Unique identifier for the user
 * @member {Number} userid
 */
Log.prototype['userid'] = undefined;






export default Log;

