/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WatchfulLi);
  }
}(this, function(expect, WatchfulLi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WatchfulLi.SitesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SitesApi', function() {
    describe('addSiteToBackupQueue', function() {
      it('should call addSiteToBackupQueue successfully', function(done) {
        //uncomment below and update the code to test addSiteToBackupQueue
        //instance.addSiteToBackupQueue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAudits', function() {
      it('should call createAudits successfully', function(done) {
        //uncomment below and update the code to test createAudits
        //instance.createAudits(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLog', function() {
      it('should call createLog successfully', function(done) {
        //uncomment below and update the code to test createLog
        //instance.createLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSite', function() {
      it('should call createSite successfully', function(done) {
        //uncomment below and update the code to test createSite
        //instance.createSite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMonitor', function() {
      it('should call deleteMonitor successfully', function(done) {
        //uncomment below and update the code to test deleteMonitor
        //instance.deleteMonitor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBackupProfiles', function() {
      it('should call getBackupProfiles successfully', function(done) {
        //uncomment below and update the code to test getBackupProfiles
        //instance.getBackupProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getListBackups', function() {
      it('should call getListBackups successfully', function(done) {
        //uncomment below and update the code to test getListBackups
        //instance.getListBackups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSiteAudits', function() {
      it('should call getSiteAudits successfully', function(done) {
        //uncomment below and update the code to test getSiteAudits
        //instance.getSiteAudits(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSiteById', function() {
      it('should call getSiteById successfully', function(done) {
        //uncomment below and update the code to test getSiteById
        //instance.getSiteById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSites', function() {
      it('should call getSites successfully', function(done) {
        //uncomment below and update the code to test getSites
        //instance.getSites(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUptime', function() {
      it('should call getUptime successfully', function(done) {
        //uncomment below and update the code to test getUptime
        //instance.getUptime(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('installExtension', function() {
      it('should call installExtension successfully', function(done) {
        //uncomment below and update the code to test installExtension
        //instance.installExtension(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postMonitor', function() {
      it('should call postMonitor successfully', function(done) {
        //uncomment below and update the code to test postMonitor
        //instance.postMonitor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postTags', function() {
      it('should call postTags successfully', function(done) {
        //uncomment below and update the code to test postTags
        //instance.postTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('scanner', function() {
      it('should call scanner successfully', function(done) {
        //uncomment below and update the code to test scanner
        //instance.scanner(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('seoAnalyze', function() {
      it('should call seoAnalyze successfully', function(done) {
        //uncomment below and update the code to test seoAnalyze
        //instance.seoAnalyze(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sitesIdDelete', function() {
      it('should call sitesIdDelete successfully', function(done) {
        //uncomment below and update the code to test sitesIdDelete
        //instance.sitesIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sitesIdExtensionsGet', function() {
      it('should call sitesIdExtensionsGet successfully', function(done) {
        //uncomment below and update the code to test sitesIdExtensionsGet
        //instance.sitesIdExtensionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sitesIdLogsGet', function() {
      it('should call sitesIdLogsGet successfully', function(done) {
        //uncomment below and update the code to test sitesIdLogsGet
        //instance.sitesIdLogsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sitesIdPut', function() {
      it('should call sitesIdPut successfully', function(done) {
        //uncomment below and update the code to test sitesIdPut
        //instance.sitesIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sitesIdTagsGet', function() {
      it('should call sitesIdTagsGet successfully', function(done) {
        //uncomment below and update the code to test sitesIdTagsGet
        //instance.sitesIdTagsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sitesMetadataGet', function() {
      it('should call sitesMetadataGet successfully', function(done) {
        //uncomment below and update the code to test sitesMetadataGet
        //instance.sitesMetadataGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startSiteBackup', function() {
      it('should call startSiteBackup successfully', function(done) {
        //uncomment below and update the code to test startSiteBackup
        //instance.startSiteBackup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stepSiteBackup', function() {
      it('should call stepSiteBackup successfully', function(done) {
        //uncomment below and update the code to test stepSiteBackup
        //instance.stepSiteBackup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateJoomla', function() {
      it('should call updateJoomla successfully', function(done) {
        //uncomment below and update the code to test updateJoomla
        //instance.updateJoomla(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('validateDebugSite', function() {
      it('should call validateDebugSite successfully', function(done) {
        //uncomment below and update the code to test validateDebugSite
        //instance.validateDebugSite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('validateSite', function() {
      it('should call validateSite successfully', function(done) {
        //uncomment below and update the code to test validateSite
        //instance.validateSite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
