/*
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Extension
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:25.160218-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Extension {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_EXT_NAME = "ext_name";
  @SerializedName(SERIALIZED_NAME_EXT_NAME)
  private String extName;

  public static final String SERIALIZED_NAME_IDX_SITE = "idx_site";
  @SerializedName(SERIALIZED_NAME_IDX_SITE)
  private Long idxSite;

  public static final String SERIALIZED_NAME_NEW_VERSION = "newVersion";
  @SerializedName(SERIALIZED_NAME_NEW_VERSION)
  private String newVersion;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_V_UPDATE = "vUpdate";
  @SerializedName(SERIALIZED_NAME_V_UPDATE)
  private Integer vUpdate;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public Extension() {
  }

  public Extension date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Date of release
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public Extension extName(String extName) {
    this.extName = extName;
    return this;
  }

  /**
   * Extension name
   * @return extName
   */
  @javax.annotation.Nullable
  public String getExtName() {
    return extName;
  }

  public void setExtName(String extName) {
    this.extName = extName;
  }


  public Extension idxSite(Long idxSite) {
    this.idxSite = idxSite;
    return this;
  }

  /**
   * Unique identifier for the site
   * @return idxSite
   */
  @javax.annotation.Nonnull
  public Long getIdxSite() {
    return idxSite;
  }

  public void setIdxSite(Long idxSite) {
    this.idxSite = idxSite;
  }


  public Extension newVersion(String newVersion) {
    this.newVersion = newVersion;
    return this;
  }

  /**
   * New version
   * @return newVersion
   */
  @javax.annotation.Nullable
  public String getNewVersion() {
    return newVersion;
  }

  public void setNewVersion(String newVersion) {
    this.newVersion = newVersion;
  }


  public Extension type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Datetime of the log
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Extension url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Author URL
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Extension vUpdate(Integer vUpdate) {
    this.vUpdate = vUpdate;
    return this;
  }

  /**
   * Update is available
   * @return vUpdate
   */
  @javax.annotation.Nullable
  public Integer getvUpdate() {
    return vUpdate;
  }

  public void setvUpdate(Integer vUpdate) {
    this.vUpdate = vUpdate;
  }


  public Extension version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Extension version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Extension extension = (Extension) o;
    return Objects.equals(this.date, extension.date) &&
        Objects.equals(this.extName, extension.extName) &&
        Objects.equals(this.idxSite, extension.idxSite) &&
        Objects.equals(this.newVersion, extension.newVersion) &&
        Objects.equals(this.type, extension.type) &&
        Objects.equals(this.url, extension.url) &&
        Objects.equals(this.vUpdate, extension.vUpdate) &&
        Objects.equals(this.version, extension.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, extName, idxSite, newVersion, type, url, vUpdate, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Extension {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    extName: ").append(toIndentedString(extName)).append("\n");
    sb.append("    idxSite: ").append(toIndentedString(idxSite)).append("\n");
    sb.append("    newVersion: ").append(toIndentedString(newVersion)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    vUpdate: ").append(toIndentedString(vUpdate)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("ext_name");
    openapiFields.add("idx_site");
    openapiFields.add("newVersion");
    openapiFields.add("type");
    openapiFields.add("url");
    openapiFields.add("vUpdate");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("idx_site");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Extension
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Extension.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Extension is not found in the empty JSON string", Extension.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Extension.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Extension` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Extension.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("ext_name") != null && !jsonObj.get("ext_name").isJsonNull()) && !jsonObj.get("ext_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ext_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ext_name").toString()));
      }
      if ((jsonObj.get("newVersion") != null && !jsonObj.get("newVersion").isJsonNull()) && !jsonObj.get("newVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newVersion").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Extension.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Extension' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Extension> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Extension.class));

       return (TypeAdapter<T>) new TypeAdapter<Extension>() {
           @Override
           public void write(JsonWriter out, Extension value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Extension read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Extension given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Extension
   * @throws IOException if the JSON string is invalid with respect to Extension
   */
  public static Extension fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Extension.class);
  }

  /**
   * Convert an instance of Extension to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

