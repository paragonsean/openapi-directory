/*
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reportsSitesIdGet
     * @param id ID that needs to be fetched (required)
     * @param from Start of the report, format YYYY-MM-DD, default today-30day  (optional)
     * @param to End of the report, format YYYY-MM-DD, default today (optional)
     * @param reports Type of reports separate by comas: Ga,Logs,Uptime (optional)
     * @param logType Type of the log to show in the report (optional)
     * @param compare Define if you want show previous values in Google Analytics graph (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsSitesIdGetCall(Long id, String from, String to, String reports, String logType, Integer compare, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/sites/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (reports != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reports", reports));
        }

        if (logType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("log_type", logType));
        }

        if (compare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("compare", compare));
        }

        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsSitesIdGetValidateBeforeCall(Long id, String from, String to, String reports, String logType, Integer compare, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reportsSitesIdGet(Async)");
        }

        return reportsSitesIdGetCall(id, from, to, reports, logType, compare, _callback);

    }

    /**
     * Returns a PDF report for a specific site
     * Returns a PDF report based on a site ID
     * @param id ID that needs to be fetched (required)
     * @param from Start of the report, format YYYY-MM-DD, default today-30day  (optional)
     * @param to End of the report, format YYYY-MM-DD, default today (optional)
     * @param reports Type of reports separate by comas: Ga,Logs,Uptime (optional)
     * @param logType Type of the log to show in the report (optional)
     * @param compare Define if you want show previous values in Google Analytics graph (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Object reportsSitesIdGet(Long id, String from, String to, String reports, String logType, Integer compare) throws ApiException {
        ApiResponse<Object> localVarResp = reportsSitesIdGetWithHttpInfo(id, from, to, reports, logType, compare);
        return localVarResp.getData();
    }

    /**
     * Returns a PDF report for a specific site
     * Returns a PDF report based on a site ID
     * @param id ID that needs to be fetched (required)
     * @param from Start of the report, format YYYY-MM-DD, default today-30day  (optional)
     * @param to End of the report, format YYYY-MM-DD, default today (optional)
     * @param reports Type of reports separate by comas: Ga,Logs,Uptime (optional)
     * @param logType Type of the log to show in the report (optional)
     * @param compare Define if you want show previous values in Google Analytics graph (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> reportsSitesIdGetWithHttpInfo(Long id, String from, String to, String reports, String logType, Integer compare) throws ApiException {
        okhttp3.Call localVarCall = reportsSitesIdGetValidateBeforeCall(id, from, to, reports, logType, compare, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a PDF report for a specific site (asynchronously)
     * Returns a PDF report based on a site ID
     * @param id ID that needs to be fetched (required)
     * @param from Start of the report, format YYYY-MM-DD, default today-30day  (optional)
     * @param to End of the report, format YYYY-MM-DD, default today (optional)
     * @param reports Type of reports separate by comas: Ga,Logs,Uptime (optional)
     * @param logType Type of the log to show in the report (optional)
     * @param compare Define if you want show previous values in Google Analytics graph (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsSitesIdGetAsync(Long id, String from, String to, String reports, String logType, Integer compare, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsSitesIdGetValidateBeforeCall(id, from, to, reports, logType, compare, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsTagsIdGet
     * @param id ID that needs to be fetched (required)
     * @param from Start of the report, format YYYY-MM-DD, default today-30day  (optional)
     * @param to End of the report, format YYYY-MM-DD, default today (optional)
     * @param reports Type of reports separate by comas: Ga,Logs,Uptime (optional)
     * @param logType Type of the log to show in the report (optional)
     * @param compare Define if you want show previous values in Google Analytics graph (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsTagsIdGetCall(Long id, String from, String to, String reports, String logType, Integer compare, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/tags/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (reports != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reports", reports));
        }

        if (logType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("log_type", logType));
        }

        if (compare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("compare", compare));
        }

        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsTagsIdGetValidateBeforeCall(Long id, String from, String to, String reports, String logType, Integer compare, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling reportsTagsIdGet(Async)");
        }

        return reportsTagsIdGetCall(id, from, to, reports, logType, compare, _callback);

    }

    /**
     * Find sites by ID
     * Returns a report based on a site ID
     * @param id ID that needs to be fetched (required)
     * @param from Start of the report, format YYYY-MM-DD, default today-30day  (optional)
     * @param to End of the report, format YYYY-MM-DD, default today (optional)
     * @param reports Type of reports separate by comas: Ga,Logs,Uptime (optional)
     * @param logType Type of the log to show in the report (optional)
     * @param compare Define if you want show previous values in Google Analytics graph (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Object reportsTagsIdGet(Long id, String from, String to, String reports, String logType, Integer compare) throws ApiException {
        ApiResponse<Object> localVarResp = reportsTagsIdGetWithHttpInfo(id, from, to, reports, logType, compare);
        return localVarResp.getData();
    }

    /**
     * Find sites by ID
     * Returns a report based on a site ID
     * @param id ID that needs to be fetched (required)
     * @param from Start of the report, format YYYY-MM-DD, default today-30day  (optional)
     * @param to End of the report, format YYYY-MM-DD, default today (optional)
     * @param reports Type of reports separate by comas: Ga,Logs,Uptime (optional)
     * @param logType Type of the log to show in the report (optional)
     * @param compare Define if you want show previous values in Google Analytics graph (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> reportsTagsIdGetWithHttpInfo(Long id, String from, String to, String reports, String logType, Integer compare) throws ApiException {
        okhttp3.Call localVarCall = reportsTagsIdGetValidateBeforeCall(id, from, to, reports, logType, compare, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find sites by ID (asynchronously)
     * Returns a report based on a site ID
     * @param id ID that needs to be fetched (required)
     * @param from Start of the report, format YYYY-MM-DD, default today-30day  (optional)
     * @param to End of the report, format YYYY-MM-DD, default today (optional)
     * @param reports Type of reports separate by comas: Ga,Logs,Uptime (optional)
     * @param logType Type of the log to show in the report (optional)
     * @param compare Define if you want show previous values in Google Analytics graph (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsTagsIdGetAsync(Long id, String from, String to, String reports, String logType, Integer compare, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsTagsIdGetValidateBeforeCall(id, from, to, reports, logType, compare, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
