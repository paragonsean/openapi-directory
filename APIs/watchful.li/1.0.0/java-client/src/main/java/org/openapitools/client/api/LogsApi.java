/*
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Log;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LogsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LogsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LogsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteLogById
     * @param id ID of log that needs to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log correctly deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLogByIdCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLogByIdValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteLogById(Async)");
        }

        return deleteLogByIdCall(id, _callback);

    }

    /**
     * Delete a specific log
     * Delete a specific log
     * @param id ID of log that needs to be deleted (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log correctly deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public String deleteLogById(Long id) throws ApiException {
        ApiResponse<String> localVarResp = deleteLogByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a specific log
     * Delete a specific log
     * @param id ID of log that needs to be deleted (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log correctly deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> deleteLogByIdWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteLogByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a specific log (asynchronously)
     * Delete a specific log
     * @param id ID of log that needs to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log correctly deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLogByIdAsync(Long id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLogByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExportLogs
     * @param format Format of exported file (PDF or CSV) (required)
     * @param site Site id of the log (optional)
     * @param filterType Type of the log (optional)
     * @param search Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param startdate Logs after this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param enddate Logs before this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param startid Start of the return (default 0) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportLogsCall(String format, Long site, String filterType, String search, String startdate, String enddate, Long limit, Long startid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (filterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_type", filterType));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (startdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startdate", startdate));
        }

        if (enddate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enddate", enddate));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (startid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startid", startid));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExportLogsValidateBeforeCall(String format, Long site, String filterType, String search, String startdate, String enddate, Long limit, Long startid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling getExportLogs(Async)");
        }

        return getExportLogsCall(format, site, filterType, search, startdate, enddate, limit, startid, _callback);

    }

    /**
     * Get a CSV or PDF file contain the list of logs
     * Returns a file contain the list of logs
     * @param format Format of exported file (PDF or CSV) (required)
     * @param site Site id of the log (optional)
     * @param filterType Type of the log (optional)
     * @param search Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param startdate Logs after this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param enddate Logs before this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param startid Start of the return (default 0) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public void getExportLogs(String format, Long site, String filterType, String search, String startdate, String enddate, Long limit, Long startid) throws ApiException {
        getExportLogsWithHttpInfo(format, site, filterType, search, startdate, enddate, limit, startid);
    }

    /**
     * Get a CSV or PDF file contain the list of logs
     * Returns a file contain the list of logs
     * @param format Format of exported file (PDF or CSV) (required)
     * @param site Site id of the log (optional)
     * @param filterType Type of the log (optional)
     * @param search Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param startdate Logs after this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param enddate Logs before this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param startid Start of the return (default 0) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getExportLogsWithHttpInfo(String format, Long site, String filterType, String search, String startdate, String enddate, Long limit, Long startid) throws ApiException {
        okhttp3.Call localVarCall = getExportLogsValidateBeforeCall(format, site, filterType, search, startdate, enddate, limit, startid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a CSV or PDF file contain the list of logs (asynchronously)
     * Returns a file contain the list of logs
     * @param format Format of exported file (PDF or CSV) (required)
     * @param site Site id of the log (optional)
     * @param filterType Type of the log (optional)
     * @param search Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param startdate Logs after this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param enddate Logs before this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param startid Start of the return (default 0) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportLogsAsync(String format, Long site, String filterType, String search, String startdate, String enddate, Long limit, Long startid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExportLogsValidateBeforeCall(format, site, filterType, search, startdate, enddate, limit, startid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFieldsLogs
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldsLogsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldsLogsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getFieldsLogsCall(_callback);

    }

    /**
     * Get the list of fields
     * Returns a list of fields
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public String getFieldsLogs() throws ApiException {
        ApiResponse<String> localVarResp = getFieldsLogsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the list of fields
     * Returns a list of fields
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getFieldsLogsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getFieldsLogsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of fields (asynchronously)
     * Returns a list of fields
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldsLogsAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldsLogsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTypesLogs
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTypesLogsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTypesLogsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTypesLogsCall(_callback);

    }

    /**
     * Get the list of log types
     * Returns a list of log types
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public String getTypesLogs() throws ApiException {
        ApiResponse<String> localVarResp = getTypesLogsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the list of log types
     * Returns a list of log types
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getTypesLogsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTypesLogsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of log types (asynchronously)
     * Returns a list of log types
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTypesLogsAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTypesLogsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logsGet
     * @param logType Type of the log (optional)
     * @param logEntry Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param from Logs after this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param to Logs before this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsGetCall(String logType, String logEntry, String from, String to, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (logType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("log_type", logType));
        }

        if (logEntry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("log_entry", logEntry));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (limitstart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitstart", limitstart));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logsGetValidateBeforeCall(String logType, String logEntry, String from, String to, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        return logsGetCall(logType, logEntry, from, to, fields, limit, limitstart, order, _callback);

    }

    /**
     * Get a list of logs
     * Returns a list of logs
     * @param logType Type of the log (optional)
     * @param logEntry Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param from Logs after this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param to Logs before this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @return Log
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public Log logsGet(String logType, String logEntry, String from, String to, String fields, Long limit, Long limitstart, String order) throws ApiException {
        ApiResponse<Log> localVarResp = logsGetWithHttpInfo(logType, logEntry, from, to, fields, limit, limitstart, order);
        return localVarResp.getData();
    }

    /**
     * Get a list of logs
     * Returns a list of logs
     * @param logType Type of the log (optional)
     * @param logEntry Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param from Logs after this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param to Logs before this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @return ApiResponse&lt;Log&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Log> logsGetWithHttpInfo(String logType, String logEntry, String from, String to, String fields, Long limit, Long limitstart, String order) throws ApiException {
        okhttp3.Call localVarCall = logsGetValidateBeforeCall(logType, logEntry, from, to, fields, limit, limitstart, order, null);
        Type localVarReturnType = new TypeToken<Log>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of logs (asynchronously)
     * Returns a list of logs
     * @param logType Type of the log (optional)
     * @param logEntry Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param from Logs after this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param to Logs before this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logsGetAsync(String logType, String logEntry, String from, String to, String fields, Long limit, Long limitstart, String order, final ApiCallback<Log> _callback) throws ApiException {

        okhttp3.Call localVarCall = logsGetValidateBeforeCall(logType, logEntry, from, to, fields, limit, limitstart, order, _callback);
        Type localVarReturnType = new TypeToken<Log>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
