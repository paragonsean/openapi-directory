/*
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Audit;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuditsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuditsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuditsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAuditById
     * @param id ID of audit that needs to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audit correctly deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuditByIdCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audits/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAuditByIdValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAuditById(Async)");
        }

        return deleteAuditByIdCall(id, _callback);

    }

    /**
     * Delete a specific audit
     * Delete a specific audit
     * @param id ID of audit that needs to be deleted (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audit correctly deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public String deleteAuditById(Long id) throws ApiException {
        ApiResponse<String> localVarResp = deleteAuditByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a specific audit
     * Delete a specific audit
     * @param id ID of audit that needs to be deleted (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audit correctly deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> deleteAuditByIdWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteAuditByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a specific audit (asynchronously)
     * Delete a specific audit
     * @param id ID of audit that needs to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audit correctly deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuditByIdAsync(Long id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAuditByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuditById
     * @param id ID of audit that needs to be fetched (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuditByIdCall(Long id, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audits/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuditByIdValidateBeforeCall(Long id, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAuditById(Async)");
        }

        return getAuditByIdCall(id, fields, _callback);

    }

    /**
     * Find audit by ID
     * Returns a audit based on ID
     * @param id ID of audit that needs to be fetched (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @return Audit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public Audit getAuditById(Long id, String fields) throws ApiException {
        ApiResponse<Audit> localVarResp = getAuditByIdWithHttpInfo(id, fields);
        return localVarResp.getData();
    }

    /**
     * Find audit by ID
     * Returns a audit based on ID
     * @param id ID of audit that needs to be fetched (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @return ApiResponse&lt;Audit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Audit> getAuditByIdWithHttpInfo(Long id, String fields) throws ApiException {
        okhttp3.Call localVarCall = getAuditByIdValidateBeforeCall(id, fields, null);
        Type localVarReturnType = new TypeToken<Audit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find audit by ID (asynchronously)
     * Returns a audit based on ID
     * @param id ID of audit that needs to be fetched (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuditByIdAsync(Long id, String fields, final ApiCallback<Audit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuditByIdValidateBeforeCall(id, fields, _callback);
        Type localVarReturnType = new TypeToken<Audit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAudits
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuditsCall(Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (limitstart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitstart", limitstart));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuditsValidateBeforeCall(Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        return getAuditsCall(limit, limitstart, order, _callback);

    }

    /**
     * Get a list of audits
     * Returns a list of audits
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @return Audit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public Audit getAudits(Long limit, Long limitstart, String order) throws ApiException {
        ApiResponse<Audit> localVarResp = getAuditsWithHttpInfo(limit, limitstart, order);
        return localVarResp.getData();
    }

    /**
     * Get a list of audits
     * Returns a list of audits
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @return ApiResponse&lt;Audit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Audit> getAuditsWithHttpInfo(Long limit, Long limitstart, String order) throws ApiException {
        okhttp3.Call localVarCall = getAuditsValidateBeforeCall(limit, limitstart, order, null);
        Type localVarReturnType = new TypeToken<Audit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of audits (asynchronously)
     * Returns a list of audits
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuditsAsync(Long limit, Long limitstart, String order, final ApiCallback<Audit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuditsValidateBeforeCall(limit, limitstart, order, _callback);
        Type localVarReturnType = new TypeToken<Audit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFieldsAudits
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldsAuditsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/audits/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldsAuditsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getFieldsAuditsCall(_callback);

    }

    /**
     * Get the list of fields
     * Returns a list of fields
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public String getFieldsAudits() throws ApiException {
        ApiResponse<String> localVarResp = getFieldsAuditsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the list of fields
     * Returns a list of fields
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getFieldsAuditsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getFieldsAuditsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of fields (asynchronously)
     * Returns a list of fields
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldsAuditsAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldsAuditsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
