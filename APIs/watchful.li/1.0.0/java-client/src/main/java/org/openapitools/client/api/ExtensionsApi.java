/*
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Extension;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExtensionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExtensionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExtensionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getExtensions
     * @param extName Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param siteids List of sites id separated by comma (optional)
     * @param extPrefix Do a &#39;LIKE&#39; search, you can also use &#39;%&#39;. technical name of the extension com_xxxx (optional)
     * @param version Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param vUpdate update available for this extension (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtensionsCall(String extName, String siteids, String extPrefix, String version, Integer vUpdate, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extensions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (extName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ext_name", extName));
        }

        if (siteids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteids", siteids));
        }

        if (extPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ext_prefix", extPrefix));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (vUpdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vUpdate", vUpdate));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (limitstart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitstart", limitstart));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExtensionsValidateBeforeCall(String extName, String siteids, String extPrefix, String version, Integer vUpdate, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        return getExtensionsCall(extName, siteids, extPrefix, version, vUpdate, fields, limit, limitstart, order, _callback);

    }

    /**
     * Get a list Extensions
     * Returns a list Extensions
     * @param extName Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param siteids List of sites id separated by comma (optional)
     * @param extPrefix Do a &#39;LIKE&#39; search, you can also use &#39;%&#39;. technical name of the extension com_xxxx (optional)
     * @param version Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param vUpdate update available for this extension (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @return Extension
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid </td><td>  -  </td></tr>
     </table>
     */
    public Extension getExtensions(String extName, String siteids, String extPrefix, String version, Integer vUpdate, String fields, Long limit, Long limitstart, String order) throws ApiException {
        ApiResponse<Extension> localVarResp = getExtensionsWithHttpInfo(extName, siteids, extPrefix, version, vUpdate, fields, limit, limitstart, order);
        return localVarResp.getData();
    }

    /**
     * Get a list Extensions
     * Returns a list Extensions
     * @param extName Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param siteids List of sites id separated by comma (optional)
     * @param extPrefix Do a &#39;LIKE&#39; search, you can also use &#39;%&#39;. technical name of the extension com_xxxx (optional)
     * @param version Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param vUpdate update available for this extension (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @return ApiResponse&lt;Extension&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Extension> getExtensionsWithHttpInfo(String extName, String siteids, String extPrefix, String version, Integer vUpdate, String fields, Long limit, Long limitstart, String order) throws ApiException {
        okhttp3.Call localVarCall = getExtensionsValidateBeforeCall(extName, siteids, extPrefix, version, vUpdate, fields, limit, limitstart, order, null);
        Type localVarReturnType = new TypeToken<Extension>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list Extensions (asynchronously)
     * Returns a list Extensions
     * @param extName Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param siteids List of sites id separated by comma (optional)
     * @param extPrefix Do a &#39;LIKE&#39; search, you can also use &#39;%&#39;. technical name of the extension com_xxxx (optional)
     * @param version Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param vUpdate update available for this extension (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExtensionsAsync(String extName, String siteids, String extPrefix, String version, Integer vUpdate, String fields, Long limit, Long limitstart, String order, final ApiCallback<Extension> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExtensionsValidateBeforeCall(extName, siteids, extPrefix, version, vUpdate, fields, limit, limitstart, order, _callback);
        Type localVarReturnType = new TypeToken<Extension>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFieldsExtensions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldsExtensionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extensions/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldsExtensionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getFieldsExtensionsCall(_callback);

    }

    /**
     * Get the list of fields
     * Returns a list of fields
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public String getFieldsExtensions() throws ApiException {
        ApiResponse<String> localVarResp = getFieldsExtensionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the list of fields
     * Returns a list of fields
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getFieldsExtensionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getFieldsExtensionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of fields (asynchronously)
     * Returns a list of fields
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFieldsExtensionsAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldsExtensionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ignoreExtensionUpdate
     * @param id ID of the extension (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extension successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Update not found for the given extension </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ignoreExtensionUpdateCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extensions/{id}/ignore"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ignoreExtensionUpdateValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ignoreExtensionUpdate(Async)");
        }

        return ignoreExtensionUpdateCall(id, _callback);

    }

    /**
     * Set &#39;ignore updates&#39; for a given extension / site_id
     * Set &#39;ignore updates&#39; for a given extension / site_id
     * @param id ID of the extension (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extension successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Update not found for the given extension </td><td>  -  </td></tr>
     </table>
     */
    public String ignoreExtensionUpdate(Long id) throws ApiException {
        ApiResponse<String> localVarResp = ignoreExtensionUpdateWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Set &#39;ignore updates&#39; for a given extension / site_id
     * Set &#39;ignore updates&#39; for a given extension / site_id
     * @param id ID of the extension (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extension successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Update not found for the given extension </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> ignoreExtensionUpdateWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = ignoreExtensionUpdateValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set &#39;ignore updates&#39; for a given extension / site_id (asynchronously)
     * Set &#39;ignore updates&#39; for a given extension / site_id
     * @param id ID of the extension (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extension successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Update not found for the given extension </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ignoreExtensionUpdateAsync(Long id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = ignoreExtensionUpdateValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unignoreExtensionUpdate
     * @param id ID of the extension (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extension successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Update not found for the given extension </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unignoreExtensionUpdateCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extensions/{id}/unignore"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unignoreExtensionUpdateValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unignoreExtensionUpdate(Async)");
        }

        return unignoreExtensionUpdateCall(id, _callback);

    }

    /**
     * Remove &#39;ignore updates&#39; for a given extension
     * Remove &#39;ignore updates&#39; for a given extension
     * @param id ID of the extension (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extension successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Update not found for the given extension </td><td>  -  </td></tr>
     </table>
     */
    public String unignoreExtensionUpdate(Long id) throws ApiException {
        ApiResponse<String> localVarResp = unignoreExtensionUpdateWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Remove &#39;ignore updates&#39; for a given extension
     * Remove &#39;ignore updates&#39; for a given extension
     * @param id ID of the extension (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extension successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Update not found for the given extension </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> unignoreExtensionUpdateWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = unignoreExtensionUpdateValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove &#39;ignore updates&#39; for a given extension (asynchronously)
     * Remove &#39;ignore updates&#39; for a given extension
     * @param id ID of the extension (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extension successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Update not found for the given extension </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unignoreExtensionUpdateAsync(Long id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = unignoreExtensionUpdateValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExtension
     * @param id ID of the extension (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extension successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Update not found for the given extension </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtensionCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extensions/{id}/update"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExtensionValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateExtension(Async)");
        }

        return updateExtensionCall(id, _callback);

    }

    /**
     * Update the extension on the remote site
     * Update the extension on the remote site
     * @param id ID of the extension (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extension successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Update not found for the given extension </td><td>  -  </td></tr>
     </table>
     */
    public String updateExtension(Long id) throws ApiException {
        ApiResponse<String> localVarResp = updateExtensionWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Update the extension on the remote site
     * Update the extension on the remote site
     * @param id ID of the extension (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extension successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Update not found for the given extension </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> updateExtensionWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = updateExtensionValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the extension on the remote site (asynchronously)
     * Update the extension on the remote site
     * @param id ID of the extension (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Extension successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Update not found for the given extension </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExtensionAsync(Long id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExtensionValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
