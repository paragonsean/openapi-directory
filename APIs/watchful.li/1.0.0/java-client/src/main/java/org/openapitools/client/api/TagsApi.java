/*
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Site;
import org.openapitools.client.model.Tag;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TagsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TagsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TagsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTags
     * @param body JSON object Tag (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not saved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTagsCall(Tag body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTagsValidateBeforeCall(Tag body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createTags(Async)");
        }

        return createTagsCall(body, _callback);

    }

    /**
     * Create a tag
     * Create a tag
     * @param body JSON object Tag (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not saved </td><td>  -  </td></tr>
     </table>
     */
    public Tag createTags(Tag body) throws ApiException {
        ApiResponse<Tag> localVarResp = createTagsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create a tag
     * Create a tag
     * @param body JSON object Tag (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not saved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> createTagsWithHttpInfo(Tag body) throws ApiException {
        okhttp3.Call localVarCall = createTagsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a tag (asynchronously)
     * Create a tag
     * @param body JSON object Tag (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not saved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTagsAsync(Tag body, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTagsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSitesByTags
     * @param id ID of tag that needs to be fetched (required)
     * @param name Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param accessUrl Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param jVersion Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param ip Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param jUpdate Joomla core update (optional)
     * @param published is published (optional)
     * @param error have errors (optional)
     * @param nbUpdates  (optional)
     * @param up is the website online (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitesByTagsCall(Long id, String name, String accessUrl, String jVersion, String ip, Integer jUpdate, Integer published, String error, String nbUpdates, Integer up, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{id}/sites"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (accessUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_url", accessUrl));
        }

        if (jVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("j_version", jVersion));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (jUpdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jUpdate", jUpdate));
        }

        if (published != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published", published));
        }

        if (error != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("error", error));
        }

        if (nbUpdates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nbUpdates", nbUpdates));
        }

        if (up != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("up", up));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (limitstart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitstart", limitstart));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSitesByTagsValidateBeforeCall(Long id, String name, String accessUrl, String jVersion, String ip, Integer jUpdate, Integer published, String error, String nbUpdates, Integer up, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSitesByTags(Async)");
        }

        return getSitesByTagsCall(id, name, accessUrl, jVersion, ip, jUpdate, published, error, nbUpdates, up, fields, limit, limitstart, order, _callback);

    }

    /**
     * Find sites by tag ID
     * Returns a list of sites based with a specific tag id
     * @param id ID of tag that needs to be fetched (required)
     * @param name Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param accessUrl Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param jVersion Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param ip Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param jUpdate Joomla core update (optional)
     * @param published is published (optional)
     * @param error have errors (optional)
     * @param nbUpdates  (optional)
     * @param up is the website online (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Site getSitesByTags(Long id, String name, String accessUrl, String jVersion, String ip, Integer jUpdate, Integer published, String error, String nbUpdates, Integer up, String fields, Long limit, Long limitstart, String order) throws ApiException {
        ApiResponse<Site> localVarResp = getSitesByTagsWithHttpInfo(id, name, accessUrl, jVersion, ip, jUpdate, published, error, nbUpdates, up, fields, limit, limitstart, order);
        return localVarResp.getData();
    }

    /**
     * Find sites by tag ID
     * Returns a list of sites based with a specific tag id
     * @param id ID of tag that needs to be fetched (required)
     * @param name Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param accessUrl Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param jVersion Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param ip Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param jUpdate Joomla core update (optional)
     * @param published is published (optional)
     * @param error have errors (optional)
     * @param nbUpdates  (optional)
     * @param up is the website online (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> getSitesByTagsWithHttpInfo(Long id, String name, String accessUrl, String jVersion, String ip, Integer jUpdate, Integer published, String error, String nbUpdates, Integer up, String fields, Long limit, Long limitstart, String order) throws ApiException {
        okhttp3.Call localVarCall = getSitesByTagsValidateBeforeCall(id, name, accessUrl, jVersion, ip, jUpdate, published, error, nbUpdates, up, fields, limit, limitstart, order, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find sites by tag ID (asynchronously)
     * Returns a list of sites based with a specific tag id
     * @param id ID of tag that needs to be fetched (required)
     * @param name Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param accessUrl Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param jVersion Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param ip Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param jUpdate Joomla core update (optional)
     * @param published is published (optional)
     * @param error have errors (optional)
     * @param nbUpdates  (optional)
     * @param up is the website online (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitesByTagsAsync(Long id, String name, String accessUrl, String jVersion, String ip, Integer jUpdate, Integer published, String error, String nbUpdates, Integer up, String fields, Long limit, Long limitstart, String order, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSitesByTagsValidateBeforeCall(id, name, accessUrl, jVersion, ip, jUpdate, published, error, nbUpdates, up, fields, limit, limitstart, order, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTagById
     * @param id ID of tag that needs to be fetched (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagByIdCall(Long id, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTagByIdValidateBeforeCall(Long id, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTagById(Async)");
        }

        return getTagByIdCall(id, fields, _callback);

    }

    /**
     * Find tag by ID
     * Returns a tag based on ID
     * @param id ID of tag that needs to be fetched (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public Tag getTagById(Long id, String fields) throws ApiException {
        ApiResponse<Tag> localVarResp = getTagByIdWithHttpInfo(id, fields);
        return localVarResp.getData();
    }

    /**
     * Find tag by ID
     * Returns a tag based on ID
     * @param id ID of tag that needs to be fetched (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> getTagByIdWithHttpInfo(Long id, String fields) throws ApiException {
        okhttp3.Call localVarCall = getTagByIdValidateBeforeCall(id, fields, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find tag by ID (asynchronously)
     * Returns a tag based on ID
     * @param id ID of tag that needs to be fetched (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagByIdAsync(Long id, String fields, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTagByIdValidateBeforeCall(id, fields, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagsGet
     * @param name Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param type Bootstrap color of the tag (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsGetCall(String name, String type, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (limitstart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitstart", limitstart));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagsGetValidateBeforeCall(String name, String type, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        return tagsGetCall(name, type, fields, limit, limitstart, order, _callback);

    }

    /**
     * Get a list of tags
     * Returns a list of tags
     * @param name Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param type Bootstrap color of the tag (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public Tag tagsGet(String name, String type, String fields, Long limit, Long limitstart, String order) throws ApiException {
        ApiResponse<Tag> localVarResp = tagsGetWithHttpInfo(name, type, fields, limit, limitstart, order);
        return localVarResp.getData();
    }

    /**
     * Get a list of tags
     * Returns a list of tags
     * @param name Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param type Bootstrap color of the tag (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> tagsGetWithHttpInfo(String name, String type, String fields, Long limit, Long limitstart, String order) throws ApiException {
        okhttp3.Call localVarCall = tagsGetValidateBeforeCall(name, type, fields, limit, limitstart, order, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of tags (asynchronously)
     * Returns a list of tags
     * @param name Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param type Bootstrap color of the tag (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsGetAsync(String name, String type, String fields, Long limit, Long limitstart, String order, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagsGetValidateBeforeCall(name, type, fields, limit, limitstart, order, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagsIdDelete
     * @param id ID of tag that needs to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag correctly deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagsIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tagsIdDelete(Async)");
        }

        return tagsIdDeleteCall(id, _callback);

    }

    /**
     * Delete a specific tag
     * Delete a specific tag
     * @param id ID of tag that needs to be deleted (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag correctly deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public String tagsIdDelete(Long id) throws ApiException {
        ApiResponse<String> localVarResp = tagsIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a specific tag
     * Delete a specific tag
     * @param id ID of tag that needs to be deleted (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag correctly deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> tagsIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = tagsIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a specific tag (asynchronously)
     * Delete a specific tag
     * @param id ID of tag that needs to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag correctly deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsIdDeleteAsync(Long id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagsIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagsMetadataGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsMetadataGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagsMetadataGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return tagsMetadataGetCall(_callback);

    }

    /**
     * Get the list of fields
     * Returns a list of fields
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public String tagsMetadataGet() throws ApiException {
        ApiResponse<String> localVarResp = tagsMetadataGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the list of fields
     * Returns a list of fields
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> tagsMetadataGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tagsMetadataGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of fields (asynchronously)
     * Returns a list of fields
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagsMetadataGetAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagsMetadataGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTag
     * @param id ID of tag (required)
     * @param body JSON object of the updated tag (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTagCall(Long id, Tag body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/tags/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTagValidateBeforeCall(Long id, Tag body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTag(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTag(Async)");
        }

        return updateTagCall(id, body, _callback);

    }

    /**
     * Update a tag
     * Update a tag
     * @param id ID of tag (required)
     * @param body JSON object of the updated tag (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Tag updateTag(Long id, Tag body) throws ApiException {
        ApiResponse<Tag> localVarResp = updateTagWithHttpInfo(id, body);
        return localVarResp.getData();
    }

    /**
     * Update a tag
     * Update a tag
     * @param id ID of tag (required)
     * @param body JSON object of the updated tag (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> updateTagWithHttpInfo(Long id, Tag body) throws ApiException {
        okhttp3.Call localVarCall = updateTagValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a tag (asynchronously)
     * Update a tag
     * @param id ID of tag (required)
     * @param body JSON object of the updated tag (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTagAsync(Long id, Tag body, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTagValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
