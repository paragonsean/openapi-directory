/*
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostSite
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:25.160218-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostSite {
  public static final String SERIALIZED_NAME_ACCESS_URL = "access_url";
  @SerializedName(SERIALIZED_NAME_ACCESS_URL)
  private String accessUrl;

  public static final String SERIALIZED_NAME_ADMIN_URL = "admin_url";
  @SerializedName(SERIALIZED_NAME_ADMIN_URL)
  private String adminUrl;

  public static final String SERIALIZED_NAME_AKEEBA_PROFILE = "akeebaProfile";
  @SerializedName(SERIALIZED_NAME_AKEEBA_PROFILE)
  private String akeebaProfile;

  public static final String SERIALIZED_NAME_BACKUP_SCHEDULE = "backupSchedule";
  @SerializedName(SERIALIZED_NAME_BACKUP_SCHEDULE)
  private String backupSchedule;

  public static final String SERIALIZED_NAME_DATE_BACKUP = "dateBackup";
  @SerializedName(SERIALIZED_NAME_DATE_BACKUP)
  private String dateBackup;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private Boolean published;

  public static final String SERIALIZED_NAME_SECRET_WORD = "secret_word";
  @SerializedName(SERIALIZED_NAME_SECRET_WORD)
  private String secretWord;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;

  public static final String SERIALIZED_NAME_WORD_AKEEBA = "word_akeeba";
  @SerializedName(SERIALIZED_NAME_WORD_AKEEBA)
  private String wordAkeeba;

  public static final String SERIALIZED_NAME_WORD_CHECK = "word_check";
  @SerializedName(SERIALIZED_NAME_WORD_CHECK)
  private String wordCheck;

  public PostSite() {
  }

  public PostSite accessUrl(String accessUrl) {
    this.accessUrl = accessUrl;
    return this;
  }

  /**
   * URL of the site
   * @return accessUrl
   */
  @javax.annotation.Nonnull
  public String getAccessUrl() {
    return accessUrl;
  }

  public void setAccessUrl(String accessUrl) {
    this.accessUrl = accessUrl;
  }


  public PostSite adminUrl(String adminUrl) {
    this.adminUrl = adminUrl;
    return this;
  }

  /**
   * Adminsitration URL
   * @return adminUrl
   */
  @javax.annotation.Nullable
  public String getAdminUrl() {
    return adminUrl;
  }

  public void setAdminUrl(String adminUrl) {
    this.adminUrl = adminUrl;
  }


  public PostSite akeebaProfile(String akeebaProfile) {
    this.akeebaProfile = akeebaProfile;
    return this;
  }

  /**
   * Akeeba Profile
   * @return akeebaProfile
   */
  @javax.annotation.Nullable
  public String getAkeebaProfile() {
    return akeebaProfile;
  }

  public void setAkeebaProfile(String akeebaProfile) {
    this.akeebaProfile = akeebaProfile;
  }


  public PostSite backupSchedule(String backupSchedule) {
    this.backupSchedule = backupSchedule;
    return this;
  }

  /**
   * Backup Schedule
   * @return backupSchedule
   */
  @javax.annotation.Nullable
  public String getBackupSchedule() {
    return backupSchedule;
  }

  public void setBackupSchedule(String backupSchedule) {
    this.backupSchedule = backupSchedule;
  }


  public PostSite dateBackup(String dateBackup) {
    this.dateBackup = dateBackup;
    return this;
  }

  /**
   * Date backup
   * @return dateBackup
   */
  @javax.annotation.Nullable
  public String getDateBackup() {
    return dateBackup;
  }

  public void setDateBackup(String dateBackup) {
    this.dateBackup = dateBackup;
  }


  public PostSite name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Friendly name for the site
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PostSite notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Personnal note for the site
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public PostSite published(Boolean published) {
    this.published = published;
    return this;
  }

  /**
   * Published status of site
   * @return published
   */
  @javax.annotation.Nullable
  public Boolean getPublished() {
    return published;
  }

  public void setPublished(Boolean published) {
    this.published = published;
  }


  public PostSite secretWord(String secretWord) {
    this.secretWord = secretWord;
    return this;
  }

  /**
   * Watchful secret word
   * @return secretWord
   */
  @javax.annotation.Nullable
  public String getSecretWord() {
    return secretWord;
  }

  public void setSecretWord(String secretWord) {
    this.secretWord = secretWord;
  }


  public PostSite tags(String tags) {
    this.tags = tags;
    return this;
  }

  /**
   * JSON encoded array of tags for the site (e.g. [{&lt;q&gt;name&lt;/q&gt;:&lt;q&gt;mytag&lt;/q&gt;},{&lt;q&gt;name&lt;/q&gt;:&lt;q&gt;anothertag&lt;/q&gt;}])
   * @return tags
   */
  @javax.annotation.Nullable
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }


  public PostSite wordAkeeba(String wordAkeeba) {
    this.wordAkeeba = wordAkeeba;
    return this;
  }

  /**
   * Akeeba backup word
   * @return wordAkeeba
   */
  @javax.annotation.Nullable
  public String getWordAkeeba() {
    return wordAkeeba;
  }

  public void setWordAkeeba(String wordAkeeba) {
    this.wordAkeeba = wordAkeeba;
  }


  public PostSite wordCheck(String wordCheck) {
    this.wordCheck = wordCheck;
    return this;
  }

  /**
   * Word checked for uptime
   * @return wordCheck
   */
  @javax.annotation.Nullable
  public String getWordCheck() {
    return wordCheck;
  }

  public void setWordCheck(String wordCheck) {
    this.wordCheck = wordCheck;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostSite postSite = (PostSite) o;
    return Objects.equals(this.accessUrl, postSite.accessUrl) &&
        Objects.equals(this.adminUrl, postSite.adminUrl) &&
        Objects.equals(this.akeebaProfile, postSite.akeebaProfile) &&
        Objects.equals(this.backupSchedule, postSite.backupSchedule) &&
        Objects.equals(this.dateBackup, postSite.dateBackup) &&
        Objects.equals(this.name, postSite.name) &&
        Objects.equals(this.notes, postSite.notes) &&
        Objects.equals(this.published, postSite.published) &&
        Objects.equals(this.secretWord, postSite.secretWord) &&
        Objects.equals(this.tags, postSite.tags) &&
        Objects.equals(this.wordAkeeba, postSite.wordAkeeba) &&
        Objects.equals(this.wordCheck, postSite.wordCheck);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessUrl, adminUrl, akeebaProfile, backupSchedule, dateBackup, name, notes, published, secretWord, tags, wordAkeeba, wordCheck);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostSite {\n");
    sb.append("    accessUrl: ").append(toIndentedString(accessUrl)).append("\n");
    sb.append("    adminUrl: ").append(toIndentedString(adminUrl)).append("\n");
    sb.append("    akeebaProfile: ").append(toIndentedString(akeebaProfile)).append("\n");
    sb.append("    backupSchedule: ").append(toIndentedString(backupSchedule)).append("\n");
    sb.append("    dateBackup: ").append(toIndentedString(dateBackup)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    secretWord: ").append(toIndentedString(secretWord)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    wordAkeeba: ").append(toIndentedString(wordAkeeba)).append("\n");
    sb.append("    wordCheck: ").append(toIndentedString(wordCheck)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_url");
    openapiFields.add("admin_url");
    openapiFields.add("akeebaProfile");
    openapiFields.add("backupSchedule");
    openapiFields.add("dateBackup");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("published");
    openapiFields.add("secret_word");
    openapiFields.add("tags");
    openapiFields.add("word_akeeba");
    openapiFields.add("word_check");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("access_url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostSite
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostSite.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostSite is not found in the empty JSON string", PostSite.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostSite.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostSite` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostSite.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("access_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_url").toString()));
      }
      if ((jsonObj.get("admin_url") != null && !jsonObj.get("admin_url").isJsonNull()) && !jsonObj.get("admin_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin_url").toString()));
      }
      if ((jsonObj.get("akeebaProfile") != null && !jsonObj.get("akeebaProfile").isJsonNull()) && !jsonObj.get("akeebaProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `akeebaProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("akeebaProfile").toString()));
      }
      if ((jsonObj.get("backupSchedule") != null && !jsonObj.get("backupSchedule").isJsonNull()) && !jsonObj.get("backupSchedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupSchedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupSchedule").toString()));
      }
      if ((jsonObj.get("dateBackup") != null && !jsonObj.get("dateBackup").isJsonNull()) && !jsonObj.get("dateBackup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateBackup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateBackup").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("secret_word") != null && !jsonObj.get("secret_word").isJsonNull()) && !jsonObj.get("secret_word").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret_word` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret_word").toString()));
      }
      if ((jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("word_akeeba") != null && !jsonObj.get("word_akeeba").isJsonNull()) && !jsonObj.get("word_akeeba").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `word_akeeba` to be a primitive type in the JSON string but got `%s`", jsonObj.get("word_akeeba").toString()));
      }
      if ((jsonObj.get("word_check") != null && !jsonObj.get("word_check").isJsonNull()) && !jsonObj.get("word_check").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `word_check` to be a primitive type in the JSON string but got `%s`", jsonObj.get("word_check").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostSite.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostSite' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostSite> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostSite.class));

       return (TypeAdapter<T>) new TypeAdapter<PostSite>() {
           @Override
           public void write(JsonWriter out, PostSite value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostSite read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostSite given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostSite
   * @throws IOException if the JSON string is invalid with respect to PostSite
   */
  public static PostSite fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostSite.class);
  }

  /**
   * Convert an instance of PostSite to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

