/*
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Audit;
import org.openapitools.client.model.Extension;
import org.openapitools.client.model.Log;
import org.openapitools.client.model.PostLog;
import org.openapitools.client.model.PostSite;
import org.openapitools.client.model.Site;
import org.openapitools.client.model.Tag;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SitesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SitesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SitesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addSiteToBackupQueue
     * @param id ID of the website (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSiteToBackupQueueCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/backupnow"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addSiteToBackupQueueValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addSiteToBackupQueue(Async)");
        }

        return addSiteToBackupQueueCall(id, _callback);

    }

    /**
     * Add the site to the backup queue
     * Add the site to the backup queue
     * @param id ID of the website (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Site addSiteToBackupQueue(Long id) throws ApiException {
        ApiResponse<Site> localVarResp = addSiteToBackupQueueWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Add the site to the backup queue
     * Add the site to the backup queue
     * @param id ID of the website (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> addSiteToBackupQueueWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = addSiteToBackupQueueValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add the site to the backup queue (asynchronously)
     * Add the site to the backup queue
     * @param id ID of the website (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addSiteToBackupQueueAsync(Long id, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = addSiteToBackupQueueValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAudits
     * @param id ID of the website (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not saved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuditsCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/audits"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuditsValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createAudits(Async)");
        }

        return createAuditsCall(id, _callback);

    }

    /**
     * Create an audit for the site
     * Create an audit for the site
     * @param id ID of the website (required)
     * @return Audit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not saved </td><td>  -  </td></tr>
     </table>
     */
    public Audit createAudits(Long id) throws ApiException {
        ApiResponse<Audit> localVarResp = createAuditsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Create an audit for the site
     * Create an audit for the site
     * @param id ID of the website (required)
     * @return ApiResponse&lt;Audit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not saved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Audit> createAuditsWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = createAuditsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Audit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an audit for the site (asynchronously)
     * Create an audit for the site
     * @param id ID of the website (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not saved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuditsAsync(Long id, final ApiCallback<Audit> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuditsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Audit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createLog
     * @param id ID of the website (required)
     * @param body JSON object Log (only type custom) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not saved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLogCall(Long id, PostLog body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/sites/{id}/logs"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLogValidateBeforeCall(Long id, PostLog body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createLog(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createLog(Async)");
        }

        return createLogCall(id, body, _callback);

    }

    /**
     * Create a custom log for a specific website
     * Create a custom log for a specific website
     * @param id ID of the website (required)
     * @param body JSON object Log (only type custom) (required)
     * @return Log
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not saved </td><td>  -  </td></tr>
     </table>
     */
    public Log createLog(Long id, PostLog body) throws ApiException {
        ApiResponse<Log> localVarResp = createLogWithHttpInfo(id, body);
        return localVarResp.getData();
    }

    /**
     * Create a custom log for a specific website
     * Create a custom log for a specific website
     * @param id ID of the website (required)
     * @param body JSON object Log (only type custom) (required)
     * @return ApiResponse&lt;Log&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not saved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Log> createLogWithHttpInfo(Long id, PostLog body) throws ApiException {
        okhttp3.Call localVarCall = createLogValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<Log>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a custom log for a specific website (asynchronously)
     * Create a custom log for a specific website
     * @param id ID of the website (required)
     * @param body JSON object Log (only type custom) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not saved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createLogAsync(Long id, PostLog body, final ApiCallback<Log> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLogValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<Log>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSite
     * @param body JSON object Site (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed to add sites </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not saved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSiteCall(PostSite body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/sites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSiteValidateBeforeCall(PostSite body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSite(Async)");
        }

        return createSiteCall(body, _callback);

    }

    /**
     * Create a site
     * Create a site
     * @param body JSON object Site (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed to add sites </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not saved </td><td>  -  </td></tr>
     </table>
     */
    public Site createSite(PostSite body) throws ApiException {
        ApiResponse<Site> localVarResp = createSiteWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create a site
     * Create a site
     * @param body JSON object Site (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed to add sites </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not saved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> createSiteWithHttpInfo(PostSite body) throws ApiException {
        okhttp3.Call localVarCall = createSiteValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a site (asynchronously)
     * Create a site
     * @param body JSON object Site (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not allowed to add sites </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not saved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSiteAsync(PostSite body, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSiteValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMonitor
     * @param id ID of the website (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMonitorCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/monitor"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMonitorValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteMonitor(Async)");
        }

        return deleteMonitorCall(id, _callback);

    }

    /**
     * Delete uptime monitor
     * Return boolean
     * @param id ID of the website (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteMonitor(Long id) throws ApiException {
        ApiResponse<Object> localVarResp = deleteMonitorWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete uptime monitor
     * Return boolean
     * @param id ID of the website (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteMonitorWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteMonitorValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete uptime monitor (asynchronously)
     * Return boolean
     * @param id ID of the website (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMonitorAsync(Long id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMonitorValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBackupProfiles
     * @param id ID of the website (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBackupProfilesCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/backupprofiles"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBackupProfilesValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBackupProfiles(Async)");
        }

        return getBackupProfilesCall(id, _callback);

    }

    /**
     * Return backup profile
     * Return backup profile
     * @param id ID of the website (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void getBackupProfiles(Long id) throws ApiException {
        getBackupProfilesWithHttpInfo(id);
    }

    /**
     * Return backup profile
     * Return backup profile
     * @param id ID of the website (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getBackupProfilesWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getBackupProfilesValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Return backup profile (asynchronously)
     * Return backup profile
     * @param id ID of the website (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBackupProfilesAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBackupProfilesValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getListBackups
     * @param id ID of the website (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListBackupsCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/backups"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListBackupsValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getListBackups(Async)");
        }

        return getListBackupsCall(id, _callback);

    }

    /**
     * List of latest backups
     * List of latest backups
     * @param id ID of the website (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void getListBackups(Long id) throws ApiException {
        getListBackupsWithHttpInfo(id);
    }

    /**
     * List of latest backups
     * List of latest backups
     * @param id ID of the website (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getListBackupsWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getListBackupsValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List of latest backups (asynchronously)
     * List of latest backups
     * @param id ID of the website (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListBackupsAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListBackupsValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSiteAudits
     * @param id ID of the website (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSiteAuditsCall(Long id, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/audits"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (limitstart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitstart", limitstart));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSiteAuditsValidateBeforeCall(Long id, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSiteAudits(Async)");
        }

        return getSiteAuditsCall(id, fields, limit, limitstart, order, _callback);

    }

    /**
     * Return audits for a specific website
     * Return audits for a specific website
     * @param id ID of the website (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field (optional)
     * @return List&lt;Audit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<Audit> getSiteAudits(Long id, String fields, Long limit, Long limitstart, String order) throws ApiException {
        ApiResponse<List<Audit>> localVarResp = getSiteAuditsWithHttpInfo(id, fields, limit, limitstart, order);
        return localVarResp.getData();
    }

    /**
     * Return audits for a specific website
     * Return audits for a specific website
     * @param id ID of the website (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field (optional)
     * @return ApiResponse&lt;List&lt;Audit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Audit>> getSiteAuditsWithHttpInfo(Long id, String fields, Long limit, Long limitstart, String order) throws ApiException {
        okhttp3.Call localVarCall = getSiteAuditsValidateBeforeCall(id, fields, limit, limitstart, order, null);
        Type localVarReturnType = new TypeToken<List<Audit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return audits for a specific website (asynchronously)
     * Return audits for a specific website
     * @param id ID of the website (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSiteAuditsAsync(Long id, String fields, Long limit, Long limitstart, String order, final ApiCallback<List<Audit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSiteAuditsValidateBeforeCall(id, fields, limit, limitstart, order, _callback);
        Type localVarReturnType = new TypeToken<List<Audit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSiteById
     * @param id ID that needs to be fetched (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSiteByIdCall(Long id, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSiteByIdValidateBeforeCall(Long id, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSiteById(Async)");
        }

        return getSiteByIdCall(id, fields, _callback);

    }

    /**
     * Find sites by ID
     * Return a site based on ID
     * @param id ID that needs to be fetched (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Site getSiteById(Long id, String fields) throws ApiException {
        ApiResponse<Site> localVarResp = getSiteByIdWithHttpInfo(id, fields);
        return localVarResp.getData();
    }

    /**
     * Find sites by ID
     * Return a site based on ID
     * @param id ID that needs to be fetched (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> getSiteByIdWithHttpInfo(Long id, String fields) throws ApiException {
        okhttp3.Call localVarCall = getSiteByIdValidateBeforeCall(id, fields, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find sites by ID (asynchronously)
     * Return a site based on ID
     * @param id ID that needs to be fetched (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSiteByIdAsync(Long id, String fields, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSiteByIdValidateBeforeCall(id, fields, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSites
     * @param siteids List of sites id separated by comma (optional)
     * @param name Site name. Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param accessUrl Access URL. Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param jVersion Joomla version. Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param ip Ip address. Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param jUpdate Joomla core update status (1: update required, 0: update not required) (optional)
     * @param canUpdate canUpdate (optional)
     * @param published Is published (optional)
     * @param error Has errors (optional)
     * @param nbUpdates  (optional)
     * @param up Is online (optional)
     * @param fields Fields to return separated by commas (e.g. name,id) (optional)
     * @param limit Number of objects to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitesCall(String siteids, String name, String accessUrl, String jVersion, String ip, Integer jUpdate, Integer canUpdate, Integer published, String error, String nbUpdates, Integer up, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (siteids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteids", siteids));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (accessUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_url", accessUrl));
        }

        if (jVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("j_version", jVersion));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (jUpdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jUpdate", jUpdate));
        }

        if (canUpdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("canUpdate", canUpdate));
        }

        if (published != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("published", published));
        }

        if (error != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("error", error));
        }

        if (nbUpdates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nbUpdates", nbUpdates));
        }

        if (up != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("up", up));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (limitstart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitstart", limitstart));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSitesValidateBeforeCall(String siteids, String name, String accessUrl, String jVersion, String ip, Integer jUpdate, Integer canUpdate, Integer published, String error, String nbUpdates, Integer up, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        return getSitesCall(siteids, name, accessUrl, jVersion, ip, jUpdate, canUpdate, published, error, nbUpdates, up, fields, limit, limitstart, order, _callback);

    }

    /**
     * Get a list of Sites
     * Returns a list of Sites
     * @param siteids List of sites id separated by comma (optional)
     * @param name Site name. Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param accessUrl Access URL. Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param jVersion Joomla version. Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param ip Ip address. Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param jUpdate Joomla core update status (1: update required, 0: update not required) (optional)
     * @param canUpdate canUpdate (optional)
     * @param published Is published (optional)
     * @param error Has errors (optional)
     * @param nbUpdates  (optional)
     * @param up Is online (optional)
     * @param fields Fields to return separated by commas (e.g. name,id) (optional)
     * @param limit Number of objects to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Site getSites(String siteids, String name, String accessUrl, String jVersion, String ip, Integer jUpdate, Integer canUpdate, Integer published, String error, String nbUpdates, Integer up, String fields, Long limit, Long limitstart, String order) throws ApiException {
        ApiResponse<Site> localVarResp = getSitesWithHttpInfo(siteids, name, accessUrl, jVersion, ip, jUpdate, canUpdate, published, error, nbUpdates, up, fields, limit, limitstart, order);
        return localVarResp.getData();
    }

    /**
     * Get a list of Sites
     * Returns a list of Sites
     * @param siteids List of sites id separated by comma (optional)
     * @param name Site name. Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param accessUrl Access URL. Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param jVersion Joomla version. Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param ip Ip address. Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param jUpdate Joomla core update status (1: update required, 0: update not required) (optional)
     * @param canUpdate canUpdate (optional)
     * @param published Is published (optional)
     * @param error Has errors (optional)
     * @param nbUpdates  (optional)
     * @param up Is online (optional)
     * @param fields Fields to return separated by commas (e.g. name,id) (optional)
     * @param limit Number of objects to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> getSitesWithHttpInfo(String siteids, String name, String accessUrl, String jVersion, String ip, Integer jUpdate, Integer canUpdate, Integer published, String error, String nbUpdates, Integer up, String fields, Long limit, Long limitstart, String order) throws ApiException {
        okhttp3.Call localVarCall = getSitesValidateBeforeCall(siteids, name, accessUrl, jVersion, ip, jUpdate, canUpdate, published, error, nbUpdates, up, fields, limit, limitstart, order, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of Sites (asynchronously)
     * Returns a list of Sites
     * @param siteids List of sites id separated by comma (optional)
     * @param name Site name. Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param accessUrl Access URL. Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param jVersion Joomla version. Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param ip Ip address. Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param jUpdate Joomla core update status (1: update required, 0: update not required) (optional)
     * @param canUpdate canUpdate (optional)
     * @param published Is published (optional)
     * @param error Has errors (optional)
     * @param nbUpdates  (optional)
     * @param up Is online (optional)
     * @param fields Fields to return separated by commas (e.g. name,id) (optional)
     * @param limit Number of objects to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitesAsync(String siteids, String name, String accessUrl, String jVersion, String ip, Integer jUpdate, Integer canUpdate, Integer published, String error, String nbUpdates, Integer up, String fields, Long limit, Long limitstart, String order, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSitesValidateBeforeCall(siteids, name, accessUrl, jVersion, ip, jUpdate, canUpdate, published, error, nbUpdates, up, fields, limit, limitstart, order, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUptime
     * @param id ID of the website (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUptimeCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/uptime"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUptimeValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUptime(Async)");
        }

        return getUptimeCall(id, _callback);

    }

    /**
     * Return uptime data
     * Return uptime data
     * @param id ID of the website (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Object getUptime(Long id) throws ApiException {
        ApiResponse<Object> localVarResp = getUptimeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Return uptime data
     * Return uptime data
     * @param id ID of the website (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getUptimeWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getUptimeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return uptime data (asynchronously)
     * Return uptime data
     * @param id ID of the website (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUptimeAsync(Long id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUptimeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for installExtension
     * @param id ID of the website (required)
     * @param url URL to install the extension from (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call installExtensionCall(Long id, String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/extensions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call installExtensionValidateBeforeCall(Long id, String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling installExtension(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling installExtension(Async)");
        }

        return installExtensionCall(id, url, _callback);

    }

    /**
     * Install extension
     * 
     * @param id ID of the website (required)
     * @param url URL to install the extension from (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void installExtension(Long id, String url) throws ApiException {
        installExtensionWithHttpInfo(id, url);
    }

    /**
     * Install extension
     * 
     * @param id ID of the website (required)
     * @param url URL to install the extension from (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> installExtensionWithHttpInfo(Long id, String url) throws ApiException {
        okhttp3.Call localVarCall = installExtensionValidateBeforeCall(id, url, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Install extension (asynchronously)
     * 
     * @param id ID of the website (required)
     * @param url URL to install the extension from (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call installExtensionAsync(Long id, String url, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = installExtensionValidateBeforeCall(id, url, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postMonitor
     * @param id ID of the website (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMonitorCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/monitor"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postMonitorValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postMonitor(Async)");
        }

        return postMonitorCall(id, _callback);

    }

    /**
     * Post uptime monitor
     * Return boolean
     * @param id ID of the website (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Object postMonitor(Long id) throws ApiException {
        ApiResponse<Object> localVarResp = postMonitorWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Post uptime monitor
     * Return boolean
     * @param id ID of the website (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> postMonitorWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = postMonitorValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post uptime monitor (asynchronously)
     * Return boolean
     * @param id ID of the website (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMonitorAsync(Long id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = postMonitorValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTags
     * @param id ID of the website (required)
     * @param body JSON object Tag (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTagsCall(Long id, Tag body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/sites/{id}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTagsValidateBeforeCall(Long id, Tag body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postTags(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postTags(Async)");
        }

        return postTagsCall(id, body, _callback);

    }

    /**
     * Add tags for a specific website
     * Add tags for a specific website
     * @param id ID of the website (required)
     * @param body JSON object Tag (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Site postTags(Long id, Tag body) throws ApiException {
        ApiResponse<Site> localVarResp = postTagsWithHttpInfo(id, body);
        return localVarResp.getData();
    }

    /**
     * Add tags for a specific website
     * Add tags for a specific website
     * @param id ID of the website (required)
     * @param body JSON object Tag (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> postTagsWithHttpInfo(Long id, Tag body) throws ApiException {
        okhttp3.Call localVarCall = postTagsValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add tags for a specific website (asynchronously)
     * Add tags for a specific website
     * @param id ID of the website (required)
     * @param body JSON object Tag (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Saved successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTagsAsync(Long id, Tag body, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTagsValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scanner
     * @param id ID of the website (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scannerCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/scanner"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scannerValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling scanner(Async)");
        }

        return scannerCall(id, _callback);

    }

    /**
     * Scan the site for malware
     * Scan the site for malware
     * @param id ID of the website (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public String scanner(Long id) throws ApiException {
        ApiResponse<String> localVarResp = scannerWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Scan the site for malware
     * Scan the site for malware
     * @param id ID of the website (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> scannerWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = scannerValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Scan the site for malware (asynchronously)
     * Scan the site for malware
     * @param id ID of the website (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scannerAsync(Long id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = scannerValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for seoAnalyze
     * @param id ID of the website (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seoAnalyzeCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/seo"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seoAnalyzeValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seoAnalyze(Async)");
        }

        return seoAnalyzeCall(id, _callback);

    }

    /**
     * SEO analyze for a page
     * SEO analyze for a page
     * @param id ID of the website (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public String seoAnalyze(Long id) throws ApiException {
        ApiResponse<String> localVarResp = seoAnalyzeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * SEO analyze for a page
     * SEO analyze for a page
     * @param id ID of the website (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> seoAnalyzeWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = seoAnalyzeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SEO analyze for a page (asynchronously)
     * SEO analyze for a page
     * @param id ID of the website (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seoAnalyzeAsync(Long id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = seoAnalyzeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesIdDelete
     * @param id ID of Site that needs to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesIdDelete(Async)");
        }

        return sitesIdDeleteCall(id, _callback);

    }

    /**
     * Delete a specific Site
     * Delete a specific Site
     * @param id ID of Site that needs to be deleted (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public String sitesIdDelete(Long id) throws ApiException {
        ApiResponse<String> localVarResp = sitesIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a specific Site
     * Delete a specific Site
     * @param id ID of Site that needs to be deleted (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> sitesIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = sitesIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a specific Site (asynchronously)
     * Delete a specific Site
     * @param id ID of Site that needs to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted successfully </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesIdDeleteAsync(Long id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesIdExtensionsGet
     * @param id ID of the website (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesIdExtensionsGetCall(Long id, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/extensions"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (limitstart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitstart", limitstart));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesIdExtensionsGetValidateBeforeCall(Long id, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesIdExtensionsGet(Async)");
        }

        return sitesIdExtensionsGetCall(id, fields, limit, limitstart, order, _callback);

    }

    /**
     * Get extensions for a site
     * Get extensions for a site
     * @param id ID of the website (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field (optional)
     * @return Extension
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid </td><td>  -  </td></tr>
     </table>
     */
    public Extension sitesIdExtensionsGet(Long id, String fields, Long limit, Long limitstart, String order) throws ApiException {
        ApiResponse<Extension> localVarResp = sitesIdExtensionsGetWithHttpInfo(id, fields, limit, limitstart, order);
        return localVarResp.getData();
    }

    /**
     * Get extensions for a site
     * Get extensions for a site
     * @param id ID of the website (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field (optional)
     * @return ApiResponse&lt;Extension&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Extension> sitesIdExtensionsGetWithHttpInfo(Long id, String fields, Long limit, Long limitstart, String order) throws ApiException {
        okhttp3.Call localVarCall = sitesIdExtensionsGetValidateBeforeCall(id, fields, limit, limitstart, order, null);
        Type localVarReturnType = new TypeToken<Extension>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get extensions for a site (asynchronously)
     * Get extensions for a site
     * @param id ID of the website (required)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesIdExtensionsGetAsync(Long id, String fields, Long limit, Long limitstart, String order, final ApiCallback<Extension> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesIdExtensionsGetValidateBeforeCall(id, fields, limit, limitstart, order, _callback);
        Type localVarReturnType = new TypeToken<Extension>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesIdLogsGet
     * @param id ID of the website (required)
     * @param logEntry Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param logType Type of the log (optional)
     * @param from Logs after this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param to Logs before this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesIdLogsGetCall(Long id, String logEntry, String logType, String from, String to, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/logs"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (logEntry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("log_entry", logEntry));
        }

        if (logType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("log_type", logType));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (limitstart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitstart", limitstart));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesIdLogsGetValidateBeforeCall(Long id, String logEntry, String logType, String from, String to, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesIdLogsGet(Async)");
        }

        return sitesIdLogsGetCall(id, logEntry, logType, from, to, fields, limit, limitstart, order, _callback);

    }

    /**
     * Return logs for a specific website
     * Return logs for a specific website
     * @param id ID of the website (required)
     * @param logEntry Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param logType Type of the log (optional)
     * @param from Logs after this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param to Logs before this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @return Log
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Log sitesIdLogsGet(Long id, String logEntry, String logType, String from, String to, String fields, Long limit, Long limitstart, String order) throws ApiException {
        ApiResponse<Log> localVarResp = sitesIdLogsGetWithHttpInfo(id, logEntry, logType, from, to, fields, limit, limitstart, order);
        return localVarResp.getData();
    }

    /**
     * Return logs for a specific website
     * Return logs for a specific website
     * @param id ID of the website (required)
     * @param logEntry Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param logType Type of the log (optional)
     * @param from Logs after this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param to Logs before this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @return ApiResponse&lt;Log&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Log> sitesIdLogsGetWithHttpInfo(Long id, String logEntry, String logType, String from, String to, String fields, Long limit, Long limitstart, String order) throws ApiException {
        okhttp3.Call localVarCall = sitesIdLogsGetValidateBeforeCall(id, logEntry, logType, from, to, fields, limit, limitstart, order, null);
        Type localVarReturnType = new TypeToken<Log>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return logs for a specific website (asynchronously)
     * Return logs for a specific website
     * @param id ID of the website (required)
     * @param logEntry Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param logType Type of the log (optional)
     * @param from Logs after this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param to Logs before this date, format YYYY-MM-DD HH:MM:SS (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field separete by comas. Add + / - after field for set ASC / DESC: type+,name- (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesIdLogsGetAsync(Long id, String logEntry, String logType, String from, String to, String fields, Long limit, Long limitstart, String order, final ApiCallback<Log> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesIdLogsGetValidateBeforeCall(id, logEntry, logType, from, to, fields, limit, limitstart, order, _callback);
        Type localVarReturnType = new TypeToken<Log>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesIdPut
     * @param id ID of the website that needs to be update (required)
     * @param body JSON object Site (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesIdPutCall(Long id, PostSite body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/sites/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesIdPutValidateBeforeCall(Long id, PostSite body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesIdPut(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling sitesIdPut(Async)");
        }

        return sitesIdPutCall(id, body, _callback);

    }

    /**
     * Update a site
     * Update a site
     * @param id ID of the website that needs to be update (required)
     * @param body JSON object Site (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Site sitesIdPut(Long id, PostSite body) throws ApiException {
        ApiResponse<Site> localVarResp = sitesIdPutWithHttpInfo(id, body);
        return localVarResp.getData();
    }

    /**
     * Update a site
     * Update a site
     * @param id ID of the website that needs to be update (required)
     * @param body JSON object Site (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> sitesIdPutWithHttpInfo(Long id, PostSite body) throws ApiException {
        okhttp3.Call localVarCall = sitesIdPutValidateBeforeCall(id, body, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a site (asynchronously)
     * Update a site
     * @param id ID of the website that needs to be update (required)
     * @param body JSON object Site (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesIdPutAsync(Long id, PostSite body, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesIdPutValidateBeforeCall(id, body, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesIdTagsGet
     * @param id ID of the website (required)
     * @param name Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param type Bootstrap color of the tag (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesIdTagsGetCall(Long id, String name, String type, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/tags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (limitstart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitstart", limitstart));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesIdTagsGetValidateBeforeCall(Long id, String name, String type, String fields, Long limit, Long limitstart, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesIdTagsGet(Async)");
        }

        return sitesIdTagsGetCall(id, name, type, fields, limit, limitstart, order, _callback);

    }

    /**
     * Return tags for a specific website
     * Return tags for a specific website
     * @param id ID of the website (required)
     * @param name Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param type Bootstrap color of the tag (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field (optional)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Tag sitesIdTagsGet(Long id, String name, String type, String fields, Long limit, Long limitstart, String order) throws ApiException {
        ApiResponse<Tag> localVarResp = sitesIdTagsGetWithHttpInfo(id, name, type, fields, limit, limitstart, order);
        return localVarResp.getData();
    }

    /**
     * Return tags for a specific website
     * Return tags for a specific website
     * @param id ID of the website (required)
     * @param name Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param type Bootstrap color of the tag (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field (optional)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> sitesIdTagsGetWithHttpInfo(Long id, String name, String type, String fields, Long limit, Long limitstart, String order) throws ApiException {
        okhttp3.Call localVarCall = sitesIdTagsGetValidateBeforeCall(id, name, type, fields, limit, limitstart, order, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return tags for a specific website (asynchronously)
     * Return tags for a specific website
     * @param id ID of the website (required)
     * @param name Do a &#39;LIKE&#39; search, you can also use &#39;%&#39; (optional)
     * @param type Bootstrap color of the tag (optional)
     * @param fields Fields to return separate by comas: name,id (optional)
     * @param limit Number of object to return (max 100, default 25) (optional)
     * @param limitstart Start of the return (default 0) (optional)
     * @param order ORDER by this field (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesIdTagsGetAsync(Long id, String name, String type, String fields, Long limit, Long limitstart, String order, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesIdTagsGetValidateBeforeCall(id, name, type, fields, limit, limitstart, order, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesMetadataGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesMetadataGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesMetadataGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return sitesMetadataGetCall(_callback);

    }

    /**
     * Get the list of fields
     * Returns a list of fields
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public String sitesMetadataGet() throws ApiException {
        ApiResponse<String> localVarResp = sitesMetadataGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the list of fields
     * Returns a list of fields
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> sitesMetadataGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = sitesMetadataGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of fields (asynchronously)
     * Returns a list of fields
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesMetadataGetAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesMetadataGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startSiteBackup
     * @param id ID of the website (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startSiteBackupCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/backupstart"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startSiteBackupValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling startSiteBackup(Async)");
        }

        return startSiteBackupCall(id, _callback);

    }

    /**
     * Start a remote backup for the site
     * Start a remote backup for the site
     * @param id ID of the website (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Site startSiteBackup(Long id) throws ApiException {
        ApiResponse<Site> localVarResp = startSiteBackupWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Start a remote backup for the site
     * Start a remote backup for the site
     * @param id ID of the website (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> startSiteBackupWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = startSiteBackupValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a remote backup for the site (asynchronously)
     * Start a remote backup for the site
     * @param id ID of the website (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startSiteBackupAsync(Long id, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = startSiteBackupValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stepSiteBackup
     * @param id ID of the website (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stepSiteBackupCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/backupstep"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stepSiteBackupValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stepSiteBackup(Async)");
        }

        return stepSiteBackupCall(id, _callback);

    }

    /**
     * Step (continue) a remote backup for the site
     * Step (continue) a remote backup for the site
     * @param id ID of the website (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Site stepSiteBackup(Long id) throws ApiException {
        ApiResponse<Site> localVarResp = stepSiteBackupWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Step (continue) a remote backup for the site
     * Step (continue) a remote backup for the site
     * @param id ID of the website (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> stepSiteBackupWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = stepSiteBackupValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Step (continue) a remote backup for the site (asynchronously)
     * Step (continue) a remote backup for the site
     * @param id ID of the website (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stepSiteBackupAsync(Long id, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = stepSiteBackupValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateJoomla
     * @param id ID of the website (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Joomla core successfully updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID or Joomla Update not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateJoomlaCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/updatejoomla"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateJoomlaValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateJoomla(Async)");
        }

        return updateJoomlaCall(id, _callback);

    }

    /**
     * Update Joomla core on the remote site
     * Update Joomla core on the remote site
     * @param id ID of the website (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Joomla core successfully updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID or Joomla Update not found </td><td>  -  </td></tr>
     </table>
     */
    public String updateJoomla(Long id) throws ApiException {
        ApiResponse<String> localVarResp = updateJoomlaWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Update Joomla core on the remote site
     * Update Joomla core on the remote site
     * @param id ID of the website (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Joomla core successfully updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID or Joomla Update not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> updateJoomlaWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = updateJoomlaValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Joomla core on the remote site (asynchronously)
     * Update Joomla core on the remote site
     * @param id ID of the website (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Joomla core successfully updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID or Joomla Update not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateJoomlaAsync(Long id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateJoomlaValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateDebugSite
     * @param id ID of the website (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateDebugSiteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/validatedebug"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateDebugSiteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling validateDebugSite(Async)");
        }

        return validateDebugSiteCall(id, _callback);

    }

    /**
     * validate the site, return the debug information
     * 
     * @param id ID of the website (required)
     * @return Log
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Log validateDebugSite(Long id) throws ApiException {
        ApiResponse<Log> localVarResp = validateDebugSiteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * validate the site, return the debug information
     * 
     * @param id ID of the website (required)
     * @return ApiResponse&lt;Log&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Log> validateDebugSiteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = validateDebugSiteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Log>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * validate the site, return the debug information (asynchronously)
     * 
     * @param id ID of the website (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateDebugSiteAsync(Long id, final ApiCallback<Log> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateDebugSiteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Log>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateSite
     * @param id ID of the website (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateSiteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{id}/validate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateSiteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling validateSite(Async)");
        }

        return validateSiteCall(id, _callback);

    }

    /**
     * validate the site, return the new logs
     * validate the site
     * @param id ID of the website (required)
     * @return Log
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Log validateSite(Long id) throws ApiException {
        ApiResponse<Log> localVarResp = validateSiteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * validate the site, return the new logs
     * validate the site
     * @param id ID of the website (required)
     * @return ApiResponse&lt;Log&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Log> validateSiteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = validateSiteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Log>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * validate the site, return the new logs (asynchronously)
     * validate the site
     * @param id ID of the website (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateSiteAsync(Long id, final ApiCallback<Log> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateSiteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Log>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
