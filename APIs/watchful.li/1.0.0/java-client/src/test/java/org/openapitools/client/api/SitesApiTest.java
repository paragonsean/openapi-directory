/*
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Audit;
import org.openapitools.client.model.Extension;
import org.openapitools.client.model.Log;
import org.openapitools.client.model.PostLog;
import org.openapitools.client.model.PostSite;
import org.openapitools.client.model.Site;
import org.openapitools.client.model.Tag;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SitesApi
 */
@Disabled
public class SitesApiTest {

    private final SitesApi api = new SitesApi();

    /**
     * Add the site to the backup queue
     *
     * Add the site to the backup queue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSiteToBackupQueueTest() throws ApiException {
        Long id = null;
        Site response = api.addSiteToBackupQueue(id);
        // TODO: test validations
    }

    /**
     * Create an audit for the site
     *
     * Create an audit for the site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAuditsTest() throws ApiException {
        Long id = null;
        Audit response = api.createAudits(id);
        // TODO: test validations
    }

    /**
     * Create a custom log for a specific website
     *
     * Create a custom log for a specific website
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLogTest() throws ApiException {
        Long id = null;
        PostLog body = null;
        Log response = api.createLog(id, body);
        // TODO: test validations
    }

    /**
     * Create a site
     *
     * Create a site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSiteTest() throws ApiException {
        PostSite body = null;
        Site response = api.createSite(body);
        // TODO: test validations
    }

    /**
     * Delete uptime monitor
     *
     * Return boolean
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMonitorTest() throws ApiException {
        Long id = null;
        Object response = api.deleteMonitor(id);
        // TODO: test validations
    }

    /**
     * Return backup profile
     *
     * Return backup profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBackupProfilesTest() throws ApiException {
        Long id = null;
        api.getBackupProfiles(id);
        // TODO: test validations
    }

    /**
     * List of latest backups
     *
     * List of latest backups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListBackupsTest() throws ApiException {
        Long id = null;
        api.getListBackups(id);
        // TODO: test validations
    }

    /**
     * Return audits for a specific website
     *
     * Return audits for a specific website
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSiteAuditsTest() throws ApiException {
        Long id = null;
        String fields = null;
        Long limit = null;
        Long limitstart = null;
        String order = null;
        List<Audit> response = api.getSiteAudits(id, fields, limit, limitstart, order);
        // TODO: test validations
    }

    /**
     * Find sites by ID
     *
     * Return a site based on ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSiteByIdTest() throws ApiException {
        Long id = null;
        String fields = null;
        Site response = api.getSiteById(id, fields);
        // TODO: test validations
    }

    /**
     * Get a list of Sites
     *
     * Returns a list of Sites
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSitesTest() throws ApiException {
        String siteids = null;
        String name = null;
        String accessUrl = null;
        String jVersion = null;
        String ip = null;
        Integer jUpdate = null;
        Integer canUpdate = null;
        Integer published = null;
        String error = null;
        String nbUpdates = null;
        Integer up = null;
        String fields = null;
        Long limit = null;
        Long limitstart = null;
        String order = null;
        Site response = api.getSites(siteids, name, accessUrl, jVersion, ip, jUpdate, canUpdate, published, error, nbUpdates, up, fields, limit, limitstart, order);
        // TODO: test validations
    }

    /**
     * Return uptime data
     *
     * Return uptime data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUptimeTest() throws ApiException {
        Long id = null;
        Object response = api.getUptime(id);
        // TODO: test validations
    }

    /**
     * Install extension
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void installExtensionTest() throws ApiException {
        Long id = null;
        String url = null;
        api.installExtension(id, url);
        // TODO: test validations
    }

    /**
     * Post uptime monitor
     *
     * Return boolean
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postMonitorTest() throws ApiException {
        Long id = null;
        Object response = api.postMonitor(id);
        // TODO: test validations
    }

    /**
     * Add tags for a specific website
     *
     * Add tags for a specific website
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTagsTest() throws ApiException {
        Long id = null;
        Tag body = null;
        Site response = api.postTags(id, body);
        // TODO: test validations
    }

    /**
     * Scan the site for malware
     *
     * Scan the site for malware
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scannerTest() throws ApiException {
        Long id = null;
        String response = api.scanner(id);
        // TODO: test validations
    }

    /**
     * SEO analyze for a page
     *
     * SEO analyze for a page
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void seoAnalyzeTest() throws ApiException {
        Long id = null;
        String response = api.seoAnalyze(id);
        // TODO: test validations
    }

    /**
     * Delete a specific Site
     *
     * Delete a specific Site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesIdDeleteTest() throws ApiException {
        Long id = null;
        String response = api.sitesIdDelete(id);
        // TODO: test validations
    }

    /**
     * Get extensions for a site
     *
     * Get extensions for a site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesIdExtensionsGetTest() throws ApiException {
        Long id = null;
        String fields = null;
        Long limit = null;
        Long limitstart = null;
        String order = null;
        Extension response = api.sitesIdExtensionsGet(id, fields, limit, limitstart, order);
        // TODO: test validations
    }

    /**
     * Return logs for a specific website
     *
     * Return logs for a specific website
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesIdLogsGetTest() throws ApiException {
        Long id = null;
        String logEntry = null;
        String logType = null;
        String from = null;
        String to = null;
        String fields = null;
        Long limit = null;
        Long limitstart = null;
        String order = null;
        Log response = api.sitesIdLogsGet(id, logEntry, logType, from, to, fields, limit, limitstart, order);
        // TODO: test validations
    }

    /**
     * Update a site
     *
     * Update a site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesIdPutTest() throws ApiException {
        Long id = null;
        PostSite body = null;
        Site response = api.sitesIdPut(id, body);
        // TODO: test validations
    }

    /**
     * Return tags for a specific website
     *
     * Return tags for a specific website
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesIdTagsGetTest() throws ApiException {
        Long id = null;
        String name = null;
        String type = null;
        String fields = null;
        Long limit = null;
        Long limitstart = null;
        String order = null;
        Tag response = api.sitesIdTagsGet(id, name, type, fields, limit, limitstart, order);
        // TODO: test validations
    }

    /**
     * Get the list of fields
     *
     * Returns a list of fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesMetadataGetTest() throws ApiException {
        String response = api.sitesMetadataGet();
        // TODO: test validations
    }

    /**
     * Start a remote backup for the site
     *
     * Start a remote backup for the site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startSiteBackupTest() throws ApiException {
        Long id = null;
        Site response = api.startSiteBackup(id);
        // TODO: test validations
    }

    /**
     * Step (continue) a remote backup for the site
     *
     * Step (continue) a remote backup for the site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stepSiteBackupTest() throws ApiException {
        Long id = null;
        Site response = api.stepSiteBackup(id);
        // TODO: test validations
    }

    /**
     * Update Joomla core on the remote site
     *
     * Update Joomla core on the remote site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJoomlaTest() throws ApiException {
        Long id = null;
        String response = api.updateJoomla(id);
        // TODO: test validations
    }

    /**
     * validate the site, return the debug information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateDebugSiteTest() throws ApiException {
        Long id = null;
        Log response = api.validateDebugSite(id);
        // TODO: test validations
    }

    /**
     * validate the site, return the new logs
     *
     * validate the site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateSiteTest() throws ApiException {
        Long id = null;
        Log response = api.validateSite(id);
        // TODO: test validations
    }

}
