/*
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Site;
import org.openapitools.client.model.Tag;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TagsApi
 */
@Disabled
public class TagsApiTest {

    private final TagsApi api = new TagsApi();

    /**
     * Create a tag
     *
     * Create a tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagsTest() throws ApiException {
        Tag body = null;
        Tag response = api.createTags(body);
        // TODO: test validations
    }

    /**
     * Find sites by tag ID
     *
     * Returns a list of sites based with a specific tag id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSitesByTagsTest() throws ApiException {
        Long id = null;
        String name = null;
        String accessUrl = null;
        String jVersion = null;
        String ip = null;
        Integer jUpdate = null;
        Integer published = null;
        String error = null;
        String nbUpdates = null;
        Integer up = null;
        String fields = null;
        Long limit = null;
        Long limitstart = null;
        String order = null;
        Site response = api.getSitesByTags(id, name, accessUrl, jVersion, ip, jUpdate, published, error, nbUpdates, up, fields, limit, limitstart, order);
        // TODO: test validations
    }

    /**
     * Find tag by ID
     *
     * Returns a tag based on ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagByIdTest() throws ApiException {
        Long id = null;
        String fields = null;
        Tag response = api.getTagById(id, fields);
        // TODO: test validations
    }

    /**
     * Get a list of tags
     *
     * Returns a list of tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsGetTest() throws ApiException {
        String name = null;
        String type = null;
        String fields = null;
        Long limit = null;
        Long limitstart = null;
        String order = null;
        Tag response = api.tagsGet(name, type, fields, limit, limitstart, order);
        // TODO: test validations
    }

    /**
     * Delete a specific tag
     *
     * Delete a specific tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsIdDeleteTest() throws ApiException {
        Long id = null;
        String response = api.tagsIdDelete(id);
        // TODO: test validations
    }

    /**
     * Get the list of fields
     *
     * Returns a list of fields
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsMetadataGetTest() throws ApiException {
        String response = api.tagsMetadataGet();
        // TODO: test validations
    }

    /**
     * Update a tag
     *
     * Update a tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTagTest() throws ApiException {
        Long id = null;
        Tag body = null;
        Tag response = api.updateTag(id, body);
        // TODO: test validations
    }

}
