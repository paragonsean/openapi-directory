/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILog::OAILog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILog::OAILog() {
    this->initializeModel();
}

OAILog::~OAILog() {}

void OAILog::initializeModel() {

    m_site_name_isSet = false;
    m_site_name_isValid = false;

    m_id_log_isSet = false;
    m_id_log_isValid = false;

    m_idx_site_isSet = false;
    m_idx_site_isValid = false;

    m_log_date_isSet = false;
    m_log_date_isValid = false;

    m_log_entry_isSet = false;
    m_log_entry_isValid = false;

    m_log_level_isSet = false;
    m_log_level_isValid = false;

    m_log_type_isSet = false;
    m_log_type_isValid = false;

    m_userid_isSet = false;
    m_userid_isValid = false;
}

void OAILog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILog::fromJsonObject(QJsonObject json) {

    m_site_name_isValid = ::OpenAPI::fromJsonValue(m_site_name, json[QString("Site name")]);
    m_site_name_isSet = !json[QString("Site name")].isNull() && m_site_name_isValid;

    m_id_log_isValid = ::OpenAPI::fromJsonValue(m_id_log, json[QString("id_log")]);
    m_id_log_isSet = !json[QString("id_log")].isNull() && m_id_log_isValid;

    m_idx_site_isValid = ::OpenAPI::fromJsonValue(m_idx_site, json[QString("idx_site")]);
    m_idx_site_isSet = !json[QString("idx_site")].isNull() && m_idx_site_isValid;

    m_log_date_isValid = ::OpenAPI::fromJsonValue(m_log_date, json[QString("log_date")]);
    m_log_date_isSet = !json[QString("log_date")].isNull() && m_log_date_isValid;

    m_log_entry_isValid = ::OpenAPI::fromJsonValue(m_log_entry, json[QString("log_entry")]);
    m_log_entry_isSet = !json[QString("log_entry")].isNull() && m_log_entry_isValid;

    m_log_level_isValid = ::OpenAPI::fromJsonValue(m_log_level, json[QString("log_level")]);
    m_log_level_isSet = !json[QString("log_level")].isNull() && m_log_level_isValid;

    m_log_type_isValid = ::OpenAPI::fromJsonValue(m_log_type, json[QString("log_type")]);
    m_log_type_isSet = !json[QString("log_type")].isNull() && m_log_type_isValid;

    m_userid_isValid = ::OpenAPI::fromJsonValue(m_userid, json[QString("userid")]);
    m_userid_isSet = !json[QString("userid")].isNull() && m_userid_isValid;
}

QString OAILog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILog::asJsonObject() const {
    QJsonObject obj;
    if (m_site_name_isSet) {
        obj.insert(QString("Site name"), ::OpenAPI::toJsonValue(m_site_name));
    }
    if (m_id_log_isSet) {
        obj.insert(QString("id_log"), ::OpenAPI::toJsonValue(m_id_log));
    }
    if (m_idx_site_isSet) {
        obj.insert(QString("idx_site"), ::OpenAPI::toJsonValue(m_idx_site));
    }
    if (m_log_date_isSet) {
        obj.insert(QString("log_date"), ::OpenAPI::toJsonValue(m_log_date));
    }
    if (m_log_entry_isSet) {
        obj.insert(QString("log_entry"), ::OpenAPI::toJsonValue(m_log_entry));
    }
    if (m_log_level_isSet) {
        obj.insert(QString("log_level"), ::OpenAPI::toJsonValue(m_log_level));
    }
    if (m_log_type_isSet) {
        obj.insert(QString("log_type"), ::OpenAPI::toJsonValue(m_log_type));
    }
    if (m_userid_isSet) {
        obj.insert(QString("userid"), ::OpenAPI::toJsonValue(m_userid));
    }
    return obj;
}

QString OAILog::getSiteName() const {
    return m_site_name;
}
void OAILog::setSiteName(const QString &site_name) {
    m_site_name = site_name;
    m_site_name_isSet = true;
}

bool OAILog::is_site_name_Set() const{
    return m_site_name_isSet;
}

bool OAILog::is_site_name_Valid() const{
    return m_site_name_isValid;
}

qint64 OAILog::getIdLog() const {
    return m_id_log;
}
void OAILog::setIdLog(const qint64 &id_log) {
    m_id_log = id_log;
    m_id_log_isSet = true;
}

bool OAILog::is_id_log_Set() const{
    return m_id_log_isSet;
}

bool OAILog::is_id_log_Valid() const{
    return m_id_log_isValid;
}

qint64 OAILog::getIdxSite() const {
    return m_idx_site;
}
void OAILog::setIdxSite(const qint64 &idx_site) {
    m_idx_site = idx_site;
    m_idx_site_isSet = true;
}

bool OAILog::is_idx_site_Set() const{
    return m_idx_site_isSet;
}

bool OAILog::is_idx_site_Valid() const{
    return m_idx_site_isValid;
}

QString OAILog::getLogDate() const {
    return m_log_date;
}
void OAILog::setLogDate(const QString &log_date) {
    m_log_date = log_date;
    m_log_date_isSet = true;
}

bool OAILog::is_log_date_Set() const{
    return m_log_date_isSet;
}

bool OAILog::is_log_date_Valid() const{
    return m_log_date_isValid;
}

QString OAILog::getLogEntry() const {
    return m_log_entry;
}
void OAILog::setLogEntry(const QString &log_entry) {
    m_log_entry = log_entry;
    m_log_entry_isSet = true;
}

bool OAILog::is_log_entry_Set() const{
    return m_log_entry_isSet;
}

bool OAILog::is_log_entry_Valid() const{
    return m_log_entry_isValid;
}

qint64 OAILog::getLogLevel() const {
    return m_log_level;
}
void OAILog::setLogLevel(const qint64 &log_level) {
    m_log_level = log_level;
    m_log_level_isSet = true;
}

bool OAILog::is_log_level_Set() const{
    return m_log_level_isSet;
}

bool OAILog::is_log_level_Valid() const{
    return m_log_level_isValid;
}

QString OAILog::getLogType() const {
    return m_log_type;
}
void OAILog::setLogType(const QString &log_type) {
    m_log_type = log_type;
    m_log_type_isSet = true;
}

bool OAILog::is_log_type_Set() const{
    return m_log_type_isSet;
}

bool OAILog::is_log_type_Valid() const{
    return m_log_type_isValid;
}

qint64 OAILog::getUserid() const {
    return m_userid;
}
void OAILog::setUserid(const qint64 &userid) {
    m_userid = userid;
    m_userid_isSet = true;
}

bool OAILog::is_userid_Set() const{
    return m_userid_isSet;
}

bool OAILog::is_userid_Valid() const{
    return m_userid_isValid;
}

bool OAILog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_site_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idx_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_entry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_userid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILog::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_log_isValid && m_idx_site_isValid && m_log_date_isValid && m_log_entry_isValid && m_log_level_isValid && m_userid_isValid && true;
}

} // namespace OpenAPI
