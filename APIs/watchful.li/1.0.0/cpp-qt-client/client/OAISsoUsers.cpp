/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISsoUsers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISsoUsers::OAISsoUsers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISsoUsers::OAISsoUsers() {
    this->initializeModel();
}

OAISsoUsers::~OAISsoUsers() {}

void OAISsoUsers::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_groupid_isSet = false;
    m_groupid_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_login_date_isSet = false;
    m_last_login_date_isValid = false;

    m_last_login_site_isSet = false;
    m_last_login_site_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_userid_isSet = false;
    m_userid_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAISsoUsers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISsoUsers::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_groupid_isValid = ::OpenAPI::fromJsonValue(m_groupid, json[QString("groupid")]);
    m_groupid_isSet = !json[QString("groupid")].isNull() && m_groupid_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_login_date_isValid = ::OpenAPI::fromJsonValue(m_last_login_date, json[QString("lastLoginDate")]);
    m_last_login_date_isSet = !json[QString("lastLoginDate")].isNull() && m_last_login_date_isValid;

    m_last_login_site_isValid = ::OpenAPI::fromJsonValue(m_last_login_site, json[QString("lastLoginSite")]);
    m_last_login_site_isSet = !json[QString("lastLoginSite")].isNull() && m_last_login_site_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_userid_isValid = ::OpenAPI::fromJsonValue(m_userid, json[QString("userid")]);
    m_userid_isSet = !json[QString("userid")].isNull() && m_userid_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAISsoUsers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISsoUsers::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_groupid_isSet) {
        obj.insert(QString("groupid"), ::OpenAPI::toJsonValue(m_groupid));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_login_date_isSet) {
        obj.insert(QString("lastLoginDate"), ::OpenAPI::toJsonValue(m_last_login_date));
    }
    if (m_last_login_site_isSet) {
        obj.insert(QString("lastLoginSite"), ::OpenAPI::toJsonValue(m_last_login_site));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_userid_isSet) {
        obj.insert(QString("userid"), ::OpenAPI::toJsonValue(m_userid));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAISsoUsers::getEmail() const {
    return m_email;
}
void OAISsoUsers::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISsoUsers::is_email_Set() const{
    return m_email_isSet;
}

bool OAISsoUsers::is_email_Valid() const{
    return m_email_isValid;
}

qint64 OAISsoUsers::getGroupid() const {
    return m_groupid;
}
void OAISsoUsers::setGroupid(const qint64 &groupid) {
    m_groupid = groupid;
    m_groupid_isSet = true;
}

bool OAISsoUsers::is_groupid_Set() const{
    return m_groupid_isSet;
}

bool OAISsoUsers::is_groupid_Valid() const{
    return m_groupid_isValid;
}

qint64 OAISsoUsers::getId() const {
    return m_id;
}
void OAISsoUsers::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISsoUsers::is_id_Set() const{
    return m_id_isSet;
}

bool OAISsoUsers::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAISsoUsers::getLastLoginDate() const {
    return m_last_login_date;
}
void OAISsoUsers::setLastLoginDate(const QDateTime &last_login_date) {
    m_last_login_date = last_login_date;
    m_last_login_date_isSet = true;
}

bool OAISsoUsers::is_last_login_date_Set() const{
    return m_last_login_date_isSet;
}

bool OAISsoUsers::is_last_login_date_Valid() const{
    return m_last_login_date_isValid;
}

qint64 OAISsoUsers::getLastLoginSite() const {
    return m_last_login_site;
}
void OAISsoUsers::setLastLoginSite(const qint64 &last_login_site) {
    m_last_login_site = last_login_site;
    m_last_login_site_isSet = true;
}

bool OAISsoUsers::is_last_login_site_Set() const{
    return m_last_login_site_isSet;
}

bool OAISsoUsers::is_last_login_site_Valid() const{
    return m_last_login_site_isValid;
}

QString OAISsoUsers::getName() const {
    return m_name;
}
void OAISsoUsers::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISsoUsers::is_name_Set() const{
    return m_name_isSet;
}

bool OAISsoUsers::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISsoUsers::getPassword() const {
    return m_password;
}
void OAISsoUsers::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAISsoUsers::is_password_Set() const{
    return m_password_isSet;
}

bool OAISsoUsers::is_password_Valid() const{
    return m_password_isValid;
}

qint64 OAISsoUsers::getUserid() const {
    return m_userid;
}
void OAISsoUsers::setUserid(const qint64 &userid) {
    m_userid = userid;
    m_userid_isSet = true;
}

bool OAISsoUsers::is_userid_Set() const{
    return m_userid_isSet;
}

bool OAISsoUsers::is_userid_Valid() const{
    return m_userid_isValid;
}

QString OAISsoUsers::getUsername() const {
    return m_username;
}
void OAISsoUsers::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAISsoUsers::is_username_Set() const{
    return m_username_isSet;
}

bool OAISsoUsers::is_username_Valid() const{
    return m_username_isValid;
}

bool OAISsoUsers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groupid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_userid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISsoUsers::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_groupid_isValid && m_id_isValid && m_name_isValid && m_password_isValid && m_userid_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
