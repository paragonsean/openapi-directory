/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITagsApi_H
#define OAI_OAITagsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISite.h"
#include "OAITag.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITagsApi : public QObject {
    Q_OBJECT

public:
    OAITagsApi(const int timeOut = 0);
    ~OAITagsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAITag [required]
    */
    virtual void createTags(const OAITag &body);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  name QString [optional]
    * @param[in]  access_url QString [optional]
    * @param[in]  j_version QString [optional]
    * @param[in]  ip QString [optional]
    * @param[in]  j_update qint32 [optional]
    * @param[in]  published qint32 [optional]
    * @param[in]  error QString [optional]
    * @param[in]  nb_updates QString [optional]
    * @param[in]  up qint32 [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  limitstart qint64 [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getSitesByTags(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &j_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &j_update = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &published = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &error = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nb_updates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &up = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limitstart = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getTagById(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  limitstart qint64 [optional]
    * @param[in]  order QString [optional]
    */
    virtual void tagsGet(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limitstart = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void tagsIdDelete(const qint64 &id);


    virtual void tagsMetadataGet();

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  body OAITag [required]
    */
    virtual void updateTag(const qint64 &id, const OAITag &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTagsCallback(OAIHttpRequestWorker *worker);
    void getSitesByTagsCallback(OAIHttpRequestWorker *worker);
    void getTagByIdCallback(OAIHttpRequestWorker *worker);
    void tagsGetCallback(OAIHttpRequestWorker *worker);
    void tagsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void tagsMetadataGetCallback(OAIHttpRequestWorker *worker);
    void updateTagCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTagsSignal(OAITag summary);
    void getSitesByTagsSignal(OAISite summary);
    void getTagByIdSignal(OAITag summary);
    void tagsGetSignal(OAITag summary);
    void tagsIdDeleteSignal(QString summary);
    void tagsMetadataGetSignal(QString summary);
    void updateTagSignal(OAITag summary);


    void createTagsSignalFull(OAIHttpRequestWorker *worker, OAITag summary);
    void getSitesByTagsSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void getTagByIdSignalFull(OAIHttpRequestWorker *worker, OAITag summary);
    void tagsGetSignalFull(OAIHttpRequestWorker *worker, OAITag summary);
    void tagsIdDeleteSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void tagsMetadataGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void updateTagSignalFull(OAIHttpRequestWorker *worker, OAITag summary);

    Q_DECL_DEPRECATED_X("Use createTagsSignalError() instead")
    void createTagsSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTagsSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSitesByTagsSignalError() instead")
    void getSitesByTagsSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSitesByTagsSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagByIdSignalError() instead")
    void getTagByIdSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagByIdSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsGetSignalError() instead")
    void tagsGetSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsIdDeleteSignalError() instead")
    void tagsIdDeleteSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsIdDeleteSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsMetadataGetSignalError() instead")
    void tagsMetadataGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsMetadataGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTagSignalError() instead")
    void updateTagSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTagSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTagsSignalErrorFull() instead")
    void createTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSitesByTagsSignalErrorFull() instead")
    void getSitesByTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSitesByTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagByIdSignalErrorFull() instead")
    void getTagByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsGetSignalErrorFull() instead")
    void tagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsIdDeleteSignalErrorFull() instead")
    void tagsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsMetadataGetSignalErrorFull() instead")
    void tagsMetadataGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsMetadataGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTagSignalErrorFull() instead")
    void updateTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
