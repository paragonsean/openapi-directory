/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILogsApi_H
#define OAI_OAILogsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILog.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILogsApi : public QObject {
    Q_OBJECT

public:
    OAILogsApi(const int timeOut = 0);
    ~OAILogsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteLogById(const qint64 &id);

    /**
    * @param[in]  format QString [required]
    * @param[in]  site qint64 [optional]
    * @param[in]  filter_type QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  startdate QString [optional]
    * @param[in]  enddate QString [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  startid qint64 [optional]
    */
    virtual void getExportLogs(const QString &format, const ::OpenAPI::OptionalParam<qint64> &site = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &filter_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &startdate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &enddate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &startid = ::OpenAPI::OptionalParam<qint64>());


    virtual void getFieldsLogs();


    virtual void getTypesLogs();

    /**
    * @param[in]  log_type QString [optional]
    * @param[in]  log_entry QString [optional]
    * @param[in]  from QString [optional]
    * @param[in]  to QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  limitstart qint64 [optional]
    * @param[in]  order QString [optional]
    */
    virtual void logsGet(const ::OpenAPI::OptionalParam<QString> &log_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &log_entry = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limitstart = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteLogByIdCallback(OAIHttpRequestWorker *worker);
    void getExportLogsCallback(OAIHttpRequestWorker *worker);
    void getFieldsLogsCallback(OAIHttpRequestWorker *worker);
    void getTypesLogsCallback(OAIHttpRequestWorker *worker);
    void logsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteLogByIdSignal(QString summary);
    void getExportLogsSignal();
    void getFieldsLogsSignal(QString summary);
    void getTypesLogsSignal(QString summary);
    void logsGetSignal(OAILog summary);


    void deleteLogByIdSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getExportLogsSignalFull(OAIHttpRequestWorker *worker);
    void getFieldsLogsSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getTypesLogsSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void logsGetSignalFull(OAIHttpRequestWorker *worker, OAILog summary);

    Q_DECL_DEPRECATED_X("Use deleteLogByIdSignalError() instead")
    void deleteLogByIdSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLogByIdSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExportLogsSignalError() instead")
    void getExportLogsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getExportLogsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldsLogsSignalError() instead")
    void getFieldsLogsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldsLogsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTypesLogsSignalError() instead")
    void getTypesLogsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTypesLogsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsGetSignalError() instead")
    void logsGetSignalE(OAILog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void logsGetSignalError(OAILog summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteLogByIdSignalErrorFull() instead")
    void deleteLogByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLogByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExportLogsSignalErrorFull() instead")
    void getExportLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExportLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFieldsLogsSignalErrorFull() instead")
    void getFieldsLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFieldsLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTypesLogsSignalErrorFull() instead")
    void getTypesLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTypesLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsGetSignalErrorFull() instead")
    void logsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
