/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISite::OAISite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISite::OAISite() {
    this->initializeModel();
}

OAISite::~OAISite() {}

void OAISite::initializeModel() {

    m_access_url_isSet = false;
    m_access_url_isValid = false;

    m_admin_url_isSet = false;
    m_admin_url_isValid = false;

    m_akeeba_profile_isSet = false;
    m_akeeba_profile_isValid = false;

    m_backup_schedule_isSet = false;
    m_backup_schedule_isValid = false;

    m_can_backup_isSet = false;
    m_can_backup_isValid = false;

    m_can_update_isSet = false;
    m_can_update_isValid = false;

    m_date_backup_isSet = false;
    m_date_backup_isValid = false;

    m_date_last_check_isSet = false;
    m_date_last_check_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_j_update_isSet = false;
    m_j_update_isValid = false;

    m_j_version_isSet = false;
    m_j_version_isValid = false;

    m_monitorid_isSet = false;
    m_monitorid_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nb_updates_isSet = false;
    m_nb_updates_isValid = false;

    m_new_j_version_isSet = false;
    m_new_j_version_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_secret_word_isSet = false;
    m_secret_word_isValid = false;

    m_siteid_isSet = false;
    m_siteid_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_up_isSet = false;
    m_up_isValid = false;

    m_word_akeeba_isSet = false;
    m_word_akeeba_isValid = false;

    m_word_check_isSet = false;
    m_word_check_isValid = false;
}

void OAISite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISite::fromJsonObject(QJsonObject json) {

    m_access_url_isValid = ::OpenAPI::fromJsonValue(m_access_url, json[QString("access_url")]);
    m_access_url_isSet = !json[QString("access_url")].isNull() && m_access_url_isValid;

    m_admin_url_isValid = ::OpenAPI::fromJsonValue(m_admin_url, json[QString("admin_url")]);
    m_admin_url_isSet = !json[QString("admin_url")].isNull() && m_admin_url_isValid;

    m_akeeba_profile_isValid = ::OpenAPI::fromJsonValue(m_akeeba_profile, json[QString("akeebaProfile")]);
    m_akeeba_profile_isSet = !json[QString("akeebaProfile")].isNull() && m_akeeba_profile_isValid;

    m_backup_schedule_isValid = ::OpenAPI::fromJsonValue(m_backup_schedule, json[QString("backupSchedule")]);
    m_backup_schedule_isSet = !json[QString("backupSchedule")].isNull() && m_backup_schedule_isValid;

    m_can_backup_isValid = ::OpenAPI::fromJsonValue(m_can_backup, json[QString("canBackup")]);
    m_can_backup_isSet = !json[QString("canBackup")].isNull() && m_can_backup_isValid;

    m_can_update_isValid = ::OpenAPI::fromJsonValue(m_can_update, json[QString("canUpdate")]);
    m_can_update_isSet = !json[QString("canUpdate")].isNull() && m_can_update_isValid;

    m_date_backup_isValid = ::OpenAPI::fromJsonValue(m_date_backup, json[QString("dateBackup")]);
    m_date_backup_isSet = !json[QString("dateBackup")].isNull() && m_date_backup_isValid;

    m_date_last_check_isValid = ::OpenAPI::fromJsonValue(m_date_last_check, json[QString("date_last_check")]);
    m_date_last_check_isSet = !json[QString("date_last_check")].isNull() && m_date_last_check_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_j_update_isValid = ::OpenAPI::fromJsonValue(m_j_update, json[QString("jUpdate")]);
    m_j_update_isSet = !json[QString("jUpdate")].isNull() && m_j_update_isValid;

    m_j_version_isValid = ::OpenAPI::fromJsonValue(m_j_version, json[QString("j_version")]);
    m_j_version_isSet = !json[QString("j_version")].isNull() && m_j_version_isValid;

    m_monitorid_isValid = ::OpenAPI::fromJsonValue(m_monitorid, json[QString("monitorid")]);
    m_monitorid_isSet = !json[QString("monitorid")].isNull() && m_monitorid_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nb_updates_isValid = ::OpenAPI::fromJsonValue(m_nb_updates, json[QString("nbUpdates")]);
    m_nb_updates_isSet = !json[QString("nbUpdates")].isNull() && m_nb_updates_isValid;

    m_new_j_version_isValid = ::OpenAPI::fromJsonValue(m_new_j_version, json[QString("new_j_version")]);
    m_new_j_version_isSet = !json[QString("new_j_version")].isNull() && m_new_j_version_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_secret_word_isValid = ::OpenAPI::fromJsonValue(m_secret_word, json[QString("secret_word")]);
    m_secret_word_isSet = !json[QString("secret_word")].isNull() && m_secret_word_isValid;

    m_siteid_isValid = ::OpenAPI::fromJsonValue(m_siteid, json[QString("siteid")]);
    m_siteid_isSet = !json[QString("siteid")].isNull() && m_siteid_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_up_isValid = ::OpenAPI::fromJsonValue(m_up, json[QString("up")]);
    m_up_isSet = !json[QString("up")].isNull() && m_up_isValid;

    m_word_akeeba_isValid = ::OpenAPI::fromJsonValue(m_word_akeeba, json[QString("word_akeeba")]);
    m_word_akeeba_isSet = !json[QString("word_akeeba")].isNull() && m_word_akeeba_isValid;

    m_word_check_isValid = ::OpenAPI::fromJsonValue(m_word_check, json[QString("word_check")]);
    m_word_check_isSet = !json[QString("word_check")].isNull() && m_word_check_isValid;
}

QString OAISite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISite::asJsonObject() const {
    QJsonObject obj;
    if (m_access_url_isSet) {
        obj.insert(QString("access_url"), ::OpenAPI::toJsonValue(m_access_url));
    }
    if (m_admin_url_isSet) {
        obj.insert(QString("admin_url"), ::OpenAPI::toJsonValue(m_admin_url));
    }
    if (m_akeeba_profile_isSet) {
        obj.insert(QString("akeebaProfile"), ::OpenAPI::toJsonValue(m_akeeba_profile));
    }
    if (m_backup_schedule_isSet) {
        obj.insert(QString("backupSchedule"), ::OpenAPI::toJsonValue(m_backup_schedule));
    }
    if (m_can_backup_isSet) {
        obj.insert(QString("canBackup"), ::OpenAPI::toJsonValue(m_can_backup));
    }
    if (m_can_update_isSet) {
        obj.insert(QString("canUpdate"), ::OpenAPI::toJsonValue(m_can_update));
    }
    if (m_date_backup_isSet) {
        obj.insert(QString("dateBackup"), ::OpenAPI::toJsonValue(m_date_backup));
    }
    if (m_date_last_check_isSet) {
        obj.insert(QString("date_last_check"), ::OpenAPI::toJsonValue(m_date_last_check));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_j_update_isSet) {
        obj.insert(QString("jUpdate"), ::OpenAPI::toJsonValue(m_j_update));
    }
    if (m_j_version_isSet) {
        obj.insert(QString("j_version"), ::OpenAPI::toJsonValue(m_j_version));
    }
    if (m_monitorid_isSet) {
        obj.insert(QString("monitorid"), ::OpenAPI::toJsonValue(m_monitorid));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nb_updates_isSet) {
        obj.insert(QString("nbUpdates"), ::OpenAPI::toJsonValue(m_nb_updates));
    }
    if (m_new_j_version_isSet) {
        obj.insert(QString("new_j_version"), ::OpenAPI::toJsonValue(m_new_j_version));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_secret_word_isSet) {
        obj.insert(QString("secret_word"), ::OpenAPI::toJsonValue(m_secret_word));
    }
    if (m_siteid_isSet) {
        obj.insert(QString("siteid"), ::OpenAPI::toJsonValue(m_siteid));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_up_isSet) {
        obj.insert(QString("up"), ::OpenAPI::toJsonValue(m_up));
    }
    if (m_word_akeeba_isSet) {
        obj.insert(QString("word_akeeba"), ::OpenAPI::toJsonValue(m_word_akeeba));
    }
    if (m_word_check_isSet) {
        obj.insert(QString("word_check"), ::OpenAPI::toJsonValue(m_word_check));
    }
    return obj;
}

QString OAISite::getAccessUrl() const {
    return m_access_url;
}
void OAISite::setAccessUrl(const QString &access_url) {
    m_access_url = access_url;
    m_access_url_isSet = true;
}

bool OAISite::is_access_url_Set() const{
    return m_access_url_isSet;
}

bool OAISite::is_access_url_Valid() const{
    return m_access_url_isValid;
}

QString OAISite::getAdminUrl() const {
    return m_admin_url;
}
void OAISite::setAdminUrl(const QString &admin_url) {
    m_admin_url = admin_url;
    m_admin_url_isSet = true;
}

bool OAISite::is_admin_url_Set() const{
    return m_admin_url_isSet;
}

bool OAISite::is_admin_url_Valid() const{
    return m_admin_url_isValid;
}

QString OAISite::getAkeebaProfile() const {
    return m_akeeba_profile;
}
void OAISite::setAkeebaProfile(const QString &akeeba_profile) {
    m_akeeba_profile = akeeba_profile;
    m_akeeba_profile_isSet = true;
}

bool OAISite::is_akeeba_profile_Set() const{
    return m_akeeba_profile_isSet;
}

bool OAISite::is_akeeba_profile_Valid() const{
    return m_akeeba_profile_isValid;
}

QString OAISite::getBackupSchedule() const {
    return m_backup_schedule;
}
void OAISite::setBackupSchedule(const QString &backup_schedule) {
    m_backup_schedule = backup_schedule;
    m_backup_schedule_isSet = true;
}

bool OAISite::is_backup_schedule_Set() const{
    return m_backup_schedule_isSet;
}

bool OAISite::is_backup_schedule_Valid() const{
    return m_backup_schedule_isValid;
}

bool OAISite::isCanBackup() const {
    return m_can_backup;
}
void OAISite::setCanBackup(const bool &can_backup) {
    m_can_backup = can_backup;
    m_can_backup_isSet = true;
}

bool OAISite::is_can_backup_Set() const{
    return m_can_backup_isSet;
}

bool OAISite::is_can_backup_Valid() const{
    return m_can_backup_isValid;
}

bool OAISite::isCanUpdate() const {
    return m_can_update;
}
void OAISite::setCanUpdate(const bool &can_update) {
    m_can_update = can_update;
    m_can_update_isSet = true;
}

bool OAISite::is_can_update_Set() const{
    return m_can_update_isSet;
}

bool OAISite::is_can_update_Valid() const{
    return m_can_update_isValid;
}

QString OAISite::getDateBackup() const {
    return m_date_backup;
}
void OAISite::setDateBackup(const QString &date_backup) {
    m_date_backup = date_backup;
    m_date_backup_isSet = true;
}

bool OAISite::is_date_backup_Set() const{
    return m_date_backup_isSet;
}

bool OAISite::is_date_backup_Valid() const{
    return m_date_backup_isValid;
}

QString OAISite::getDateLastCheck() const {
    return m_date_last_check;
}
void OAISite::setDateLastCheck(const QString &date_last_check) {
    m_date_last_check = date_last_check;
    m_date_last_check_isSet = true;
}

bool OAISite::is_date_last_check_Set() const{
    return m_date_last_check_isSet;
}

bool OAISite::is_date_last_check_Valid() const{
    return m_date_last_check_isValid;
}

bool OAISite::isError() const {
    return m_error;
}
void OAISite::setError(const bool &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAISite::is_error_Set() const{
    return m_error_isSet;
}

bool OAISite::is_error_Valid() const{
    return m_error_isValid;
}

QString OAISite::getIp() const {
    return m_ip;
}
void OAISite::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAISite::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAISite::is_ip_Valid() const{
    return m_ip_isValid;
}

bool OAISite::isJUpdate() const {
    return m_j_update;
}
void OAISite::setJUpdate(const bool &j_update) {
    m_j_update = j_update;
    m_j_update_isSet = true;
}

bool OAISite::is_j_update_Set() const{
    return m_j_update_isSet;
}

bool OAISite::is_j_update_Valid() const{
    return m_j_update_isValid;
}

QString OAISite::getJVersion() const {
    return m_j_version;
}
void OAISite::setJVersion(const QString &j_version) {
    m_j_version = j_version;
    m_j_version_isSet = true;
}

bool OAISite::is_j_version_Set() const{
    return m_j_version_isSet;
}

bool OAISite::is_j_version_Valid() const{
    return m_j_version_isValid;
}

bool OAISite::isMonitorid() const {
    return m_monitorid;
}
void OAISite::setMonitorid(const bool &monitorid) {
    m_monitorid = monitorid;
    m_monitorid_isSet = true;
}

bool OAISite::is_monitorid_Set() const{
    return m_monitorid_isSet;
}

bool OAISite::is_monitorid_Valid() const{
    return m_monitorid_isValid;
}

QString OAISite::getName() const {
    return m_name;
}
void OAISite::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISite::is_name_Set() const{
    return m_name_isSet;
}

bool OAISite::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISite::getNbUpdates() const {
    return m_nb_updates;
}
void OAISite::setNbUpdates(const QString &nb_updates) {
    m_nb_updates = nb_updates;
    m_nb_updates_isSet = true;
}

bool OAISite::is_nb_updates_Set() const{
    return m_nb_updates_isSet;
}

bool OAISite::is_nb_updates_Valid() const{
    return m_nb_updates_isValid;
}

QString OAISite::getNewJVersion() const {
    return m_new_j_version;
}
void OAISite::setNewJVersion(const QString &new_j_version) {
    m_new_j_version = new_j_version;
    m_new_j_version_isSet = true;
}

bool OAISite::is_new_j_version_Set() const{
    return m_new_j_version_isSet;
}

bool OAISite::is_new_j_version_Valid() const{
    return m_new_j_version_isValid;
}

QString OAISite::getNotes() const {
    return m_notes;
}
void OAISite::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAISite::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAISite::is_notes_Valid() const{
    return m_notes_isValid;
}

bool OAISite::isPublished() const {
    return m_published;
}
void OAISite::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAISite::is_published_Set() const{
    return m_published_isSet;
}

bool OAISite::is_published_Valid() const{
    return m_published_isValid;
}

QString OAISite::getSecretWord() const {
    return m_secret_word;
}
void OAISite::setSecretWord(const QString &secret_word) {
    m_secret_word = secret_word;
    m_secret_word_isSet = true;
}

bool OAISite::is_secret_word_Set() const{
    return m_secret_word_isSet;
}

bool OAISite::is_secret_word_Valid() const{
    return m_secret_word_isValid;
}

qint64 OAISite::getSiteid() const {
    return m_siteid;
}
void OAISite::setSiteid(const qint64 &siteid) {
    m_siteid = siteid;
    m_siteid_isSet = true;
}

bool OAISite::is_siteid_Set() const{
    return m_siteid_isSet;
}

bool OAISite::is_siteid_Valid() const{
    return m_siteid_isValid;
}

QList<OAIObject> OAISite::getTags() const {
    return m_tags;
}
void OAISite::setTags(const QList<OAIObject> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISite::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISite::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAISite::isUp() const {
    return m_up;
}
void OAISite::setUp(const bool &up) {
    m_up = up;
    m_up_isSet = true;
}

bool OAISite::is_up_Set() const{
    return m_up_isSet;
}

bool OAISite::is_up_Valid() const{
    return m_up_isValid;
}

QString OAISite::getWordAkeeba() const {
    return m_word_akeeba;
}
void OAISite::setWordAkeeba(const QString &word_akeeba) {
    m_word_akeeba = word_akeeba;
    m_word_akeeba_isSet = true;
}

bool OAISite::is_word_akeeba_Set() const{
    return m_word_akeeba_isSet;
}

bool OAISite::is_word_akeeba_Valid() const{
    return m_word_akeeba_isValid;
}

QString OAISite::getWordCheck() const {
    return m_word_check;
}
void OAISite::setWordCheck(const QString &word_check) {
    m_word_check = word_check;
    m_word_check_isSet = true;
}

bool OAISite::is_word_check_Set() const{
    return m_word_check_isSet;
}

bool OAISite::is_word_check_Valid() const{
    return m_word_check_isValid;
}

bool OAISite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_akeeba_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_backup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_backup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_last_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_j_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_j_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitorid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nb_updates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_j_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_word_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_siteid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_akeeba_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_check_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISite::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_siteid_isValid && true;
}

} // namespace OpenAPI
