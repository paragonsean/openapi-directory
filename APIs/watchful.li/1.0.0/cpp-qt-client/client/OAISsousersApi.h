/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISsousersApi_H
#define OAI_OAISsousersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISsoUsers.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISsousersApi : public QObject {
    Q_OBJECT

public:
    OAISsousersApi(const int timeOut = 0);
    ~OAISsousersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAISsoUsers [required]
    */
    virtual void createSsoUsers(const OAISsoUsers &body);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteSsoUserById(const qint64 &id);


    virtual void getSsoUsers();

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getSsoUsersById(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  body OAISsoUsers [required]
    */
    virtual void updateSsoUsers(const qint64 &id, const OAISsoUsers &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSsoUsersCallback(OAIHttpRequestWorker *worker);
    void deleteSsoUserByIdCallback(OAIHttpRequestWorker *worker);
    void getSsoUsersCallback(OAIHttpRequestWorker *worker);
    void getSsoUsersByIdCallback(OAIHttpRequestWorker *worker);
    void updateSsoUsersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSsoUsersSignal(OAISsoUsers summary);
    void deleteSsoUserByIdSignal(QString summary);
    void getSsoUsersSignal(OAISsoUsers summary);
    void getSsoUsersByIdSignal(OAISsoUsers summary);
    void updateSsoUsersSignal(OAISsoUsers summary);


    void createSsoUsersSignalFull(OAIHttpRequestWorker *worker, OAISsoUsers summary);
    void deleteSsoUserByIdSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getSsoUsersSignalFull(OAIHttpRequestWorker *worker, OAISsoUsers summary);
    void getSsoUsersByIdSignalFull(OAIHttpRequestWorker *worker, OAISsoUsers summary);
    void updateSsoUsersSignalFull(OAIHttpRequestWorker *worker, OAISsoUsers summary);

    Q_DECL_DEPRECATED_X("Use createSsoUsersSignalError() instead")
    void createSsoUsersSignalE(OAISsoUsers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSsoUsersSignalError(OAISsoUsers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSsoUserByIdSignalError() instead")
    void deleteSsoUserByIdSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSsoUserByIdSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSsoUsersSignalError() instead")
    void getSsoUsersSignalE(OAISsoUsers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSsoUsersSignalError(OAISsoUsers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSsoUsersByIdSignalError() instead")
    void getSsoUsersByIdSignalE(OAISsoUsers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSsoUsersByIdSignalError(OAISsoUsers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSsoUsersSignalError() instead")
    void updateSsoUsersSignalE(OAISsoUsers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSsoUsersSignalError(OAISsoUsers summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSsoUsersSignalErrorFull() instead")
    void createSsoUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSsoUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSsoUserByIdSignalErrorFull() instead")
    void deleteSsoUserByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSsoUserByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSsoUsersSignalErrorFull() instead")
    void getSsoUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSsoUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSsoUsersByIdSignalErrorFull() instead")
    void getSsoUsersByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSsoUsersByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSsoUsersSignalErrorFull() instead")
    void updateSsoUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSsoUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
