/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISitesApi_H
#define OAI_OAISitesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAudit.h"
#include "OAIExtension.h"
#include "OAILog.h"
#include "OAIObject.h"
#include "OAIPostLog.h"
#include "OAIPostSite.h"
#include "OAISite.h"
#include "OAITag.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISitesApi : public QObject {
    Q_OBJECT

public:
    OAISitesApi(const int timeOut = 0);
    ~OAISitesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void addSiteToBackupQueue(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void createAudits(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  body OAIPostLog [required]
    */
    virtual void createLog(const qint64 &id, const OAIPostLog &body);

    /**
    * @param[in]  body OAIPostSite [required]
    */
    virtual void createSite(const OAIPostSite &body);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void deleteMonitor(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getBackupProfiles(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getListBackups(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  limitstart qint64 [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getSiteAudits(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limitstart = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    */
    virtual void getSiteById(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  siteids QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  access_url QString [optional]
    * @param[in]  j_version QString [optional]
    * @param[in]  ip QString [optional]
    * @param[in]  j_update qint32 [optional]
    * @param[in]  can_update qint32 [optional]
    * @param[in]  published qint32 [optional]
    * @param[in]  error QString [optional]
    * @param[in]  nb_updates QString [optional]
    * @param[in]  up qint32 [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  limitstart qint64 [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getSites(const ::OpenAPI::OptionalParam<QString> &siteids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &j_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &j_update = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &can_update = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &published = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &error = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nb_updates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &up = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limitstart = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void getUptime(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  url QString [required]
    */
    virtual void installExtension(const qint64 &id, const QString &url);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void postMonitor(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  body OAITag [required]
    */
    virtual void postTags(const qint64 &id, const OAITag &body);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void scanner(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void seoAnalyze(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void sitesIdDelete(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  limitstart qint64 [optional]
    * @param[in]  order QString [optional]
    */
    virtual void sitesIdExtensionsGet(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limitstart = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  log_entry QString [optional]
    * @param[in]  log_type QString [optional]
    * @param[in]  from QString [optional]
    * @param[in]  to QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  limitstart qint64 [optional]
    * @param[in]  order QString [optional]
    */
    virtual void sitesIdLogsGet(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &log_entry = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &log_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limitstart = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  body OAIPostSite [required]
    */
    virtual void sitesIdPut(const qint64 &id, const OAIPostSite &body);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  limit qint64 [optional]
    * @param[in]  limitstart qint64 [optional]
    * @param[in]  order QString [optional]
    */
    virtual void sitesIdTagsGet(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limitstart = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());


    virtual void sitesMetadataGet();

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void startSiteBackup(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void stepSiteBackup(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void updateJoomla(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void validateDebugSite(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void validateSite(const qint64 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addSiteToBackupQueueCallback(OAIHttpRequestWorker *worker);
    void createAuditsCallback(OAIHttpRequestWorker *worker);
    void createLogCallback(OAIHttpRequestWorker *worker);
    void createSiteCallback(OAIHttpRequestWorker *worker);
    void deleteMonitorCallback(OAIHttpRequestWorker *worker);
    void getBackupProfilesCallback(OAIHttpRequestWorker *worker);
    void getListBackupsCallback(OAIHttpRequestWorker *worker);
    void getSiteAuditsCallback(OAIHttpRequestWorker *worker);
    void getSiteByIdCallback(OAIHttpRequestWorker *worker);
    void getSitesCallback(OAIHttpRequestWorker *worker);
    void getUptimeCallback(OAIHttpRequestWorker *worker);
    void installExtensionCallback(OAIHttpRequestWorker *worker);
    void postMonitorCallback(OAIHttpRequestWorker *worker);
    void postTagsCallback(OAIHttpRequestWorker *worker);
    void scannerCallback(OAIHttpRequestWorker *worker);
    void seoAnalyzeCallback(OAIHttpRequestWorker *worker);
    void sitesIdDeleteCallback(OAIHttpRequestWorker *worker);
    void sitesIdExtensionsGetCallback(OAIHttpRequestWorker *worker);
    void sitesIdLogsGetCallback(OAIHttpRequestWorker *worker);
    void sitesIdPutCallback(OAIHttpRequestWorker *worker);
    void sitesIdTagsGetCallback(OAIHttpRequestWorker *worker);
    void sitesMetadataGetCallback(OAIHttpRequestWorker *worker);
    void startSiteBackupCallback(OAIHttpRequestWorker *worker);
    void stepSiteBackupCallback(OAIHttpRequestWorker *worker);
    void updateJoomlaCallback(OAIHttpRequestWorker *worker);
    void validateDebugSiteCallback(OAIHttpRequestWorker *worker);
    void validateSiteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addSiteToBackupQueueSignal(OAISite summary);
    void createAuditsSignal(OAIAudit summary);
    void createLogSignal(OAILog summary);
    void createSiteSignal(OAISite summary);
    void deleteMonitorSignal(OAIObject summary);
    void getBackupProfilesSignal();
    void getListBackupsSignal();
    void getSiteAuditsSignal(QList<OAIAudit> summary);
    void getSiteByIdSignal(OAISite summary);
    void getSitesSignal(OAISite summary);
    void getUptimeSignal(OAIObject summary);
    void installExtensionSignal();
    void postMonitorSignal(OAIObject summary);
    void postTagsSignal(OAISite summary);
    void scannerSignal(QString summary);
    void seoAnalyzeSignal(QString summary);
    void sitesIdDeleteSignal(QString summary);
    void sitesIdExtensionsGetSignal(OAIExtension summary);
    void sitesIdLogsGetSignal(OAILog summary);
    void sitesIdPutSignal(OAISite summary);
    void sitesIdTagsGetSignal(OAITag summary);
    void sitesMetadataGetSignal(QString summary);
    void startSiteBackupSignal(OAISite summary);
    void stepSiteBackupSignal(OAISite summary);
    void updateJoomlaSignal(QString summary);
    void validateDebugSiteSignal(OAILog summary);
    void validateSiteSignal(OAILog summary);


    void addSiteToBackupQueueSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void createAuditsSignalFull(OAIHttpRequestWorker *worker, OAIAudit summary);
    void createLogSignalFull(OAIHttpRequestWorker *worker, OAILog summary);
    void createSiteSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void deleteMonitorSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getBackupProfilesSignalFull(OAIHttpRequestWorker *worker);
    void getListBackupsSignalFull(OAIHttpRequestWorker *worker);
    void getSiteAuditsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAudit> summary);
    void getSiteByIdSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void getSitesSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void getUptimeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void installExtensionSignalFull(OAIHttpRequestWorker *worker);
    void postMonitorSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void postTagsSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void scannerSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void seoAnalyzeSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void sitesIdDeleteSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void sitesIdExtensionsGetSignalFull(OAIHttpRequestWorker *worker, OAIExtension summary);
    void sitesIdLogsGetSignalFull(OAIHttpRequestWorker *worker, OAILog summary);
    void sitesIdPutSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void sitesIdTagsGetSignalFull(OAIHttpRequestWorker *worker, OAITag summary);
    void sitesMetadataGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void startSiteBackupSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void stepSiteBackupSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void updateJoomlaSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void validateDebugSiteSignalFull(OAIHttpRequestWorker *worker, OAILog summary);
    void validateSiteSignalFull(OAIHttpRequestWorker *worker, OAILog summary);

    Q_DECL_DEPRECATED_X("Use addSiteToBackupQueueSignalError() instead")
    void addSiteToBackupQueueSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addSiteToBackupQueueSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAuditsSignalError() instead")
    void createAuditsSignalE(OAIAudit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAuditsSignalError(OAIAudit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLogSignalError() instead")
    void createLogSignalE(OAILog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLogSignalError(OAILog summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSiteSignalError() instead")
    void createSiteSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSiteSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMonitorSignalError() instead")
    void deleteMonitorSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMonitorSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBackupProfilesSignalError() instead")
    void getBackupProfilesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getBackupProfilesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListBackupsSignalError() instead")
    void getListBackupsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getListBackupsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteAuditsSignalError() instead")
    void getSiteAuditsSignalE(QList<OAIAudit> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteAuditsSignalError(QList<OAIAudit> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteByIdSignalError() instead")
    void getSiteByIdSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteByIdSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSitesSignalError() instead")
    void getSitesSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSitesSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUptimeSignalError() instead")
    void getUptimeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUptimeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use installExtensionSignalError() instead")
    void installExtensionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void installExtensionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMonitorSignalError() instead")
    void postMonitorSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postMonitorSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTagsSignalError() instead")
    void postTagsSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTagsSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scannerSignalError() instead")
    void scannerSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scannerSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seoAnalyzeSignalError() instead")
    void seoAnalyzeSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void seoAnalyzeSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesIdDeleteSignalError() instead")
    void sitesIdDeleteSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesIdDeleteSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesIdExtensionsGetSignalError() instead")
    void sitesIdExtensionsGetSignalE(OAIExtension summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesIdExtensionsGetSignalError(OAIExtension summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesIdLogsGetSignalError() instead")
    void sitesIdLogsGetSignalE(OAILog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesIdLogsGetSignalError(OAILog summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesIdPutSignalError() instead")
    void sitesIdPutSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesIdPutSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesIdTagsGetSignalError() instead")
    void sitesIdTagsGetSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesIdTagsGetSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesMetadataGetSignalError() instead")
    void sitesMetadataGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesMetadataGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSiteBackupSignalError() instead")
    void startSiteBackupSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startSiteBackupSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stepSiteBackupSignalError() instead")
    void stepSiteBackupSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stepSiteBackupSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateJoomlaSignalError() instead")
    void updateJoomlaSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateJoomlaSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateDebugSiteSignalError() instead")
    void validateDebugSiteSignalE(OAILog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void validateDebugSiteSignalError(OAILog summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateSiteSignalError() instead")
    void validateSiteSignalE(OAILog summary, QNetworkReply::NetworkError error_type, QString error_str);
    void validateSiteSignalError(OAILog summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addSiteToBackupQueueSignalErrorFull() instead")
    void addSiteToBackupQueueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addSiteToBackupQueueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAuditsSignalErrorFull() instead")
    void createAuditsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAuditsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLogSignalErrorFull() instead")
    void createLogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSiteSignalErrorFull() instead")
    void createSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMonitorSignalErrorFull() instead")
    void deleteMonitorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMonitorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBackupProfilesSignalErrorFull() instead")
    void getBackupProfilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBackupProfilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListBackupsSignalErrorFull() instead")
    void getListBackupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListBackupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteAuditsSignalErrorFull() instead")
    void getSiteAuditsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteAuditsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteByIdSignalErrorFull() instead")
    void getSiteByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSitesSignalErrorFull() instead")
    void getSitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSitesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUptimeSignalErrorFull() instead")
    void getUptimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUptimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use installExtensionSignalErrorFull() instead")
    void installExtensionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void installExtensionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMonitorSignalErrorFull() instead")
    void postMonitorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMonitorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTagsSignalErrorFull() instead")
    void postTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scannerSignalErrorFull() instead")
    void scannerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scannerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seoAnalyzeSignalErrorFull() instead")
    void seoAnalyzeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void seoAnalyzeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesIdDeleteSignalErrorFull() instead")
    void sitesIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesIdExtensionsGetSignalErrorFull() instead")
    void sitesIdExtensionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesIdExtensionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesIdLogsGetSignalErrorFull() instead")
    void sitesIdLogsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesIdLogsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesIdPutSignalErrorFull() instead")
    void sitesIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesIdTagsGetSignalErrorFull() instead")
    void sitesIdTagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesIdTagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesMetadataGetSignalErrorFull() instead")
    void sitesMetadataGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesMetadataGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSiteBackupSignalErrorFull() instead")
    void startSiteBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startSiteBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stepSiteBackupSignalErrorFull() instead")
    void stepSiteBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stepSiteBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateJoomlaSignalErrorFull() instead")
    void updateJoomlaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateJoomlaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateDebugSiteSignalErrorFull() instead")
    void validateDebugSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateDebugSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateSiteSignalErrorFull() instead")
    void validateSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
