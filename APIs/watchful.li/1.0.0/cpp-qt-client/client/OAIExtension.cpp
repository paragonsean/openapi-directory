/**
 * watchful.li
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtension::OAIExtension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtension::OAIExtension() {
    this->initializeModel();
}

OAIExtension::~OAIExtension() {}

void OAIExtension::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_ext_name_isSet = false;
    m_ext_name_isValid = false;

    m_idx_site_isSet = false;
    m_idx_site_isValid = false;

    m_new_version_isSet = false;
    m_new_version_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_v_update_isSet = false;
    m_v_update_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIExtension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtension::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_ext_name_isValid = ::OpenAPI::fromJsonValue(m_ext_name, json[QString("ext_name")]);
    m_ext_name_isSet = !json[QString("ext_name")].isNull() && m_ext_name_isValid;

    m_idx_site_isValid = ::OpenAPI::fromJsonValue(m_idx_site, json[QString("idx_site")]);
    m_idx_site_isSet = !json[QString("idx_site")].isNull() && m_idx_site_isValid;

    m_new_version_isValid = ::OpenAPI::fromJsonValue(m_new_version, json[QString("newVersion")]);
    m_new_version_isSet = !json[QString("newVersion")].isNull() && m_new_version_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_v_update_isValid = ::OpenAPI::fromJsonValue(m_v_update, json[QString("vUpdate")]);
    m_v_update_isSet = !json[QString("vUpdate")].isNull() && m_v_update_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIExtension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtension::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_ext_name_isSet) {
        obj.insert(QString("ext_name"), ::OpenAPI::toJsonValue(m_ext_name));
    }
    if (m_idx_site_isSet) {
        obj.insert(QString("idx_site"), ::OpenAPI::toJsonValue(m_idx_site));
    }
    if (m_new_version_isSet) {
        obj.insert(QString("newVersion"), ::OpenAPI::toJsonValue(m_new_version));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_v_update_isSet) {
        obj.insert(QString("vUpdate"), ::OpenAPI::toJsonValue(m_v_update));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIExtension::getDate() const {
    return m_date;
}
void OAIExtension::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIExtension::is_date_Set() const{
    return m_date_isSet;
}

bool OAIExtension::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIExtension::getExtName() const {
    return m_ext_name;
}
void OAIExtension::setExtName(const QString &ext_name) {
    m_ext_name = ext_name;
    m_ext_name_isSet = true;
}

bool OAIExtension::is_ext_name_Set() const{
    return m_ext_name_isSet;
}

bool OAIExtension::is_ext_name_Valid() const{
    return m_ext_name_isValid;
}

qint64 OAIExtension::getIdxSite() const {
    return m_idx_site;
}
void OAIExtension::setIdxSite(const qint64 &idx_site) {
    m_idx_site = idx_site;
    m_idx_site_isSet = true;
}

bool OAIExtension::is_idx_site_Set() const{
    return m_idx_site_isSet;
}

bool OAIExtension::is_idx_site_Valid() const{
    return m_idx_site_isValid;
}

QString OAIExtension::getNewVersion() const {
    return m_new_version;
}
void OAIExtension::setNewVersion(const QString &new_version) {
    m_new_version = new_version;
    m_new_version_isSet = true;
}

bool OAIExtension::is_new_version_Set() const{
    return m_new_version_isSet;
}

bool OAIExtension::is_new_version_Valid() const{
    return m_new_version_isValid;
}

QString OAIExtension::getType() const {
    return m_type;
}
void OAIExtension::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExtension::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExtension::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIExtension::getUrl() const {
    return m_url;
}
void OAIExtension::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIExtension::is_url_Set() const{
    return m_url_isSet;
}

bool OAIExtension::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIExtension::getVUpdate() const {
    return m_v_update;
}
void OAIExtension::setVUpdate(const qint32 &v_update) {
    m_v_update = v_update;
    m_v_update_isSet = true;
}

bool OAIExtension::is_v_update_Set() const{
    return m_v_update_isSet;
}

bool OAIExtension::is_v_update_Valid() const{
    return m_v_update_isValid;
}

QString OAIExtension::getVersion() const {
    return m_version;
}
void OAIExtension::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIExtension::is_version_Set() const{
    return m_version_isSet;
}

bool OAIExtension::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIExtension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idx_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtension::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_idx_site_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
