# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SsoUsers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, groupid: int=None, id: int=None, last_login_date: datetime=None, last_login_site: int=None, name: str=None, password: str=None, userid: int=None, username: str=None):
        """SsoUsers - a model defined in OpenAPI

        :param email: The email of this SsoUsers.
        :param groupid: The groupid of this SsoUsers.
        :param id: The id of this SsoUsers.
        :param last_login_date: The last_login_date of this SsoUsers.
        :param last_login_site: The last_login_site of this SsoUsers.
        :param name: The name of this SsoUsers.
        :param password: The password of this SsoUsers.
        :param userid: The userid of this SsoUsers.
        :param username: The username of this SsoUsers.
        """
        self.openapi_types = {
            'email': str,
            'groupid': int,
            'id': int,
            'last_login_date': datetime,
            'last_login_site': int,
            'name': str,
            'password': str,
            'userid': int,
            'username': str
        }

        self.attribute_map = {
            'email': 'email',
            'groupid': 'groupid',
            'id': 'id',
            'last_login_date': 'lastLoginDate',
            'last_login_site': 'lastLoginSite',
            'name': 'name',
            'password': 'password',
            'userid': 'userid',
            'username': 'username'
        }

        self._email = email
        self._groupid = groupid
        self._id = id
        self._last_login_date = last_login_date
        self._last_login_site = last_login_site
        self._name = name
        self._password = password
        self._userid = userid
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SsoUsers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SsoUsers of this SsoUsers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this SsoUsers.

        Email of the SSO User

        :return: The email of this SsoUsers.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SsoUsers.

        Email of the SSO User

        :param email: The email of this SsoUsers.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def groupid(self):
        """Gets the groupid of this SsoUsers.

        Security Joomla group ID

        :return: The groupid of this SsoUsers.
        :rtype: int
        """
        return self._groupid

    @groupid.setter
    def groupid(self, groupid):
        """Sets the groupid of this SsoUsers.

        Security Joomla group ID

        :param groupid: The groupid of this SsoUsers.
        :type groupid: int
        """
        if groupid is None:
            raise ValueError("Invalid value for `groupid`, must not be `None`")

        self._groupid = groupid

    @property
    def id(self):
        """Gets the id of this SsoUsers.

        Unique identifier for the SSO User

        :return: The id of this SsoUsers.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SsoUsers.

        Unique identifier for the SSO User

        :param id: The id of this SsoUsers.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_login_date(self):
        """Gets the last_login_date of this SsoUsers.

        Last login date on remote site

        :return: The last_login_date of this SsoUsers.
        :rtype: datetime
        """
        return self._last_login_date

    @last_login_date.setter
    def last_login_date(self, last_login_date):
        """Sets the last_login_date of this SsoUsers.

        Last login date on remote site

        :param last_login_date: The last_login_date of this SsoUsers.
        :type last_login_date: datetime
        """

        self._last_login_date = last_login_date

    @property
    def last_login_site(self):
        """Gets the last_login_site of this SsoUsers.

        Site Id of the last remote login

        :return: The last_login_site of this SsoUsers.
        :rtype: int
        """
        return self._last_login_site

    @last_login_site.setter
    def last_login_site(self, last_login_site):
        """Sets the last_login_site of this SsoUsers.

        Site Id of the last remote login

        :param last_login_site: The last_login_site of this SsoUsers.
        :type last_login_site: int
        """

        self._last_login_site = last_login_site

    @property
    def name(self):
        """Gets the name of this SsoUsers.

        Account display name

        :return: The name of this SsoUsers.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SsoUsers.

        Account display name

        :param name: The name of this SsoUsers.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def password(self):
        """Gets the password of this SsoUsers.

        Password of the SSO User

        :return: The password of this SsoUsers.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SsoUsers.

        Password of the SSO User

        :param password: The password of this SsoUsers.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def userid(self):
        """Gets the userid of this SsoUsers.

        Watchful user account

        :return: The userid of this SsoUsers.
        :rtype: int
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this SsoUsers.

        Watchful user account

        :param userid: The userid of this SsoUsers.
        :type userid: int
        """
        if userid is None:
            raise ValueError("Invalid value for `userid`, must not be `None`")

        self._userid = userid

    @property
    def username(self):
        """Gets the username of this SsoUsers.

        Username of the SSO User

        :return: The username of this SsoUsers.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SsoUsers.

        Username of the SSO User

        :param username: The username of this SsoUsers.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
