# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_date: str=None, log_entry: str=None, log_level: int=None):
        """PostLog - a model defined in OpenAPI

        :param log_date: The log_date of this PostLog.
        :param log_entry: The log_entry of this PostLog.
        :param log_level: The log_level of this PostLog.
        """
        self.openapi_types = {
            'log_date': str,
            'log_entry': str,
            'log_level': int
        }

        self.attribute_map = {
            'log_date': 'log_date',
            'log_entry': 'log_entry',
            'log_level': 'log_level'
        }

        self._log_date = log_date
        self._log_entry = log_entry
        self._log_level = log_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostLog of this PostLog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_date(self):
        """Gets the log_date of this PostLog.

        Datetime of the log

        :return: The log_date of this PostLog.
        :rtype: str
        """
        return self._log_date

    @log_date.setter
    def log_date(self, log_date):
        """Sets the log_date of this PostLog.

        Datetime of the log

        :param log_date: The log_date of this PostLog.
        :type log_date: str
        """

        self._log_date = log_date

    @property
    def log_entry(self):
        """Gets the log_entry of this PostLog.

        Log information

        :return: The log_entry of this PostLog.
        :rtype: str
        """
        return self._log_entry

    @log_entry.setter
    def log_entry(self, log_entry):
        """Sets the log_entry of this PostLog.

        Log information

        :param log_entry: The log_entry of this PostLog.
        :type log_entry: str
        """
        if log_entry is None:
            raise ValueError("Invalid value for `log_entry`, must not be `None`")

        self._log_entry = log_entry

    @property
    def log_level(self):
        """Gets the log_level of this PostLog.

        Level of log

        :return: The log_level of this PostLog.
        :rtype: int
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this PostLog.

        Level of log

        :param log_level: The log_level of this PostLog.
        :type log_level: int
        """
        if log_level is None:
            raise ValueError("Invalid value for `log_level`, must not be `None`")

        self._log_level = log_level
