# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Log(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, site_name: str=None, id_log: int=None, idx_site: int=None, log_date: str=None, log_entry: str=None, log_level: int=None, log_type: str=None, userid: int=None):
        """Log - a model defined in OpenAPI

        :param site_name: The site_name of this Log.
        :param id_log: The id_log of this Log.
        :param idx_site: The idx_site of this Log.
        :param log_date: The log_date of this Log.
        :param log_entry: The log_entry of this Log.
        :param log_level: The log_level of this Log.
        :param log_type: The log_type of this Log.
        :param userid: The userid of this Log.
        """
        self.openapi_types = {
            'site_name': str,
            'id_log': int,
            'idx_site': int,
            'log_date': str,
            'log_entry': str,
            'log_level': int,
            'log_type': str,
            'userid': int
        }

        self.attribute_map = {
            'site_name': 'Site name',
            'id_log': 'id_log',
            'idx_site': 'idx_site',
            'log_date': 'log_date',
            'log_entry': 'log_entry',
            'log_level': 'log_level',
            'log_type': 'log_type',
            'userid': 'userid'
        }

        self._site_name = site_name
        self._id_log = id_log
        self._idx_site = idx_site
        self._log_date = log_date
        self._log_entry = log_entry
        self._log_level = log_level
        self._log_type = log_type
        self._userid = userid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Log':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Log of this Log.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def site_name(self):
        """Gets the site_name of this Log.

        Name of the site / readyonly

        :return: The site_name of this Log.
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this Log.

        Name of the site / readyonly

        :param site_name: The site_name of this Log.
        :type site_name: str
        """

        self._site_name = site_name

    @property
    def id_log(self):
        """Gets the id_log of this Log.

        Unique identifier for the log

        :return: The id_log of this Log.
        :rtype: int
        """
        return self._id_log

    @id_log.setter
    def id_log(self, id_log):
        """Sets the id_log of this Log.

        Unique identifier for the log

        :param id_log: The id_log of this Log.
        :type id_log: int
        """
        if id_log is None:
            raise ValueError("Invalid value for `id_log`, must not be `None`")

        self._id_log = id_log

    @property
    def idx_site(self):
        """Gets the idx_site of this Log.

        Unique identifier for the site

        :return: The idx_site of this Log.
        :rtype: int
        """
        return self._idx_site

    @idx_site.setter
    def idx_site(self, idx_site):
        """Sets the idx_site of this Log.

        Unique identifier for the site

        :param idx_site: The idx_site of this Log.
        :type idx_site: int
        """
        if idx_site is None:
            raise ValueError("Invalid value for `idx_site`, must not be `None`")

        self._idx_site = idx_site

    @property
    def log_date(self):
        """Gets the log_date of this Log.

        Datetime of the log

        :return: The log_date of this Log.
        :rtype: str
        """
        return self._log_date

    @log_date.setter
    def log_date(self, log_date):
        """Sets the log_date of this Log.

        Datetime of the log

        :param log_date: The log_date of this Log.
        :type log_date: str
        """
        if log_date is None:
            raise ValueError("Invalid value for `log_date`, must not be `None`")

        self._log_date = log_date

    @property
    def log_entry(self):
        """Gets the log_entry of this Log.

        Log information

        :return: The log_entry of this Log.
        :rtype: str
        """
        return self._log_entry

    @log_entry.setter
    def log_entry(self, log_entry):
        """Sets the log_entry of this Log.

        Log information

        :param log_entry: The log_entry of this Log.
        :type log_entry: str
        """
        if log_entry is None:
            raise ValueError("Invalid value for `log_entry`, must not be `None`")

        self._log_entry = log_entry

    @property
    def log_level(self):
        """Gets the log_level of this Log.

        Level of log

        :return: The log_level of this Log.
        :rtype: int
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this Log.

        Level of log

        :param log_level: The log_level of this Log.
        :type log_level: int
        """
        if log_level is None:
            raise ValueError("Invalid value for `log_level`, must not be `None`")

        self._log_level = log_level

    @property
    def log_type(self):
        """Gets the log_type of this Log.

        Type of log

        :return: The log_type of this Log.
        :rtype: str
        """
        return self._log_type

    @log_type.setter
    def log_type(self, log_type):
        """Sets the log_type of this Log.

        Type of log

        :param log_type: The log_type of this Log.
        :type log_type: str
        """

        self._log_type = log_type

    @property
    def userid(self):
        """Gets the userid of this Log.

        Unique identifier for the user

        :return: The userid of this Log.
        :rtype: int
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this Log.

        Unique identifier for the user

        :param userid: The userid of this Log.
        :type userid: int
        """
        if userid is None:
            raise ValueError("Invalid value for `userid`, must not be `None`")

        self._userid = userid
