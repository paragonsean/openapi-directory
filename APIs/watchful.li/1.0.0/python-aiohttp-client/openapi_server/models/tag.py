# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Tag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, nb_sites: int=None, type: str='default'):
        """Tag - a model defined in OpenAPI

        :param id: The id of this Tag.
        :param name: The name of this Tag.
        :param nb_sites: The nb_sites of this Tag.
        :param type: The type of this Tag.
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'nb_sites': int,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'nb_sites': 'nbSites',
            'type': 'type'
        }

        self._id = id
        self._name = name
        self._nb_sites = nb_sites
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tag of this Tag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Tag.

        Unique identifier for the tag

        :return: The id of this Tag.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tag.

        Unique identifier for the tag

        :param id: The id of this Tag.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Tag.

        Friendly name for the tag

        :return: The name of this Tag.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tag.

        Friendly name for the tag

        :param name: The name of this Tag.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def nb_sites(self):
        """Gets the nb_sites of this Tag.

        Number of sites use this tag (required field id)

        :return: The nb_sites of this Tag.
        :rtype: int
        """
        return self._nb_sites

    @nb_sites.setter
    def nb_sites(self, nb_sites):
        """Sets the nb_sites of this Tag.

        Number of sites use this tag (required field id)

        :param nb_sites: The nb_sites of this Tag.
        :type nb_sites: int
        """

        self._nb_sites = nb_sites

    @property
    def type(self):
        """Gets the type of this Tag.

        Bootstrap color of the tag

        :return: The type of this Tag.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Tag.

        Bootstrap color of the tag

        :param type: The type of this Tag.
        :type type: str
        """
        allowed_values = ["default", "success", "warning", "important", "info", "inverse"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
