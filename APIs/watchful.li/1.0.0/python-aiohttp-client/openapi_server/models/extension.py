# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Extension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: str=None, ext_name: str=None, idx_site: int=None, new_version: str=None, type: str=None, url: str=None, v_update: int=None, version: str=None):
        """Extension - a model defined in OpenAPI

        :param _date: The _date of this Extension.
        :param ext_name: The ext_name of this Extension.
        :param idx_site: The idx_site of this Extension.
        :param new_version: The new_version of this Extension.
        :param type: The type of this Extension.
        :param url: The url of this Extension.
        :param v_update: The v_update of this Extension.
        :param version: The version of this Extension.
        """
        self.openapi_types = {
            '_date': str,
            'ext_name': str,
            'idx_site': int,
            'new_version': str,
            'type': str,
            'url': str,
            'v_update': int,
            'version': str
        }

        self.attribute_map = {
            '_date': 'date',
            'ext_name': 'ext_name',
            'idx_site': 'idx_site',
            'new_version': 'newVersion',
            'type': 'type',
            'url': 'url',
            'v_update': 'vUpdate',
            'version': 'version'
        }

        self.__date = _date
        self._ext_name = ext_name
        self._idx_site = idx_site
        self._new_version = new_version
        self._type = type
        self._url = url
        self._v_update = v_update
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Extension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Extension of this Extension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this Extension.

        Date of release

        :return: The _date of this Extension.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Extension.

        Date of release

        :param _date: The _date of this Extension.
        :type _date: str
        """

        self.__date = _date

    @property
    def ext_name(self):
        """Gets the ext_name of this Extension.

        Extension name

        :return: The ext_name of this Extension.
        :rtype: str
        """
        return self._ext_name

    @ext_name.setter
    def ext_name(self, ext_name):
        """Sets the ext_name of this Extension.

        Extension name

        :param ext_name: The ext_name of this Extension.
        :type ext_name: str
        """

        self._ext_name = ext_name

    @property
    def idx_site(self):
        """Gets the idx_site of this Extension.

        Unique identifier for the site

        :return: The idx_site of this Extension.
        :rtype: int
        """
        return self._idx_site

    @idx_site.setter
    def idx_site(self, idx_site):
        """Sets the idx_site of this Extension.

        Unique identifier for the site

        :param idx_site: The idx_site of this Extension.
        :type idx_site: int
        """
        if idx_site is None:
            raise ValueError("Invalid value for `idx_site`, must not be `None`")

        self._idx_site = idx_site

    @property
    def new_version(self):
        """Gets the new_version of this Extension.

        New version

        :return: The new_version of this Extension.
        :rtype: str
        """
        return self._new_version

    @new_version.setter
    def new_version(self, new_version):
        """Sets the new_version of this Extension.

        New version

        :param new_version: The new_version of this Extension.
        :type new_version: str
        """

        self._new_version = new_version

    @property
    def type(self):
        """Gets the type of this Extension.

        Datetime of the log

        :return: The type of this Extension.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Extension.

        Datetime of the log

        :param type: The type of this Extension.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def url(self):
        """Gets the url of this Extension.

        Author URL

        :return: The url of this Extension.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Extension.

        Author URL

        :param url: The url of this Extension.
        :type url: str
        """

        self._url = url

    @property
    def v_update(self):
        """Gets the v_update of this Extension.

        Update is available

        :return: The v_update of this Extension.
        :rtype: int
        """
        return self._v_update

    @v_update.setter
    def v_update(self, v_update):
        """Sets the v_update of this Extension.

        Update is available

        :param v_update: The v_update of this Extension.
        :type v_update: int
        """

        self._v_update = v_update

    @property
    def version(self):
        """Gets the version of this Extension.

        Extension version

        :return: The version of this Extension.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Extension.

        Extension version

        :param version: The version of this Extension.
        :type version: str
        """

        self._version = version
