# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostSite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_url: str=None, admin_url: str=None, akeeba_profile: str=None, backup_schedule: str=None, date_backup: str=None, name: str=None, notes: str=None, published: bool=None, secret_word: str=None, tags: str=None, word_akeeba: str=None, word_check: str=None):
        """PostSite - a model defined in OpenAPI

        :param access_url: The access_url of this PostSite.
        :param admin_url: The admin_url of this PostSite.
        :param akeeba_profile: The akeeba_profile of this PostSite.
        :param backup_schedule: The backup_schedule of this PostSite.
        :param date_backup: The date_backup of this PostSite.
        :param name: The name of this PostSite.
        :param notes: The notes of this PostSite.
        :param published: The published of this PostSite.
        :param secret_word: The secret_word of this PostSite.
        :param tags: The tags of this PostSite.
        :param word_akeeba: The word_akeeba of this PostSite.
        :param word_check: The word_check of this PostSite.
        """
        self.openapi_types = {
            'access_url': str,
            'admin_url': str,
            'akeeba_profile': str,
            'backup_schedule': str,
            'date_backup': str,
            'name': str,
            'notes': str,
            'published': bool,
            'secret_word': str,
            'tags': str,
            'word_akeeba': str,
            'word_check': str
        }

        self.attribute_map = {
            'access_url': 'access_url',
            'admin_url': 'admin_url',
            'akeeba_profile': 'akeebaProfile',
            'backup_schedule': 'backupSchedule',
            'date_backup': 'dateBackup',
            'name': 'name',
            'notes': 'notes',
            'published': 'published',
            'secret_word': 'secret_word',
            'tags': 'tags',
            'word_akeeba': 'word_akeeba',
            'word_check': 'word_check'
        }

        self._access_url = access_url
        self._admin_url = admin_url
        self._akeeba_profile = akeeba_profile
        self._backup_schedule = backup_schedule
        self._date_backup = date_backup
        self._name = name
        self._notes = notes
        self._published = published
        self._secret_word = secret_word
        self._tags = tags
        self._word_akeeba = word_akeeba
        self._word_check = word_check

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostSite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostSite of this PostSite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_url(self):
        """Gets the access_url of this PostSite.

        URL of the site

        :return: The access_url of this PostSite.
        :rtype: str
        """
        return self._access_url

    @access_url.setter
    def access_url(self, access_url):
        """Sets the access_url of this PostSite.

        URL of the site

        :param access_url: The access_url of this PostSite.
        :type access_url: str
        """
        if access_url is None:
            raise ValueError("Invalid value for `access_url`, must not be `None`")

        self._access_url = access_url

    @property
    def admin_url(self):
        """Gets the admin_url of this PostSite.

        Adminsitration URL

        :return: The admin_url of this PostSite.
        :rtype: str
        """
        return self._admin_url

    @admin_url.setter
    def admin_url(self, admin_url):
        """Sets the admin_url of this PostSite.

        Adminsitration URL

        :param admin_url: The admin_url of this PostSite.
        :type admin_url: str
        """

        self._admin_url = admin_url

    @property
    def akeeba_profile(self):
        """Gets the akeeba_profile of this PostSite.

        Akeeba Profile

        :return: The akeeba_profile of this PostSite.
        :rtype: str
        """
        return self._akeeba_profile

    @akeeba_profile.setter
    def akeeba_profile(self, akeeba_profile):
        """Sets the akeeba_profile of this PostSite.

        Akeeba Profile

        :param akeeba_profile: The akeeba_profile of this PostSite.
        :type akeeba_profile: str
        """

        self._akeeba_profile = akeeba_profile

    @property
    def backup_schedule(self):
        """Gets the backup_schedule of this PostSite.

        Backup Schedule

        :return: The backup_schedule of this PostSite.
        :rtype: str
        """
        return self._backup_schedule

    @backup_schedule.setter
    def backup_schedule(self, backup_schedule):
        """Sets the backup_schedule of this PostSite.

        Backup Schedule

        :param backup_schedule: The backup_schedule of this PostSite.
        :type backup_schedule: str
        """

        self._backup_schedule = backup_schedule

    @property
    def date_backup(self):
        """Gets the date_backup of this PostSite.

        Date backup

        :return: The date_backup of this PostSite.
        :rtype: str
        """
        return self._date_backup

    @date_backup.setter
    def date_backup(self, date_backup):
        """Sets the date_backup of this PostSite.

        Date backup

        :param date_backup: The date_backup of this PostSite.
        :type date_backup: str
        """

        self._date_backup = date_backup

    @property
    def name(self):
        """Gets the name of this PostSite.

        Friendly name for the site

        :return: The name of this PostSite.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostSite.

        Friendly name for the site

        :param name: The name of this PostSite.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this PostSite.

        Personnal note for the site

        :return: The notes of this PostSite.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PostSite.

        Personnal note for the site

        :param notes: The notes of this PostSite.
        :type notes: str
        """

        self._notes = notes

    @property
    def published(self):
        """Gets the published of this PostSite.

        Published status of site

        :return: The published of this PostSite.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this PostSite.

        Published status of site

        :param published: The published of this PostSite.
        :type published: bool
        """

        self._published = published

    @property
    def secret_word(self):
        """Gets the secret_word of this PostSite.

        Watchful secret word

        :return: The secret_word of this PostSite.
        :rtype: str
        """
        return self._secret_word

    @secret_word.setter
    def secret_word(self, secret_word):
        """Sets the secret_word of this PostSite.

        Watchful secret word

        :param secret_word: The secret_word of this PostSite.
        :type secret_word: str
        """

        self._secret_word = secret_word

    @property
    def tags(self):
        """Gets the tags of this PostSite.

        JSON encoded array of tags for the site (e.g. [{<q>name</q>:<q>mytag</q>},{<q>name</q>:<q>anothertag</q>}])

        :return: The tags of this PostSite.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PostSite.

        JSON encoded array of tags for the site (e.g. [{<q>name</q>:<q>mytag</q>},{<q>name</q>:<q>anothertag</q>}])

        :param tags: The tags of this PostSite.
        :type tags: str
        """

        self._tags = tags

    @property
    def word_akeeba(self):
        """Gets the word_akeeba of this PostSite.

        Akeeba backup word

        :return: The word_akeeba of this PostSite.
        :rtype: str
        """
        return self._word_akeeba

    @word_akeeba.setter
    def word_akeeba(self, word_akeeba):
        """Sets the word_akeeba of this PostSite.

        Akeeba backup word

        :param word_akeeba: The word_akeeba of this PostSite.
        :type word_akeeba: str
        """

        self._word_akeeba = word_akeeba

    @property
    def word_check(self):
        """Gets the word_check of this PostSite.

        Word checked for uptime

        :return: The word_check of this PostSite.
        :rtype: str
        """
        return self._word_check

    @word_check.setter
    def word_check(self, word_check):
        """Sets the word_check of this PostSite.

        Word checked for uptime

        :param word_check: The word_check of this PostSite.
        :type word_check: str
        """

        self._word_check = word_check
