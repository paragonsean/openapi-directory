/*
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GymArticleDetailsDTO;
import org.openapitools.client.model.GymDTO;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The ArticleDTO Class. Contains relevant fields of Article DTO by masking actual Article entity&#39;s fields in application.             
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:23.711288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArticleDTO {
  public static final String SERIALIZED_NAME_ACTIVE_STATUS = "activeStatus";
  @SerializedName(SERIALIZED_NAME_ACTIVE_STATUS)
  private Boolean activeStatus;

  public static final String SERIALIZED_NAME_APPLY_FOR_ALL_GYMS = "applyForAllGyms";
  @SerializedName(SERIALIZED_NAME_APPLY_FOR_ALL_GYMS)
  private Boolean applyForAllGyms;

  public static final String SERIALIZED_NAME_ARTICLE_ID = "articleId";
  @SerializedName(SERIALIZED_NAME_ARTICLE_ID)
  private Integer articleId;

  public static final String SERIALIZED_NAME_AVAILABLE_GYMS = "availableGyms";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_GYMS)
  private List<GymDTO> availableGyms = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_QTY = "availableQty";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_QTY)
  private BigDecimal availableQty;

  public static final String SERIALIZED_NAME_BARCODE = "barcode";
  @SerializedName(SERIALIZED_NAME_BARCODE)
  private String barcode;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_CREATED_USER = "createdUser";
  @SerializedName(SERIALIZED_NAME_CREATED_USER)
  private String createdUser;

  public static final String SERIALIZED_NAME_CRON_EXPRESSION = "cronExpression";
  @SerializedName(SERIALIZED_NAME_CRON_EXPRESSION)
  private String cronExpression;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private BigDecimal discount;

  public static final String SERIALIZED_NAME_EMPLOYEE_DISCOUNT = "employeeDiscount";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_DISCOUNT)
  private BigDecimal employeeDiscount;

  public static final String SERIALIZED_NAME_EMPLOYEE_PRICE = "employeePrice";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_PRICE)
  private BigDecimal employeePrice;

  public static final String SERIALIZED_NAME_GYM_ARTICLES = "gymArticles";
  @SerializedName(SERIALIZED_NAME_GYM_ARTICLES)
  private List<GymArticleDetailsDTO> gymArticles;

  public static final String SERIALIZED_NAME_IS_ADD_ON = "isAddOn";
  @SerializedName(SERIALIZED_NAME_IS_ADD_ON)
  private Boolean isAddOn;

  public static final String SERIALIZED_NAME_IS_INVENTORY_ITEM = "isInventoryItem";
  @SerializedName(SERIALIZED_NAME_IS_INVENTORY_ITEM)
  private Boolean isInventoryItem;

  public static final String SERIALIZED_NAME_IS_OBSOLETE = "isObsolete";
  @SerializedName(SERIALIZED_NAME_IS_OBSOLETE)
  private Boolean isObsolete;

  public static final String SERIALIZED_NAME_MEASURE_UNIT = "measureUnit";
  @SerializedName(SERIALIZED_NAME_MEASURE_UNIT)
  private String measureUnit;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private OffsetDateTime modifiedDate;

  public static final String SERIALIZED_NAME_MODIFIED_USER = "modifiedUser";
  @SerializedName(SERIALIZED_NAME_MODIFIED_USER)
  private String modifiedUser;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_REORDER_LEVEL = "reorderLevel";
  @SerializedName(SERIALIZED_NAME_REORDER_LEVEL)
  private BigDecimal reorderLevel;

  public static final String SERIALIZED_NAME_REVENUE_ACCOUNT_ID = "revenueAccountId";
  @SerializedName(SERIALIZED_NAME_REVENUE_ACCOUNT_ID)
  private Integer revenueAccountId;

  public static final String SERIALIZED_NAME_SELLING_PRICE = "sellingPrice";
  @SerializedName(SERIALIZED_NAME_SELLING_PRICE)
  private BigDecimal sellingPrice;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VAT = "vat";
  @SerializedName(SERIALIZED_NAME_VAT)
  private BigDecimal vat;

  public static final String SERIALIZED_NAME_VAT_APPLICABLE = "vatApplicable";
  @SerializedName(SERIALIZED_NAME_VAT_APPLICABLE)
  private Boolean vatApplicable;

  public ArticleDTO() {
  }

  public ArticleDTO activeStatus(Boolean activeStatus) {
    this.activeStatus = activeStatus;
    return this;
  }

  /**
   * Active Status 
   * @return activeStatus
   */
  @javax.annotation.Nullable
  public Boolean getActiveStatus() {
    return activeStatus;
  }

  public void setActiveStatus(Boolean activeStatus) {
    this.activeStatus = activeStatus;
  }


  public ArticleDTO applyForAllGyms(Boolean applyForAllGyms) {
    this.applyForAllGyms = applyForAllGyms;
    return this;
  }

  /**
   * Get applyForAllGyms
   * @return applyForAllGyms
   */
  @javax.annotation.Nullable
  public Boolean getApplyForAllGyms() {
    return applyForAllGyms;
  }

  public void setApplyForAllGyms(Boolean applyForAllGyms) {
    this.applyForAllGyms = applyForAllGyms;
  }


  public ArticleDTO articleId(Integer articleId) {
    this.articleId = articleId;
    return this;
  }

  /**
   * Get articleId
   * @return articleId
   */
  @javax.annotation.Nullable
  public Integer getArticleId() {
    return articleId;
  }

  public void setArticleId(Integer articleId) {
    this.articleId = articleId;
  }


  public ArticleDTO availableGyms(List<GymDTO> availableGyms) {
    this.availableGyms = availableGyms;
    return this;
  }

  public ArticleDTO addAvailableGymsItem(GymDTO availableGymsItem) {
    if (this.availableGyms == null) {
      this.availableGyms = new ArrayList<>();
    }
    this.availableGyms.add(availableGymsItem);
    return this;
  }

  /**
   * Get availableGyms
   * @return availableGyms
   */
  @javax.annotation.Nonnull
  public List<GymDTO> getAvailableGyms() {
    return availableGyms;
  }

  public void setAvailableGyms(List<GymDTO> availableGyms) {
    this.availableGyms = availableGyms;
  }


  public ArticleDTO availableQty(BigDecimal availableQty) {
    this.availableQty = availableQty;
    return this;
  }

  /**
   * Default AvailableQty
   * @return availableQty
   */
  @javax.annotation.Nullable
  public BigDecimal getAvailableQty() {
    return availableQty;
  }

  public void setAvailableQty(BigDecimal availableQty) {
    this.availableQty = availableQty;
  }


  public ArticleDTO barcode(String barcode) {
    this.barcode = barcode;
    return this;
  }

  /**
   * Get barcode
   * @return barcode
   */
  @javax.annotation.Nullable
  public String getBarcode() {
    return barcode;
  }

  public void setBarcode(String barcode) {
    this.barcode = barcode;
  }


  public ArticleDTO createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public ArticleDTO createdUser(String createdUser) {
    this.createdUser = createdUser;
    return this;
  }

  /**
   * Get createdUser
   * @return createdUser
   */
  @javax.annotation.Nullable
  public String getCreatedUser() {
    return createdUser;
  }

  public void setCreatedUser(String createdUser) {
    this.createdUser = createdUser;
  }


  public ArticleDTO cronExpression(String cronExpression) {
    this.cronExpression = cronExpression;
    return this;
  }

  /**
   * Access Schedule CRON Expression 
   * @return cronExpression
   */
  @javax.annotation.Nullable
  public String getCronExpression() {
    return cronExpression;
  }

  public void setCronExpression(String cronExpression) {
    this.cronExpression = cronExpression;
  }


  public ArticleDTO description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ArticleDTO discount(BigDecimal discount) {
    this.discount = discount;
    return this;
  }

  /**
   * Get discount
   * @return discount
   */
  @javax.annotation.Nullable
  public BigDecimal getDiscount() {
    return discount;
  }

  public void setDiscount(BigDecimal discount) {
    this.discount = discount;
  }


  public ArticleDTO employeeDiscount(BigDecimal employeeDiscount) {
    this.employeeDiscount = employeeDiscount;
    return this;
  }

  /**
   * Default EmployeeDiscount
   * @return employeeDiscount
   */
  @javax.annotation.Nullable
  public BigDecimal getEmployeeDiscount() {
    return employeeDiscount;
  }

  public void setEmployeeDiscount(BigDecimal employeeDiscount) {
    this.employeeDiscount = employeeDiscount;
  }


  public ArticleDTO employeePrice(BigDecimal employeePrice) {
    this.employeePrice = employeePrice;
    return this;
  }

  /**
   * Default EmployeePrice
   * @return employeePrice
   */
  @javax.annotation.Nullable
  public BigDecimal getEmployeePrice() {
    return employeePrice;
  }

  public void setEmployeePrice(BigDecimal employeePrice) {
    this.employeePrice = employeePrice;
  }


  public ArticleDTO gymArticles(List<GymArticleDetailsDTO> gymArticles) {
    this.gymArticles = gymArticles;
    return this;
  }

  public ArticleDTO addGymArticlesItem(GymArticleDetailsDTO gymArticlesItem) {
    if (this.gymArticles == null) {
      this.gymArticles = new ArrayList<>();
    }
    this.gymArticles.add(gymArticlesItem);
    return this;
  }

  /**
   * Gym Customizations 
   * @return gymArticles
   */
  @javax.annotation.Nullable
  public List<GymArticleDetailsDTO> getGymArticles() {
    return gymArticles;
  }

  public void setGymArticles(List<GymArticleDetailsDTO> gymArticles) {
    this.gymArticles = gymArticles;
  }


  public ArticleDTO isAddOn(Boolean isAddOn) {
    this.isAddOn = isAddOn;
    return this;
  }

  /**
   * Get isAddOn
   * @return isAddOn
   */
  @javax.annotation.Nullable
  public Boolean getIsAddOn() {
    return isAddOn;
  }

  public void setIsAddOn(Boolean isAddOn) {
    this.isAddOn = isAddOn;
  }


  public ArticleDTO isInventoryItem(Boolean isInventoryItem) {
    this.isInventoryItem = isInventoryItem;
    return this;
  }

  /**
   * Default IsInventoryItem of the Article 
   * @return isInventoryItem
   */
  @javax.annotation.Nullable
  public Boolean getIsInventoryItem() {
    return isInventoryItem;
  }

  public void setIsInventoryItem(Boolean isInventoryItem) {
    this.isInventoryItem = isInventoryItem;
  }


  public ArticleDTO isObsolete(Boolean isObsolete) {
    this.isObsolete = isObsolete;
    return this;
  }

  /**
   * Default IsObsolete of the Article 
   * @return isObsolete
   */
  @javax.annotation.Nullable
  public Boolean getIsObsolete() {
    return isObsolete;
  }

  public void setIsObsolete(Boolean isObsolete) {
    this.isObsolete = isObsolete;
  }


  public ArticleDTO measureUnit(String measureUnit) {
    this.measureUnit = measureUnit;
    return this;
  }

  /**
   * Get measureUnit
   * @return measureUnit
   */
  @javax.annotation.Nonnull
  public String getMeasureUnit() {
    return measureUnit;
  }

  public void setMeasureUnit(String measureUnit) {
    this.measureUnit = measureUnit;
  }


  public ArticleDTO modifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Get modifiedDate
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public ArticleDTO modifiedUser(String modifiedUser) {
    this.modifiedUser = modifiedUser;
    return this;
  }

  /**
   * Get modifiedUser
   * @return modifiedUser
   */
  @javax.annotation.Nullable
  public String getModifiedUser() {
    return modifiedUser;
  }

  public void setModifiedUser(String modifiedUser) {
    this.modifiedUser = modifiedUser;
  }


  public ArticleDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ArticleDTO number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public ArticleDTO price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nonnull
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public ArticleDTO reorderLevel(BigDecimal reorderLevel) {
    this.reorderLevel = reorderLevel;
    return this;
  }

  /**
   * Deafault ReorderLevel
   * @return reorderLevel
   */
  @javax.annotation.Nullable
  public BigDecimal getReorderLevel() {
    return reorderLevel;
  }

  public void setReorderLevel(BigDecimal reorderLevel) {
    this.reorderLevel = reorderLevel;
  }


  public ArticleDTO revenueAccountId(Integer revenueAccountId) {
    this.revenueAccountId = revenueAccountId;
    return this;
  }

  /**
   * Default Revenue account
   * @return revenueAccountId
   */
  @javax.annotation.Nullable
  public Integer getRevenueAccountId() {
    return revenueAccountId;
  }

  public void setRevenueAccountId(Integer revenueAccountId) {
    this.revenueAccountId = revenueAccountId;
  }


  public ArticleDTO sellingPrice(BigDecimal sellingPrice) {
    this.sellingPrice = sellingPrice;
    return this;
  }

  /**
   * Default SellingPrice
   * @return sellingPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getSellingPrice() {
    return sellingPrice;
  }

  public void setSellingPrice(BigDecimal sellingPrice) {
    this.sellingPrice = sellingPrice;
  }


  public ArticleDTO tags(String tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }


  public ArticleDTO type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ArticleDTO vat(BigDecimal vat) {
    this.vat = vat;
    return this;
  }

  /**
   * Get vat
   * @return vat
   */
  @javax.annotation.Nullable
  public BigDecimal getVat() {
    return vat;
  }

  public void setVat(BigDecimal vat) {
    this.vat = vat;
  }


  public ArticleDTO vatApplicable(Boolean vatApplicable) {
    this.vatApplicable = vatApplicable;
    return this;
  }

  /**
   * VAT Applicable 
   * @return vatApplicable
   */
  @javax.annotation.Nullable
  public Boolean getVatApplicable() {
    return vatApplicable;
  }

  public void setVatApplicable(Boolean vatApplicable) {
    this.vatApplicable = vatApplicable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArticleDTO articleDTO = (ArticleDTO) o;
    return Objects.equals(this.activeStatus, articleDTO.activeStatus) &&
        Objects.equals(this.applyForAllGyms, articleDTO.applyForAllGyms) &&
        Objects.equals(this.articleId, articleDTO.articleId) &&
        Objects.equals(this.availableGyms, articleDTO.availableGyms) &&
        Objects.equals(this.availableQty, articleDTO.availableQty) &&
        Objects.equals(this.barcode, articleDTO.barcode) &&
        Objects.equals(this.createdDate, articleDTO.createdDate) &&
        Objects.equals(this.createdUser, articleDTO.createdUser) &&
        Objects.equals(this.cronExpression, articleDTO.cronExpression) &&
        Objects.equals(this.description, articleDTO.description) &&
        Objects.equals(this.discount, articleDTO.discount) &&
        Objects.equals(this.employeeDiscount, articleDTO.employeeDiscount) &&
        Objects.equals(this.employeePrice, articleDTO.employeePrice) &&
        Objects.equals(this.gymArticles, articleDTO.gymArticles) &&
        Objects.equals(this.isAddOn, articleDTO.isAddOn) &&
        Objects.equals(this.isInventoryItem, articleDTO.isInventoryItem) &&
        Objects.equals(this.isObsolete, articleDTO.isObsolete) &&
        Objects.equals(this.measureUnit, articleDTO.measureUnit) &&
        Objects.equals(this.modifiedDate, articleDTO.modifiedDate) &&
        Objects.equals(this.modifiedUser, articleDTO.modifiedUser) &&
        Objects.equals(this.name, articleDTO.name) &&
        Objects.equals(this.number, articleDTO.number) &&
        Objects.equals(this.price, articleDTO.price) &&
        Objects.equals(this.reorderLevel, articleDTO.reorderLevel) &&
        Objects.equals(this.revenueAccountId, articleDTO.revenueAccountId) &&
        Objects.equals(this.sellingPrice, articleDTO.sellingPrice) &&
        Objects.equals(this.tags, articleDTO.tags) &&
        Objects.equals(this.type, articleDTO.type) &&
        Objects.equals(this.vat, articleDTO.vat) &&
        Objects.equals(this.vatApplicable, articleDTO.vatApplicable);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeStatus, applyForAllGyms, articleId, availableGyms, availableQty, barcode, createdDate, createdUser, cronExpression, description, discount, employeeDiscount, employeePrice, gymArticles, isAddOn, isInventoryItem, isObsolete, measureUnit, modifiedDate, modifiedUser, name, number, price, reorderLevel, revenueAccountId, sellingPrice, tags, type, vat, vatApplicable);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArticleDTO {\n");
    sb.append("    activeStatus: ").append(toIndentedString(activeStatus)).append("\n");
    sb.append("    applyForAllGyms: ").append(toIndentedString(applyForAllGyms)).append("\n");
    sb.append("    articleId: ").append(toIndentedString(articleId)).append("\n");
    sb.append("    availableGyms: ").append(toIndentedString(availableGyms)).append("\n");
    sb.append("    availableQty: ").append(toIndentedString(availableQty)).append("\n");
    sb.append("    barcode: ").append(toIndentedString(barcode)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    createdUser: ").append(toIndentedString(createdUser)).append("\n");
    sb.append("    cronExpression: ").append(toIndentedString(cronExpression)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    employeeDiscount: ").append(toIndentedString(employeeDiscount)).append("\n");
    sb.append("    employeePrice: ").append(toIndentedString(employeePrice)).append("\n");
    sb.append("    gymArticles: ").append(toIndentedString(gymArticles)).append("\n");
    sb.append("    isAddOn: ").append(toIndentedString(isAddOn)).append("\n");
    sb.append("    isInventoryItem: ").append(toIndentedString(isInventoryItem)).append("\n");
    sb.append("    isObsolete: ").append(toIndentedString(isObsolete)).append("\n");
    sb.append("    measureUnit: ").append(toIndentedString(measureUnit)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    modifiedUser: ").append(toIndentedString(modifiedUser)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    reorderLevel: ").append(toIndentedString(reorderLevel)).append("\n");
    sb.append("    revenueAccountId: ").append(toIndentedString(revenueAccountId)).append("\n");
    sb.append("    sellingPrice: ").append(toIndentedString(sellingPrice)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vat: ").append(toIndentedString(vat)).append("\n");
    sb.append("    vatApplicable: ").append(toIndentedString(vatApplicable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeStatus");
    openapiFields.add("applyForAllGyms");
    openapiFields.add("articleId");
    openapiFields.add("availableGyms");
    openapiFields.add("availableQty");
    openapiFields.add("barcode");
    openapiFields.add("createdDate");
    openapiFields.add("createdUser");
    openapiFields.add("cronExpression");
    openapiFields.add("description");
    openapiFields.add("discount");
    openapiFields.add("employeeDiscount");
    openapiFields.add("employeePrice");
    openapiFields.add("gymArticles");
    openapiFields.add("isAddOn");
    openapiFields.add("isInventoryItem");
    openapiFields.add("isObsolete");
    openapiFields.add("measureUnit");
    openapiFields.add("modifiedDate");
    openapiFields.add("modifiedUser");
    openapiFields.add("name");
    openapiFields.add("number");
    openapiFields.add("price");
    openapiFields.add("reorderLevel");
    openapiFields.add("revenueAccountId");
    openapiFields.add("sellingPrice");
    openapiFields.add("tags");
    openapiFields.add("type");
    openapiFields.add("vat");
    openapiFields.add("vatApplicable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("availableGyms");
    openapiRequiredFields.add("measureUnit");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArticleDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArticleDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArticleDTO is not found in the empty JSON string", ArticleDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArticleDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArticleDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ArticleDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("availableGyms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableGyms` to be an array in the JSON string but got `%s`", jsonObj.get("availableGyms").toString()));
      }

      JsonArray jsonArrayavailableGyms = jsonObj.getAsJsonArray("availableGyms");
      // validate the required field `availableGyms` (array)
      for (int i = 0; i < jsonArrayavailableGyms.size(); i++) {
        GymDTO.validateJsonElement(jsonArrayavailableGyms.get(i));
      };
      if ((jsonObj.get("barcode") != null && !jsonObj.get("barcode").isJsonNull()) && !jsonObj.get("barcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `barcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("barcode").toString()));
      }
      if ((jsonObj.get("createdUser") != null && !jsonObj.get("createdUser").isJsonNull()) && !jsonObj.get("createdUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdUser").toString()));
      }
      if ((jsonObj.get("cronExpression") != null && !jsonObj.get("cronExpression").isJsonNull()) && !jsonObj.get("cronExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cronExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cronExpression").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("gymArticles") != null && !jsonObj.get("gymArticles").isJsonNull()) {
        JsonArray jsonArraygymArticles = jsonObj.getAsJsonArray("gymArticles");
        if (jsonArraygymArticles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("gymArticles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `gymArticles` to be an array in the JSON string but got `%s`", jsonObj.get("gymArticles").toString()));
          }

          // validate the optional field `gymArticles` (array)
          for (int i = 0; i < jsonArraygymArticles.size(); i++) {
            GymArticleDetailsDTO.validateJsonElement(jsonArraygymArticles.get(i));
          };
        }
      }
      if (!jsonObj.get("measureUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measureUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measureUnit").toString()));
      }
      if ((jsonObj.get("modifiedUser") != null && !jsonObj.get("modifiedUser").isJsonNull()) && !jsonObj.get("modifiedUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedUser").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArticleDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArticleDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArticleDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArticleDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ArticleDTO>() {
           @Override
           public void write(JsonWriter out, ArticleDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArticleDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArticleDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArticleDTO
   * @throws IOException if the JSON string is invalid with respect to ArticleDTO
   */
  public static ArticleDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArticleDTO.class);
  }

  /**
   * Convert an instance of ArticleDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

