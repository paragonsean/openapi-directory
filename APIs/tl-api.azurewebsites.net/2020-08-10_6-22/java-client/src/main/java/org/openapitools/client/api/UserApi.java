/*
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.UserDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for userGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response with User entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/User";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return userGetCall(_callback);

    }

    /**
     * Get all Users detail This will return all properties related to User entity             
     * 
     * @return UserDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response with User entity </td><td>  -  </td></tr>
     </table>
     */
    public UserDTO userGet() throws ApiException {
        ApiResponse<UserDTO> localVarResp = userGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all Users detail This will return all properties related to User entity             
     * 
     * @return ApiResponse&lt;UserDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response with User entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDTO> userGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Users detail This will return all properties related to User entity              (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response with User entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userGetAsync(final ApiCallback<UserDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = userGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userRegisterUser
     * @param userId Indentity number(primary key) for user object. Generated in DB table when inserting a record.              (optional)
     * @param accountNumber Account number of the user.It can be any stakeholder of the application.even can be a gym.              (optional)
     * @param gymNumber If this user is a gym, then the gym number.              (optional)
     * @param externalEntityNumber Entity number that make a relationship with BOX API DB.              (optional)
     * @param name Name of the user.              (optional)
     * @param number Unique number maintain by application to idenify user.              (optional)
     * @param introduceBy If Someone introduced this user to the system, then that user&#39;s UserId.              (optional)
     * @param guardian Gaurdian of the this user if he/she is under 18 years old.              (optional)
     * @param typeId Type of the user.              (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userRegisterUserCall(Integer userId, String accountNumber, String gymNumber, String externalEntityNumber, String name, String number, Integer introduceBy, Integer guardian, Integer typeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/User/registerUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserId", userId));
        }

        if (accountNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AccountNumber", accountNumber));
        }

        if (gymNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GymNumber", gymNumber));
        }

        if (externalEntityNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExternalEntityNumber", externalEntityNumber));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Number", number));
        }

        if (introduceBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IntroduceBy", introduceBy));
        }

        if (guardian != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Guardian", guardian));
        }

        if (typeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TypeId", typeId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userRegisterUserValidateBeforeCall(Integer userId, String accountNumber, String gymNumber, String externalEntityNumber, String name, String number, Integer introduceBy, Integer guardian, Integer typeId, final ApiCallback _callback) throws ApiException {
        return userRegisterUserCall(userId, accountNumber, gymNumber, externalEntityNumber, name, number, introduceBy, guardian, typeId, _callback);

    }

    /**
     * Register a new User             
     * 
     * @param userId Indentity number(primary key) for user object. Generated in DB table when inserting a record.              (optional)
     * @param accountNumber Account number of the user.It can be any stakeholder of the application.even can be a gym.              (optional)
     * @param gymNumber If this user is a gym, then the gym number.              (optional)
     * @param externalEntityNumber Entity number that make a relationship with BOX API DB.              (optional)
     * @param name Name of the user.              (optional)
     * @param number Unique number maintain by application to idenify user.              (optional)
     * @param introduceBy If Someone introduced this user to the system, then that user&#39;s UserId.              (optional)
     * @param guardian Gaurdian of the this user if he/she is under 18 years old.              (optional)
     * @param typeId Type of the user.              (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userRegisterUser(Integer userId, String accountNumber, String gymNumber, String externalEntityNumber, String name, String number, Integer introduceBy, Integer guardian, Integer typeId) throws ApiException {
        userRegisterUserWithHttpInfo(userId, accountNumber, gymNumber, externalEntityNumber, name, number, introduceBy, guardian, typeId);
    }

    /**
     * Register a new User             
     * 
     * @param userId Indentity number(primary key) for user object. Generated in DB table when inserting a record.              (optional)
     * @param accountNumber Account number of the user.It can be any stakeholder of the application.even can be a gym.              (optional)
     * @param gymNumber If this user is a gym, then the gym number.              (optional)
     * @param externalEntityNumber Entity number that make a relationship with BOX API DB.              (optional)
     * @param name Name of the user.              (optional)
     * @param number Unique number maintain by application to idenify user.              (optional)
     * @param introduceBy If Someone introduced this user to the system, then that user&#39;s UserId.              (optional)
     * @param guardian Gaurdian of the this user if he/she is under 18 years old.              (optional)
     * @param typeId Type of the user.              (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userRegisterUserWithHttpInfo(Integer userId, String accountNumber, String gymNumber, String externalEntityNumber, String name, String number, Integer introduceBy, Integer guardian, Integer typeId) throws ApiException {
        okhttp3.Call localVarCall = userRegisterUserValidateBeforeCall(userId, accountNumber, gymNumber, externalEntityNumber, name, number, introduceBy, guardian, typeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register a new User              (asynchronously)
     * 
     * @param userId Indentity number(primary key) for user object. Generated in DB table when inserting a record.              (optional)
     * @param accountNumber Account number of the user.It can be any stakeholder of the application.even can be a gym.              (optional)
     * @param gymNumber If this user is a gym, then the gym number.              (optional)
     * @param externalEntityNumber Entity number that make a relationship with BOX API DB.              (optional)
     * @param name Name of the user.              (optional)
     * @param number Unique number maintain by application to idenify user.              (optional)
     * @param introduceBy If Someone introduced this user to the system, then that user&#39;s UserId.              (optional)
     * @param guardian Gaurdian of the this user if he/she is under 18 years old.              (optional)
     * @param typeId Type of the user.              (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userRegisterUserAsync(Integer userId, String accountNumber, String gymNumber, String externalEntityNumber, String name, String number, Integer introduceBy, Integer guardian, Integer typeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userRegisterUserValidateBeforeCall(userId, accountNumber, gymNumber, externalEntityNumber, name, number, introduceBy, guardian, typeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userUpdateUser
     * @param userId Indentity number(primary key) for user object. Generated in DB table when inserting a record.              (optional)
     * @param accountNumber Account number of the user.It can be any stakeholder of the application.even can be a gym.              (optional)
     * @param gymNumber If this user is a gym, then the gym number.              (optional)
     * @param externalEntityNumber Entity number that make a relationship with BOX API DB.              (optional)
     * @param name Name of the user.              (optional)
     * @param number Unique number maintain by application to idenify user.              (optional)
     * @param introduceBy If Someone introduced this user to the system, then that user&#39;s UserId.              (optional)
     * @param guardian Gaurdian of the this user if he/she is under 18 years old.              (optional)
     * @param typeId Type of the user.              (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response true or false </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userUpdateUserCall(Integer userId, String accountNumber, String gymNumber, String externalEntityNumber, String name, String number, Integer introduceBy, Integer guardian, Integer typeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/User/updateuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserId", userId));
        }

        if (accountNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AccountNumber", accountNumber));
        }

        if (gymNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GymNumber", gymNumber));
        }

        if (externalEntityNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExternalEntityNumber", externalEntityNumber));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Number", number));
        }

        if (introduceBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IntroduceBy", introduceBy));
        }

        if (guardian != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Guardian", guardian));
        }

        if (typeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TypeId", typeId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userUpdateUserValidateBeforeCall(Integer userId, String accountNumber, String gymNumber, String externalEntityNumber, String name, String number, Integer introduceBy, Integer guardian, Integer typeId, final ApiCallback _callback) throws ApiException {
        return userUpdateUserCall(userId, accountNumber, gymNumber, externalEntityNumber, name, number, introduceBy, guardian, typeId, _callback);

    }

    /**
     * Update an exsisting User             
     * 
     * @param userId Indentity number(primary key) for user object. Generated in DB table when inserting a record.              (optional)
     * @param accountNumber Account number of the user.It can be any stakeholder of the application.even can be a gym.              (optional)
     * @param gymNumber If this user is a gym, then the gym number.              (optional)
     * @param externalEntityNumber Entity number that make a relationship with BOX API DB.              (optional)
     * @param name Name of the user.              (optional)
     * @param number Unique number maintain by application to idenify user.              (optional)
     * @param introduceBy If Someone introduced this user to the system, then that user&#39;s UserId.              (optional)
     * @param guardian Gaurdian of the this user if he/she is under 18 years old.              (optional)
     * @param typeId Type of the user.              (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response true or false </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void userUpdateUser(Integer userId, String accountNumber, String gymNumber, String externalEntityNumber, String name, String number, Integer introduceBy, Integer guardian, Integer typeId) throws ApiException {
        userUpdateUserWithHttpInfo(userId, accountNumber, gymNumber, externalEntityNumber, name, number, introduceBy, guardian, typeId);
    }

    /**
     * Update an exsisting User             
     * 
     * @param userId Indentity number(primary key) for user object. Generated in DB table when inserting a record.              (optional)
     * @param accountNumber Account number of the user.It can be any stakeholder of the application.even can be a gym.              (optional)
     * @param gymNumber If this user is a gym, then the gym number.              (optional)
     * @param externalEntityNumber Entity number that make a relationship with BOX API DB.              (optional)
     * @param name Name of the user.              (optional)
     * @param number Unique number maintain by application to idenify user.              (optional)
     * @param introduceBy If Someone introduced this user to the system, then that user&#39;s UserId.              (optional)
     * @param guardian Gaurdian of the this user if he/she is under 18 years old.              (optional)
     * @param typeId Type of the user.              (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response true or false </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userUpdateUserWithHttpInfo(Integer userId, String accountNumber, String gymNumber, String externalEntityNumber, String name, String number, Integer introduceBy, Integer guardian, Integer typeId) throws ApiException {
        okhttp3.Call localVarCall = userUpdateUserValidateBeforeCall(userId, accountNumber, gymNumber, externalEntityNumber, name, number, introduceBy, guardian, typeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an exsisting User              (asynchronously)
     * 
     * @param userId Indentity number(primary key) for user object. Generated in DB table when inserting a record.              (optional)
     * @param accountNumber Account number of the user.It can be any stakeholder of the application.even can be a gym.              (optional)
     * @param gymNumber If this user is a gym, then the gym number.              (optional)
     * @param externalEntityNumber Entity number that make a relationship with BOX API DB.              (optional)
     * @param name Name of the user.              (optional)
     * @param number Unique number maintain by application to idenify user.              (optional)
     * @param introduceBy If Someone introduced this user to the system, then that user&#39;s UserId.              (optional)
     * @param guardian Gaurdian of the this user if he/she is under 18 years old.              (optional)
     * @param typeId Type of the user.              (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response true or false </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userUpdateUserAsync(Integer userId, String accountNumber, String gymNumber, String externalEntityNumber, String name, String number, Integer introduceBy, Integer guardian, Integer typeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userUpdateUserValidateBeforeCall(userId, accountNumber, gymNumber, externalEntityNumber, name, number, introduceBy, guardian, typeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
