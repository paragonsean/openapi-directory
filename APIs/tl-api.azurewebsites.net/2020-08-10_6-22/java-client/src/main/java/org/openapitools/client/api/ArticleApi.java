/*
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ArticleDTO;
import org.openapitools.client.model.DefaultResponseDTOOfArticleDTO;
import org.openapitools.client.model.DefaultResponseDTOOfInteger;
import org.openapitools.client.model.DefaultResponseDTOOfListOfArticleSearchDTO;
import org.openapitools.client.model.DefaultResponseDTOOfStatusDTO;
import org.openapitools.client.model.GymArticleDetailsDTO;
import org.openapitools.client.model.MeasureUnitDTO;
import org.openapitools.client.model.ModelApiException;
import org.openapitools.client.model.ModelApiResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArticleApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ArticleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArticleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for articleAddMeasureUnit
     * @param measureUnitDTO list of measureUnit (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleAddMeasureUnitCall(List<MeasureUnitDTO> measureUnitDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = measureUnitDTO;

        // create path and map variables
        String localVarPath = "/api/Article/MeasureUnit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articleAddMeasureUnitValidateBeforeCall(List<MeasureUnitDTO> measureUnitDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'measureUnitDTO' is set
        if (measureUnitDTO == null) {
            throw new ApiException("Missing the required parameter 'measureUnitDTO' when calling articleAddMeasureUnit(Async)");
        }

        return articleAddMeasureUnitCall(measureUnitDTO, _callback);

    }

    /**
     * Add measure unit
     * 
     * @param measureUnitDTO list of measureUnit (required)
     * @return DefaultResponseDTOOfStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponseDTOOfStatusDTO articleAddMeasureUnit(List<MeasureUnitDTO> measureUnitDTO) throws ApiException {
        ApiResponse<DefaultResponseDTOOfStatusDTO> localVarResp = articleAddMeasureUnitWithHttpInfo(measureUnitDTO);
        return localVarResp.getData();
    }

    /**
     * Add measure unit
     * 
     * @param measureUnitDTO list of measureUnit (required)
     * @return ApiResponse&lt;DefaultResponseDTOOfStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponseDTOOfStatusDTO> articleAddMeasureUnitWithHttpInfo(List<MeasureUnitDTO> measureUnitDTO) throws ApiException {
        okhttp3.Call localVarCall = articleAddMeasureUnitValidateBeforeCall(measureUnitDTO, null);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfStatusDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add measure unit (asynchronously)
     * 
     * @param measureUnitDTO list of measureUnit (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleAddMeasureUnitAsync(List<MeasureUnitDTO> measureUnitDTO, final ApiCallback<DefaultResponseDTOOfStatusDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = articleAddMeasureUnitValidateBeforeCall(measureUnitDTO, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfStatusDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articleDelete
     * @param articleId indentity number(primary key) for article object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> operation was success(true) or fail(false)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleDeleteCall(Integer articleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Article";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (articleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ArticleId", articleId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articleDeleteValidateBeforeCall(Integer articleId, final ApiCallback _callback) throws ApiException {
        return articleDeleteCall(articleId, _callback);

    }

    /**
     * Delete article from the system             
     * 
     * @param articleId indentity number(primary key) for article object (optional)
     * @return DefaultResponseDTOOfInteger
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> operation was success(true) or fail(false)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponseDTOOfInteger articleDelete(Integer articleId) throws ApiException {
        ApiResponse<DefaultResponseDTOOfInteger> localVarResp = articleDeleteWithHttpInfo(articleId);
        return localVarResp.getData();
    }

    /**
     * Delete article from the system             
     * 
     * @param articleId indentity number(primary key) for article object (optional)
     * @return ApiResponse&lt;DefaultResponseDTOOfInteger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> operation was success(true) or fail(false)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponseDTOOfInteger> articleDeleteWithHttpInfo(Integer articleId) throws ApiException {
        okhttp3.Call localVarCall = articleDeleteValidateBeforeCall(articleId, null);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfInteger>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete article from the system              (asynchronously)
     * 
     * @param articleId indentity number(primary key) for article object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> operation was success(true) or fail(false)  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleDeleteAsync(Integer articleId, final ApiCallback<DefaultResponseDTOOfInteger> _callback) throws ApiException {

        okhttp3.Call localVarCall = articleDeleteValidateBeforeCall(articleId, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfInteger>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articleGet
     * @param articleID indentity number (primary key) for article object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response with Article entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleGetCall(Integer articleID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Article/{articleID}"
            .replace("{" + "articleID" + "}", localVarApiClient.escapeString(articleID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articleGetValidateBeforeCall(Integer articleID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleID' is set
        if (articleID == null) {
            throw new ApiException("Missing the required parameter 'articleID' when calling articleGet(Async)");
        }

        return articleGetCall(articleID, _callback);

    }

    /**
     * Get article details This will return all properties related to article entity             
     * 
     * @param articleID indentity number (primary key) for article object (required)
     * @return DefaultResponseDTOOfArticleDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response with Article entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponseDTOOfArticleDTO articleGet(Integer articleID) throws ApiException {
        ApiResponse<DefaultResponseDTOOfArticleDTO> localVarResp = articleGetWithHttpInfo(articleID);
        return localVarResp.getData();
    }

    /**
     * Get article details This will return all properties related to article entity             
     * 
     * @param articleID indentity number (primary key) for article object (required)
     * @return ApiResponse&lt;DefaultResponseDTOOfArticleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response with Article entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponseDTOOfArticleDTO> articleGetWithHttpInfo(Integer articleID) throws ApiException {
        okhttp3.Call localVarCall = articleGetValidateBeforeCall(articleID, null);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfArticleDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get article details This will return all properties related to article entity              (asynchronously)
     * 
     * @param articleID indentity number (primary key) for article object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response with Article entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleGetAsync(Integer articleID, final ApiCallback<DefaultResponseDTOOfArticleDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = articleGetValidateBeforeCall(articleID, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfArticleDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articleGetAddons
     * @param searchText Search text - will be search by the name (optional)
     * @param gymIds Comma separated gymIds deafult \&quot;-1\&quot; for all gyms (optional, default to -1)
     * @param type  (optional, default to all)
     * @param limit  (optional, default to 100)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleGetAddonsCall(String searchText, String gymIds, String type, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Article/GetAddons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        if (gymIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gymIds", gymIds));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articleGetAddonsValidateBeforeCall(String searchText, String gymIds, String type, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return articleGetAddonsCall(searchText, gymIds, type, limit, offset, _callback);

    }

    /**
     * 
     * 
     * @param searchText Search text - will be search by the name (optional)
     * @param gymIds Comma separated gymIds deafult \&quot;-1\&quot; for all gyms (optional, default to -1)
     * @param type  (optional, default to all)
     * @param limit  (optional, default to 100)
     * @param offset  (optional, default to 0)
     * @return DefaultResponseDTOOfListOfArticleSearchDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponseDTOOfListOfArticleSearchDTO articleGetAddons(String searchText, String gymIds, String type, Integer limit, Integer offset) throws ApiException {
        ApiResponse<DefaultResponseDTOOfListOfArticleSearchDTO> localVarResp = articleGetAddonsWithHttpInfo(searchText, gymIds, type, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param searchText Search text - will be search by the name (optional)
     * @param gymIds Comma separated gymIds deafult \&quot;-1\&quot; for all gyms (optional, default to -1)
     * @param type  (optional, default to all)
     * @param limit  (optional, default to 100)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;DefaultResponseDTOOfListOfArticleSearchDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponseDTOOfListOfArticleSearchDTO> articleGetAddonsWithHttpInfo(String searchText, String gymIds, String type, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = articleGetAddonsValidateBeforeCall(searchText, gymIds, type, limit, offset, null);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfListOfArticleSearchDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param searchText Search text - will be search by the name (optional)
     * @param gymIds Comma separated gymIds deafult \&quot;-1\&quot; for all gyms (optional, default to -1)
     * @param type  (optional, default to all)
     * @param limit  (optional, default to 100)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleGetAddonsAsync(String searchText, String gymIds, String type, Integer limit, Integer offset, final ApiCallback<DefaultResponseDTOOfListOfArticleSearchDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = articleGetAddonsValidateBeforeCall(searchText, gymIds, type, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfListOfArticleSearchDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articleGetMeasureUnits
     * @param type type of the measure unit (all, item, service) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleGetMeasureUnitsCall(String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Article/MeasureUnits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articleGetMeasureUnitsValidateBeforeCall(String type, final ApiCallback _callback) throws ApiException {
        return articleGetMeasureUnitsCall(type, _callback);

    }

    /**
     * Get mesure units
     * 
     * @param type type of the measure unit (all, item, service) (optional)
     * @return DefaultResponseDTOOfStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponseDTOOfStatusDTO articleGetMeasureUnits(String type) throws ApiException {
        ApiResponse<DefaultResponseDTOOfStatusDTO> localVarResp = articleGetMeasureUnitsWithHttpInfo(type);
        return localVarResp.getData();
    }

    /**
     * Get mesure units
     * 
     * @param type type of the measure unit (all, item, service) (optional)
     * @return ApiResponse&lt;DefaultResponseDTOOfStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponseDTOOfStatusDTO> articleGetMeasureUnitsWithHttpInfo(String type) throws ApiException {
        okhttp3.Call localVarCall = articleGetMeasureUnitsValidateBeforeCall(type, null);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfStatusDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get mesure units (asynchronously)
     * 
     * @param type type of the measure unit (all, item, service) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleGetMeasureUnitsAsync(String type, final ApiCallback<DefaultResponseDTOOfStatusDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = articleGetMeasureUnitsValidateBeforeCall(type, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfStatusDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articleGetRevenueAccounts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleGetRevenueAccountsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Article/RevenueAccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articleGetRevenueAccountsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return articleGetRevenueAccountsCall(_callback);

    }

    /**
     * Get Revenue Accounts 
     * 
     * @return DefaultResponseDTOOfStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponseDTOOfStatusDTO articleGetRevenueAccounts() throws ApiException {
        ApiResponse<DefaultResponseDTOOfStatusDTO> localVarResp = articleGetRevenueAccountsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Revenue Accounts 
     * 
     * @return ApiResponse&lt;DefaultResponseDTOOfStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponseDTOOfStatusDTO> articleGetRevenueAccountsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = articleGetRevenueAccountsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfStatusDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Revenue Accounts  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleGetRevenueAccountsAsync(final ApiCallback<DefaultResponseDTOOfStatusDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = articleGetRevenueAccountsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfStatusDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articleGymArticleDetails
     * @param articleId indentity number(primary key) for article object (required)
     * @param gymId indentity number(primary key) for gym object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response with Article entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleGymArticleDetailsCall(Integer articleId, Integer gymId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Article/GymArticle/{articleId}/{gymId}"
            .replace("{" + "articleId" + "}", localVarApiClient.escapeString(articleId.toString()))
            .replace("{" + "gymId" + "}", localVarApiClient.escapeString(gymId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articleGymArticleDetailsValidateBeforeCall(Integer articleId, Integer gymId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling articleGymArticleDetails(Async)");
        }

        // verify the required parameter 'gymId' is set
        if (gymId == null) {
            throw new ApiException("Missing the required parameter 'gymId' when calling articleGymArticleDetails(Async)");
        }

        return articleGymArticleDetailsCall(articleId, gymId, _callback);

    }

    /**
     * Get Gym specific properties for article             
     * 
     * @param articleId indentity number(primary key) for article object (required)
     * @param gymId indentity number(primary key) for gym object (required)
     * @return GymArticleDetailsDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response with Article entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GymArticleDetailsDTO articleGymArticleDetails(Integer articleId, Integer gymId) throws ApiException {
        ApiResponse<GymArticleDetailsDTO> localVarResp = articleGymArticleDetailsWithHttpInfo(articleId, gymId);
        return localVarResp.getData();
    }

    /**
     * Get Gym specific properties for article             
     * 
     * @param articleId indentity number(primary key) for article object (required)
     * @param gymId indentity number(primary key) for gym object (required)
     * @return ApiResponse&lt;GymArticleDetailsDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response with Article entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GymArticleDetailsDTO> articleGymArticleDetailsWithHttpInfo(Integer articleId, Integer gymId) throws ApiException {
        okhttp3.Call localVarCall = articleGymArticleDetailsValidateBeforeCall(articleId, gymId, null);
        Type localVarReturnType = new TypeToken<GymArticleDetailsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Gym specific properties for article              (asynchronously)
     * 
     * @param articleId indentity number(primary key) for article object (required)
     * @param gymId indentity number(primary key) for gym object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response with Article entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleGymArticleDetailsAsync(Integer articleId, Integer gymId, final ApiCallback<GymArticleDetailsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = articleGymArticleDetailsValidateBeforeCall(articleId, gymId, _callback);
        Type localVarReturnType = new TypeToken<GymArticleDetailsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articlePost
     * @param articleDTO article object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlePostCall(ArticleDTO articleDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = articleDTO;

        // create path and map variables
        String localVarPath = "/api/Article";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articlePostValidateBeforeCall(ArticleDTO articleDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleDTO' is set
        if (articleDTO == null) {
            throw new ApiException("Missing the required parameter 'articleDTO' when calling articlePost(Async)");
        }

        return articlePostCall(articleDTO, _callback);

    }

    /**
     * Add new article             
     * 
     * @param articleDTO article object (required)
     * @return DefaultResponseDTOOfStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponseDTOOfStatusDTO articlePost(ArticleDTO articleDTO) throws ApiException {
        ApiResponse<DefaultResponseDTOOfStatusDTO> localVarResp = articlePostWithHttpInfo(articleDTO);
        return localVarResp.getData();
    }

    /**
     * Add new article             
     * 
     * @param articleDTO article object (required)
     * @return ApiResponse&lt;DefaultResponseDTOOfStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponseDTOOfStatusDTO> articlePostWithHttpInfo(ArticleDTO articleDTO) throws ApiException {
        okhttp3.Call localVarCall = articlePostValidateBeforeCall(articleDTO, null);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfStatusDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add new article              (asynchronously)
     * 
     * @param articleDTO article object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlePostAsync(ArticleDTO articleDTO, final ApiCallback<DefaultResponseDTOOfStatusDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = articlePostValidateBeforeCall(articleDTO, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfStatusDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articlePut
     * @param articleDTO article object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlePutCall(ArticleDTO articleDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = articleDTO;

        // create path and map variables
        String localVarPath = "/api/Article";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articlePutValidateBeforeCall(ArticleDTO articleDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleDTO' is set
        if (articleDTO == null) {
            throw new ApiException("Missing the required parameter 'articleDTO' when calling articlePut(Async)");
        }

        return articlePutCall(articleDTO, _callback);

    }

    /**
     * update existing article             
     * 
     * @param articleDTO article object (required)
     * @return DefaultResponseDTOOfStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponseDTOOfStatusDTO articlePut(ArticleDTO articleDTO) throws ApiException {
        ApiResponse<DefaultResponseDTOOfStatusDTO> localVarResp = articlePutWithHttpInfo(articleDTO);
        return localVarResp.getData();
    }

    /**
     * update existing article             
     * 
     * @param articleDTO article object (required)
     * @return ApiResponse&lt;DefaultResponseDTOOfStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponseDTOOfStatusDTO> articlePutWithHttpInfo(ArticleDTO articleDTO) throws ApiException {
        okhttp3.Call localVarCall = articlePutValidateBeforeCall(articleDTO, null);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfStatusDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * update existing article              (asynchronously)
     * 
     * @param articleDTO article object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articlePutAsync(ArticleDTO articleDTO, final ApiCallback<DefaultResponseDTOOfStatusDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = articlePutValidateBeforeCall(articleDTO, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfStatusDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articleSearch
     * @param searchText part of article name (optional)
     * @param gymId -1 for all gyms  (optional, default to -1)
     * @param type filter article type. default is &#39;all&#39; (optional, default to all)
     * @param orderBy order by column.!-- invalid column will give internal server error (optional, default to 1)
     * @param limit number of recode in result and default is 100. use negative numbers to order by desc (optional, default to 100)
     * @param offset number of recodes to skip (optional, default to 0)
     * @param activeStatus Active Status 1 : Active, 2: Inactive, 3: All, Default : 1 (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response with set of a Article entities </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleSearchCall(String searchText, Integer gymId, String type, String orderBy, Integer limit, Integer offset, Integer activeStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Article/Search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        if (gymId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gymId", gymId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (activeStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activeStatus", activeStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articleSearchValidateBeforeCall(String searchText, Integer gymId, String type, String orderBy, Integer limit, Integer offset, Integer activeStatus, final ApiCallback _callback) throws ApiException {
        return articleSearchCall(searchText, gymId, type, orderBy, limit, offset, activeStatus, _callback);

    }

    /**
     * Search articles It will only return basic information of article             
     * 
     * @param searchText part of article name (optional)
     * @param gymId -1 for all gyms  (optional, default to -1)
     * @param type filter article type. default is &#39;all&#39; (optional, default to all)
     * @param orderBy order by column.!-- invalid column will give internal server error (optional, default to 1)
     * @param limit number of recode in result and default is 100. use negative numbers to order by desc (optional, default to 100)
     * @param offset number of recodes to skip (optional, default to 0)
     * @param activeStatus Active Status 1 : Active, 2: Inactive, 3: All, Default : 1 (optional, default to 1)
     * @return DefaultResponseDTOOfListOfArticleSearchDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response with set of a Article entities </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponseDTOOfListOfArticleSearchDTO articleSearch(String searchText, Integer gymId, String type, String orderBy, Integer limit, Integer offset, Integer activeStatus) throws ApiException {
        ApiResponse<DefaultResponseDTOOfListOfArticleSearchDTO> localVarResp = articleSearchWithHttpInfo(searchText, gymId, type, orderBy, limit, offset, activeStatus);
        return localVarResp.getData();
    }

    /**
     * Search articles It will only return basic information of article             
     * 
     * @param searchText part of article name (optional)
     * @param gymId -1 for all gyms  (optional, default to -1)
     * @param type filter article type. default is &#39;all&#39; (optional, default to all)
     * @param orderBy order by column.!-- invalid column will give internal server error (optional, default to 1)
     * @param limit number of recode in result and default is 100. use negative numbers to order by desc (optional, default to 100)
     * @param offset number of recodes to skip (optional, default to 0)
     * @param activeStatus Active Status 1 : Active, 2: Inactive, 3: All, Default : 1 (optional, default to 1)
     * @return ApiResponse&lt;DefaultResponseDTOOfListOfArticleSearchDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response with set of a Article entities </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponseDTOOfListOfArticleSearchDTO> articleSearchWithHttpInfo(String searchText, Integer gymId, String type, String orderBy, Integer limit, Integer offset, Integer activeStatus) throws ApiException {
        okhttp3.Call localVarCall = articleSearchValidateBeforeCall(searchText, gymId, type, orderBy, limit, offset, activeStatus, null);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfListOfArticleSearchDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search articles It will only return basic information of article              (asynchronously)
     * 
     * @param searchText part of article name (optional)
     * @param gymId -1 for all gyms  (optional, default to -1)
     * @param type filter article type. default is &#39;all&#39; (optional, default to all)
     * @param orderBy order by column.!-- invalid column will give internal server error (optional, default to 1)
     * @param limit number of recode in result and default is 100. use negative numbers to order by desc (optional, default to 100)
     * @param offset number of recodes to skip (optional, default to 0)
     * @param activeStatus Active Status 1 : Active, 2: Inactive, 3: All, Default : 1 (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API Response with set of a Article entities </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleSearchAsync(String searchText, Integer gymId, String type, String orderBy, Integer limit, Integer offset, Integer activeStatus, final ApiCallback<DefaultResponseDTOOfListOfArticleSearchDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = articleSearchValidateBeforeCall(searchText, gymId, type, orderBy, limit, offset, activeStatus, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfListOfArticleSearchDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articleUpdateArticleGymDetails
     * @param gymArticleDetailsDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleUpdateArticleGymDetailsCall(List<GymArticleDetailsDTO> gymArticleDetailsDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = gymArticleDetailsDTO;

        // create path and map variables
        String localVarPath = "/api/Article/ArticleGymDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articleUpdateArticleGymDetailsValidateBeforeCall(List<GymArticleDetailsDTO> gymArticleDetailsDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gymArticleDetailsDTO' is set
        if (gymArticleDetailsDTO == null) {
            throw new ApiException("Missing the required parameter 'gymArticleDetailsDTO' when calling articleUpdateArticleGymDetails(Async)");
        }

        return articleUpdateArticleGymDetailsCall(gymArticleDetailsDTO, _callback);

    }

    /**
     * Add article details that associate with a Gym             
     * 
     * @param gymArticleDetailsDTO  (required)
     * @return DefaultResponseDTOOfStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponseDTOOfStatusDTO articleUpdateArticleGymDetails(List<GymArticleDetailsDTO> gymArticleDetailsDTO) throws ApiException {
        ApiResponse<DefaultResponseDTOOfStatusDTO> localVarResp = articleUpdateArticleGymDetailsWithHttpInfo(gymArticleDetailsDTO);
        return localVarResp.getData();
    }

    /**
     * Add article details that associate with a Gym             
     * 
     * @param gymArticleDetailsDTO  (required)
     * @return ApiResponse&lt;DefaultResponseDTOOfStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponseDTOOfStatusDTO> articleUpdateArticleGymDetailsWithHttpInfo(List<GymArticleDetailsDTO> gymArticleDetailsDTO) throws ApiException {
        okhttp3.Call localVarCall = articleUpdateArticleGymDetailsValidateBeforeCall(gymArticleDetailsDTO, null);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfStatusDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add article details that associate with a Gym              (asynchronously)
     * 
     * @param gymArticleDetailsDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleUpdateArticleGymDetailsAsync(List<GymArticleDetailsDTO> gymArticleDetailsDTO, final ApiCallback<DefaultResponseDTOOfStatusDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = articleUpdateArticleGymDetailsValidateBeforeCall(gymArticleDetailsDTO, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfStatusDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for articleUpdateStatus
     * @param articleId  (optional)
     * @param status 1 : activate , 2 deactivate (optional)
     * @param userName Updating user (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleUpdateStatusCall(Integer articleId, Integer status, String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Article/UpdateStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (articleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ArticleId", articleId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call articleUpdateStatusValidateBeforeCall(Integer articleId, Integer status, String userName, final ApiCallback _callback) throws ApiException {
        return articleUpdateStatusCall(articleId, status, userName, _callback);

    }

    /**
     * Deactivate existing article 
     * 
     * @param articleId  (optional)
     * @param status 1 : activate , 2 deactivate (optional)
     * @param userName Updating user (optional)
     * @return DefaultResponseDTOOfInteger
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponseDTOOfInteger articleUpdateStatus(Integer articleId, Integer status, String userName) throws ApiException {
        ApiResponse<DefaultResponseDTOOfInteger> localVarResp = articleUpdateStatusWithHttpInfo(articleId, status, userName);
        return localVarResp.getData();
    }

    /**
     * Deactivate existing article 
     * 
     * @param articleId  (optional)
     * @param status 1 : activate , 2 deactivate (optional)
     * @param userName Updating user (optional)
     * @return ApiResponse&lt;DefaultResponseDTOOfInteger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponseDTOOfInteger> articleUpdateStatusWithHttpInfo(Integer articleId, Integer status, String userName) throws ApiException {
        okhttp3.Call localVarCall = articleUpdateStatusValidateBeforeCall(articleId, status, userName, null);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfInteger>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deactivate existing article  (asynchronously)
     * 
     * @param articleId  (optional)
     * @param status 1 : activate , 2 deactivate (optional)
     * @param userName Updating user (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call articleUpdateStatusAsync(Integer articleId, Integer status, String userName, final ApiCallback<DefaultResponseDTOOfInteger> _callback) throws ApiException {

        okhttp3.Call localVarCall = articleUpdateStatusValidateBeforeCall(articleId, status, userName, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfInteger>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
