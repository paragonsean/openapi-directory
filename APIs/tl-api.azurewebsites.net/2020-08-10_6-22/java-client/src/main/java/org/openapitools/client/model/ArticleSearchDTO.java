/*
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The ArticleSearchDTO Class. Contains relevant fields of ArticleSearch DTO by masking actual Article entity&#39;s fields in application.             
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:23.711288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ArticleSearchDTO {
  public static final String SERIALIZED_NAME_ACTIVE_STATUS = "activeStatus";
  @SerializedName(SERIALIZED_NAME_ACTIVE_STATUS)
  private Boolean activeStatus;

  public static final String SERIALIZED_NAME_APPLY_FOR_ALL_GYMS = "applyForAllGyms";
  @SerializedName(SERIALIZED_NAME_APPLY_FOR_ALL_GYMS)
  private Boolean applyForAllGyms;

  public static final String SERIALIZED_NAME_ARTICLE_ID = "articleId";
  @SerializedName(SERIALIZED_NAME_ARTICLE_ID)
  private Integer articleId;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_CREATED_USER = "createdUser";
  @SerializedName(SERIALIZED_NAME_CREATED_USER)
  private String createdUser;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MEASURE_UNIT = "measureUnit";
  @SerializedName(SERIALIZED_NAME_MEASURE_UNIT)
  private String measureUnit;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private OffsetDateTime modifiedDate;

  public static final String SERIALIZED_NAME_MODIFIED_USER = "modifiedUser";
  @SerializedName(SERIALIZED_NAME_MODIFIED_USER)
  private String modifiedUser;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private Integer number;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_SELLING_PRICE = "sellingPrice";
  @SerializedName(SERIALIZED_NAME_SELLING_PRICE)
  private BigDecimal sellingPrice;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;

  public static final String SERIALIZED_NAME_TOTAL_COUNT = "totalCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private Integer totalCount;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ArticleSearchDTO() {
  }

  public ArticleSearchDTO activeStatus(Boolean activeStatus) {
    this.activeStatus = activeStatus;
    return this;
  }

  /**
   * Active Status 
   * @return activeStatus
   */
  @javax.annotation.Nullable
  public Boolean getActiveStatus() {
    return activeStatus;
  }

  public void setActiveStatus(Boolean activeStatus) {
    this.activeStatus = activeStatus;
  }


  public ArticleSearchDTO applyForAllGyms(Boolean applyForAllGyms) {
    this.applyForAllGyms = applyForAllGyms;
    return this;
  }

  /**
   * Get applyForAllGyms
   * @return applyForAllGyms
   */
  @javax.annotation.Nullable
  public Boolean getApplyForAllGyms() {
    return applyForAllGyms;
  }

  public void setApplyForAllGyms(Boolean applyForAllGyms) {
    this.applyForAllGyms = applyForAllGyms;
  }


  public ArticleSearchDTO articleId(Integer articleId) {
    this.articleId = articleId;
    return this;
  }

  /**
   * Get articleId
   * @return articleId
   */
  @javax.annotation.Nullable
  public Integer getArticleId() {
    return articleId;
  }

  public void setArticleId(Integer articleId) {
    this.articleId = articleId;
  }


  public ArticleSearchDTO createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public ArticleSearchDTO createdUser(String createdUser) {
    this.createdUser = createdUser;
    return this;
  }

  /**
   * Get createdUser
   * @return createdUser
   */
  @javax.annotation.Nullable
  public String getCreatedUser() {
    return createdUser;
  }

  public void setCreatedUser(String createdUser) {
    this.createdUser = createdUser;
  }


  public ArticleSearchDTO description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ArticleSearchDTO measureUnit(String measureUnit) {
    this.measureUnit = measureUnit;
    return this;
  }

  /**
   * MeasureUnit 
   * @return measureUnit
   */
  @javax.annotation.Nullable
  public String getMeasureUnit() {
    return measureUnit;
  }

  public void setMeasureUnit(String measureUnit) {
    this.measureUnit = measureUnit;
  }


  public ArticleSearchDTO modifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Get modifiedDate
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(OffsetDateTime modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public ArticleSearchDTO modifiedUser(String modifiedUser) {
    this.modifiedUser = modifiedUser;
    return this;
  }

  /**
   * Get modifiedUser
   * @return modifiedUser
   */
  @javax.annotation.Nullable
  public String getModifiedUser() {
    return modifiedUser;
  }

  public void setModifiedUser(String modifiedUser) {
    this.modifiedUser = modifiedUser;
  }


  public ArticleSearchDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ArticleSearchDTO number(Integer number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }


  public ArticleSearchDTO price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public ArticleSearchDTO sellingPrice(BigDecimal sellingPrice) {
    this.sellingPrice = sellingPrice;
    return this;
  }

  /**
   * Actual Selling price of the article 
   * @return sellingPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getSellingPrice() {
    return sellingPrice;
  }

  public void setSellingPrice(BigDecimal sellingPrice) {
    this.sellingPrice = sellingPrice;
  }


  public ArticleSearchDTO tags(String tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }


  public ArticleSearchDTO totalCount(Integer totalCount) {
    this.totalCount = totalCount;
    return this;
  }

  /**
   * total number of recode for particular search 
   * @return totalCount
   */
  @javax.annotation.Nullable
  public Integer getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Integer totalCount) {
    this.totalCount = totalCount;
  }


  public ArticleSearchDTO type(String type) {
    this.type = type;
    return this;
  }

  /**
   * article type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArticleSearchDTO articleSearchDTO = (ArticleSearchDTO) o;
    return Objects.equals(this.activeStatus, articleSearchDTO.activeStatus) &&
        Objects.equals(this.applyForAllGyms, articleSearchDTO.applyForAllGyms) &&
        Objects.equals(this.articleId, articleSearchDTO.articleId) &&
        Objects.equals(this.createdDate, articleSearchDTO.createdDate) &&
        Objects.equals(this.createdUser, articleSearchDTO.createdUser) &&
        Objects.equals(this.description, articleSearchDTO.description) &&
        Objects.equals(this.measureUnit, articleSearchDTO.measureUnit) &&
        Objects.equals(this.modifiedDate, articleSearchDTO.modifiedDate) &&
        Objects.equals(this.modifiedUser, articleSearchDTO.modifiedUser) &&
        Objects.equals(this.name, articleSearchDTO.name) &&
        Objects.equals(this.number, articleSearchDTO.number) &&
        Objects.equals(this.price, articleSearchDTO.price) &&
        Objects.equals(this.sellingPrice, articleSearchDTO.sellingPrice) &&
        Objects.equals(this.tags, articleSearchDTO.tags) &&
        Objects.equals(this.totalCount, articleSearchDTO.totalCount) &&
        Objects.equals(this.type, articleSearchDTO.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeStatus, applyForAllGyms, articleId, createdDate, createdUser, description, measureUnit, modifiedDate, modifiedUser, name, number, price, sellingPrice, tags, totalCount, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArticleSearchDTO {\n");
    sb.append("    activeStatus: ").append(toIndentedString(activeStatus)).append("\n");
    sb.append("    applyForAllGyms: ").append(toIndentedString(applyForAllGyms)).append("\n");
    sb.append("    articleId: ").append(toIndentedString(articleId)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    createdUser: ").append(toIndentedString(createdUser)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    measureUnit: ").append(toIndentedString(measureUnit)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    modifiedUser: ").append(toIndentedString(modifiedUser)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    sellingPrice: ").append(toIndentedString(sellingPrice)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeStatus");
    openapiFields.add("applyForAllGyms");
    openapiFields.add("articleId");
    openapiFields.add("createdDate");
    openapiFields.add("createdUser");
    openapiFields.add("description");
    openapiFields.add("measureUnit");
    openapiFields.add("modifiedDate");
    openapiFields.add("modifiedUser");
    openapiFields.add("name");
    openapiFields.add("number");
    openapiFields.add("price");
    openapiFields.add("sellingPrice");
    openapiFields.add("tags");
    openapiFields.add("totalCount");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ArticleSearchDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ArticleSearchDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ArticleSearchDTO is not found in the empty JSON string", ArticleSearchDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ArticleSearchDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ArticleSearchDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createdUser") != null && !jsonObj.get("createdUser").isJsonNull()) && !jsonObj.get("createdUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdUser").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("measureUnit") != null && !jsonObj.get("measureUnit").isJsonNull()) && !jsonObj.get("measureUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measureUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measureUnit").toString()));
      }
      if ((jsonObj.get("modifiedUser") != null && !jsonObj.get("modifiedUser").isJsonNull()) && !jsonObj.get("modifiedUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedUser").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ArticleSearchDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ArticleSearchDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ArticleSearchDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ArticleSearchDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ArticleSearchDTO>() {
           @Override
           public void write(JsonWriter out, ArticleSearchDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ArticleSearchDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ArticleSearchDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArticleSearchDTO
   * @throws IOException if the JSON string is invalid with respect to ArticleSearchDTO
   */
  public static ArticleSearchDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArticleSearchDTO.class);
  }

  /**
   * Convert an instance of ArticleSearchDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

