/*
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The PackageItemDTO Class. Contains relevant fields of PackageItem DTO by masking actual Package entity&#39;s fields in application.             
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:23.711288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PackageItemDTO {
  public static final String SERIALIZED_NAME_ARTICLE_ID = "articleId";
  @SerializedName(SERIALIZED_NAME_ARTICLE_ID)
  private Integer articleId;

  public static final String SERIALIZED_NAME_ARTICLE_NAME = "articleName";
  @SerializedName(SERIALIZED_NAME_ARTICLE_NAME)
  private String articleName;

  public static final String SERIALIZED_NAME_ARTICLE_NUMBER = "articleNumber";
  @SerializedName(SERIALIZED_NAME_ARTICLE_NUMBER)
  private Integer articleNumber;

  public static final String SERIALIZED_NAME_ARTICLE_PRICE = "articlePrice";
  @SerializedName(SERIALIZED_NAME_ARTICLE_PRICE)
  private BigDecimal articlePrice;

  public static final String SERIALIZED_NAME_END_ORDER = "endOrder";
  @SerializedName(SERIALIZED_NAME_END_ORDER)
  private Integer endOrder;

  public static final String SERIALIZED_NAME_IS_INCLUDE_SERVICE_IN_CHARGE = "isIncludeServiceInCharge";
  @SerializedName(SERIALIZED_NAME_IS_INCLUDE_SERVICE_IN_CHARGE)
  private Boolean isIncludeServiceInCharge;

  public static final String SERIALIZED_NAME_MEASURE_UNIT = "measureUnit";
  @SerializedName(SERIALIZED_NAME_MEASURE_UNIT)
  private String measureUnit;

  public static final String SERIALIZED_NAME_NUMBER_OF_ITEMS = "numberOfItems";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ITEMS)
  private BigDecimal numberOfItems;

  public static final String SERIALIZED_NAME_START_ORDER = "startOrder";
  @SerializedName(SERIALIZED_NAME_START_ORDER)
  private Integer startOrder;

  public PackageItemDTO() {
  }

  public PackageItemDTO articleId(Integer articleId) {
    this.articleId = articleId;
    return this;
  }

  /**
   * Refer to ArticleId in Article table in DB.             
   * @return articleId
   */
  @javax.annotation.Nonnull
  public Integer getArticleId() {
    return articleId;
  }

  public void setArticleId(Integer articleId) {
    this.articleId = articleId;
  }


  public PackageItemDTO articleName(String articleName) {
    this.articleName = articleName;
    return this;
  }

  /**
   * Name of the article(Addon) in a particular package.              read only             
   * @return articleName
   */
  @javax.annotation.Nullable
  public String getArticleName() {
    return articleName;
  }

  public void setArticleName(String articleName) {
    this.articleName = articleName;
  }


  public PackageItemDTO articleNumber(Integer articleNumber) {
    this.articleNumber = articleNumber;
    return this;
  }

  /**
   * Number assigned the article(Addon) in a particular package.              read only             
   * @return articleNumber
   */
  @javax.annotation.Nullable
  public Integer getArticleNumber() {
    return articleNumber;
  }

  public void setArticleNumber(Integer articleNumber) {
    this.articleNumber = articleNumber;
  }


  public PackageItemDTO articlePrice(BigDecimal articlePrice) {
    this.articlePrice = articlePrice;
    return this;
  }

  /**
   * Price of the article determined from that package. Price of a same article can be varied from package to package.             
   * @return articlePrice
   */
  @javax.annotation.Nullable
  public BigDecimal getArticlePrice() {
    return articlePrice;
  }

  public void setArticlePrice(BigDecimal articlePrice) {
    this.articlePrice = articlePrice;
  }


  public PackageItemDTO endOrder(Integer endOrder) {
    this.endOrder = endOrder;
    return this;
  }

  /**
   * Number of the installment this article is available to.             
   * @return endOrder
   */
  @javax.annotation.Nullable
  public Integer getEndOrder() {
    return endOrder;
  }

  public void setEndOrder(Integer endOrder) {
    this.endOrder = endOrder;
  }


  public PackageItemDTO isIncludeServiceInCharge(Boolean isIncludeServiceInCharge) {
    this.isIncludeServiceInCharge = isIncludeServiceInCharge;
    return this;
  }

  /**
   * Is Included in service charge 
   * @return isIncludeServiceInCharge
   */
  @javax.annotation.Nullable
  public Boolean getIsIncludeServiceInCharge() {
    return isIncludeServiceInCharge;
  }

  public void setIsIncludeServiceInCharge(Boolean isIncludeServiceInCharge) {
    this.isIncludeServiceInCharge = isIncludeServiceInCharge;
  }


  public PackageItemDTO measureUnit(String measureUnit) {
    this.measureUnit = measureUnit;
    return this;
  }

  /**
   * Get measureUnit
   * @return measureUnit
   */
  @javax.annotation.Nullable
  public String getMeasureUnit() {
    return measureUnit;
  }

  public void setMeasureUnit(String measureUnit) {
    this.measureUnit = measureUnit;
  }


  public PackageItemDTO numberOfItems(BigDecimal numberOfItems) {
    this.numberOfItems = numberOfItems;
    return this;
  }

  /**
   * How many article(Addon) is available for that package from that type.             
   * @return numberOfItems
   */
  @javax.annotation.Nullable
  public BigDecimal getNumberOfItems() {
    return numberOfItems;
  }

  public void setNumberOfItems(BigDecimal numberOfItems) {
    this.numberOfItems = numberOfItems;
  }


  public PackageItemDTO startOrder(Integer startOrder) {
    this.startOrder = startOrder;
    return this;
  }

  /**
   * Number of the installment this article is available from.             
   * @return startOrder
   */
  @javax.annotation.Nullable
  public Integer getStartOrder() {
    return startOrder;
  }

  public void setStartOrder(Integer startOrder) {
    this.startOrder = startOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackageItemDTO packageItemDTO = (PackageItemDTO) o;
    return Objects.equals(this.articleId, packageItemDTO.articleId) &&
        Objects.equals(this.articleName, packageItemDTO.articleName) &&
        Objects.equals(this.articleNumber, packageItemDTO.articleNumber) &&
        Objects.equals(this.articlePrice, packageItemDTO.articlePrice) &&
        Objects.equals(this.endOrder, packageItemDTO.endOrder) &&
        Objects.equals(this.isIncludeServiceInCharge, packageItemDTO.isIncludeServiceInCharge) &&
        Objects.equals(this.measureUnit, packageItemDTO.measureUnit) &&
        Objects.equals(this.numberOfItems, packageItemDTO.numberOfItems) &&
        Objects.equals(this.startOrder, packageItemDTO.startOrder);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(articleId, articleName, articleNumber, articlePrice, endOrder, isIncludeServiceInCharge, measureUnit, numberOfItems, startOrder);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackageItemDTO {\n");
    sb.append("    articleId: ").append(toIndentedString(articleId)).append("\n");
    sb.append("    articleName: ").append(toIndentedString(articleName)).append("\n");
    sb.append("    articleNumber: ").append(toIndentedString(articleNumber)).append("\n");
    sb.append("    articlePrice: ").append(toIndentedString(articlePrice)).append("\n");
    sb.append("    endOrder: ").append(toIndentedString(endOrder)).append("\n");
    sb.append("    isIncludeServiceInCharge: ").append(toIndentedString(isIncludeServiceInCharge)).append("\n");
    sb.append("    measureUnit: ").append(toIndentedString(measureUnit)).append("\n");
    sb.append("    numberOfItems: ").append(toIndentedString(numberOfItems)).append("\n");
    sb.append("    startOrder: ").append(toIndentedString(startOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("articleId");
    openapiFields.add("articleName");
    openapiFields.add("articleNumber");
    openapiFields.add("articlePrice");
    openapiFields.add("endOrder");
    openapiFields.add("isIncludeServiceInCharge");
    openapiFields.add("measureUnit");
    openapiFields.add("numberOfItems");
    openapiFields.add("startOrder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("articleId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PackageItemDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PackageItemDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PackageItemDTO is not found in the empty JSON string", PackageItemDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PackageItemDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PackageItemDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PackageItemDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("articleName") != null && !jsonObj.get("articleName").isJsonNull()) && !jsonObj.get("articleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `articleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("articleName").toString()));
      }
      if ((jsonObj.get("measureUnit") != null && !jsonObj.get("measureUnit").isJsonNull()) && !jsonObj.get("measureUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measureUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measureUnit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PackageItemDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PackageItemDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PackageItemDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PackageItemDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<PackageItemDTO>() {
           @Override
           public void write(JsonWriter out, PackageItemDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PackageItemDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PackageItemDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PackageItemDTO
   * @throws IOException if the JSON string is invalid with respect to PackageItemDTO
   */
  public static PackageItemDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PackageItemDTO.class);
  }

  /**
   * Convert an instance of PackageItemDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

