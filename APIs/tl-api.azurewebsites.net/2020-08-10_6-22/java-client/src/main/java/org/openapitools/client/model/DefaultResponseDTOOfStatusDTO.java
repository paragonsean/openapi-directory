/*
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DefaultResponseDTOOfStatusDTOResult;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The DefaultResponseDTO Class. Contains fields of DefaultResponse DTO in application.             
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:23.711288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DefaultResponseDTOOfStatusDTO {
  public static final String SERIALIZED_NAME_IS_ERROR = "isError";
  @SerializedName(SERIALIZED_NAME_IS_ERROR)
  private Boolean isError;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RESPONSE_EXCEPTION = "responseException";
  @SerializedName(SERIALIZED_NAME_RESPONSE_EXCEPTION)
  private Object responseException = null;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private DefaultResponseDTOOfStatusDTOResult result;

  public DefaultResponseDTOOfStatusDTO() {
  }

  public DefaultResponseDTOOfStatusDTO isError(Boolean isError) {
    this.isError = isError;
    return this;
  }

  /**
   * Get isError
   * @return isError
   */
  @javax.annotation.Nullable
  public Boolean getIsError() {
    return isError;
  }

  public void setIsError(Boolean isError) {
    this.isError = isError;
  }


  public DefaultResponseDTOOfStatusDTO message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public DefaultResponseDTOOfStatusDTO responseException(Object responseException) {
    this.responseException = responseException;
    return this;
  }

  /**
   * Get responseException
   * @return responseException
   */
  @javax.annotation.Nullable
  public Object getResponseException() {
    return responseException;
  }

  public void setResponseException(Object responseException) {
    this.responseException = responseException;
  }


  public DefaultResponseDTOOfStatusDTO result(DefaultResponseDTOOfStatusDTOResult result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public DefaultResponseDTOOfStatusDTOResult getResult() {
    return result;
  }

  public void setResult(DefaultResponseDTOOfStatusDTOResult result) {
    this.result = result;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DefaultResponseDTOOfStatusDTO defaultResponseDTOOfStatusDTO = (DefaultResponseDTOOfStatusDTO) o;
    return Objects.equals(this.isError, defaultResponseDTOOfStatusDTO.isError) &&
        Objects.equals(this.message, defaultResponseDTOOfStatusDTO.message) &&
        Objects.equals(this.responseException, defaultResponseDTOOfStatusDTO.responseException) &&
        Objects.equals(this.result, defaultResponseDTOOfStatusDTO.result);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isError, message, responseException, result);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DefaultResponseDTOOfStatusDTO {\n");
    sb.append("    isError: ").append(toIndentedString(isError)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    responseException: ").append(toIndentedString(responseException)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isError");
    openapiFields.add("message");
    openapiFields.add("responseException");
    openapiFields.add("result");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DefaultResponseDTOOfStatusDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DefaultResponseDTOOfStatusDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DefaultResponseDTOOfStatusDTO is not found in the empty JSON string", DefaultResponseDTOOfStatusDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DefaultResponseDTOOfStatusDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DefaultResponseDTOOfStatusDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        DefaultResponseDTOOfStatusDTOResult.validateJsonElement(jsonObj.get("result"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DefaultResponseDTOOfStatusDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DefaultResponseDTOOfStatusDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DefaultResponseDTOOfStatusDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DefaultResponseDTOOfStatusDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<DefaultResponseDTOOfStatusDTO>() {
           @Override
           public void write(JsonWriter out, DefaultResponseDTOOfStatusDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DefaultResponseDTOOfStatusDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DefaultResponseDTOOfStatusDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DefaultResponseDTOOfStatusDTO
   * @throws IOException if the JSON string is invalid with respect to DefaultResponseDTOOfStatusDTO
   */
  public static DefaultResponseDTOOfStatusDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DefaultResponseDTOOfStatusDTO.class);
  }

  /**
   * Convert an instance of DefaultResponseDTOOfStatusDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

