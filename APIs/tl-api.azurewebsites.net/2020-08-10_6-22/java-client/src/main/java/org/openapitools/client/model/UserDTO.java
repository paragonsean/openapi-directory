/*
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The UserDTO Class. Contains relevant fields of User DTO by masking actual User entity&#39;s fields in application.             
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:23.711288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserDTO {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_EXTERNAL_ENTITY_NUMBER = "externalEntityNumber";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ENTITY_NUMBER)
  private String externalEntityNumber;

  public static final String SERIALIZED_NAME_GUARDIAN = "guardian";
  @SerializedName(SERIALIZED_NAME_GUARDIAN)
  private Integer guardian;

  public static final String SERIALIZED_NAME_GYM_NUMBER = "gymNumber";
  @SerializedName(SERIALIZED_NAME_GYM_NUMBER)
  private String gymNumber;

  public static final String SERIALIZED_NAME_INTRODUCE_BY = "introduceBy";
  @SerializedName(SERIALIZED_NAME_INTRODUCE_BY)
  private Integer introduceBy;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_TYPE_ID = "typeId";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private Integer typeId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public UserDTO() {
  }

  public UserDTO accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * Account number of the user.It can be any stakeholder of the application.even can be a gym.             
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public UserDTO externalEntityNumber(String externalEntityNumber) {
    this.externalEntityNumber = externalEntityNumber;
    return this;
  }

  /**
   * Entity number that make a relationship with BOX API DB.             
   * @return externalEntityNumber
   */
  @javax.annotation.Nullable
  public String getExternalEntityNumber() {
    return externalEntityNumber;
  }

  public void setExternalEntityNumber(String externalEntityNumber) {
    this.externalEntityNumber = externalEntityNumber;
  }


  public UserDTO guardian(Integer guardian) {
    this.guardian = guardian;
    return this;
  }

  /**
   * Gaurdian of the this user if he/she is under 18 years old.             
   * @return guardian
   */
  @javax.annotation.Nullable
  public Integer getGuardian() {
    return guardian;
  }

  public void setGuardian(Integer guardian) {
    this.guardian = guardian;
  }


  public UserDTO gymNumber(String gymNumber) {
    this.gymNumber = gymNumber;
    return this;
  }

  /**
   * If this user is a gym, then the gym number.             
   * @return gymNumber
   */
  @javax.annotation.Nullable
  public String getGymNumber() {
    return gymNumber;
  }

  public void setGymNumber(String gymNumber) {
    this.gymNumber = gymNumber;
  }


  public UserDTO introduceBy(Integer introduceBy) {
    this.introduceBy = introduceBy;
    return this;
  }

  /**
   * If Someone introduced this user to the system, then that user&#39;s UserId.             
   * @return introduceBy
   */
  @javax.annotation.Nullable
  public Integer getIntroduceBy() {
    return introduceBy;
  }

  public void setIntroduceBy(Integer introduceBy) {
    this.introduceBy = introduceBy;
  }


  public UserDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the user.             
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UserDTO number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Unique number maintain by application to idenify user.             
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public UserDTO typeId(Integer typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * Type of the user.             
   * @return typeId
   */
  @javax.annotation.Nullable
  public Integer getTypeId() {
    return typeId;
  }

  public void setTypeId(Integer typeId) {
    this.typeId = typeId;
  }


  public UserDTO userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Indentity number(primary key) for user object. Generated in DB table when inserting a record.             
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserDTO userDTO = (UserDTO) o;
    return Objects.equals(this.accountNumber, userDTO.accountNumber) &&
        Objects.equals(this.externalEntityNumber, userDTO.externalEntityNumber) &&
        Objects.equals(this.guardian, userDTO.guardian) &&
        Objects.equals(this.gymNumber, userDTO.gymNumber) &&
        Objects.equals(this.introduceBy, userDTO.introduceBy) &&
        Objects.equals(this.name, userDTO.name) &&
        Objects.equals(this.number, userDTO.number) &&
        Objects.equals(this.typeId, userDTO.typeId) &&
        Objects.equals(this.userId, userDTO.userId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, externalEntityNumber, guardian, gymNumber, introduceBy, name, number, typeId, userId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserDTO {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    externalEntityNumber: ").append(toIndentedString(externalEntityNumber)).append("\n");
    sb.append("    guardian: ").append(toIndentedString(guardian)).append("\n");
    sb.append("    gymNumber: ").append(toIndentedString(gymNumber)).append("\n");
    sb.append("    introduceBy: ").append(toIndentedString(introduceBy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountNumber");
    openapiFields.add("externalEntityNumber");
    openapiFields.add("guardian");
    openapiFields.add("gymNumber");
    openapiFields.add("introduceBy");
    openapiFields.add("name");
    openapiFields.add("number");
    openapiFields.add("typeId");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserDTO is not found in the empty JSON string", UserDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonNull()) && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if ((jsonObj.get("externalEntityNumber") != null && !jsonObj.get("externalEntityNumber").isJsonNull()) && !jsonObj.get("externalEntityNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalEntityNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalEntityNumber").toString()));
      }
      if ((jsonObj.get("gymNumber") != null && !jsonObj.get("gymNumber").isJsonNull()) && !jsonObj.get("gymNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gymNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gymNumber").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<UserDTO>() {
           @Override
           public void write(JsonWriter out, UserDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserDTO
   * @throws IOException if the JSON string is invalid with respect to UserDTO
   */
  public static UserDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserDTO.class);
  }

  /**
   * Convert an instance of UserDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

