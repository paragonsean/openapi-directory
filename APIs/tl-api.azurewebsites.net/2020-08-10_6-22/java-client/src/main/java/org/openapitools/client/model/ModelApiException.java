/*
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExceptionInnerException;
import org.openapitools.client.model.ValidationError;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelApiException
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:23.711288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelApiException {
  public static final String SERIALIZED_NAME_INNER_EXCEPTION = "InnerException";
  @SerializedName(SERIALIZED_NAME_INNER_EXCEPTION)
  private ExceptionInnerException innerException;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_SOURCE = "Source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_STACK_TRACE = "StackTrace";
  @SerializedName(SERIALIZED_NAME_STACK_TRACE)
  private String stackTrace;

  public static final String SERIALIZED_NAME_CUSTOM_ERROR = "customError";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ERROR)
  private Object customError = null;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<ValidationError> errors;

  public static final String SERIALIZED_NAME_IS_CUSTOM_ERROR_OBJECT = "isCustomErrorObject";
  @SerializedName(SERIALIZED_NAME_IS_CUSTOM_ERROR_OBJECT)
  private Boolean isCustomErrorObject;

  public static final String SERIALIZED_NAME_IS_MODEL_VALIDATON_ERROR = "isModelValidatonError";
  @SerializedName(SERIALIZED_NAME_IS_MODEL_VALIDATON_ERROR)
  private Boolean isModelValidatonError;

  public static final String SERIALIZED_NAME_REFERENCE_DOCUMENT_LINK = "referenceDocumentLink";
  @SerializedName(SERIALIZED_NAME_REFERENCE_DOCUMENT_LINK)
  private String referenceDocumentLink;

  public static final String SERIALIZED_NAME_REFERENCE_ERROR_CODE = "referenceErrorCode";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ERROR_CODE)
  private String referenceErrorCode;

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Integer statusCode;

  public ModelApiException() {
  }

  public ModelApiException innerException(ExceptionInnerException innerException) {
    this.innerException = innerException;
    return this;
  }

  /**
   * Get innerException
   * @return innerException
   */
  @javax.annotation.Nullable
  public ExceptionInnerException getInnerException() {
    return innerException;
  }

  public void setInnerException(ExceptionInnerException innerException) {
    this.innerException = innerException;
  }


  public ModelApiException message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ModelApiException source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public ModelApiException stackTrace(String stackTrace) {
    this.stackTrace = stackTrace;
    return this;
  }

  /**
   * Get stackTrace
   * @return stackTrace
   */
  @javax.annotation.Nullable
  public String getStackTrace() {
    return stackTrace;
  }

  public void setStackTrace(String stackTrace) {
    this.stackTrace = stackTrace;
  }


  public ModelApiException customError(Object customError) {
    this.customError = customError;
    return this;
  }

  /**
   * Get customError
   * @return customError
   */
  @javax.annotation.Nullable
  public Object getCustomError() {
    return customError;
  }

  public void setCustomError(Object customError) {
    this.customError = customError;
  }


  public ModelApiException errors(List<ValidationError> errors) {
    this.errors = errors;
    return this;
  }

  public ModelApiException addErrorsItem(ValidationError errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nullable
  public List<ValidationError> getErrors() {
    return errors;
  }

  public void setErrors(List<ValidationError> errors) {
    this.errors = errors;
  }


  public ModelApiException isCustomErrorObject(Boolean isCustomErrorObject) {
    this.isCustomErrorObject = isCustomErrorObject;
    return this;
  }

  /**
   * Get isCustomErrorObject
   * @return isCustomErrorObject
   */
  @javax.annotation.Nullable
  public Boolean getIsCustomErrorObject() {
    return isCustomErrorObject;
  }

  public void setIsCustomErrorObject(Boolean isCustomErrorObject) {
    this.isCustomErrorObject = isCustomErrorObject;
  }


  public ModelApiException isModelValidatonError(Boolean isModelValidatonError) {
    this.isModelValidatonError = isModelValidatonError;
    return this;
  }

  /**
   * Get isModelValidatonError
   * @return isModelValidatonError
   */
  @javax.annotation.Nullable
  public Boolean getIsModelValidatonError() {
    return isModelValidatonError;
  }

  public void setIsModelValidatonError(Boolean isModelValidatonError) {
    this.isModelValidatonError = isModelValidatonError;
  }


  public ModelApiException referenceDocumentLink(String referenceDocumentLink) {
    this.referenceDocumentLink = referenceDocumentLink;
    return this;
  }

  /**
   * Get referenceDocumentLink
   * @return referenceDocumentLink
   */
  @javax.annotation.Nullable
  public String getReferenceDocumentLink() {
    return referenceDocumentLink;
  }

  public void setReferenceDocumentLink(String referenceDocumentLink) {
    this.referenceDocumentLink = referenceDocumentLink;
  }


  public ModelApiException referenceErrorCode(String referenceErrorCode) {
    this.referenceErrorCode = referenceErrorCode;
    return this;
  }

  /**
   * Get referenceErrorCode
   * @return referenceErrorCode
   */
  @javax.annotation.Nullable
  public String getReferenceErrorCode() {
    return referenceErrorCode;
  }

  public void setReferenceErrorCode(String referenceErrorCode) {
    this.referenceErrorCode = referenceErrorCode;
  }


  public ModelApiException statusCode(Integer statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nullable
  public Integer getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelApiException _apiException = (ModelApiException) o;
    return Objects.equals(this.innerException, _apiException.innerException) &&
        Objects.equals(this.message, _apiException.message) &&
        Objects.equals(this.source, _apiException.source) &&
        Objects.equals(this.stackTrace, _apiException.stackTrace) &&
        Objects.equals(this.customError, _apiException.customError) &&
        Objects.equals(this.errors, _apiException.errors) &&
        Objects.equals(this.isCustomErrorObject, _apiException.isCustomErrorObject) &&
        Objects.equals(this.isModelValidatonError, _apiException.isModelValidatonError) &&
        Objects.equals(this.referenceDocumentLink, _apiException.referenceDocumentLink) &&
        Objects.equals(this.referenceErrorCode, _apiException.referenceErrorCode) &&
        Objects.equals(this.statusCode, _apiException.statusCode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(innerException, message, source, stackTrace, customError, errors, isCustomErrorObject, isModelValidatonError, referenceDocumentLink, referenceErrorCode, statusCode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelApiException {\n");
    sb.append("    innerException: ").append(toIndentedString(innerException)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    stackTrace: ").append(toIndentedString(stackTrace)).append("\n");
    sb.append("    customError: ").append(toIndentedString(customError)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    isCustomErrorObject: ").append(toIndentedString(isCustomErrorObject)).append("\n");
    sb.append("    isModelValidatonError: ").append(toIndentedString(isModelValidatonError)).append("\n");
    sb.append("    referenceDocumentLink: ").append(toIndentedString(referenceDocumentLink)).append("\n");
    sb.append("    referenceErrorCode: ").append(toIndentedString(referenceErrorCode)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InnerException");
    openapiFields.add("Message");
    openapiFields.add("Source");
    openapiFields.add("StackTrace");
    openapiFields.add("customError");
    openapiFields.add("errors");
    openapiFields.add("isCustomErrorObject");
    openapiFields.add("isModelValidatonError");
    openapiFields.add("referenceDocumentLink");
    openapiFields.add("referenceErrorCode");
    openapiFields.add("statusCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelApiException
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelApiException.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelApiException is not found in the empty JSON string", ModelApiException.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelApiException.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelApiException` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InnerException`
      if (jsonObj.get("InnerException") != null && !jsonObj.get("InnerException").isJsonNull()) {
        ExceptionInnerException.validateJsonElement(jsonObj.get("InnerException"));
      }
      if ((jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) && !jsonObj.get("Message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Message").toString()));
      }
      if ((jsonObj.get("Source") != null && !jsonObj.get("Source").isJsonNull()) && !jsonObj.get("Source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Source").toString()));
      }
      if ((jsonObj.get("StackTrace") != null && !jsonObj.get("StackTrace").isJsonNull()) && !jsonObj.get("StackTrace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StackTrace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StackTrace").toString()));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            ValidationError.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("referenceDocumentLink") != null && !jsonObj.get("referenceDocumentLink").isJsonNull()) && !jsonObj.get("referenceDocumentLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceDocumentLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceDocumentLink").toString()));
      }
      if ((jsonObj.get("referenceErrorCode") != null && !jsonObj.get("referenceErrorCode").isJsonNull()) && !jsonObj.get("referenceErrorCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceErrorCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceErrorCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelApiException.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelApiException' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelApiException> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelApiException.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelApiException>() {
           @Override
           public void write(JsonWriter out, ModelApiException value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelApiException read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelApiException given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelApiException
   * @throws IOException if the JSON string is invalid with respect to ModelApiException
   */
  public static ModelApiException fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelApiException.class);
  }

  /**
   * Convert an instance of ModelApiException to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

