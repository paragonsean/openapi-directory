/*
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DefaultResponseDTOOfBoolean;
import org.openapitools.client.model.DefaultResponseDTOOfListOfPackageSearchDTO;
import org.openapitools.client.model.DefaultResponseDTOOfPackageDTO;
import org.openapitools.client.model.DefaultResponseDTOOfPackageSearchDTO;
import org.openapitools.client.model.DefaultResponseDTOOfStatusDTO;
import org.openapitools.client.model.DefaultResponseDTOOfString;
import org.openapitools.client.model.ModelApiException;
import org.openapitools.client.model.PackageDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PackageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PackageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PackageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for packageDelete
     * @param packageId primary key of package entity (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status 1  : success, status 404 : package not found, status -2: package already in use  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageDeleteCall(Integer packageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Package";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (packageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PackageId", packageId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageDeleteValidateBeforeCall(Integer packageId, final ApiCallback _callback) throws ApiException {
        return packageDeleteCall(packageId, _callback);

    }

    /**
     * Delete existing package             
     * 
     * @param packageId primary key of package entity (optional)
     * @return DefaultResponseDTOOfBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status 1  : success, status 404 : package not found, status -2: package already in use  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponseDTOOfBoolean packageDelete(Integer packageId) throws ApiException {
        ApiResponse<DefaultResponseDTOOfBoolean> localVarResp = packageDeleteWithHttpInfo(packageId);
        return localVarResp.getData();
    }

    /**
     * Delete existing package             
     * 
     * @param packageId primary key of package entity (optional)
     * @return ApiResponse&lt;DefaultResponseDTOOfBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status 1  : success, status 404 : package not found, status -2: package already in use  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponseDTOOfBoolean> packageDeleteWithHttpInfo(Integer packageId) throws ApiException {
        okhttp3.Call localVarCall = packageDeleteValidateBeforeCall(packageId, null);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfBoolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete existing package              (asynchronously)
     * 
     * @param packageId primary key of package entity (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status 1  : success, status 404 : package not found, status -2: package already in use  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageDeleteAsync(Integer packageId, final ApiCallback<DefaultResponseDTOOfBoolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageDeleteValidateBeforeCall(packageId, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfBoolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packageGet
     * @param packageId primary key of package entity (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> all the fields that related to the package </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageGetCall(Integer packageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Package";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (packageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("packageId", packageId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageGetValidateBeforeCall(Integer packageId, final ApiCallback _callback) throws ApiException {
        return packageGetCall(packageId, _callback);

    }

    /**
     * Get package details by packageId             
     * 
     * @param packageId primary key of package entity (optional)
     * @return DefaultResponseDTOOfPackageDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> all the fields that related to the package </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponseDTOOfPackageDTO packageGet(Integer packageId) throws ApiException {
        ApiResponse<DefaultResponseDTOOfPackageDTO> localVarResp = packageGetWithHttpInfo(packageId);
        return localVarResp.getData();
    }

    /**
     * Get package details by packageId             
     * 
     * @param packageId primary key of package entity (optional)
     * @return ApiResponse&lt;DefaultResponseDTOOfPackageDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> all the fields that related to the package </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponseDTOOfPackageDTO> packageGetWithHttpInfo(Integer packageId) throws ApiException {
        okhttp3.Call localVarCall = packageGetValidateBeforeCall(packageId, null);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfPackageDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get package details by packageId              (asynchronously)
     * 
     * @param packageId primary key of package entity (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> all the fields that related to the package </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageGetAsync(Integer packageId, final ApiCallback<DefaultResponseDTOOfPackageDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageGetValidateBeforeCall(packageId, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfPackageDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packagePost
     * @param packageDTO package object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packagePostCall(PackageDTO packageDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = packageDTO;

        // create path and map variables
        String localVarPath = "/api/Package";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packagePostValidateBeforeCall(PackageDTO packageDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageDTO' is set
        if (packageDTO == null) {
            throw new ApiException("Missing the required parameter 'packageDTO' when calling packagePost(Async)");
        }

        return packagePostCall(packageDTO, _callback);

    }

    /**
     * Insert new package into the system             
     * 
     * @param packageDTO package object (required)
     * @return DefaultResponseDTOOfStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponseDTOOfStatusDTO packagePost(PackageDTO packageDTO) throws ApiException {
        ApiResponse<DefaultResponseDTOOfStatusDTO> localVarResp = packagePostWithHttpInfo(packageDTO);
        return localVarResp.getData();
    }

    /**
     * Insert new package into the system             
     * 
     * @param packageDTO package object (required)
     * @return ApiResponse&lt;DefaultResponseDTOOfStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponseDTOOfStatusDTO> packagePostWithHttpInfo(PackageDTO packageDTO) throws ApiException {
        okhttp3.Call localVarCall = packagePostValidateBeforeCall(packageDTO, null);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfStatusDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert new package into the system              (asynchronously)
     * 
     * @param packageDTO package object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packagePostAsync(PackageDTO packageDTO, final ApiCallback<DefaultResponseDTOOfStatusDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = packagePostValidateBeforeCall(packageDTO, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfStatusDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packagePut
     * @param packageDTO package object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packagePutCall(PackageDTO packageDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = packageDTO;

        // create path and map variables
        String localVarPath = "/api/Package";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packagePutValidateBeforeCall(PackageDTO packageDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageDTO' is set
        if (packageDTO == null) {
            throw new ApiException("Missing the required parameter 'packageDTO' when calling packagePut(Async)");
        }

        return packagePutCall(packageDTO, _callback);

    }

    /**
     * Update existing package by its ID             
     * 
     * @param packageDTO package object (required)
     * @return DefaultResponseDTOOfStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponseDTOOfStatusDTO packagePut(PackageDTO packageDTO) throws ApiException {
        ApiResponse<DefaultResponseDTOOfStatusDTO> localVarResp = packagePutWithHttpInfo(packageDTO);
        return localVarResp.getData();
    }

    /**
     * Update existing package by its ID             
     * 
     * @param packageDTO package object (required)
     * @return ApiResponse&lt;DefaultResponseDTOOfStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponseDTOOfStatusDTO> packagePutWithHttpInfo(PackageDTO packageDTO) throws ApiException {
        okhttp3.Call localVarCall = packagePutValidateBeforeCall(packageDTO, null);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfStatusDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update existing package by its ID              (asynchronously)
     * 
     * @param packageDTO package object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> messageId that can use to get the status of import later on.! </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packagePutAsync(PackageDTO packageDTO, final ApiCallback<DefaultResponseDTOOfStatusDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = packagePutValidateBeforeCall(packageDTO, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfStatusDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packageSearch
     * @param searchText part of package name (optional)
     * @param gymId primary key of TL gym entity (optional, default to -1)
     * @param type filter package type.!-- default is &#39;all&#39; (optional, default to all)
     * @param orderBy order by column.!-- invalid column will give internal server error (optional, default to 1)
     * @param limit number of recode in result and default is 100. use negative numbers to order by desc (optional, default to 100)
     * @param offset number of recodes to skip (optional, default to 0)
     * @param activeStatus active status active : 1, inactive : 2, all 3, deafult : 1 (optional, default to 1)
     * @param categoryId Packge Category Id (optional, default to -1)
     * @param startpPrice Start price of the price Range (optional, default to 0)
     * @param endPrice End Price of the price Range (optional, default to 9999999)
     * @param requestSource 1 : MRM, 2 : Mobile  (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> basic information of package entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageSearchCall(String searchText, Integer gymId, String type, String orderBy, Integer limit, Integer offset, Integer activeStatus, Integer categoryId, BigDecimal startpPrice, BigDecimal endPrice, Integer requestSource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Package/Search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        if (gymId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gymId", gymId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (activeStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activeStatus", activeStatus));
        }

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryId", categoryId));
        }

        if (startpPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startpPrice", startpPrice));
        }

        if (endPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endPrice", endPrice));
        }

        if (requestSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requestSource", requestSource));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageSearchValidateBeforeCall(String searchText, Integer gymId, String type, String orderBy, Integer limit, Integer offset, Integer activeStatus, Integer categoryId, BigDecimal startpPrice, BigDecimal endPrice, Integer requestSource, final ApiCallback _callback) throws ApiException {
        return packageSearchCall(searchText, gymId, type, orderBy, limit, offset, activeStatus, categoryId, startpPrice, endPrice, requestSource, _callback);

    }

    /**
     * Search packages             
     * 
     * @param searchText part of package name (optional)
     * @param gymId primary key of TL gym entity (optional, default to -1)
     * @param type filter package type.!-- default is &#39;all&#39; (optional, default to all)
     * @param orderBy order by column.!-- invalid column will give internal server error (optional, default to 1)
     * @param limit number of recode in result and default is 100. use negative numbers to order by desc (optional, default to 100)
     * @param offset number of recodes to skip (optional, default to 0)
     * @param activeStatus active status active : 1, inactive : 2, all 3, deafult : 1 (optional, default to 1)
     * @param categoryId Packge Category Id (optional, default to -1)
     * @param startpPrice Start price of the price Range (optional, default to 0)
     * @param endPrice End Price of the price Range (optional, default to 9999999)
     * @param requestSource 1 : MRM, 2 : Mobile  (optional, default to 1)
     * @return List&lt;DefaultResponseDTOOfPackageSearchDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> basic information of package entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<DefaultResponseDTOOfPackageSearchDTO> packageSearch(String searchText, Integer gymId, String type, String orderBy, Integer limit, Integer offset, Integer activeStatus, Integer categoryId, BigDecimal startpPrice, BigDecimal endPrice, Integer requestSource) throws ApiException {
        ApiResponse<List<DefaultResponseDTOOfPackageSearchDTO>> localVarResp = packageSearchWithHttpInfo(searchText, gymId, type, orderBy, limit, offset, activeStatus, categoryId, startpPrice, endPrice, requestSource);
        return localVarResp.getData();
    }

    /**
     * Search packages             
     * 
     * @param searchText part of package name (optional)
     * @param gymId primary key of TL gym entity (optional, default to -1)
     * @param type filter package type.!-- default is &#39;all&#39; (optional, default to all)
     * @param orderBy order by column.!-- invalid column will give internal server error (optional, default to 1)
     * @param limit number of recode in result and default is 100. use negative numbers to order by desc (optional, default to 100)
     * @param offset number of recodes to skip (optional, default to 0)
     * @param activeStatus active status active : 1, inactive : 2, all 3, deafult : 1 (optional, default to 1)
     * @param categoryId Packge Category Id (optional, default to -1)
     * @param startpPrice Start price of the price Range (optional, default to 0)
     * @param endPrice End Price of the price Range (optional, default to 9999999)
     * @param requestSource 1 : MRM, 2 : Mobile  (optional, default to 1)
     * @return ApiResponse&lt;List&lt;DefaultResponseDTOOfPackageSearchDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> basic information of package entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DefaultResponseDTOOfPackageSearchDTO>> packageSearchWithHttpInfo(String searchText, Integer gymId, String type, String orderBy, Integer limit, Integer offset, Integer activeStatus, Integer categoryId, BigDecimal startpPrice, BigDecimal endPrice, Integer requestSource) throws ApiException {
        okhttp3.Call localVarCall = packageSearchValidateBeforeCall(searchText, gymId, type, orderBy, limit, offset, activeStatus, categoryId, startpPrice, endPrice, requestSource, null);
        Type localVarReturnType = new TypeToken<List<DefaultResponseDTOOfPackageSearchDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search packages              (asynchronously)
     * 
     * @param searchText part of package name (optional)
     * @param gymId primary key of TL gym entity (optional, default to -1)
     * @param type filter package type.!-- default is &#39;all&#39; (optional, default to all)
     * @param orderBy order by column.!-- invalid column will give internal server error (optional, default to 1)
     * @param limit number of recode in result and default is 100. use negative numbers to order by desc (optional, default to 100)
     * @param offset number of recodes to skip (optional, default to 0)
     * @param activeStatus active status active : 1, inactive : 2, all 3, deafult : 1 (optional, default to 1)
     * @param categoryId Packge Category Id (optional, default to -1)
     * @param startpPrice Start price of the price Range (optional, default to 0)
     * @param endPrice End Price of the price Range (optional, default to 9999999)
     * @param requestSource 1 : MRM, 2 : Mobile  (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> basic information of package entity </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageSearchAsync(String searchText, Integer gymId, String type, String orderBy, Integer limit, Integer offset, Integer activeStatus, Integer categoryId, BigDecimal startpPrice, BigDecimal endPrice, Integer requestSource, final ApiCallback<List<DefaultResponseDTOOfPackageSearchDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageSearchValidateBeforeCall(searchText, gymId, type, orderBy, limit, offset, activeStatus, categoryId, startpPrice, endPrice, requestSource, _callback);
        Type localVarReturnType = new TypeToken<List<DefaultResponseDTOOfPackageSearchDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for packageUpdateStatus
     * @param packageId package Id (optional)
     * @param status status : 1 activate, 2 : deactivate (optional, default to 1)
     * @param userName Status updated User (optional, default to system)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status 1 : success, status 404 : package not found, status -2: package already in use  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageUpdateStatusCall(Integer packageId, Integer status, String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Package/UpdateStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (packageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("packageId", packageId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call packageUpdateStatusValidateBeforeCall(Integer packageId, Integer status, String userName, final ApiCallback _callback) throws ApiException {
        return packageUpdateStatusCall(packageId, status, userName, _callback);

    }

    /**
     * Status update of existing package 
     * 
     * @param packageId package Id (optional)
     * @param status status : 1 activate, 2 : deactivate (optional, default to 1)
     * @param userName Status updated User (optional, default to system)
     * @return DefaultResponseDTOOfBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status 1 : success, status 404 : package not found, status -2: package already in use  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponseDTOOfBoolean packageUpdateStatus(Integer packageId, Integer status, String userName) throws ApiException {
        ApiResponse<DefaultResponseDTOOfBoolean> localVarResp = packageUpdateStatusWithHttpInfo(packageId, status, userName);
        return localVarResp.getData();
    }

    /**
     * Status update of existing package 
     * 
     * @param packageId package Id (optional)
     * @param status status : 1 activate, 2 : deactivate (optional, default to 1)
     * @param userName Status updated User (optional, default to system)
     * @return ApiResponse&lt;DefaultResponseDTOOfBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status 1 : success, status 404 : package not found, status -2: package already in use  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponseDTOOfBoolean> packageUpdateStatusWithHttpInfo(Integer packageId, Integer status, String userName) throws ApiException {
        okhttp3.Call localVarCall = packageUpdateStatusValidateBeforeCall(packageId, status, userName, null);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfBoolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Status update of existing package  (asynchronously)
     * 
     * @param packageId package Id (optional)
     * @param status status : 1 activate, 2 : deactivate (optional, default to 1)
     * @param userName Status updated User (optional, default to system)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> status 1 : success, status 404 : package not found, status -2: package already in use  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call packageUpdateStatusAsync(Integer packageId, Integer status, String userName, final ApiCallback<DefaultResponseDTOOfBoolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = packageUpdateStatusValidateBeforeCall(packageId, status, userName, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponseDTOOfBoolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
