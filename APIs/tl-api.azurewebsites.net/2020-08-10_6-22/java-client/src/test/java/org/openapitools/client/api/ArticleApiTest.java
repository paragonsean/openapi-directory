/*
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ArticleDTO;
import org.openapitools.client.model.DefaultResponseDTOOfArticleDTO;
import org.openapitools.client.model.DefaultResponseDTOOfInteger;
import org.openapitools.client.model.DefaultResponseDTOOfListOfArticleSearchDTO;
import org.openapitools.client.model.DefaultResponseDTOOfStatusDTO;
import org.openapitools.client.model.GymArticleDetailsDTO;
import org.openapitools.client.model.MeasureUnitDTO;
import org.openapitools.client.model.ModelApiException;
import org.openapitools.client.model.ModelApiResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ArticleApi
 */
@Disabled
public class ArticleApiTest {

    private final ArticleApi api = new ArticleApi();

    /**
     * Add measure unit
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleAddMeasureUnitTest() throws ApiException {
        List<MeasureUnitDTO> measureUnitDTO = null;
        DefaultResponseDTOOfStatusDTO response = api.articleAddMeasureUnit(measureUnitDTO);
        // TODO: test validations
    }

    /**
     * Delete article from the system             
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleDeleteTest() throws ApiException {
        Integer articleId = null;
        DefaultResponseDTOOfInteger response = api.articleDelete(articleId);
        // TODO: test validations
    }

    /**
     * Get article details This will return all properties related to article entity             
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleGetTest() throws ApiException {
        Integer articleID = null;
        DefaultResponseDTOOfArticleDTO response = api.articleGet(articleID);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleGetAddonsTest() throws ApiException {
        String searchText = null;
        String gymIds = null;
        String type = null;
        Integer limit = null;
        Integer offset = null;
        DefaultResponseDTOOfListOfArticleSearchDTO response = api.articleGetAddons(searchText, gymIds, type, limit, offset);
        // TODO: test validations
    }

    /**
     * Get mesure units
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleGetMeasureUnitsTest() throws ApiException {
        String type = null;
        DefaultResponseDTOOfStatusDTO response = api.articleGetMeasureUnits(type);
        // TODO: test validations
    }

    /**
     * Get Revenue Accounts 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleGetRevenueAccountsTest() throws ApiException {
        DefaultResponseDTOOfStatusDTO response = api.articleGetRevenueAccounts();
        // TODO: test validations
    }

    /**
     * Get Gym specific properties for article             
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleGymArticleDetailsTest() throws ApiException {
        Integer articleId = null;
        Integer gymId = null;
        GymArticleDetailsDTO response = api.articleGymArticleDetails(articleId, gymId);
        // TODO: test validations
    }

    /**
     * Add new article             
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articlePostTest() throws ApiException {
        ArticleDTO articleDTO = null;
        DefaultResponseDTOOfStatusDTO response = api.articlePost(articleDTO);
        // TODO: test validations
    }

    /**
     * update existing article             
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articlePutTest() throws ApiException {
        ArticleDTO articleDTO = null;
        DefaultResponseDTOOfStatusDTO response = api.articlePut(articleDTO);
        // TODO: test validations
    }

    /**
     * Search articles It will only return basic information of article             
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleSearchTest() throws ApiException {
        String searchText = null;
        Integer gymId = null;
        String type = null;
        String orderBy = null;
        Integer limit = null;
        Integer offset = null;
        Integer activeStatus = null;
        DefaultResponseDTOOfListOfArticleSearchDTO response = api.articleSearch(searchText, gymId, type, orderBy, limit, offset, activeStatus);
        // TODO: test validations
    }

    /**
     * Add article details that associate with a Gym             
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleUpdateArticleGymDetailsTest() throws ApiException {
        List<GymArticleDetailsDTO> gymArticleDetailsDTO = null;
        DefaultResponseDTOOfStatusDTO response = api.articleUpdateArticleGymDetails(gymArticleDetailsDTO);
        // TODO: test validations
    }

    /**
     * Deactivate existing article 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void articleUpdateStatusTest() throws ApiException {
        Integer articleId = null;
        Integer status = null;
        String userName = null;
        DefaultResponseDTOOfInteger response = api.articleUpdateStatus(articleId, status, userName);
        // TODO: test validations
    }

}
