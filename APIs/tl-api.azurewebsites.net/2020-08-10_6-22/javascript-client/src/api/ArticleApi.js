/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiException from '../model/ApiException';
import ApiResponse from '../model/ApiResponse';
import ArticleDTO from '../model/ArticleDTO';
import DefaultResponseDTOOfArticleDTO from '../model/DefaultResponseDTOOfArticleDTO';
import DefaultResponseDTOOfInteger from '../model/DefaultResponseDTOOfInteger';
import DefaultResponseDTOOfListOfArticleSearchDTO from '../model/DefaultResponseDTOOfListOfArticleSearchDTO';
import DefaultResponseDTOOfStatusDTO from '../model/DefaultResponseDTOOfStatusDTO';
import GymArticleDetailsDTO from '../model/GymArticleDetailsDTO';
import MeasureUnitDTO from '../model/MeasureUnitDTO';

/**
* Article service.
* @module api/ArticleApi
* @version 2020-08-10_6-22
*/
export default class ArticleApi {

    /**
    * Constructs a new ArticleApi. 
    * @alias module:api/ArticleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the articleAddMeasureUnit operation.
     * @callback module:api/ArticleApi~articleAddMeasureUnitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultResponseDTOOfStatusDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add measure unit
     * @param {Array.<module:model/MeasureUnitDTO>} measureUnitDTO list of measureUnit
     * @param {module:api/ArticleApi~articleAddMeasureUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultResponseDTOOfStatusDTO}
     */
    articleAddMeasureUnit(measureUnitDTO, callback) {
      let postBody = measureUnitDTO;
      // verify the required parameter 'measureUnitDTO' is set
      if (measureUnitDTO === undefined || measureUnitDTO === null) {
        throw new Error("Missing the required parameter 'measureUnitDTO' when calling articleAddMeasureUnit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DefaultResponseDTOOfStatusDTO;
      return this.apiClient.callApi(
        '/api/Article/MeasureUnit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleDelete operation.
     * @callback module:api/ArticleApi~articleDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultResponseDTOOfInteger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete article from the system             
     * @param {Object} opts Optional parameters
     * @param {Number} [articleId] indentity number(primary key) for article object
     * @param {module:api/ArticleApi~articleDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultResponseDTOOfInteger}
     */
    articleDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ArticleId': opts['articleId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultResponseDTOOfInteger;
      return this.apiClient.callApi(
        '/api/Article', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleGet operation.
     * @callback module:api/ArticleApi~articleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultResponseDTOOfArticleDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get article details This will return all properties related to article entity             
     * @param {Number} articleID indentity number (primary key) for article object
     * @param {module:api/ArticleApi~articleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultResponseDTOOfArticleDTO}
     */
    articleGet(articleID, callback) {
      let postBody = null;
      // verify the required parameter 'articleID' is set
      if (articleID === undefined || articleID === null) {
        throw new Error("Missing the required parameter 'articleID' when calling articleGet");
      }

      let pathParams = {
        'articleID': articleID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultResponseDTOOfArticleDTO;
      return this.apiClient.callApi(
        '/api/Article/{articleID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleGetAddons operation.
     * @callback module:api/ArticleApi~articleGetAddonsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultResponseDTOOfListOfArticleSearchDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [searchText] Search text - will be search by the name
     * @param {String} [gymIds = '-1')] Comma separated gymIds deafult \"-1\" for all gyms
     * @param {String} [type = 'all')] 
     * @param {Number} [limit = 100)] 
     * @param {Number} [offset = 0)] 
     * @param {module:api/ArticleApi~articleGetAddonsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultResponseDTOOfListOfArticleSearchDTO}
     */
    articleGetAddons(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'searchText': opts['searchText'],
        'gymIds': opts['gymIds'],
        'type': opts['type'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultResponseDTOOfListOfArticleSearchDTO;
      return this.apiClient.callApi(
        '/api/Article/GetAddons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleGetMeasureUnits operation.
     * @callback module:api/ArticleApi~articleGetMeasureUnitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultResponseDTOOfStatusDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mesure units
     * @param {Object} opts Optional parameters
     * @param {String} [type] type of the measure unit (all, item, service)
     * @param {module:api/ArticleApi~articleGetMeasureUnitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultResponseDTOOfStatusDTO}
     */
    articleGetMeasureUnits(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultResponseDTOOfStatusDTO;
      return this.apiClient.callApi(
        '/api/Article/MeasureUnits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleGetRevenueAccounts operation.
     * @callback module:api/ArticleApi~articleGetRevenueAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultResponseDTOOfStatusDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Revenue Accounts 
     * @param {module:api/ArticleApi~articleGetRevenueAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultResponseDTOOfStatusDTO}
     */
    articleGetRevenueAccounts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultResponseDTOOfStatusDTO;
      return this.apiClient.callApi(
        '/api/Article/RevenueAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleGymArticleDetails operation.
     * @callback module:api/ArticleApi~articleGymArticleDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GymArticleDetailsDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Gym specific properties for article             
     * @param {Number} articleId indentity number(primary key) for article object
     * @param {Number} gymId indentity number(primary key) for gym object
     * @param {module:api/ArticleApi~articleGymArticleDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GymArticleDetailsDTO}
     */
    articleGymArticleDetails(articleId, gymId, callback) {
      let postBody = null;
      // verify the required parameter 'articleId' is set
      if (articleId === undefined || articleId === null) {
        throw new Error("Missing the required parameter 'articleId' when calling articleGymArticleDetails");
      }
      // verify the required parameter 'gymId' is set
      if (gymId === undefined || gymId === null) {
        throw new Error("Missing the required parameter 'gymId' when calling articleGymArticleDetails");
      }

      let pathParams = {
        'articleId': articleId,
        'gymId': gymId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GymArticleDetailsDTO;
      return this.apiClient.callApi(
        '/api/Article/GymArticle/{articleId}/{gymId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlePost operation.
     * @callback module:api/ArticleApi~articlePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultResponseDTOOfStatusDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new article             
     * @param {module:model/ArticleDTO} articleDTO article object
     * @param {module:api/ArticleApi~articlePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultResponseDTOOfStatusDTO}
     */
    articlePost(articleDTO, callback) {
      let postBody = articleDTO;
      // verify the required parameter 'articleDTO' is set
      if (articleDTO === undefined || articleDTO === null) {
        throw new Error("Missing the required parameter 'articleDTO' when calling articlePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DefaultResponseDTOOfStatusDTO;
      return this.apiClient.callApi(
        '/api/Article', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articlePut operation.
     * @callback module:api/ArticleApi~articlePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultResponseDTOOfStatusDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update existing article             
     * @param {module:model/ArticleDTO} articleDTO article object
     * @param {module:api/ArticleApi~articlePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultResponseDTOOfStatusDTO}
     */
    articlePut(articleDTO, callback) {
      let postBody = articleDTO;
      // verify the required parameter 'articleDTO' is set
      if (articleDTO === undefined || articleDTO === null) {
        throw new Error("Missing the required parameter 'articleDTO' when calling articlePut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DefaultResponseDTOOfStatusDTO;
      return this.apiClient.callApi(
        '/api/Article', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleSearch operation.
     * @callback module:api/ArticleApi~articleSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultResponseDTOOfListOfArticleSearchDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search articles It will only return basic information of article             
     * @param {Object} opts Optional parameters
     * @param {String} [searchText] part of article name
     * @param {Number} [gymId = -1)] -1 for all gyms 
     * @param {String} [type = 'all')] filter article type. default is 'all'
     * @param {String} [orderBy = '1')] order by column.!-- invalid column will give internal server error
     * @param {Number} [limit = 100)] number of recode in result and default is 100. use negative numbers to order by desc
     * @param {Number} [offset = 0)] number of recodes to skip
     * @param {Number} [activeStatus = 1)] Active Status 1 : Active, 2: Inactive, 3: All, Default : 1
     * @param {module:api/ArticleApi~articleSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultResponseDTOOfListOfArticleSearchDTO}
     */
    articleSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'searchText': opts['searchText'],
        'gymId': opts['gymId'],
        'type': opts['type'],
        'orderBy': opts['orderBy'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'activeStatus': opts['activeStatus']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultResponseDTOOfListOfArticleSearchDTO;
      return this.apiClient.callApi(
        '/api/Article/Search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleUpdateArticleGymDetails operation.
     * @callback module:api/ArticleApi~articleUpdateArticleGymDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultResponseDTOOfStatusDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add article details that associate with a Gym             
     * @param {Array.<module:model/GymArticleDetailsDTO>} gymArticleDetailsDTO 
     * @param {module:api/ArticleApi~articleUpdateArticleGymDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultResponseDTOOfStatusDTO}
     */
    articleUpdateArticleGymDetails(gymArticleDetailsDTO, callback) {
      let postBody = gymArticleDetailsDTO;
      // verify the required parameter 'gymArticleDetailsDTO' is set
      if (gymArticleDetailsDTO === undefined || gymArticleDetailsDTO === null) {
        throw new Error("Missing the required parameter 'gymArticleDetailsDTO' when calling articleUpdateArticleGymDetails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DefaultResponseDTOOfStatusDTO;
      return this.apiClient.callApi(
        '/api/Article/ArticleGymDetails', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the articleUpdateStatus operation.
     * @callback module:api/ArticleApi~articleUpdateStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultResponseDTOOfInteger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate existing article 
     * @param {Object} opts Optional parameters
     * @param {Number} [articleId] 
     * @param {Number} [status] 1 : activate , 2 deactivate
     * @param {String} [userName] Updating user
     * @param {module:api/ArticleApi~articleUpdateStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultResponseDTOOfInteger}
     */
    articleUpdateStatus(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ArticleId': opts['articleId'],
        'status': opts['status'],
        'userName': opts['userName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultResponseDTOOfInteger;
      return this.apiClient.callApi(
        '/api/Article/UpdateStatus', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
