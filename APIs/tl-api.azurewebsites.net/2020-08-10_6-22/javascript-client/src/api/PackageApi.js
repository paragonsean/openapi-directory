/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiException from '../model/ApiException';
import DefaultResponseDTOOfBoolean from '../model/DefaultResponseDTOOfBoolean';
import DefaultResponseDTOOfListOfPackageSearchDTO from '../model/DefaultResponseDTOOfListOfPackageSearchDTO';
import DefaultResponseDTOOfPackageDTO from '../model/DefaultResponseDTOOfPackageDTO';
import DefaultResponseDTOOfPackageSearchDTO from '../model/DefaultResponseDTOOfPackageSearchDTO';
import DefaultResponseDTOOfStatusDTO from '../model/DefaultResponseDTOOfStatusDTO';
import DefaultResponseDTOOfString from '../model/DefaultResponseDTOOfString';
import PackageDTO from '../model/PackageDTO';

/**
* Package service.
* @module api/PackageApi
* @version 2020-08-10_6-22
*/
export default class PackageApi {

    /**
    * Constructs a new PackageApi. 
    * @alias module:api/PackageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the packageDelete operation.
     * @callback module:api/PackageApi~packageDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultResponseDTOOfBoolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete existing package             
     * @param {Object} opts Optional parameters
     * @param {Number} [packageId] primary key of package entity
     * @param {module:api/PackageApi~packageDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultResponseDTOOfBoolean}
     */
    packageDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'PackageId': opts['packageId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultResponseDTOOfBoolean;
      return this.apiClient.callApi(
        '/api/Package', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageGet operation.
     * @callback module:api/PackageApi~packageGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultResponseDTOOfPackageDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get package details by packageId             
     * @param {Object} opts Optional parameters
     * @param {Number} [packageId] primary key of package entity
     * @param {module:api/PackageApi~packageGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultResponseDTOOfPackageDTO}
     */
    packageGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'packageId': opts['packageId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultResponseDTOOfPackageDTO;
      return this.apiClient.callApi(
        '/api/Package', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packagePost operation.
     * @callback module:api/PackageApi~packagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultResponseDTOOfStatusDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert new package into the system             
     * @param {module:model/PackageDTO} packageDTO package object
     * @param {module:api/PackageApi~packagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultResponseDTOOfStatusDTO}
     */
    packagePost(packageDTO, callback) {
      let postBody = packageDTO;
      // verify the required parameter 'packageDTO' is set
      if (packageDTO === undefined || packageDTO === null) {
        throw new Error("Missing the required parameter 'packageDTO' when calling packagePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DefaultResponseDTOOfStatusDTO;
      return this.apiClient.callApi(
        '/api/Package', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packagePut operation.
     * @callback module:api/PackageApi~packagePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultResponseDTOOfStatusDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing package by its ID             
     * @param {module:model/PackageDTO} packageDTO package object
     * @param {module:api/PackageApi~packagePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultResponseDTOOfStatusDTO}
     */
    packagePut(packageDTO, callback) {
      let postBody = packageDTO;
      // verify the required parameter 'packageDTO' is set
      if (packageDTO === undefined || packageDTO === null) {
        throw new Error("Missing the required parameter 'packageDTO' when calling packagePut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DefaultResponseDTOOfStatusDTO;
      return this.apiClient.callApi(
        '/api/Package', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageSearch operation.
     * @callback module:api/PackageApi~packageSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DefaultResponseDTOOfPackageSearchDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search packages             
     * @param {Object} opts Optional parameters
     * @param {String} [searchText] part of package name
     * @param {Number} [gymId = -1)] primary key of TL gym entity
     * @param {String} [type = 'all')] filter package type.!-- default is 'all'
     * @param {String} [orderBy = '1')] order by column.!-- invalid column will give internal server error
     * @param {Number} [limit = 100)] number of recode in result and default is 100. use negative numbers to order by desc
     * @param {Number} [offset = 0)] number of recodes to skip
     * @param {Number} [activeStatus = 1)] active status active : 1, inactive : 2, all 3, deafult : 1
     * @param {Number} [categoryId = -1)] Packge Category Id
     * @param {Number} [startpPrice = 0)] Start price of the price Range
     * @param {Number} [endPrice = 9999999)] End Price of the price Range
     * @param {Number} [requestSource = 1)] 1 : MRM, 2 : Mobile 
     * @param {module:api/PackageApi~packageSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DefaultResponseDTOOfPackageSearchDTO>}
     */
    packageSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'searchText': opts['searchText'],
        'gymId': opts['gymId'],
        'type': opts['type'],
        'orderBy': opts['orderBy'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'activeStatus': opts['activeStatus'],
        'categoryId': opts['categoryId'],
        'startpPrice': opts['startpPrice'],
        'endPrice': opts['endPrice'],
        'requestSource': opts['requestSource']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DefaultResponseDTOOfPackageSearchDTO];
      return this.apiClient.callApi(
        '/api/Package/Search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageUpdateStatus operation.
     * @callback module:api/PackageApi~packageUpdateStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultResponseDTOOfBoolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Status update of existing package 
     * @param {Object} opts Optional parameters
     * @param {Number} [packageId] package Id
     * @param {Number} [status = 1)] status : 1 activate, 2 : deactivate
     * @param {String} [userName = 'system')] Status updated User
     * @param {module:api/PackageApi~packageUpdateStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultResponseDTOOfBoolean}
     */
    packageUpdateStatus(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'packageId': opts['packageId'],
        'status': opts['status'],
        'userName': opts['userName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultResponseDTOOfBoolean;
      return this.apiClient.callApi(
        '/api/Package/UpdateStatus', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
