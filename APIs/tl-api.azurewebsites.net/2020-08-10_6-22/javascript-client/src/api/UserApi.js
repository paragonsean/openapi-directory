/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UserDTO from '../model/UserDTO';

/**
* User service.
* @module api/UserApi
* @version 2020-08-10_6-22
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userGet operation.
     * @callback module:api/UserApi~userGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Users detail This will return all properties related to User entity             
     * @param {module:api/UserApi~userGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDTO}
     */
    userGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserDTO;
      return this.apiClient.callApi(
        '/api/User', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userRegisterUser operation.
     * @callback module:api/UserApi~userRegisterUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new User             
     * @param {Object} opts Optional parameters
     * @param {Number} [userId] Indentity number(primary key) for user object. Generated in DB table when inserting a record.             
     * @param {String} [accountNumber] Account number of the user.It can be any stakeholder of the application.even can be a gym.             
     * @param {String} [gymNumber] If this user is a gym, then the gym number.             
     * @param {String} [externalEntityNumber] Entity number that make a relationship with BOX API DB.             
     * @param {String} [name] Name of the user.             
     * @param {String} [number] Unique number maintain by application to idenify user.             
     * @param {Number} [introduceBy] If Someone introduced this user to the system, then that user's UserId.             
     * @param {Number} [guardian] Gaurdian of the this user if he/she is under 18 years old.             
     * @param {Number} [typeId] Type of the user.             
     * @param {module:api/UserApi~userRegisterUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userRegisterUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'UserId': opts['userId'],
        'AccountNumber': opts['accountNumber'],
        'GymNumber': opts['gymNumber'],
        'ExternalEntityNumber': opts['externalEntityNumber'],
        'Name': opts['name'],
        'Number': opts['number'],
        'IntroduceBy': opts['introduceBy'],
        'Guardian': opts['guardian'],
        'TypeId': opts['typeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/User/registerUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userUpdateUser operation.
     * @callback module:api/UserApi~userUpdateUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an exsisting User             
     * @param {Object} opts Optional parameters
     * @param {Number} [userId] Indentity number(primary key) for user object. Generated in DB table when inserting a record.             
     * @param {String} [accountNumber] Account number of the user.It can be any stakeholder of the application.even can be a gym.             
     * @param {String} [gymNumber] If this user is a gym, then the gym number.             
     * @param {String} [externalEntityNumber] Entity number that make a relationship with BOX API DB.             
     * @param {String} [name] Name of the user.             
     * @param {String} [number] Unique number maintain by application to idenify user.             
     * @param {Number} [introduceBy] If Someone introduced this user to the system, then that user's UserId.             
     * @param {Number} [guardian] Gaurdian of the this user if he/she is under 18 years old.             
     * @param {Number} [typeId] Type of the user.             
     * @param {module:api/UserApi~userUpdateUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userUpdateUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'UserId': opts['userId'],
        'AccountNumber': opts['accountNumber'],
        'GymNumber': opts['gymNumber'],
        'ExternalEntityNumber': opts['externalEntityNumber'],
        'Name': opts['name'],
        'Number': opts['number'],
        'IntroduceBy': opts['introduceBy'],
        'Guardian': opts['guardian'],
        'TypeId': opts['typeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/User/updateuser', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
