/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PackageItemDTO model module.
 * @module model/PackageItemDTO
 * @version 2020-08-10_6-22
 */
class PackageItemDTO {
    /**
     * Constructs a new <code>PackageItemDTO</code>.
     * The PackageItemDTO Class. Contains relevant fields of PackageItem DTO by masking actual Package entity&#39;s fields in application.             
     * @alias module:model/PackageItemDTO
     * @param articleId {Number} Refer to ArticleId in Article table in DB.             
     */
    constructor(articleId) { 
        
        PackageItemDTO.initialize(this, articleId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, articleId) { 
        obj['articleId'] = articleId;
    }

    /**
     * Constructs a <code>PackageItemDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PackageItemDTO} obj Optional instance to populate.
     * @return {module:model/PackageItemDTO} The populated <code>PackageItemDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PackageItemDTO();

            if (data.hasOwnProperty('articleId')) {
                obj['articleId'] = ApiClient.convertToType(data['articleId'], 'Number');
            }
            if (data.hasOwnProperty('articleName')) {
                obj['articleName'] = ApiClient.convertToType(data['articleName'], 'String');
            }
            if (data.hasOwnProperty('articleNumber')) {
                obj['articleNumber'] = ApiClient.convertToType(data['articleNumber'], 'Number');
            }
            if (data.hasOwnProperty('articlePrice')) {
                obj['articlePrice'] = ApiClient.convertToType(data['articlePrice'], 'Number');
            }
            if (data.hasOwnProperty('endOrder')) {
                obj['endOrder'] = ApiClient.convertToType(data['endOrder'], 'Number');
            }
            if (data.hasOwnProperty('isIncludeServiceInCharge')) {
                obj['isIncludeServiceInCharge'] = ApiClient.convertToType(data['isIncludeServiceInCharge'], 'Boolean');
            }
            if (data.hasOwnProperty('measureUnit')) {
                obj['measureUnit'] = ApiClient.convertToType(data['measureUnit'], 'String');
            }
            if (data.hasOwnProperty('numberOfItems')) {
                obj['numberOfItems'] = ApiClient.convertToType(data['numberOfItems'], 'Number');
            }
            if (data.hasOwnProperty('startOrder')) {
                obj['startOrder'] = ApiClient.convertToType(data['startOrder'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PackageItemDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PackageItemDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PackageItemDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['articleName'] && !(typeof data['articleName'] === 'string' || data['articleName'] instanceof String)) {
            throw new Error("Expected the field `articleName` to be a primitive type in the JSON string but got " + data['articleName']);
        }
        // ensure the json data is a string
        if (data['measureUnit'] && !(typeof data['measureUnit'] === 'string' || data['measureUnit'] instanceof String)) {
            throw new Error("Expected the field `measureUnit` to be a primitive type in the JSON string but got " + data['measureUnit']);
        }

        return true;
    }


}

PackageItemDTO.RequiredProperties = ["articleId"];

/**
 * Refer to ArticleId in Article table in DB.             
 * @member {Number} articleId
 */
PackageItemDTO.prototype['articleId'] = undefined;

/**
 * Name of the article(Addon) in a particular package.              read only             
 * @member {String} articleName
 */
PackageItemDTO.prototype['articleName'] = undefined;

/**
 * Number assigned the article(Addon) in a particular package.              read only             
 * @member {Number} articleNumber
 */
PackageItemDTO.prototype['articleNumber'] = undefined;

/**
 * Price of the article determined from that package. Price of a same article can be varied from package to package.             
 * @member {Number} articlePrice
 */
PackageItemDTO.prototype['articlePrice'] = undefined;

/**
 * Number of the installment this article is available to.             
 * @member {Number} endOrder
 */
PackageItemDTO.prototype['endOrder'] = undefined;

/**
 * Is Included in service charge 
 * @member {Boolean} isIncludeServiceInCharge
 */
PackageItemDTO.prototype['isIncludeServiceInCharge'] = undefined;

/**
 * @member {String} measureUnit
 */
PackageItemDTO.prototype['measureUnit'] = undefined;

/**
 * How many article(Addon) is available for that package from that type.             
 * @member {Number} numberOfItems
 */
PackageItemDTO.prototype['numberOfItems'] = undefined;

/**
 * Number of the installment this article is available from.             
 * @member {Number} startOrder
 */
PackageItemDTO.prototype['startOrder'] = undefined;






export default PackageItemDTO;

