/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserDTO model module.
 * @module model/UserDTO
 * @version 2020-08-10_6-22
 */
class UserDTO {
    /**
     * Constructs a new <code>UserDTO</code>.
     * The UserDTO Class. Contains relevant fields of User DTO by masking actual User entity&#39;s fields in application.             
     * @alias module:model/UserDTO
     */
    constructor() { 
        
        UserDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserDTO} obj Optional instance to populate.
     * @return {module:model/UserDTO} The populated <code>UserDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserDTO();

            if (data.hasOwnProperty('accountNumber')) {
                obj['accountNumber'] = ApiClient.convertToType(data['accountNumber'], 'String');
            }
            if (data.hasOwnProperty('externalEntityNumber')) {
                obj['externalEntityNumber'] = ApiClient.convertToType(data['externalEntityNumber'], 'String');
            }
            if (data.hasOwnProperty('guardian')) {
                obj['guardian'] = ApiClient.convertToType(data['guardian'], 'Number');
            }
            if (data.hasOwnProperty('gymNumber')) {
                obj['gymNumber'] = ApiClient.convertToType(data['gymNumber'], 'String');
            }
            if (data.hasOwnProperty('introduceBy')) {
                obj['introduceBy'] = ApiClient.convertToType(data['introduceBy'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('typeId')) {
                obj['typeId'] = ApiClient.convertToType(data['typeId'], 'Number');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountNumber'] && !(typeof data['accountNumber'] === 'string' || data['accountNumber'] instanceof String)) {
            throw new Error("Expected the field `accountNumber` to be a primitive type in the JSON string but got " + data['accountNumber']);
        }
        // ensure the json data is a string
        if (data['externalEntityNumber'] && !(typeof data['externalEntityNumber'] === 'string' || data['externalEntityNumber'] instanceof String)) {
            throw new Error("Expected the field `externalEntityNumber` to be a primitive type in the JSON string but got " + data['externalEntityNumber']);
        }
        // ensure the json data is a string
        if (data['gymNumber'] && !(typeof data['gymNumber'] === 'string' || data['gymNumber'] instanceof String)) {
            throw new Error("Expected the field `gymNumber` to be a primitive type in the JSON string but got " + data['gymNumber']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }

        return true;
    }


}



/**
 * Account number of the user.It can be any stakeholder of the application.even can be a gym.             
 * @member {String} accountNumber
 */
UserDTO.prototype['accountNumber'] = undefined;

/**
 * Entity number that make a relationship with BOX API DB.             
 * @member {String} externalEntityNumber
 */
UserDTO.prototype['externalEntityNumber'] = undefined;

/**
 * Gaurdian of the this user if he/she is under 18 years old.             
 * @member {Number} guardian
 */
UserDTO.prototype['guardian'] = undefined;

/**
 * If this user is a gym, then the gym number.             
 * @member {String} gymNumber
 */
UserDTO.prototype['gymNumber'] = undefined;

/**
 * If Someone introduced this user to the system, then that user's UserId.             
 * @member {Number} introduceBy
 */
UserDTO.prototype['introduceBy'] = undefined;

/**
 * Name of the user.             
 * @member {String} name
 */
UserDTO.prototype['name'] = undefined;

/**
 * Unique number maintain by application to idenify user.             
 * @member {String} number
 */
UserDTO.prototype['number'] = undefined;

/**
 * Type of the user.             
 * @member {Number} typeId
 */
UserDTO.prototype['typeId'] = undefined;

/**
 * Indentity number(primary key) for user object. Generated in DB table when inserting a record.             
 * @member {Number} userId
 */
UserDTO.prototype['userId'] = undefined;






export default UserDTO;

