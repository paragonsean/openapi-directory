/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ArticleSearchDTO model module.
 * @module model/ArticleSearchDTO
 * @version 2020-08-10_6-22
 */
class ArticleSearchDTO {
    /**
     * Constructs a new <code>ArticleSearchDTO</code>.
     * The ArticleSearchDTO Class. Contains relevant fields of ArticleSearch DTO by masking actual Article entity&#39;s fields in application.             
     * @alias module:model/ArticleSearchDTO
     */
    constructor() { 
        
        ArticleSearchDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ArticleSearchDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArticleSearchDTO} obj Optional instance to populate.
     * @return {module:model/ArticleSearchDTO} The populated <code>ArticleSearchDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArticleSearchDTO();

            if (data.hasOwnProperty('activeStatus')) {
                obj['activeStatus'] = ApiClient.convertToType(data['activeStatus'], 'Boolean');
            }
            if (data.hasOwnProperty('applyForAllGyms')) {
                obj['applyForAllGyms'] = ApiClient.convertToType(data['applyForAllGyms'], 'Boolean');
            }
            if (data.hasOwnProperty('articleId')) {
                obj['articleId'] = ApiClient.convertToType(data['articleId'], 'Number');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('createdUser')) {
                obj['createdUser'] = ApiClient.convertToType(data['createdUser'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('measureUnit')) {
                obj['measureUnit'] = ApiClient.convertToType(data['measureUnit'], 'String');
            }
            if (data.hasOwnProperty('modifiedDate')) {
                obj['modifiedDate'] = ApiClient.convertToType(data['modifiedDate'], 'Date');
            }
            if (data.hasOwnProperty('modifiedUser')) {
                obj['modifiedUser'] = ApiClient.convertToType(data['modifiedUser'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('sellingPrice')) {
                obj['sellingPrice'] = ApiClient.convertToType(data['sellingPrice'], 'Number');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], 'String');
            }
            if (data.hasOwnProperty('totalCount')) {
                obj['totalCount'] = ApiClient.convertToType(data['totalCount'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArticleSearchDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArticleSearchDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createdUser'] && !(typeof data['createdUser'] === 'string' || data['createdUser'] instanceof String)) {
            throw new Error("Expected the field `createdUser` to be a primitive type in the JSON string but got " + data['createdUser']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['measureUnit'] && !(typeof data['measureUnit'] === 'string' || data['measureUnit'] instanceof String)) {
            throw new Error("Expected the field `measureUnit` to be a primitive type in the JSON string but got " + data['measureUnit']);
        }
        // ensure the json data is a string
        if (data['modifiedUser'] && !(typeof data['modifiedUser'] === 'string' || data['modifiedUser'] instanceof String)) {
            throw new Error("Expected the field `modifiedUser` to be a primitive type in the JSON string but got " + data['modifiedUser']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tags'] && !(typeof data['tags'] === 'string' || data['tags'] instanceof String)) {
            throw new Error("Expected the field `tags` to be a primitive type in the JSON string but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Active Status 
 * @member {Boolean} activeStatus
 */
ArticleSearchDTO.prototype['activeStatus'] = undefined;

/**
 * @member {Boolean} applyForAllGyms
 */
ArticleSearchDTO.prototype['applyForAllGyms'] = undefined;

/**
 * @member {Number} articleId
 */
ArticleSearchDTO.prototype['articleId'] = undefined;

/**
 * @member {Date} createdDate
 */
ArticleSearchDTO.prototype['createdDate'] = undefined;

/**
 * @member {String} createdUser
 */
ArticleSearchDTO.prototype['createdUser'] = undefined;

/**
 * @member {String} description
 */
ArticleSearchDTO.prototype['description'] = undefined;

/**
 * MeasureUnit 
 * @member {String} measureUnit
 */
ArticleSearchDTO.prototype['measureUnit'] = undefined;

/**
 * @member {Date} modifiedDate
 */
ArticleSearchDTO.prototype['modifiedDate'] = undefined;

/**
 * @member {String} modifiedUser
 */
ArticleSearchDTO.prototype['modifiedUser'] = undefined;

/**
 * @member {String} name
 */
ArticleSearchDTO.prototype['name'] = undefined;

/**
 * @member {Number} number
 */
ArticleSearchDTO.prototype['number'] = undefined;

/**
 * @member {Number} price
 */
ArticleSearchDTO.prototype['price'] = undefined;

/**
 * Actual Selling price of the article 
 * @member {Number} sellingPrice
 */
ArticleSearchDTO.prototype['sellingPrice'] = undefined;

/**
 * @member {String} tags
 */
ArticleSearchDTO.prototype['tags'] = undefined;

/**
 * total number of recode for particular search 
 * @member {Number} totalCount
 */
ArticleSearchDTO.prototype['totalCount'] = undefined;

/**
 * article type
 * @member {String} type
 */
ArticleSearchDTO.prototype['type'] = undefined;






export default ArticleSearchDTO;

