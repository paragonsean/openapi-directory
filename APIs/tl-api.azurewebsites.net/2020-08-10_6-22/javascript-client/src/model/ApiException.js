/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Exception from './Exception';
import ExceptionInnerException from './ExceptionInnerException';
import ValidationError from './ValidationError';

/**
 * The ApiException model module.
 * @module model/ApiException
 * @version 2020-08-10_6-22
 */
class ApiException {
    /**
     * Constructs a new <code>ApiException</code>.
     * @alias module:model/ApiException
     * @implements module:model/Exception
     */
    constructor() { 
        Exception.initialize(this);
        ApiException.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiException</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiException} obj Optional instance to populate.
     * @return {module:model/ApiException} The populated <code>ApiException</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiException();
            Exception.constructFromObject(data, obj);

            if (data.hasOwnProperty('InnerException')) {
                obj['InnerException'] = ExceptionInnerException.constructFromObject(data['InnerException']);
            }
            if (data.hasOwnProperty('Message')) {
                obj['Message'] = ApiClient.convertToType(data['Message'], 'String');
            }
            if (data.hasOwnProperty('Source')) {
                obj['Source'] = ApiClient.convertToType(data['Source'], 'String');
            }
            if (data.hasOwnProperty('StackTrace')) {
                obj['StackTrace'] = ApiClient.convertToType(data['StackTrace'], 'String');
            }
            if (data.hasOwnProperty('customError')) {
                obj['customError'] = ApiClient.convertToType(data['customError'], Object);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ValidationError]);
            }
            if (data.hasOwnProperty('isCustomErrorObject')) {
                obj['isCustomErrorObject'] = ApiClient.convertToType(data['isCustomErrorObject'], 'Boolean');
            }
            if (data.hasOwnProperty('isModelValidatonError')) {
                obj['isModelValidatonError'] = ApiClient.convertToType(data['isModelValidatonError'], 'Boolean');
            }
            if (data.hasOwnProperty('referenceDocumentLink')) {
                obj['referenceDocumentLink'] = ApiClient.convertToType(data['referenceDocumentLink'], 'String');
            }
            if (data.hasOwnProperty('referenceErrorCode')) {
                obj['referenceErrorCode'] = ApiClient.convertToType(data['referenceErrorCode'], 'String');
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiException</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiException</code>.
     */
    static validateJSON(data) {
        // validate the optional field `InnerException`
        if (data['InnerException']) { // data not null
          ExceptionInnerException.validateJSON(data['InnerException']);
        }
        // ensure the json data is a string
        if (data['Message'] && !(typeof data['Message'] === 'string' || data['Message'] instanceof String)) {
            throw new Error("Expected the field `Message` to be a primitive type in the JSON string but got " + data['Message']);
        }
        // ensure the json data is a string
        if (data['Source'] && !(typeof data['Source'] === 'string' || data['Source'] instanceof String)) {
            throw new Error("Expected the field `Source` to be a primitive type in the JSON string but got " + data['Source']);
        }
        // ensure the json data is a string
        if (data['StackTrace'] && !(typeof data['StackTrace'] === 'string' || data['StackTrace'] instanceof String)) {
            throw new Error("Expected the field `StackTrace` to be a primitive type in the JSON string but got " + data['StackTrace']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                ValidationError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['referenceDocumentLink'] && !(typeof data['referenceDocumentLink'] === 'string' || data['referenceDocumentLink'] instanceof String)) {
            throw new Error("Expected the field `referenceDocumentLink` to be a primitive type in the JSON string but got " + data['referenceDocumentLink']);
        }
        // ensure the json data is a string
        if (data['referenceErrorCode'] && !(typeof data['referenceErrorCode'] === 'string' || data['referenceErrorCode'] instanceof String)) {
            throw new Error("Expected the field `referenceErrorCode` to be a primitive type in the JSON string but got " + data['referenceErrorCode']);
        }

        return true;
    }


}



/**
 * @member {module:model/ExceptionInnerException} InnerException
 */
ApiException.prototype['InnerException'] = undefined;

/**
 * @member {String} Message
 */
ApiException.prototype['Message'] = undefined;

/**
 * @member {String} Source
 */
ApiException.prototype['Source'] = undefined;

/**
 * @member {String} StackTrace
 */
ApiException.prototype['StackTrace'] = undefined;

/**
 * @member {Object} customError
 */
ApiException.prototype['customError'] = undefined;

/**
 * @member {Array.<module:model/ValidationError>} errors
 */
ApiException.prototype['errors'] = undefined;

/**
 * @member {Boolean} isCustomErrorObject
 */
ApiException.prototype['isCustomErrorObject'] = undefined;

/**
 * @member {Boolean} isModelValidatonError
 */
ApiException.prototype['isModelValidatonError'] = undefined;

/**
 * @member {String} referenceDocumentLink
 */
ApiException.prototype['referenceDocumentLink'] = undefined;

/**
 * @member {String} referenceErrorCode
 */
ApiException.prototype['referenceErrorCode'] = undefined;

/**
 * @member {Number} statusCode
 */
ApiException.prototype['statusCode'] = undefined;


// Implement Exception interface:
/**
 * @member {module:model/ExceptionInnerException} InnerException
 */
Exception.prototype['InnerException'] = undefined;
/**
 * @member {String} Message
 */
Exception.prototype['Message'] = undefined;
/**
 * @member {String} Source
 */
Exception.prototype['Source'] = undefined;
/**
 * @member {String} StackTrace
 */
Exception.prototype['StackTrace'] = undefined;




export default ApiException;

