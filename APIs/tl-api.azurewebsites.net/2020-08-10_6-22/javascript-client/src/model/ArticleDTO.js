/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GymArticleDetailsDTO from './GymArticleDetailsDTO';
import GymDTO from './GymDTO';

/**
 * The ArticleDTO model module.
 * @module model/ArticleDTO
 * @version 2020-08-10_6-22
 */
class ArticleDTO {
    /**
     * Constructs a new <code>ArticleDTO</code>.
     * The ArticleDTO Class. Contains relevant fields of Article DTO by masking actual Article entity&#39;s fields in application.             
     * @alias module:model/ArticleDTO
     * @param availableGyms {Array.<module:model/GymDTO>} 
     * @param measureUnit {String} 
     * @param name {String} 
     * @param price {Number} 
     * @param type {String} 
     */
    constructor(availableGyms, measureUnit, name, price, type) { 
        
        ArticleDTO.initialize(this, availableGyms, measureUnit, name, price, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, availableGyms, measureUnit, name, price, type) { 
        obj['availableGyms'] = availableGyms;
        obj['measureUnit'] = measureUnit;
        obj['name'] = name;
        obj['price'] = price;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ArticleDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArticleDTO} obj Optional instance to populate.
     * @return {module:model/ArticleDTO} The populated <code>ArticleDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArticleDTO();

            if (data.hasOwnProperty('activeStatus')) {
                obj['activeStatus'] = ApiClient.convertToType(data['activeStatus'], 'Boolean');
            }
            if (data.hasOwnProperty('applyForAllGyms')) {
                obj['applyForAllGyms'] = ApiClient.convertToType(data['applyForAllGyms'], 'Boolean');
            }
            if (data.hasOwnProperty('articleId')) {
                obj['articleId'] = ApiClient.convertToType(data['articleId'], 'Number');
            }
            if (data.hasOwnProperty('availableGyms')) {
                obj['availableGyms'] = ApiClient.convertToType(data['availableGyms'], [GymDTO]);
            }
            if (data.hasOwnProperty('availableQty')) {
                obj['availableQty'] = ApiClient.convertToType(data['availableQty'], 'Number');
            }
            if (data.hasOwnProperty('barcode')) {
                obj['barcode'] = ApiClient.convertToType(data['barcode'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('createdUser')) {
                obj['createdUser'] = ApiClient.convertToType(data['createdUser'], 'String');
            }
            if (data.hasOwnProperty('cronExpression')) {
                obj['cronExpression'] = ApiClient.convertToType(data['cronExpression'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('discount')) {
                obj['discount'] = ApiClient.convertToType(data['discount'], 'Number');
            }
            if (data.hasOwnProperty('employeeDiscount')) {
                obj['employeeDiscount'] = ApiClient.convertToType(data['employeeDiscount'], 'Number');
            }
            if (data.hasOwnProperty('employeePrice')) {
                obj['employeePrice'] = ApiClient.convertToType(data['employeePrice'], 'Number');
            }
            if (data.hasOwnProperty('gymArticles')) {
                obj['gymArticles'] = ApiClient.convertToType(data['gymArticles'], [GymArticleDetailsDTO]);
            }
            if (data.hasOwnProperty('isAddOn')) {
                obj['isAddOn'] = ApiClient.convertToType(data['isAddOn'], 'Boolean');
            }
            if (data.hasOwnProperty('isInventoryItem')) {
                obj['isInventoryItem'] = ApiClient.convertToType(data['isInventoryItem'], 'Boolean');
            }
            if (data.hasOwnProperty('isObsolete')) {
                obj['isObsolete'] = ApiClient.convertToType(data['isObsolete'], 'Boolean');
            }
            if (data.hasOwnProperty('measureUnit')) {
                obj['measureUnit'] = ApiClient.convertToType(data['measureUnit'], 'String');
            }
            if (data.hasOwnProperty('modifiedDate')) {
                obj['modifiedDate'] = ApiClient.convertToType(data['modifiedDate'], 'Date');
            }
            if (data.hasOwnProperty('modifiedUser')) {
                obj['modifiedUser'] = ApiClient.convertToType(data['modifiedUser'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('reorderLevel')) {
                obj['reorderLevel'] = ApiClient.convertToType(data['reorderLevel'], 'Number');
            }
            if (data.hasOwnProperty('revenueAccountId')) {
                obj['revenueAccountId'] = ApiClient.convertToType(data['revenueAccountId'], 'Number');
            }
            if (data.hasOwnProperty('sellingPrice')) {
                obj['sellingPrice'] = ApiClient.convertToType(data['sellingPrice'], 'Number');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('vat')) {
                obj['vat'] = ApiClient.convertToType(data['vat'], 'Number');
            }
            if (data.hasOwnProperty('vatApplicable')) {
                obj['vatApplicable'] = ApiClient.convertToType(data['vatApplicable'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArticleDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArticleDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ArticleDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['availableGyms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availableGyms'])) {
                throw new Error("Expected the field `availableGyms` to be an array in the JSON data but got " + data['availableGyms']);
            }
            // validate the optional field `availableGyms` (array)
            for (const item of data['availableGyms']) {
                GymDTO.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['barcode'] && !(typeof data['barcode'] === 'string' || data['barcode'] instanceof String)) {
            throw new Error("Expected the field `barcode` to be a primitive type in the JSON string but got " + data['barcode']);
        }
        // ensure the json data is a string
        if (data['createdUser'] && !(typeof data['createdUser'] === 'string' || data['createdUser'] instanceof String)) {
            throw new Error("Expected the field `createdUser` to be a primitive type in the JSON string but got " + data['createdUser']);
        }
        // ensure the json data is a string
        if (data['cronExpression'] && !(typeof data['cronExpression'] === 'string' || data['cronExpression'] instanceof String)) {
            throw new Error("Expected the field `cronExpression` to be a primitive type in the JSON string but got " + data['cronExpression']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['gymArticles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['gymArticles'])) {
                throw new Error("Expected the field `gymArticles` to be an array in the JSON data but got " + data['gymArticles']);
            }
            // validate the optional field `gymArticles` (array)
            for (const item of data['gymArticles']) {
                GymArticleDetailsDTO.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['measureUnit'] && !(typeof data['measureUnit'] === 'string' || data['measureUnit'] instanceof String)) {
            throw new Error("Expected the field `measureUnit` to be a primitive type in the JSON string but got " + data['measureUnit']);
        }
        // ensure the json data is a string
        if (data['modifiedUser'] && !(typeof data['modifiedUser'] === 'string' || data['modifiedUser'] instanceof String)) {
            throw new Error("Expected the field `modifiedUser` to be a primitive type in the JSON string but got " + data['modifiedUser']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tags'] && !(typeof data['tags'] === 'string' || data['tags'] instanceof String)) {
            throw new Error("Expected the field `tags` to be a primitive type in the JSON string but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ArticleDTO.RequiredProperties = ["availableGyms", "measureUnit", "name", "price", "type"];

/**
 * Active Status 
 * @member {Boolean} activeStatus
 */
ArticleDTO.prototype['activeStatus'] = undefined;

/**
 * @member {Boolean} applyForAllGyms
 */
ArticleDTO.prototype['applyForAllGyms'] = undefined;

/**
 * @member {Number} articleId
 */
ArticleDTO.prototype['articleId'] = undefined;

/**
 * @member {Array.<module:model/GymDTO>} availableGyms
 */
ArticleDTO.prototype['availableGyms'] = undefined;

/**
 * Default AvailableQty
 * @member {Number} availableQty
 */
ArticleDTO.prototype['availableQty'] = undefined;

/**
 * @member {String} barcode
 */
ArticleDTO.prototype['barcode'] = undefined;

/**
 * @member {Date} createdDate
 */
ArticleDTO.prototype['createdDate'] = undefined;

/**
 * @member {String} createdUser
 */
ArticleDTO.prototype['createdUser'] = undefined;

/**
 * Access Schedule CRON Expression 
 * @member {String} cronExpression
 */
ArticleDTO.prototype['cronExpression'] = undefined;

/**
 * @member {String} description
 */
ArticleDTO.prototype['description'] = undefined;

/**
 * @member {Number} discount
 */
ArticleDTO.prototype['discount'] = undefined;

/**
 * Default EmployeeDiscount
 * @member {Number} employeeDiscount
 */
ArticleDTO.prototype['employeeDiscount'] = undefined;

/**
 * Default EmployeePrice
 * @member {Number} employeePrice
 */
ArticleDTO.prototype['employeePrice'] = undefined;

/**
 * Gym Customizations 
 * @member {Array.<module:model/GymArticleDetailsDTO>} gymArticles
 */
ArticleDTO.prototype['gymArticles'] = undefined;

/**
 * @member {Boolean} isAddOn
 */
ArticleDTO.prototype['isAddOn'] = undefined;

/**
 * Default IsInventoryItem of the Article 
 * @member {Boolean} isInventoryItem
 */
ArticleDTO.prototype['isInventoryItem'] = undefined;

/**
 * Default IsObsolete of the Article 
 * @member {Boolean} isObsolete
 */
ArticleDTO.prototype['isObsolete'] = undefined;

/**
 * @member {String} measureUnit
 */
ArticleDTO.prototype['measureUnit'] = undefined;

/**
 * @member {Date} modifiedDate
 */
ArticleDTO.prototype['modifiedDate'] = undefined;

/**
 * @member {String} modifiedUser
 */
ArticleDTO.prototype['modifiedUser'] = undefined;

/**
 * @member {String} name
 */
ArticleDTO.prototype['name'] = undefined;

/**
 * @member {Number} number
 */
ArticleDTO.prototype['number'] = undefined;

/**
 * @member {Number} price
 */
ArticleDTO.prototype['price'] = undefined;

/**
 * Deafault ReorderLevel
 * @member {Number} reorderLevel
 */
ArticleDTO.prototype['reorderLevel'] = undefined;

/**
 * Default Revenue account
 * @member {Number} revenueAccountId
 */
ArticleDTO.prototype['revenueAccountId'] = undefined;

/**
 * Default SellingPrice
 * @member {Number} sellingPrice
 */
ArticleDTO.prototype['sellingPrice'] = undefined;

/**
 * @member {String} tags
 */
ArticleDTO.prototype['tags'] = undefined;

/**
 * @member {String} type
 */
ArticleDTO.prototype['type'] = undefined;

/**
 * @member {Number} vat
 */
ArticleDTO.prototype['vat'] = undefined;

/**
 * VAT Applicable 
 * @member {Boolean} vatApplicable
 */
ArticleDTO.prototype['vatApplicable'] = undefined;






export default ArticleDTO;

