/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PackageSearchDTO model module.
 * @module model/PackageSearchDTO
 * @version 2020-08-10_6-22
 */
class PackageSearchDTO {
    /**
     * Constructs a new <code>PackageSearchDTO</code>.
     * The PackageSearchDTO Class. Contains relevant fields of PackageSearch DTO by masking actual Package entity&#39;s fields in application.                
     * @alias module:model/PackageSearchDTO
     */
    constructor() { 
        
        PackageSearchDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PackageSearchDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PackageSearchDTO} obj Optional instance to populate.
     * @return {module:model/PackageSearchDTO} The populated <code>PackageSearchDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PackageSearchDTO();

            if (data.hasOwnProperty('activeStatus')) {
                obj['activeStatus'] = ApiClient.convertToType(data['activeStatus'], 'Boolean');
            }
            if (data.hasOwnProperty('addonFee')) {
                obj['addonFee'] = ApiClient.convertToType(data['addonFee'], 'Number');
            }
            if (data.hasOwnProperty('applyForAllGyms')) {
                obj['applyForAllGyms'] = ApiClient.convertToType(data['applyForAllGyms'], 'Boolean');
            }
            if (data.hasOwnProperty('bindingPeriod')) {
                obj['bindingPeriod'] = ApiClient.convertToType(data['bindingPeriod'], 'Number');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('createdUser')) {
                obj['createdUser'] = ApiClient.convertToType(data['createdUser'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], 'String');
            }
            if (data.hasOwnProperty('freeMonths')) {
                obj['freeMonths'] = ApiClient.convertToType(data['freeMonths'], 'Number');
            }
            if (data.hasOwnProperty('memberCanRemoveAddOns')) {
                obj['memberCanRemoveAddOns'] = ApiClient.convertToType(data['memberCanRemoveAddOns'], 'Boolean');
            }
            if (data.hasOwnProperty('modifiedDate')) {
                obj['modifiedDate'] = ApiClient.convertToType(data['modifiedDate'], 'Date');
            }
            if (data.hasOwnProperty('modifiedUser')) {
                obj['modifiedUser'] = ApiClient.convertToType(data['modifiedUser'], 'String');
            }
            if (data.hasOwnProperty('monthlyFee')) {
                obj['monthlyFee'] = ApiClient.convertToType(data['monthlyFee'], 'Number');
            }
            if (data.hasOwnProperty('numberOfVisits')) {
                obj['numberOfVisits'] = ApiClient.convertToType(data['numberOfVisits'], 'Number');
            }
            if (data.hasOwnProperty('packageId')) {
                obj['packageId'] = ApiClient.convertToType(data['packageId'], 'Number');
            }
            if (data.hasOwnProperty('packageName')) {
                obj['packageName'] = ApiClient.convertToType(data['packageName'], 'String');
            }
            if (data.hasOwnProperty('packageNumber')) {
                obj['packageNumber'] = ApiClient.convertToType(data['packageNumber'], 'Number');
            }
            if (data.hasOwnProperty('packageType')) {
                obj['packageType'] = ApiClient.convertToType(data['packageType'], 'String');
            }
            if (data.hasOwnProperty('registrationFee')) {
                obj['registrationFee'] = ApiClient.convertToType(data['registrationFee'], 'Number');
            }
            if (data.hasOwnProperty('serviceFee')) {
                obj['serviceFee'] = ApiClient.convertToType(data['serviceFee'], 'Number');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], 'String');
            }
            if (data.hasOwnProperty('totalCount')) {
                obj['totalCount'] = ApiClient.convertToType(data['totalCount'], 'Number');
            }
            if (data.hasOwnProperty('totalPrice')) {
                obj['totalPrice'] = ApiClient.convertToType(data['totalPrice'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PackageSearchDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PackageSearchDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createdUser'] && !(typeof data['createdUser'] === 'string' || data['createdUser'] instanceof String)) {
            throw new Error("Expected the field `createdUser` to be a primitive type in the JSON string but got " + data['createdUser']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['features'] && !(typeof data['features'] === 'string' || data['features'] instanceof String)) {
            throw new Error("Expected the field `features` to be a primitive type in the JSON string but got " + data['features']);
        }
        // ensure the json data is a string
        if (data['modifiedUser'] && !(typeof data['modifiedUser'] === 'string' || data['modifiedUser'] instanceof String)) {
            throw new Error("Expected the field `modifiedUser` to be a primitive type in the JSON string but got " + data['modifiedUser']);
        }
        // ensure the json data is a string
        if (data['packageName'] && !(typeof data['packageName'] === 'string' || data['packageName'] instanceof String)) {
            throw new Error("Expected the field `packageName` to be a primitive type in the JSON string but got " + data['packageName']);
        }
        // ensure the json data is a string
        if (data['packageType'] && !(typeof data['packageType'] === 'string' || data['packageType'] instanceof String)) {
            throw new Error("Expected the field `packageType` to be a primitive type in the JSON string but got " + data['packageType']);
        }
        // ensure the json data is a string
        if (data['tags'] && !(typeof data['tags'] === 'string' || data['tags'] instanceof String)) {
            throw new Error("Expected the field `tags` to be a primitive type in the JSON string but got " + data['tags']);
        }

        return true;
    }


}



/**
 * Active Status 
 * @member {Boolean} activeStatus
 */
PackageSearchDTO.prototype['activeStatus'] = undefined;

/**
 * sum of addon fees. incoming values for this filed will ignore.             
 * @member {Number} addonFee
 */
PackageSearchDTO.prototype['addonFee'] = undefined;

/**
 * Boolean value to indicate wheather package is available in all the gyms.             
 * @member {Boolean} applyForAllGyms
 */
PackageSearchDTO.prototype['applyForAllGyms'] = undefined;

/**
 * Range of period a member is bound to the contract if he/she choose this package.             
 * @member {Number} bindingPeriod
 */
PackageSearchDTO.prototype['bindingPeriod'] = undefined;

/**
 * Package created DateTime.             
 * @member {Date} createdDate
 */
PackageSearchDTO.prototype['createdDate'] = undefined;

/**
 * Package created user.             
 * @member {String} createdUser
 */
PackageSearchDTO.prototype['createdUser'] = undefined;

/**
 * Common descriptions about package.If there are more instructions can be stored as comma separated values.             
 * @member {String} description
 */
PackageSearchDTO.prototype['description'] = undefined;

/**
 * What are the facilities, features available for package.ex:- wifi, ACm etc.Can be stored as comma seperated values.             
 * @member {String} features
 */
PackageSearchDTO.prototype['features'] = undefined;

/**
 * No of months gym member can come without payments.             
 * @member {Number} freeMonths
 */
PackageSearchDTO.prototype['freeMonths'] = undefined;

/**
 * Boolean value to indicate member can remove already added addons if he choose this package.             
 * @member {Boolean} memberCanRemoveAddOns
 */
PackageSearchDTO.prototype['memberCanRemoveAddOns'] = undefined;

/**
 * Package last modified DateTime.             
 * @member {Date} modifiedDate
 */
PackageSearchDTO.prototype['modifiedDate'] = undefined;

/**
 * Package last modified user.             
 * @member {String} modifiedUser
 */
PackageSearchDTO.prototype['modifiedUser'] = undefined;

/**
 * Monthly installment fee if package is not fixed visit. addition of the servicefee and addon fees divided by binding period.             
 * @member {Number} monthlyFee
 */
PackageSearchDTO.prototype['monthlyFee'] = undefined;

/**
 * No of visits for fixed package 
 * @member {Number} numberOfVisits
 */
PackageSearchDTO.prototype['numberOfVisits'] = undefined;

/**
 * @member {Number} packageId
 */
PackageSearchDTO.prototype['packageId'] = undefined;

/**
 * @member {String} packageName
 */
PackageSearchDTO.prototype['packageName'] = undefined;

/**
 * @member {Number} packageNumber
 */
PackageSearchDTO.prototype['packageNumber'] = undefined;

/**
 * Package type can be either fixed visit or unlimited.             
 * @member {String} packageType
 */
PackageSearchDTO.prototype['packageType'] = undefined;

/**
 * Registartion fee for the package at a gym.             
 * @member {Number} registrationFee
 */
PackageSearchDTO.prototype['registrationFee'] = undefined;

/**
 * total Service charge of the package for entire period.             
 * @member {Number} serviceFee
 */
PackageSearchDTO.prototype['serviceFee'] = undefined;

/**
 * Comma separated string values in case of need of maintain some labels kind of stuff relevant to the package.             
 * @member {String} tags
 */
PackageSearchDTO.prototype['tags'] = undefined;

/**
 * total number of recode for particular search 
 * @member {Number} totalCount
 */
PackageSearchDTO.prototype['totalCount'] = undefined;

/**
 * total price for the package including Addon fees, service fee and registration fee. incoming values for this field will ignore.             
 * @member {Number} totalPrice
 */
PackageSearchDTO.prototype['totalPrice'] = undefined;






export default PackageSearchDTO;

