/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GymDTO from './GymDTO';
import PackageItemDTO from './PackageItemDTO';

/**
 * The PackageDTO model module.
 * @module model/PackageDTO
 * @version 2020-08-10_6-22
 */
class PackageDTO {
    /**
     * Constructs a new <code>PackageDTO</code>.
     * The PackageDTO Class. Contains relevant fields of Package DTO by masking actual Package entity&#39;s fields in application.             
     * @alias module:model/PackageDTO
     * @param packageName {String} 
     * @param packageType {String} Package type can be either fixed visit or unlimited.             
     * @param registrationFee {Number} Registartion fee for the package at a gym.              read only             
     * @param serviceFee {Number} total Service charge of the package for entire period.             
     */
    constructor(packageName, packageType, registrationFee, serviceFee) { 
        
        PackageDTO.initialize(this, packageName, packageType, registrationFee, serviceFee);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, packageName, packageType, registrationFee, serviceFee) { 
        obj['packageName'] = packageName;
        obj['packageType'] = packageType;
        obj['registrationFee'] = registrationFee;
        obj['serviceFee'] = serviceFee;
    }

    /**
     * Constructs a <code>PackageDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PackageDTO} obj Optional instance to populate.
     * @return {module:model/PackageDTO} The populated <code>PackageDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PackageDTO();

            if (data.hasOwnProperty('addOns')) {
                obj['addOns'] = ApiClient.convertToType(data['addOns'], [PackageItemDTO]);
            }
            if (data.hasOwnProperty('addonFee')) {
                obj['addonFee'] = ApiClient.convertToType(data['addonFee'], 'Number');
            }
            if (data.hasOwnProperty('applyForAllGyms')) {
                obj['applyForAllGyms'] = ApiClient.convertToType(data['applyForAllGyms'], 'Boolean');
            }
            if (data.hasOwnProperty('availableGyms')) {
                obj['availableGyms'] = ApiClient.convertToType(data['availableGyms'], [GymDTO]);
            }
            if (data.hasOwnProperty('bindingPeriod')) {
                obj['bindingPeriod'] = ApiClient.convertToType(data['bindingPeriod'], 'Number');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('createdUser')) {
                obj['createdUser'] = ApiClient.convertToType(data['createdUser'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('expireInMonths')) {
                obj['expireInMonths'] = ApiClient.convertToType(data['expireInMonths'], 'Number');
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], 'String');
            }
            if (data.hasOwnProperty('freeMonths')) {
                obj['freeMonths'] = ApiClient.convertToType(data['freeMonths'], 'Number');
            }
            if (data.hasOwnProperty('instructionsToGymUsers')) {
                obj['instructionsToGymUsers'] = ApiClient.convertToType(data['instructionsToGymUsers'], 'String');
            }
            if (data.hasOwnProperty('instructionsToWebUsers')) {
                obj['instructionsToWebUsers'] = ApiClient.convertToType(data['instructionsToWebUsers'], 'String');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('isAtg')) {
                obj['isAtg'] = ApiClient.convertToType(data['isAtg'], 'Boolean');
            }
            if (data.hasOwnProperty('isAutoRenew')) {
                obj['isAutoRenew'] = ApiClient.convertToType(data['isAutoRenew'], 'Boolean');
            }
            if (data.hasOwnProperty('isFirstMonthFree')) {
                obj['isFirstMonthFree'] = ApiClient.convertToType(data['isFirstMonthFree'], 'Boolean');
            }
            if (data.hasOwnProperty('isRegistrationFee')) {
                obj['isRegistrationFee'] = ApiClient.convertToType(data['isRegistrationFee'], 'Boolean');
            }
            if (data.hasOwnProperty('isRestAmount')) {
                obj['isRestAmount'] = ApiClient.convertToType(data['isRestAmount'], 'Boolean');
            }
            if (data.hasOwnProperty('isShownInMobile')) {
                obj['isShownInMobile'] = ApiClient.convertToType(data['isShownInMobile'], 'Boolean');
            }
            if (data.hasOwnProperty('isSponsorPackage')) {
                obj['isSponsorPackage'] = ApiClient.convertToType(data['isSponsorPackage'], 'Boolean');
            }
            if (data.hasOwnProperty('maximumGiveAwayRestAmount')) {
                obj['maximumGiveAwayRestAmount'] = ApiClient.convertToType(data['maximumGiveAwayRestAmount'], 'Number');
            }
            if (data.hasOwnProperty('memberCanAddAddOns')) {
                obj['memberCanAddAddOns'] = ApiClient.convertToType(data['memberCanAddAddOns'], 'Boolean');
            }
            if (data.hasOwnProperty('memberCanLeaveWithinFreePeriod')) {
                obj['memberCanLeaveWithinFreePeriod'] = ApiClient.convertToType(data['memberCanLeaveWithinFreePeriod'], 'Boolean');
            }
            if (data.hasOwnProperty('memberCanRemoveAddOns')) {
                obj['memberCanRemoveAddOns'] = ApiClient.convertToType(data['memberCanRemoveAddOns'], 'Boolean');
            }
            if (data.hasOwnProperty('modifiedDate')) {
                obj['modifiedDate'] = ApiClient.convertToType(data['modifiedDate'], 'Date');
            }
            if (data.hasOwnProperty('modifiedUser')) {
                obj['modifiedUser'] = ApiClient.convertToType(data['modifiedUser'], 'String');
            }
            if (data.hasOwnProperty('monthlyFee')) {
                obj['monthlyFee'] = ApiClient.convertToType(data['monthlyFee'], 'Number');
            }
            if (data.hasOwnProperty('nextPackageNumber')) {
                obj['nextPackageNumber'] = ApiClient.convertToType(data['nextPackageNumber'], 'Number');
            }
            if (data.hasOwnProperty('numberOfInstallments')) {
                obj['numberOfInstallments'] = ApiClient.convertToType(data['numberOfInstallments'], 'Number');
            }
            if (data.hasOwnProperty('numberOfVisits')) {
                obj['numberOfVisits'] = ApiClient.convertToType(data['numberOfVisits'], 'Number');
            }
            if (data.hasOwnProperty('packageId')) {
                obj['packageId'] = ApiClient.convertToType(data['packageId'], 'Number');
            }
            if (data.hasOwnProperty('packageName')) {
                obj['packageName'] = ApiClient.convertToType(data['packageName'], 'String');
            }
            if (data.hasOwnProperty('packageNumber')) {
                obj['packageNumber'] = ApiClient.convertToType(data['packageNumber'], 'String');
            }
            if (data.hasOwnProperty('packageType')) {
                obj['packageType'] = ApiClient.convertToType(data['packageType'], 'String');
            }
            if (data.hasOwnProperty('perVisitPrice')) {
                obj['perVisitPrice'] = ApiClient.convertToType(data['perVisitPrice'], 'Number');
            }
            if (data.hasOwnProperty('registrationFee')) {
                obj['registrationFee'] = ApiClient.convertToType(data['registrationFee'], 'Number');
            }
            if (data.hasOwnProperty('serviceFee')) {
                obj['serviceFee'] = ApiClient.convertToType(data['serviceFee'], 'Number');
            }
            if (data.hasOwnProperty('shownInWeb')) {
                obj['shownInWeb'] = ApiClient.convertToType(data['shownInWeb'], 'Boolean');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], 'String');
            }
            if (data.hasOwnProperty('totalPrice')) {
                obj['totalPrice'] = ApiClient.convertToType(data['totalPrice'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PackageDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PackageDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PackageDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['addOns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['addOns'])) {
                throw new Error("Expected the field `addOns` to be an array in the JSON data but got " + data['addOns']);
            }
            // validate the optional field `addOns` (array)
            for (const item of data['addOns']) {
                PackageItemDTO.validateJSON(item);
            };
        }
        if (data['availableGyms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availableGyms'])) {
                throw new Error("Expected the field `availableGyms` to be an array in the JSON data but got " + data['availableGyms']);
            }
            // validate the optional field `availableGyms` (array)
            for (const item of data['availableGyms']) {
                GymDTO.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['createdUser'] && !(typeof data['createdUser'] === 'string' || data['createdUser'] instanceof String)) {
            throw new Error("Expected the field `createdUser` to be a primitive type in the JSON string but got " + data['createdUser']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['features'] && !(typeof data['features'] === 'string' || data['features'] instanceof String)) {
            throw new Error("Expected the field `features` to be a primitive type in the JSON string but got " + data['features']);
        }
        // ensure the json data is a string
        if (data['instructionsToGymUsers'] && !(typeof data['instructionsToGymUsers'] === 'string' || data['instructionsToGymUsers'] instanceof String)) {
            throw new Error("Expected the field `instructionsToGymUsers` to be a primitive type in the JSON string but got " + data['instructionsToGymUsers']);
        }
        // ensure the json data is a string
        if (data['instructionsToWebUsers'] && !(typeof data['instructionsToWebUsers'] === 'string' || data['instructionsToWebUsers'] instanceof String)) {
            throw new Error("Expected the field `instructionsToWebUsers` to be a primitive type in the JSON string but got " + data['instructionsToWebUsers']);
        }
        // ensure the json data is a string
        if (data['modifiedUser'] && !(typeof data['modifiedUser'] === 'string' || data['modifiedUser'] instanceof String)) {
            throw new Error("Expected the field `modifiedUser` to be a primitive type in the JSON string but got " + data['modifiedUser']);
        }
        // ensure the json data is a string
        if (data['packageName'] && !(typeof data['packageName'] === 'string' || data['packageName'] instanceof String)) {
            throw new Error("Expected the field `packageName` to be a primitive type in the JSON string but got " + data['packageName']);
        }
        // ensure the json data is a string
        if (data['packageNumber'] && !(typeof data['packageNumber'] === 'string' || data['packageNumber'] instanceof String)) {
            throw new Error("Expected the field `packageNumber` to be a primitive type in the JSON string but got " + data['packageNumber']);
        }
        // ensure the json data is a string
        if (data['packageType'] && !(typeof data['packageType'] === 'string' || data['packageType'] instanceof String)) {
            throw new Error("Expected the field `packageType` to be a primitive type in the JSON string but got " + data['packageType']);
        }
        // ensure the json data is a string
        if (data['tags'] && !(typeof data['tags'] === 'string' || data['tags'] instanceof String)) {
            throw new Error("Expected the field `tags` to be a primitive type in the JSON string but got " + data['tags']);
        }

        return true;
    }


}

PackageDTO.RequiredProperties = ["packageName", "packageType", "registrationFee", "serviceFee"];

/**
 * Extra articles list added to the given package.             
 * @member {Array.<module:model/PackageItemDTO>} addOns
 */
PackageDTO.prototype['addOns'] = undefined;

/**
 * sum of addon fees. incoming values for this filed will ignore.             
 * @member {Number} addonFee
 */
PackageDTO.prototype['addonFee'] = undefined;

/**
 * Boolean value to indicate wheather package is available in all the gyms.             
 * @member {Boolean} applyForAllGyms
 */
PackageDTO.prototype['applyForAllGyms'] = undefined;

/**
 * Gyms list where this package is available.             
 * @member {Array.<module:model/GymDTO>} availableGyms
 */
PackageDTO.prototype['availableGyms'] = undefined;

/**
 * Range of period a member is bound to the contract if he/she choose this package.             
 * @member {Number} bindingPeriod
 */
PackageDTO.prototype['bindingPeriod'] = undefined;

/**
 * Package created DateTime.             
 * @member {Date} createdDate
 */
PackageDTO.prototype['createdDate'] = undefined;

/**
 * Package created user.             
 * @member {String} createdUser
 */
PackageDTO.prototype['createdUser'] = undefined;

/**
 * Common descriptions about package.If there are more instructions               can be stored as comma separated values.             
 * @member {String} description
 */
PackageDTO.prototype['description'] = undefined;

/**
 * End date of the package.After that package is not valid for use.             
 * @member {Date} endDate
 */
PackageDTO.prototype['endDate'] = undefined;

/**
 * No of months the fixed package is valid for sale             
 * @member {Number} expireInMonths
 */
PackageDTO.prototype['expireInMonths'] = undefined;

/**
 * What are the facilities, features available for package.ex:- wifi, ACm etc.Can be stored as comma seperated values.             
 * @member {String} features
 */
PackageDTO.prototype['features'] = undefined;

/**
 * No of months gym member can come without payments.             
 * @member {Number} freeMonths
 */
PackageDTO.prototype['freeMonths'] = undefined;

/**
 * Instruction to the gym members relevant to the package.              If there are more instructions can be stored as comma seperated values.             
 * @member {String} instructionsToGymUsers
 */
PackageDTO.prototype['instructionsToGymUsers'] = undefined;

/**
 * Instruction to the MRM members relevant to the package.              If there are more instructions can be stored as comma seperated values.             
 * @member {String} instructionsToWebUsers
 */
PackageDTO.prototype['instructionsToWebUsers'] = undefined;

/**
 * Boolean value to indicate this package is still active or not.             
 * @member {Boolean} isActive
 */
PackageDTO.prototype['isActive'] = undefined;

/**
 * Boolean value to indicate ATG transaction from bank is applicable or not.             
 * @member {Boolean} isAtg
 */
PackageDTO.prototype['isAtg'] = undefined;

/**
 * Boolean value to indicate the contract will auto renew after expiration               if this package would be chosen.             
 * @member {Boolean} isAutoRenew
 */
PackageDTO.prototype['isAutoRenew'] = undefined;

/**
 * Boolean value to indicate if the first month charges is free.             
 * @member {Boolean} isFirstMonthFree
 */
PackageDTO.prototype['isFirstMonthFree'] = undefined;

/**
 * Boolean value to indicate this package has registration fee or not.             
 * @member {Boolean} isRegistrationFee
 */
PackageDTO.prototype['isRegistrationFee'] = undefined;

/**
 * Boolean value to indicate rest amount is applicable or not.             
 * @member {Boolean} isRestAmount
 */
PackageDTO.prototype['isRestAmount'] = undefined;

/**
 * Boolean value to indicate package is visible in Mobile App or not.             
 * @member {Boolean} isShownInMobile
 */
PackageDTO.prototype['isShownInMobile'] = undefined;

/**
 * Boolean value to indicate package can be sponsored or not by other party.             
 * @member {Boolean} isSponsorPackage
 */
PackageDTO.prototype['isSponsorPackage'] = undefined;

/**
 * If a member join the gym middle of a month via this package,               what is the maximum amount of price can be neglected from payment from the member.             
 * @member {Number} maximumGiveAwayRestAmount
 */
PackageDTO.prototype['maximumGiveAwayRestAmount'] = undefined;

/**
 * Boolean value to indicate member can add extra addons he wish if he choose this package.             
 * @member {Boolean} memberCanAddAddOns
 */
PackageDTO.prototype['memberCanAddAddOns'] = undefined;

/**
 * Boolean value to indicate if member can leave from contract within               free period if he/she choose this package.             
 * @member {Boolean} memberCanLeaveWithinFreePeriod
 */
PackageDTO.prototype['memberCanLeaveWithinFreePeriod'] = undefined;

/**
 * Boolean value to indicate member can remove already added addons if he choose this package.             
 * @member {Boolean} memberCanRemoveAddOns
 */
PackageDTO.prototype['memberCanRemoveAddOns'] = undefined;

/**
 * Package last modified DateTime.             
 * @member {Date} modifiedDate
 */
PackageDTO.prototype['modifiedDate'] = undefined;

/**
 * Package last modified user.             
 * @member {String} modifiedUser
 */
PackageDTO.prototype['modifiedUser'] = undefined;

/**
 * Monthly installment fee if package is not fixed visit. addition of the servicefee and addon fees divided by binding period.              read only             
 * @member {Number} monthlyFee
 */
PackageDTO.prototype['monthlyFee'] = undefined;

/**
 * Next Package the contract continue after the binding period of this package.             
 * @member {Number} nextPackageNumber
 */
PackageDTO.prototype['nextPackageNumber'] = undefined;

/**
 * Maximum Number of installment a member can divide the package price/cost to pay.             
 * @member {Number} numberOfInstallments
 */
PackageDTO.prototype['numberOfInstallments'] = undefined;

/**
 * If package is fixed visit type, then how many visits are available for this package.             
 * @member {Number} numberOfVisits
 */
PackageDTO.prototype['numberOfVisits'] = undefined;

/**
 * @member {Number} packageId
 */
PackageDTO.prototype['packageId'] = undefined;

/**
 * @member {String} packageName
 */
PackageDTO.prototype['packageName'] = undefined;

/**
 * @member {String} packageNumber
 */
PackageDTO.prototype['packageNumber'] = undefined;

/**
 * Package type can be either fixed visit or unlimited.             
 * @member {String} packageType
 */
PackageDTO.prototype['packageType'] = undefined;

/**
 * Cost/Price of the single visit to gym.             
 * @member {Number} perVisitPrice
 */
PackageDTO.prototype['perVisitPrice'] = undefined;

/**
 * Registartion fee for the package at a gym.              read only             
 * @member {Number} registrationFee
 */
PackageDTO.prototype['registrationFee'] = undefined;

/**
 * total Service charge of the package for entire period.             
 * @member {Number} serviceFee
 */
PackageDTO.prototype['serviceFee'] = undefined;

/**
 * Boolean value to show this package in MRM system or not.             
 * @member {Boolean} shownInWeb
 */
PackageDTO.prototype['shownInWeb'] = undefined;

/**
 * Start date of the package.             
 * @member {Date} startDate
 */
PackageDTO.prototype['startDate'] = undefined;

/**
 * Comma separated string values in case of need of maintain some labels kind of               stuff relevant to the package.             
 * @member {String} tags
 */
PackageDTO.prototype['tags'] = undefined;

/**
 * total price for the package including Addon fees, service fee and registration fee. incoming values for this field will ignore.             
 * @member {Number} totalPrice
 */
PackageDTO.prototype['totalPrice'] = undefined;






export default PackageDTO;

