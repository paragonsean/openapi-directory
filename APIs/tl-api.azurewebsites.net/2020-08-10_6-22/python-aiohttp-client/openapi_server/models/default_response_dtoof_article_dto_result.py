# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.article_dto import ArticleDTO
from openapi_server.models.gym_article_details_dto import GymArticleDetailsDTO
from openapi_server.models.gym_dto import GymDTO
import re
from openapi_server import util


class DefaultResponseDTOOfArticleDTOResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_status: bool=None, apply_for_all_gyms: bool=None, article_id: int=None, available_gyms: List[GymDTO]=None, available_qty: float=None, barcode: str=None, created_date: datetime=None, created_user: str=None, cron_expression: str=None, description: str=None, discount: float=None, employee_discount: float=None, employee_price: float=None, gym_articles: List[GymArticleDetailsDTO]=None, is_add_on: bool=None, is_inventory_item: bool=None, is_obsolete: bool=None, measure_unit: str=None, modified_date: datetime=None, modified_user: str=None, name: str=None, number: int=None, price: float=None, reorder_level: float=None, revenue_account_id: int=None, selling_price: float=None, tags: str=None, type: str=None, vat: float=None, vat_applicable: bool=None):
        """DefaultResponseDTOOfArticleDTOResult - a model defined in OpenAPI

        :param active_status: The active_status of this DefaultResponseDTOOfArticleDTOResult.
        :param apply_for_all_gyms: The apply_for_all_gyms of this DefaultResponseDTOOfArticleDTOResult.
        :param article_id: The article_id of this DefaultResponseDTOOfArticleDTOResult.
        :param available_gyms: The available_gyms of this DefaultResponseDTOOfArticleDTOResult.
        :param available_qty: The available_qty of this DefaultResponseDTOOfArticleDTOResult.
        :param barcode: The barcode of this DefaultResponseDTOOfArticleDTOResult.
        :param created_date: The created_date of this DefaultResponseDTOOfArticleDTOResult.
        :param created_user: The created_user of this DefaultResponseDTOOfArticleDTOResult.
        :param cron_expression: The cron_expression of this DefaultResponseDTOOfArticleDTOResult.
        :param description: The description of this DefaultResponseDTOOfArticleDTOResult.
        :param discount: The discount of this DefaultResponseDTOOfArticleDTOResult.
        :param employee_discount: The employee_discount of this DefaultResponseDTOOfArticleDTOResult.
        :param employee_price: The employee_price of this DefaultResponseDTOOfArticleDTOResult.
        :param gym_articles: The gym_articles of this DefaultResponseDTOOfArticleDTOResult.
        :param is_add_on: The is_add_on of this DefaultResponseDTOOfArticleDTOResult.
        :param is_inventory_item: The is_inventory_item of this DefaultResponseDTOOfArticleDTOResult.
        :param is_obsolete: The is_obsolete of this DefaultResponseDTOOfArticleDTOResult.
        :param measure_unit: The measure_unit of this DefaultResponseDTOOfArticleDTOResult.
        :param modified_date: The modified_date of this DefaultResponseDTOOfArticleDTOResult.
        :param modified_user: The modified_user of this DefaultResponseDTOOfArticleDTOResult.
        :param name: The name of this DefaultResponseDTOOfArticleDTOResult.
        :param number: The number of this DefaultResponseDTOOfArticleDTOResult.
        :param price: The price of this DefaultResponseDTOOfArticleDTOResult.
        :param reorder_level: The reorder_level of this DefaultResponseDTOOfArticleDTOResult.
        :param revenue_account_id: The revenue_account_id of this DefaultResponseDTOOfArticleDTOResult.
        :param selling_price: The selling_price of this DefaultResponseDTOOfArticleDTOResult.
        :param tags: The tags of this DefaultResponseDTOOfArticleDTOResult.
        :param type: The type of this DefaultResponseDTOOfArticleDTOResult.
        :param vat: The vat of this DefaultResponseDTOOfArticleDTOResult.
        :param vat_applicable: The vat_applicable of this DefaultResponseDTOOfArticleDTOResult.
        """
        self.openapi_types = {
            'active_status': bool,
            'apply_for_all_gyms': bool,
            'article_id': int,
            'available_gyms': List[GymDTO],
            'available_qty': float,
            'barcode': str,
            'created_date': datetime,
            'created_user': str,
            'cron_expression': str,
            'description': str,
            'discount': float,
            'employee_discount': float,
            'employee_price': float,
            'gym_articles': List[GymArticleDetailsDTO],
            'is_add_on': bool,
            'is_inventory_item': bool,
            'is_obsolete': bool,
            'measure_unit': str,
            'modified_date': datetime,
            'modified_user': str,
            'name': str,
            'number': int,
            'price': float,
            'reorder_level': float,
            'revenue_account_id': int,
            'selling_price': float,
            'tags': str,
            'type': str,
            'vat': float,
            'vat_applicable': bool
        }

        self.attribute_map = {
            'active_status': 'activeStatus',
            'apply_for_all_gyms': 'applyForAllGyms',
            'article_id': 'articleId',
            'available_gyms': 'availableGyms',
            'available_qty': 'availableQty',
            'barcode': 'barcode',
            'created_date': 'createdDate',
            'created_user': 'createdUser',
            'cron_expression': 'cronExpression',
            'description': 'description',
            'discount': 'discount',
            'employee_discount': 'employeeDiscount',
            'employee_price': 'employeePrice',
            'gym_articles': 'gymArticles',
            'is_add_on': 'isAddOn',
            'is_inventory_item': 'isInventoryItem',
            'is_obsolete': 'isObsolete',
            'measure_unit': 'measureUnit',
            'modified_date': 'modifiedDate',
            'modified_user': 'modifiedUser',
            'name': 'name',
            'number': 'number',
            'price': 'price',
            'reorder_level': 'reorderLevel',
            'revenue_account_id': 'revenueAccountId',
            'selling_price': 'sellingPrice',
            'tags': 'tags',
            'type': 'type',
            'vat': 'vat',
            'vat_applicable': 'vatApplicable'
        }

        self._active_status = active_status
        self._apply_for_all_gyms = apply_for_all_gyms
        self._article_id = article_id
        self._available_gyms = available_gyms
        self._available_qty = available_qty
        self._barcode = barcode
        self._created_date = created_date
        self._created_user = created_user
        self._cron_expression = cron_expression
        self._description = description
        self._discount = discount
        self._employee_discount = employee_discount
        self._employee_price = employee_price
        self._gym_articles = gym_articles
        self._is_add_on = is_add_on
        self._is_inventory_item = is_inventory_item
        self._is_obsolete = is_obsolete
        self._measure_unit = measure_unit
        self._modified_date = modified_date
        self._modified_user = modified_user
        self._name = name
        self._number = number
        self._price = price
        self._reorder_level = reorder_level
        self._revenue_account_id = revenue_account_id
        self._selling_price = selling_price
        self._tags = tags
        self._type = type
        self._vat = vat
        self._vat_applicable = vat_applicable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DefaultResponseDTOOfArticleDTOResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DefaultResponseDTOOfArticleDTO_result of this DefaultResponseDTOOfArticleDTOResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_status(self):
        """Gets the active_status of this DefaultResponseDTOOfArticleDTOResult.

        Active Status 

        :return: The active_status of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: bool
        """
        return self._active_status

    @active_status.setter
    def active_status(self, active_status):
        """Sets the active_status of this DefaultResponseDTOOfArticleDTOResult.

        Active Status 

        :param active_status: The active_status of this DefaultResponseDTOOfArticleDTOResult.
        :type active_status: bool
        """

        self._active_status = active_status

    @property
    def apply_for_all_gyms(self):
        """Gets the apply_for_all_gyms of this DefaultResponseDTOOfArticleDTOResult.


        :return: The apply_for_all_gyms of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: bool
        """
        return self._apply_for_all_gyms

    @apply_for_all_gyms.setter
    def apply_for_all_gyms(self, apply_for_all_gyms):
        """Sets the apply_for_all_gyms of this DefaultResponseDTOOfArticleDTOResult.


        :param apply_for_all_gyms: The apply_for_all_gyms of this DefaultResponseDTOOfArticleDTOResult.
        :type apply_for_all_gyms: bool
        """

        self._apply_for_all_gyms = apply_for_all_gyms

    @property
    def article_id(self):
        """Gets the article_id of this DefaultResponseDTOOfArticleDTOResult.


        :return: The article_id of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: int
        """
        return self._article_id

    @article_id.setter
    def article_id(self, article_id):
        """Sets the article_id of this DefaultResponseDTOOfArticleDTOResult.


        :param article_id: The article_id of this DefaultResponseDTOOfArticleDTOResult.
        :type article_id: int
        """

        self._article_id = article_id

    @property
    def available_gyms(self):
        """Gets the available_gyms of this DefaultResponseDTOOfArticleDTOResult.


        :return: The available_gyms of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: List[GymDTO]
        """
        return self._available_gyms

    @available_gyms.setter
    def available_gyms(self, available_gyms):
        """Sets the available_gyms of this DefaultResponseDTOOfArticleDTOResult.


        :param available_gyms: The available_gyms of this DefaultResponseDTOOfArticleDTOResult.
        :type available_gyms: List[GymDTO]
        """
        if available_gyms is None:
            raise ValueError("Invalid value for `available_gyms`, must not be `None`")

        self._available_gyms = available_gyms

    @property
    def available_qty(self):
        """Gets the available_qty of this DefaultResponseDTOOfArticleDTOResult.

        Default AvailableQty

        :return: The available_qty of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: float
        """
        return self._available_qty

    @available_qty.setter
    def available_qty(self, available_qty):
        """Sets the available_qty of this DefaultResponseDTOOfArticleDTOResult.

        Default AvailableQty

        :param available_qty: The available_qty of this DefaultResponseDTOOfArticleDTOResult.
        :type available_qty: float
        """

        self._available_qty = available_qty

    @property
    def barcode(self):
        """Gets the barcode of this DefaultResponseDTOOfArticleDTOResult.


        :return: The barcode of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this DefaultResponseDTOOfArticleDTOResult.


        :param barcode: The barcode of this DefaultResponseDTOOfArticleDTOResult.
        :type barcode: str
        """
        if barcode is not None and len(barcode) > 100:
            raise ValueError("Invalid value for `barcode`, length must be less than or equal to `100`")
        if barcode is not None and len(barcode) < 0:
            raise ValueError("Invalid value for `barcode`, length must be greater than or equal to `0`")

        self._barcode = barcode

    @property
    def created_date(self):
        """Gets the created_date of this DefaultResponseDTOOfArticleDTOResult.


        :return: The created_date of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this DefaultResponseDTOOfArticleDTOResult.


        :param created_date: The created_date of this DefaultResponseDTOOfArticleDTOResult.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def created_user(self):
        """Gets the created_user of this DefaultResponseDTOOfArticleDTOResult.


        :return: The created_user of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: str
        """
        return self._created_user

    @created_user.setter
    def created_user(self, created_user):
        """Sets the created_user of this DefaultResponseDTOOfArticleDTOResult.


        :param created_user: The created_user of this DefaultResponseDTOOfArticleDTOResult.
        :type created_user: str
        """

        self._created_user = created_user

    @property
    def cron_expression(self):
        """Gets the cron_expression of this DefaultResponseDTOOfArticleDTOResult.

        Access Schedule CRON Expression 

        :return: The cron_expression of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression):
        """Sets the cron_expression of this DefaultResponseDTOOfArticleDTOResult.

        Access Schedule CRON Expression 

        :param cron_expression: The cron_expression of this DefaultResponseDTOOfArticleDTOResult.
        :type cron_expression: str
        """

        self._cron_expression = cron_expression

    @property
    def description(self):
        """Gets the description of this DefaultResponseDTOOfArticleDTOResult.


        :return: The description of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DefaultResponseDTOOfArticleDTOResult.


        :param description: The description of this DefaultResponseDTOOfArticleDTOResult.
        :type description: str
        """

        self._description = description

    @property
    def discount(self):
        """Gets the discount of this DefaultResponseDTOOfArticleDTOResult.


        :return: The discount of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this DefaultResponseDTOOfArticleDTOResult.


        :param discount: The discount of this DefaultResponseDTOOfArticleDTOResult.
        :type discount: float
        """

        self._discount = discount

    @property
    def employee_discount(self):
        """Gets the employee_discount of this DefaultResponseDTOOfArticleDTOResult.

        Default EmployeeDiscount

        :return: The employee_discount of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: float
        """
        return self._employee_discount

    @employee_discount.setter
    def employee_discount(self, employee_discount):
        """Sets the employee_discount of this DefaultResponseDTOOfArticleDTOResult.

        Default EmployeeDiscount

        :param employee_discount: The employee_discount of this DefaultResponseDTOOfArticleDTOResult.
        :type employee_discount: float
        """

        self._employee_discount = employee_discount

    @property
    def employee_price(self):
        """Gets the employee_price of this DefaultResponseDTOOfArticleDTOResult.

        Default EmployeePrice

        :return: The employee_price of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: float
        """
        return self._employee_price

    @employee_price.setter
    def employee_price(self, employee_price):
        """Sets the employee_price of this DefaultResponseDTOOfArticleDTOResult.

        Default EmployeePrice

        :param employee_price: The employee_price of this DefaultResponseDTOOfArticleDTOResult.
        :type employee_price: float
        """

        self._employee_price = employee_price

    @property
    def gym_articles(self):
        """Gets the gym_articles of this DefaultResponseDTOOfArticleDTOResult.

        Gym Customizations 

        :return: The gym_articles of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: List[GymArticleDetailsDTO]
        """
        return self._gym_articles

    @gym_articles.setter
    def gym_articles(self, gym_articles):
        """Sets the gym_articles of this DefaultResponseDTOOfArticleDTOResult.

        Gym Customizations 

        :param gym_articles: The gym_articles of this DefaultResponseDTOOfArticleDTOResult.
        :type gym_articles: List[GymArticleDetailsDTO]
        """

        self._gym_articles = gym_articles

    @property
    def is_add_on(self):
        """Gets the is_add_on of this DefaultResponseDTOOfArticleDTOResult.


        :return: The is_add_on of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: bool
        """
        return self._is_add_on

    @is_add_on.setter
    def is_add_on(self, is_add_on):
        """Sets the is_add_on of this DefaultResponseDTOOfArticleDTOResult.


        :param is_add_on: The is_add_on of this DefaultResponseDTOOfArticleDTOResult.
        :type is_add_on: bool
        """

        self._is_add_on = is_add_on

    @property
    def is_inventory_item(self):
        """Gets the is_inventory_item of this DefaultResponseDTOOfArticleDTOResult.

        Default IsInventoryItem of the Article 

        :return: The is_inventory_item of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: bool
        """
        return self._is_inventory_item

    @is_inventory_item.setter
    def is_inventory_item(self, is_inventory_item):
        """Sets the is_inventory_item of this DefaultResponseDTOOfArticleDTOResult.

        Default IsInventoryItem of the Article 

        :param is_inventory_item: The is_inventory_item of this DefaultResponseDTOOfArticleDTOResult.
        :type is_inventory_item: bool
        """

        self._is_inventory_item = is_inventory_item

    @property
    def is_obsolete(self):
        """Gets the is_obsolete of this DefaultResponseDTOOfArticleDTOResult.

        Default IsObsolete of the Article 

        :return: The is_obsolete of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: bool
        """
        return self._is_obsolete

    @is_obsolete.setter
    def is_obsolete(self, is_obsolete):
        """Sets the is_obsolete of this DefaultResponseDTOOfArticleDTOResult.

        Default IsObsolete of the Article 

        :param is_obsolete: The is_obsolete of this DefaultResponseDTOOfArticleDTOResult.
        :type is_obsolete: bool
        """

        self._is_obsolete = is_obsolete

    @property
    def measure_unit(self):
        """Gets the measure_unit of this DefaultResponseDTOOfArticleDTOResult.


        :return: The measure_unit of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: str
        """
        return self._measure_unit

    @measure_unit.setter
    def measure_unit(self, measure_unit):
        """Sets the measure_unit of this DefaultResponseDTOOfArticleDTOResult.


        :param measure_unit: The measure_unit of this DefaultResponseDTOOfArticleDTOResult.
        :type measure_unit: str
        """
        if measure_unit is None:
            raise ValueError("Invalid value for `measure_unit`, must not be `None`")
        if measure_unit is not None and len(measure_unit) < 1:
            raise ValueError("Invalid value for `measure_unit`, length must be greater than or equal to `1`")

        self._measure_unit = measure_unit

    @property
    def modified_date(self):
        """Gets the modified_date of this DefaultResponseDTOOfArticleDTOResult.


        :return: The modified_date of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this DefaultResponseDTOOfArticleDTOResult.


        :param modified_date: The modified_date of this DefaultResponseDTOOfArticleDTOResult.
        :type modified_date: datetime
        """

        self._modified_date = modified_date

    @property
    def modified_user(self):
        """Gets the modified_user of this DefaultResponseDTOOfArticleDTOResult.


        :return: The modified_user of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: str
        """
        return self._modified_user

    @modified_user.setter
    def modified_user(self, modified_user):
        """Sets the modified_user of this DefaultResponseDTOOfArticleDTOResult.


        :param modified_user: The modified_user of this DefaultResponseDTOOfArticleDTOResult.
        :type modified_user: str
        """

        self._modified_user = modified_user

    @property
    def name(self):
        """Gets the name of this DefaultResponseDTOOfArticleDTOResult.


        :return: The name of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DefaultResponseDTOOfArticleDTOResult.


        :param name: The name of this DefaultResponseDTOOfArticleDTOResult.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def number(self):
        """Gets the number of this DefaultResponseDTOOfArticleDTOResult.


        :return: The number of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this DefaultResponseDTOOfArticleDTOResult.


        :param number: The number of this DefaultResponseDTOOfArticleDTOResult.
        :type number: int
        """

        self._number = number

    @property
    def price(self):
        """Gets the price of this DefaultResponseDTOOfArticleDTOResult.


        :return: The price of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this DefaultResponseDTOOfArticleDTOResult.


        :param price: The price of this DefaultResponseDTOOfArticleDTOResult.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def reorder_level(self):
        """Gets the reorder_level of this DefaultResponseDTOOfArticleDTOResult.

        Deafault ReorderLevel

        :return: The reorder_level of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: float
        """
        return self._reorder_level

    @reorder_level.setter
    def reorder_level(self, reorder_level):
        """Sets the reorder_level of this DefaultResponseDTOOfArticleDTOResult.

        Deafault ReorderLevel

        :param reorder_level: The reorder_level of this DefaultResponseDTOOfArticleDTOResult.
        :type reorder_level: float
        """

        self._reorder_level = reorder_level

    @property
    def revenue_account_id(self):
        """Gets the revenue_account_id of this DefaultResponseDTOOfArticleDTOResult.

        Default Revenue account

        :return: The revenue_account_id of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: int
        """
        return self._revenue_account_id

    @revenue_account_id.setter
    def revenue_account_id(self, revenue_account_id):
        """Sets the revenue_account_id of this DefaultResponseDTOOfArticleDTOResult.

        Default Revenue account

        :param revenue_account_id: The revenue_account_id of this DefaultResponseDTOOfArticleDTOResult.
        :type revenue_account_id: int
        """

        self._revenue_account_id = revenue_account_id

    @property
    def selling_price(self):
        """Gets the selling_price of this DefaultResponseDTOOfArticleDTOResult.

        Default SellingPrice

        :return: The selling_price of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: float
        """
        return self._selling_price

    @selling_price.setter
    def selling_price(self, selling_price):
        """Sets the selling_price of this DefaultResponseDTOOfArticleDTOResult.

        Default SellingPrice

        :param selling_price: The selling_price of this DefaultResponseDTOOfArticleDTOResult.
        :type selling_price: float
        """

        self._selling_price = selling_price

    @property
    def tags(self):
        """Gets the tags of this DefaultResponseDTOOfArticleDTOResult.


        :return: The tags of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DefaultResponseDTOOfArticleDTOResult.


        :param tags: The tags of this DefaultResponseDTOOfArticleDTOResult.
        :type tags: str
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, length must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, length must be greater than or equal to `0`")

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this DefaultResponseDTOOfArticleDTOResult.


        :return: The type of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DefaultResponseDTOOfArticleDTOResult.


        :param type: The type of this DefaultResponseDTOOfArticleDTOResult.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")
        if type is not None and not re.search(r'item|service|access', type):
            raise ValueError("Invalid value for `type`, must be a follow pattern or equal to `/item|service|access/`")

        self._type = type

    @property
    def vat(self):
        """Gets the vat of this DefaultResponseDTOOfArticleDTOResult.


        :return: The vat of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: float
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this DefaultResponseDTOOfArticleDTOResult.


        :param vat: The vat of this DefaultResponseDTOOfArticleDTOResult.
        :type vat: float
        """

        self._vat = vat

    @property
    def vat_applicable(self):
        """Gets the vat_applicable of this DefaultResponseDTOOfArticleDTOResult.

        VAT Applicable 

        :return: The vat_applicable of this DefaultResponseDTOOfArticleDTOResult.
        :rtype: bool
        """
        return self._vat_applicable

    @vat_applicable.setter
    def vat_applicable(self, vat_applicable):
        """Sets the vat_applicable of this DefaultResponseDTOOfArticleDTOResult.

        VAT Applicable 

        :param vat_applicable: The vat_applicable of this DefaultResponseDTOOfArticleDTOResult.
        :type vat_applicable: bool
        """

        self._vat_applicable = vat_applicable
