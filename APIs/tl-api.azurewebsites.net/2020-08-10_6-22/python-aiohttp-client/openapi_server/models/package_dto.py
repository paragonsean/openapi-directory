# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gym_dto import GymDTO
from openapi_server.models.package_item_dto import PackageItemDTO
import re
from openapi_server import util


class PackageDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_ons: List[PackageItemDTO]=None, addon_fee: float=None, apply_for_all_gyms: bool=None, available_gyms: List[GymDTO]=None, binding_period: int=None, created_date: datetime=None, created_user: str=None, description: str=None, end_date: datetime=None, expire_in_months: int=None, features: str=None, free_months: int=None, instructions_to_gym_users: str=None, instructions_to_web_users: str=None, is_active: bool=None, is_atg: bool=None, is_auto_renew: bool=None, is_first_month_free: bool=None, is_registration_fee: bool=None, is_rest_amount: bool=None, is_shown_in_mobile: bool=None, is_sponsor_package: bool=None, maximum_give_away_rest_amount: float=None, member_can_add_add_ons: bool=None, member_can_leave_within_free_period: bool=None, member_can_remove_add_ons: bool=None, modified_date: datetime=None, modified_user: str=None, monthly_fee: float=None, next_package_number: int=None, number_of_installments: int=None, number_of_visits: int=None, package_id: int=None, package_name: str=None, package_number: str=None, package_type: str=None, per_visit_price: float=None, registration_fee: float=None, service_fee: float=None, shown_in_web: bool=None, start_date: datetime=None, tags: str=None, total_price: float=None):
        """PackageDTO - a model defined in OpenAPI

        :param add_ons: The add_ons of this PackageDTO.
        :param addon_fee: The addon_fee of this PackageDTO.
        :param apply_for_all_gyms: The apply_for_all_gyms of this PackageDTO.
        :param available_gyms: The available_gyms of this PackageDTO.
        :param binding_period: The binding_period of this PackageDTO.
        :param created_date: The created_date of this PackageDTO.
        :param created_user: The created_user of this PackageDTO.
        :param description: The description of this PackageDTO.
        :param end_date: The end_date of this PackageDTO.
        :param expire_in_months: The expire_in_months of this PackageDTO.
        :param features: The features of this PackageDTO.
        :param free_months: The free_months of this PackageDTO.
        :param instructions_to_gym_users: The instructions_to_gym_users of this PackageDTO.
        :param instructions_to_web_users: The instructions_to_web_users of this PackageDTO.
        :param is_active: The is_active of this PackageDTO.
        :param is_atg: The is_atg of this PackageDTO.
        :param is_auto_renew: The is_auto_renew of this PackageDTO.
        :param is_first_month_free: The is_first_month_free of this PackageDTO.
        :param is_registration_fee: The is_registration_fee of this PackageDTO.
        :param is_rest_amount: The is_rest_amount of this PackageDTO.
        :param is_shown_in_mobile: The is_shown_in_mobile of this PackageDTO.
        :param is_sponsor_package: The is_sponsor_package of this PackageDTO.
        :param maximum_give_away_rest_amount: The maximum_give_away_rest_amount of this PackageDTO.
        :param member_can_add_add_ons: The member_can_add_add_ons of this PackageDTO.
        :param member_can_leave_within_free_period: The member_can_leave_within_free_period of this PackageDTO.
        :param member_can_remove_add_ons: The member_can_remove_add_ons of this PackageDTO.
        :param modified_date: The modified_date of this PackageDTO.
        :param modified_user: The modified_user of this PackageDTO.
        :param monthly_fee: The monthly_fee of this PackageDTO.
        :param next_package_number: The next_package_number of this PackageDTO.
        :param number_of_installments: The number_of_installments of this PackageDTO.
        :param number_of_visits: The number_of_visits of this PackageDTO.
        :param package_id: The package_id of this PackageDTO.
        :param package_name: The package_name of this PackageDTO.
        :param package_number: The package_number of this PackageDTO.
        :param package_type: The package_type of this PackageDTO.
        :param per_visit_price: The per_visit_price of this PackageDTO.
        :param registration_fee: The registration_fee of this PackageDTO.
        :param service_fee: The service_fee of this PackageDTO.
        :param shown_in_web: The shown_in_web of this PackageDTO.
        :param start_date: The start_date of this PackageDTO.
        :param tags: The tags of this PackageDTO.
        :param total_price: The total_price of this PackageDTO.
        """
        self.openapi_types = {
            'add_ons': List[PackageItemDTO],
            'addon_fee': float,
            'apply_for_all_gyms': bool,
            'available_gyms': List[GymDTO],
            'binding_period': int,
            'created_date': datetime,
            'created_user': str,
            'description': str,
            'end_date': datetime,
            'expire_in_months': int,
            'features': str,
            'free_months': int,
            'instructions_to_gym_users': str,
            'instructions_to_web_users': str,
            'is_active': bool,
            'is_atg': bool,
            'is_auto_renew': bool,
            'is_first_month_free': bool,
            'is_registration_fee': bool,
            'is_rest_amount': bool,
            'is_shown_in_mobile': bool,
            'is_sponsor_package': bool,
            'maximum_give_away_rest_amount': float,
            'member_can_add_add_ons': bool,
            'member_can_leave_within_free_period': bool,
            'member_can_remove_add_ons': bool,
            'modified_date': datetime,
            'modified_user': str,
            'monthly_fee': float,
            'next_package_number': int,
            'number_of_installments': int,
            'number_of_visits': int,
            'package_id': int,
            'package_name': str,
            'package_number': str,
            'package_type': str,
            'per_visit_price': float,
            'registration_fee': float,
            'service_fee': float,
            'shown_in_web': bool,
            'start_date': datetime,
            'tags': str,
            'total_price': float
        }

        self.attribute_map = {
            'add_ons': 'addOns',
            'addon_fee': 'addonFee',
            'apply_for_all_gyms': 'applyForAllGyms',
            'available_gyms': 'availableGyms',
            'binding_period': 'bindingPeriod',
            'created_date': 'createdDate',
            'created_user': 'createdUser',
            'description': 'description',
            'end_date': 'endDate',
            'expire_in_months': 'expireInMonths',
            'features': 'features',
            'free_months': 'freeMonths',
            'instructions_to_gym_users': 'instructionsToGymUsers',
            'instructions_to_web_users': 'instructionsToWebUsers',
            'is_active': 'isActive',
            'is_atg': 'isAtg',
            'is_auto_renew': 'isAutoRenew',
            'is_first_month_free': 'isFirstMonthFree',
            'is_registration_fee': 'isRegistrationFee',
            'is_rest_amount': 'isRestAmount',
            'is_shown_in_mobile': 'isShownInMobile',
            'is_sponsor_package': 'isSponsorPackage',
            'maximum_give_away_rest_amount': 'maximumGiveAwayRestAmount',
            'member_can_add_add_ons': 'memberCanAddAddOns',
            'member_can_leave_within_free_period': 'memberCanLeaveWithinFreePeriod',
            'member_can_remove_add_ons': 'memberCanRemoveAddOns',
            'modified_date': 'modifiedDate',
            'modified_user': 'modifiedUser',
            'monthly_fee': 'monthlyFee',
            'next_package_number': 'nextPackageNumber',
            'number_of_installments': 'numberOfInstallments',
            'number_of_visits': 'numberOfVisits',
            'package_id': 'packageId',
            'package_name': 'packageName',
            'package_number': 'packageNumber',
            'package_type': 'packageType',
            'per_visit_price': 'perVisitPrice',
            'registration_fee': 'registrationFee',
            'service_fee': 'serviceFee',
            'shown_in_web': 'shownInWeb',
            'start_date': 'startDate',
            'tags': 'tags',
            'total_price': 'totalPrice'
        }

        self._add_ons = add_ons
        self._addon_fee = addon_fee
        self._apply_for_all_gyms = apply_for_all_gyms
        self._available_gyms = available_gyms
        self._binding_period = binding_period
        self._created_date = created_date
        self._created_user = created_user
        self._description = description
        self._end_date = end_date
        self._expire_in_months = expire_in_months
        self._features = features
        self._free_months = free_months
        self._instructions_to_gym_users = instructions_to_gym_users
        self._instructions_to_web_users = instructions_to_web_users
        self._is_active = is_active
        self._is_atg = is_atg
        self._is_auto_renew = is_auto_renew
        self._is_first_month_free = is_first_month_free
        self._is_registration_fee = is_registration_fee
        self._is_rest_amount = is_rest_amount
        self._is_shown_in_mobile = is_shown_in_mobile
        self._is_sponsor_package = is_sponsor_package
        self._maximum_give_away_rest_amount = maximum_give_away_rest_amount
        self._member_can_add_add_ons = member_can_add_add_ons
        self._member_can_leave_within_free_period = member_can_leave_within_free_period
        self._member_can_remove_add_ons = member_can_remove_add_ons
        self._modified_date = modified_date
        self._modified_user = modified_user
        self._monthly_fee = monthly_fee
        self._next_package_number = next_package_number
        self._number_of_installments = number_of_installments
        self._number_of_visits = number_of_visits
        self._package_id = package_id
        self._package_name = package_name
        self._package_number = package_number
        self._package_type = package_type
        self._per_visit_price = per_visit_price
        self._registration_fee = registration_fee
        self._service_fee = service_fee
        self._shown_in_web = shown_in_web
        self._start_date = start_date
        self._tags = tags
        self._total_price = total_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackageDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackageDTO of this PackageDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_ons(self):
        """Gets the add_ons of this PackageDTO.

        Extra articles list added to the given package.             

        :return: The add_ons of this PackageDTO.
        :rtype: List[PackageItemDTO]
        """
        return self._add_ons

    @add_ons.setter
    def add_ons(self, add_ons):
        """Sets the add_ons of this PackageDTO.

        Extra articles list added to the given package.             

        :param add_ons: The add_ons of this PackageDTO.
        :type add_ons: List[PackageItemDTO]
        """

        self._add_ons = add_ons

    @property
    def addon_fee(self):
        """Gets the addon_fee of this PackageDTO.

        sum of addon fees. incoming values for this filed will ignore.             

        :return: The addon_fee of this PackageDTO.
        :rtype: float
        """
        return self._addon_fee

    @addon_fee.setter
    def addon_fee(self, addon_fee):
        """Sets the addon_fee of this PackageDTO.

        sum of addon fees. incoming values for this filed will ignore.             

        :param addon_fee: The addon_fee of this PackageDTO.
        :type addon_fee: float
        """

        self._addon_fee = addon_fee

    @property
    def apply_for_all_gyms(self):
        """Gets the apply_for_all_gyms of this PackageDTO.

        Boolean value to indicate wheather package is available in all the gyms.             

        :return: The apply_for_all_gyms of this PackageDTO.
        :rtype: bool
        """
        return self._apply_for_all_gyms

    @apply_for_all_gyms.setter
    def apply_for_all_gyms(self, apply_for_all_gyms):
        """Sets the apply_for_all_gyms of this PackageDTO.

        Boolean value to indicate wheather package is available in all the gyms.             

        :param apply_for_all_gyms: The apply_for_all_gyms of this PackageDTO.
        :type apply_for_all_gyms: bool
        """

        self._apply_for_all_gyms = apply_for_all_gyms

    @property
    def available_gyms(self):
        """Gets the available_gyms of this PackageDTO.

        Gyms list where this package is available.             

        :return: The available_gyms of this PackageDTO.
        :rtype: List[GymDTO]
        """
        return self._available_gyms

    @available_gyms.setter
    def available_gyms(self, available_gyms):
        """Sets the available_gyms of this PackageDTO.

        Gyms list where this package is available.             

        :param available_gyms: The available_gyms of this PackageDTO.
        :type available_gyms: List[GymDTO]
        """

        self._available_gyms = available_gyms

    @property
    def binding_period(self):
        """Gets the binding_period of this PackageDTO.

        Range of period a member is bound to the contract if he/she choose this package.             

        :return: The binding_period of this PackageDTO.
        :rtype: int
        """
        return self._binding_period

    @binding_period.setter
    def binding_period(self, binding_period):
        """Sets the binding_period of this PackageDTO.

        Range of period a member is bound to the contract if he/she choose this package.             

        :param binding_period: The binding_period of this PackageDTO.
        :type binding_period: int
        """

        self._binding_period = binding_period

    @property
    def created_date(self):
        """Gets the created_date of this PackageDTO.

        Package created DateTime.             

        :return: The created_date of this PackageDTO.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this PackageDTO.

        Package created DateTime.             

        :param created_date: The created_date of this PackageDTO.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def created_user(self):
        """Gets the created_user of this PackageDTO.

        Package created user.             

        :return: The created_user of this PackageDTO.
        :rtype: str
        """
        return self._created_user

    @created_user.setter
    def created_user(self, created_user):
        """Sets the created_user of this PackageDTO.

        Package created user.             

        :param created_user: The created_user of this PackageDTO.
        :type created_user: str
        """

        self._created_user = created_user

    @property
    def description(self):
        """Gets the description of this PackageDTO.

        Common descriptions about package.If there are more instructions               can be stored as comma separated values.             

        :return: The description of this PackageDTO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PackageDTO.

        Common descriptions about package.If there are more instructions               can be stored as comma separated values.             

        :param description: The description of this PackageDTO.
        :type description: str
        """

        self._description = description

    @property
    def end_date(self):
        """Gets the end_date of this PackageDTO.

        End date of the package.After that package is not valid for use.             

        :return: The end_date of this PackageDTO.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PackageDTO.

        End date of the package.After that package is not valid for use.             

        :param end_date: The end_date of this PackageDTO.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def expire_in_months(self):
        """Gets the expire_in_months of this PackageDTO.

        No of months the fixed package is valid for sale             

        :return: The expire_in_months of this PackageDTO.
        :rtype: int
        """
        return self._expire_in_months

    @expire_in_months.setter
    def expire_in_months(self, expire_in_months):
        """Sets the expire_in_months of this PackageDTO.

        No of months the fixed package is valid for sale             

        :param expire_in_months: The expire_in_months of this PackageDTO.
        :type expire_in_months: int
        """

        self._expire_in_months = expire_in_months

    @property
    def features(self):
        """Gets the features of this PackageDTO.

        What are the facilities, features available for package.ex:- wifi, ACm etc.Can be stored as comma seperated values.             

        :return: The features of this PackageDTO.
        :rtype: str
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this PackageDTO.

        What are the facilities, features available for package.ex:- wifi, ACm etc.Can be stored as comma seperated values.             

        :param features: The features of this PackageDTO.
        :type features: str
        """

        self._features = features

    @property
    def free_months(self):
        """Gets the free_months of this PackageDTO.

        No of months gym member can come without payments.             

        :return: The free_months of this PackageDTO.
        :rtype: int
        """
        return self._free_months

    @free_months.setter
    def free_months(self, free_months):
        """Sets the free_months of this PackageDTO.

        No of months gym member can come without payments.             

        :param free_months: The free_months of this PackageDTO.
        :type free_months: int
        """

        self._free_months = free_months

    @property
    def instructions_to_gym_users(self):
        """Gets the instructions_to_gym_users of this PackageDTO.

        Instruction to the gym members relevant to the package.              If there are more instructions can be stored as comma seperated values.             

        :return: The instructions_to_gym_users of this PackageDTO.
        :rtype: str
        """
        return self._instructions_to_gym_users

    @instructions_to_gym_users.setter
    def instructions_to_gym_users(self, instructions_to_gym_users):
        """Sets the instructions_to_gym_users of this PackageDTO.

        Instruction to the gym members relevant to the package.              If there are more instructions can be stored as comma seperated values.             

        :param instructions_to_gym_users: The instructions_to_gym_users of this PackageDTO.
        :type instructions_to_gym_users: str
        """

        self._instructions_to_gym_users = instructions_to_gym_users

    @property
    def instructions_to_web_users(self):
        """Gets the instructions_to_web_users of this PackageDTO.

        Instruction to the MRM members relevant to the package.              If there are more instructions can be stored as comma seperated values.             

        :return: The instructions_to_web_users of this PackageDTO.
        :rtype: str
        """
        return self._instructions_to_web_users

    @instructions_to_web_users.setter
    def instructions_to_web_users(self, instructions_to_web_users):
        """Sets the instructions_to_web_users of this PackageDTO.

        Instruction to the MRM members relevant to the package.              If there are more instructions can be stored as comma seperated values.             

        :param instructions_to_web_users: The instructions_to_web_users of this PackageDTO.
        :type instructions_to_web_users: str
        """

        self._instructions_to_web_users = instructions_to_web_users

    @property
    def is_active(self):
        """Gets the is_active of this PackageDTO.

        Boolean value to indicate this package is still active or not.             

        :return: The is_active of this PackageDTO.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this PackageDTO.

        Boolean value to indicate this package is still active or not.             

        :param is_active: The is_active of this PackageDTO.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_atg(self):
        """Gets the is_atg of this PackageDTO.

        Boolean value to indicate ATG transaction from bank is applicable or not.             

        :return: The is_atg of this PackageDTO.
        :rtype: bool
        """
        return self._is_atg

    @is_atg.setter
    def is_atg(self, is_atg):
        """Sets the is_atg of this PackageDTO.

        Boolean value to indicate ATG transaction from bank is applicable or not.             

        :param is_atg: The is_atg of this PackageDTO.
        :type is_atg: bool
        """

        self._is_atg = is_atg

    @property
    def is_auto_renew(self):
        """Gets the is_auto_renew of this PackageDTO.

        Boolean value to indicate the contract will auto renew after expiration               if this package would be chosen.             

        :return: The is_auto_renew of this PackageDTO.
        :rtype: bool
        """
        return self._is_auto_renew

    @is_auto_renew.setter
    def is_auto_renew(self, is_auto_renew):
        """Sets the is_auto_renew of this PackageDTO.

        Boolean value to indicate the contract will auto renew after expiration               if this package would be chosen.             

        :param is_auto_renew: The is_auto_renew of this PackageDTO.
        :type is_auto_renew: bool
        """

        self._is_auto_renew = is_auto_renew

    @property
    def is_first_month_free(self):
        """Gets the is_first_month_free of this PackageDTO.

        Boolean value to indicate if the first month charges is free.             

        :return: The is_first_month_free of this PackageDTO.
        :rtype: bool
        """
        return self._is_first_month_free

    @is_first_month_free.setter
    def is_first_month_free(self, is_first_month_free):
        """Sets the is_first_month_free of this PackageDTO.

        Boolean value to indicate if the first month charges is free.             

        :param is_first_month_free: The is_first_month_free of this PackageDTO.
        :type is_first_month_free: bool
        """

        self._is_first_month_free = is_first_month_free

    @property
    def is_registration_fee(self):
        """Gets the is_registration_fee of this PackageDTO.

        Boolean value to indicate this package has registration fee or not.             

        :return: The is_registration_fee of this PackageDTO.
        :rtype: bool
        """
        return self._is_registration_fee

    @is_registration_fee.setter
    def is_registration_fee(self, is_registration_fee):
        """Sets the is_registration_fee of this PackageDTO.

        Boolean value to indicate this package has registration fee or not.             

        :param is_registration_fee: The is_registration_fee of this PackageDTO.
        :type is_registration_fee: bool
        """

        self._is_registration_fee = is_registration_fee

    @property
    def is_rest_amount(self):
        """Gets the is_rest_amount of this PackageDTO.

        Boolean value to indicate rest amount is applicable or not.             

        :return: The is_rest_amount of this PackageDTO.
        :rtype: bool
        """
        return self._is_rest_amount

    @is_rest_amount.setter
    def is_rest_amount(self, is_rest_amount):
        """Sets the is_rest_amount of this PackageDTO.

        Boolean value to indicate rest amount is applicable or not.             

        :param is_rest_amount: The is_rest_amount of this PackageDTO.
        :type is_rest_amount: bool
        """

        self._is_rest_amount = is_rest_amount

    @property
    def is_shown_in_mobile(self):
        """Gets the is_shown_in_mobile of this PackageDTO.

        Boolean value to indicate package is visible in Mobile App or not.             

        :return: The is_shown_in_mobile of this PackageDTO.
        :rtype: bool
        """
        return self._is_shown_in_mobile

    @is_shown_in_mobile.setter
    def is_shown_in_mobile(self, is_shown_in_mobile):
        """Sets the is_shown_in_mobile of this PackageDTO.

        Boolean value to indicate package is visible in Mobile App or not.             

        :param is_shown_in_mobile: The is_shown_in_mobile of this PackageDTO.
        :type is_shown_in_mobile: bool
        """

        self._is_shown_in_mobile = is_shown_in_mobile

    @property
    def is_sponsor_package(self):
        """Gets the is_sponsor_package of this PackageDTO.

        Boolean value to indicate package can be sponsored or not by other party.             

        :return: The is_sponsor_package of this PackageDTO.
        :rtype: bool
        """
        return self._is_sponsor_package

    @is_sponsor_package.setter
    def is_sponsor_package(self, is_sponsor_package):
        """Sets the is_sponsor_package of this PackageDTO.

        Boolean value to indicate package can be sponsored or not by other party.             

        :param is_sponsor_package: The is_sponsor_package of this PackageDTO.
        :type is_sponsor_package: bool
        """

        self._is_sponsor_package = is_sponsor_package

    @property
    def maximum_give_away_rest_amount(self):
        """Gets the maximum_give_away_rest_amount of this PackageDTO.

        If a member join the gym middle of a month via this package,               what is the maximum amount of price can be neglected from payment from the member.             

        :return: The maximum_give_away_rest_amount of this PackageDTO.
        :rtype: float
        """
        return self._maximum_give_away_rest_amount

    @maximum_give_away_rest_amount.setter
    def maximum_give_away_rest_amount(self, maximum_give_away_rest_amount):
        """Sets the maximum_give_away_rest_amount of this PackageDTO.

        If a member join the gym middle of a month via this package,               what is the maximum amount of price can be neglected from payment from the member.             

        :param maximum_give_away_rest_amount: The maximum_give_away_rest_amount of this PackageDTO.
        :type maximum_give_away_rest_amount: float
        """

        self._maximum_give_away_rest_amount = maximum_give_away_rest_amount

    @property
    def member_can_add_add_ons(self):
        """Gets the member_can_add_add_ons of this PackageDTO.

        Boolean value to indicate member can add extra addons he wish if he choose this package.             

        :return: The member_can_add_add_ons of this PackageDTO.
        :rtype: bool
        """
        return self._member_can_add_add_ons

    @member_can_add_add_ons.setter
    def member_can_add_add_ons(self, member_can_add_add_ons):
        """Sets the member_can_add_add_ons of this PackageDTO.

        Boolean value to indicate member can add extra addons he wish if he choose this package.             

        :param member_can_add_add_ons: The member_can_add_add_ons of this PackageDTO.
        :type member_can_add_add_ons: bool
        """

        self._member_can_add_add_ons = member_can_add_add_ons

    @property
    def member_can_leave_within_free_period(self):
        """Gets the member_can_leave_within_free_period of this PackageDTO.

        Boolean value to indicate if member can leave from contract within               free period if he/she choose this package.             

        :return: The member_can_leave_within_free_period of this PackageDTO.
        :rtype: bool
        """
        return self._member_can_leave_within_free_period

    @member_can_leave_within_free_period.setter
    def member_can_leave_within_free_period(self, member_can_leave_within_free_period):
        """Sets the member_can_leave_within_free_period of this PackageDTO.

        Boolean value to indicate if member can leave from contract within               free period if he/she choose this package.             

        :param member_can_leave_within_free_period: The member_can_leave_within_free_period of this PackageDTO.
        :type member_can_leave_within_free_period: bool
        """

        self._member_can_leave_within_free_period = member_can_leave_within_free_period

    @property
    def member_can_remove_add_ons(self):
        """Gets the member_can_remove_add_ons of this PackageDTO.

        Boolean value to indicate member can remove already added addons if he choose this package.             

        :return: The member_can_remove_add_ons of this PackageDTO.
        :rtype: bool
        """
        return self._member_can_remove_add_ons

    @member_can_remove_add_ons.setter
    def member_can_remove_add_ons(self, member_can_remove_add_ons):
        """Sets the member_can_remove_add_ons of this PackageDTO.

        Boolean value to indicate member can remove already added addons if he choose this package.             

        :param member_can_remove_add_ons: The member_can_remove_add_ons of this PackageDTO.
        :type member_can_remove_add_ons: bool
        """

        self._member_can_remove_add_ons = member_can_remove_add_ons

    @property
    def modified_date(self):
        """Gets the modified_date of this PackageDTO.

        Package last modified DateTime.             

        :return: The modified_date of this PackageDTO.
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this PackageDTO.

        Package last modified DateTime.             

        :param modified_date: The modified_date of this PackageDTO.
        :type modified_date: datetime
        """

        self._modified_date = modified_date

    @property
    def modified_user(self):
        """Gets the modified_user of this PackageDTO.

        Package last modified user.             

        :return: The modified_user of this PackageDTO.
        :rtype: str
        """
        return self._modified_user

    @modified_user.setter
    def modified_user(self, modified_user):
        """Sets the modified_user of this PackageDTO.

        Package last modified user.             

        :param modified_user: The modified_user of this PackageDTO.
        :type modified_user: str
        """

        self._modified_user = modified_user

    @property
    def monthly_fee(self):
        """Gets the monthly_fee of this PackageDTO.

        Monthly installment fee if package is not fixed visit. addition of the servicefee and addon fees divided by binding period.              read only             

        :return: The monthly_fee of this PackageDTO.
        :rtype: float
        """
        return self._monthly_fee

    @monthly_fee.setter
    def monthly_fee(self, monthly_fee):
        """Sets the monthly_fee of this PackageDTO.

        Monthly installment fee if package is not fixed visit. addition of the servicefee and addon fees divided by binding period.              read only             

        :param monthly_fee: The monthly_fee of this PackageDTO.
        :type monthly_fee: float
        """

        self._monthly_fee = monthly_fee

    @property
    def next_package_number(self):
        """Gets the next_package_number of this PackageDTO.

        Next Package the contract continue after the binding period of this package.             

        :return: The next_package_number of this PackageDTO.
        :rtype: int
        """
        return self._next_package_number

    @next_package_number.setter
    def next_package_number(self, next_package_number):
        """Sets the next_package_number of this PackageDTO.

        Next Package the contract continue after the binding period of this package.             

        :param next_package_number: The next_package_number of this PackageDTO.
        :type next_package_number: int
        """

        self._next_package_number = next_package_number

    @property
    def number_of_installments(self):
        """Gets the number_of_installments of this PackageDTO.

        Maximum Number of installment a member can divide the package price/cost to pay.             

        :return: The number_of_installments of this PackageDTO.
        :rtype: int
        """
        return self._number_of_installments

    @number_of_installments.setter
    def number_of_installments(self, number_of_installments):
        """Sets the number_of_installments of this PackageDTO.

        Maximum Number of installment a member can divide the package price/cost to pay.             

        :param number_of_installments: The number_of_installments of this PackageDTO.
        :type number_of_installments: int
        """

        self._number_of_installments = number_of_installments

    @property
    def number_of_visits(self):
        """Gets the number_of_visits of this PackageDTO.

        If package is fixed visit type, then how many visits are available for this package.             

        :return: The number_of_visits of this PackageDTO.
        :rtype: int
        """
        return self._number_of_visits

    @number_of_visits.setter
    def number_of_visits(self, number_of_visits):
        """Sets the number_of_visits of this PackageDTO.

        If package is fixed visit type, then how many visits are available for this package.             

        :param number_of_visits: The number_of_visits of this PackageDTO.
        :type number_of_visits: int
        """

        self._number_of_visits = number_of_visits

    @property
    def package_id(self):
        """Gets the package_id of this PackageDTO.


        :return: The package_id of this PackageDTO.
        :rtype: int
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this PackageDTO.


        :param package_id: The package_id of this PackageDTO.
        :type package_id: int
        """

        self._package_id = package_id

    @property
    def package_name(self):
        """Gets the package_name of this PackageDTO.


        :return: The package_name of this PackageDTO.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this PackageDTO.


        :param package_name: The package_name of this PackageDTO.
        :type package_name: str
        """
        if package_name is None:
            raise ValueError("Invalid value for `package_name`, must not be `None`")
        if package_name is not None and len(package_name) < 1:
            raise ValueError("Invalid value for `package_name`, length must be greater than or equal to `1`")

        self._package_name = package_name

    @property
    def package_number(self):
        """Gets the package_number of this PackageDTO.


        :return: The package_number of this PackageDTO.
        :rtype: str
        """
        return self._package_number

    @package_number.setter
    def package_number(self, package_number):
        """Sets the package_number of this PackageDTO.


        :param package_number: The package_number of this PackageDTO.
        :type package_number: str
        """

        self._package_number = package_number

    @property
    def package_type(self):
        """Gets the package_type of this PackageDTO.

        Package type can be either fixed visit or unlimited.             

        :return: The package_type of this PackageDTO.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this PackageDTO.

        Package type can be either fixed visit or unlimited.             

        :param package_type: The package_type of this PackageDTO.
        :type package_type: str
        """
        if package_type is None:
            raise ValueError("Invalid value for `package_type`, must not be `None`")
        if package_type is not None and len(package_type) < 1:
            raise ValueError("Invalid value for `package_type`, length must be greater than or equal to `1`")
        if package_type is not None and not re.search(r'fixedvisit|unlimited', package_type):
            raise ValueError("Invalid value for `package_type`, must be a follow pattern or equal to `/fixedvisit|unlimited/`")

        self._package_type = package_type

    @property
    def per_visit_price(self):
        """Gets the per_visit_price of this PackageDTO.

        Cost/Price of the single visit to gym.             

        :return: The per_visit_price of this PackageDTO.
        :rtype: float
        """
        return self._per_visit_price

    @per_visit_price.setter
    def per_visit_price(self, per_visit_price):
        """Sets the per_visit_price of this PackageDTO.

        Cost/Price of the single visit to gym.             

        :param per_visit_price: The per_visit_price of this PackageDTO.
        :type per_visit_price: float
        """

        self._per_visit_price = per_visit_price

    @property
    def registration_fee(self):
        """Gets the registration_fee of this PackageDTO.

        Registartion fee for the package at a gym.              read only             

        :return: The registration_fee of this PackageDTO.
        :rtype: float
        """
        return self._registration_fee

    @registration_fee.setter
    def registration_fee(self, registration_fee):
        """Sets the registration_fee of this PackageDTO.

        Registartion fee for the package at a gym.              read only             

        :param registration_fee: The registration_fee of this PackageDTO.
        :type registration_fee: float
        """
        if registration_fee is None:
            raise ValueError("Invalid value for `registration_fee`, must not be `None`")

        self._registration_fee = registration_fee

    @property
    def service_fee(self):
        """Gets the service_fee of this PackageDTO.

        total Service charge of the package for entire period.             

        :return: The service_fee of this PackageDTO.
        :rtype: float
        """
        return self._service_fee

    @service_fee.setter
    def service_fee(self, service_fee):
        """Sets the service_fee of this PackageDTO.

        total Service charge of the package for entire period.             

        :param service_fee: The service_fee of this PackageDTO.
        :type service_fee: float
        """
        if service_fee is None:
            raise ValueError("Invalid value for `service_fee`, must not be `None`")

        self._service_fee = service_fee

    @property
    def shown_in_web(self):
        """Gets the shown_in_web of this PackageDTO.

        Boolean value to show this package in MRM system or not.             

        :return: The shown_in_web of this PackageDTO.
        :rtype: bool
        """
        return self._shown_in_web

    @shown_in_web.setter
    def shown_in_web(self, shown_in_web):
        """Sets the shown_in_web of this PackageDTO.

        Boolean value to show this package in MRM system or not.             

        :param shown_in_web: The shown_in_web of this PackageDTO.
        :type shown_in_web: bool
        """

        self._shown_in_web = shown_in_web

    @property
    def start_date(self):
        """Gets the start_date of this PackageDTO.

        Start date of the package.             

        :return: The start_date of this PackageDTO.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PackageDTO.

        Start date of the package.             

        :param start_date: The start_date of this PackageDTO.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def tags(self):
        """Gets the tags of this PackageDTO.

        Comma separated string values in case of need of maintain some labels kind of               stuff relevant to the package.             

        :return: The tags of this PackageDTO.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PackageDTO.

        Comma separated string values in case of need of maintain some labels kind of               stuff relevant to the package.             

        :param tags: The tags of this PackageDTO.
        :type tags: str
        """

        self._tags = tags

    @property
    def total_price(self):
        """Gets the total_price of this PackageDTO.

        total price for the package including Addon fees, service fee and registration fee. incoming values for this field will ignore.             

        :return: The total_price of this PackageDTO.
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this PackageDTO.

        total price for the package including Addon fees, service fee and registration fee. incoming values for this field will ignore.             

        :param total_price: The total_price of this PackageDTO.
        :type total_price: float
        """

        self._total_price = total_price
