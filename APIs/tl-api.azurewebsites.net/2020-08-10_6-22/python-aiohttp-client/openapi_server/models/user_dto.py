# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, external_entity_number: str=None, guardian: int=None, gym_number: str=None, introduce_by: int=None, name: str=None, number: str=None, type_id: int=None, user_id: int=None):
        """UserDTO - a model defined in OpenAPI

        :param account_number: The account_number of this UserDTO.
        :param external_entity_number: The external_entity_number of this UserDTO.
        :param guardian: The guardian of this UserDTO.
        :param gym_number: The gym_number of this UserDTO.
        :param introduce_by: The introduce_by of this UserDTO.
        :param name: The name of this UserDTO.
        :param number: The number of this UserDTO.
        :param type_id: The type_id of this UserDTO.
        :param user_id: The user_id of this UserDTO.
        """
        self.openapi_types = {
            'account_number': str,
            'external_entity_number': str,
            'guardian': int,
            'gym_number': str,
            'introduce_by': int,
            'name': str,
            'number': str,
            'type_id': int,
            'user_id': int
        }

        self.attribute_map = {
            'account_number': 'accountNumber',
            'external_entity_number': 'externalEntityNumber',
            'guardian': 'guardian',
            'gym_number': 'gymNumber',
            'introduce_by': 'introduceBy',
            'name': 'name',
            'number': 'number',
            'type_id': 'typeId',
            'user_id': 'userId'
        }

        self._account_number = account_number
        self._external_entity_number = external_entity_number
        self._guardian = guardian
        self._gym_number = gym_number
        self._introduce_by = introduce_by
        self._name = name
        self._number = number
        self._type_id = type_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserDTO of this UserDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this UserDTO.

        Account number of the user.It can be any stakeholder of the application.even can be a gym.             

        :return: The account_number of this UserDTO.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this UserDTO.

        Account number of the user.It can be any stakeholder of the application.even can be a gym.             

        :param account_number: The account_number of this UserDTO.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def external_entity_number(self):
        """Gets the external_entity_number of this UserDTO.

        Entity number that make a relationship with BOX API DB.             

        :return: The external_entity_number of this UserDTO.
        :rtype: str
        """
        return self._external_entity_number

    @external_entity_number.setter
    def external_entity_number(self, external_entity_number):
        """Sets the external_entity_number of this UserDTO.

        Entity number that make a relationship with BOX API DB.             

        :param external_entity_number: The external_entity_number of this UserDTO.
        :type external_entity_number: str
        """

        self._external_entity_number = external_entity_number

    @property
    def guardian(self):
        """Gets the guardian of this UserDTO.

        Gaurdian of the this user if he/she is under 18 years old.             

        :return: The guardian of this UserDTO.
        :rtype: int
        """
        return self._guardian

    @guardian.setter
    def guardian(self, guardian):
        """Sets the guardian of this UserDTO.

        Gaurdian of the this user if he/she is under 18 years old.             

        :param guardian: The guardian of this UserDTO.
        :type guardian: int
        """

        self._guardian = guardian

    @property
    def gym_number(self):
        """Gets the gym_number of this UserDTO.

        If this user is a gym, then the gym number.             

        :return: The gym_number of this UserDTO.
        :rtype: str
        """
        return self._gym_number

    @gym_number.setter
    def gym_number(self, gym_number):
        """Sets the gym_number of this UserDTO.

        If this user is a gym, then the gym number.             

        :param gym_number: The gym_number of this UserDTO.
        :type gym_number: str
        """

        self._gym_number = gym_number

    @property
    def introduce_by(self):
        """Gets the introduce_by of this UserDTO.

        If Someone introduced this user to the system, then that user's UserId.             

        :return: The introduce_by of this UserDTO.
        :rtype: int
        """
        return self._introduce_by

    @introduce_by.setter
    def introduce_by(self, introduce_by):
        """Sets the introduce_by of this UserDTO.

        If Someone introduced this user to the system, then that user's UserId.             

        :param introduce_by: The introduce_by of this UserDTO.
        :type introduce_by: int
        """

        self._introduce_by = introduce_by

    @property
    def name(self):
        """Gets the name of this UserDTO.

        Name of the user.             

        :return: The name of this UserDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserDTO.

        Name of the user.             

        :param name: The name of this UserDTO.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this UserDTO.

        Unique number maintain by application to idenify user.             

        :return: The number of this UserDTO.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this UserDTO.

        Unique number maintain by application to idenify user.             

        :param number: The number of this UserDTO.
        :type number: str
        """

        self._number = number

    @property
    def type_id(self):
        """Gets the type_id of this UserDTO.

        Type of the user.             

        :return: The type_id of this UserDTO.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this UserDTO.

        Type of the user.             

        :param type_id: The type_id of this UserDTO.
        :type type_id: int
        """

        self._type_id = type_id

    @property
    def user_id(self):
        """Gets the user_id of this UserDTO.

        Indentity number(primary key) for user object. Generated in DB table when inserting a record.             

        :return: The user_id of this UserDTO.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserDTO.

        Indentity number(primary key) for user object. Generated in DB table when inserting a record.             

        :param user_id: The user_id of this UserDTO.
        :type user_id: int
        """

        self._user_id = user_id
