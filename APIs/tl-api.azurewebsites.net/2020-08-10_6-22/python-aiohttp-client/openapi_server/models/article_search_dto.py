# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArticleSearchDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_status: bool=None, apply_for_all_gyms: bool=None, article_id: int=None, created_date: datetime=None, created_user: str=None, description: str=None, measure_unit: str=None, modified_date: datetime=None, modified_user: str=None, name: str=None, number: int=None, price: float=None, selling_price: float=None, tags: str=None, total_count: int=None, type: str=None):
        """ArticleSearchDTO - a model defined in OpenAPI

        :param active_status: The active_status of this ArticleSearchDTO.
        :param apply_for_all_gyms: The apply_for_all_gyms of this ArticleSearchDTO.
        :param article_id: The article_id of this ArticleSearchDTO.
        :param created_date: The created_date of this ArticleSearchDTO.
        :param created_user: The created_user of this ArticleSearchDTO.
        :param description: The description of this ArticleSearchDTO.
        :param measure_unit: The measure_unit of this ArticleSearchDTO.
        :param modified_date: The modified_date of this ArticleSearchDTO.
        :param modified_user: The modified_user of this ArticleSearchDTO.
        :param name: The name of this ArticleSearchDTO.
        :param number: The number of this ArticleSearchDTO.
        :param price: The price of this ArticleSearchDTO.
        :param selling_price: The selling_price of this ArticleSearchDTO.
        :param tags: The tags of this ArticleSearchDTO.
        :param total_count: The total_count of this ArticleSearchDTO.
        :param type: The type of this ArticleSearchDTO.
        """
        self.openapi_types = {
            'active_status': bool,
            'apply_for_all_gyms': bool,
            'article_id': int,
            'created_date': datetime,
            'created_user': str,
            'description': str,
            'measure_unit': str,
            'modified_date': datetime,
            'modified_user': str,
            'name': str,
            'number': int,
            'price': float,
            'selling_price': float,
            'tags': str,
            'total_count': int,
            'type': str
        }

        self.attribute_map = {
            'active_status': 'activeStatus',
            'apply_for_all_gyms': 'applyForAllGyms',
            'article_id': 'articleId',
            'created_date': 'createdDate',
            'created_user': 'createdUser',
            'description': 'description',
            'measure_unit': 'measureUnit',
            'modified_date': 'modifiedDate',
            'modified_user': 'modifiedUser',
            'name': 'name',
            'number': 'number',
            'price': 'price',
            'selling_price': 'sellingPrice',
            'tags': 'tags',
            'total_count': 'totalCount',
            'type': 'type'
        }

        self._active_status = active_status
        self._apply_for_all_gyms = apply_for_all_gyms
        self._article_id = article_id
        self._created_date = created_date
        self._created_user = created_user
        self._description = description
        self._measure_unit = measure_unit
        self._modified_date = modified_date
        self._modified_user = modified_user
        self._name = name
        self._number = number
        self._price = price
        self._selling_price = selling_price
        self._tags = tags
        self._total_count = total_count
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArticleSearchDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArticleSearchDTO of this ArticleSearchDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_status(self):
        """Gets the active_status of this ArticleSearchDTO.

        Active Status 

        :return: The active_status of this ArticleSearchDTO.
        :rtype: bool
        """
        return self._active_status

    @active_status.setter
    def active_status(self, active_status):
        """Sets the active_status of this ArticleSearchDTO.

        Active Status 

        :param active_status: The active_status of this ArticleSearchDTO.
        :type active_status: bool
        """

        self._active_status = active_status

    @property
    def apply_for_all_gyms(self):
        """Gets the apply_for_all_gyms of this ArticleSearchDTO.


        :return: The apply_for_all_gyms of this ArticleSearchDTO.
        :rtype: bool
        """
        return self._apply_for_all_gyms

    @apply_for_all_gyms.setter
    def apply_for_all_gyms(self, apply_for_all_gyms):
        """Sets the apply_for_all_gyms of this ArticleSearchDTO.


        :param apply_for_all_gyms: The apply_for_all_gyms of this ArticleSearchDTO.
        :type apply_for_all_gyms: bool
        """

        self._apply_for_all_gyms = apply_for_all_gyms

    @property
    def article_id(self):
        """Gets the article_id of this ArticleSearchDTO.


        :return: The article_id of this ArticleSearchDTO.
        :rtype: int
        """
        return self._article_id

    @article_id.setter
    def article_id(self, article_id):
        """Sets the article_id of this ArticleSearchDTO.


        :param article_id: The article_id of this ArticleSearchDTO.
        :type article_id: int
        """

        self._article_id = article_id

    @property
    def created_date(self):
        """Gets the created_date of this ArticleSearchDTO.


        :return: The created_date of this ArticleSearchDTO.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ArticleSearchDTO.


        :param created_date: The created_date of this ArticleSearchDTO.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def created_user(self):
        """Gets the created_user of this ArticleSearchDTO.


        :return: The created_user of this ArticleSearchDTO.
        :rtype: str
        """
        return self._created_user

    @created_user.setter
    def created_user(self, created_user):
        """Sets the created_user of this ArticleSearchDTO.


        :param created_user: The created_user of this ArticleSearchDTO.
        :type created_user: str
        """

        self._created_user = created_user

    @property
    def description(self):
        """Gets the description of this ArticleSearchDTO.


        :return: The description of this ArticleSearchDTO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ArticleSearchDTO.


        :param description: The description of this ArticleSearchDTO.
        :type description: str
        """

        self._description = description

    @property
    def measure_unit(self):
        """Gets the measure_unit of this ArticleSearchDTO.

        MeasureUnit 

        :return: The measure_unit of this ArticleSearchDTO.
        :rtype: str
        """
        return self._measure_unit

    @measure_unit.setter
    def measure_unit(self, measure_unit):
        """Sets the measure_unit of this ArticleSearchDTO.

        MeasureUnit 

        :param measure_unit: The measure_unit of this ArticleSearchDTO.
        :type measure_unit: str
        """

        self._measure_unit = measure_unit

    @property
    def modified_date(self):
        """Gets the modified_date of this ArticleSearchDTO.


        :return: The modified_date of this ArticleSearchDTO.
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this ArticleSearchDTO.


        :param modified_date: The modified_date of this ArticleSearchDTO.
        :type modified_date: datetime
        """

        self._modified_date = modified_date

    @property
    def modified_user(self):
        """Gets the modified_user of this ArticleSearchDTO.


        :return: The modified_user of this ArticleSearchDTO.
        :rtype: str
        """
        return self._modified_user

    @modified_user.setter
    def modified_user(self, modified_user):
        """Sets the modified_user of this ArticleSearchDTO.


        :param modified_user: The modified_user of this ArticleSearchDTO.
        :type modified_user: str
        """

        self._modified_user = modified_user

    @property
    def name(self):
        """Gets the name of this ArticleSearchDTO.


        :return: The name of this ArticleSearchDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArticleSearchDTO.


        :param name: The name of this ArticleSearchDTO.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this ArticleSearchDTO.


        :return: The number of this ArticleSearchDTO.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ArticleSearchDTO.


        :param number: The number of this ArticleSearchDTO.
        :type number: int
        """

        self._number = number

    @property
    def price(self):
        """Gets the price of this ArticleSearchDTO.


        :return: The price of this ArticleSearchDTO.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ArticleSearchDTO.


        :param price: The price of this ArticleSearchDTO.
        :type price: float
        """

        self._price = price

    @property
    def selling_price(self):
        """Gets the selling_price of this ArticleSearchDTO.

        Actual Selling price of the article 

        :return: The selling_price of this ArticleSearchDTO.
        :rtype: float
        """
        return self._selling_price

    @selling_price.setter
    def selling_price(self, selling_price):
        """Sets the selling_price of this ArticleSearchDTO.

        Actual Selling price of the article 

        :param selling_price: The selling_price of this ArticleSearchDTO.
        :type selling_price: float
        """

        self._selling_price = selling_price

    @property
    def tags(self):
        """Gets the tags of this ArticleSearchDTO.


        :return: The tags of this ArticleSearchDTO.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ArticleSearchDTO.


        :param tags: The tags of this ArticleSearchDTO.
        :type tags: str
        """

        self._tags = tags

    @property
    def total_count(self):
        """Gets the total_count of this ArticleSearchDTO.

        total number of recode for particular search 

        :return: The total_count of this ArticleSearchDTO.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ArticleSearchDTO.

        total number of recode for particular search 

        :param total_count: The total_count of this ArticleSearchDTO.
        :type total_count: int
        """

        self._total_count = total_count

    @property
    def type(self):
        """Gets the type of this ArticleSearchDTO.

        article type

        :return: The type of this ArticleSearchDTO.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ArticleSearchDTO.

        article type

        :param type: The type of this ArticleSearchDTO.
        :type type: str
        """

        self._type = type
