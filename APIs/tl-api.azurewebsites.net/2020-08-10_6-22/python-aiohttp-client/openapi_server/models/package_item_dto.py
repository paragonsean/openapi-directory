# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PackageItemDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, article_id: int=None, article_name: str=None, article_number: int=None, article_price: float=None, end_order: int=None, is_include_service_in_charge: bool=None, measure_unit: str=None, number_of_items: float=None, start_order: int=None):
        """PackageItemDTO - a model defined in OpenAPI

        :param article_id: The article_id of this PackageItemDTO.
        :param article_name: The article_name of this PackageItemDTO.
        :param article_number: The article_number of this PackageItemDTO.
        :param article_price: The article_price of this PackageItemDTO.
        :param end_order: The end_order of this PackageItemDTO.
        :param is_include_service_in_charge: The is_include_service_in_charge of this PackageItemDTO.
        :param measure_unit: The measure_unit of this PackageItemDTO.
        :param number_of_items: The number_of_items of this PackageItemDTO.
        :param start_order: The start_order of this PackageItemDTO.
        """
        self.openapi_types = {
            'article_id': int,
            'article_name': str,
            'article_number': int,
            'article_price': float,
            'end_order': int,
            'is_include_service_in_charge': bool,
            'measure_unit': str,
            'number_of_items': float,
            'start_order': int
        }

        self.attribute_map = {
            'article_id': 'articleId',
            'article_name': 'articleName',
            'article_number': 'articleNumber',
            'article_price': 'articlePrice',
            'end_order': 'endOrder',
            'is_include_service_in_charge': 'isIncludeServiceInCharge',
            'measure_unit': 'measureUnit',
            'number_of_items': 'numberOfItems',
            'start_order': 'startOrder'
        }

        self._article_id = article_id
        self._article_name = article_name
        self._article_number = article_number
        self._article_price = article_price
        self._end_order = end_order
        self._is_include_service_in_charge = is_include_service_in_charge
        self._measure_unit = measure_unit
        self._number_of_items = number_of_items
        self._start_order = start_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackageItemDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackageItemDTO of this PackageItemDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def article_id(self):
        """Gets the article_id of this PackageItemDTO.

        Refer to ArticleId in Article table in DB.             

        :return: The article_id of this PackageItemDTO.
        :rtype: int
        """
        return self._article_id

    @article_id.setter
    def article_id(self, article_id):
        """Sets the article_id of this PackageItemDTO.

        Refer to ArticleId in Article table in DB.             

        :param article_id: The article_id of this PackageItemDTO.
        :type article_id: int
        """
        if article_id is None:
            raise ValueError("Invalid value for `article_id`, must not be `None`")

        self._article_id = article_id

    @property
    def article_name(self):
        """Gets the article_name of this PackageItemDTO.

        Name of the article(Addon) in a particular package.              read only             

        :return: The article_name of this PackageItemDTO.
        :rtype: str
        """
        return self._article_name

    @article_name.setter
    def article_name(self, article_name):
        """Sets the article_name of this PackageItemDTO.

        Name of the article(Addon) in a particular package.              read only             

        :param article_name: The article_name of this PackageItemDTO.
        :type article_name: str
        """

        self._article_name = article_name

    @property
    def article_number(self):
        """Gets the article_number of this PackageItemDTO.

        Number assigned the article(Addon) in a particular package.              read only             

        :return: The article_number of this PackageItemDTO.
        :rtype: int
        """
        return self._article_number

    @article_number.setter
    def article_number(self, article_number):
        """Sets the article_number of this PackageItemDTO.

        Number assigned the article(Addon) in a particular package.              read only             

        :param article_number: The article_number of this PackageItemDTO.
        :type article_number: int
        """

        self._article_number = article_number

    @property
    def article_price(self):
        """Gets the article_price of this PackageItemDTO.

        Price of the article determined from that package. Price of a same article can be varied from package to package.             

        :return: The article_price of this PackageItemDTO.
        :rtype: float
        """
        return self._article_price

    @article_price.setter
    def article_price(self, article_price):
        """Sets the article_price of this PackageItemDTO.

        Price of the article determined from that package. Price of a same article can be varied from package to package.             

        :param article_price: The article_price of this PackageItemDTO.
        :type article_price: float
        """

        self._article_price = article_price

    @property
    def end_order(self):
        """Gets the end_order of this PackageItemDTO.

        Number of the installment this article is available to.             

        :return: The end_order of this PackageItemDTO.
        :rtype: int
        """
        return self._end_order

    @end_order.setter
    def end_order(self, end_order):
        """Sets the end_order of this PackageItemDTO.

        Number of the installment this article is available to.             

        :param end_order: The end_order of this PackageItemDTO.
        :type end_order: int
        """

        self._end_order = end_order

    @property
    def is_include_service_in_charge(self):
        """Gets the is_include_service_in_charge of this PackageItemDTO.

        Is Included in service charge 

        :return: The is_include_service_in_charge of this PackageItemDTO.
        :rtype: bool
        """
        return self._is_include_service_in_charge

    @is_include_service_in_charge.setter
    def is_include_service_in_charge(self, is_include_service_in_charge):
        """Sets the is_include_service_in_charge of this PackageItemDTO.

        Is Included in service charge 

        :param is_include_service_in_charge: The is_include_service_in_charge of this PackageItemDTO.
        :type is_include_service_in_charge: bool
        """

        self._is_include_service_in_charge = is_include_service_in_charge

    @property
    def measure_unit(self):
        """Gets the measure_unit of this PackageItemDTO.


        :return: The measure_unit of this PackageItemDTO.
        :rtype: str
        """
        return self._measure_unit

    @measure_unit.setter
    def measure_unit(self, measure_unit):
        """Sets the measure_unit of this PackageItemDTO.


        :param measure_unit: The measure_unit of this PackageItemDTO.
        :type measure_unit: str
        """

        self._measure_unit = measure_unit

    @property
    def number_of_items(self):
        """Gets the number_of_items of this PackageItemDTO.

        How many article(Addon) is available for that package from that type.             

        :return: The number_of_items of this PackageItemDTO.
        :rtype: float
        """
        return self._number_of_items

    @number_of_items.setter
    def number_of_items(self, number_of_items):
        """Sets the number_of_items of this PackageItemDTO.

        How many article(Addon) is available for that package from that type.             

        :param number_of_items: The number_of_items of this PackageItemDTO.
        :type number_of_items: float
        """

        self._number_of_items = number_of_items

    @property
    def start_order(self):
        """Gets the start_order of this PackageItemDTO.

        Number of the installment this article is available from.             

        :return: The start_order of this PackageItemDTO.
        :rtype: int
        """
        return self._start_order

    @start_order.setter
    def start_order(self, start_order):
        """Sets the start_order of this PackageItemDTO.

        Number of the installment this article is available from.             

        :param start_order: The start_order of this PackageItemDTO.
        :type start_order: int
        """

        self._start_order = start_order
