# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exception_inner_exception import ExceptionInnerException
from openapi_server import util


class Exception(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inner_exception: ExceptionInnerException=None, message: str=None, source: str=None, stack_trace: str=None):
        """Exception - a model defined in OpenAPI

        :param inner_exception: The inner_exception of this Exception.
        :param message: The message of this Exception.
        :param source: The source of this Exception.
        :param stack_trace: The stack_trace of this Exception.
        """
        self.openapi_types = {
            'inner_exception': ExceptionInnerException,
            'message': str,
            'source': str,
            'stack_trace': str
        }

        self.attribute_map = {
            'inner_exception': 'InnerException',
            'message': 'Message',
            'source': 'Source',
            'stack_trace': 'StackTrace'
        }

        self._inner_exception = inner_exception
        self._message = message
        self._source = source
        self._stack_trace = stack_trace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Exception':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Exception of this Exception.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inner_exception(self):
        """Gets the inner_exception of this Exception.


        :return: The inner_exception of this Exception.
        :rtype: ExceptionInnerException
        """
        return self._inner_exception

    @inner_exception.setter
    def inner_exception(self, inner_exception):
        """Sets the inner_exception of this Exception.


        :param inner_exception: The inner_exception of this Exception.
        :type inner_exception: ExceptionInnerException
        """

        self._inner_exception = inner_exception

    @property
    def message(self):
        """Gets the message of this Exception.


        :return: The message of this Exception.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Exception.


        :param message: The message of this Exception.
        :type message: str
        """

        self._message = message

    @property
    def source(self):
        """Gets the source of this Exception.


        :return: The source of this Exception.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Exception.


        :param source: The source of this Exception.
        :type source: str
        """

        self._source = source

    @property
    def stack_trace(self):
        """Gets the stack_trace of this Exception.


        :return: The stack_trace of this Exception.
        :rtype: str
        """
        return self._stack_trace

    @stack_trace.setter
    def stack_trace(self, stack_trace):
        """Sets the stack_trace of this Exception.


        :param stack_trace: The stack_trace of this Exception.
        :type stack_trace: str
        """

        self._stack_trace = stack_trace
