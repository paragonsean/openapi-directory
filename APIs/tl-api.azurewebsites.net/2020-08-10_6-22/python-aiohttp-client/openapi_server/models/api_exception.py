# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exception_inner_exception import ExceptionInnerException
from openapi_server.models.validation_error import ValidationError
from openapi_server import util


class ApiException(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inner_exception: ExceptionInnerException=None, message: str=None, source: str=None, stack_trace: str=None, custom_error: object=None, errors: List[ValidationError]=None, is_custom_error_object: bool=None, is_model_validaton_error: bool=None, reference_document_link: str=None, reference_error_code: str=None, status_code: int=None):
        """ApiException - a model defined in OpenAPI

        :param inner_exception: The inner_exception of this ApiException.
        :param message: The message of this ApiException.
        :param source: The source of this ApiException.
        :param stack_trace: The stack_trace of this ApiException.
        :param custom_error: The custom_error of this ApiException.
        :param errors: The errors of this ApiException.
        :param is_custom_error_object: The is_custom_error_object of this ApiException.
        :param is_model_validaton_error: The is_model_validaton_error of this ApiException.
        :param reference_document_link: The reference_document_link of this ApiException.
        :param reference_error_code: The reference_error_code of this ApiException.
        :param status_code: The status_code of this ApiException.
        """
        self.openapi_types = {
            'inner_exception': ExceptionInnerException,
            'message': str,
            'source': str,
            'stack_trace': str,
            'custom_error': object,
            'errors': List[ValidationError],
            'is_custom_error_object': bool,
            'is_model_validaton_error': bool,
            'reference_document_link': str,
            'reference_error_code': str,
            'status_code': int
        }

        self.attribute_map = {
            'inner_exception': 'InnerException',
            'message': 'Message',
            'source': 'Source',
            'stack_trace': 'StackTrace',
            'custom_error': 'customError',
            'errors': 'errors',
            'is_custom_error_object': 'isCustomErrorObject',
            'is_model_validaton_error': 'isModelValidatonError',
            'reference_document_link': 'referenceDocumentLink',
            'reference_error_code': 'referenceErrorCode',
            'status_code': 'statusCode'
        }

        self._inner_exception = inner_exception
        self._message = message
        self._source = source
        self._stack_trace = stack_trace
        self._custom_error = custom_error
        self._errors = errors
        self._is_custom_error_object = is_custom_error_object
        self._is_model_validaton_error = is_model_validaton_error
        self._reference_document_link = reference_document_link
        self._reference_error_code = reference_error_code
        self._status_code = status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiException':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiException of this ApiException.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inner_exception(self):
        """Gets the inner_exception of this ApiException.


        :return: The inner_exception of this ApiException.
        :rtype: ExceptionInnerException
        """
        return self._inner_exception

    @inner_exception.setter
    def inner_exception(self, inner_exception):
        """Sets the inner_exception of this ApiException.


        :param inner_exception: The inner_exception of this ApiException.
        :type inner_exception: ExceptionInnerException
        """

        self._inner_exception = inner_exception

    @property
    def message(self):
        """Gets the message of this ApiException.


        :return: The message of this ApiException.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ApiException.


        :param message: The message of this ApiException.
        :type message: str
        """

        self._message = message

    @property
    def source(self):
        """Gets the source of this ApiException.


        :return: The source of this ApiException.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ApiException.


        :param source: The source of this ApiException.
        :type source: str
        """

        self._source = source

    @property
    def stack_trace(self):
        """Gets the stack_trace of this ApiException.


        :return: The stack_trace of this ApiException.
        :rtype: str
        """
        return self._stack_trace

    @stack_trace.setter
    def stack_trace(self, stack_trace):
        """Sets the stack_trace of this ApiException.


        :param stack_trace: The stack_trace of this ApiException.
        :type stack_trace: str
        """

        self._stack_trace = stack_trace

    @property
    def custom_error(self):
        """Gets the custom_error of this ApiException.


        :return: The custom_error of this ApiException.
        :rtype: object
        """
        return self._custom_error

    @custom_error.setter
    def custom_error(self, custom_error):
        """Sets the custom_error of this ApiException.


        :param custom_error: The custom_error of this ApiException.
        :type custom_error: object
        """

        self._custom_error = custom_error

    @property
    def errors(self):
        """Gets the errors of this ApiException.


        :return: The errors of this ApiException.
        :rtype: List[ValidationError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ApiException.


        :param errors: The errors of this ApiException.
        :type errors: List[ValidationError]
        """

        self._errors = errors

    @property
    def is_custom_error_object(self):
        """Gets the is_custom_error_object of this ApiException.


        :return: The is_custom_error_object of this ApiException.
        :rtype: bool
        """
        return self._is_custom_error_object

    @is_custom_error_object.setter
    def is_custom_error_object(self, is_custom_error_object):
        """Sets the is_custom_error_object of this ApiException.


        :param is_custom_error_object: The is_custom_error_object of this ApiException.
        :type is_custom_error_object: bool
        """

        self._is_custom_error_object = is_custom_error_object

    @property
    def is_model_validaton_error(self):
        """Gets the is_model_validaton_error of this ApiException.


        :return: The is_model_validaton_error of this ApiException.
        :rtype: bool
        """
        return self._is_model_validaton_error

    @is_model_validaton_error.setter
    def is_model_validaton_error(self, is_model_validaton_error):
        """Sets the is_model_validaton_error of this ApiException.


        :param is_model_validaton_error: The is_model_validaton_error of this ApiException.
        :type is_model_validaton_error: bool
        """

        self._is_model_validaton_error = is_model_validaton_error

    @property
    def reference_document_link(self):
        """Gets the reference_document_link of this ApiException.


        :return: The reference_document_link of this ApiException.
        :rtype: str
        """
        return self._reference_document_link

    @reference_document_link.setter
    def reference_document_link(self, reference_document_link):
        """Sets the reference_document_link of this ApiException.


        :param reference_document_link: The reference_document_link of this ApiException.
        :type reference_document_link: str
        """

        self._reference_document_link = reference_document_link

    @property
    def reference_error_code(self):
        """Gets the reference_error_code of this ApiException.


        :return: The reference_error_code of this ApiException.
        :rtype: str
        """
        return self._reference_error_code

    @reference_error_code.setter
    def reference_error_code(self, reference_error_code):
        """Sets the reference_error_code of this ApiException.


        :param reference_error_code: The reference_error_code of this ApiException.
        :type reference_error_code: str
        """

        self._reference_error_code = reference_error_code

    @property
    def status_code(self):
        """Gets the status_code of this ApiException.


        :return: The status_code of this ApiException.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this ApiException.


        :param status_code: The status_code of this ApiException.
        :type status_code: int
        """

        self._status_code = status_code
