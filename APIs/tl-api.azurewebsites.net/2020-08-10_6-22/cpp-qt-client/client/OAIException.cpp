/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIException.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIException::OAIException(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIException::OAIException() {
    this->initializeModel();
}

OAIException::~OAIException() {}

void OAIException::initializeModel() {

    m_inner_exception_isSet = false;
    m_inner_exception_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_stack_trace_isSet = false;
    m_stack_trace_isValid = false;
}

void OAIException::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIException::fromJsonObject(QJsonObject json) {

    m_inner_exception_isValid = ::OpenAPI::fromJsonValue(m_inner_exception, json[QString("InnerException")]);
    m_inner_exception_isSet = !json[QString("InnerException")].isNull() && m_inner_exception_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_stack_trace_isValid = ::OpenAPI::fromJsonValue(m_stack_trace, json[QString("StackTrace")]);
    m_stack_trace_isSet = !json[QString("StackTrace")].isNull() && m_stack_trace_isValid;
}

QString OAIException::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIException::asJsonObject() const {
    QJsonObject obj;
    if (m_inner_exception.isSet()) {
        obj.insert(QString("InnerException"), ::OpenAPI::toJsonValue(m_inner_exception));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_stack_trace_isSet) {
        obj.insert(QString("StackTrace"), ::OpenAPI::toJsonValue(m_stack_trace));
    }
    return obj;
}

OAIException_InnerException OAIException::getInnerException() const {
    return m_inner_exception;
}
void OAIException::setInnerException(const OAIException_InnerException &inner_exception) {
    m_inner_exception = inner_exception;
    m_inner_exception_isSet = true;
}

bool OAIException::is_inner_exception_Set() const{
    return m_inner_exception_isSet;
}

bool OAIException::is_inner_exception_Valid() const{
    return m_inner_exception_isValid;
}

QString OAIException::getMessage() const {
    return m_message;
}
void OAIException::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIException::is_message_Set() const{
    return m_message_isSet;
}

bool OAIException::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIException::getSource() const {
    return m_source;
}
void OAIException::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIException::is_source_Set() const{
    return m_source_isSet;
}

bool OAIException::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIException::getStackTrace() const {
    return m_stack_trace;
}
void OAIException::setStackTrace(const QString &stack_trace) {
    m_stack_trace = stack_trace;
    m_stack_trace_isSet = true;
}

bool OAIException::is_stack_trace_Set() const{
    return m_stack_trace_isSet;
}

bool OAIException::is_stack_trace_Valid() const{
    return m_stack_trace_isValid;
}

bool OAIException::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inner_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_trace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIException::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
