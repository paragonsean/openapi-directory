/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPackageApi_H
#define OAI_OAIPackageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiException.h"
#include "OAIDefaultResponseDTOOfBoolean.h"
#include "OAIDefaultResponseDTOOfListOfPackageSearchDTO.h"
#include "OAIDefaultResponseDTOOfPackageDTO.h"
#include "OAIDefaultResponseDTOOfPackageSearchDTO.h"
#include "OAIDefaultResponseDTOOfStatusDTO.h"
#include "OAIDefaultResponseDTOOfString.h"
#include "OAIPackageDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPackageApi : public QObject {
    Q_OBJECT

public:
    OAIPackageApi(const int timeOut = 0);
    ~OAIPackageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  package_id qint32 [optional]
    */
    virtual void packageDelete(const ::OpenAPI::OptionalParam<qint32> &package_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  package_id qint32 [optional]
    */
    virtual void packageGet(const ::OpenAPI::OptionalParam<qint32> &package_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_package_dto OAIPackageDTO [required]
    */
    virtual void packagePost(const OAIPackageDTO &oai_package_dto);

    /**
    * @param[in]  oai_package_dto OAIPackageDTO [required]
    */
    virtual void packagePut(const OAIPackageDTO &oai_package_dto);

    /**
    * @param[in]  search_text QString [optional]
    * @param[in]  gym_id qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  active_status qint32 [optional]
    * @param[in]  category_id qint32 [optional]
    * @param[in]  startp_price double [optional]
    * @param[in]  end_price double [optional]
    * @param[in]  request_source qint32 [optional]
    */
    virtual void packageSearch(const ::OpenAPI::OptionalParam<QString> &search_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &gym_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &active_status = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &category_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &startp_price = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_price = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &request_source = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  package_id qint32 [optional]
    * @param[in]  status qint32 [optional]
    * @param[in]  user_name QString [optional]
    */
    virtual void packageUpdateStatus(const ::OpenAPI::OptionalParam<qint32> &package_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &status = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &user_name = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void packageDeleteCallback(OAIHttpRequestWorker *worker);
    void packageGetCallback(OAIHttpRequestWorker *worker);
    void packagePostCallback(OAIHttpRequestWorker *worker);
    void packagePutCallback(OAIHttpRequestWorker *worker);
    void packageSearchCallback(OAIHttpRequestWorker *worker);
    void packageUpdateStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void packageDeleteSignal(OAIDefaultResponseDTOOfBoolean summary);
    void packageGetSignal(OAIDefaultResponseDTOOfPackageDTO summary);
    void packagePostSignal(OAIDefaultResponseDTOOfStatusDTO summary);
    void packagePutSignal(OAIDefaultResponseDTOOfStatusDTO summary);
    void packageSearchSignal(QList<OAIDefaultResponseDTOOfPackageSearchDTO> summary);
    void packageUpdateStatusSignal(OAIDefaultResponseDTOOfBoolean summary);


    void packageDeleteSignalFull(OAIHttpRequestWorker *worker, OAIDefaultResponseDTOOfBoolean summary);
    void packageGetSignalFull(OAIHttpRequestWorker *worker, OAIDefaultResponseDTOOfPackageDTO summary);
    void packagePostSignalFull(OAIHttpRequestWorker *worker, OAIDefaultResponseDTOOfStatusDTO summary);
    void packagePutSignalFull(OAIHttpRequestWorker *worker, OAIDefaultResponseDTOOfStatusDTO summary);
    void packageSearchSignalFull(OAIHttpRequestWorker *worker, QList<OAIDefaultResponseDTOOfPackageSearchDTO> summary);
    void packageUpdateStatusSignalFull(OAIHttpRequestWorker *worker, OAIDefaultResponseDTOOfBoolean summary);

    Q_DECL_DEPRECATED_X("Use packageDeleteSignalError() instead")
    void packageDeleteSignalE(OAIDefaultResponseDTOOfBoolean summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageDeleteSignalError(OAIDefaultResponseDTOOfBoolean summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageGetSignalError() instead")
    void packageGetSignalE(OAIDefaultResponseDTOOfPackageDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageGetSignalError(OAIDefaultResponseDTOOfPackageDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packagePostSignalError() instead")
    void packagePostSignalE(OAIDefaultResponseDTOOfStatusDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packagePostSignalError(OAIDefaultResponseDTOOfStatusDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packagePutSignalError() instead")
    void packagePutSignalE(OAIDefaultResponseDTOOfStatusDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packagePutSignalError(OAIDefaultResponseDTOOfStatusDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageSearchSignalError() instead")
    void packageSearchSignalE(QList<OAIDefaultResponseDTOOfPackageSearchDTO> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageSearchSignalError(QList<OAIDefaultResponseDTOOfPackageSearchDTO> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageUpdateStatusSignalError() instead")
    void packageUpdateStatusSignalE(OAIDefaultResponseDTOOfBoolean summary, QNetworkReply::NetworkError error_type, QString error_str);
    void packageUpdateStatusSignalError(OAIDefaultResponseDTOOfBoolean summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use packageDeleteSignalErrorFull() instead")
    void packageDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageGetSignalErrorFull() instead")
    void packageGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packagePostSignalErrorFull() instead")
    void packagePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packagePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packagePutSignalErrorFull() instead")
    void packagePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packagePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageSearchSignalErrorFull() instead")
    void packageSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use packageUpdateStatusSignalErrorFull() instead")
    void packageUpdateStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void packageUpdateStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
