/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserDTO::OAIUserDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserDTO::OAIUserDTO() {
    this->initializeModel();
}

OAIUserDTO::~OAIUserDTO() {}

void OAIUserDTO::initializeModel() {

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_external_entity_number_isSet = false;
    m_external_entity_number_isValid = false;

    m_guardian_isSet = false;
    m_guardian_isValid = false;

    m_gym_number_isSet = false;
    m_gym_number_isValid = false;

    m_introduce_by_isSet = false;
    m_introduce_by_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIUserDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserDTO::fromJsonObject(QJsonObject json) {

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_external_entity_number_isValid = ::OpenAPI::fromJsonValue(m_external_entity_number, json[QString("externalEntityNumber")]);
    m_external_entity_number_isSet = !json[QString("externalEntityNumber")].isNull() && m_external_entity_number_isValid;

    m_guardian_isValid = ::OpenAPI::fromJsonValue(m_guardian, json[QString("guardian")]);
    m_guardian_isSet = !json[QString("guardian")].isNull() && m_guardian_isValid;

    m_gym_number_isValid = ::OpenAPI::fromJsonValue(m_gym_number, json[QString("gymNumber")]);
    m_gym_number_isSet = !json[QString("gymNumber")].isNull() && m_gym_number_isValid;

    m_introduce_by_isValid = ::OpenAPI::fromJsonValue(m_introduce_by, json[QString("introduceBy")]);
    m_introduce_by_isSet = !json[QString("introduceBy")].isNull() && m_introduce_by_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("typeId")]);
    m_type_id_isSet = !json[QString("typeId")].isNull() && m_type_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIUserDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_external_entity_number_isSet) {
        obj.insert(QString("externalEntityNumber"), ::OpenAPI::toJsonValue(m_external_entity_number));
    }
    if (m_guardian_isSet) {
        obj.insert(QString("guardian"), ::OpenAPI::toJsonValue(m_guardian));
    }
    if (m_gym_number_isSet) {
        obj.insert(QString("gymNumber"), ::OpenAPI::toJsonValue(m_gym_number));
    }
    if (m_introduce_by_isSet) {
        obj.insert(QString("introduceBy"), ::OpenAPI::toJsonValue(m_introduce_by));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("typeId"), ::OpenAPI::toJsonValue(m_type_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIUserDTO::getAccountNumber() const {
    return m_account_number;
}
void OAIUserDTO::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIUserDTO::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIUserDTO::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAIUserDTO::getExternalEntityNumber() const {
    return m_external_entity_number;
}
void OAIUserDTO::setExternalEntityNumber(const QString &external_entity_number) {
    m_external_entity_number = external_entity_number;
    m_external_entity_number_isSet = true;
}

bool OAIUserDTO::is_external_entity_number_Set() const{
    return m_external_entity_number_isSet;
}

bool OAIUserDTO::is_external_entity_number_Valid() const{
    return m_external_entity_number_isValid;
}

qint32 OAIUserDTO::getGuardian() const {
    return m_guardian;
}
void OAIUserDTO::setGuardian(const qint32 &guardian) {
    m_guardian = guardian;
    m_guardian_isSet = true;
}

bool OAIUserDTO::is_guardian_Set() const{
    return m_guardian_isSet;
}

bool OAIUserDTO::is_guardian_Valid() const{
    return m_guardian_isValid;
}

QString OAIUserDTO::getGymNumber() const {
    return m_gym_number;
}
void OAIUserDTO::setGymNumber(const QString &gym_number) {
    m_gym_number = gym_number;
    m_gym_number_isSet = true;
}

bool OAIUserDTO::is_gym_number_Set() const{
    return m_gym_number_isSet;
}

bool OAIUserDTO::is_gym_number_Valid() const{
    return m_gym_number_isValid;
}

qint32 OAIUserDTO::getIntroduceBy() const {
    return m_introduce_by;
}
void OAIUserDTO::setIntroduceBy(const qint32 &introduce_by) {
    m_introduce_by = introduce_by;
    m_introduce_by_isSet = true;
}

bool OAIUserDTO::is_introduce_by_Set() const{
    return m_introduce_by_isSet;
}

bool OAIUserDTO::is_introduce_by_Valid() const{
    return m_introduce_by_isValid;
}

QString OAIUserDTO::getName() const {
    return m_name;
}
void OAIUserDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserDTO::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUserDTO::getNumber() const {
    return m_number;
}
void OAIUserDTO::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIUserDTO::is_number_Set() const{
    return m_number_isSet;
}

bool OAIUserDTO::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIUserDTO::getTypeId() const {
    return m_type_id;
}
void OAIUserDTO::setTypeId(const qint32 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIUserDTO::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIUserDTO::is_type_id_Valid() const{
    return m_type_id_isValid;
}

qint32 OAIUserDTO::getUserId() const {
    return m_user_id;
}
void OAIUserDTO::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUserDTO::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUserDTO::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIUserDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_entity_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guardian_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gym_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_introduce_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
