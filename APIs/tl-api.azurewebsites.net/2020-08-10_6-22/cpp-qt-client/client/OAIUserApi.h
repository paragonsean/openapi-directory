/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserApi_H
#define OAI_OAIUserApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIUserDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserApi : public QObject {
    Q_OBJECT

public:
    OAIUserApi(const int timeOut = 0);
    ~OAIUserApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void userGet();

    /**
    * @param[in]  user_id qint32 [optional]
    * @param[in]  account_number QString [optional]
    * @param[in]  gym_number QString [optional]
    * @param[in]  external_entity_number QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  number QString [optional]
    * @param[in]  introduce_by qint32 [optional]
    * @param[in]  guardian qint32 [optional]
    * @param[in]  type_id qint32 [optional]
    */
    virtual void userRegisterUser(const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &account_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gym_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_entity_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &introduce_by = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &guardian = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &type_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  user_id qint32 [optional]
    * @param[in]  account_number QString [optional]
    * @param[in]  gym_number QString [optional]
    * @param[in]  external_entity_number QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  number QString [optional]
    * @param[in]  introduce_by qint32 [optional]
    * @param[in]  guardian qint32 [optional]
    * @param[in]  type_id qint32 [optional]
    */
    virtual void userUpdateUser(const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &account_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gym_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_entity_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &introduce_by = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &guardian = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &type_id = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void userGetCallback(OAIHttpRequestWorker *worker);
    void userRegisterUserCallback(OAIHttpRequestWorker *worker);
    void userUpdateUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void userGetSignal(OAIUserDTO summary);
    void userRegisterUserSignal();
    void userUpdateUserSignal();


    void userGetSignalFull(OAIHttpRequestWorker *worker, OAIUserDTO summary);
    void userRegisterUserSignalFull(OAIHttpRequestWorker *worker);
    void userUpdateUserSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use userGetSignalError() instead")
    void userGetSignalE(OAIUserDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetSignalError(OAIUserDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userRegisterUserSignalError() instead")
    void userRegisterUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userRegisterUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userUpdateUserSignalError() instead")
    void userUpdateUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userUpdateUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use userGetSignalErrorFull() instead")
    void userGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userRegisterUserSignalErrorFull() instead")
    void userRegisterUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userRegisterUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userUpdateUserSignalErrorFull() instead")
    void userUpdateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userUpdateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
