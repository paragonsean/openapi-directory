/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGymArticleDetailsDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGymArticleDetailsDTO::OAIGymArticleDetailsDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGymArticleDetailsDTO::OAIGymArticleDetailsDTO() {
    this->initializeModel();
}

OAIGymArticleDetailsDTO::~OAIGymArticleDetailsDTO() {}

void OAIGymArticleDetailsDTO::initializeModel() {

    m_article_id_isSet = false;
    m_article_id_isValid = false;

    m_available_qty_isSet = false;
    m_available_qty_isValid = false;

    m_created_user_isSet = false;
    m_created_user_isValid = false;

    m_employee_discount_isSet = false;
    m_employee_discount_isValid = false;

    m_employee_price_isSet = false;
    m_employee_price_isValid = false;

    m_gym_id_isSet = false;
    m_gym_id_isValid = false;

    m_gym_id_list_isSet = false;
    m_gym_id_list_isValid = false;

    m_gym_name_isSet = false;
    m_gym_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_is_inventory_item_isSet = false;
    m_is_inventory_item_isValid = false;

    m_is_obsolete_isSet = false;
    m_is_obsolete_isValid = false;

    m_modified_user_isSet = false;
    m_modified_user_isValid = false;

    m_reorder_level_isSet = false;
    m_reorder_level_isValid = false;

    m_revenue_account_id_isSet = false;
    m_revenue_account_id_isValid = false;

    m_selling_price_isSet = false;
    m_selling_price_isValid = false;
}

void OAIGymArticleDetailsDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGymArticleDetailsDTO::fromJsonObject(QJsonObject json) {

    m_article_id_isValid = ::OpenAPI::fromJsonValue(m_article_id, json[QString("articleId")]);
    m_article_id_isSet = !json[QString("articleId")].isNull() && m_article_id_isValid;

    m_available_qty_isValid = ::OpenAPI::fromJsonValue(m_available_qty, json[QString("availableQty")]);
    m_available_qty_isSet = !json[QString("availableQty")].isNull() && m_available_qty_isValid;

    m_created_user_isValid = ::OpenAPI::fromJsonValue(m_created_user, json[QString("createdUser")]);
    m_created_user_isSet = !json[QString("createdUser")].isNull() && m_created_user_isValid;

    m_employee_discount_isValid = ::OpenAPI::fromJsonValue(m_employee_discount, json[QString("employeeDiscount")]);
    m_employee_discount_isSet = !json[QString("employeeDiscount")].isNull() && m_employee_discount_isValid;

    m_employee_price_isValid = ::OpenAPI::fromJsonValue(m_employee_price, json[QString("employeePrice")]);
    m_employee_price_isSet = !json[QString("employeePrice")].isNull() && m_employee_price_isValid;

    m_gym_id_isValid = ::OpenAPI::fromJsonValue(m_gym_id, json[QString("gymId")]);
    m_gym_id_isSet = !json[QString("gymId")].isNull() && m_gym_id_isValid;

    m_gym_id_list_isValid = ::OpenAPI::fromJsonValue(m_gym_id_list, json[QString("gymIdList")]);
    m_gym_id_list_isSet = !json[QString("gymIdList")].isNull() && m_gym_id_list_isValid;

    m_gym_name_isValid = ::OpenAPI::fromJsonValue(m_gym_name, json[QString("gymName")]);
    m_gym_name_isSet = !json[QString("gymName")].isNull() && m_gym_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_is_inventory_item_isValid = ::OpenAPI::fromJsonValue(m_is_inventory_item, json[QString("isInventoryItem")]);
    m_is_inventory_item_isSet = !json[QString("isInventoryItem")].isNull() && m_is_inventory_item_isValid;

    m_is_obsolete_isValid = ::OpenAPI::fromJsonValue(m_is_obsolete, json[QString("isObsolete")]);
    m_is_obsolete_isSet = !json[QString("isObsolete")].isNull() && m_is_obsolete_isValid;

    m_modified_user_isValid = ::OpenAPI::fromJsonValue(m_modified_user, json[QString("modifiedUser")]);
    m_modified_user_isSet = !json[QString("modifiedUser")].isNull() && m_modified_user_isValid;

    m_reorder_level_isValid = ::OpenAPI::fromJsonValue(m_reorder_level, json[QString("reorderLevel")]);
    m_reorder_level_isSet = !json[QString("reorderLevel")].isNull() && m_reorder_level_isValid;

    m_revenue_account_id_isValid = ::OpenAPI::fromJsonValue(m_revenue_account_id, json[QString("revenueAccountId")]);
    m_revenue_account_id_isSet = !json[QString("revenueAccountId")].isNull() && m_revenue_account_id_isValid;

    m_selling_price_isValid = ::OpenAPI::fromJsonValue(m_selling_price, json[QString("sellingPrice")]);
    m_selling_price_isSet = !json[QString("sellingPrice")].isNull() && m_selling_price_isValid;
}

QString OAIGymArticleDetailsDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGymArticleDetailsDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_article_id_isSet) {
        obj.insert(QString("articleId"), ::OpenAPI::toJsonValue(m_article_id));
    }
    if (m_available_qty_isSet) {
        obj.insert(QString("availableQty"), ::OpenAPI::toJsonValue(m_available_qty));
    }
    if (m_created_user_isSet) {
        obj.insert(QString("createdUser"), ::OpenAPI::toJsonValue(m_created_user));
    }
    if (m_employee_discount_isSet) {
        obj.insert(QString("employeeDiscount"), ::OpenAPI::toJsonValue(m_employee_discount));
    }
    if (m_employee_price_isSet) {
        obj.insert(QString("employeePrice"), ::OpenAPI::toJsonValue(m_employee_price));
    }
    if (m_gym_id_isSet) {
        obj.insert(QString("gymId"), ::OpenAPI::toJsonValue(m_gym_id));
    }
    if (m_gym_id_list_isSet) {
        obj.insert(QString("gymIdList"), ::OpenAPI::toJsonValue(m_gym_id_list));
    }
    if (m_gym_name_isSet) {
        obj.insert(QString("gymName"), ::OpenAPI::toJsonValue(m_gym_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_is_inventory_item_isSet) {
        obj.insert(QString("isInventoryItem"), ::OpenAPI::toJsonValue(m_is_inventory_item));
    }
    if (m_is_obsolete_isSet) {
        obj.insert(QString("isObsolete"), ::OpenAPI::toJsonValue(m_is_obsolete));
    }
    if (m_modified_user_isSet) {
        obj.insert(QString("modifiedUser"), ::OpenAPI::toJsonValue(m_modified_user));
    }
    if (m_reorder_level_isSet) {
        obj.insert(QString("reorderLevel"), ::OpenAPI::toJsonValue(m_reorder_level));
    }
    if (m_revenue_account_id_isSet) {
        obj.insert(QString("revenueAccountId"), ::OpenAPI::toJsonValue(m_revenue_account_id));
    }
    if (m_selling_price_isSet) {
        obj.insert(QString("sellingPrice"), ::OpenAPI::toJsonValue(m_selling_price));
    }
    return obj;
}

qint32 OAIGymArticleDetailsDTO::getArticleId() const {
    return m_article_id;
}
void OAIGymArticleDetailsDTO::setArticleId(const qint32 &article_id) {
    m_article_id = article_id;
    m_article_id_isSet = true;
}

bool OAIGymArticleDetailsDTO::is_article_id_Set() const{
    return m_article_id_isSet;
}

bool OAIGymArticleDetailsDTO::is_article_id_Valid() const{
    return m_article_id_isValid;
}

double OAIGymArticleDetailsDTO::getAvailableQty() const {
    return m_available_qty;
}
void OAIGymArticleDetailsDTO::setAvailableQty(const double &available_qty) {
    m_available_qty = available_qty;
    m_available_qty_isSet = true;
}

bool OAIGymArticleDetailsDTO::is_available_qty_Set() const{
    return m_available_qty_isSet;
}

bool OAIGymArticleDetailsDTO::is_available_qty_Valid() const{
    return m_available_qty_isValid;
}

QString OAIGymArticleDetailsDTO::getCreatedUser() const {
    return m_created_user;
}
void OAIGymArticleDetailsDTO::setCreatedUser(const QString &created_user) {
    m_created_user = created_user;
    m_created_user_isSet = true;
}

bool OAIGymArticleDetailsDTO::is_created_user_Set() const{
    return m_created_user_isSet;
}

bool OAIGymArticleDetailsDTO::is_created_user_Valid() const{
    return m_created_user_isValid;
}

double OAIGymArticleDetailsDTO::getEmployeeDiscount() const {
    return m_employee_discount;
}
void OAIGymArticleDetailsDTO::setEmployeeDiscount(const double &employee_discount) {
    m_employee_discount = employee_discount;
    m_employee_discount_isSet = true;
}

bool OAIGymArticleDetailsDTO::is_employee_discount_Set() const{
    return m_employee_discount_isSet;
}

bool OAIGymArticleDetailsDTO::is_employee_discount_Valid() const{
    return m_employee_discount_isValid;
}

double OAIGymArticleDetailsDTO::getEmployeePrice() const {
    return m_employee_price;
}
void OAIGymArticleDetailsDTO::setEmployeePrice(const double &employee_price) {
    m_employee_price = employee_price;
    m_employee_price_isSet = true;
}

bool OAIGymArticleDetailsDTO::is_employee_price_Set() const{
    return m_employee_price_isSet;
}

bool OAIGymArticleDetailsDTO::is_employee_price_Valid() const{
    return m_employee_price_isValid;
}

qint32 OAIGymArticleDetailsDTO::getGymId() const {
    return m_gym_id;
}
void OAIGymArticleDetailsDTO::setGymId(const qint32 &gym_id) {
    m_gym_id = gym_id;
    m_gym_id_isSet = true;
}

bool OAIGymArticleDetailsDTO::is_gym_id_Set() const{
    return m_gym_id_isSet;
}

bool OAIGymArticleDetailsDTO::is_gym_id_Valid() const{
    return m_gym_id_isValid;
}

QString OAIGymArticleDetailsDTO::getGymIdList() const {
    return m_gym_id_list;
}
void OAIGymArticleDetailsDTO::setGymIdList(const QString &gym_id_list) {
    m_gym_id_list = gym_id_list;
    m_gym_id_list_isSet = true;
}

bool OAIGymArticleDetailsDTO::is_gym_id_list_Set() const{
    return m_gym_id_list_isSet;
}

bool OAIGymArticleDetailsDTO::is_gym_id_list_Valid() const{
    return m_gym_id_list_isValid;
}

QString OAIGymArticleDetailsDTO::getGymName() const {
    return m_gym_name;
}
void OAIGymArticleDetailsDTO::setGymName(const QString &gym_name) {
    m_gym_name = gym_name;
    m_gym_name_isSet = true;
}

bool OAIGymArticleDetailsDTO::is_gym_name_Set() const{
    return m_gym_name_isSet;
}

bool OAIGymArticleDetailsDTO::is_gym_name_Valid() const{
    return m_gym_name_isValid;
}

qint32 OAIGymArticleDetailsDTO::getId() const {
    return m_id;
}
void OAIGymArticleDetailsDTO::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGymArticleDetailsDTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGymArticleDetailsDTO::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIGymArticleDetailsDTO::isIsDefault() const {
    return m_is_default;
}
void OAIGymArticleDetailsDTO::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIGymArticleDetailsDTO::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIGymArticleDetailsDTO::is_is_default_Valid() const{
    return m_is_default_isValid;
}

bool OAIGymArticleDetailsDTO::isIsInventoryItem() const {
    return m_is_inventory_item;
}
void OAIGymArticleDetailsDTO::setIsInventoryItem(const bool &is_inventory_item) {
    m_is_inventory_item = is_inventory_item;
    m_is_inventory_item_isSet = true;
}

bool OAIGymArticleDetailsDTO::is_is_inventory_item_Set() const{
    return m_is_inventory_item_isSet;
}

bool OAIGymArticleDetailsDTO::is_is_inventory_item_Valid() const{
    return m_is_inventory_item_isValid;
}

bool OAIGymArticleDetailsDTO::isIsObsolete() const {
    return m_is_obsolete;
}
void OAIGymArticleDetailsDTO::setIsObsolete(const bool &is_obsolete) {
    m_is_obsolete = is_obsolete;
    m_is_obsolete_isSet = true;
}

bool OAIGymArticleDetailsDTO::is_is_obsolete_Set() const{
    return m_is_obsolete_isSet;
}

bool OAIGymArticleDetailsDTO::is_is_obsolete_Valid() const{
    return m_is_obsolete_isValid;
}

QString OAIGymArticleDetailsDTO::getModifiedUser() const {
    return m_modified_user;
}
void OAIGymArticleDetailsDTO::setModifiedUser(const QString &modified_user) {
    m_modified_user = modified_user;
    m_modified_user_isSet = true;
}

bool OAIGymArticleDetailsDTO::is_modified_user_Set() const{
    return m_modified_user_isSet;
}

bool OAIGymArticleDetailsDTO::is_modified_user_Valid() const{
    return m_modified_user_isValid;
}

double OAIGymArticleDetailsDTO::getReorderLevel() const {
    return m_reorder_level;
}
void OAIGymArticleDetailsDTO::setReorderLevel(const double &reorder_level) {
    m_reorder_level = reorder_level;
    m_reorder_level_isSet = true;
}

bool OAIGymArticleDetailsDTO::is_reorder_level_Set() const{
    return m_reorder_level_isSet;
}

bool OAIGymArticleDetailsDTO::is_reorder_level_Valid() const{
    return m_reorder_level_isValid;
}

qint32 OAIGymArticleDetailsDTO::getRevenueAccountId() const {
    return m_revenue_account_id;
}
void OAIGymArticleDetailsDTO::setRevenueAccountId(const qint32 &revenue_account_id) {
    m_revenue_account_id = revenue_account_id;
    m_revenue_account_id_isSet = true;
}

bool OAIGymArticleDetailsDTO::is_revenue_account_id_Set() const{
    return m_revenue_account_id_isSet;
}

bool OAIGymArticleDetailsDTO::is_revenue_account_id_Valid() const{
    return m_revenue_account_id_isValid;
}

double OAIGymArticleDetailsDTO::getSellingPrice() const {
    return m_selling_price;
}
void OAIGymArticleDetailsDTO::setSellingPrice(const double &selling_price) {
    m_selling_price = selling_price;
    m_selling_price_isSet = true;
}

bool OAIGymArticleDetailsDTO::is_selling_price_Set() const{
    return m_selling_price_isSet;
}

bool OAIGymArticleDetailsDTO::is_selling_price_Valid() const{
    return m_selling_price_isValid;
}

bool OAIGymArticleDetailsDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_article_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gym_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gym_id_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gym_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_inventory_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_obsolete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reorder_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revenue_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selling_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGymArticleDetailsDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
