/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatusDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatusDTO::OAIStatusDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatusDTO::OAIStatusDTO() {
    this->initializeModel();
}

OAIStatusDTO::~OAIStatusDTO() {}

void OAIStatusDTO::initializeModel() {

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_status_text_isSet = false;
    m_status_text_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIStatusDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatusDTO::fromJsonObject(QJsonObject json) {

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_status_text_isValid = ::OpenAPI::fromJsonValue(m_status_text, json[QString("statusText")]);
    m_status_text_isSet = !json[QString("statusText")].isNull() && m_status_text_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIStatusDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatusDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_status_text_isSet) {
        obj.insert(QString("statusText"), ::OpenAPI::toJsonValue(m_status_text));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIStatusDTO::getMessageId() const {
    return m_message_id;
}
void OAIStatusDTO::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIStatusDTO::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIStatusDTO::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIStatusDTO::getStatusText() const {
    return m_status_text;
}
void OAIStatusDTO::setStatusText(const QString &status_text) {
    m_status_text = status_text;
    m_status_text_isSet = true;
}

bool OAIStatusDTO::is_status_text_Set() const{
    return m_status_text_isSet;
}

bool OAIStatusDTO::is_status_text_Valid() const{
    return m_status_text_isValid;
}

QString OAIStatusDTO::getUrl() const {
    return m_url;
}
void OAIStatusDTO::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIStatusDTO::is_url_Set() const{
    return m_url_isSet;
}

bool OAIStatusDTO::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIStatusDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatusDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
