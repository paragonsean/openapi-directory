/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiException.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiException::OAIApiException(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiException::OAIApiException() {
    this->initializeModel();
}

OAIApiException::~OAIApiException() {}

void OAIApiException::initializeModel() {

    m_inner_exception_isSet = false;
    m_inner_exception_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_stack_trace_isSet = false;
    m_stack_trace_isValid = false;

    m_custom_error_isSet = false;
    m_custom_error_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_is_custom_error_object_isSet = false;
    m_is_custom_error_object_isValid = false;

    m_is_model_validaton_error_isSet = false;
    m_is_model_validaton_error_isValid = false;

    m_reference_document_link_isSet = false;
    m_reference_document_link_isValid = false;

    m_reference_error_code_isSet = false;
    m_reference_error_code_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;
}

void OAIApiException::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiException::fromJsonObject(QJsonObject json) {

    m_inner_exception_isValid = ::OpenAPI::fromJsonValue(m_inner_exception, json[QString("InnerException")]);
    m_inner_exception_isSet = !json[QString("InnerException")].isNull() && m_inner_exception_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_stack_trace_isValid = ::OpenAPI::fromJsonValue(m_stack_trace, json[QString("StackTrace")]);
    m_stack_trace_isSet = !json[QString("StackTrace")].isNull() && m_stack_trace_isValid;

    m_custom_error_isValid = ::OpenAPI::fromJsonValue(m_custom_error, json[QString("customError")]);
    m_custom_error_isSet = !json[QString("customError")].isNull() && m_custom_error_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_is_custom_error_object_isValid = ::OpenAPI::fromJsonValue(m_is_custom_error_object, json[QString("isCustomErrorObject")]);
    m_is_custom_error_object_isSet = !json[QString("isCustomErrorObject")].isNull() && m_is_custom_error_object_isValid;

    m_is_model_validaton_error_isValid = ::OpenAPI::fromJsonValue(m_is_model_validaton_error, json[QString("isModelValidatonError")]);
    m_is_model_validaton_error_isSet = !json[QString("isModelValidatonError")].isNull() && m_is_model_validaton_error_isValid;

    m_reference_document_link_isValid = ::OpenAPI::fromJsonValue(m_reference_document_link, json[QString("referenceDocumentLink")]);
    m_reference_document_link_isSet = !json[QString("referenceDocumentLink")].isNull() && m_reference_document_link_isValid;

    m_reference_error_code_isValid = ::OpenAPI::fromJsonValue(m_reference_error_code, json[QString("referenceErrorCode")]);
    m_reference_error_code_isSet = !json[QString("referenceErrorCode")].isNull() && m_reference_error_code_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;
}

QString OAIApiException::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiException::asJsonObject() const {
    QJsonObject obj;
    if (m_inner_exception.isSet()) {
        obj.insert(QString("InnerException"), ::OpenAPI::toJsonValue(m_inner_exception));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_stack_trace_isSet) {
        obj.insert(QString("StackTrace"), ::OpenAPI::toJsonValue(m_stack_trace));
    }
    if (m_custom_error_isSet) {
        obj.insert(QString("customError"), ::OpenAPI::toJsonValue(m_custom_error));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_is_custom_error_object_isSet) {
        obj.insert(QString("isCustomErrorObject"), ::OpenAPI::toJsonValue(m_is_custom_error_object));
    }
    if (m_is_model_validaton_error_isSet) {
        obj.insert(QString("isModelValidatonError"), ::OpenAPI::toJsonValue(m_is_model_validaton_error));
    }
    if (m_reference_document_link_isSet) {
        obj.insert(QString("referenceDocumentLink"), ::OpenAPI::toJsonValue(m_reference_document_link));
    }
    if (m_reference_error_code_isSet) {
        obj.insert(QString("referenceErrorCode"), ::OpenAPI::toJsonValue(m_reference_error_code));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    return obj;
}

OAIException_InnerException OAIApiException::getInnerException() const {
    return m_inner_exception;
}
void OAIApiException::setInnerException(const OAIException_InnerException &inner_exception) {
    m_inner_exception = inner_exception;
    m_inner_exception_isSet = true;
}

bool OAIApiException::is_inner_exception_Set() const{
    return m_inner_exception_isSet;
}

bool OAIApiException::is_inner_exception_Valid() const{
    return m_inner_exception_isValid;
}

QString OAIApiException::getMessage() const {
    return m_message;
}
void OAIApiException::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIApiException::is_message_Set() const{
    return m_message_isSet;
}

bool OAIApiException::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIApiException::getSource() const {
    return m_source;
}
void OAIApiException::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIApiException::is_source_Set() const{
    return m_source_isSet;
}

bool OAIApiException::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIApiException::getStackTrace() const {
    return m_stack_trace;
}
void OAIApiException::setStackTrace(const QString &stack_trace) {
    m_stack_trace = stack_trace;
    m_stack_trace_isSet = true;
}

bool OAIApiException::is_stack_trace_Set() const{
    return m_stack_trace_isSet;
}

bool OAIApiException::is_stack_trace_Valid() const{
    return m_stack_trace_isValid;
}

QJsonValue OAIApiException::getCustomError() const {
    return m_custom_error;
}
void OAIApiException::setCustomError(const QJsonValue &custom_error) {
    m_custom_error = custom_error;
    m_custom_error_isSet = true;
}

bool OAIApiException::is_custom_error_Set() const{
    return m_custom_error_isSet;
}

bool OAIApiException::is_custom_error_Valid() const{
    return m_custom_error_isValid;
}

QList<OAIValidationError> OAIApiException::getErrors() const {
    return m_errors;
}
void OAIApiException::setErrors(const QList<OAIValidationError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIApiException::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIApiException::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAIApiException::isIsCustomErrorObject() const {
    return m_is_custom_error_object;
}
void OAIApiException::setIsCustomErrorObject(const bool &is_custom_error_object) {
    m_is_custom_error_object = is_custom_error_object;
    m_is_custom_error_object_isSet = true;
}

bool OAIApiException::is_is_custom_error_object_Set() const{
    return m_is_custom_error_object_isSet;
}

bool OAIApiException::is_is_custom_error_object_Valid() const{
    return m_is_custom_error_object_isValid;
}

bool OAIApiException::isIsModelValidatonError() const {
    return m_is_model_validaton_error;
}
void OAIApiException::setIsModelValidatonError(const bool &is_model_validaton_error) {
    m_is_model_validaton_error = is_model_validaton_error;
    m_is_model_validaton_error_isSet = true;
}

bool OAIApiException::is_is_model_validaton_error_Set() const{
    return m_is_model_validaton_error_isSet;
}

bool OAIApiException::is_is_model_validaton_error_Valid() const{
    return m_is_model_validaton_error_isValid;
}

QString OAIApiException::getReferenceDocumentLink() const {
    return m_reference_document_link;
}
void OAIApiException::setReferenceDocumentLink(const QString &reference_document_link) {
    m_reference_document_link = reference_document_link;
    m_reference_document_link_isSet = true;
}

bool OAIApiException::is_reference_document_link_Set() const{
    return m_reference_document_link_isSet;
}

bool OAIApiException::is_reference_document_link_Valid() const{
    return m_reference_document_link_isValid;
}

QString OAIApiException::getReferenceErrorCode() const {
    return m_reference_error_code;
}
void OAIApiException::setReferenceErrorCode(const QString &reference_error_code) {
    m_reference_error_code = reference_error_code;
    m_reference_error_code_isSet = true;
}

bool OAIApiException::is_reference_error_code_Set() const{
    return m_reference_error_code_isSet;
}

bool OAIApiException::is_reference_error_code_Valid() const{
    return m_reference_error_code_isValid;
}

qint32 OAIApiException::getStatusCode() const {
    return m_status_code;
}
void OAIApiException::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIApiException::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIApiException::is_status_code_Valid() const{
    return m_status_code_isValid;
}

bool OAIApiException::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inner_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_trace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_custom_error_object_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_model_validaton_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_document_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiException::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
