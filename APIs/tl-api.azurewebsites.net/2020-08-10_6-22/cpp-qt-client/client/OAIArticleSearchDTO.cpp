/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArticleSearchDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArticleSearchDTO::OAIArticleSearchDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArticleSearchDTO::OAIArticleSearchDTO() {
    this->initializeModel();
}

OAIArticleSearchDTO::~OAIArticleSearchDTO() {}

void OAIArticleSearchDTO::initializeModel() {

    m_active_status_isSet = false;
    m_active_status_isValid = false;

    m_apply_for_all_gyms_isSet = false;
    m_apply_for_all_gyms_isValid = false;

    m_article_id_isSet = false;
    m_article_id_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_created_user_isSet = false;
    m_created_user_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_measure_unit_isSet = false;
    m_measure_unit_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_modified_user_isSet = false;
    m_modified_user_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_selling_price_isSet = false;
    m_selling_price_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIArticleSearchDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArticleSearchDTO::fromJsonObject(QJsonObject json) {

    m_active_status_isValid = ::OpenAPI::fromJsonValue(m_active_status, json[QString("activeStatus")]);
    m_active_status_isSet = !json[QString("activeStatus")].isNull() && m_active_status_isValid;

    m_apply_for_all_gyms_isValid = ::OpenAPI::fromJsonValue(m_apply_for_all_gyms, json[QString("applyForAllGyms")]);
    m_apply_for_all_gyms_isSet = !json[QString("applyForAllGyms")].isNull() && m_apply_for_all_gyms_isValid;

    m_article_id_isValid = ::OpenAPI::fromJsonValue(m_article_id, json[QString("articleId")]);
    m_article_id_isSet = !json[QString("articleId")].isNull() && m_article_id_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_created_user_isValid = ::OpenAPI::fromJsonValue(m_created_user, json[QString("createdUser")]);
    m_created_user_isSet = !json[QString("createdUser")].isNull() && m_created_user_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_measure_unit_isValid = ::OpenAPI::fromJsonValue(m_measure_unit, json[QString("measureUnit")]);
    m_measure_unit_isSet = !json[QString("measureUnit")].isNull() && m_measure_unit_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modifiedDate")]);
    m_modified_date_isSet = !json[QString("modifiedDate")].isNull() && m_modified_date_isValid;

    m_modified_user_isValid = ::OpenAPI::fromJsonValue(m_modified_user, json[QString("modifiedUser")]);
    m_modified_user_isSet = !json[QString("modifiedUser")].isNull() && m_modified_user_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_selling_price_isValid = ::OpenAPI::fromJsonValue(m_selling_price, json[QString("sellingPrice")]);
    m_selling_price_isSet = !json[QString("sellingPrice")].isNull() && m_selling_price_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("totalCount")]);
    m_total_count_isSet = !json[QString("totalCount")].isNull() && m_total_count_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIArticleSearchDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArticleSearchDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_active_status_isSet) {
        obj.insert(QString("activeStatus"), ::OpenAPI::toJsonValue(m_active_status));
    }
    if (m_apply_for_all_gyms_isSet) {
        obj.insert(QString("applyForAllGyms"), ::OpenAPI::toJsonValue(m_apply_for_all_gyms));
    }
    if (m_article_id_isSet) {
        obj.insert(QString("articleId"), ::OpenAPI::toJsonValue(m_article_id));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_created_user_isSet) {
        obj.insert(QString("createdUser"), ::OpenAPI::toJsonValue(m_created_user));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_measure_unit_isSet) {
        obj.insert(QString("measureUnit"), ::OpenAPI::toJsonValue(m_measure_unit));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modifiedDate"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_modified_user_isSet) {
        obj.insert(QString("modifiedUser"), ::OpenAPI::toJsonValue(m_modified_user));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_selling_price_isSet) {
        obj.insert(QString("sellingPrice"), ::OpenAPI::toJsonValue(m_selling_price));
    }
    if (m_tags_isSet) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("totalCount"), ::OpenAPI::toJsonValue(m_total_count));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIArticleSearchDTO::isActiveStatus() const {
    return m_active_status;
}
void OAIArticleSearchDTO::setActiveStatus(const bool &active_status) {
    m_active_status = active_status;
    m_active_status_isSet = true;
}

bool OAIArticleSearchDTO::is_active_status_Set() const{
    return m_active_status_isSet;
}

bool OAIArticleSearchDTO::is_active_status_Valid() const{
    return m_active_status_isValid;
}

bool OAIArticleSearchDTO::isApplyForAllGyms() const {
    return m_apply_for_all_gyms;
}
void OAIArticleSearchDTO::setApplyForAllGyms(const bool &apply_for_all_gyms) {
    m_apply_for_all_gyms = apply_for_all_gyms;
    m_apply_for_all_gyms_isSet = true;
}

bool OAIArticleSearchDTO::is_apply_for_all_gyms_Set() const{
    return m_apply_for_all_gyms_isSet;
}

bool OAIArticleSearchDTO::is_apply_for_all_gyms_Valid() const{
    return m_apply_for_all_gyms_isValid;
}

qint32 OAIArticleSearchDTO::getArticleId() const {
    return m_article_id;
}
void OAIArticleSearchDTO::setArticleId(const qint32 &article_id) {
    m_article_id = article_id;
    m_article_id_isSet = true;
}

bool OAIArticleSearchDTO::is_article_id_Set() const{
    return m_article_id_isSet;
}

bool OAIArticleSearchDTO::is_article_id_Valid() const{
    return m_article_id_isValid;
}

QDateTime OAIArticleSearchDTO::getCreatedDate() const {
    return m_created_date;
}
void OAIArticleSearchDTO::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIArticleSearchDTO::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIArticleSearchDTO::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIArticleSearchDTO::getCreatedUser() const {
    return m_created_user;
}
void OAIArticleSearchDTO::setCreatedUser(const QString &created_user) {
    m_created_user = created_user;
    m_created_user_isSet = true;
}

bool OAIArticleSearchDTO::is_created_user_Set() const{
    return m_created_user_isSet;
}

bool OAIArticleSearchDTO::is_created_user_Valid() const{
    return m_created_user_isValid;
}

QString OAIArticleSearchDTO::getDescription() const {
    return m_description;
}
void OAIArticleSearchDTO::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIArticleSearchDTO::is_description_Set() const{
    return m_description_isSet;
}

bool OAIArticleSearchDTO::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIArticleSearchDTO::getMeasureUnit() const {
    return m_measure_unit;
}
void OAIArticleSearchDTO::setMeasureUnit(const QString &measure_unit) {
    m_measure_unit = measure_unit;
    m_measure_unit_isSet = true;
}

bool OAIArticleSearchDTO::is_measure_unit_Set() const{
    return m_measure_unit_isSet;
}

bool OAIArticleSearchDTO::is_measure_unit_Valid() const{
    return m_measure_unit_isValid;
}

QDateTime OAIArticleSearchDTO::getModifiedDate() const {
    return m_modified_date;
}
void OAIArticleSearchDTO::setModifiedDate(const QDateTime &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAIArticleSearchDTO::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAIArticleSearchDTO::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAIArticleSearchDTO::getModifiedUser() const {
    return m_modified_user;
}
void OAIArticleSearchDTO::setModifiedUser(const QString &modified_user) {
    m_modified_user = modified_user;
    m_modified_user_isSet = true;
}

bool OAIArticleSearchDTO::is_modified_user_Set() const{
    return m_modified_user_isSet;
}

bool OAIArticleSearchDTO::is_modified_user_Valid() const{
    return m_modified_user_isValid;
}

QString OAIArticleSearchDTO::getName() const {
    return m_name;
}
void OAIArticleSearchDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIArticleSearchDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIArticleSearchDTO::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIArticleSearchDTO::getNumber() const {
    return m_number;
}
void OAIArticleSearchDTO::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIArticleSearchDTO::is_number_Set() const{
    return m_number_isSet;
}

bool OAIArticleSearchDTO::is_number_Valid() const{
    return m_number_isValid;
}

double OAIArticleSearchDTO::getPrice() const {
    return m_price;
}
void OAIArticleSearchDTO::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIArticleSearchDTO::is_price_Set() const{
    return m_price_isSet;
}

bool OAIArticleSearchDTO::is_price_Valid() const{
    return m_price_isValid;
}

double OAIArticleSearchDTO::getSellingPrice() const {
    return m_selling_price;
}
void OAIArticleSearchDTO::setSellingPrice(const double &selling_price) {
    m_selling_price = selling_price;
    m_selling_price_isSet = true;
}

bool OAIArticleSearchDTO::is_selling_price_Set() const{
    return m_selling_price_isSet;
}

bool OAIArticleSearchDTO::is_selling_price_Valid() const{
    return m_selling_price_isValid;
}

QString OAIArticleSearchDTO::getTags() const {
    return m_tags;
}
void OAIArticleSearchDTO::setTags(const QString &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIArticleSearchDTO::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIArticleSearchDTO::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIArticleSearchDTO::getTotalCount() const {
    return m_total_count;
}
void OAIArticleSearchDTO::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIArticleSearchDTO::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIArticleSearchDTO::is_total_count_Valid() const{
    return m_total_count_isValid;
}

QString OAIArticleSearchDTO::getType() const {
    return m_type;
}
void OAIArticleSearchDTO::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIArticleSearchDTO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIArticleSearchDTO::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIArticleSearchDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_for_all_gyms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_article_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measure_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selling_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArticleSearchDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
