/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArticleDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArticleDTO::OAIArticleDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArticleDTO::OAIArticleDTO() {
    this->initializeModel();
}

OAIArticleDTO::~OAIArticleDTO() {}

void OAIArticleDTO::initializeModel() {

    m_active_status_isSet = false;
    m_active_status_isValid = false;

    m_apply_for_all_gyms_isSet = false;
    m_apply_for_all_gyms_isValid = false;

    m_article_id_isSet = false;
    m_article_id_isValid = false;

    m_available_gyms_isSet = false;
    m_available_gyms_isValid = false;

    m_available_qty_isSet = false;
    m_available_qty_isValid = false;

    m_barcode_isSet = false;
    m_barcode_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_created_user_isSet = false;
    m_created_user_isValid = false;

    m_cron_expression_isSet = false;
    m_cron_expression_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discount_isSet = false;
    m_discount_isValid = false;

    m_employee_discount_isSet = false;
    m_employee_discount_isValid = false;

    m_employee_price_isSet = false;
    m_employee_price_isValid = false;

    m_gym_articles_isSet = false;
    m_gym_articles_isValid = false;

    m_is_add_on_isSet = false;
    m_is_add_on_isValid = false;

    m_is_inventory_item_isSet = false;
    m_is_inventory_item_isValid = false;

    m_is_obsolete_isSet = false;
    m_is_obsolete_isValid = false;

    m_measure_unit_isSet = false;
    m_measure_unit_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_modified_user_isSet = false;
    m_modified_user_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_reorder_level_isSet = false;
    m_reorder_level_isValid = false;

    m_revenue_account_id_isSet = false;
    m_revenue_account_id_isValid = false;

    m_selling_price_isSet = false;
    m_selling_price_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vat_isSet = false;
    m_vat_isValid = false;

    m_vat_applicable_isSet = false;
    m_vat_applicable_isValid = false;
}

void OAIArticleDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArticleDTO::fromJsonObject(QJsonObject json) {

    m_active_status_isValid = ::OpenAPI::fromJsonValue(m_active_status, json[QString("activeStatus")]);
    m_active_status_isSet = !json[QString("activeStatus")].isNull() && m_active_status_isValid;

    m_apply_for_all_gyms_isValid = ::OpenAPI::fromJsonValue(m_apply_for_all_gyms, json[QString("applyForAllGyms")]);
    m_apply_for_all_gyms_isSet = !json[QString("applyForAllGyms")].isNull() && m_apply_for_all_gyms_isValid;

    m_article_id_isValid = ::OpenAPI::fromJsonValue(m_article_id, json[QString("articleId")]);
    m_article_id_isSet = !json[QString("articleId")].isNull() && m_article_id_isValid;

    m_available_gyms_isValid = ::OpenAPI::fromJsonValue(m_available_gyms, json[QString("availableGyms")]);
    m_available_gyms_isSet = !json[QString("availableGyms")].isNull() && m_available_gyms_isValid;

    m_available_qty_isValid = ::OpenAPI::fromJsonValue(m_available_qty, json[QString("availableQty")]);
    m_available_qty_isSet = !json[QString("availableQty")].isNull() && m_available_qty_isValid;

    m_barcode_isValid = ::OpenAPI::fromJsonValue(m_barcode, json[QString("barcode")]);
    m_barcode_isSet = !json[QString("barcode")].isNull() && m_barcode_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_created_user_isValid = ::OpenAPI::fromJsonValue(m_created_user, json[QString("createdUser")]);
    m_created_user_isSet = !json[QString("createdUser")].isNull() && m_created_user_isValid;

    m_cron_expression_isValid = ::OpenAPI::fromJsonValue(m_cron_expression, json[QString("cronExpression")]);
    m_cron_expression_isSet = !json[QString("cronExpression")].isNull() && m_cron_expression_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discount_isValid = ::OpenAPI::fromJsonValue(m_discount, json[QString("discount")]);
    m_discount_isSet = !json[QString("discount")].isNull() && m_discount_isValid;

    m_employee_discount_isValid = ::OpenAPI::fromJsonValue(m_employee_discount, json[QString("employeeDiscount")]);
    m_employee_discount_isSet = !json[QString("employeeDiscount")].isNull() && m_employee_discount_isValid;

    m_employee_price_isValid = ::OpenAPI::fromJsonValue(m_employee_price, json[QString("employeePrice")]);
    m_employee_price_isSet = !json[QString("employeePrice")].isNull() && m_employee_price_isValid;

    m_gym_articles_isValid = ::OpenAPI::fromJsonValue(m_gym_articles, json[QString("gymArticles")]);
    m_gym_articles_isSet = !json[QString("gymArticles")].isNull() && m_gym_articles_isValid;

    m_is_add_on_isValid = ::OpenAPI::fromJsonValue(m_is_add_on, json[QString("isAddOn")]);
    m_is_add_on_isSet = !json[QString("isAddOn")].isNull() && m_is_add_on_isValid;

    m_is_inventory_item_isValid = ::OpenAPI::fromJsonValue(m_is_inventory_item, json[QString("isInventoryItem")]);
    m_is_inventory_item_isSet = !json[QString("isInventoryItem")].isNull() && m_is_inventory_item_isValid;

    m_is_obsolete_isValid = ::OpenAPI::fromJsonValue(m_is_obsolete, json[QString("isObsolete")]);
    m_is_obsolete_isSet = !json[QString("isObsolete")].isNull() && m_is_obsolete_isValid;

    m_measure_unit_isValid = ::OpenAPI::fromJsonValue(m_measure_unit, json[QString("measureUnit")]);
    m_measure_unit_isSet = !json[QString("measureUnit")].isNull() && m_measure_unit_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modifiedDate")]);
    m_modified_date_isSet = !json[QString("modifiedDate")].isNull() && m_modified_date_isValid;

    m_modified_user_isValid = ::OpenAPI::fromJsonValue(m_modified_user, json[QString("modifiedUser")]);
    m_modified_user_isSet = !json[QString("modifiedUser")].isNull() && m_modified_user_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_reorder_level_isValid = ::OpenAPI::fromJsonValue(m_reorder_level, json[QString("reorderLevel")]);
    m_reorder_level_isSet = !json[QString("reorderLevel")].isNull() && m_reorder_level_isValid;

    m_revenue_account_id_isValid = ::OpenAPI::fromJsonValue(m_revenue_account_id, json[QString("revenueAccountId")]);
    m_revenue_account_id_isSet = !json[QString("revenueAccountId")].isNull() && m_revenue_account_id_isValid;

    m_selling_price_isValid = ::OpenAPI::fromJsonValue(m_selling_price, json[QString("sellingPrice")]);
    m_selling_price_isSet = !json[QString("sellingPrice")].isNull() && m_selling_price_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vat_isValid = ::OpenAPI::fromJsonValue(m_vat, json[QString("vat")]);
    m_vat_isSet = !json[QString("vat")].isNull() && m_vat_isValid;

    m_vat_applicable_isValid = ::OpenAPI::fromJsonValue(m_vat_applicable, json[QString("vatApplicable")]);
    m_vat_applicable_isSet = !json[QString("vatApplicable")].isNull() && m_vat_applicable_isValid;
}

QString OAIArticleDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArticleDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_active_status_isSet) {
        obj.insert(QString("activeStatus"), ::OpenAPI::toJsonValue(m_active_status));
    }
    if (m_apply_for_all_gyms_isSet) {
        obj.insert(QString("applyForAllGyms"), ::OpenAPI::toJsonValue(m_apply_for_all_gyms));
    }
    if (m_article_id_isSet) {
        obj.insert(QString("articleId"), ::OpenAPI::toJsonValue(m_article_id));
    }
    if (m_available_gyms.size() > 0) {
        obj.insert(QString("availableGyms"), ::OpenAPI::toJsonValue(m_available_gyms));
    }
    if (m_available_qty_isSet) {
        obj.insert(QString("availableQty"), ::OpenAPI::toJsonValue(m_available_qty));
    }
    if (m_barcode_isSet) {
        obj.insert(QString("barcode"), ::OpenAPI::toJsonValue(m_barcode));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_created_user_isSet) {
        obj.insert(QString("createdUser"), ::OpenAPI::toJsonValue(m_created_user));
    }
    if (m_cron_expression_isSet) {
        obj.insert(QString("cronExpression"), ::OpenAPI::toJsonValue(m_cron_expression));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discount_isSet) {
        obj.insert(QString("discount"), ::OpenAPI::toJsonValue(m_discount));
    }
    if (m_employee_discount_isSet) {
        obj.insert(QString("employeeDiscount"), ::OpenAPI::toJsonValue(m_employee_discount));
    }
    if (m_employee_price_isSet) {
        obj.insert(QString("employeePrice"), ::OpenAPI::toJsonValue(m_employee_price));
    }
    if (m_gym_articles.size() > 0) {
        obj.insert(QString("gymArticles"), ::OpenAPI::toJsonValue(m_gym_articles));
    }
    if (m_is_add_on_isSet) {
        obj.insert(QString("isAddOn"), ::OpenAPI::toJsonValue(m_is_add_on));
    }
    if (m_is_inventory_item_isSet) {
        obj.insert(QString("isInventoryItem"), ::OpenAPI::toJsonValue(m_is_inventory_item));
    }
    if (m_is_obsolete_isSet) {
        obj.insert(QString("isObsolete"), ::OpenAPI::toJsonValue(m_is_obsolete));
    }
    if (m_measure_unit_isSet) {
        obj.insert(QString("measureUnit"), ::OpenAPI::toJsonValue(m_measure_unit));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modifiedDate"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_modified_user_isSet) {
        obj.insert(QString("modifiedUser"), ::OpenAPI::toJsonValue(m_modified_user));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_reorder_level_isSet) {
        obj.insert(QString("reorderLevel"), ::OpenAPI::toJsonValue(m_reorder_level));
    }
    if (m_revenue_account_id_isSet) {
        obj.insert(QString("revenueAccountId"), ::OpenAPI::toJsonValue(m_revenue_account_id));
    }
    if (m_selling_price_isSet) {
        obj.insert(QString("sellingPrice"), ::OpenAPI::toJsonValue(m_selling_price));
    }
    if (m_tags_isSet) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vat_isSet) {
        obj.insert(QString("vat"), ::OpenAPI::toJsonValue(m_vat));
    }
    if (m_vat_applicable_isSet) {
        obj.insert(QString("vatApplicable"), ::OpenAPI::toJsonValue(m_vat_applicable));
    }
    return obj;
}

bool OAIArticleDTO::isActiveStatus() const {
    return m_active_status;
}
void OAIArticleDTO::setActiveStatus(const bool &active_status) {
    m_active_status = active_status;
    m_active_status_isSet = true;
}

bool OAIArticleDTO::is_active_status_Set() const{
    return m_active_status_isSet;
}

bool OAIArticleDTO::is_active_status_Valid() const{
    return m_active_status_isValid;
}

bool OAIArticleDTO::isApplyForAllGyms() const {
    return m_apply_for_all_gyms;
}
void OAIArticleDTO::setApplyForAllGyms(const bool &apply_for_all_gyms) {
    m_apply_for_all_gyms = apply_for_all_gyms;
    m_apply_for_all_gyms_isSet = true;
}

bool OAIArticleDTO::is_apply_for_all_gyms_Set() const{
    return m_apply_for_all_gyms_isSet;
}

bool OAIArticleDTO::is_apply_for_all_gyms_Valid() const{
    return m_apply_for_all_gyms_isValid;
}

qint32 OAIArticleDTO::getArticleId() const {
    return m_article_id;
}
void OAIArticleDTO::setArticleId(const qint32 &article_id) {
    m_article_id = article_id;
    m_article_id_isSet = true;
}

bool OAIArticleDTO::is_article_id_Set() const{
    return m_article_id_isSet;
}

bool OAIArticleDTO::is_article_id_Valid() const{
    return m_article_id_isValid;
}

QList<OAIGymDTO> OAIArticleDTO::getAvailableGyms() const {
    return m_available_gyms;
}
void OAIArticleDTO::setAvailableGyms(const QList<OAIGymDTO> &available_gyms) {
    m_available_gyms = available_gyms;
    m_available_gyms_isSet = true;
}

bool OAIArticleDTO::is_available_gyms_Set() const{
    return m_available_gyms_isSet;
}

bool OAIArticleDTO::is_available_gyms_Valid() const{
    return m_available_gyms_isValid;
}

double OAIArticleDTO::getAvailableQty() const {
    return m_available_qty;
}
void OAIArticleDTO::setAvailableQty(const double &available_qty) {
    m_available_qty = available_qty;
    m_available_qty_isSet = true;
}

bool OAIArticleDTO::is_available_qty_Set() const{
    return m_available_qty_isSet;
}

bool OAIArticleDTO::is_available_qty_Valid() const{
    return m_available_qty_isValid;
}

QString OAIArticleDTO::getBarcode() const {
    return m_barcode;
}
void OAIArticleDTO::setBarcode(const QString &barcode) {
    m_barcode = barcode;
    m_barcode_isSet = true;
}

bool OAIArticleDTO::is_barcode_Set() const{
    return m_barcode_isSet;
}

bool OAIArticleDTO::is_barcode_Valid() const{
    return m_barcode_isValid;
}

QDateTime OAIArticleDTO::getCreatedDate() const {
    return m_created_date;
}
void OAIArticleDTO::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIArticleDTO::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIArticleDTO::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIArticleDTO::getCreatedUser() const {
    return m_created_user;
}
void OAIArticleDTO::setCreatedUser(const QString &created_user) {
    m_created_user = created_user;
    m_created_user_isSet = true;
}

bool OAIArticleDTO::is_created_user_Set() const{
    return m_created_user_isSet;
}

bool OAIArticleDTO::is_created_user_Valid() const{
    return m_created_user_isValid;
}

QString OAIArticleDTO::getCronExpression() const {
    return m_cron_expression;
}
void OAIArticleDTO::setCronExpression(const QString &cron_expression) {
    m_cron_expression = cron_expression;
    m_cron_expression_isSet = true;
}

bool OAIArticleDTO::is_cron_expression_Set() const{
    return m_cron_expression_isSet;
}

bool OAIArticleDTO::is_cron_expression_Valid() const{
    return m_cron_expression_isValid;
}

QString OAIArticleDTO::getDescription() const {
    return m_description;
}
void OAIArticleDTO::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIArticleDTO::is_description_Set() const{
    return m_description_isSet;
}

bool OAIArticleDTO::is_description_Valid() const{
    return m_description_isValid;
}

double OAIArticleDTO::getDiscount() const {
    return m_discount;
}
void OAIArticleDTO::setDiscount(const double &discount) {
    m_discount = discount;
    m_discount_isSet = true;
}

bool OAIArticleDTO::is_discount_Set() const{
    return m_discount_isSet;
}

bool OAIArticleDTO::is_discount_Valid() const{
    return m_discount_isValid;
}

double OAIArticleDTO::getEmployeeDiscount() const {
    return m_employee_discount;
}
void OAIArticleDTO::setEmployeeDiscount(const double &employee_discount) {
    m_employee_discount = employee_discount;
    m_employee_discount_isSet = true;
}

bool OAIArticleDTO::is_employee_discount_Set() const{
    return m_employee_discount_isSet;
}

bool OAIArticleDTO::is_employee_discount_Valid() const{
    return m_employee_discount_isValid;
}

double OAIArticleDTO::getEmployeePrice() const {
    return m_employee_price;
}
void OAIArticleDTO::setEmployeePrice(const double &employee_price) {
    m_employee_price = employee_price;
    m_employee_price_isSet = true;
}

bool OAIArticleDTO::is_employee_price_Set() const{
    return m_employee_price_isSet;
}

bool OAIArticleDTO::is_employee_price_Valid() const{
    return m_employee_price_isValid;
}

QList<OAIGymArticleDetailsDTO> OAIArticleDTO::getGymArticles() const {
    return m_gym_articles;
}
void OAIArticleDTO::setGymArticles(const QList<OAIGymArticleDetailsDTO> &gym_articles) {
    m_gym_articles = gym_articles;
    m_gym_articles_isSet = true;
}

bool OAIArticleDTO::is_gym_articles_Set() const{
    return m_gym_articles_isSet;
}

bool OAIArticleDTO::is_gym_articles_Valid() const{
    return m_gym_articles_isValid;
}

bool OAIArticleDTO::isIsAddOn() const {
    return m_is_add_on;
}
void OAIArticleDTO::setIsAddOn(const bool &is_add_on) {
    m_is_add_on = is_add_on;
    m_is_add_on_isSet = true;
}

bool OAIArticleDTO::is_is_add_on_Set() const{
    return m_is_add_on_isSet;
}

bool OAIArticleDTO::is_is_add_on_Valid() const{
    return m_is_add_on_isValid;
}

bool OAIArticleDTO::isIsInventoryItem() const {
    return m_is_inventory_item;
}
void OAIArticleDTO::setIsInventoryItem(const bool &is_inventory_item) {
    m_is_inventory_item = is_inventory_item;
    m_is_inventory_item_isSet = true;
}

bool OAIArticleDTO::is_is_inventory_item_Set() const{
    return m_is_inventory_item_isSet;
}

bool OAIArticleDTO::is_is_inventory_item_Valid() const{
    return m_is_inventory_item_isValid;
}

bool OAIArticleDTO::isIsObsolete() const {
    return m_is_obsolete;
}
void OAIArticleDTO::setIsObsolete(const bool &is_obsolete) {
    m_is_obsolete = is_obsolete;
    m_is_obsolete_isSet = true;
}

bool OAIArticleDTO::is_is_obsolete_Set() const{
    return m_is_obsolete_isSet;
}

bool OAIArticleDTO::is_is_obsolete_Valid() const{
    return m_is_obsolete_isValid;
}

QString OAIArticleDTO::getMeasureUnit() const {
    return m_measure_unit;
}
void OAIArticleDTO::setMeasureUnit(const QString &measure_unit) {
    m_measure_unit = measure_unit;
    m_measure_unit_isSet = true;
}

bool OAIArticleDTO::is_measure_unit_Set() const{
    return m_measure_unit_isSet;
}

bool OAIArticleDTO::is_measure_unit_Valid() const{
    return m_measure_unit_isValid;
}

QDateTime OAIArticleDTO::getModifiedDate() const {
    return m_modified_date;
}
void OAIArticleDTO::setModifiedDate(const QDateTime &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAIArticleDTO::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAIArticleDTO::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAIArticleDTO::getModifiedUser() const {
    return m_modified_user;
}
void OAIArticleDTO::setModifiedUser(const QString &modified_user) {
    m_modified_user = modified_user;
    m_modified_user_isSet = true;
}

bool OAIArticleDTO::is_modified_user_Set() const{
    return m_modified_user_isSet;
}

bool OAIArticleDTO::is_modified_user_Valid() const{
    return m_modified_user_isValid;
}

QString OAIArticleDTO::getName() const {
    return m_name;
}
void OAIArticleDTO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIArticleDTO::is_name_Set() const{
    return m_name_isSet;
}

bool OAIArticleDTO::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIArticleDTO::getNumber() const {
    return m_number;
}
void OAIArticleDTO::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIArticleDTO::is_number_Set() const{
    return m_number_isSet;
}

bool OAIArticleDTO::is_number_Valid() const{
    return m_number_isValid;
}

double OAIArticleDTO::getPrice() const {
    return m_price;
}
void OAIArticleDTO::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIArticleDTO::is_price_Set() const{
    return m_price_isSet;
}

bool OAIArticleDTO::is_price_Valid() const{
    return m_price_isValid;
}

double OAIArticleDTO::getReorderLevel() const {
    return m_reorder_level;
}
void OAIArticleDTO::setReorderLevel(const double &reorder_level) {
    m_reorder_level = reorder_level;
    m_reorder_level_isSet = true;
}

bool OAIArticleDTO::is_reorder_level_Set() const{
    return m_reorder_level_isSet;
}

bool OAIArticleDTO::is_reorder_level_Valid() const{
    return m_reorder_level_isValid;
}

qint32 OAIArticleDTO::getRevenueAccountId() const {
    return m_revenue_account_id;
}
void OAIArticleDTO::setRevenueAccountId(const qint32 &revenue_account_id) {
    m_revenue_account_id = revenue_account_id;
    m_revenue_account_id_isSet = true;
}

bool OAIArticleDTO::is_revenue_account_id_Set() const{
    return m_revenue_account_id_isSet;
}

bool OAIArticleDTO::is_revenue_account_id_Valid() const{
    return m_revenue_account_id_isValid;
}

double OAIArticleDTO::getSellingPrice() const {
    return m_selling_price;
}
void OAIArticleDTO::setSellingPrice(const double &selling_price) {
    m_selling_price = selling_price;
    m_selling_price_isSet = true;
}

bool OAIArticleDTO::is_selling_price_Set() const{
    return m_selling_price_isSet;
}

bool OAIArticleDTO::is_selling_price_Valid() const{
    return m_selling_price_isValid;
}

QString OAIArticleDTO::getTags() const {
    return m_tags;
}
void OAIArticleDTO::setTags(const QString &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIArticleDTO::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIArticleDTO::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIArticleDTO::getType() const {
    return m_type;
}
void OAIArticleDTO::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIArticleDTO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIArticleDTO::is_type_Valid() const{
    return m_type_isValid;
}

double OAIArticleDTO::getVat() const {
    return m_vat;
}
void OAIArticleDTO::setVat(const double &vat) {
    m_vat = vat;
    m_vat_isSet = true;
}

bool OAIArticleDTO::is_vat_Set() const{
    return m_vat_isSet;
}

bool OAIArticleDTO::is_vat_Valid() const{
    return m_vat_isValid;
}

bool OAIArticleDTO::isVatApplicable() const {
    return m_vat_applicable;
}
void OAIArticleDTO::setVatApplicable(const bool &vat_applicable) {
    m_vat_applicable = vat_applicable;
    m_vat_applicable_isSet = true;
}

bool OAIArticleDTO::is_vat_applicable_Set() const{
    return m_vat_applicable_isSet;
}

bool OAIArticleDTO::is_vat_applicable_Valid() const{
    return m_vat_applicable_isValid;
}

bool OAIArticleDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_for_all_gyms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_article_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_gyms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_qty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_barcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cron_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gym_articles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_add_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_inventory_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_obsolete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measure_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reorder_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revenue_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selling_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_applicable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArticleDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_gyms_isValid && m_measure_unit_isValid && m_name_isValid && m_price_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
