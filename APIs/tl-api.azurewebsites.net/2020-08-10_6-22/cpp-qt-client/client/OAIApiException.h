/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApiException.h
 *
 * 
 */

#ifndef OAIApiException_H
#define OAIApiException_H

#include <QJsonObject>

#include "OAIException_InnerException.h"
#include "OAIValidationError.h"
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIException_InnerException;
class OAIValidationError;

class OAIApiException : public OAIObject {
public:
    OAIApiException();
    OAIApiException(QString json);
    ~OAIApiException() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIException_InnerException getInnerException() const;
    void setInnerException(const OAIException_InnerException &inner_exception);
    bool is_inner_exception_Set() const;
    bool is_inner_exception_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getStackTrace() const;
    void setStackTrace(const QString &stack_trace);
    bool is_stack_trace_Set() const;
    bool is_stack_trace_Valid() const;

    QJsonValue getCustomError() const;
    void setCustomError(const QJsonValue &custom_error);
    bool is_custom_error_Set() const;
    bool is_custom_error_Valid() const;

    QList<OAIValidationError> getErrors() const;
    void setErrors(const QList<OAIValidationError> &errors);
    bool is_errors_Set() const;
    bool is_errors_Valid() const;

    bool isIsCustomErrorObject() const;
    void setIsCustomErrorObject(const bool &is_custom_error_object);
    bool is_is_custom_error_object_Set() const;
    bool is_is_custom_error_object_Valid() const;

    bool isIsModelValidatonError() const;
    void setIsModelValidatonError(const bool &is_model_validaton_error);
    bool is_is_model_validaton_error_Set() const;
    bool is_is_model_validaton_error_Valid() const;

    QString getReferenceDocumentLink() const;
    void setReferenceDocumentLink(const QString &reference_document_link);
    bool is_reference_document_link_Set() const;
    bool is_reference_document_link_Valid() const;

    QString getReferenceErrorCode() const;
    void setReferenceErrorCode(const QString &reference_error_code);
    bool is_reference_error_code_Set() const;
    bool is_reference_error_code_Valid() const;

    qint32 getStatusCode() const;
    void setStatusCode(const qint32 &status_code);
    bool is_status_code_Set() const;
    bool is_status_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIException_InnerException m_inner_exception;
    bool m_inner_exception_isSet;
    bool m_inner_exception_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_stack_trace;
    bool m_stack_trace_isSet;
    bool m_stack_trace_isValid;

    QJsonValue m_custom_error;
    bool m_custom_error_isSet;
    bool m_custom_error_isValid;

    QList<OAIValidationError> m_errors;
    bool m_errors_isSet;
    bool m_errors_isValid;

    bool m_is_custom_error_object;
    bool m_is_custom_error_object_isSet;
    bool m_is_custom_error_object_isValid;

    bool m_is_model_validaton_error;
    bool m_is_model_validaton_error_isSet;
    bool m_is_model_validaton_error_isValid;

    QString m_reference_document_link;
    bool m_reference_document_link_isSet;
    bool m_reference_document_link_isValid;

    QString m_reference_error_code;
    bool m_reference_error_code_isSet;
    bool m_reference_error_code_isValid;

    qint32 m_status_code;
    bool m_status_code_isSet;
    bool m_status_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApiException)

#endif // OAIApiException_H
