/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageItemDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageItemDTO::OAIPackageItemDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageItemDTO::OAIPackageItemDTO() {
    this->initializeModel();
}

OAIPackageItemDTO::~OAIPackageItemDTO() {}

void OAIPackageItemDTO::initializeModel() {

    m_article_id_isSet = false;
    m_article_id_isValid = false;

    m_article_name_isSet = false;
    m_article_name_isValid = false;

    m_article_number_isSet = false;
    m_article_number_isValid = false;

    m_article_price_isSet = false;
    m_article_price_isValid = false;

    m_end_order_isSet = false;
    m_end_order_isValid = false;

    m_is_include_service_in_charge_isSet = false;
    m_is_include_service_in_charge_isValid = false;

    m_measure_unit_isSet = false;
    m_measure_unit_isValid = false;

    m_number_of_items_isSet = false;
    m_number_of_items_isValid = false;

    m_start_order_isSet = false;
    m_start_order_isValid = false;
}

void OAIPackageItemDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageItemDTO::fromJsonObject(QJsonObject json) {

    m_article_id_isValid = ::OpenAPI::fromJsonValue(m_article_id, json[QString("articleId")]);
    m_article_id_isSet = !json[QString("articleId")].isNull() && m_article_id_isValid;

    m_article_name_isValid = ::OpenAPI::fromJsonValue(m_article_name, json[QString("articleName")]);
    m_article_name_isSet = !json[QString("articleName")].isNull() && m_article_name_isValid;

    m_article_number_isValid = ::OpenAPI::fromJsonValue(m_article_number, json[QString("articleNumber")]);
    m_article_number_isSet = !json[QString("articleNumber")].isNull() && m_article_number_isValid;

    m_article_price_isValid = ::OpenAPI::fromJsonValue(m_article_price, json[QString("articlePrice")]);
    m_article_price_isSet = !json[QString("articlePrice")].isNull() && m_article_price_isValid;

    m_end_order_isValid = ::OpenAPI::fromJsonValue(m_end_order, json[QString("endOrder")]);
    m_end_order_isSet = !json[QString("endOrder")].isNull() && m_end_order_isValid;

    m_is_include_service_in_charge_isValid = ::OpenAPI::fromJsonValue(m_is_include_service_in_charge, json[QString("isIncludeServiceInCharge")]);
    m_is_include_service_in_charge_isSet = !json[QString("isIncludeServiceInCharge")].isNull() && m_is_include_service_in_charge_isValid;

    m_measure_unit_isValid = ::OpenAPI::fromJsonValue(m_measure_unit, json[QString("measureUnit")]);
    m_measure_unit_isSet = !json[QString("measureUnit")].isNull() && m_measure_unit_isValid;

    m_number_of_items_isValid = ::OpenAPI::fromJsonValue(m_number_of_items, json[QString("numberOfItems")]);
    m_number_of_items_isSet = !json[QString("numberOfItems")].isNull() && m_number_of_items_isValid;

    m_start_order_isValid = ::OpenAPI::fromJsonValue(m_start_order, json[QString("startOrder")]);
    m_start_order_isSet = !json[QString("startOrder")].isNull() && m_start_order_isValid;
}

QString OAIPackageItemDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageItemDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_article_id_isSet) {
        obj.insert(QString("articleId"), ::OpenAPI::toJsonValue(m_article_id));
    }
    if (m_article_name_isSet) {
        obj.insert(QString("articleName"), ::OpenAPI::toJsonValue(m_article_name));
    }
    if (m_article_number_isSet) {
        obj.insert(QString("articleNumber"), ::OpenAPI::toJsonValue(m_article_number));
    }
    if (m_article_price_isSet) {
        obj.insert(QString("articlePrice"), ::OpenAPI::toJsonValue(m_article_price));
    }
    if (m_end_order_isSet) {
        obj.insert(QString("endOrder"), ::OpenAPI::toJsonValue(m_end_order));
    }
    if (m_is_include_service_in_charge_isSet) {
        obj.insert(QString("isIncludeServiceInCharge"), ::OpenAPI::toJsonValue(m_is_include_service_in_charge));
    }
    if (m_measure_unit_isSet) {
        obj.insert(QString("measureUnit"), ::OpenAPI::toJsonValue(m_measure_unit));
    }
    if (m_number_of_items_isSet) {
        obj.insert(QString("numberOfItems"), ::OpenAPI::toJsonValue(m_number_of_items));
    }
    if (m_start_order_isSet) {
        obj.insert(QString("startOrder"), ::OpenAPI::toJsonValue(m_start_order));
    }
    return obj;
}

qint32 OAIPackageItemDTO::getArticleId() const {
    return m_article_id;
}
void OAIPackageItemDTO::setArticleId(const qint32 &article_id) {
    m_article_id = article_id;
    m_article_id_isSet = true;
}

bool OAIPackageItemDTO::is_article_id_Set() const{
    return m_article_id_isSet;
}

bool OAIPackageItemDTO::is_article_id_Valid() const{
    return m_article_id_isValid;
}

QString OAIPackageItemDTO::getArticleName() const {
    return m_article_name;
}
void OAIPackageItemDTO::setArticleName(const QString &article_name) {
    m_article_name = article_name;
    m_article_name_isSet = true;
}

bool OAIPackageItemDTO::is_article_name_Set() const{
    return m_article_name_isSet;
}

bool OAIPackageItemDTO::is_article_name_Valid() const{
    return m_article_name_isValid;
}

qint32 OAIPackageItemDTO::getArticleNumber() const {
    return m_article_number;
}
void OAIPackageItemDTO::setArticleNumber(const qint32 &article_number) {
    m_article_number = article_number;
    m_article_number_isSet = true;
}

bool OAIPackageItemDTO::is_article_number_Set() const{
    return m_article_number_isSet;
}

bool OAIPackageItemDTO::is_article_number_Valid() const{
    return m_article_number_isValid;
}

double OAIPackageItemDTO::getArticlePrice() const {
    return m_article_price;
}
void OAIPackageItemDTO::setArticlePrice(const double &article_price) {
    m_article_price = article_price;
    m_article_price_isSet = true;
}

bool OAIPackageItemDTO::is_article_price_Set() const{
    return m_article_price_isSet;
}

bool OAIPackageItemDTO::is_article_price_Valid() const{
    return m_article_price_isValid;
}

qint32 OAIPackageItemDTO::getEndOrder() const {
    return m_end_order;
}
void OAIPackageItemDTO::setEndOrder(const qint32 &end_order) {
    m_end_order = end_order;
    m_end_order_isSet = true;
}

bool OAIPackageItemDTO::is_end_order_Set() const{
    return m_end_order_isSet;
}

bool OAIPackageItemDTO::is_end_order_Valid() const{
    return m_end_order_isValid;
}

bool OAIPackageItemDTO::isIsIncludeServiceInCharge() const {
    return m_is_include_service_in_charge;
}
void OAIPackageItemDTO::setIsIncludeServiceInCharge(const bool &is_include_service_in_charge) {
    m_is_include_service_in_charge = is_include_service_in_charge;
    m_is_include_service_in_charge_isSet = true;
}

bool OAIPackageItemDTO::is_is_include_service_in_charge_Set() const{
    return m_is_include_service_in_charge_isSet;
}

bool OAIPackageItemDTO::is_is_include_service_in_charge_Valid() const{
    return m_is_include_service_in_charge_isValid;
}

QString OAIPackageItemDTO::getMeasureUnit() const {
    return m_measure_unit;
}
void OAIPackageItemDTO::setMeasureUnit(const QString &measure_unit) {
    m_measure_unit = measure_unit;
    m_measure_unit_isSet = true;
}

bool OAIPackageItemDTO::is_measure_unit_Set() const{
    return m_measure_unit_isSet;
}

bool OAIPackageItemDTO::is_measure_unit_Valid() const{
    return m_measure_unit_isValid;
}

double OAIPackageItemDTO::getNumberOfItems() const {
    return m_number_of_items;
}
void OAIPackageItemDTO::setNumberOfItems(const double &number_of_items) {
    m_number_of_items = number_of_items;
    m_number_of_items_isSet = true;
}

bool OAIPackageItemDTO::is_number_of_items_Set() const{
    return m_number_of_items_isSet;
}

bool OAIPackageItemDTO::is_number_of_items_Valid() const{
    return m_number_of_items_isValid;
}

qint32 OAIPackageItemDTO::getStartOrder() const {
    return m_start_order;
}
void OAIPackageItemDTO::setStartOrder(const qint32 &start_order) {
    m_start_order = start_order;
    m_start_order_isSet = true;
}

bool OAIPackageItemDTO::is_start_order_Set() const{
    return m_start_order_isSet;
}

bool OAIPackageItemDTO::is_start_order_Valid() const{
    return m_start_order_isValid;
}

bool OAIPackageItemDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_article_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_article_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_article_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_article_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_include_service_in_charge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measure_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageItemDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_article_id_isValid && true;
}

} // namespace OpenAPI
