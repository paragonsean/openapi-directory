/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIArticleApi_H
#define OAI_OAIArticleApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiException.h"
#include "OAIApiResponse.h"
#include "OAIArticleDTO.h"
#include "OAIDefaultResponseDTOOfArticleDTO.h"
#include "OAIDefaultResponseDTOOfInteger.h"
#include "OAIDefaultResponseDTOOfListOfArticleSearchDTO.h"
#include "OAIDefaultResponseDTOOfStatusDTO.h"
#include "OAIGymArticleDetailsDTO.h"
#include "OAIMeasureUnitDTO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIArticleApi : public QObject {
    Q_OBJECT

public:
    OAIArticleApi(const int timeOut = 0);
    ~OAIArticleApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_measure_unit_dto QList<OAIMeasureUnitDTO> [required]
    */
    virtual void articleAddMeasureUnit(const QList<OAIMeasureUnitDTO> &oai_measure_unit_dto);

    /**
    * @param[in]  article_id qint32 [optional]
    */
    virtual void articleDelete(const ::OpenAPI::OptionalParam<qint32> &article_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  article_id qint32 [required]
    */
    virtual void articleGet(const qint32 &article_id);

    /**
    * @param[in]  search_text QString [optional]
    * @param[in]  gym_ids QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void articleGetAddons(const ::OpenAPI::OptionalParam<QString> &search_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &gym_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  type QString [optional]
    */
    virtual void articleGetMeasureUnits(const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());


    virtual void articleGetRevenueAccounts();

    /**
    * @param[in]  article_id qint32 [required]
    * @param[in]  gym_id qint32 [required]
    */
    virtual void articleGymArticleDetails(const qint32 &article_id, const qint32 &gym_id);

    /**
    * @param[in]  oai_article_dto OAIArticleDTO [required]
    */
    virtual void articlePost(const OAIArticleDTO &oai_article_dto);

    /**
    * @param[in]  oai_article_dto OAIArticleDTO [required]
    */
    virtual void articlePut(const OAIArticleDTO &oai_article_dto);

    /**
    * @param[in]  search_text QString [optional]
    * @param[in]  gym_id qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  active_status qint32 [optional]
    */
    virtual void articleSearch(const ::OpenAPI::OptionalParam<QString> &search_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &gym_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &active_status = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_gym_article_details_dto QList<OAIGymArticleDetailsDTO> [required]
    */
    virtual void articleUpdateArticleGymDetails(const QList<OAIGymArticleDetailsDTO> &oai_gym_article_details_dto);

    /**
    * @param[in]  article_id qint32 [optional]
    * @param[in]  status qint32 [optional]
    * @param[in]  user_name QString [optional]
    */
    virtual void articleUpdateStatus(const ::OpenAPI::OptionalParam<qint32> &article_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &status = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &user_name = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void articleAddMeasureUnitCallback(OAIHttpRequestWorker *worker);
    void articleDeleteCallback(OAIHttpRequestWorker *worker);
    void articleGetCallback(OAIHttpRequestWorker *worker);
    void articleGetAddonsCallback(OAIHttpRequestWorker *worker);
    void articleGetMeasureUnitsCallback(OAIHttpRequestWorker *worker);
    void articleGetRevenueAccountsCallback(OAIHttpRequestWorker *worker);
    void articleGymArticleDetailsCallback(OAIHttpRequestWorker *worker);
    void articlePostCallback(OAIHttpRequestWorker *worker);
    void articlePutCallback(OAIHttpRequestWorker *worker);
    void articleSearchCallback(OAIHttpRequestWorker *worker);
    void articleUpdateArticleGymDetailsCallback(OAIHttpRequestWorker *worker);
    void articleUpdateStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void articleAddMeasureUnitSignal(OAIDefaultResponseDTOOfStatusDTO summary);
    void articleDeleteSignal(OAIDefaultResponseDTOOfInteger summary);
    void articleGetSignal(OAIDefaultResponseDTOOfArticleDTO summary);
    void articleGetAddonsSignal(OAIDefaultResponseDTOOfListOfArticleSearchDTO summary);
    void articleGetMeasureUnitsSignal(OAIDefaultResponseDTOOfStatusDTO summary);
    void articleGetRevenueAccountsSignal(OAIDefaultResponseDTOOfStatusDTO summary);
    void articleGymArticleDetailsSignal(OAIGymArticleDetailsDTO summary);
    void articlePostSignal(OAIDefaultResponseDTOOfStatusDTO summary);
    void articlePutSignal(OAIDefaultResponseDTOOfStatusDTO summary);
    void articleSearchSignal(OAIDefaultResponseDTOOfListOfArticleSearchDTO summary);
    void articleUpdateArticleGymDetailsSignal(OAIDefaultResponseDTOOfStatusDTO summary);
    void articleUpdateStatusSignal(OAIDefaultResponseDTOOfInteger summary);


    void articleAddMeasureUnitSignalFull(OAIHttpRequestWorker *worker, OAIDefaultResponseDTOOfStatusDTO summary);
    void articleDeleteSignalFull(OAIHttpRequestWorker *worker, OAIDefaultResponseDTOOfInteger summary);
    void articleGetSignalFull(OAIHttpRequestWorker *worker, OAIDefaultResponseDTOOfArticleDTO summary);
    void articleGetAddonsSignalFull(OAIHttpRequestWorker *worker, OAIDefaultResponseDTOOfListOfArticleSearchDTO summary);
    void articleGetMeasureUnitsSignalFull(OAIHttpRequestWorker *worker, OAIDefaultResponseDTOOfStatusDTO summary);
    void articleGetRevenueAccountsSignalFull(OAIHttpRequestWorker *worker, OAIDefaultResponseDTOOfStatusDTO summary);
    void articleGymArticleDetailsSignalFull(OAIHttpRequestWorker *worker, OAIGymArticleDetailsDTO summary);
    void articlePostSignalFull(OAIHttpRequestWorker *worker, OAIDefaultResponseDTOOfStatusDTO summary);
    void articlePutSignalFull(OAIHttpRequestWorker *worker, OAIDefaultResponseDTOOfStatusDTO summary);
    void articleSearchSignalFull(OAIHttpRequestWorker *worker, OAIDefaultResponseDTOOfListOfArticleSearchDTO summary);
    void articleUpdateArticleGymDetailsSignalFull(OAIHttpRequestWorker *worker, OAIDefaultResponseDTOOfStatusDTO summary);
    void articleUpdateStatusSignalFull(OAIHttpRequestWorker *worker, OAIDefaultResponseDTOOfInteger summary);

    Q_DECL_DEPRECATED_X("Use articleAddMeasureUnitSignalError() instead")
    void articleAddMeasureUnitSignalE(OAIDefaultResponseDTOOfStatusDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleAddMeasureUnitSignalError(OAIDefaultResponseDTOOfStatusDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleDeleteSignalError() instead")
    void articleDeleteSignalE(OAIDefaultResponseDTOOfInteger summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleDeleteSignalError(OAIDefaultResponseDTOOfInteger summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleGetSignalError() instead")
    void articleGetSignalE(OAIDefaultResponseDTOOfArticleDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleGetSignalError(OAIDefaultResponseDTOOfArticleDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleGetAddonsSignalError() instead")
    void articleGetAddonsSignalE(OAIDefaultResponseDTOOfListOfArticleSearchDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleGetAddonsSignalError(OAIDefaultResponseDTOOfListOfArticleSearchDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleGetMeasureUnitsSignalError() instead")
    void articleGetMeasureUnitsSignalE(OAIDefaultResponseDTOOfStatusDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleGetMeasureUnitsSignalError(OAIDefaultResponseDTOOfStatusDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleGetRevenueAccountsSignalError() instead")
    void articleGetRevenueAccountsSignalE(OAIDefaultResponseDTOOfStatusDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleGetRevenueAccountsSignalError(OAIDefaultResponseDTOOfStatusDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleGymArticleDetailsSignalError() instead")
    void articleGymArticleDetailsSignalE(OAIGymArticleDetailsDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleGymArticleDetailsSignalError(OAIGymArticleDetailsDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlePostSignalError() instead")
    void articlePostSignalE(OAIDefaultResponseDTOOfStatusDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articlePostSignalError(OAIDefaultResponseDTOOfStatusDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlePutSignalError() instead")
    void articlePutSignalE(OAIDefaultResponseDTOOfStatusDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articlePutSignalError(OAIDefaultResponseDTOOfStatusDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleSearchSignalError() instead")
    void articleSearchSignalE(OAIDefaultResponseDTOOfListOfArticleSearchDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleSearchSignalError(OAIDefaultResponseDTOOfListOfArticleSearchDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleUpdateArticleGymDetailsSignalError() instead")
    void articleUpdateArticleGymDetailsSignalE(OAIDefaultResponseDTOOfStatusDTO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleUpdateArticleGymDetailsSignalError(OAIDefaultResponseDTOOfStatusDTO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleUpdateStatusSignalError() instead")
    void articleUpdateStatusSignalE(OAIDefaultResponseDTOOfInteger summary, QNetworkReply::NetworkError error_type, QString error_str);
    void articleUpdateStatusSignalError(OAIDefaultResponseDTOOfInteger summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use articleAddMeasureUnitSignalErrorFull() instead")
    void articleAddMeasureUnitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleAddMeasureUnitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleDeleteSignalErrorFull() instead")
    void articleDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleGetSignalErrorFull() instead")
    void articleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleGetAddonsSignalErrorFull() instead")
    void articleGetAddonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleGetAddonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleGetMeasureUnitsSignalErrorFull() instead")
    void articleGetMeasureUnitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleGetMeasureUnitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleGetRevenueAccountsSignalErrorFull() instead")
    void articleGetRevenueAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleGetRevenueAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleGymArticleDetailsSignalErrorFull() instead")
    void articleGymArticleDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleGymArticleDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlePostSignalErrorFull() instead")
    void articlePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articlePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articlePutSignalErrorFull() instead")
    void articlePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articlePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleSearchSignalErrorFull() instead")
    void articleSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleUpdateArticleGymDetailsSignalErrorFull() instead")
    void articleUpdateArticleGymDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleUpdateArticleGymDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use articleUpdateStatusSignalErrorFull() instead")
    void articleUpdateStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void articleUpdateStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
