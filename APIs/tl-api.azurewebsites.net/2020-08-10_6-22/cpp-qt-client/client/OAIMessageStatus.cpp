/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageStatus::OAIMessageStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageStatus::OAIMessageStatus() {
    this->initializeModel();
}

OAIMessageStatus::~OAIMessageStatus() {}

void OAIMessageStatus::initializeModel() {

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_status_id_isSet = false;
    m_status_id_isValid = false;

    m_status_text_isSet = false;
    m_status_text_isValid = false;
}

void OAIMessageStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageStatus::fromJsonObject(QJsonObject json) {

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_status_id_isValid = ::OpenAPI::fromJsonValue(m_status_id, json[QString("statusId")]);
    m_status_id_isSet = !json[QString("statusId")].isNull() && m_status_id_isValid;

    m_status_text_isValid = ::OpenAPI::fromJsonValue(m_status_text, json[QString("statusText")]);
    m_status_text_isSet = !json[QString("statusText")].isNull() && m_status_text_isValid;
}

QString OAIMessageStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_status_id_isSet) {
        obj.insert(QString("statusId"), ::OpenAPI::toJsonValue(m_status_id));
    }
    if (m_status_text_isSet) {
        obj.insert(QString("statusText"), ::OpenAPI::toJsonValue(m_status_text));
    }
    return obj;
}

QString OAIMessageStatus::getMessageId() const {
    return m_message_id;
}
void OAIMessageStatus::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIMessageStatus::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIMessageStatus::is_message_id_Valid() const{
    return m_message_id_isValid;
}

qint32 OAIMessageStatus::getReferenceId() const {
    return m_reference_id;
}
void OAIMessageStatus::setReferenceId(const qint32 &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIMessageStatus::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIMessageStatus::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QJsonValue OAIMessageStatus::getSource() const {
    return m_source;
}
void OAIMessageStatus::setSource(const QJsonValue &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIMessageStatus::is_source_Set() const{
    return m_source_isSet;
}

bool OAIMessageStatus::is_source_Valid() const{
    return m_source_isValid;
}

qint32 OAIMessageStatus::getStatusId() const {
    return m_status_id;
}
void OAIMessageStatus::setStatusId(const qint32 &status_id) {
    m_status_id = status_id;
    m_status_id_isSet = true;
}

bool OAIMessageStatus::is_status_id_Set() const{
    return m_status_id_isSet;
}

bool OAIMessageStatus::is_status_id_Valid() const{
    return m_status_id_isValid;
}

QString OAIMessageStatus::getStatusText() const {
    return m_status_text;
}
void OAIMessageStatus::setStatusText(const QString &status_text) {
    m_status_text = status_text;
    m_status_text_isSet = true;
}

bool OAIMessageStatus::is_status_text_Set() const{
    return m_status_text_isSet;
}

bool OAIMessageStatus::is_status_text_Valid() const{
    return m_status_text_isValid;
}

bool OAIMessageStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
