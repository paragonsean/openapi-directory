/**
 * API
 * Web API for TL mobile and web app
 *
 * The version of the OpenAPI document: 2020-08-10_6-22
 * Contact: support@unicorn-solutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiResponse::OAIApiResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiResponse::OAIApiResponse() {
    this->initializeModel();
}

OAIApiResponse::~OAIApiResponse() {}

void OAIApiResponse::initializeModel() {

    m_is_error_isSet = false;
    m_is_error_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_response_exception_isSet = false;
    m_response_exception_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIApiResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiResponse::fromJsonObject(QJsonObject json) {

    m_is_error_isValid = ::OpenAPI::fromJsonValue(m_is_error, json[QString("isError")]);
    m_is_error_isSet = !json[QString("isError")].isNull() && m_is_error_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_response_exception_isValid = ::OpenAPI::fromJsonValue(m_response_exception, json[QString("responseException")]);
    m_response_exception_isSet = !json[QString("responseException")].isNull() && m_response_exception_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIApiResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_is_error_isSet) {
        obj.insert(QString("isError"), ::OpenAPI::toJsonValue(m_is_error));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_response_exception_isSet) {
        obj.insert(QString("responseException"), ::OpenAPI::toJsonValue(m_response_exception));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIApiResponse::isIsError() const {
    return m_is_error;
}
void OAIApiResponse::setIsError(const bool &is_error) {
    m_is_error = is_error;
    m_is_error_isSet = true;
}

bool OAIApiResponse::is_is_error_Set() const{
    return m_is_error_isSet;
}

bool OAIApiResponse::is_is_error_Valid() const{
    return m_is_error_isValid;
}

QString OAIApiResponse::getMessage() const {
    return m_message;
}
void OAIApiResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIApiResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIApiResponse::is_message_Valid() const{
    return m_message_isValid;
}

QJsonValue OAIApiResponse::getResponseException() const {
    return m_response_exception;
}
void OAIApiResponse::setResponseException(const QJsonValue &response_exception) {
    m_response_exception = response_exception;
    m_response_exception_isSet = true;
}

bool OAIApiResponse::is_response_exception_Set() const{
    return m_response_exception_isSet;
}

bool OAIApiResponse::is_response_exception_Valid() const{
    return m_response_exception_isValid;
}

QJsonValue OAIApiResponse::getResult() const {
    return m_result;
}
void OAIApiResponse::setResult(const QJsonValue &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIApiResponse::is_result_Set() const{
    return m_result_isSet;
}

bool OAIApiResponse::is_result_Valid() const{
    return m_result_isValid;
}

qint32 OAIApiResponse::getStatusCode() const {
    return m_status_code;
}
void OAIApiResponse::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIApiResponse::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIApiResponse::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIApiResponse::getVersion() const {
    return m_version;
}
void OAIApiResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIApiResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIApiResponse::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIApiResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
