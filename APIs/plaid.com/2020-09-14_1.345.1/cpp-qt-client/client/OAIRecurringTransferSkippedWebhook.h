/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRecurringTransferSkippedWebhook.h
 *
 * Fired when Plaid is unable to originate a new ACH transaction of the recurring transfer on the planned date.
 */

#ifndef OAIRecurringTransferSkippedWebhook_H
#define OAIRecurringTransferSkippedWebhook_H

#include <QJsonObject>

#include "OAITransferAuthorizationDecision.h"
#include "OAITransferAuthorizationDecisionRationaleCode.h"
#include "OAIWebhookEnvironmentValues.h"
#include <QDate>
#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRecurringTransferSkippedWebhook : public OAIObject {
public:
    OAIRecurringTransferSkippedWebhook();
    OAIRecurringTransferSkippedWebhook(QString json);
    ~OAIRecurringTransferSkippedWebhook() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAITransferAuthorizationDecision getAuthorizationDecision() const;
    void setAuthorizationDecision(const OAITransferAuthorizationDecision &authorization_decision);
    bool is_authorization_decision_Set() const;
    bool is_authorization_decision_Valid() const;

    OAITransferAuthorizationDecisionRationaleCode getAuthorizationDecisionRationaleCode() const;
    void setAuthorizationDecisionRationaleCode(const OAITransferAuthorizationDecisionRationaleCode &authorization_decision_rationale_code);
    bool is_authorization_decision_rationale_code_Set() const;
    bool is_authorization_decision_rationale_code_Valid() const;

    OAIWebhookEnvironmentValues getEnvironment() const;
    void setEnvironment(const OAIWebhookEnvironmentValues &environment);
    bool is_environment_Set() const;
    bool is_environment_Valid() const;

    QString getRecurringTransferId() const;
    void setRecurringTransferId(const QString &recurring_transfer_id);
    bool is_recurring_transfer_id_Set() const;
    bool is_recurring_transfer_id_Valid() const;

    QDate getSkippedOriginationDate() const;
    void setSkippedOriginationDate(const QDate &skipped_origination_date);
    bool is_skipped_origination_date_Set() const;
    bool is_skipped_origination_date_Valid() const;

    QString getWebhookCode() const;
    void setWebhookCode(const QString &webhook_code);
    bool is_webhook_code_Set() const;
    bool is_webhook_code_Valid() const;

    QString getWebhookType() const;
    void setWebhookType(const QString &webhook_type);
    bool is_webhook_type_Set() const;
    bool is_webhook_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAITransferAuthorizationDecision m_authorization_decision;
    bool m_authorization_decision_isSet;
    bool m_authorization_decision_isValid;

    OAITransferAuthorizationDecisionRationaleCode m_authorization_decision_rationale_code;
    bool m_authorization_decision_rationale_code_isSet;
    bool m_authorization_decision_rationale_code_isValid;

    OAIWebhookEnvironmentValues m_environment;
    bool m_environment_isSet;
    bool m_environment_isValid;

    QString m_recurring_transfer_id;
    bool m_recurring_transfer_id_isSet;
    bool m_recurring_transfer_id_isValid;

    QDate m_skipped_origination_date;
    bool m_skipped_origination_date_isSet;
    bool m_skipped_origination_date_isValid;

    QString m_webhook_code;
    bool m_webhook_code_isSet;
    bool m_webhook_code_isValid;

    QString m_webhook_type;
    bool m_webhook_type_isSet;
    bool m_webhook_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRecurringTransferSkippedWebhook)

#endif // OAIRecurringTransferSkippedWebhook_H
