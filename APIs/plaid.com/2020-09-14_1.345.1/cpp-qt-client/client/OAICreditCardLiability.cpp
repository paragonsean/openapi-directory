/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreditCardLiability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreditCardLiability::OAICreditCardLiability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreditCardLiability::OAICreditCardLiability() {
    this->initializeModel();
}

OAICreditCardLiability::~OAICreditCardLiability() {}

void OAICreditCardLiability::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_aprs_isSet = false;
    m_aprs_isValid = false;

    m_is_overdue_isSet = false;
    m_is_overdue_isValid = false;

    m_last_payment_amount_isSet = false;
    m_last_payment_amount_isValid = false;

    m_last_payment_date_isSet = false;
    m_last_payment_date_isValid = false;

    m_last_statement_balance_isSet = false;
    m_last_statement_balance_isValid = false;

    m_last_statement_issue_date_isSet = false;
    m_last_statement_issue_date_isValid = false;

    m_minimum_payment_amount_isSet = false;
    m_minimum_payment_amount_isValid = false;

    m_next_payment_due_date_isSet = false;
    m_next_payment_due_date_isValid = false;
}

void OAICreditCardLiability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreditCardLiability::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_aprs_isValid = ::OpenAPI::fromJsonValue(m_aprs, json[QString("aprs")]);
    m_aprs_isSet = !json[QString("aprs")].isNull() && m_aprs_isValid;

    m_is_overdue_isValid = ::OpenAPI::fromJsonValue(m_is_overdue, json[QString("is_overdue")]);
    m_is_overdue_isSet = !json[QString("is_overdue")].isNull() && m_is_overdue_isValid;

    m_last_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_last_payment_amount, json[QString("last_payment_amount")]);
    m_last_payment_amount_isSet = !json[QString("last_payment_amount")].isNull() && m_last_payment_amount_isValid;

    m_last_payment_date_isValid = ::OpenAPI::fromJsonValue(m_last_payment_date, json[QString("last_payment_date")]);
    m_last_payment_date_isSet = !json[QString("last_payment_date")].isNull() && m_last_payment_date_isValid;

    m_last_statement_balance_isValid = ::OpenAPI::fromJsonValue(m_last_statement_balance, json[QString("last_statement_balance")]);
    m_last_statement_balance_isSet = !json[QString("last_statement_balance")].isNull() && m_last_statement_balance_isValid;

    m_last_statement_issue_date_isValid = ::OpenAPI::fromJsonValue(m_last_statement_issue_date, json[QString("last_statement_issue_date")]);
    m_last_statement_issue_date_isSet = !json[QString("last_statement_issue_date")].isNull() && m_last_statement_issue_date_isValid;

    m_minimum_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_minimum_payment_amount, json[QString("minimum_payment_amount")]);
    m_minimum_payment_amount_isSet = !json[QString("minimum_payment_amount")].isNull() && m_minimum_payment_amount_isValid;

    m_next_payment_due_date_isValid = ::OpenAPI::fromJsonValue(m_next_payment_due_date, json[QString("next_payment_due_date")]);
    m_next_payment_due_date_isSet = !json[QString("next_payment_due_date")].isNull() && m_next_payment_due_date_isValid;
}

QString OAICreditCardLiability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreditCardLiability::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_aprs.size() > 0) {
        obj.insert(QString("aprs"), ::OpenAPI::toJsonValue(m_aprs));
    }
    if (m_is_overdue_isSet) {
        obj.insert(QString("is_overdue"), ::OpenAPI::toJsonValue(m_is_overdue));
    }
    if (m_last_payment_amount_isSet) {
        obj.insert(QString("last_payment_amount"), ::OpenAPI::toJsonValue(m_last_payment_amount));
    }
    if (m_last_payment_date_isSet) {
        obj.insert(QString("last_payment_date"), ::OpenAPI::toJsonValue(m_last_payment_date));
    }
    if (m_last_statement_balance_isSet) {
        obj.insert(QString("last_statement_balance"), ::OpenAPI::toJsonValue(m_last_statement_balance));
    }
    if (m_last_statement_issue_date_isSet) {
        obj.insert(QString("last_statement_issue_date"), ::OpenAPI::toJsonValue(m_last_statement_issue_date));
    }
    if (m_minimum_payment_amount_isSet) {
        obj.insert(QString("minimum_payment_amount"), ::OpenAPI::toJsonValue(m_minimum_payment_amount));
    }
    if (m_next_payment_due_date_isSet) {
        obj.insert(QString("next_payment_due_date"), ::OpenAPI::toJsonValue(m_next_payment_due_date));
    }
    return obj;
}

QString OAICreditCardLiability::getAccountId() const {
    return m_account_id;
}
void OAICreditCardLiability::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICreditCardLiability::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICreditCardLiability::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QList<OAIAPR> OAICreditCardLiability::getAprs() const {
    return m_aprs;
}
void OAICreditCardLiability::setAprs(const QList<OAIAPR> &aprs) {
    m_aprs = aprs;
    m_aprs_isSet = true;
}

bool OAICreditCardLiability::is_aprs_Set() const{
    return m_aprs_isSet;
}

bool OAICreditCardLiability::is_aprs_Valid() const{
    return m_aprs_isValid;
}

bool OAICreditCardLiability::isIsOverdue() const {
    return m_is_overdue;
}
void OAICreditCardLiability::setIsOverdue(const bool &is_overdue) {
    m_is_overdue = is_overdue;
    m_is_overdue_isSet = true;
}

bool OAICreditCardLiability::is_is_overdue_Set() const{
    return m_is_overdue_isSet;
}

bool OAICreditCardLiability::is_is_overdue_Valid() const{
    return m_is_overdue_isValid;
}

double OAICreditCardLiability::getLastPaymentAmount() const {
    return m_last_payment_amount;
}
void OAICreditCardLiability::setLastPaymentAmount(const double &last_payment_amount) {
    m_last_payment_amount = last_payment_amount;
    m_last_payment_amount_isSet = true;
}

bool OAICreditCardLiability::is_last_payment_amount_Set() const{
    return m_last_payment_amount_isSet;
}

bool OAICreditCardLiability::is_last_payment_amount_Valid() const{
    return m_last_payment_amount_isValid;
}

QDate OAICreditCardLiability::getLastPaymentDate() const {
    return m_last_payment_date;
}
void OAICreditCardLiability::setLastPaymentDate(const QDate &last_payment_date) {
    m_last_payment_date = last_payment_date;
    m_last_payment_date_isSet = true;
}

bool OAICreditCardLiability::is_last_payment_date_Set() const{
    return m_last_payment_date_isSet;
}

bool OAICreditCardLiability::is_last_payment_date_Valid() const{
    return m_last_payment_date_isValid;
}

double OAICreditCardLiability::getLastStatementBalance() const {
    return m_last_statement_balance;
}
void OAICreditCardLiability::setLastStatementBalance(const double &last_statement_balance) {
    m_last_statement_balance = last_statement_balance;
    m_last_statement_balance_isSet = true;
}

bool OAICreditCardLiability::is_last_statement_balance_Set() const{
    return m_last_statement_balance_isSet;
}

bool OAICreditCardLiability::is_last_statement_balance_Valid() const{
    return m_last_statement_balance_isValid;
}

QDate OAICreditCardLiability::getLastStatementIssueDate() const {
    return m_last_statement_issue_date;
}
void OAICreditCardLiability::setLastStatementIssueDate(const QDate &last_statement_issue_date) {
    m_last_statement_issue_date = last_statement_issue_date;
    m_last_statement_issue_date_isSet = true;
}

bool OAICreditCardLiability::is_last_statement_issue_date_Set() const{
    return m_last_statement_issue_date_isSet;
}

bool OAICreditCardLiability::is_last_statement_issue_date_Valid() const{
    return m_last_statement_issue_date_isValid;
}

double OAICreditCardLiability::getMinimumPaymentAmount() const {
    return m_minimum_payment_amount;
}
void OAICreditCardLiability::setMinimumPaymentAmount(const double &minimum_payment_amount) {
    m_minimum_payment_amount = minimum_payment_amount;
    m_minimum_payment_amount_isSet = true;
}

bool OAICreditCardLiability::is_minimum_payment_amount_Set() const{
    return m_minimum_payment_amount_isSet;
}

bool OAICreditCardLiability::is_minimum_payment_amount_Valid() const{
    return m_minimum_payment_amount_isValid;
}

QDate OAICreditCardLiability::getNextPaymentDueDate() const {
    return m_next_payment_due_date;
}
void OAICreditCardLiability::setNextPaymentDueDate(const QDate &next_payment_due_date) {
    m_next_payment_due_date = next_payment_due_date;
    m_next_payment_due_date_isSet = true;
}

bool OAICreditCardLiability::is_next_payment_due_date_Set() const{
    return m_next_payment_due_date_isSet;
}

bool OAICreditCardLiability::is_next_payment_due_date_Valid() const{
    return m_next_payment_due_date_isValid;
}

bool OAICreditCardLiability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aprs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_overdue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_payment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_statement_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_statement_issue_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_payment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_payment_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreditCardLiability::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_aprs_isValid && m_is_overdue_isValid && m_last_payment_amount_isValid && m_last_payment_date_isValid && m_last_statement_balance_isValid && m_last_statement_issue_date_isValid && m_minimum_payment_amount_isValid && m_next_payment_due_date_isValid && true;
}

} // namespace OpenAPI
