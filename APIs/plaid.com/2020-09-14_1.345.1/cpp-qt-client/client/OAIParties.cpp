/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParties::OAIParties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParties::OAIParties() {
    this->initializeModel();
}

OAIParties::~OAIParties() {}

void OAIParties::initializeModel() {

    m_party_isSet = false;
    m_party_isValid = false;
}

void OAIParties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParties::fromJsonObject(QJsonObject json) {

    m_party_isValid = ::OpenAPI::fromJsonValue(m_party, json[QString("PARTY")]);
    m_party_isSet = !json[QString("PARTY")].isNull() && m_party_isValid;
}

QString OAIParties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParties::asJsonObject() const {
    QJsonObject obj;
    if (m_party.size() > 0) {
        obj.insert(QString("PARTY"), ::OpenAPI::toJsonValue(m_party));
    }
    return obj;
}

QList<OAIParty> OAIParties::getParty() const {
    return m_party;
}
void OAIParties::setParty(const QList<OAIParty> &party) {
    m_party = party;
    m_party_isSet = true;
}

bool OAIParties::is_party_Set() const{
    return m_party_isSet;
}

bool OAIParties::is_party_Valid() const{
    return m_party_isValid;
}

bool OAIParties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_party.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_party_isValid && true;
}

} // namespace OpenAPI
