/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScreeningHitAnalysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScreeningHitAnalysis::OAIScreeningHitAnalysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScreeningHitAnalysis::OAIScreeningHitAnalysis() {
    this->initializeModel();
}

OAIScreeningHitAnalysis::~OAIScreeningHitAnalysis() {}

void OAIScreeningHitAnalysis::initializeModel() {

    m_dates_of_birth_isSet = false;
    m_dates_of_birth_isValid = false;

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_search_terms_version_isSet = false;
    m_search_terms_version_isValid = false;
}

void OAIScreeningHitAnalysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScreeningHitAnalysis::fromJsonObject(QJsonObject json) {

    m_dates_of_birth_isValid = ::OpenAPI::fromJsonValue(m_dates_of_birth, json[QString("dates_of_birth")]);
    m_dates_of_birth_isSet = !json[QString("dates_of_birth")].isNull() && m_dates_of_birth_isValid;

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_search_terms_version_isValid = ::OpenAPI::fromJsonValue(m_search_terms_version, json[QString("search_terms_version")]);
    m_search_terms_version_isSet = !json[QString("search_terms_version")].isNull() && m_search_terms_version_isValid;
}

QString OAIScreeningHitAnalysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScreeningHitAnalysis::asJsonObject() const {
    QJsonObject obj;
    if (m_dates_of_birth.isSet()) {
        obj.insert(QString("dates_of_birth"), ::OpenAPI::toJsonValue(m_dates_of_birth));
    }
    if (m_documents.isSet()) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_locations.isSet()) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_names.isSet()) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_search_terms_version_isSet) {
        obj.insert(QString("search_terms_version"), ::OpenAPI::toJsonValue(m_search_terms_version));
    }
    return obj;
}

OAIMatchSummaryCode OAIScreeningHitAnalysis::getDatesOfBirth() const {
    return m_dates_of_birth;
}
void OAIScreeningHitAnalysis::setDatesOfBirth(const OAIMatchSummaryCode &dates_of_birth) {
    m_dates_of_birth = dates_of_birth;
    m_dates_of_birth_isSet = true;
}

bool OAIScreeningHitAnalysis::is_dates_of_birth_Set() const{
    return m_dates_of_birth_isSet;
}

bool OAIScreeningHitAnalysis::is_dates_of_birth_Valid() const{
    return m_dates_of_birth_isValid;
}

OAIMatchSummaryCode OAIScreeningHitAnalysis::getDocuments() const {
    return m_documents;
}
void OAIScreeningHitAnalysis::setDocuments(const OAIMatchSummaryCode &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIScreeningHitAnalysis::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIScreeningHitAnalysis::is_documents_Valid() const{
    return m_documents_isValid;
}

OAIMatchSummaryCode OAIScreeningHitAnalysis::getLocations() const {
    return m_locations;
}
void OAIScreeningHitAnalysis::setLocations(const OAIMatchSummaryCode &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIScreeningHitAnalysis::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIScreeningHitAnalysis::is_locations_Valid() const{
    return m_locations_isValid;
}

OAIMatchSummaryCode OAIScreeningHitAnalysis::getNames() const {
    return m_names;
}
void OAIScreeningHitAnalysis::setNames(const OAIMatchSummaryCode &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIScreeningHitAnalysis::is_names_Set() const{
    return m_names_isSet;
}

bool OAIScreeningHitAnalysis::is_names_Valid() const{
    return m_names_isValid;
}

double OAIScreeningHitAnalysis::getSearchTermsVersion() const {
    return m_search_terms_version;
}
void OAIScreeningHitAnalysis::setSearchTermsVersion(const double &search_terms_version) {
    m_search_terms_version = search_terms_version;
    m_search_terms_version_isSet = true;
}

bool OAIScreeningHitAnalysis::is_search_terms_version_Set() const{
    return m_search_terms_version_isSet;
}

bool OAIScreeningHitAnalysis::is_search_terms_version_Valid() const{
    return m_search_terms_version_isValid;
}

bool OAIScreeningHitAnalysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dates_of_birth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_terms_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScreeningHitAnalysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_search_terms_version_isValid && true;
}

} // namespace OpenAPI
