/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionCode::OAITransactionCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionCode::OAITransactionCode() {
    this->initializeModel();
}

OAITransactionCode::~OAITransactionCode() {}

void OAITransactionCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITransactionCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITransactionCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("adjustment", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionCode::ADJUSTMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("atm", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionCode::ATM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("bank charge", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionCode::BANK_CHARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("bill payment", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionCode::BILL_PAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cash", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionCode::CASH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cashback", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionCode::CASHBACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cheque", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionCode::CHEQUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("direct debit", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionCode::DIRECT_DEBIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("interest", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionCode::INTEREST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("purchase", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionCode::PURCHASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("standing order", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionCode::STANDING_ORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("transfer", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionCode::TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITransactionCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITransactionCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITransactionCode::ADJUSTMENT:
            val = "adjustment";
            break;
        case eOAITransactionCode::ATM:
            val = "atm";
            break;
        case eOAITransactionCode::BANK_CHARGE:
            val = "bank charge";
            break;
        case eOAITransactionCode::BILL_PAYMENT:
            val = "bill payment";
            break;
        case eOAITransactionCode::CASH:
            val = "cash";
            break;
        case eOAITransactionCode::CASHBACK:
            val = "cashback";
            break;
        case eOAITransactionCode::CHEQUE:
            val = "cheque";
            break;
        case eOAITransactionCode::DIRECT_DEBIT:
            val = "direct debit";
            break;
        case eOAITransactionCode::INTEREST:
            val = "interest";
            break;
        case eOAITransactionCode::PURCHASE:
            val = "purchase";
            break;
        case eOAITransactionCode::STANDING_ORDER:
            val = "standing order";
            break;
        case eOAITransactionCode::TRANSFER:
            val = "transfer";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITransactionCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITransactionCode::eOAITransactionCode OAITransactionCode::getValue() const {
    return m_value;
}

void OAITransactionCode::setValue(const OAITransactionCode::eOAITransactionCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITransactionCode::isSet() const {
    
    return m_value_isSet;
}

bool OAITransactionCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
