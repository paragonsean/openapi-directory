/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWalletTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWalletTransaction::OAIWalletTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWalletTransaction::OAIWalletTransaction() {
    this->initializeModel();
}

OAIWalletTransaction::~OAIWalletTransaction() {}

void OAIWalletTransaction::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_counterparty_isSet = false;
    m_counterparty_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_status_update_isSet = false;
    m_last_status_update_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_wallet_id_isSet = false;
    m_wallet_id_isValid = false;
}

void OAIWalletTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWalletTransaction::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_counterparty_isValid = ::OpenAPI::fromJsonValue(m_counterparty, json[QString("counterparty")]);
    m_counterparty_isSet = !json[QString("counterparty")].isNull() && m_counterparty_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_last_status_update_isValid = ::OpenAPI::fromJsonValue(m_last_status_update, json[QString("last_status_update")]);
    m_last_status_update_isSet = !json[QString("last_status_update")].isNull() && m_last_status_update_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("payment_id")]);
    m_payment_id_isSet = !json[QString("payment_id")].isNull() && m_payment_id_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_wallet_id_isValid = ::OpenAPI::fromJsonValue(m_wallet_id, json[QString("wallet_id")]);
    m_wallet_id_isSet = !json[QString("wallet_id")].isNull() && m_wallet_id_isValid;
}

QString OAIWalletTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWalletTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_counterparty.isSet()) {
        obj.insert(QString("counterparty"), ::OpenAPI::toJsonValue(m_counterparty));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_status_update_isSet) {
        obj.insert(QString("last_status_update"), ::OpenAPI::toJsonValue(m_last_status_update));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("payment_id"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_wallet_id_isSet) {
        obj.insert(QString("wallet_id"), ::OpenAPI::toJsonValue(m_wallet_id));
    }
    return obj;
}

OAIWalletTransactionAmount OAIWalletTransaction::getAmount() const {
    return m_amount;
}
void OAIWalletTransaction::setAmount(const OAIWalletTransactionAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIWalletTransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIWalletTransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIWalletTransactionCounterparty OAIWalletTransaction::getCounterparty() const {
    return m_counterparty;
}
void OAIWalletTransaction::setCounterparty(const OAIWalletTransactionCounterparty &counterparty) {
    m_counterparty = counterparty;
    m_counterparty_isSet = true;
}

bool OAIWalletTransaction::is_counterparty_Set() const{
    return m_counterparty_isSet;
}

bool OAIWalletTransaction::is_counterparty_Valid() const{
    return m_counterparty_isValid;
}

QDateTime OAIWalletTransaction::getCreatedAt() const {
    return m_created_at;
}
void OAIWalletTransaction::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIWalletTransaction::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWalletTransaction::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIWalletTransaction::getLastStatusUpdate() const {
    return m_last_status_update;
}
void OAIWalletTransaction::setLastStatusUpdate(const QDateTime &last_status_update) {
    m_last_status_update = last_status_update;
    m_last_status_update_isSet = true;
}

bool OAIWalletTransaction::is_last_status_update_Set() const{
    return m_last_status_update_isSet;
}

bool OAIWalletTransaction::is_last_status_update_Valid() const{
    return m_last_status_update_isValid;
}

QString OAIWalletTransaction::getPaymentId() const {
    return m_payment_id;
}
void OAIWalletTransaction::setPaymentId(const QString &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAIWalletTransaction::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAIWalletTransaction::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

QString OAIWalletTransaction::getReference() const {
    return m_reference;
}
void OAIWalletTransaction::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIWalletTransaction::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIWalletTransaction::is_reference_Valid() const{
    return m_reference_isValid;
}

OAIWalletTransactionStatus OAIWalletTransaction::getStatus() const {
    return m_status;
}
void OAIWalletTransaction::setStatus(const OAIWalletTransactionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWalletTransaction::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWalletTransaction::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIWalletTransaction::getTransactionId() const {
    return m_transaction_id;
}
void OAIWalletTransaction::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIWalletTransaction::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIWalletTransaction::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAIWalletTransaction::getType() const {
    return m_type;
}
void OAIWalletTransaction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWalletTransaction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWalletTransaction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIWalletTransaction::getWalletId() const {
    return m_wallet_id;
}
void OAIWalletTransaction::setWalletId(const QString &wallet_id) {
    m_wallet_id = wallet_id;
    m_wallet_id_isSet = true;
}

bool OAIWalletTransaction::is_wallet_id_Set() const{
    return m_wallet_id_isSet;
}

bool OAIWalletTransaction::is_wallet_id_Valid() const{
    return m_wallet_id_isValid;
}

bool OAIWalletTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_counterparty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wallet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWalletTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_counterparty_isValid && m_created_at_isValid && m_last_status_update_isValid && m_reference_isValid && m_status_isValid && m_transaction_id_isValid && m_type_isValid && m_wallet_id_isValid && true;
}

} // namespace OpenAPI
