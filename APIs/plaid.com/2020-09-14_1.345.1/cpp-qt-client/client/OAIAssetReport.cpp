/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetReport::OAIAssetReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetReport::OAIAssetReport() {
    this->initializeModel();
}

OAIAssetReport::~OAIAssetReport() {}

void OAIAssetReport::initializeModel() {

    m_asset_report_id_isSet = false;
    m_asset_report_id_isValid = false;

    m_client_report_id_isSet = false;
    m_client_report_id_isValid = false;

    m_date_generated_isSet = false;
    m_date_generated_isValid = false;

    m_days_requested_isSet = false;
    m_days_requested_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIAssetReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetReport::fromJsonObject(QJsonObject json) {

    m_asset_report_id_isValid = ::OpenAPI::fromJsonValue(m_asset_report_id, json[QString("asset_report_id")]);
    m_asset_report_id_isSet = !json[QString("asset_report_id")].isNull() && m_asset_report_id_isValid;

    m_client_report_id_isValid = ::OpenAPI::fromJsonValue(m_client_report_id, json[QString("client_report_id")]);
    m_client_report_id_isSet = !json[QString("client_report_id")].isNull() && m_client_report_id_isValid;

    m_date_generated_isValid = ::OpenAPI::fromJsonValue(m_date_generated, json[QString("date_generated")]);
    m_date_generated_isSet = !json[QString("date_generated")].isNull() && m_date_generated_isValid;

    m_days_requested_isValid = ::OpenAPI::fromJsonValue(m_days_requested, json[QString("days_requested")]);
    m_days_requested_isSet = !json[QString("days_requested")].isNull() && m_days_requested_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIAssetReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetReport::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_report_id_isSet) {
        obj.insert(QString("asset_report_id"), ::OpenAPI::toJsonValue(m_asset_report_id));
    }
    if (m_client_report_id_isSet) {
        obj.insert(QString("client_report_id"), ::OpenAPI::toJsonValue(m_client_report_id));
    }
    if (m_date_generated_isSet) {
        obj.insert(QString("date_generated"), ::OpenAPI::toJsonValue(m_date_generated));
    }
    if (m_days_requested_isSet) {
        obj.insert(QString("days_requested"), ::OpenAPI::toJsonValue(m_days_requested));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIAssetReport::getAssetReportId() const {
    return m_asset_report_id;
}
void OAIAssetReport::setAssetReportId(const QString &asset_report_id) {
    m_asset_report_id = asset_report_id;
    m_asset_report_id_isSet = true;
}

bool OAIAssetReport::is_asset_report_id_Set() const{
    return m_asset_report_id_isSet;
}

bool OAIAssetReport::is_asset_report_id_Valid() const{
    return m_asset_report_id_isValid;
}

QString OAIAssetReport::getClientReportId() const {
    return m_client_report_id;
}
void OAIAssetReport::setClientReportId(const QString &client_report_id) {
    m_client_report_id = client_report_id;
    m_client_report_id_isSet = true;
}

bool OAIAssetReport::is_client_report_id_Set() const{
    return m_client_report_id_isSet;
}

bool OAIAssetReport::is_client_report_id_Valid() const{
    return m_client_report_id_isValid;
}

QDateTime OAIAssetReport::getDateGenerated() const {
    return m_date_generated;
}
void OAIAssetReport::setDateGenerated(const QDateTime &date_generated) {
    m_date_generated = date_generated;
    m_date_generated_isSet = true;
}

bool OAIAssetReport::is_date_generated_Set() const{
    return m_date_generated_isSet;
}

bool OAIAssetReport::is_date_generated_Valid() const{
    return m_date_generated_isValid;
}

double OAIAssetReport::getDaysRequested() const {
    return m_days_requested;
}
void OAIAssetReport::setDaysRequested(const double &days_requested) {
    m_days_requested = days_requested;
    m_days_requested_isSet = true;
}

bool OAIAssetReport::is_days_requested_Set() const{
    return m_days_requested_isSet;
}

bool OAIAssetReport::is_days_requested_Valid() const{
    return m_days_requested_isValid;
}

QList<OAIAssetReportItem> OAIAssetReport::getItems() const {
    return m_items;
}
void OAIAssetReport::setItems(const QList<OAIAssetReportItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIAssetReport::is_items_Set() const{
    return m_items_isSet;
}

bool OAIAssetReport::is_items_Valid() const{
    return m_items_isValid;
}

OAIAssetReportUser OAIAssetReport::getUser() const {
    return m_user;
}
void OAIAssetReport::setUser(const OAIAssetReportUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAssetReport::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAssetReport::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAssetReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_report_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_report_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_generated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_asset_report_id_isValid && m_client_report_id_isValid && m_date_generated_isValid && m_days_requested_isValid && m_items_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
