/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurity::OAISecurity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurity::OAISecurity() {
    this->initializeModel();
}

OAISecurity::~OAISecurity() {}

void OAISecurity::initializeModel() {

    m_close_price_isSet = false;
    m_close_price_isValid = false;

    m_close_price_as_of_isSet = false;
    m_close_price_as_of_isValid = false;

    m_cusip_isSet = false;
    m_cusip_isValid = false;

    m_institution_id_isSet = false;
    m_institution_id_isValid = false;

    m_institution_security_id_isSet = false;
    m_institution_security_id_isValid = false;

    m_is_cash_equivalent_isSet = false;
    m_is_cash_equivalent_isValid = false;

    m_isin_isSet = false;
    m_isin_isValid = false;

    m_iso_currency_code_isSet = false;
    m_iso_currency_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_proxy_security_id_isSet = false;
    m_proxy_security_id_isValid = false;

    m_security_id_isSet = false;
    m_security_id_isValid = false;

    m_sedol_isSet = false;
    m_sedol_isValid = false;

    m_ticker_symbol_isSet = false;
    m_ticker_symbol_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unofficial_currency_code_isSet = false;
    m_unofficial_currency_code_isValid = false;

    m_update_datetime_isSet = false;
    m_update_datetime_isValid = false;
}

void OAISecurity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurity::fromJsonObject(QJsonObject json) {

    m_close_price_isValid = ::OpenAPI::fromJsonValue(m_close_price, json[QString("close_price")]);
    m_close_price_isSet = !json[QString("close_price")].isNull() && m_close_price_isValid;

    m_close_price_as_of_isValid = ::OpenAPI::fromJsonValue(m_close_price_as_of, json[QString("close_price_as_of")]);
    m_close_price_as_of_isSet = !json[QString("close_price_as_of")].isNull() && m_close_price_as_of_isValid;

    m_cusip_isValid = ::OpenAPI::fromJsonValue(m_cusip, json[QString("cusip")]);
    m_cusip_isSet = !json[QString("cusip")].isNull() && m_cusip_isValid;

    m_institution_id_isValid = ::OpenAPI::fromJsonValue(m_institution_id, json[QString("institution_id")]);
    m_institution_id_isSet = !json[QString("institution_id")].isNull() && m_institution_id_isValid;

    m_institution_security_id_isValid = ::OpenAPI::fromJsonValue(m_institution_security_id, json[QString("institution_security_id")]);
    m_institution_security_id_isSet = !json[QString("institution_security_id")].isNull() && m_institution_security_id_isValid;

    m_is_cash_equivalent_isValid = ::OpenAPI::fromJsonValue(m_is_cash_equivalent, json[QString("is_cash_equivalent")]);
    m_is_cash_equivalent_isSet = !json[QString("is_cash_equivalent")].isNull() && m_is_cash_equivalent_isValid;

    m_isin_isValid = ::OpenAPI::fromJsonValue(m_isin, json[QString("isin")]);
    m_isin_isSet = !json[QString("isin")].isNull() && m_isin_isValid;

    m_iso_currency_code_isValid = ::OpenAPI::fromJsonValue(m_iso_currency_code, json[QString("iso_currency_code")]);
    m_iso_currency_code_isSet = !json[QString("iso_currency_code")].isNull() && m_iso_currency_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_proxy_security_id_isValid = ::OpenAPI::fromJsonValue(m_proxy_security_id, json[QString("proxy_security_id")]);
    m_proxy_security_id_isSet = !json[QString("proxy_security_id")].isNull() && m_proxy_security_id_isValid;

    m_security_id_isValid = ::OpenAPI::fromJsonValue(m_security_id, json[QString("security_id")]);
    m_security_id_isSet = !json[QString("security_id")].isNull() && m_security_id_isValid;

    m_sedol_isValid = ::OpenAPI::fromJsonValue(m_sedol, json[QString("sedol")]);
    m_sedol_isSet = !json[QString("sedol")].isNull() && m_sedol_isValid;

    m_ticker_symbol_isValid = ::OpenAPI::fromJsonValue(m_ticker_symbol, json[QString("ticker_symbol")]);
    m_ticker_symbol_isSet = !json[QString("ticker_symbol")].isNull() && m_ticker_symbol_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unofficial_currency_code_isValid = ::OpenAPI::fromJsonValue(m_unofficial_currency_code, json[QString("unofficial_currency_code")]);
    m_unofficial_currency_code_isSet = !json[QString("unofficial_currency_code")].isNull() && m_unofficial_currency_code_isValid;

    m_update_datetime_isValid = ::OpenAPI::fromJsonValue(m_update_datetime, json[QString("update_datetime")]);
    m_update_datetime_isSet = !json[QString("update_datetime")].isNull() && m_update_datetime_isValid;
}

QString OAISecurity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurity::asJsonObject() const {
    QJsonObject obj;
    if (m_close_price_isSet) {
        obj.insert(QString("close_price"), ::OpenAPI::toJsonValue(m_close_price));
    }
    if (m_close_price_as_of_isSet) {
        obj.insert(QString("close_price_as_of"), ::OpenAPI::toJsonValue(m_close_price_as_of));
    }
    if (m_cusip_isSet) {
        obj.insert(QString("cusip"), ::OpenAPI::toJsonValue(m_cusip));
    }
    if (m_institution_id_isSet) {
        obj.insert(QString("institution_id"), ::OpenAPI::toJsonValue(m_institution_id));
    }
    if (m_institution_security_id_isSet) {
        obj.insert(QString("institution_security_id"), ::OpenAPI::toJsonValue(m_institution_security_id));
    }
    if (m_is_cash_equivalent_isSet) {
        obj.insert(QString("is_cash_equivalent"), ::OpenAPI::toJsonValue(m_is_cash_equivalent));
    }
    if (m_isin_isSet) {
        obj.insert(QString("isin"), ::OpenAPI::toJsonValue(m_isin));
    }
    if (m_iso_currency_code_isSet) {
        obj.insert(QString("iso_currency_code"), ::OpenAPI::toJsonValue(m_iso_currency_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_proxy_security_id_isSet) {
        obj.insert(QString("proxy_security_id"), ::OpenAPI::toJsonValue(m_proxy_security_id));
    }
    if (m_security_id_isSet) {
        obj.insert(QString("security_id"), ::OpenAPI::toJsonValue(m_security_id));
    }
    if (m_sedol_isSet) {
        obj.insert(QString("sedol"), ::OpenAPI::toJsonValue(m_sedol));
    }
    if (m_ticker_symbol_isSet) {
        obj.insert(QString("ticker_symbol"), ::OpenAPI::toJsonValue(m_ticker_symbol));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unofficial_currency_code_isSet) {
        obj.insert(QString("unofficial_currency_code"), ::OpenAPI::toJsonValue(m_unofficial_currency_code));
    }
    if (m_update_datetime_isSet) {
        obj.insert(QString("update_datetime"), ::OpenAPI::toJsonValue(m_update_datetime));
    }
    return obj;
}

double OAISecurity::getClosePrice() const {
    return m_close_price;
}
void OAISecurity::setClosePrice(const double &close_price) {
    m_close_price = close_price;
    m_close_price_isSet = true;
}

bool OAISecurity::is_close_price_Set() const{
    return m_close_price_isSet;
}

bool OAISecurity::is_close_price_Valid() const{
    return m_close_price_isValid;
}

QDate OAISecurity::getClosePriceAsOf() const {
    return m_close_price_as_of;
}
void OAISecurity::setClosePriceAsOf(const QDate &close_price_as_of) {
    m_close_price_as_of = close_price_as_of;
    m_close_price_as_of_isSet = true;
}

bool OAISecurity::is_close_price_as_of_Set() const{
    return m_close_price_as_of_isSet;
}

bool OAISecurity::is_close_price_as_of_Valid() const{
    return m_close_price_as_of_isValid;
}

QString OAISecurity::getCusip() const {
    return m_cusip;
}
void OAISecurity::setCusip(const QString &cusip) {
    m_cusip = cusip;
    m_cusip_isSet = true;
}

bool OAISecurity::is_cusip_Set() const{
    return m_cusip_isSet;
}

bool OAISecurity::is_cusip_Valid() const{
    return m_cusip_isValid;
}

QString OAISecurity::getInstitutionId() const {
    return m_institution_id;
}
void OAISecurity::setInstitutionId(const QString &institution_id) {
    m_institution_id = institution_id;
    m_institution_id_isSet = true;
}

bool OAISecurity::is_institution_id_Set() const{
    return m_institution_id_isSet;
}

bool OAISecurity::is_institution_id_Valid() const{
    return m_institution_id_isValid;
}

QString OAISecurity::getInstitutionSecurityId() const {
    return m_institution_security_id;
}
void OAISecurity::setInstitutionSecurityId(const QString &institution_security_id) {
    m_institution_security_id = institution_security_id;
    m_institution_security_id_isSet = true;
}

bool OAISecurity::is_institution_security_id_Set() const{
    return m_institution_security_id_isSet;
}

bool OAISecurity::is_institution_security_id_Valid() const{
    return m_institution_security_id_isValid;
}

bool OAISecurity::isIsCashEquivalent() const {
    return m_is_cash_equivalent;
}
void OAISecurity::setIsCashEquivalent(const bool &is_cash_equivalent) {
    m_is_cash_equivalent = is_cash_equivalent;
    m_is_cash_equivalent_isSet = true;
}

bool OAISecurity::is_is_cash_equivalent_Set() const{
    return m_is_cash_equivalent_isSet;
}

bool OAISecurity::is_is_cash_equivalent_Valid() const{
    return m_is_cash_equivalent_isValid;
}

QString OAISecurity::getIsin() const {
    return m_isin;
}
void OAISecurity::setIsin(const QString &isin) {
    m_isin = isin;
    m_isin_isSet = true;
}

bool OAISecurity::is_isin_Set() const{
    return m_isin_isSet;
}

bool OAISecurity::is_isin_Valid() const{
    return m_isin_isValid;
}

QString OAISecurity::getIsoCurrencyCode() const {
    return m_iso_currency_code;
}
void OAISecurity::setIsoCurrencyCode(const QString &iso_currency_code) {
    m_iso_currency_code = iso_currency_code;
    m_iso_currency_code_isSet = true;
}

bool OAISecurity::is_iso_currency_code_Set() const{
    return m_iso_currency_code_isSet;
}

bool OAISecurity::is_iso_currency_code_Valid() const{
    return m_iso_currency_code_isValid;
}

QString OAISecurity::getName() const {
    return m_name;
}
void OAISecurity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISecurity::is_name_Set() const{
    return m_name_isSet;
}

bool OAISecurity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISecurity::getProxySecurityId() const {
    return m_proxy_security_id;
}
void OAISecurity::setProxySecurityId(const QString &proxy_security_id) {
    m_proxy_security_id = proxy_security_id;
    m_proxy_security_id_isSet = true;
}

bool OAISecurity::is_proxy_security_id_Set() const{
    return m_proxy_security_id_isSet;
}

bool OAISecurity::is_proxy_security_id_Valid() const{
    return m_proxy_security_id_isValid;
}

QString OAISecurity::getSecurityId() const {
    return m_security_id;
}
void OAISecurity::setSecurityId(const QString &security_id) {
    m_security_id = security_id;
    m_security_id_isSet = true;
}

bool OAISecurity::is_security_id_Set() const{
    return m_security_id_isSet;
}

bool OAISecurity::is_security_id_Valid() const{
    return m_security_id_isValid;
}

QString OAISecurity::getSedol() const {
    return m_sedol;
}
void OAISecurity::setSedol(const QString &sedol) {
    m_sedol = sedol;
    m_sedol_isSet = true;
}

bool OAISecurity::is_sedol_Set() const{
    return m_sedol_isSet;
}

bool OAISecurity::is_sedol_Valid() const{
    return m_sedol_isValid;
}

QString OAISecurity::getTickerSymbol() const {
    return m_ticker_symbol;
}
void OAISecurity::setTickerSymbol(const QString &ticker_symbol) {
    m_ticker_symbol = ticker_symbol;
    m_ticker_symbol_isSet = true;
}

bool OAISecurity::is_ticker_symbol_Set() const{
    return m_ticker_symbol_isSet;
}

bool OAISecurity::is_ticker_symbol_Valid() const{
    return m_ticker_symbol_isValid;
}

QString OAISecurity::getType() const {
    return m_type;
}
void OAISecurity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISecurity::is_type_Set() const{
    return m_type_isSet;
}

bool OAISecurity::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISecurity::getUnofficialCurrencyCode() const {
    return m_unofficial_currency_code;
}
void OAISecurity::setUnofficialCurrencyCode(const QString &unofficial_currency_code) {
    m_unofficial_currency_code = unofficial_currency_code;
    m_unofficial_currency_code_isSet = true;
}

bool OAISecurity::is_unofficial_currency_code_Set() const{
    return m_unofficial_currency_code_isSet;
}

bool OAISecurity::is_unofficial_currency_code_Valid() const{
    return m_unofficial_currency_code_isValid;
}

QDateTime OAISecurity::getUpdateDatetime() const {
    return m_update_datetime;
}
void OAISecurity::setUpdateDatetime(const QDateTime &update_datetime) {
    m_update_datetime = update_datetime;
    m_update_datetime_isSet = true;
}

bool OAISecurity::is_update_datetime_Set() const{
    return m_update_datetime_isSet;
}

bool OAISecurity::is_update_datetime_Valid() const{
    return m_update_datetime_isValid;
}

bool OAISecurity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_close_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_close_price_as_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cusip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_security_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_cash_equivalent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_security_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sedol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticker_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unofficial_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_close_price_isValid && m_close_price_as_of_isValid && m_cusip_isValid && m_institution_id_isValid && m_institution_security_id_isValid && m_is_cash_equivalent_isValid && m_isin_isValid && m_iso_currency_code_isValid && m_name_isValid && m_proxy_security_id_isValid && m_security_id_isValid && m_sedol_isValid && m_ticker_symbol_isValid && m_type_isValid && m_unofficial_currency_code_isValid && true;
}

} // namespace OpenAPI
