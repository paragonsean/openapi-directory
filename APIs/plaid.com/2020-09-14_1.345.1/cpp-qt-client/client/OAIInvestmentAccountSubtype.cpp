/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvestmentAccountSubtype.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvestmentAccountSubtype::OAIInvestmentAccountSubtype(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvestmentAccountSubtype::OAIInvestmentAccountSubtype() {
    this->initializeModel();
}

OAIInvestmentAccountSubtype::~OAIInvestmentAccountSubtype() {}

void OAIInvestmentAccountSubtype::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIInvestmentAccountSubtype::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIInvestmentAccountSubtype::fromJson(QString jsonString) {
    
    if ( jsonString.compare("529", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::_529;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("401a", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::_401A;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("401k", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::_401K;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("403B", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::_403B;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("457b", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::_457B;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("brokerage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::BROKERAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cash isa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::CASH_ISA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("crypto exchange", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::CRYPTO_EXCHANGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("education savings account", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::EDUCATION_SAVINGS_ACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fixed annuity", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::FIXED_ANNUITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("gic", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::GIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("health reimbursement arrangement", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::HEALTH_REIMBURSEMENT_ARRANGEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hsa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::HSA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ira", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::IRA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("isa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::ISA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("keogh", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::KEOGH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lif", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::LIF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("life insurance", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::LIFE_INSURANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lira", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::LIRA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lrif", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::LRIF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lrsp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::LRSP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mutual fund", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::MUTUAL_FUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("non-custodial wallet", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::NON_CUSTODIAL_WALLET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("non-taxable brokerage account", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::NON_TAXABLE_BROKERAGE_ACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("other", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("other annuity", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::OTHER_ANNUITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("other insurance", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::OTHER_INSURANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pension", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::PENSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("prif", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::PRIF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("profit sharing plan", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::PROFIT_SHARING_PLAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("qshr", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::QSHR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rdsp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::RDSP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("resp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::RESP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("retirement", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::RETIREMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rlif", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::RLIF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("roth", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::ROTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("roth 401k", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::ROTH_401K;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rrif", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::RRIF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rrsp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::RRSP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sarsep", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::SARSEP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sep ira", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::SEP_IRA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("simple ira", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::SIMPLE_IRA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sipp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::SIPP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("stock plan", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::STOCK_PLAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tfsa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::TFSA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("trust", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::TRUST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ugma", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::UGMA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("utma", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::UTMA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("variable annuity", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::VARIABLE_ANNUITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("all", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentAccountSubtype::ALL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIInvestmentAccountSubtype::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIInvestmentAccountSubtype::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIInvestmentAccountSubtype::_529:
            val = "529";
            break;
        case eOAIInvestmentAccountSubtype::_401A:
            val = "401a";
            break;
        case eOAIInvestmentAccountSubtype::_401K:
            val = "401k";
            break;
        case eOAIInvestmentAccountSubtype::_403B:
            val = "403B";
            break;
        case eOAIInvestmentAccountSubtype::_457B:
            val = "457b";
            break;
        case eOAIInvestmentAccountSubtype::BROKERAGE:
            val = "brokerage";
            break;
        case eOAIInvestmentAccountSubtype::CASH_ISA:
            val = "cash isa";
            break;
        case eOAIInvestmentAccountSubtype::CRYPTO_EXCHANGE:
            val = "crypto exchange";
            break;
        case eOAIInvestmentAccountSubtype::EDUCATION_SAVINGS_ACCOUNT:
            val = "education savings account";
            break;
        case eOAIInvestmentAccountSubtype::FIXED_ANNUITY:
            val = "fixed annuity";
            break;
        case eOAIInvestmentAccountSubtype::GIC:
            val = "gic";
            break;
        case eOAIInvestmentAccountSubtype::HEALTH_REIMBURSEMENT_ARRANGEMENT:
            val = "health reimbursement arrangement";
            break;
        case eOAIInvestmentAccountSubtype::HSA:
            val = "hsa";
            break;
        case eOAIInvestmentAccountSubtype::IRA:
            val = "ira";
            break;
        case eOAIInvestmentAccountSubtype::ISA:
            val = "isa";
            break;
        case eOAIInvestmentAccountSubtype::KEOGH:
            val = "keogh";
            break;
        case eOAIInvestmentAccountSubtype::LIF:
            val = "lif";
            break;
        case eOAIInvestmentAccountSubtype::LIFE_INSURANCE:
            val = "life insurance";
            break;
        case eOAIInvestmentAccountSubtype::LIRA:
            val = "lira";
            break;
        case eOAIInvestmentAccountSubtype::LRIF:
            val = "lrif";
            break;
        case eOAIInvestmentAccountSubtype::LRSP:
            val = "lrsp";
            break;
        case eOAIInvestmentAccountSubtype::MUTUAL_FUND:
            val = "mutual fund";
            break;
        case eOAIInvestmentAccountSubtype::NON_CUSTODIAL_WALLET:
            val = "non-custodial wallet";
            break;
        case eOAIInvestmentAccountSubtype::NON_TAXABLE_BROKERAGE_ACCOUNT:
            val = "non-taxable brokerage account";
            break;
        case eOAIInvestmentAccountSubtype::OTHER:
            val = "other";
            break;
        case eOAIInvestmentAccountSubtype::OTHER_ANNUITY:
            val = "other annuity";
            break;
        case eOAIInvestmentAccountSubtype::OTHER_INSURANCE:
            val = "other insurance";
            break;
        case eOAIInvestmentAccountSubtype::PENSION:
            val = "pension";
            break;
        case eOAIInvestmentAccountSubtype::PRIF:
            val = "prif";
            break;
        case eOAIInvestmentAccountSubtype::PROFIT_SHARING_PLAN:
            val = "profit sharing plan";
            break;
        case eOAIInvestmentAccountSubtype::QSHR:
            val = "qshr";
            break;
        case eOAIInvestmentAccountSubtype::RDSP:
            val = "rdsp";
            break;
        case eOAIInvestmentAccountSubtype::RESP:
            val = "resp";
            break;
        case eOAIInvestmentAccountSubtype::RETIREMENT:
            val = "retirement";
            break;
        case eOAIInvestmentAccountSubtype::RLIF:
            val = "rlif";
            break;
        case eOAIInvestmentAccountSubtype::ROTH:
            val = "roth";
            break;
        case eOAIInvestmentAccountSubtype::ROTH_401K:
            val = "roth 401k";
            break;
        case eOAIInvestmentAccountSubtype::RRIF:
            val = "rrif";
            break;
        case eOAIInvestmentAccountSubtype::RRSP:
            val = "rrsp";
            break;
        case eOAIInvestmentAccountSubtype::SARSEP:
            val = "sarsep";
            break;
        case eOAIInvestmentAccountSubtype::SEP_IRA:
            val = "sep ira";
            break;
        case eOAIInvestmentAccountSubtype::SIMPLE_IRA:
            val = "simple ira";
            break;
        case eOAIInvestmentAccountSubtype::SIPP:
            val = "sipp";
            break;
        case eOAIInvestmentAccountSubtype::STOCK_PLAN:
            val = "stock plan";
            break;
        case eOAIInvestmentAccountSubtype::TFSA:
            val = "tfsa";
            break;
        case eOAIInvestmentAccountSubtype::TRUST:
            val = "trust";
            break;
        case eOAIInvestmentAccountSubtype::UGMA:
            val = "ugma";
            break;
        case eOAIInvestmentAccountSubtype::UTMA:
            val = "utma";
            break;
        case eOAIInvestmentAccountSubtype::VARIABLE_ANNUITY:
            val = "variable annuity";
            break;
        case eOAIInvestmentAccountSubtype::ALL:
            val = "all";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIInvestmentAccountSubtype::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIInvestmentAccountSubtype::eOAIInvestmentAccountSubtype OAIInvestmentAccountSubtype::getValue() const {
    return m_value;
}

void OAIInvestmentAccountSubtype::setValue(const OAIInvestmentAccountSubtype::eOAIInvestmentAccountSubtype& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIInvestmentAccountSubtype::isSet() const {
    
    return m_value_isSet;
}

bool OAIInvestmentAccountSubtype::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
