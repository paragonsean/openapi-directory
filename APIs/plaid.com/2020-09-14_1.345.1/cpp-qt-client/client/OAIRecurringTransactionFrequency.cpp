/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecurringTransactionFrequency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecurringTransactionFrequency::OAIRecurringTransactionFrequency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecurringTransactionFrequency::OAIRecurringTransactionFrequency() {
    this->initializeModel();
}

OAIRecurringTransactionFrequency::~OAIRecurringTransactionFrequency() {}

void OAIRecurringTransactionFrequency::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRecurringTransactionFrequency::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRecurringTransactionFrequency::fromJson(QString jsonString) {
    
    if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecurringTransactionFrequency::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WEEKLY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecurringTransactionFrequency::WEEKLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BIWEEKLY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecurringTransactionFrequency::BIWEEKLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SEMI_MONTHLY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecurringTransactionFrequency::SEMI_MONTHLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MONTHLY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecurringTransactionFrequency::MONTHLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ANNUALLY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRecurringTransactionFrequency::ANNUALLY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRecurringTransactionFrequency::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRecurringTransactionFrequency::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRecurringTransactionFrequency::UNKNOWN:
            val = "UNKNOWN";
            break;
        case eOAIRecurringTransactionFrequency::WEEKLY:
            val = "WEEKLY";
            break;
        case eOAIRecurringTransactionFrequency::BIWEEKLY:
            val = "BIWEEKLY";
            break;
        case eOAIRecurringTransactionFrequency::SEMI_MONTHLY:
            val = "SEMI_MONTHLY";
            break;
        case eOAIRecurringTransactionFrequency::MONTHLY:
            val = "MONTHLY";
            break;
        case eOAIRecurringTransactionFrequency::ANNUALLY:
            val = "ANNUALLY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRecurringTransactionFrequency::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRecurringTransactionFrequency::eOAIRecurringTransactionFrequency OAIRecurringTransactionFrequency::getValue() const {
    return m_value;
}

void OAIRecurringTransactionFrequency::setValue(const OAIRecurringTransactionFrequency::eOAIRecurringTransactionFrequency& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRecurringTransactionFrequency::isSet() const {
    
    return m_value_isSet;
}

bool OAIRecurringTransactionFrequency::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
