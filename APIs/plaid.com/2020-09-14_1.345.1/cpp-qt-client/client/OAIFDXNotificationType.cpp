/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFDXNotificationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFDXNotificationType::OAIFDXNotificationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFDXNotificationType::OAIFDXNotificationType() {
    this->initializeModel();
}

OAIFDXNotificationType::~OAIFDXNotificationType() {}

void OAIFDXNotificationType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFDXNotificationType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFDXNotificationType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CONSENT_REVOKED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFDXNotificationType::CONSENT_REVOKED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONSENT_UPDATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFDXNotificationType::CONSENT_UPDATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUSTOM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFDXNotificationType::CUSTOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFDXNotificationType::SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BALANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFDXNotificationType::BALANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PLANNED_OUTAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFDXNotificationType::PLANNED_OUTAGE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFDXNotificationType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFDXNotificationType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFDXNotificationType::CONSENT_REVOKED:
            val = "CONSENT_REVOKED";
            break;
        case eOAIFDXNotificationType::CONSENT_UPDATED:
            val = "CONSENT_UPDATED";
            break;
        case eOAIFDXNotificationType::CUSTOM:
            val = "CUSTOM";
            break;
        case eOAIFDXNotificationType::SERVICE:
            val = "SERVICE";
            break;
        case eOAIFDXNotificationType::BALANCE:
            val = "BALANCE";
            break;
        case eOAIFDXNotificationType::PLANNED_OUTAGE:
            val = "PLANNED_OUTAGE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFDXNotificationType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFDXNotificationType::eOAIFDXNotificationType OAIFDXNotificationType::getValue() const {
    return m_value;
}

void OAIFDXNotificationType::setValue(const OAIFDXNotificationType::eOAIFDXNotificationType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFDXNotificationType::isSet() const {
    
    return m_value_isSet;
}

bool OAIFDXNotificationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
