/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICredit1099.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICredit1099::OAICredit1099(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICredit1099::OAICredit1099() {
    this->initializeModel();
}

OAICredit1099::~OAICredit1099() {}

void OAICredit1099::initializeModel() {

    m_april_amount_isSet = false;
    m_april_amount_isValid = false;

    m_august_amount_isSet = false;
    m_august_amount_isValid = false;

    m_card_not_present_transaction_isSet = false;
    m_card_not_present_transaction_isValid = false;

    m_crop_insurance_proceeds_isSet = false;
    m_crop_insurance_proceeds_isValid = false;

    m_december_amount_isSet = false;
    m_december_amount_isValid = false;

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_document_metadata_isSet = false;
    m_document_metadata_isValid = false;

    m_excess_golden_parachute_payments_isSet = false;
    m_excess_golden_parachute_payments_isValid = false;

    m_february_amount_isSet = false;
    m_february_amount_isValid = false;

    m_federal_income_tax_withheld_isSet = false;
    m_federal_income_tax_withheld_isValid = false;

    m_filer_isSet = false;
    m_filer_isValid = false;

    m_fishing_boat_proceeds_isSet = false;
    m_fishing_boat_proceeds_isValid = false;

    m_form_1099_type_isSet = false;
    m_form_1099_type_isValid = false;

    m_gross_amount_isSet = false;
    m_gross_amount_isValid = false;

    m_gross_proceeds_paid_to_an_attorney_isSet = false;
    m_gross_proceeds_paid_to_an_attorney_isValid = false;

    m_january_amount_isSet = false;
    m_january_amount_isValid = false;

    m_july_amount_isSet = false;
    m_july_amount_isValid = false;

    m_june_amount_isSet = false;
    m_june_amount_isValid = false;

    m_march_amount_isSet = false;
    m_march_amount_isValid = false;

    m_may_amount_isSet = false;
    m_may_amount_isValid = false;

    m_medical_and_healthcare_payments_isSet = false;
    m_medical_and_healthcare_payments_isValid = false;

    m_merchant_category_code_isSet = false;
    m_merchant_category_code_isValid = false;

    m_nonemployee_compensation_isSet = false;
    m_nonemployee_compensation_isValid = false;

    m_november_amount_isSet = false;
    m_november_amount_isValid = false;

    m_number_of_payment_transactions_isSet = false;
    m_number_of_payment_transactions_isValid = false;

    m_october_amount_isSet = false;
    m_october_amount_isValid = false;

    m_other_income_isSet = false;
    m_other_income_isValid = false;

    m_payer_isSet = false;
    m_payer_isValid = false;

    m_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer_isSet = false;
    m_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer_isValid = false;

    m_payer_state_number_isSet = false;
    m_payer_state_number_isValid = false;

    m_payer_state_number_lower_isSet = false;
    m_payer_state_number_lower_isValid = false;

    m_primary_state_isSet = false;
    m_primary_state_isValid = false;

    m_primary_state_id_isSet = false;
    m_primary_state_id_isValid = false;

    m_primary_state_income_tax_isSet = false;
    m_primary_state_income_tax_isValid = false;

    m_pse_name_isSet = false;
    m_pse_name_isValid = false;

    m_pse_telephone_number_isSet = false;
    m_pse_telephone_number_isValid = false;

    m_recipient_isSet = false;
    m_recipient_isValid = false;

    m_rents_isSet = false;
    m_rents_isValid = false;

    m_royalties_isSet = false;
    m_royalties_isValid = false;

    m_secondary_state_isSet = false;
    m_secondary_state_isValid = false;

    m_secondary_state_id_isSet = false;
    m_secondary_state_id_isValid = false;

    m_secondary_state_income_tax_isSet = false;
    m_secondary_state_income_tax_isValid = false;

    m_section_409a_deferrals_isSet = false;
    m_section_409a_deferrals_isValid = false;

    m_section_409a_income_isSet = false;
    m_section_409a_income_isValid = false;

    m_september_amount_isSet = false;
    m_september_amount_isValid = false;

    m_state_income_isSet = false;
    m_state_income_isValid = false;

    m_state_income_lower_isSet = false;
    m_state_income_lower_isValid = false;

    m_state_tax_withheld_isSet = false;
    m_state_tax_withheld_isValid = false;

    m_state_tax_withheld_lower_isSet = false;
    m_state_tax_withheld_lower_isValid = false;

    m_substitute_payments_in_lieu_of_dividends_or_interest_isSet = false;
    m_substitute_payments_in_lieu_of_dividends_or_interest_isValid = false;

    m_tax_year_isSet = false;
    m_tax_year_isValid = false;

    m_transactions_reported_isSet = false;
    m_transactions_reported_isValid = false;
}

void OAICredit1099::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICredit1099::fromJsonObject(QJsonObject json) {

    m_april_amount_isValid = ::OpenAPI::fromJsonValue(m_april_amount, json[QString("april_amount")]);
    m_april_amount_isSet = !json[QString("april_amount")].isNull() && m_april_amount_isValid;

    m_august_amount_isValid = ::OpenAPI::fromJsonValue(m_august_amount, json[QString("august_amount")]);
    m_august_amount_isSet = !json[QString("august_amount")].isNull() && m_august_amount_isValid;

    m_card_not_present_transaction_isValid = ::OpenAPI::fromJsonValue(m_card_not_present_transaction, json[QString("card_not_present_transaction")]);
    m_card_not_present_transaction_isSet = !json[QString("card_not_present_transaction")].isNull() && m_card_not_present_transaction_isValid;

    m_crop_insurance_proceeds_isValid = ::OpenAPI::fromJsonValue(m_crop_insurance_proceeds, json[QString("crop_insurance_proceeds")]);
    m_crop_insurance_proceeds_isSet = !json[QString("crop_insurance_proceeds")].isNull() && m_crop_insurance_proceeds_isValid;

    m_december_amount_isValid = ::OpenAPI::fromJsonValue(m_december_amount, json[QString("december_amount")]);
    m_december_amount_isSet = !json[QString("december_amount")].isNull() && m_december_amount_isValid;

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("document_id")]);
    m_document_id_isSet = !json[QString("document_id")].isNull() && m_document_id_isValid;

    m_document_metadata_isValid = ::OpenAPI::fromJsonValue(m_document_metadata, json[QString("document_metadata")]);
    m_document_metadata_isSet = !json[QString("document_metadata")].isNull() && m_document_metadata_isValid;

    m_excess_golden_parachute_payments_isValid = ::OpenAPI::fromJsonValue(m_excess_golden_parachute_payments, json[QString("excess_golden_parachute_payments")]);
    m_excess_golden_parachute_payments_isSet = !json[QString("excess_golden_parachute_payments")].isNull() && m_excess_golden_parachute_payments_isValid;

    m_february_amount_isValid = ::OpenAPI::fromJsonValue(m_february_amount, json[QString("february_amount")]);
    m_february_amount_isSet = !json[QString("february_amount")].isNull() && m_february_amount_isValid;

    m_federal_income_tax_withheld_isValid = ::OpenAPI::fromJsonValue(m_federal_income_tax_withheld, json[QString("federal_income_tax_withheld")]);
    m_federal_income_tax_withheld_isSet = !json[QString("federal_income_tax_withheld")].isNull() && m_federal_income_tax_withheld_isValid;

    m_filer_isValid = ::OpenAPI::fromJsonValue(m_filer, json[QString("filer")]);
    m_filer_isSet = !json[QString("filer")].isNull() && m_filer_isValid;

    m_fishing_boat_proceeds_isValid = ::OpenAPI::fromJsonValue(m_fishing_boat_proceeds, json[QString("fishing_boat_proceeds")]);
    m_fishing_boat_proceeds_isSet = !json[QString("fishing_boat_proceeds")].isNull() && m_fishing_boat_proceeds_isValid;

    m_form_1099_type_isValid = ::OpenAPI::fromJsonValue(m_form_1099_type, json[QString("form_1099_type")]);
    m_form_1099_type_isSet = !json[QString("form_1099_type")].isNull() && m_form_1099_type_isValid;

    m_gross_amount_isValid = ::OpenAPI::fromJsonValue(m_gross_amount, json[QString("gross_amount")]);
    m_gross_amount_isSet = !json[QString("gross_amount")].isNull() && m_gross_amount_isValid;

    m_gross_proceeds_paid_to_an_attorney_isValid = ::OpenAPI::fromJsonValue(m_gross_proceeds_paid_to_an_attorney, json[QString("gross_proceeds_paid_to_an_attorney")]);
    m_gross_proceeds_paid_to_an_attorney_isSet = !json[QString("gross_proceeds_paid_to_an_attorney")].isNull() && m_gross_proceeds_paid_to_an_attorney_isValid;

    m_january_amount_isValid = ::OpenAPI::fromJsonValue(m_january_amount, json[QString("january_amount")]);
    m_january_amount_isSet = !json[QString("january_amount")].isNull() && m_january_amount_isValid;

    m_july_amount_isValid = ::OpenAPI::fromJsonValue(m_july_amount, json[QString("july_amount")]);
    m_july_amount_isSet = !json[QString("july_amount")].isNull() && m_july_amount_isValid;

    m_june_amount_isValid = ::OpenAPI::fromJsonValue(m_june_amount, json[QString("june_amount")]);
    m_june_amount_isSet = !json[QString("june_amount")].isNull() && m_june_amount_isValid;

    m_march_amount_isValid = ::OpenAPI::fromJsonValue(m_march_amount, json[QString("march_amount")]);
    m_march_amount_isSet = !json[QString("march_amount")].isNull() && m_march_amount_isValid;

    m_may_amount_isValid = ::OpenAPI::fromJsonValue(m_may_amount, json[QString("may_amount")]);
    m_may_amount_isSet = !json[QString("may_amount")].isNull() && m_may_amount_isValid;

    m_medical_and_healthcare_payments_isValid = ::OpenAPI::fromJsonValue(m_medical_and_healthcare_payments, json[QString("medical_and_healthcare_payments")]);
    m_medical_and_healthcare_payments_isSet = !json[QString("medical_and_healthcare_payments")].isNull() && m_medical_and_healthcare_payments_isValid;

    m_merchant_category_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_category_code, json[QString("merchant_category_code")]);
    m_merchant_category_code_isSet = !json[QString("merchant_category_code")].isNull() && m_merchant_category_code_isValid;

    m_nonemployee_compensation_isValid = ::OpenAPI::fromJsonValue(m_nonemployee_compensation, json[QString("nonemployee_compensation")]);
    m_nonemployee_compensation_isSet = !json[QString("nonemployee_compensation")].isNull() && m_nonemployee_compensation_isValid;

    m_november_amount_isValid = ::OpenAPI::fromJsonValue(m_november_amount, json[QString("november_amount")]);
    m_november_amount_isSet = !json[QString("november_amount")].isNull() && m_november_amount_isValid;

    m_number_of_payment_transactions_isValid = ::OpenAPI::fromJsonValue(m_number_of_payment_transactions, json[QString("number_of_payment_transactions")]);
    m_number_of_payment_transactions_isSet = !json[QString("number_of_payment_transactions")].isNull() && m_number_of_payment_transactions_isValid;

    m_october_amount_isValid = ::OpenAPI::fromJsonValue(m_october_amount, json[QString("october_amount")]);
    m_october_amount_isSet = !json[QString("october_amount")].isNull() && m_october_amount_isValid;

    m_other_income_isValid = ::OpenAPI::fromJsonValue(m_other_income, json[QString("other_income")]);
    m_other_income_isSet = !json[QString("other_income")].isNull() && m_other_income_isValid;

    m_payer_isValid = ::OpenAPI::fromJsonValue(m_payer, json[QString("payer")]);
    m_payer_isSet = !json[QString("payer")].isNull() && m_payer_isValid;

    m_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer_isValid = ::OpenAPI::fromJsonValue(m_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer, json[QString("payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer")]);
    m_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer_isSet = !json[QString("payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer")].isNull() && m_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer_isValid;

    m_payer_state_number_isValid = ::OpenAPI::fromJsonValue(m_payer_state_number, json[QString("payer_state_number")]);
    m_payer_state_number_isSet = !json[QString("payer_state_number")].isNull() && m_payer_state_number_isValid;

    m_payer_state_number_lower_isValid = ::OpenAPI::fromJsonValue(m_payer_state_number_lower, json[QString("payer_state_number_lower")]);
    m_payer_state_number_lower_isSet = !json[QString("payer_state_number_lower")].isNull() && m_payer_state_number_lower_isValid;

    m_primary_state_isValid = ::OpenAPI::fromJsonValue(m_primary_state, json[QString("primary_state")]);
    m_primary_state_isSet = !json[QString("primary_state")].isNull() && m_primary_state_isValid;

    m_primary_state_id_isValid = ::OpenAPI::fromJsonValue(m_primary_state_id, json[QString("primary_state_id")]);
    m_primary_state_id_isSet = !json[QString("primary_state_id")].isNull() && m_primary_state_id_isValid;

    m_primary_state_income_tax_isValid = ::OpenAPI::fromJsonValue(m_primary_state_income_tax, json[QString("primary_state_income_tax")]);
    m_primary_state_income_tax_isSet = !json[QString("primary_state_income_tax")].isNull() && m_primary_state_income_tax_isValid;

    m_pse_name_isValid = ::OpenAPI::fromJsonValue(m_pse_name, json[QString("pse_name")]);
    m_pse_name_isSet = !json[QString("pse_name")].isNull() && m_pse_name_isValid;

    m_pse_telephone_number_isValid = ::OpenAPI::fromJsonValue(m_pse_telephone_number, json[QString("pse_telephone_number")]);
    m_pse_telephone_number_isSet = !json[QString("pse_telephone_number")].isNull() && m_pse_telephone_number_isValid;

    m_recipient_isValid = ::OpenAPI::fromJsonValue(m_recipient, json[QString("recipient")]);
    m_recipient_isSet = !json[QString("recipient")].isNull() && m_recipient_isValid;

    m_rents_isValid = ::OpenAPI::fromJsonValue(m_rents, json[QString("rents")]);
    m_rents_isSet = !json[QString("rents")].isNull() && m_rents_isValid;

    m_royalties_isValid = ::OpenAPI::fromJsonValue(m_royalties, json[QString("royalties")]);
    m_royalties_isSet = !json[QString("royalties")].isNull() && m_royalties_isValid;

    m_secondary_state_isValid = ::OpenAPI::fromJsonValue(m_secondary_state, json[QString("secondary_state")]);
    m_secondary_state_isSet = !json[QString("secondary_state")].isNull() && m_secondary_state_isValid;

    m_secondary_state_id_isValid = ::OpenAPI::fromJsonValue(m_secondary_state_id, json[QString("secondary_state_id")]);
    m_secondary_state_id_isSet = !json[QString("secondary_state_id")].isNull() && m_secondary_state_id_isValid;

    m_secondary_state_income_tax_isValid = ::OpenAPI::fromJsonValue(m_secondary_state_income_tax, json[QString("secondary_state_income_tax")]);
    m_secondary_state_income_tax_isSet = !json[QString("secondary_state_income_tax")].isNull() && m_secondary_state_income_tax_isValid;

    m_section_409a_deferrals_isValid = ::OpenAPI::fromJsonValue(m_section_409a_deferrals, json[QString("section_409a_deferrals")]);
    m_section_409a_deferrals_isSet = !json[QString("section_409a_deferrals")].isNull() && m_section_409a_deferrals_isValid;

    m_section_409a_income_isValid = ::OpenAPI::fromJsonValue(m_section_409a_income, json[QString("section_409a_income")]);
    m_section_409a_income_isSet = !json[QString("section_409a_income")].isNull() && m_section_409a_income_isValid;

    m_september_amount_isValid = ::OpenAPI::fromJsonValue(m_september_amount, json[QString("september_amount")]);
    m_september_amount_isSet = !json[QString("september_amount")].isNull() && m_september_amount_isValid;

    m_state_income_isValid = ::OpenAPI::fromJsonValue(m_state_income, json[QString("state_income")]);
    m_state_income_isSet = !json[QString("state_income")].isNull() && m_state_income_isValid;

    m_state_income_lower_isValid = ::OpenAPI::fromJsonValue(m_state_income_lower, json[QString("state_income_lower")]);
    m_state_income_lower_isSet = !json[QString("state_income_lower")].isNull() && m_state_income_lower_isValid;

    m_state_tax_withheld_isValid = ::OpenAPI::fromJsonValue(m_state_tax_withheld, json[QString("state_tax_withheld")]);
    m_state_tax_withheld_isSet = !json[QString("state_tax_withheld")].isNull() && m_state_tax_withheld_isValid;

    m_state_tax_withheld_lower_isValid = ::OpenAPI::fromJsonValue(m_state_tax_withheld_lower, json[QString("state_tax_withheld_lower")]);
    m_state_tax_withheld_lower_isSet = !json[QString("state_tax_withheld_lower")].isNull() && m_state_tax_withheld_lower_isValid;

    m_substitute_payments_in_lieu_of_dividends_or_interest_isValid = ::OpenAPI::fromJsonValue(m_substitute_payments_in_lieu_of_dividends_or_interest, json[QString("substitute_payments_in_lieu_of_dividends_or_interest")]);
    m_substitute_payments_in_lieu_of_dividends_or_interest_isSet = !json[QString("substitute_payments_in_lieu_of_dividends_or_interest")].isNull() && m_substitute_payments_in_lieu_of_dividends_or_interest_isValid;

    m_tax_year_isValid = ::OpenAPI::fromJsonValue(m_tax_year, json[QString("tax_year")]);
    m_tax_year_isSet = !json[QString("tax_year")].isNull() && m_tax_year_isValid;

    m_transactions_reported_isValid = ::OpenAPI::fromJsonValue(m_transactions_reported, json[QString("transactions_reported")]);
    m_transactions_reported_isSet = !json[QString("transactions_reported")].isNull() && m_transactions_reported_isValid;
}

QString OAICredit1099::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICredit1099::asJsonObject() const {
    QJsonObject obj;
    if (m_april_amount_isSet) {
        obj.insert(QString("april_amount"), ::OpenAPI::toJsonValue(m_april_amount));
    }
    if (m_august_amount_isSet) {
        obj.insert(QString("august_amount"), ::OpenAPI::toJsonValue(m_august_amount));
    }
    if (m_card_not_present_transaction_isSet) {
        obj.insert(QString("card_not_present_transaction"), ::OpenAPI::toJsonValue(m_card_not_present_transaction));
    }
    if (m_crop_insurance_proceeds_isSet) {
        obj.insert(QString("crop_insurance_proceeds"), ::OpenAPI::toJsonValue(m_crop_insurance_proceeds));
    }
    if (m_december_amount_isSet) {
        obj.insert(QString("december_amount"), ::OpenAPI::toJsonValue(m_december_amount));
    }
    if (m_document_id_isSet) {
        obj.insert(QString("document_id"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_document_metadata.isSet()) {
        obj.insert(QString("document_metadata"), ::OpenAPI::toJsonValue(m_document_metadata));
    }
    if (m_excess_golden_parachute_payments_isSet) {
        obj.insert(QString("excess_golden_parachute_payments"), ::OpenAPI::toJsonValue(m_excess_golden_parachute_payments));
    }
    if (m_february_amount_isSet) {
        obj.insert(QString("february_amount"), ::OpenAPI::toJsonValue(m_february_amount));
    }
    if (m_federal_income_tax_withheld_isSet) {
        obj.insert(QString("federal_income_tax_withheld"), ::OpenAPI::toJsonValue(m_federal_income_tax_withheld));
    }
    if (m_filer.isSet()) {
        obj.insert(QString("filer"), ::OpenAPI::toJsonValue(m_filer));
    }
    if (m_fishing_boat_proceeds_isSet) {
        obj.insert(QString("fishing_boat_proceeds"), ::OpenAPI::toJsonValue(m_fishing_boat_proceeds));
    }
    if (m_form_1099_type.isSet()) {
        obj.insert(QString("form_1099_type"), ::OpenAPI::toJsonValue(m_form_1099_type));
    }
    if (m_gross_amount_isSet) {
        obj.insert(QString("gross_amount"), ::OpenAPI::toJsonValue(m_gross_amount));
    }
    if (m_gross_proceeds_paid_to_an_attorney_isSet) {
        obj.insert(QString("gross_proceeds_paid_to_an_attorney"), ::OpenAPI::toJsonValue(m_gross_proceeds_paid_to_an_attorney));
    }
    if (m_january_amount_isSet) {
        obj.insert(QString("january_amount"), ::OpenAPI::toJsonValue(m_january_amount));
    }
    if (m_july_amount_isSet) {
        obj.insert(QString("july_amount"), ::OpenAPI::toJsonValue(m_july_amount));
    }
    if (m_june_amount_isSet) {
        obj.insert(QString("june_amount"), ::OpenAPI::toJsonValue(m_june_amount));
    }
    if (m_march_amount_isSet) {
        obj.insert(QString("march_amount"), ::OpenAPI::toJsonValue(m_march_amount));
    }
    if (m_may_amount_isSet) {
        obj.insert(QString("may_amount"), ::OpenAPI::toJsonValue(m_may_amount));
    }
    if (m_medical_and_healthcare_payments_isSet) {
        obj.insert(QString("medical_and_healthcare_payments"), ::OpenAPI::toJsonValue(m_medical_and_healthcare_payments));
    }
    if (m_merchant_category_code_isSet) {
        obj.insert(QString("merchant_category_code"), ::OpenAPI::toJsonValue(m_merchant_category_code));
    }
    if (m_nonemployee_compensation_isSet) {
        obj.insert(QString("nonemployee_compensation"), ::OpenAPI::toJsonValue(m_nonemployee_compensation));
    }
    if (m_november_amount_isSet) {
        obj.insert(QString("november_amount"), ::OpenAPI::toJsonValue(m_november_amount));
    }
    if (m_number_of_payment_transactions_isSet) {
        obj.insert(QString("number_of_payment_transactions"), ::OpenAPI::toJsonValue(m_number_of_payment_transactions));
    }
    if (m_october_amount_isSet) {
        obj.insert(QString("october_amount"), ::OpenAPI::toJsonValue(m_october_amount));
    }
    if (m_other_income_isSet) {
        obj.insert(QString("other_income"), ::OpenAPI::toJsonValue(m_other_income));
    }
    if (m_payer.isSet()) {
        obj.insert(QString("payer"), ::OpenAPI::toJsonValue(m_payer));
    }
    if (m_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer_isSet) {
        obj.insert(QString("payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer"), ::OpenAPI::toJsonValue(m_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer));
    }
    if (m_payer_state_number_isSet) {
        obj.insert(QString("payer_state_number"), ::OpenAPI::toJsonValue(m_payer_state_number));
    }
    if (m_payer_state_number_lower_isSet) {
        obj.insert(QString("payer_state_number_lower"), ::OpenAPI::toJsonValue(m_payer_state_number_lower));
    }
    if (m_primary_state_isSet) {
        obj.insert(QString("primary_state"), ::OpenAPI::toJsonValue(m_primary_state));
    }
    if (m_primary_state_id_isSet) {
        obj.insert(QString("primary_state_id"), ::OpenAPI::toJsonValue(m_primary_state_id));
    }
    if (m_primary_state_income_tax_isSet) {
        obj.insert(QString("primary_state_income_tax"), ::OpenAPI::toJsonValue(m_primary_state_income_tax));
    }
    if (m_pse_name_isSet) {
        obj.insert(QString("pse_name"), ::OpenAPI::toJsonValue(m_pse_name));
    }
    if (m_pse_telephone_number_isSet) {
        obj.insert(QString("pse_telephone_number"), ::OpenAPI::toJsonValue(m_pse_telephone_number));
    }
    if (m_recipient.isSet()) {
        obj.insert(QString("recipient"), ::OpenAPI::toJsonValue(m_recipient));
    }
    if (m_rents_isSet) {
        obj.insert(QString("rents"), ::OpenAPI::toJsonValue(m_rents));
    }
    if (m_royalties_isSet) {
        obj.insert(QString("royalties"), ::OpenAPI::toJsonValue(m_royalties));
    }
    if (m_secondary_state_isSet) {
        obj.insert(QString("secondary_state"), ::OpenAPI::toJsonValue(m_secondary_state));
    }
    if (m_secondary_state_id_isSet) {
        obj.insert(QString("secondary_state_id"), ::OpenAPI::toJsonValue(m_secondary_state_id));
    }
    if (m_secondary_state_income_tax_isSet) {
        obj.insert(QString("secondary_state_income_tax"), ::OpenAPI::toJsonValue(m_secondary_state_income_tax));
    }
    if (m_section_409a_deferrals_isSet) {
        obj.insert(QString("section_409a_deferrals"), ::OpenAPI::toJsonValue(m_section_409a_deferrals));
    }
    if (m_section_409a_income_isSet) {
        obj.insert(QString("section_409a_income"), ::OpenAPI::toJsonValue(m_section_409a_income));
    }
    if (m_september_amount_isSet) {
        obj.insert(QString("september_amount"), ::OpenAPI::toJsonValue(m_september_amount));
    }
    if (m_state_income_isSet) {
        obj.insert(QString("state_income"), ::OpenAPI::toJsonValue(m_state_income));
    }
    if (m_state_income_lower_isSet) {
        obj.insert(QString("state_income_lower"), ::OpenAPI::toJsonValue(m_state_income_lower));
    }
    if (m_state_tax_withheld_isSet) {
        obj.insert(QString("state_tax_withheld"), ::OpenAPI::toJsonValue(m_state_tax_withheld));
    }
    if (m_state_tax_withheld_lower_isSet) {
        obj.insert(QString("state_tax_withheld_lower"), ::OpenAPI::toJsonValue(m_state_tax_withheld_lower));
    }
    if (m_substitute_payments_in_lieu_of_dividends_or_interest_isSet) {
        obj.insert(QString("substitute_payments_in_lieu_of_dividends_or_interest"), ::OpenAPI::toJsonValue(m_substitute_payments_in_lieu_of_dividends_or_interest));
    }
    if (m_tax_year_isSet) {
        obj.insert(QString("tax_year"), ::OpenAPI::toJsonValue(m_tax_year));
    }
    if (m_transactions_reported_isSet) {
        obj.insert(QString("transactions_reported"), ::OpenAPI::toJsonValue(m_transactions_reported));
    }
    return obj;
}

double OAICredit1099::getAprilAmount() const {
    return m_april_amount;
}
void OAICredit1099::setAprilAmount(const double &april_amount) {
    m_april_amount = april_amount;
    m_april_amount_isSet = true;
}

bool OAICredit1099::is_april_amount_Set() const{
    return m_april_amount_isSet;
}

bool OAICredit1099::is_april_amount_Valid() const{
    return m_april_amount_isValid;
}

double OAICredit1099::getAugustAmount() const {
    return m_august_amount;
}
void OAICredit1099::setAugustAmount(const double &august_amount) {
    m_august_amount = august_amount;
    m_august_amount_isSet = true;
}

bool OAICredit1099::is_august_amount_Set() const{
    return m_august_amount_isSet;
}

bool OAICredit1099::is_august_amount_Valid() const{
    return m_august_amount_isValid;
}

double OAICredit1099::getCardNotPresentTransaction() const {
    return m_card_not_present_transaction;
}
void OAICredit1099::setCardNotPresentTransaction(const double &card_not_present_transaction) {
    m_card_not_present_transaction = card_not_present_transaction;
    m_card_not_present_transaction_isSet = true;
}

bool OAICredit1099::is_card_not_present_transaction_Set() const{
    return m_card_not_present_transaction_isSet;
}

bool OAICredit1099::is_card_not_present_transaction_Valid() const{
    return m_card_not_present_transaction_isValid;
}

double OAICredit1099::getCropInsuranceProceeds() const {
    return m_crop_insurance_proceeds;
}
void OAICredit1099::setCropInsuranceProceeds(const double &crop_insurance_proceeds) {
    m_crop_insurance_proceeds = crop_insurance_proceeds;
    m_crop_insurance_proceeds_isSet = true;
}

bool OAICredit1099::is_crop_insurance_proceeds_Set() const{
    return m_crop_insurance_proceeds_isSet;
}

bool OAICredit1099::is_crop_insurance_proceeds_Valid() const{
    return m_crop_insurance_proceeds_isValid;
}

double OAICredit1099::getDecemberAmount() const {
    return m_december_amount;
}
void OAICredit1099::setDecemberAmount(const double &december_amount) {
    m_december_amount = december_amount;
    m_december_amount_isSet = true;
}

bool OAICredit1099::is_december_amount_Set() const{
    return m_december_amount_isSet;
}

bool OAICredit1099::is_december_amount_Valid() const{
    return m_december_amount_isValid;
}

QString OAICredit1099::getDocumentId() const {
    return m_document_id;
}
void OAICredit1099::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAICredit1099::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAICredit1099::is_document_id_Valid() const{
    return m_document_id_isValid;
}

OAICreditDocumentMetadata OAICredit1099::getDocumentMetadata() const {
    return m_document_metadata;
}
void OAICredit1099::setDocumentMetadata(const OAICreditDocumentMetadata &document_metadata) {
    m_document_metadata = document_metadata;
    m_document_metadata_isSet = true;
}

bool OAICredit1099::is_document_metadata_Set() const{
    return m_document_metadata_isSet;
}

bool OAICredit1099::is_document_metadata_Valid() const{
    return m_document_metadata_isValid;
}

double OAICredit1099::getExcessGoldenParachutePayments() const {
    return m_excess_golden_parachute_payments;
}
void OAICredit1099::setExcessGoldenParachutePayments(const double &excess_golden_parachute_payments) {
    m_excess_golden_parachute_payments = excess_golden_parachute_payments;
    m_excess_golden_parachute_payments_isSet = true;
}

bool OAICredit1099::is_excess_golden_parachute_payments_Set() const{
    return m_excess_golden_parachute_payments_isSet;
}

bool OAICredit1099::is_excess_golden_parachute_payments_Valid() const{
    return m_excess_golden_parachute_payments_isValid;
}

double OAICredit1099::getFebruaryAmount() const {
    return m_february_amount;
}
void OAICredit1099::setFebruaryAmount(const double &february_amount) {
    m_february_amount = february_amount;
    m_february_amount_isSet = true;
}

bool OAICredit1099::is_february_amount_Set() const{
    return m_february_amount_isSet;
}

bool OAICredit1099::is_february_amount_Valid() const{
    return m_february_amount_isValid;
}

double OAICredit1099::getFederalIncomeTaxWithheld() const {
    return m_federal_income_tax_withheld;
}
void OAICredit1099::setFederalIncomeTaxWithheld(const double &federal_income_tax_withheld) {
    m_federal_income_tax_withheld = federal_income_tax_withheld;
    m_federal_income_tax_withheld_isSet = true;
}

bool OAICredit1099::is_federal_income_tax_withheld_Set() const{
    return m_federal_income_tax_withheld_isSet;
}

bool OAICredit1099::is_federal_income_tax_withheld_Valid() const{
    return m_federal_income_tax_withheld_isValid;
}

OAICredit1099Filer OAICredit1099::getFiler() const {
    return m_filer;
}
void OAICredit1099::setFiler(const OAICredit1099Filer &filer) {
    m_filer = filer;
    m_filer_isSet = true;
}

bool OAICredit1099::is_filer_Set() const{
    return m_filer_isSet;
}

bool OAICredit1099::is_filer_Valid() const{
    return m_filer_isValid;
}

double OAICredit1099::getFishingBoatProceeds() const {
    return m_fishing_boat_proceeds;
}
void OAICredit1099::setFishingBoatProceeds(const double &fishing_boat_proceeds) {
    m_fishing_boat_proceeds = fishing_boat_proceeds;
    m_fishing_boat_proceeds_isSet = true;
}

bool OAICredit1099::is_fishing_boat_proceeds_Set() const{
    return m_fishing_boat_proceeds_isSet;
}

bool OAICredit1099::is_fishing_boat_proceeds_Valid() const{
    return m_fishing_boat_proceeds_isValid;
}

OAIForm1099Type OAICredit1099::getForm1099Type() const {
    return m_form_1099_type;
}
void OAICredit1099::setForm1099Type(const OAIForm1099Type &form_1099_type) {
    m_form_1099_type = form_1099_type;
    m_form_1099_type_isSet = true;
}

bool OAICredit1099::is_form_1099_type_Set() const{
    return m_form_1099_type_isSet;
}

bool OAICredit1099::is_form_1099_type_Valid() const{
    return m_form_1099_type_isValid;
}

double OAICredit1099::getGrossAmount() const {
    return m_gross_amount;
}
void OAICredit1099::setGrossAmount(const double &gross_amount) {
    m_gross_amount = gross_amount;
    m_gross_amount_isSet = true;
}

bool OAICredit1099::is_gross_amount_Set() const{
    return m_gross_amount_isSet;
}

bool OAICredit1099::is_gross_amount_Valid() const{
    return m_gross_amount_isValid;
}

double OAICredit1099::getGrossProceedsPaidToAnAttorney() const {
    return m_gross_proceeds_paid_to_an_attorney;
}
void OAICredit1099::setGrossProceedsPaidToAnAttorney(const double &gross_proceeds_paid_to_an_attorney) {
    m_gross_proceeds_paid_to_an_attorney = gross_proceeds_paid_to_an_attorney;
    m_gross_proceeds_paid_to_an_attorney_isSet = true;
}

bool OAICredit1099::is_gross_proceeds_paid_to_an_attorney_Set() const{
    return m_gross_proceeds_paid_to_an_attorney_isSet;
}

bool OAICredit1099::is_gross_proceeds_paid_to_an_attorney_Valid() const{
    return m_gross_proceeds_paid_to_an_attorney_isValid;
}

double OAICredit1099::getJanuaryAmount() const {
    return m_january_amount;
}
void OAICredit1099::setJanuaryAmount(const double &january_amount) {
    m_january_amount = january_amount;
    m_january_amount_isSet = true;
}

bool OAICredit1099::is_january_amount_Set() const{
    return m_january_amount_isSet;
}

bool OAICredit1099::is_january_amount_Valid() const{
    return m_january_amount_isValid;
}

double OAICredit1099::getJulyAmount() const {
    return m_july_amount;
}
void OAICredit1099::setJulyAmount(const double &july_amount) {
    m_july_amount = july_amount;
    m_july_amount_isSet = true;
}

bool OAICredit1099::is_july_amount_Set() const{
    return m_july_amount_isSet;
}

bool OAICredit1099::is_july_amount_Valid() const{
    return m_july_amount_isValid;
}

double OAICredit1099::getJuneAmount() const {
    return m_june_amount;
}
void OAICredit1099::setJuneAmount(const double &june_amount) {
    m_june_amount = june_amount;
    m_june_amount_isSet = true;
}

bool OAICredit1099::is_june_amount_Set() const{
    return m_june_amount_isSet;
}

bool OAICredit1099::is_june_amount_Valid() const{
    return m_june_amount_isValid;
}

double OAICredit1099::getMarchAmount() const {
    return m_march_amount;
}
void OAICredit1099::setMarchAmount(const double &march_amount) {
    m_march_amount = march_amount;
    m_march_amount_isSet = true;
}

bool OAICredit1099::is_march_amount_Set() const{
    return m_march_amount_isSet;
}

bool OAICredit1099::is_march_amount_Valid() const{
    return m_march_amount_isValid;
}

double OAICredit1099::getMayAmount() const {
    return m_may_amount;
}
void OAICredit1099::setMayAmount(const double &may_amount) {
    m_may_amount = may_amount;
    m_may_amount_isSet = true;
}

bool OAICredit1099::is_may_amount_Set() const{
    return m_may_amount_isSet;
}

bool OAICredit1099::is_may_amount_Valid() const{
    return m_may_amount_isValid;
}

double OAICredit1099::getMedicalAndHealthcarePayments() const {
    return m_medical_and_healthcare_payments;
}
void OAICredit1099::setMedicalAndHealthcarePayments(const double &medical_and_healthcare_payments) {
    m_medical_and_healthcare_payments = medical_and_healthcare_payments;
    m_medical_and_healthcare_payments_isSet = true;
}

bool OAICredit1099::is_medical_and_healthcare_payments_Set() const{
    return m_medical_and_healthcare_payments_isSet;
}

bool OAICredit1099::is_medical_and_healthcare_payments_Valid() const{
    return m_medical_and_healthcare_payments_isValid;
}

QString OAICredit1099::getMerchantCategoryCode() const {
    return m_merchant_category_code;
}
void OAICredit1099::setMerchantCategoryCode(const QString &merchant_category_code) {
    m_merchant_category_code = merchant_category_code;
    m_merchant_category_code_isSet = true;
}

bool OAICredit1099::is_merchant_category_code_Set() const{
    return m_merchant_category_code_isSet;
}

bool OAICredit1099::is_merchant_category_code_Valid() const{
    return m_merchant_category_code_isValid;
}

double OAICredit1099::getNonemployeeCompensation() const {
    return m_nonemployee_compensation;
}
void OAICredit1099::setNonemployeeCompensation(const double &nonemployee_compensation) {
    m_nonemployee_compensation = nonemployee_compensation;
    m_nonemployee_compensation_isSet = true;
}

bool OAICredit1099::is_nonemployee_compensation_Set() const{
    return m_nonemployee_compensation_isSet;
}

bool OAICredit1099::is_nonemployee_compensation_Valid() const{
    return m_nonemployee_compensation_isValid;
}

double OAICredit1099::getNovemberAmount() const {
    return m_november_amount;
}
void OAICredit1099::setNovemberAmount(const double &november_amount) {
    m_november_amount = november_amount;
    m_november_amount_isSet = true;
}

bool OAICredit1099::is_november_amount_Set() const{
    return m_november_amount_isSet;
}

bool OAICredit1099::is_november_amount_Valid() const{
    return m_november_amount_isValid;
}

QString OAICredit1099::getNumberOfPaymentTransactions() const {
    return m_number_of_payment_transactions;
}
void OAICredit1099::setNumberOfPaymentTransactions(const QString &number_of_payment_transactions) {
    m_number_of_payment_transactions = number_of_payment_transactions;
    m_number_of_payment_transactions_isSet = true;
}

bool OAICredit1099::is_number_of_payment_transactions_Set() const{
    return m_number_of_payment_transactions_isSet;
}

bool OAICredit1099::is_number_of_payment_transactions_Valid() const{
    return m_number_of_payment_transactions_isValid;
}

double OAICredit1099::getOctoberAmount() const {
    return m_october_amount;
}
void OAICredit1099::setOctoberAmount(const double &october_amount) {
    m_october_amount = october_amount;
    m_october_amount_isSet = true;
}

bool OAICredit1099::is_october_amount_Set() const{
    return m_october_amount_isSet;
}

bool OAICredit1099::is_october_amount_Valid() const{
    return m_october_amount_isValid;
}

double OAICredit1099::getOtherIncome() const {
    return m_other_income;
}
void OAICredit1099::setOtherIncome(const double &other_income) {
    m_other_income = other_income;
    m_other_income_isSet = true;
}

bool OAICredit1099::is_other_income_Set() const{
    return m_other_income_isSet;
}

bool OAICredit1099::is_other_income_Valid() const{
    return m_other_income_isValid;
}

OAICredit1099Payer OAICredit1099::getPayer() const {
    return m_payer;
}
void OAICredit1099::setPayer(const OAICredit1099Payer &payer) {
    m_payer = payer;
    m_payer_isSet = true;
}

bool OAICredit1099::is_payer_Set() const{
    return m_payer_isSet;
}

bool OAICredit1099::is_payer_Valid() const{
    return m_payer_isValid;
}

QString OAICredit1099::getPayerMadeDirectSalesOf5000OrMoreOfConsumerProductsToBuyer() const {
    return m_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer;
}
void OAICredit1099::setPayerMadeDirectSalesOf5000OrMoreOfConsumerProductsToBuyer(const QString &payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer) {
    m_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer = payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer;
    m_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer_isSet = true;
}

bool OAICredit1099::is_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer_Set() const{
    return m_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer_isSet;
}

bool OAICredit1099::is_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer_Valid() const{
    return m_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer_isValid;
}

QString OAICredit1099::getPayerStateNumber() const {
    return m_payer_state_number;
}
void OAICredit1099::setPayerStateNumber(const QString &payer_state_number) {
    m_payer_state_number = payer_state_number;
    m_payer_state_number_isSet = true;
}

bool OAICredit1099::is_payer_state_number_Set() const{
    return m_payer_state_number_isSet;
}

bool OAICredit1099::is_payer_state_number_Valid() const{
    return m_payer_state_number_isValid;
}

QString OAICredit1099::getPayerStateNumberLower() const {
    return m_payer_state_number_lower;
}
void OAICredit1099::setPayerStateNumberLower(const QString &payer_state_number_lower) {
    m_payer_state_number_lower = payer_state_number_lower;
    m_payer_state_number_lower_isSet = true;
}

bool OAICredit1099::is_payer_state_number_lower_Set() const{
    return m_payer_state_number_lower_isSet;
}

bool OAICredit1099::is_payer_state_number_lower_Valid() const{
    return m_payer_state_number_lower_isValid;
}

QString OAICredit1099::getPrimaryState() const {
    return m_primary_state;
}
void OAICredit1099::setPrimaryState(const QString &primary_state) {
    m_primary_state = primary_state;
    m_primary_state_isSet = true;
}

bool OAICredit1099::is_primary_state_Set() const{
    return m_primary_state_isSet;
}

bool OAICredit1099::is_primary_state_Valid() const{
    return m_primary_state_isValid;
}

QString OAICredit1099::getPrimaryStateId() const {
    return m_primary_state_id;
}
void OAICredit1099::setPrimaryStateId(const QString &primary_state_id) {
    m_primary_state_id = primary_state_id;
    m_primary_state_id_isSet = true;
}

bool OAICredit1099::is_primary_state_id_Set() const{
    return m_primary_state_id_isSet;
}

bool OAICredit1099::is_primary_state_id_Valid() const{
    return m_primary_state_id_isValid;
}

double OAICredit1099::getPrimaryStateIncomeTax() const {
    return m_primary_state_income_tax;
}
void OAICredit1099::setPrimaryStateIncomeTax(const double &primary_state_income_tax) {
    m_primary_state_income_tax = primary_state_income_tax;
    m_primary_state_income_tax_isSet = true;
}

bool OAICredit1099::is_primary_state_income_tax_Set() const{
    return m_primary_state_income_tax_isSet;
}

bool OAICredit1099::is_primary_state_income_tax_Valid() const{
    return m_primary_state_income_tax_isValid;
}

QString OAICredit1099::getPseName() const {
    return m_pse_name;
}
void OAICredit1099::setPseName(const QString &pse_name) {
    m_pse_name = pse_name;
    m_pse_name_isSet = true;
}

bool OAICredit1099::is_pse_name_Set() const{
    return m_pse_name_isSet;
}

bool OAICredit1099::is_pse_name_Valid() const{
    return m_pse_name_isValid;
}

QString OAICredit1099::getPseTelephoneNumber() const {
    return m_pse_telephone_number;
}
void OAICredit1099::setPseTelephoneNumber(const QString &pse_telephone_number) {
    m_pse_telephone_number = pse_telephone_number;
    m_pse_telephone_number_isSet = true;
}

bool OAICredit1099::is_pse_telephone_number_Set() const{
    return m_pse_telephone_number_isSet;
}

bool OAICredit1099::is_pse_telephone_number_Valid() const{
    return m_pse_telephone_number_isValid;
}

OAICredit1099Recipient OAICredit1099::getRecipient() const {
    return m_recipient;
}
void OAICredit1099::setRecipient(const OAICredit1099Recipient &recipient) {
    m_recipient = recipient;
    m_recipient_isSet = true;
}

bool OAICredit1099::is_recipient_Set() const{
    return m_recipient_isSet;
}

bool OAICredit1099::is_recipient_Valid() const{
    return m_recipient_isValid;
}

double OAICredit1099::getRents() const {
    return m_rents;
}
void OAICredit1099::setRents(const double &rents) {
    m_rents = rents;
    m_rents_isSet = true;
}

bool OAICredit1099::is_rents_Set() const{
    return m_rents_isSet;
}

bool OAICredit1099::is_rents_Valid() const{
    return m_rents_isValid;
}

double OAICredit1099::getRoyalties() const {
    return m_royalties;
}
void OAICredit1099::setRoyalties(const double &royalties) {
    m_royalties = royalties;
    m_royalties_isSet = true;
}

bool OAICredit1099::is_royalties_Set() const{
    return m_royalties_isSet;
}

bool OAICredit1099::is_royalties_Valid() const{
    return m_royalties_isValid;
}

QString OAICredit1099::getSecondaryState() const {
    return m_secondary_state;
}
void OAICredit1099::setSecondaryState(const QString &secondary_state) {
    m_secondary_state = secondary_state;
    m_secondary_state_isSet = true;
}

bool OAICredit1099::is_secondary_state_Set() const{
    return m_secondary_state_isSet;
}

bool OAICredit1099::is_secondary_state_Valid() const{
    return m_secondary_state_isValid;
}

QString OAICredit1099::getSecondaryStateId() const {
    return m_secondary_state_id;
}
void OAICredit1099::setSecondaryStateId(const QString &secondary_state_id) {
    m_secondary_state_id = secondary_state_id;
    m_secondary_state_id_isSet = true;
}

bool OAICredit1099::is_secondary_state_id_Set() const{
    return m_secondary_state_id_isSet;
}

bool OAICredit1099::is_secondary_state_id_Valid() const{
    return m_secondary_state_id_isValid;
}

double OAICredit1099::getSecondaryStateIncomeTax() const {
    return m_secondary_state_income_tax;
}
void OAICredit1099::setSecondaryStateIncomeTax(const double &secondary_state_income_tax) {
    m_secondary_state_income_tax = secondary_state_income_tax;
    m_secondary_state_income_tax_isSet = true;
}

bool OAICredit1099::is_secondary_state_income_tax_Set() const{
    return m_secondary_state_income_tax_isSet;
}

bool OAICredit1099::is_secondary_state_income_tax_Valid() const{
    return m_secondary_state_income_tax_isValid;
}

double OAICredit1099::getSection409aDeferrals() const {
    return m_section_409a_deferrals;
}
void OAICredit1099::setSection409aDeferrals(const double &section_409a_deferrals) {
    m_section_409a_deferrals = section_409a_deferrals;
    m_section_409a_deferrals_isSet = true;
}

bool OAICredit1099::is_section_409a_deferrals_Set() const{
    return m_section_409a_deferrals_isSet;
}

bool OAICredit1099::is_section_409a_deferrals_Valid() const{
    return m_section_409a_deferrals_isValid;
}

double OAICredit1099::getSection409aIncome() const {
    return m_section_409a_income;
}
void OAICredit1099::setSection409aIncome(const double &section_409a_income) {
    m_section_409a_income = section_409a_income;
    m_section_409a_income_isSet = true;
}

bool OAICredit1099::is_section_409a_income_Set() const{
    return m_section_409a_income_isSet;
}

bool OAICredit1099::is_section_409a_income_Valid() const{
    return m_section_409a_income_isValid;
}

double OAICredit1099::getSeptemberAmount() const {
    return m_september_amount;
}
void OAICredit1099::setSeptemberAmount(const double &september_amount) {
    m_september_amount = september_amount;
    m_september_amount_isSet = true;
}

bool OAICredit1099::is_september_amount_Set() const{
    return m_september_amount_isSet;
}

bool OAICredit1099::is_september_amount_Valid() const{
    return m_september_amount_isValid;
}

double OAICredit1099::getStateIncome() const {
    return m_state_income;
}
void OAICredit1099::setStateIncome(const double &state_income) {
    m_state_income = state_income;
    m_state_income_isSet = true;
}

bool OAICredit1099::is_state_income_Set() const{
    return m_state_income_isSet;
}

bool OAICredit1099::is_state_income_Valid() const{
    return m_state_income_isValid;
}

double OAICredit1099::getStateIncomeLower() const {
    return m_state_income_lower;
}
void OAICredit1099::setStateIncomeLower(const double &state_income_lower) {
    m_state_income_lower = state_income_lower;
    m_state_income_lower_isSet = true;
}

bool OAICredit1099::is_state_income_lower_Set() const{
    return m_state_income_lower_isSet;
}

bool OAICredit1099::is_state_income_lower_Valid() const{
    return m_state_income_lower_isValid;
}

double OAICredit1099::getStateTaxWithheld() const {
    return m_state_tax_withheld;
}
void OAICredit1099::setStateTaxWithheld(const double &state_tax_withheld) {
    m_state_tax_withheld = state_tax_withheld;
    m_state_tax_withheld_isSet = true;
}

bool OAICredit1099::is_state_tax_withheld_Set() const{
    return m_state_tax_withheld_isSet;
}

bool OAICredit1099::is_state_tax_withheld_Valid() const{
    return m_state_tax_withheld_isValid;
}

double OAICredit1099::getStateTaxWithheldLower() const {
    return m_state_tax_withheld_lower;
}
void OAICredit1099::setStateTaxWithheldLower(const double &state_tax_withheld_lower) {
    m_state_tax_withheld_lower = state_tax_withheld_lower;
    m_state_tax_withheld_lower_isSet = true;
}

bool OAICredit1099::is_state_tax_withheld_lower_Set() const{
    return m_state_tax_withheld_lower_isSet;
}

bool OAICredit1099::is_state_tax_withheld_lower_Valid() const{
    return m_state_tax_withheld_lower_isValid;
}

double OAICredit1099::getSubstitutePaymentsInLieuOfDividendsOrInterest() const {
    return m_substitute_payments_in_lieu_of_dividends_or_interest;
}
void OAICredit1099::setSubstitutePaymentsInLieuOfDividendsOrInterest(const double &substitute_payments_in_lieu_of_dividends_or_interest) {
    m_substitute_payments_in_lieu_of_dividends_or_interest = substitute_payments_in_lieu_of_dividends_or_interest;
    m_substitute_payments_in_lieu_of_dividends_or_interest_isSet = true;
}

bool OAICredit1099::is_substitute_payments_in_lieu_of_dividends_or_interest_Set() const{
    return m_substitute_payments_in_lieu_of_dividends_or_interest_isSet;
}

bool OAICredit1099::is_substitute_payments_in_lieu_of_dividends_or_interest_Valid() const{
    return m_substitute_payments_in_lieu_of_dividends_or_interest_isValid;
}

QString OAICredit1099::getTaxYear() const {
    return m_tax_year;
}
void OAICredit1099::setTaxYear(const QString &tax_year) {
    m_tax_year = tax_year;
    m_tax_year_isSet = true;
}

bool OAICredit1099::is_tax_year_Set() const{
    return m_tax_year_isSet;
}

bool OAICredit1099::is_tax_year_Valid() const{
    return m_tax_year_isValid;
}

QString OAICredit1099::getTransactionsReported() const {
    return m_transactions_reported;
}
void OAICredit1099::setTransactionsReported(const QString &transactions_reported) {
    m_transactions_reported = transactions_reported;
    m_transactions_reported_isSet = true;
}

bool OAICredit1099::is_transactions_reported_Set() const{
    return m_transactions_reported_isSet;
}

bool OAICredit1099::is_transactions_reported_Valid() const{
    return m_transactions_reported_isValid;
}

bool OAICredit1099::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_april_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_august_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_not_present_transaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crop_insurance_proceeds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_december_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_excess_golden_parachute_payments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_february_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_income_tax_withheld_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fishing_boat_proceeds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_1099_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gross_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gross_proceeds_paid_to_an_attorney_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_january_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_july_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_june_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_march_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_may_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medical_and_healthcare_payments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_category_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nonemployee_compensation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_november_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_payment_transactions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_october_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_income_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payer_state_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payer_state_number_lower_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_state_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_state_income_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pse_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pse_telephone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rents_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_royalties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_state_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_state_income_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_409a_deferrals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_409a_income_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_september_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_income_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_income_lower_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_tax_withheld_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_tax_withheld_lower_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_substitute_payments_in_lieu_of_dividends_or_interest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions_reported_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICredit1099::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_id_isValid && true;
}

} // namespace OpenAPI
