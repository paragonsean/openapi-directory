/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkTokenCreateRequestAuth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkTokenCreateRequestAuth::OAILinkTokenCreateRequestAuth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkTokenCreateRequestAuth::OAILinkTokenCreateRequestAuth() {
    this->initializeModel();
}

OAILinkTokenCreateRequestAuth::~OAILinkTokenCreateRequestAuth() {}

void OAILinkTokenCreateRequestAuth::initializeModel() {

    m_auth_type_select_enabled_isSet = false;
    m_auth_type_select_enabled_isValid = false;

    m_automated_microdeposits_enabled_isSet = false;
    m_automated_microdeposits_enabled_isValid = false;

    m_flow_type_isSet = false;
    m_flow_type_isValid = false;

    m_instant_match_enabled_isSet = false;
    m_instant_match_enabled_isValid = false;

    m_same_day_microdeposits_enabled_isSet = false;
    m_same_day_microdeposits_enabled_isValid = false;
}

void OAILinkTokenCreateRequestAuth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinkTokenCreateRequestAuth::fromJsonObject(QJsonObject json) {

    m_auth_type_select_enabled_isValid = ::OpenAPI::fromJsonValue(m_auth_type_select_enabled, json[QString("auth_type_select_enabled")]);
    m_auth_type_select_enabled_isSet = !json[QString("auth_type_select_enabled")].isNull() && m_auth_type_select_enabled_isValid;

    m_automated_microdeposits_enabled_isValid = ::OpenAPI::fromJsonValue(m_automated_microdeposits_enabled, json[QString("automated_microdeposits_enabled")]);
    m_automated_microdeposits_enabled_isSet = !json[QString("automated_microdeposits_enabled")].isNull() && m_automated_microdeposits_enabled_isValid;

    m_flow_type_isValid = ::OpenAPI::fromJsonValue(m_flow_type, json[QString("flow_type")]);
    m_flow_type_isSet = !json[QString("flow_type")].isNull() && m_flow_type_isValid;

    m_instant_match_enabled_isValid = ::OpenAPI::fromJsonValue(m_instant_match_enabled, json[QString("instant_match_enabled")]);
    m_instant_match_enabled_isSet = !json[QString("instant_match_enabled")].isNull() && m_instant_match_enabled_isValid;

    m_same_day_microdeposits_enabled_isValid = ::OpenAPI::fromJsonValue(m_same_day_microdeposits_enabled, json[QString("same_day_microdeposits_enabled")]);
    m_same_day_microdeposits_enabled_isSet = !json[QString("same_day_microdeposits_enabled")].isNull() && m_same_day_microdeposits_enabled_isValid;
}

QString OAILinkTokenCreateRequestAuth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinkTokenCreateRequestAuth::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_type_select_enabled_isSet) {
        obj.insert(QString("auth_type_select_enabled"), ::OpenAPI::toJsonValue(m_auth_type_select_enabled));
    }
    if (m_automated_microdeposits_enabled_isSet) {
        obj.insert(QString("automated_microdeposits_enabled"), ::OpenAPI::toJsonValue(m_automated_microdeposits_enabled));
    }
    if (m_flow_type_isSet) {
        obj.insert(QString("flow_type"), ::OpenAPI::toJsonValue(m_flow_type));
    }
    if (m_instant_match_enabled_isSet) {
        obj.insert(QString("instant_match_enabled"), ::OpenAPI::toJsonValue(m_instant_match_enabled));
    }
    if (m_same_day_microdeposits_enabled_isSet) {
        obj.insert(QString("same_day_microdeposits_enabled"), ::OpenAPI::toJsonValue(m_same_day_microdeposits_enabled));
    }
    return obj;
}

bool OAILinkTokenCreateRequestAuth::isAuthTypeSelectEnabled() const {
    return m_auth_type_select_enabled;
}
void OAILinkTokenCreateRequestAuth::setAuthTypeSelectEnabled(const bool &auth_type_select_enabled) {
    m_auth_type_select_enabled = auth_type_select_enabled;
    m_auth_type_select_enabled_isSet = true;
}

bool OAILinkTokenCreateRequestAuth::is_auth_type_select_enabled_Set() const{
    return m_auth_type_select_enabled_isSet;
}

bool OAILinkTokenCreateRequestAuth::is_auth_type_select_enabled_Valid() const{
    return m_auth_type_select_enabled_isValid;
}

bool OAILinkTokenCreateRequestAuth::isAutomatedMicrodepositsEnabled() const {
    return m_automated_microdeposits_enabled;
}
void OAILinkTokenCreateRequestAuth::setAutomatedMicrodepositsEnabled(const bool &automated_microdeposits_enabled) {
    m_automated_microdeposits_enabled = automated_microdeposits_enabled;
    m_automated_microdeposits_enabled_isSet = true;
}

bool OAILinkTokenCreateRequestAuth::is_automated_microdeposits_enabled_Set() const{
    return m_automated_microdeposits_enabled_isSet;
}

bool OAILinkTokenCreateRequestAuth::is_automated_microdeposits_enabled_Valid() const{
    return m_automated_microdeposits_enabled_isValid;
}

QString OAILinkTokenCreateRequestAuth::getFlowType() const {
    return m_flow_type;
}
void OAILinkTokenCreateRequestAuth::setFlowType(const QString &flow_type) {
    m_flow_type = flow_type;
    m_flow_type_isSet = true;
}

bool OAILinkTokenCreateRequestAuth::is_flow_type_Set() const{
    return m_flow_type_isSet;
}

bool OAILinkTokenCreateRequestAuth::is_flow_type_Valid() const{
    return m_flow_type_isValid;
}

bool OAILinkTokenCreateRequestAuth::isInstantMatchEnabled() const {
    return m_instant_match_enabled;
}
void OAILinkTokenCreateRequestAuth::setInstantMatchEnabled(const bool &instant_match_enabled) {
    m_instant_match_enabled = instant_match_enabled;
    m_instant_match_enabled_isSet = true;
}

bool OAILinkTokenCreateRequestAuth::is_instant_match_enabled_Set() const{
    return m_instant_match_enabled_isSet;
}

bool OAILinkTokenCreateRequestAuth::is_instant_match_enabled_Valid() const{
    return m_instant_match_enabled_isValid;
}

bool OAILinkTokenCreateRequestAuth::isSameDayMicrodepositsEnabled() const {
    return m_same_day_microdeposits_enabled;
}
void OAILinkTokenCreateRequestAuth::setSameDayMicrodepositsEnabled(const bool &same_day_microdeposits_enabled) {
    m_same_day_microdeposits_enabled = same_day_microdeposits_enabled;
    m_same_day_microdeposits_enabled_isSet = true;
}

bool OAILinkTokenCreateRequestAuth::is_same_day_microdeposits_enabled_Set() const{
    return m_same_day_microdeposits_enabled_isSet;
}

bool OAILinkTokenCreateRequestAuth::is_same_day_microdeposits_enabled_Valid() const{
    return m_same_day_microdeposits_enabled_isValid;
}

bool OAILinkTokenCreateRequestAuth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_type_select_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automated_microdeposits_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instant_match_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_same_day_microdeposits_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinkTokenCreateRequestAuth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
