/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartnerEndCustomerAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartnerEndCustomerAddress::OAIPartnerEndCustomerAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartnerEndCustomerAddress::OAIPartnerEndCustomerAddress() {
    this->initializeModel();
}

OAIPartnerEndCustomerAddress::~OAIPartnerEndCustomerAddress() {}

void OAIPartnerEndCustomerAddress::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;
}

void OAIPartnerEndCustomerAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartnerEndCustomerAddress::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;
}

QString OAIPartnerEndCustomerAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartnerEndCustomerAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    return obj;
}

QString OAIPartnerEndCustomerAddress::getCity() const {
    return m_city;
}
void OAIPartnerEndCustomerAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIPartnerEndCustomerAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIPartnerEndCustomerAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIPartnerEndCustomerAddress::getCountryCode() const {
    return m_country_code;
}
void OAIPartnerEndCustomerAddress::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIPartnerEndCustomerAddress::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIPartnerEndCustomerAddress::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIPartnerEndCustomerAddress::getPostalCode() const {
    return m_postal_code;
}
void OAIPartnerEndCustomerAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIPartnerEndCustomerAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIPartnerEndCustomerAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIPartnerEndCustomerAddress::getRegion() const {
    return m_region;
}
void OAIPartnerEndCustomerAddress::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIPartnerEndCustomerAddress::is_region_Set() const{
    return m_region_isSet;
}

bool OAIPartnerEndCustomerAddress::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIPartnerEndCustomerAddress::getStreet() const {
    return m_street;
}
void OAIPartnerEndCustomerAddress::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIPartnerEndCustomerAddress::is_street_Set() const{
    return m_street_isSet;
}

bool OAIPartnerEndCustomerAddress::is_street_Valid() const{
    return m_street_isValid;
}

bool OAIPartnerEndCustomerAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartnerEndCustomerAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
