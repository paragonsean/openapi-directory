/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWatchlistScreeningEntityReviewCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWatchlistScreeningEntityReviewCreateRequest::OAIWatchlistScreeningEntityReviewCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWatchlistScreeningEntityReviewCreateRequest::OAIWatchlistScreeningEntityReviewCreateRequest() {
    this->initializeModel();
}

OAIWatchlistScreeningEntityReviewCreateRequest::~OAIWatchlistScreeningEntityReviewCreateRequest() {}

void OAIWatchlistScreeningEntityReviewCreateRequest::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_confirmed_hits_isSet = false;
    m_confirmed_hits_isValid = false;

    m_dismissed_hits_isSet = false;
    m_dismissed_hits_isValid = false;

    m_entity_watchlist_screening_id_isSet = false;
    m_entity_watchlist_screening_id_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;
}

void OAIWatchlistScreeningEntityReviewCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWatchlistScreeningEntityReviewCreateRequest::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_confirmed_hits_isValid = ::OpenAPI::fromJsonValue(m_confirmed_hits, json[QString("confirmed_hits")]);
    m_confirmed_hits_isSet = !json[QString("confirmed_hits")].isNull() && m_confirmed_hits_isValid;

    m_dismissed_hits_isValid = ::OpenAPI::fromJsonValue(m_dismissed_hits, json[QString("dismissed_hits")]);
    m_dismissed_hits_isSet = !json[QString("dismissed_hits")].isNull() && m_dismissed_hits_isValid;

    m_entity_watchlist_screening_id_isValid = ::OpenAPI::fromJsonValue(m_entity_watchlist_screening_id, json[QString("entity_watchlist_screening_id")]);
    m_entity_watchlist_screening_id_isSet = !json[QString("entity_watchlist_screening_id")].isNull() && m_entity_watchlist_screening_id_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;
}

QString OAIWatchlistScreeningEntityReviewCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWatchlistScreeningEntityReviewCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_confirmed_hits.size() > 0) {
        obj.insert(QString("confirmed_hits"), ::OpenAPI::toJsonValue(m_confirmed_hits));
    }
    if (m_dismissed_hits.size() > 0) {
        obj.insert(QString("dismissed_hits"), ::OpenAPI::toJsonValue(m_dismissed_hits));
    }
    if (m_entity_watchlist_screening_id_isSet) {
        obj.insert(QString("entity_watchlist_screening_id"), ::OpenAPI::toJsonValue(m_entity_watchlist_screening_id));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    return obj;
}

QString OAIWatchlistScreeningEntityReviewCreateRequest::getClientId() const {
    return m_client_id;
}
void OAIWatchlistScreeningEntityReviewCreateRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIWatchlistScreeningEntityReviewCreateRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIWatchlistScreeningEntityReviewCreateRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIWatchlistScreeningEntityReviewCreateRequest::getComment() const {
    return m_comment;
}
void OAIWatchlistScreeningEntityReviewCreateRequest::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIWatchlistScreeningEntityReviewCreateRequest::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIWatchlistScreeningEntityReviewCreateRequest::is_comment_Valid() const{
    return m_comment_isValid;
}

QList<QString> OAIWatchlistScreeningEntityReviewCreateRequest::getConfirmedHits() const {
    return m_confirmed_hits;
}
void OAIWatchlistScreeningEntityReviewCreateRequest::setConfirmedHits(const QList<QString> &confirmed_hits) {
    m_confirmed_hits = confirmed_hits;
    m_confirmed_hits_isSet = true;
}

bool OAIWatchlistScreeningEntityReviewCreateRequest::is_confirmed_hits_Set() const{
    return m_confirmed_hits_isSet;
}

bool OAIWatchlistScreeningEntityReviewCreateRequest::is_confirmed_hits_Valid() const{
    return m_confirmed_hits_isValid;
}

QList<QString> OAIWatchlistScreeningEntityReviewCreateRequest::getDismissedHits() const {
    return m_dismissed_hits;
}
void OAIWatchlistScreeningEntityReviewCreateRequest::setDismissedHits(const QList<QString> &dismissed_hits) {
    m_dismissed_hits = dismissed_hits;
    m_dismissed_hits_isSet = true;
}

bool OAIWatchlistScreeningEntityReviewCreateRequest::is_dismissed_hits_Set() const{
    return m_dismissed_hits_isSet;
}

bool OAIWatchlistScreeningEntityReviewCreateRequest::is_dismissed_hits_Valid() const{
    return m_dismissed_hits_isValid;
}

QString OAIWatchlistScreeningEntityReviewCreateRequest::getEntityWatchlistScreeningId() const {
    return m_entity_watchlist_screening_id;
}
void OAIWatchlistScreeningEntityReviewCreateRequest::setEntityWatchlistScreeningId(const QString &entity_watchlist_screening_id) {
    m_entity_watchlist_screening_id = entity_watchlist_screening_id;
    m_entity_watchlist_screening_id_isSet = true;
}

bool OAIWatchlistScreeningEntityReviewCreateRequest::is_entity_watchlist_screening_id_Set() const{
    return m_entity_watchlist_screening_id_isSet;
}

bool OAIWatchlistScreeningEntityReviewCreateRequest::is_entity_watchlist_screening_id_Valid() const{
    return m_entity_watchlist_screening_id_isValid;
}

QString OAIWatchlistScreeningEntityReviewCreateRequest::getSecret() const {
    return m_secret;
}
void OAIWatchlistScreeningEntityReviewCreateRequest::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIWatchlistScreeningEntityReviewCreateRequest::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIWatchlistScreeningEntityReviewCreateRequest::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAIWatchlistScreeningEntityReviewCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmed_hits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dismissed_hits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_watchlist_screening_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWatchlistScreeningEntityReviewCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_confirmed_hits_isValid && m_dismissed_hits_isValid && m_entity_watchlist_screening_id_isValid && true;
}

} // namespace OpenAPI
