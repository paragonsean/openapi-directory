/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityScreeningHitData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityScreeningHitData::OAIEntityScreeningHitData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityScreeningHitData::OAIEntityScreeningHitData() {
    this->initializeModel();
}

OAIEntityScreeningHitData::~OAIEntityScreeningHitData() {}

void OAIEntityScreeningHitData::initializeModel() {

    m_documents_isSet = false;
    m_documents_isValid = false;

    m_email_addresses_isSet = false;
    m_email_addresses_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;

    m_phone_numbers_isSet = false;
    m_phone_numbers_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;
}

void OAIEntityScreeningHitData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityScreeningHitData::fromJsonObject(QJsonObject json) {

    m_documents_isValid = ::OpenAPI::fromJsonValue(m_documents, json[QString("documents")]);
    m_documents_isSet = !json[QString("documents")].isNull() && m_documents_isValid;

    m_email_addresses_isValid = ::OpenAPI::fromJsonValue(m_email_addresses, json[QString("email_addresses")]);
    m_email_addresses_isSet = !json[QString("email_addresses")].isNull() && m_email_addresses_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_phone_numbers_isValid = ::OpenAPI::fromJsonValue(m_phone_numbers, json[QString("phone_numbers")]);
    m_phone_numbers_isSet = !json[QString("phone_numbers")].isNull() && m_phone_numbers_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;
}

QString OAIEntityScreeningHitData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityScreeningHitData::asJsonObject() const {
    QJsonObject obj;
    if (m_documents.size() > 0) {
        obj.insert(QString("documents"), ::OpenAPI::toJsonValue(m_documents));
    }
    if (m_email_addresses.size() > 0) {
        obj.insert(QString("email_addresses"), ::OpenAPI::toJsonValue(m_email_addresses));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_phone_numbers.size() > 0) {
        obj.insert(QString("phone_numbers"), ::OpenAPI::toJsonValue(m_phone_numbers));
    }
    if (m_urls.size() > 0) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    return obj;
}

QList<OAIEntityScreeningHitDocumentsItems> OAIEntityScreeningHitData::getDocuments() const {
    return m_documents;
}
void OAIEntityScreeningHitData::setDocuments(const QList<OAIEntityScreeningHitDocumentsItems> &documents) {
    m_documents = documents;
    m_documents_isSet = true;
}

bool OAIEntityScreeningHitData::is_documents_Set() const{
    return m_documents_isSet;
}

bool OAIEntityScreeningHitData::is_documents_Valid() const{
    return m_documents_isValid;
}

QList<OAIEntityScreeningHitEmailsItems> OAIEntityScreeningHitData::getEmailAddresses() const {
    return m_email_addresses;
}
void OAIEntityScreeningHitData::setEmailAddresses(const QList<OAIEntityScreeningHitEmailsItems> &email_addresses) {
    m_email_addresses = email_addresses;
    m_email_addresses_isSet = true;
}

bool OAIEntityScreeningHitData::is_email_addresses_Set() const{
    return m_email_addresses_isSet;
}

bool OAIEntityScreeningHitData::is_email_addresses_Valid() const{
    return m_email_addresses_isValid;
}

QList<OAIGenericScreeningHitLocationItems> OAIEntityScreeningHitData::getLocations() const {
    return m_locations;
}
void OAIEntityScreeningHitData::setLocations(const QList<OAIGenericScreeningHitLocationItems> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIEntityScreeningHitData::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIEntityScreeningHitData::is_locations_Valid() const{
    return m_locations_isValid;
}

QList<OAIEntityScreeningHitNamesItems> OAIEntityScreeningHitData::getNames() const {
    return m_names;
}
void OAIEntityScreeningHitData::setNames(const QList<OAIEntityScreeningHitNamesItems> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIEntityScreeningHitData::is_names_Set() const{
    return m_names_isSet;
}

bool OAIEntityScreeningHitData::is_names_Valid() const{
    return m_names_isValid;
}

QList<OAIEntityScreeningHitsPhoneNumberItems> OAIEntityScreeningHitData::getPhoneNumbers() const {
    return m_phone_numbers;
}
void OAIEntityScreeningHitData::setPhoneNumbers(const QList<OAIEntityScreeningHitsPhoneNumberItems> &phone_numbers) {
    m_phone_numbers = phone_numbers;
    m_phone_numbers_isSet = true;
}

bool OAIEntityScreeningHitData::is_phone_numbers_Set() const{
    return m_phone_numbers_isSet;
}

bool OAIEntityScreeningHitData::is_phone_numbers_Valid() const{
    return m_phone_numbers_isValid;
}

QList<OAIEntityScreeningHitUrlsItems> OAIEntityScreeningHitData::getUrls() const {
    return m_urls;
}
void OAIEntityScreeningHitData::setUrls(const QList<OAIEntityScreeningHitUrlsItems> &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIEntityScreeningHitData::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIEntityScreeningHitData::is_urls_Valid() const{
    return m_urls_isValid;
}

bool OAIEntityScreeningHitData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityScreeningHitData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
