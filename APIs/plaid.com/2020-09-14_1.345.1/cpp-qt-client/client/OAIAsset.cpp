/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsset::OAIAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsset::OAIAsset() {
    this->initializeModel();
}

OAIAsset::~OAIAsset() {}

void OAIAsset::initializeModel() {

    m_asset_detail_isSet = false;
    m_asset_detail_isValid = false;

    m_asset_holder_isSet = false;
    m_asset_holder_isValid = false;

    m_asset_owners_isSet = false;
    m_asset_owners_isValid = false;

    m_asset_transactions_isSet = false;
    m_asset_transactions_isValid = false;

    m_validation_sources_isSet = false;
    m_validation_sources_isValid = false;
}

void OAIAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsset::fromJsonObject(QJsonObject json) {

    m_asset_detail_isValid = ::OpenAPI::fromJsonValue(m_asset_detail, json[QString("ASSET_DETAIL")]);
    m_asset_detail_isSet = !json[QString("ASSET_DETAIL")].isNull() && m_asset_detail_isValid;

    m_asset_holder_isValid = ::OpenAPI::fromJsonValue(m_asset_holder, json[QString("ASSET_HOLDER")]);
    m_asset_holder_isSet = !json[QString("ASSET_HOLDER")].isNull() && m_asset_holder_isValid;

    m_asset_owners_isValid = ::OpenAPI::fromJsonValue(m_asset_owners, json[QString("ASSET_OWNERS")]);
    m_asset_owners_isSet = !json[QString("ASSET_OWNERS")].isNull() && m_asset_owners_isValid;

    m_asset_transactions_isValid = ::OpenAPI::fromJsonValue(m_asset_transactions, json[QString("ASSET_TRANSACTIONS")]);
    m_asset_transactions_isSet = !json[QString("ASSET_TRANSACTIONS")].isNull() && m_asset_transactions_isValid;

    m_validation_sources_isValid = ::OpenAPI::fromJsonValue(m_validation_sources, json[QString("VALIDATION_SOURCES")]);
    m_validation_sources_isSet = !json[QString("VALIDATION_SOURCES")].isNull() && m_validation_sources_isValid;
}

QString OAIAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_detail.isSet()) {
        obj.insert(QString("ASSET_DETAIL"), ::OpenAPI::toJsonValue(m_asset_detail));
    }
    if (m_asset_holder.isSet()) {
        obj.insert(QString("ASSET_HOLDER"), ::OpenAPI::toJsonValue(m_asset_holder));
    }
    if (m_asset_owners.isSet()) {
        obj.insert(QString("ASSET_OWNERS"), ::OpenAPI::toJsonValue(m_asset_owners));
    }
    if (m_asset_transactions.isSet()) {
        obj.insert(QString("ASSET_TRANSACTIONS"), ::OpenAPI::toJsonValue(m_asset_transactions));
    }
    if (m_validation_sources.isSet()) {
        obj.insert(QString("VALIDATION_SOURCES"), ::OpenAPI::toJsonValue(m_validation_sources));
    }
    return obj;
}

OAIAssetDetail OAIAsset::getAssetDetail() const {
    return m_asset_detail;
}
void OAIAsset::setAssetDetail(const OAIAssetDetail &asset_detail) {
    m_asset_detail = asset_detail;
    m_asset_detail_isSet = true;
}

bool OAIAsset::is_asset_detail_Set() const{
    return m_asset_detail_isSet;
}

bool OAIAsset::is_asset_detail_Valid() const{
    return m_asset_detail_isValid;
}

OAIAssetHolder OAIAsset::getAssetHolder() const {
    return m_asset_holder;
}
void OAIAsset::setAssetHolder(const OAIAssetHolder &asset_holder) {
    m_asset_holder = asset_holder;
    m_asset_holder_isSet = true;
}

bool OAIAsset::is_asset_holder_Set() const{
    return m_asset_holder_isSet;
}

bool OAIAsset::is_asset_holder_Valid() const{
    return m_asset_holder_isValid;
}

OAIAssetOwners OAIAsset::getAssetOwners() const {
    return m_asset_owners;
}
void OAIAsset::setAssetOwners(const OAIAssetOwners &asset_owners) {
    m_asset_owners = asset_owners;
    m_asset_owners_isSet = true;
}

bool OAIAsset::is_asset_owners_Set() const{
    return m_asset_owners_isSet;
}

bool OAIAsset::is_asset_owners_Valid() const{
    return m_asset_owners_isValid;
}

OAIAssetTransactions OAIAsset::getAssetTransactions() const {
    return m_asset_transactions;
}
void OAIAsset::setAssetTransactions(const OAIAssetTransactions &asset_transactions) {
    m_asset_transactions = asset_transactions;
    m_asset_transactions_isSet = true;
}

bool OAIAsset::is_asset_transactions_Set() const{
    return m_asset_transactions_isSet;
}

bool OAIAsset::is_asset_transactions_Valid() const{
    return m_asset_transactions_isValid;
}

OAIValidationSources OAIAsset::getValidationSources() const {
    return m_validation_sources;
}
void OAIAsset::setValidationSources(const OAIValidationSources &validation_sources) {
    m_validation_sources = validation_sources;
    m_validation_sources_isSet = true;
}

bool OAIAsset::is_validation_sources_Set() const{
    return m_validation_sources_isSet;
}

bool OAIAsset::is_validation_sources_Valid() const{
    return m_validation_sources_isValid;
}

bool OAIAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_holder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_owners.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_transactions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_asset_detail_isValid && m_asset_holder_isValid && m_asset_owners_isValid && m_asset_transactions_isValid && m_validation_sources_isValid && true;
}

} // namespace OpenAPI
