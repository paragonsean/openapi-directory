/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetReportTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetReportTransaction::OAIAssetReportTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetReportTransaction::OAIAssetReportTransaction() {
    this->initializeModel();
}

OAIAssetReportTransaction::~OAIAssetReportTransaction() {}

void OAIAssetReportTransaction::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_account_owner_isSet = false;
    m_account_owner_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_check_number_isSet = false;
    m_check_number_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_iso_currency_code_isSet = false;
    m_iso_currency_code_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_merchant_name_isSet = false;
    m_merchant_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_original_description_isSet = false;
    m_original_description_isValid = false;

    m_payment_meta_isSet = false;
    m_payment_meta_isValid = false;

    m_pending_isSet = false;
    m_pending_isValid = false;

    m_pending_transaction_id_isSet = false;
    m_pending_transaction_id_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_transaction_type_isSet = false;
    m_transaction_type_isValid = false;

    m_unofficial_currency_code_isSet = false;
    m_unofficial_currency_code_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;

    m_credit_category_isSet = false;
    m_credit_category_isValid = false;

    m_date_transacted_isSet = false;
    m_date_transacted_isValid = false;
}

void OAIAssetReportTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetReportTransaction::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_account_owner_isValid = ::OpenAPI::fromJsonValue(m_account_owner, json[QString("account_owner")]);
    m_account_owner_isSet = !json[QString("account_owner")].isNull() && m_account_owner_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_check_number_isValid = ::OpenAPI::fromJsonValue(m_check_number, json[QString("check_number")]);
    m_check_number_isSet = !json[QString("check_number")].isNull() && m_check_number_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_iso_currency_code_isValid = ::OpenAPI::fromJsonValue(m_iso_currency_code, json[QString("iso_currency_code")]);
    m_iso_currency_code_isSet = !json[QString("iso_currency_code")].isNull() && m_iso_currency_code_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logo_url")]);
    m_logo_url_isSet = !json[QString("logo_url")].isNull() && m_logo_url_isValid;

    m_merchant_name_isValid = ::OpenAPI::fromJsonValue(m_merchant_name, json[QString("merchant_name")]);
    m_merchant_name_isSet = !json[QString("merchant_name")].isNull() && m_merchant_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_original_description_isValid = ::OpenAPI::fromJsonValue(m_original_description, json[QString("original_description")]);
    m_original_description_isSet = !json[QString("original_description")].isNull() && m_original_description_isValid;

    m_payment_meta_isValid = ::OpenAPI::fromJsonValue(m_payment_meta, json[QString("payment_meta")]);
    m_payment_meta_isSet = !json[QString("payment_meta")].isNull() && m_payment_meta_isValid;

    m_pending_isValid = ::OpenAPI::fromJsonValue(m_pending, json[QString("pending")]);
    m_pending_isSet = !json[QString("pending")].isNull() && m_pending_isValid;

    m_pending_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_pending_transaction_id, json[QString("pending_transaction_id")]);
    m_pending_transaction_id_isSet = !json[QString("pending_transaction_id")].isNull() && m_pending_transaction_id_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;

    m_transaction_type_isValid = ::OpenAPI::fromJsonValue(m_transaction_type, json[QString("transaction_type")]);
    m_transaction_type_isSet = !json[QString("transaction_type")].isNull() && m_transaction_type_isValid;

    m_unofficial_currency_code_isValid = ::OpenAPI::fromJsonValue(m_unofficial_currency_code, json[QString("unofficial_currency_code")]);
    m_unofficial_currency_code_isSet = !json[QString("unofficial_currency_code")].isNull() && m_unofficial_currency_code_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;

    m_credit_category_isValid = ::OpenAPI::fromJsonValue(m_credit_category, json[QString("credit_category")]);
    m_credit_category_isSet = !json[QString("credit_category")].isNull() && m_credit_category_isValid;

    m_date_transacted_isValid = ::OpenAPI::fromJsonValue(m_date_transacted, json[QString("date_transacted")]);
    m_date_transacted_isSet = !json[QString("date_transacted")].isNull() && m_date_transacted_isValid;
}

QString OAIAssetReportTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetReportTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_account_owner_isSet) {
        obj.insert(QString("account_owner"), ::OpenAPI::toJsonValue(m_account_owner));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_check_number_isSet) {
        obj.insert(QString("check_number"), ::OpenAPI::toJsonValue(m_check_number));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_iso_currency_code_isSet) {
        obj.insert(QString("iso_currency_code"), ::OpenAPI::toJsonValue(m_iso_currency_code));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logo_url"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_merchant_name_isSet) {
        obj.insert(QString("merchant_name"), ::OpenAPI::toJsonValue(m_merchant_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_original_description_isSet) {
        obj.insert(QString("original_description"), ::OpenAPI::toJsonValue(m_original_description));
    }
    if (m_payment_meta.isSet()) {
        obj.insert(QString("payment_meta"), ::OpenAPI::toJsonValue(m_payment_meta));
    }
    if (m_pending_isSet) {
        obj.insert(QString("pending"), ::OpenAPI::toJsonValue(m_pending));
    }
    if (m_pending_transaction_id_isSet) {
        obj.insert(QString("pending_transaction_id"), ::OpenAPI::toJsonValue(m_pending_transaction_id));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_transaction_type_isSet) {
        obj.insert(QString("transaction_type"), ::OpenAPI::toJsonValue(m_transaction_type));
    }
    if (m_unofficial_currency_code_isSet) {
        obj.insert(QString("unofficial_currency_code"), ::OpenAPI::toJsonValue(m_unofficial_currency_code));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    if (m_credit_category.isSet()) {
        obj.insert(QString("credit_category"), ::OpenAPI::toJsonValue(m_credit_category));
    }
    if (m_date_transacted_isSet) {
        obj.insert(QString("date_transacted"), ::OpenAPI::toJsonValue(m_date_transacted));
    }
    return obj;
}

QString OAIAssetReportTransaction::getAccountId() const {
    return m_account_id;
}
void OAIAssetReportTransaction::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAssetReportTransaction::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAssetReportTransaction::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIAssetReportTransaction::getAccountOwner() const {
    return m_account_owner;
}
void OAIAssetReportTransaction::setAccountOwner(const QString &account_owner) {
    m_account_owner = account_owner;
    m_account_owner_isSet = true;
}

bool OAIAssetReportTransaction::is_account_owner_Set() const{
    return m_account_owner_isSet;
}

bool OAIAssetReportTransaction::is_account_owner_Valid() const{
    return m_account_owner_isValid;
}

double OAIAssetReportTransaction::getAmount() const {
    return m_amount;
}
void OAIAssetReportTransaction::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIAssetReportTransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIAssetReportTransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

QList<QString> OAIAssetReportTransaction::getCategory() const {
    return m_category;
}
void OAIAssetReportTransaction::setCategory(const QList<QString> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIAssetReportTransaction::is_category_Set() const{
    return m_category_isSet;
}

bool OAIAssetReportTransaction::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIAssetReportTransaction::getCategoryId() const {
    return m_category_id;
}
void OAIAssetReportTransaction::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIAssetReportTransaction::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIAssetReportTransaction::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAIAssetReportTransaction::getCheckNumber() const {
    return m_check_number;
}
void OAIAssetReportTransaction::setCheckNumber(const QString &check_number) {
    m_check_number = check_number;
    m_check_number_isSet = true;
}

bool OAIAssetReportTransaction::is_check_number_Set() const{
    return m_check_number_isSet;
}

bool OAIAssetReportTransaction::is_check_number_Valid() const{
    return m_check_number_isValid;
}

QDate OAIAssetReportTransaction::getDate() const {
    return m_date;
}
void OAIAssetReportTransaction::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAssetReportTransaction::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAssetReportTransaction::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIAssetReportTransaction::getIsoCurrencyCode() const {
    return m_iso_currency_code;
}
void OAIAssetReportTransaction::setIsoCurrencyCode(const QString &iso_currency_code) {
    m_iso_currency_code = iso_currency_code;
    m_iso_currency_code_isSet = true;
}

bool OAIAssetReportTransaction::is_iso_currency_code_Set() const{
    return m_iso_currency_code_isSet;
}

bool OAIAssetReportTransaction::is_iso_currency_code_Valid() const{
    return m_iso_currency_code_isValid;
}

OAILocation OAIAssetReportTransaction::getLocation() const {
    return m_location;
}
void OAIAssetReportTransaction::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIAssetReportTransaction::is_location_Set() const{
    return m_location_isSet;
}

bool OAIAssetReportTransaction::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIAssetReportTransaction::getLogoUrl() const {
    return m_logo_url;
}
void OAIAssetReportTransaction::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIAssetReportTransaction::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIAssetReportTransaction::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAIAssetReportTransaction::getMerchantName() const {
    return m_merchant_name;
}
void OAIAssetReportTransaction::setMerchantName(const QString &merchant_name) {
    m_merchant_name = merchant_name;
    m_merchant_name_isSet = true;
}

bool OAIAssetReportTransaction::is_merchant_name_Set() const{
    return m_merchant_name_isSet;
}

bool OAIAssetReportTransaction::is_merchant_name_Valid() const{
    return m_merchant_name_isValid;
}

QString OAIAssetReportTransaction::getName() const {
    return m_name;
}
void OAIAssetReportTransaction::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssetReportTransaction::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssetReportTransaction::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAssetReportTransaction::getOriginalDescription() const {
    return m_original_description;
}
void OAIAssetReportTransaction::setOriginalDescription(const QString &original_description) {
    m_original_description = original_description;
    m_original_description_isSet = true;
}

bool OAIAssetReportTransaction::is_original_description_Set() const{
    return m_original_description_isSet;
}

bool OAIAssetReportTransaction::is_original_description_Valid() const{
    return m_original_description_isValid;
}

OAIPaymentMeta OAIAssetReportTransaction::getPaymentMeta() const {
    return m_payment_meta;
}
void OAIAssetReportTransaction::setPaymentMeta(const OAIPaymentMeta &payment_meta) {
    m_payment_meta = payment_meta;
    m_payment_meta_isSet = true;
}

bool OAIAssetReportTransaction::is_payment_meta_Set() const{
    return m_payment_meta_isSet;
}

bool OAIAssetReportTransaction::is_payment_meta_Valid() const{
    return m_payment_meta_isValid;
}

bool OAIAssetReportTransaction::isPending() const {
    return m_pending;
}
void OAIAssetReportTransaction::setPending(const bool &pending) {
    m_pending = pending;
    m_pending_isSet = true;
}

bool OAIAssetReportTransaction::is_pending_Set() const{
    return m_pending_isSet;
}

bool OAIAssetReportTransaction::is_pending_Valid() const{
    return m_pending_isValid;
}

QString OAIAssetReportTransaction::getPendingTransactionId() const {
    return m_pending_transaction_id;
}
void OAIAssetReportTransaction::setPendingTransactionId(const QString &pending_transaction_id) {
    m_pending_transaction_id = pending_transaction_id;
    m_pending_transaction_id_isSet = true;
}

bool OAIAssetReportTransaction::is_pending_transaction_id_Set() const{
    return m_pending_transaction_id_isSet;
}

bool OAIAssetReportTransaction::is_pending_transaction_id_Valid() const{
    return m_pending_transaction_id_isValid;
}

QString OAIAssetReportTransaction::getTransactionId() const {
    return m_transaction_id;
}
void OAIAssetReportTransaction::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIAssetReportTransaction::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIAssetReportTransaction::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAIAssetReportTransaction::getTransactionType() const {
    return m_transaction_type;
}
void OAIAssetReportTransaction::setTransactionType(const QString &transaction_type) {
    m_transaction_type = transaction_type;
    m_transaction_type_isSet = true;
}

bool OAIAssetReportTransaction::is_transaction_type_Set() const{
    return m_transaction_type_isSet;
}

bool OAIAssetReportTransaction::is_transaction_type_Valid() const{
    return m_transaction_type_isValid;
}

QString OAIAssetReportTransaction::getUnofficialCurrencyCode() const {
    return m_unofficial_currency_code;
}
void OAIAssetReportTransaction::setUnofficialCurrencyCode(const QString &unofficial_currency_code) {
    m_unofficial_currency_code = unofficial_currency_code;
    m_unofficial_currency_code_isSet = true;
}

bool OAIAssetReportTransaction::is_unofficial_currency_code_Set() const{
    return m_unofficial_currency_code_isSet;
}

bool OAIAssetReportTransaction::is_unofficial_currency_code_Valid() const{
    return m_unofficial_currency_code_isValid;
}

QString OAIAssetReportTransaction::getWebsite() const {
    return m_website;
}
void OAIAssetReportTransaction::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIAssetReportTransaction::is_website_Set() const{
    return m_website_isSet;
}

bool OAIAssetReportTransaction::is_website_Valid() const{
    return m_website_isValid;
}

OAICreditCategory OAIAssetReportTransaction::getCreditCategory() const {
    return m_credit_category;
}
void OAIAssetReportTransaction::setCreditCategory(const OAICreditCategory &credit_category) {
    m_credit_category = credit_category;
    m_credit_category_isSet = true;
}

bool OAIAssetReportTransaction::is_credit_category_Set() const{
    return m_credit_category_isSet;
}

bool OAIAssetReportTransaction::is_credit_category_Valid() const{
    return m_credit_category_isValid;
}

QString OAIAssetReportTransaction::getDateTransacted() const {
    return m_date_transacted;
}
void OAIAssetReportTransaction::setDateTransacted(const QString &date_transacted) {
    m_date_transacted = date_transacted;
    m_date_transacted_isSet = true;
}

bool OAIAssetReportTransaction::is_date_transacted_Set() const{
    return m_date_transacted_isSet;
}

bool OAIAssetReportTransaction::is_date_transacted_Valid() const{
    return m_date_transacted_isValid;
}

bool OAIAssetReportTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unofficial_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_transacted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetReportTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_amount_isValid && m_date_isValid && m_iso_currency_code_isValid && m_original_description_isValid && m_pending_isValid && m_transaction_id_isValid && m_unofficial_currency_code_isValid && true;
}

} // namespace OpenAPI
