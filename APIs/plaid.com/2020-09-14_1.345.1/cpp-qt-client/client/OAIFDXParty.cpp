/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFDXParty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFDXParty::OAIFDXParty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFDXParty::OAIFDXParty() {
    this->initializeModel();
}

OAIFDXParty::~OAIFDXParty() {}

void OAIFDXParty::initializeModel() {

    m_home_uri_isSet = false;
    m_home_uri_isValid = false;

    m_logo_uri_isSet = false;
    m_logo_uri_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_registered_entity_id_isSet = false;
    m_registered_entity_id_isValid = false;

    m_registered_entity_name_isSet = false;
    m_registered_entity_name_isValid = false;

    m_registry_isSet = false;
    m_registry_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFDXParty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFDXParty::fromJsonObject(QJsonObject json) {

    m_home_uri_isValid = ::OpenAPI::fromJsonValue(m_home_uri, json[QString("homeUri")]);
    m_home_uri_isSet = !json[QString("homeUri")].isNull() && m_home_uri_isValid;

    m_logo_uri_isValid = ::OpenAPI::fromJsonValue(m_logo_uri, json[QString("logoUri")]);
    m_logo_uri_isSet = !json[QString("logoUri")].isNull() && m_logo_uri_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_registered_entity_id_isValid = ::OpenAPI::fromJsonValue(m_registered_entity_id, json[QString("registeredEntityId")]);
    m_registered_entity_id_isSet = !json[QString("registeredEntityId")].isNull() && m_registered_entity_id_isValid;

    m_registered_entity_name_isValid = ::OpenAPI::fromJsonValue(m_registered_entity_name, json[QString("registeredEntityName")]);
    m_registered_entity_name_isSet = !json[QString("registeredEntityName")].isNull() && m_registered_entity_name_isValid;

    m_registry_isValid = ::OpenAPI::fromJsonValue(m_registry, json[QString("registry")]);
    m_registry_isSet = !json[QString("registry")].isNull() && m_registry_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFDXParty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFDXParty::asJsonObject() const {
    QJsonObject obj;
    if (m_home_uri_isSet) {
        obj.insert(QString("homeUri"), ::OpenAPI::toJsonValue(m_home_uri));
    }
    if (m_logo_uri_isSet) {
        obj.insert(QString("logoUri"), ::OpenAPI::toJsonValue(m_logo_uri));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_registered_entity_id_isSet) {
        obj.insert(QString("registeredEntityId"), ::OpenAPI::toJsonValue(m_registered_entity_id));
    }
    if (m_registered_entity_name_isSet) {
        obj.insert(QString("registeredEntityName"), ::OpenAPI::toJsonValue(m_registered_entity_name));
    }
    if (m_registry.isSet()) {
        obj.insert(QString("registry"), ::OpenAPI::toJsonValue(m_registry));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIFDXParty::getHomeUri() const {
    return m_home_uri;
}
void OAIFDXParty::setHomeUri(const QString &home_uri) {
    m_home_uri = home_uri;
    m_home_uri_isSet = true;
}

bool OAIFDXParty::is_home_uri_Set() const{
    return m_home_uri_isSet;
}

bool OAIFDXParty::is_home_uri_Valid() const{
    return m_home_uri_isValid;
}

QString OAIFDXParty::getLogoUri() const {
    return m_logo_uri;
}
void OAIFDXParty::setLogoUri(const QString &logo_uri) {
    m_logo_uri = logo_uri;
    m_logo_uri_isSet = true;
}

bool OAIFDXParty::is_logo_uri_Set() const{
    return m_logo_uri_isSet;
}

bool OAIFDXParty::is_logo_uri_Valid() const{
    return m_logo_uri_isValid;
}

QString OAIFDXParty::getName() const {
    return m_name;
}
void OAIFDXParty::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFDXParty::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFDXParty::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFDXParty::getRegisteredEntityId() const {
    return m_registered_entity_id;
}
void OAIFDXParty::setRegisteredEntityId(const QString &registered_entity_id) {
    m_registered_entity_id = registered_entity_id;
    m_registered_entity_id_isSet = true;
}

bool OAIFDXParty::is_registered_entity_id_Set() const{
    return m_registered_entity_id_isSet;
}

bool OAIFDXParty::is_registered_entity_id_Valid() const{
    return m_registered_entity_id_isValid;
}

QString OAIFDXParty::getRegisteredEntityName() const {
    return m_registered_entity_name;
}
void OAIFDXParty::setRegisteredEntityName(const QString &registered_entity_name) {
    m_registered_entity_name = registered_entity_name;
    m_registered_entity_name_isSet = true;
}

bool OAIFDXParty::is_registered_entity_name_Set() const{
    return m_registered_entity_name_isSet;
}

bool OAIFDXParty::is_registered_entity_name_Valid() const{
    return m_registered_entity_name_isValid;
}

OAIFDXPartyRegistry OAIFDXParty::getRegistry() const {
    return m_registry;
}
void OAIFDXParty::setRegistry(const OAIFDXPartyRegistry &registry) {
    m_registry = registry;
    m_registry_isSet = true;
}

bool OAIFDXParty::is_registry_Set() const{
    return m_registry_isSet;
}

bool OAIFDXParty::is_registry_Valid() const{
    return m_registry_isValid;
}

OAIFDXPartyType OAIFDXParty::getType() const {
    return m_type;
}
void OAIFDXParty::setType(const OAIFDXPartyType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFDXParty::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFDXParty::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFDXParty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_home_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_entity_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFDXParty::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
