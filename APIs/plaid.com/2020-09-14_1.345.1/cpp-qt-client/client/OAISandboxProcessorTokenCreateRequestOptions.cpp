/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISandboxProcessorTokenCreateRequestOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISandboxProcessorTokenCreateRequestOptions::OAISandboxProcessorTokenCreateRequestOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISandboxProcessorTokenCreateRequestOptions::OAISandboxProcessorTokenCreateRequestOptions() {
    this->initializeModel();
}

OAISandboxProcessorTokenCreateRequestOptions::~OAISandboxProcessorTokenCreateRequestOptions() {}

void OAISandboxProcessorTokenCreateRequestOptions::initializeModel() {

    m_override_password_isSet = false;
    m_override_password_isValid = false;

    m_override_username_isSet = false;
    m_override_username_isValid = false;
}

void OAISandboxProcessorTokenCreateRequestOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISandboxProcessorTokenCreateRequestOptions::fromJsonObject(QJsonObject json) {

    m_override_password_isValid = ::OpenAPI::fromJsonValue(m_override_password, json[QString("override_password")]);
    m_override_password_isSet = !json[QString("override_password")].isNull() && m_override_password_isValid;

    m_override_username_isValid = ::OpenAPI::fromJsonValue(m_override_username, json[QString("override_username")]);
    m_override_username_isSet = !json[QString("override_username")].isNull() && m_override_username_isValid;
}

QString OAISandboxProcessorTokenCreateRequestOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISandboxProcessorTokenCreateRequestOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_override_password_isSet) {
        obj.insert(QString("override_password"), ::OpenAPI::toJsonValue(m_override_password));
    }
    if (m_override_username_isSet) {
        obj.insert(QString("override_username"), ::OpenAPI::toJsonValue(m_override_username));
    }
    return obj;
}

QString OAISandboxProcessorTokenCreateRequestOptions::getOverridePassword() const {
    return m_override_password;
}
void OAISandboxProcessorTokenCreateRequestOptions::setOverridePassword(const QString &override_password) {
    m_override_password = override_password;
    m_override_password_isSet = true;
}

bool OAISandboxProcessorTokenCreateRequestOptions::is_override_password_Set() const{
    return m_override_password_isSet;
}

bool OAISandboxProcessorTokenCreateRequestOptions::is_override_password_Valid() const{
    return m_override_password_isValid;
}

QString OAISandboxProcessorTokenCreateRequestOptions::getOverrideUsername() const {
    return m_override_username;
}
void OAISandboxProcessorTokenCreateRequestOptions::setOverrideUsername(const QString &override_username) {
    m_override_username = override_username;
    m_override_username_isSet = true;
}

bool OAISandboxProcessorTokenCreateRequestOptions::is_override_username_Set() const{
    return m_override_username_isSet;
}

bool OAISandboxProcessorTokenCreateRequestOptions::is_override_username_Valid() const{
    return m_override_username_isValid;
}

bool OAISandboxProcessorTokenCreateRequestOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_override_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISandboxProcessorTokenCreateRequestOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
