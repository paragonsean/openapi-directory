/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWatchlistScreeningHit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWatchlistScreeningHit::OAIWatchlistScreeningHit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWatchlistScreeningHit::OAIWatchlistScreeningHit() {
    this->initializeModel();
}

OAIWatchlistScreeningHit::~OAIWatchlistScreeningHit() {}

void OAIWatchlistScreeningHit::initializeModel() {

    m_analysis_isSet = false;
    m_analysis_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_first_active_isSet = false;
    m_first_active_isValid = false;

    m_historical_since_isSet = false;
    m_historical_since_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inactive_since_isSet = false;
    m_inactive_since_isValid = false;

    m_list_code_isSet = false;
    m_list_code_isValid = false;

    m_plaid_uid_isSet = false;
    m_plaid_uid_isValid = false;

    m_review_status_isSet = false;
    m_review_status_isValid = false;

    m_source_uid_isSet = false;
    m_source_uid_isValid = false;
}

void OAIWatchlistScreeningHit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWatchlistScreeningHit::fromJsonObject(QJsonObject json) {

    m_analysis_isValid = ::OpenAPI::fromJsonValue(m_analysis, json[QString("analysis")]);
    m_analysis_isSet = !json[QString("analysis")].isNull() && m_analysis_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_first_active_isValid = ::OpenAPI::fromJsonValue(m_first_active, json[QString("first_active")]);
    m_first_active_isSet = !json[QString("first_active")].isNull() && m_first_active_isValid;

    m_historical_since_isValid = ::OpenAPI::fromJsonValue(m_historical_since, json[QString("historical_since")]);
    m_historical_since_isSet = !json[QString("historical_since")].isNull() && m_historical_since_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inactive_since_isValid = ::OpenAPI::fromJsonValue(m_inactive_since, json[QString("inactive_since")]);
    m_inactive_since_isSet = !json[QString("inactive_since")].isNull() && m_inactive_since_isValid;

    m_list_code_isValid = ::OpenAPI::fromJsonValue(m_list_code, json[QString("list_code")]);
    m_list_code_isSet = !json[QString("list_code")].isNull() && m_list_code_isValid;

    m_plaid_uid_isValid = ::OpenAPI::fromJsonValue(m_plaid_uid, json[QString("plaid_uid")]);
    m_plaid_uid_isSet = !json[QString("plaid_uid")].isNull() && m_plaid_uid_isValid;

    m_review_status_isValid = ::OpenAPI::fromJsonValue(m_review_status, json[QString("review_status")]);
    m_review_status_isSet = !json[QString("review_status")].isNull() && m_review_status_isValid;

    m_source_uid_isValid = ::OpenAPI::fromJsonValue(m_source_uid, json[QString("source_uid")]);
    m_source_uid_isSet = !json[QString("source_uid")].isNull() && m_source_uid_isValid;
}

QString OAIWatchlistScreeningHit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWatchlistScreeningHit::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis.isSet()) {
        obj.insert(QString("analysis"), ::OpenAPI::toJsonValue(m_analysis));
    }
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_first_active_isSet) {
        obj.insert(QString("first_active"), ::OpenAPI::toJsonValue(m_first_active));
    }
    if (m_historical_since_isSet) {
        obj.insert(QString("historical_since"), ::OpenAPI::toJsonValue(m_historical_since));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inactive_since_isSet) {
        obj.insert(QString("inactive_since"), ::OpenAPI::toJsonValue(m_inactive_since));
    }
    if (m_list_code.isSet()) {
        obj.insert(QString("list_code"), ::OpenAPI::toJsonValue(m_list_code));
    }
    if (m_plaid_uid_isSet) {
        obj.insert(QString("plaid_uid"), ::OpenAPI::toJsonValue(m_plaid_uid));
    }
    if (m_review_status.isSet()) {
        obj.insert(QString("review_status"), ::OpenAPI::toJsonValue(m_review_status));
    }
    if (m_source_uid_isSet) {
        obj.insert(QString("source_uid"), ::OpenAPI::toJsonValue(m_source_uid));
    }
    return obj;
}

OAIScreeningHitAnalysis OAIWatchlistScreeningHit::getAnalysis() const {
    return m_analysis;
}
void OAIWatchlistScreeningHit::setAnalysis(const OAIScreeningHitAnalysis &analysis) {
    m_analysis = analysis;
    m_analysis_isSet = true;
}

bool OAIWatchlistScreeningHit::is_analysis_Set() const{
    return m_analysis_isSet;
}

bool OAIWatchlistScreeningHit::is_analysis_Valid() const{
    return m_analysis_isValid;
}

OAIScreeningHitData OAIWatchlistScreeningHit::getData() const {
    return m_data;
}
void OAIWatchlistScreeningHit::setData(const OAIScreeningHitData &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIWatchlistScreeningHit::is_data_Set() const{
    return m_data_isSet;
}

bool OAIWatchlistScreeningHit::is_data_Valid() const{
    return m_data_isValid;
}

QDateTime OAIWatchlistScreeningHit::getFirstActive() const {
    return m_first_active;
}
void OAIWatchlistScreeningHit::setFirstActive(const QDateTime &first_active) {
    m_first_active = first_active;
    m_first_active_isSet = true;
}

bool OAIWatchlistScreeningHit::is_first_active_Set() const{
    return m_first_active_isSet;
}

bool OAIWatchlistScreeningHit::is_first_active_Valid() const{
    return m_first_active_isValid;
}

QDateTime OAIWatchlistScreeningHit::getHistoricalSince() const {
    return m_historical_since;
}
void OAIWatchlistScreeningHit::setHistoricalSince(const QDateTime &historical_since) {
    m_historical_since = historical_since;
    m_historical_since_isSet = true;
}

bool OAIWatchlistScreeningHit::is_historical_since_Set() const{
    return m_historical_since_isSet;
}

bool OAIWatchlistScreeningHit::is_historical_since_Valid() const{
    return m_historical_since_isValid;
}

QString OAIWatchlistScreeningHit::getId() const {
    return m_id;
}
void OAIWatchlistScreeningHit::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWatchlistScreeningHit::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWatchlistScreeningHit::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIWatchlistScreeningHit::getInactiveSince() const {
    return m_inactive_since;
}
void OAIWatchlistScreeningHit::setInactiveSince(const QDateTime &inactive_since) {
    m_inactive_since = inactive_since;
    m_inactive_since_isSet = true;
}

bool OAIWatchlistScreeningHit::is_inactive_since_Set() const{
    return m_inactive_since_isSet;
}

bool OAIWatchlistScreeningHit::is_inactive_since_Valid() const{
    return m_inactive_since_isValid;
}

OAIIndividualWatchlistCode OAIWatchlistScreeningHit::getListCode() const {
    return m_list_code;
}
void OAIWatchlistScreeningHit::setListCode(const OAIIndividualWatchlistCode &list_code) {
    m_list_code = list_code;
    m_list_code_isSet = true;
}

bool OAIWatchlistScreeningHit::is_list_code_Set() const{
    return m_list_code_isSet;
}

bool OAIWatchlistScreeningHit::is_list_code_Valid() const{
    return m_list_code_isValid;
}

QString OAIWatchlistScreeningHit::getPlaidUid() const {
    return m_plaid_uid;
}
void OAIWatchlistScreeningHit::setPlaidUid(const QString &plaid_uid) {
    m_plaid_uid = plaid_uid;
    m_plaid_uid_isSet = true;
}

bool OAIWatchlistScreeningHit::is_plaid_uid_Set() const{
    return m_plaid_uid_isSet;
}

bool OAIWatchlistScreeningHit::is_plaid_uid_Valid() const{
    return m_plaid_uid_isValid;
}

OAIWatchlistScreeningHitStatus OAIWatchlistScreeningHit::getReviewStatus() const {
    return m_review_status;
}
void OAIWatchlistScreeningHit::setReviewStatus(const OAIWatchlistScreeningHitStatus &review_status) {
    m_review_status = review_status;
    m_review_status_isSet = true;
}

bool OAIWatchlistScreeningHit::is_review_status_Set() const{
    return m_review_status_isSet;
}

bool OAIWatchlistScreeningHit::is_review_status_Valid() const{
    return m_review_status_isValid;
}

QString OAIWatchlistScreeningHit::getSourceUid() const {
    return m_source_uid;
}
void OAIWatchlistScreeningHit::setSourceUid(const QString &source_uid) {
    m_source_uid = source_uid;
    m_source_uid_isSet = true;
}

bool OAIWatchlistScreeningHit::is_source_uid_Set() const{
    return m_source_uid_isSet;
}

bool OAIWatchlistScreeningHit::is_source_uid_Valid() const{
    return m_source_uid_isValid;
}

bool OAIWatchlistScreeningHit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_historical_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inactive_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plaid_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWatchlistScreeningHit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_first_active_isValid && m_historical_since_isValid && m_id_isValid && m_inactive_since_isValid && m_list_code_isValid && m_plaid_uid_isValid && m_review_status_isValid && m_source_uid_isValid && true;
}

} // namespace OpenAPI
