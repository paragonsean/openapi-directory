/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectedApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectedApplication::OAIConnectedApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectedApplication::OAIConnectedApplication() {
    this->initializeModel();
}

OAIConnectedApplication::~OAIConnectedApplication() {}

void OAIConnectedApplication::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_application_url_isSet = false;
    m_application_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reason_for_access_isSet = false;
    m_reason_for_access_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;
}

void OAIConnectedApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectedApplication::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("application_id")]);
    m_application_id_isSet = !json[QString("application_id")].isNull() && m_application_id_isValid;

    m_application_url_isValid = ::OpenAPI::fromJsonValue(m_application_url, json[QString("application_url")]);
    m_application_url_isSet = !json[QString("application_url")].isNull() && m_application_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logo_url")]);
    m_logo_url_isSet = !json[QString("logo_url")].isNull() && m_logo_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reason_for_access_isValid = ::OpenAPI::fromJsonValue(m_reason_for_access, json[QString("reason_for_access")]);
    m_reason_for_access_isSet = !json[QString("reason_for_access")].isNull() && m_reason_for_access_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;
}

QString OAIConnectedApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectedApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("application_id"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_application_url_isSet) {
        obj.insert(QString("application_url"), ::OpenAPI::toJsonValue(m_application_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logo_url"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reason_for_access_isSet) {
        obj.insert(QString("reason_for_access"), ::OpenAPI::toJsonValue(m_reason_for_access));
    }
    if (m_scopes.isSet()) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    return obj;
}

QString OAIConnectedApplication::getApplicationId() const {
    return m_application_id;
}
void OAIConnectedApplication::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIConnectedApplication::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIConnectedApplication::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIConnectedApplication::getApplicationUrl() const {
    return m_application_url;
}
void OAIConnectedApplication::setApplicationUrl(const QString &application_url) {
    m_application_url = application_url;
    m_application_url_isSet = true;
}

bool OAIConnectedApplication::is_application_url_Set() const{
    return m_application_url_isSet;
}

bool OAIConnectedApplication::is_application_url_Valid() const{
    return m_application_url_isValid;
}

QDate OAIConnectedApplication::getCreatedAt() const {
    return m_created_at;
}
void OAIConnectedApplication::setCreatedAt(const QDate &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIConnectedApplication::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIConnectedApplication::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIConnectedApplication::getDisplayName() const {
    return m_display_name;
}
void OAIConnectedApplication::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIConnectedApplication::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIConnectedApplication::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIConnectedApplication::getLogoUrl() const {
    return m_logo_url;
}
void OAIConnectedApplication::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIConnectedApplication::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIConnectedApplication::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAIConnectedApplication::getName() const {
    return m_name;
}
void OAIConnectedApplication::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnectedApplication::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnectedApplication::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIConnectedApplication::getReasonForAccess() const {
    return m_reason_for_access;
}
void OAIConnectedApplication::setReasonForAccess(const QString &reason_for_access) {
    m_reason_for_access = reason_for_access;
    m_reason_for_access_isSet = true;
}

bool OAIConnectedApplication::is_reason_for_access_Set() const{
    return m_reason_for_access_isSet;
}

bool OAIConnectedApplication::is_reason_for_access_Valid() const{
    return m_reason_for_access_isValid;
}

OAIScopesNullable OAIConnectedApplication::getScopes() const {
    return m_scopes;
}
void OAIConnectedApplication::setScopes(const OAIScopesNullable &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIConnectedApplication::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIConnectedApplication::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAIConnectedApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_for_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectedApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && m_created_at_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
