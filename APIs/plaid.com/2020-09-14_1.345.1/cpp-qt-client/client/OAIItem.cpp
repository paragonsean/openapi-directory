/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem::OAIItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem::OAIItem() {
    this->initializeModel();
}

OAIItem::~OAIItem() {}

void OAIItem::initializeModel() {

    m_available_products_isSet = false;
    m_available_products_isValid = false;

    m_billed_products_isSet = false;
    m_billed_products_isValid = false;

    m_consent_expiration_time_isSet = false;
    m_consent_expiration_time_isValid = false;

    m_consented_products_isSet = false;
    m_consented_products_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_institution_id_isSet = false;
    m_institution_id_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_update_type_isSet = false;
    m_update_type_isValid = false;

    m_webhook_isSet = false;
    m_webhook_isValid = false;
}

void OAIItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem::fromJsonObject(QJsonObject json) {

    m_available_products_isValid = ::OpenAPI::fromJsonValue(m_available_products, json[QString("available_products")]);
    m_available_products_isSet = !json[QString("available_products")].isNull() && m_available_products_isValid;

    m_billed_products_isValid = ::OpenAPI::fromJsonValue(m_billed_products, json[QString("billed_products")]);
    m_billed_products_isSet = !json[QString("billed_products")].isNull() && m_billed_products_isValid;

    m_consent_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_consent_expiration_time, json[QString("consent_expiration_time")]);
    m_consent_expiration_time_isSet = !json[QString("consent_expiration_time")].isNull() && m_consent_expiration_time_isValid;

    m_consented_products_isValid = ::OpenAPI::fromJsonValue(m_consented_products, json[QString("consented_products")]);
    m_consented_products_isSet = !json[QString("consented_products")].isNull() && m_consented_products_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_institution_id_isValid = ::OpenAPI::fromJsonValue(m_institution_id, json[QString("institution_id")]);
    m_institution_id_isSet = !json[QString("institution_id")].isNull() && m_institution_id_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("item_id")]);
    m_item_id_isSet = !json[QString("item_id")].isNull() && m_item_id_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_update_type_isValid = ::OpenAPI::fromJsonValue(m_update_type, json[QString("update_type")]);
    m_update_type_isSet = !json[QString("update_type")].isNull() && m_update_type_isValid;

    m_webhook_isValid = ::OpenAPI::fromJsonValue(m_webhook, json[QString("webhook")]);
    m_webhook_isSet = !json[QString("webhook")].isNull() && m_webhook_isValid;
}

QString OAIItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem::asJsonObject() const {
    QJsonObject obj;
    if (m_available_products.size() > 0) {
        obj.insert(QString("available_products"), ::OpenAPI::toJsonValue(m_available_products));
    }
    if (m_billed_products.size() > 0) {
        obj.insert(QString("billed_products"), ::OpenAPI::toJsonValue(m_billed_products));
    }
    if (m_consent_expiration_time_isSet) {
        obj.insert(QString("consent_expiration_time"), ::OpenAPI::toJsonValue(m_consent_expiration_time));
    }
    if (m_consented_products.size() > 0) {
        obj.insert(QString("consented_products"), ::OpenAPI::toJsonValue(m_consented_products));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_institution_id_isSet) {
        obj.insert(QString("institution_id"), ::OpenAPI::toJsonValue(m_institution_id));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("item_id"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_update_type_isSet) {
        obj.insert(QString("update_type"), ::OpenAPI::toJsonValue(m_update_type));
    }
    if (m_webhook_isSet) {
        obj.insert(QString("webhook"), ::OpenAPI::toJsonValue(m_webhook));
    }
    return obj;
}

QList<OAIProducts> OAIItem::getAvailableProducts() const {
    return m_available_products;
}
void OAIItem::setAvailableProducts(const QList<OAIProducts> &available_products) {
    m_available_products = available_products;
    m_available_products_isSet = true;
}

bool OAIItem::is_available_products_Set() const{
    return m_available_products_isSet;
}

bool OAIItem::is_available_products_Valid() const{
    return m_available_products_isValid;
}

QList<OAIProducts> OAIItem::getBilledProducts() const {
    return m_billed_products;
}
void OAIItem::setBilledProducts(const QList<OAIProducts> &billed_products) {
    m_billed_products = billed_products;
    m_billed_products_isSet = true;
}

bool OAIItem::is_billed_products_Set() const{
    return m_billed_products_isSet;
}

bool OAIItem::is_billed_products_Valid() const{
    return m_billed_products_isValid;
}

QDateTime OAIItem::getConsentExpirationTime() const {
    return m_consent_expiration_time;
}
void OAIItem::setConsentExpirationTime(const QDateTime &consent_expiration_time) {
    m_consent_expiration_time = consent_expiration_time;
    m_consent_expiration_time_isSet = true;
}

bool OAIItem::is_consent_expiration_time_Set() const{
    return m_consent_expiration_time_isSet;
}

bool OAIItem::is_consent_expiration_time_Valid() const{
    return m_consent_expiration_time_isValid;
}

QList<OAIProducts> OAIItem::getConsentedProducts() const {
    return m_consented_products;
}
void OAIItem::setConsentedProducts(const QList<OAIProducts> &consented_products) {
    m_consented_products = consented_products;
    m_consented_products_isSet = true;
}

bool OAIItem::is_consented_products_Set() const{
    return m_consented_products_isSet;
}

bool OAIItem::is_consented_products_Valid() const{
    return m_consented_products_isValid;
}

OAIPlaidError OAIItem::getError() const {
    return m_error;
}
void OAIItem::setError(const OAIPlaidError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIItem::is_error_Set() const{
    return m_error_isSet;
}

bool OAIItem::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIItem::getInstitutionId() const {
    return m_institution_id;
}
void OAIItem::setInstitutionId(const QString &institution_id) {
    m_institution_id = institution_id;
    m_institution_id_isSet = true;
}

bool OAIItem::is_institution_id_Set() const{
    return m_institution_id_isSet;
}

bool OAIItem::is_institution_id_Valid() const{
    return m_institution_id_isValid;
}

QString OAIItem::getItemId() const {
    return m_item_id;
}
void OAIItem::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIItem::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIItem::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QList<OAIProducts> OAIItem::getProducts() const {
    return m_products;
}
void OAIItem::setProducts(const QList<OAIProducts> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIItem::is_products_Set() const{
    return m_products_isSet;
}

bool OAIItem::is_products_Valid() const{
    return m_products_isValid;
}

QString OAIItem::getUpdateType() const {
    return m_update_type;
}
void OAIItem::setUpdateType(const QString &update_type) {
    m_update_type = update_type;
    m_update_type_isSet = true;
}

bool OAIItem::is_update_type_Set() const{
    return m_update_type_isSet;
}

bool OAIItem::is_update_type_Valid() const{
    return m_update_type_isValid;
}

QString OAIItem::getWebhook() const {
    return m_webhook;
}
void OAIItem::setWebhook(const QString &webhook) {
    m_webhook = webhook;
    m_webhook_isSet = true;
}

bool OAIItem::is_webhook_Set() const{
    return m_webhook_isSet;
}

bool OAIItem::is_webhook_Valid() const{
    return m_webhook_isValid;
}

bool OAIItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_billed_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consented_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_products_isValid && m_billed_products_isValid && m_consent_expiration_time_isValid && m_error_isValid && m_item_id_isValid && m_update_type_isValid && m_webhook_isValid && true;
}

} // namespace OpenAPI
