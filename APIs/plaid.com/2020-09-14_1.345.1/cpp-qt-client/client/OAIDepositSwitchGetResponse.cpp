/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDepositSwitchGetResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDepositSwitchGetResponse::OAIDepositSwitchGetResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDepositSwitchGetResponse::OAIDepositSwitchGetResponse() {
    this->initializeModel();
}

OAIDepositSwitchGetResponse::~OAIDepositSwitchGetResponse() {}

void OAIDepositSwitchGetResponse::initializeModel() {

    m_account_has_multiple_allocations_isSet = false;
    m_account_has_multiple_allocations_isValid = false;

    m_amount_allocated_isSet = false;
    m_amount_allocated_isValid = false;

    m_date_completed_isSet = false;
    m_date_completed_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_deposit_switch_id_isSet = false;
    m_deposit_switch_id_isValid = false;

    m_employer_id_isSet = false;
    m_employer_id_isValid = false;

    m_employer_name_isSet = false;
    m_employer_name_isValid = false;

    m_institution_id_isSet = false;
    m_institution_id_isValid = false;

    m_institution_name_isSet = false;
    m_institution_name_isValid = false;

    m_is_allocated_remainder_isSet = false;
    m_is_allocated_remainder_isValid = false;

    m_percent_allocated_isSet = false;
    m_percent_allocated_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_switch_method_isSet = false;
    m_switch_method_isValid = false;

    m_target_account_id_isSet = false;
    m_target_account_id_isValid = false;

    m_target_item_id_isSet = false;
    m_target_item_id_isValid = false;
}

void OAIDepositSwitchGetResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDepositSwitchGetResponse::fromJsonObject(QJsonObject json) {

    m_account_has_multiple_allocations_isValid = ::OpenAPI::fromJsonValue(m_account_has_multiple_allocations, json[QString("account_has_multiple_allocations")]);
    m_account_has_multiple_allocations_isSet = !json[QString("account_has_multiple_allocations")].isNull() && m_account_has_multiple_allocations_isValid;

    m_amount_allocated_isValid = ::OpenAPI::fromJsonValue(m_amount_allocated, json[QString("amount_allocated")]);
    m_amount_allocated_isSet = !json[QString("amount_allocated")].isNull() && m_amount_allocated_isValid;

    m_date_completed_isValid = ::OpenAPI::fromJsonValue(m_date_completed, json[QString("date_completed")]);
    m_date_completed_isSet = !json[QString("date_completed")].isNull() && m_date_completed_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_deposit_switch_id_isValid = ::OpenAPI::fromJsonValue(m_deposit_switch_id, json[QString("deposit_switch_id")]);
    m_deposit_switch_id_isSet = !json[QString("deposit_switch_id")].isNull() && m_deposit_switch_id_isValid;

    m_employer_id_isValid = ::OpenAPI::fromJsonValue(m_employer_id, json[QString("employer_id")]);
    m_employer_id_isSet = !json[QString("employer_id")].isNull() && m_employer_id_isValid;

    m_employer_name_isValid = ::OpenAPI::fromJsonValue(m_employer_name, json[QString("employer_name")]);
    m_employer_name_isSet = !json[QString("employer_name")].isNull() && m_employer_name_isValid;

    m_institution_id_isValid = ::OpenAPI::fromJsonValue(m_institution_id, json[QString("institution_id")]);
    m_institution_id_isSet = !json[QString("institution_id")].isNull() && m_institution_id_isValid;

    m_institution_name_isValid = ::OpenAPI::fromJsonValue(m_institution_name, json[QString("institution_name")]);
    m_institution_name_isSet = !json[QString("institution_name")].isNull() && m_institution_name_isValid;

    m_is_allocated_remainder_isValid = ::OpenAPI::fromJsonValue(m_is_allocated_remainder, json[QString("is_allocated_remainder")]);
    m_is_allocated_remainder_isSet = !json[QString("is_allocated_remainder")].isNull() && m_is_allocated_remainder_isValid;

    m_percent_allocated_isValid = ::OpenAPI::fromJsonValue(m_percent_allocated, json[QString("percent_allocated")]);
    m_percent_allocated_isSet = !json[QString("percent_allocated")].isNull() && m_percent_allocated_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_switch_method_isValid = ::OpenAPI::fromJsonValue(m_switch_method, json[QString("switch_method")]);
    m_switch_method_isSet = !json[QString("switch_method")].isNull() && m_switch_method_isValid;

    m_target_account_id_isValid = ::OpenAPI::fromJsonValue(m_target_account_id, json[QString("target_account_id")]);
    m_target_account_id_isSet = !json[QString("target_account_id")].isNull() && m_target_account_id_isValid;

    m_target_item_id_isValid = ::OpenAPI::fromJsonValue(m_target_item_id, json[QString("target_item_id")]);
    m_target_item_id_isSet = !json[QString("target_item_id")].isNull() && m_target_item_id_isValid;
}

QString OAIDepositSwitchGetResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDepositSwitchGetResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_account_has_multiple_allocations_isSet) {
        obj.insert(QString("account_has_multiple_allocations"), ::OpenAPI::toJsonValue(m_account_has_multiple_allocations));
    }
    if (m_amount_allocated_isSet) {
        obj.insert(QString("amount_allocated"), ::OpenAPI::toJsonValue(m_amount_allocated));
    }
    if (m_date_completed_isSet) {
        obj.insert(QString("date_completed"), ::OpenAPI::toJsonValue(m_date_completed));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_deposit_switch_id_isSet) {
        obj.insert(QString("deposit_switch_id"), ::OpenAPI::toJsonValue(m_deposit_switch_id));
    }
    if (m_employer_id_isSet) {
        obj.insert(QString("employer_id"), ::OpenAPI::toJsonValue(m_employer_id));
    }
    if (m_employer_name_isSet) {
        obj.insert(QString("employer_name"), ::OpenAPI::toJsonValue(m_employer_name));
    }
    if (m_institution_id_isSet) {
        obj.insert(QString("institution_id"), ::OpenAPI::toJsonValue(m_institution_id));
    }
    if (m_institution_name_isSet) {
        obj.insert(QString("institution_name"), ::OpenAPI::toJsonValue(m_institution_name));
    }
    if (m_is_allocated_remainder_isSet) {
        obj.insert(QString("is_allocated_remainder"), ::OpenAPI::toJsonValue(m_is_allocated_remainder));
    }
    if (m_percent_allocated_isSet) {
        obj.insert(QString("percent_allocated"), ::OpenAPI::toJsonValue(m_percent_allocated));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_switch_method_isSet) {
        obj.insert(QString("switch_method"), ::OpenAPI::toJsonValue(m_switch_method));
    }
    if (m_target_account_id_isSet) {
        obj.insert(QString("target_account_id"), ::OpenAPI::toJsonValue(m_target_account_id));
    }
    if (m_target_item_id_isSet) {
        obj.insert(QString("target_item_id"), ::OpenAPI::toJsonValue(m_target_item_id));
    }
    return obj;
}

bool OAIDepositSwitchGetResponse::isAccountHasMultipleAllocations() const {
    return m_account_has_multiple_allocations;
}
void OAIDepositSwitchGetResponse::setAccountHasMultipleAllocations(const bool &account_has_multiple_allocations) {
    m_account_has_multiple_allocations = account_has_multiple_allocations;
    m_account_has_multiple_allocations_isSet = true;
}

bool OAIDepositSwitchGetResponse::is_account_has_multiple_allocations_Set() const{
    return m_account_has_multiple_allocations_isSet;
}

bool OAIDepositSwitchGetResponse::is_account_has_multiple_allocations_Valid() const{
    return m_account_has_multiple_allocations_isValid;
}

double OAIDepositSwitchGetResponse::getAmountAllocated() const {
    return m_amount_allocated;
}
void OAIDepositSwitchGetResponse::setAmountAllocated(const double &amount_allocated) {
    m_amount_allocated = amount_allocated;
    m_amount_allocated_isSet = true;
}

bool OAIDepositSwitchGetResponse::is_amount_allocated_Set() const{
    return m_amount_allocated_isSet;
}

bool OAIDepositSwitchGetResponse::is_amount_allocated_Valid() const{
    return m_amount_allocated_isValid;
}

QDate OAIDepositSwitchGetResponse::getDateCompleted() const {
    return m_date_completed;
}
void OAIDepositSwitchGetResponse::setDateCompleted(const QDate &date_completed) {
    m_date_completed = date_completed;
    m_date_completed_isSet = true;
}

bool OAIDepositSwitchGetResponse::is_date_completed_Set() const{
    return m_date_completed_isSet;
}

bool OAIDepositSwitchGetResponse::is_date_completed_Valid() const{
    return m_date_completed_isValid;
}

QDate OAIDepositSwitchGetResponse::getDateCreated() const {
    return m_date_created;
}
void OAIDepositSwitchGetResponse::setDateCreated(const QDate &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIDepositSwitchGetResponse::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIDepositSwitchGetResponse::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIDepositSwitchGetResponse::getDepositSwitchId() const {
    return m_deposit_switch_id;
}
void OAIDepositSwitchGetResponse::setDepositSwitchId(const QString &deposit_switch_id) {
    m_deposit_switch_id = deposit_switch_id;
    m_deposit_switch_id_isSet = true;
}

bool OAIDepositSwitchGetResponse::is_deposit_switch_id_Set() const{
    return m_deposit_switch_id_isSet;
}

bool OAIDepositSwitchGetResponse::is_deposit_switch_id_Valid() const{
    return m_deposit_switch_id_isValid;
}

QString OAIDepositSwitchGetResponse::getEmployerId() const {
    return m_employer_id;
}
void OAIDepositSwitchGetResponse::setEmployerId(const QString &employer_id) {
    m_employer_id = employer_id;
    m_employer_id_isSet = true;
}

bool OAIDepositSwitchGetResponse::is_employer_id_Set() const{
    return m_employer_id_isSet;
}

bool OAIDepositSwitchGetResponse::is_employer_id_Valid() const{
    return m_employer_id_isValid;
}

QString OAIDepositSwitchGetResponse::getEmployerName() const {
    return m_employer_name;
}
void OAIDepositSwitchGetResponse::setEmployerName(const QString &employer_name) {
    m_employer_name = employer_name;
    m_employer_name_isSet = true;
}

bool OAIDepositSwitchGetResponse::is_employer_name_Set() const{
    return m_employer_name_isSet;
}

bool OAIDepositSwitchGetResponse::is_employer_name_Valid() const{
    return m_employer_name_isValid;
}

QString OAIDepositSwitchGetResponse::getInstitutionId() const {
    return m_institution_id;
}
void OAIDepositSwitchGetResponse::setInstitutionId(const QString &institution_id) {
    m_institution_id = institution_id;
    m_institution_id_isSet = true;
}

bool OAIDepositSwitchGetResponse::is_institution_id_Set() const{
    return m_institution_id_isSet;
}

bool OAIDepositSwitchGetResponse::is_institution_id_Valid() const{
    return m_institution_id_isValid;
}

QString OAIDepositSwitchGetResponse::getInstitutionName() const {
    return m_institution_name;
}
void OAIDepositSwitchGetResponse::setInstitutionName(const QString &institution_name) {
    m_institution_name = institution_name;
    m_institution_name_isSet = true;
}

bool OAIDepositSwitchGetResponse::is_institution_name_Set() const{
    return m_institution_name_isSet;
}

bool OAIDepositSwitchGetResponse::is_institution_name_Valid() const{
    return m_institution_name_isValid;
}

bool OAIDepositSwitchGetResponse::isIsAllocatedRemainder() const {
    return m_is_allocated_remainder;
}
void OAIDepositSwitchGetResponse::setIsAllocatedRemainder(const bool &is_allocated_remainder) {
    m_is_allocated_remainder = is_allocated_remainder;
    m_is_allocated_remainder_isSet = true;
}

bool OAIDepositSwitchGetResponse::is_is_allocated_remainder_Set() const{
    return m_is_allocated_remainder_isSet;
}

bool OAIDepositSwitchGetResponse::is_is_allocated_remainder_Valid() const{
    return m_is_allocated_remainder_isValid;
}

double OAIDepositSwitchGetResponse::getPercentAllocated() const {
    return m_percent_allocated;
}
void OAIDepositSwitchGetResponse::setPercentAllocated(const double &percent_allocated) {
    m_percent_allocated = percent_allocated;
    m_percent_allocated_isSet = true;
}

bool OAIDepositSwitchGetResponse::is_percent_allocated_Set() const{
    return m_percent_allocated_isSet;
}

bool OAIDepositSwitchGetResponse::is_percent_allocated_Valid() const{
    return m_percent_allocated_isValid;
}

QString OAIDepositSwitchGetResponse::getRequestId() const {
    return m_request_id;
}
void OAIDepositSwitchGetResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDepositSwitchGetResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDepositSwitchGetResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIDepositSwitchGetResponse::getState() const {
    return m_state;
}
void OAIDepositSwitchGetResponse::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDepositSwitchGetResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDepositSwitchGetResponse::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIDepositSwitchGetResponse::getSwitchMethod() const {
    return m_switch_method;
}
void OAIDepositSwitchGetResponse::setSwitchMethod(const QString &switch_method) {
    m_switch_method = switch_method;
    m_switch_method_isSet = true;
}

bool OAIDepositSwitchGetResponse::is_switch_method_Set() const{
    return m_switch_method_isSet;
}

bool OAIDepositSwitchGetResponse::is_switch_method_Valid() const{
    return m_switch_method_isValid;
}

QString OAIDepositSwitchGetResponse::getTargetAccountId() const {
    return m_target_account_id;
}
void OAIDepositSwitchGetResponse::setTargetAccountId(const QString &target_account_id) {
    m_target_account_id = target_account_id;
    m_target_account_id_isSet = true;
}

bool OAIDepositSwitchGetResponse::is_target_account_id_Set() const{
    return m_target_account_id_isSet;
}

bool OAIDepositSwitchGetResponse::is_target_account_id_Valid() const{
    return m_target_account_id_isValid;
}

QString OAIDepositSwitchGetResponse::getTargetItemId() const {
    return m_target_item_id;
}
void OAIDepositSwitchGetResponse::setTargetItemId(const QString &target_item_id) {
    m_target_item_id = target_item_id;
    m_target_item_id_isSet = true;
}

bool OAIDepositSwitchGetResponse::is_target_item_id_Set() const{
    return m_target_item_id_isSet;
}

bool OAIDepositSwitchGetResponse::is_target_item_id_Valid() const{
    return m_target_item_id_isValid;
}

bool OAIDepositSwitchGetResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_has_multiple_allocations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_allocated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deposit_switch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_allocated_remainder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_allocated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDepositSwitchGetResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_has_multiple_allocations_isValid && m_amount_allocated_isValid && m_date_completed_isValid && m_date_created_isValid && m_deposit_switch_id_isValid && m_is_allocated_remainder_isValid && m_percent_allocated_isValid && m_request_id_isValid && m_state_isValid && m_target_account_id_isValid && m_target_item_id_isValid && true;
}

} // namespace OpenAPI
