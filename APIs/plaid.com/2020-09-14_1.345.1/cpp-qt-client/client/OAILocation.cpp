/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_store_number_isSet = false;
    m_store_number_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_store_number_isValid = ::OpenAPI::fromJsonValue(m_store_number, json[QString("store_number")]);
    m_store_number_isSet = !json[QString("store_number")].isNull() && m_store_number_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_store_number_isSet) {
        obj.insert(QString("store_number"), ::OpenAPI::toJsonValue(m_store_number));
    }
    return obj;
}

QString OAILocation::getAddress() const {
    return m_address;
}
void OAILocation::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAILocation::is_address_Set() const{
    return m_address_isSet;
}

bool OAILocation::is_address_Valid() const{
    return m_address_isValid;
}

QString OAILocation::getCity() const {
    return m_city;
}
void OAILocation::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAILocation::is_city_Set() const{
    return m_city_isSet;
}

bool OAILocation::is_city_Valid() const{
    return m_city_isValid;
}

QString OAILocation::getCountry() const {
    return m_country;
}
void OAILocation::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAILocation::is_country_Set() const{
    return m_country_isSet;
}

bool OAILocation::is_country_Valid() const{
    return m_country_isValid;
}

double OAILocation::getLat() const {
    return m_lat;
}
void OAILocation::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAILocation::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAILocation::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAILocation::getLon() const {
    return m_lon;
}
void OAILocation::setLon(const double &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAILocation::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAILocation::is_lon_Valid() const{
    return m_lon_isValid;
}

QString OAILocation::getPostalCode() const {
    return m_postal_code;
}
void OAILocation::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAILocation::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAILocation::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAILocation::getRegion() const {
    return m_region;
}
void OAILocation::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAILocation::is_region_Set() const{
    return m_region_isSet;
}

bool OAILocation::is_region_Valid() const{
    return m_region_isValid;
}

QString OAILocation::getStoreNumber() const {
    return m_store_number;
}
void OAILocation::setStoreNumber(const QString &store_number) {
    m_store_number = store_number;
    m_store_number_isSet = true;
}

bool OAILocation::is_store_number_Set() const{
    return m_store_number_isSet;
}

bool OAILocation::is_store_number_Valid() const{
    return m_store_number_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_city_isValid && m_country_isValid && m_lat_isValid && m_lon_isValid && m_postal_code_isValid && m_region_isValid && m_store_number_isValid && true;
}

} // namespace OpenAPI
