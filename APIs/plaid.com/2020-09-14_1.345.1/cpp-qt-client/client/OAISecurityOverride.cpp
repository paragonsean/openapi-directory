/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityOverride::OAISecurityOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityOverride::OAISecurityOverride() {
    this->initializeModel();
}

OAISecurityOverride::~OAISecurityOverride() {}

void OAISecurityOverride::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_cusip_isSet = false;
    m_cusip_isValid = false;

    m_isin_isSet = false;
    m_isin_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_sedol_isSet = false;
    m_sedol_isValid = false;

    m_ticker_symbol_isSet = false;
    m_ticker_symbol_isValid = false;
}

void OAISecurityOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurityOverride::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_cusip_isValid = ::OpenAPI::fromJsonValue(m_cusip, json[QString("cusip")]);
    m_cusip_isSet = !json[QString("cusip")].isNull() && m_cusip_isValid;

    m_isin_isValid = ::OpenAPI::fromJsonValue(m_isin, json[QString("isin")]);
    m_isin_isSet = !json[QString("isin")].isNull() && m_isin_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sedol_isValid = ::OpenAPI::fromJsonValue(m_sedol, json[QString("sedol")]);
    m_sedol_isSet = !json[QString("sedol")].isNull() && m_sedol_isValid;

    m_ticker_symbol_isValid = ::OpenAPI::fromJsonValue(m_ticker_symbol, json[QString("ticker_symbol")]);
    m_ticker_symbol_isSet = !json[QString("ticker_symbol")].isNull() && m_ticker_symbol_isValid;
}

QString OAISecurityOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurityOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_cusip_isSet) {
        obj.insert(QString("cusip"), ::OpenAPI::toJsonValue(m_cusip));
    }
    if (m_isin_isSet) {
        obj.insert(QString("isin"), ::OpenAPI::toJsonValue(m_isin));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sedol_isSet) {
        obj.insert(QString("sedol"), ::OpenAPI::toJsonValue(m_sedol));
    }
    if (m_ticker_symbol_isSet) {
        obj.insert(QString("ticker_symbol"), ::OpenAPI::toJsonValue(m_ticker_symbol));
    }
    return obj;
}

QString OAISecurityOverride::getCurrency() const {
    return m_currency;
}
void OAISecurityOverride::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAISecurityOverride::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAISecurityOverride::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAISecurityOverride::getCusip() const {
    return m_cusip;
}
void OAISecurityOverride::setCusip(const QString &cusip) {
    m_cusip = cusip;
    m_cusip_isSet = true;
}

bool OAISecurityOverride::is_cusip_Set() const{
    return m_cusip_isSet;
}

bool OAISecurityOverride::is_cusip_Valid() const{
    return m_cusip_isValid;
}

QString OAISecurityOverride::getIsin() const {
    return m_isin;
}
void OAISecurityOverride::setIsin(const QString &isin) {
    m_isin = isin;
    m_isin_isSet = true;
}

bool OAISecurityOverride::is_isin_Set() const{
    return m_isin_isSet;
}

bool OAISecurityOverride::is_isin_Valid() const{
    return m_isin_isValid;
}

QString OAISecurityOverride::getName() const {
    return m_name;
}
void OAISecurityOverride::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISecurityOverride::is_name_Set() const{
    return m_name_isSet;
}

bool OAISecurityOverride::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISecurityOverride::getSedol() const {
    return m_sedol;
}
void OAISecurityOverride::setSedol(const QString &sedol) {
    m_sedol = sedol;
    m_sedol_isSet = true;
}

bool OAISecurityOverride::is_sedol_Set() const{
    return m_sedol_isSet;
}

bool OAISecurityOverride::is_sedol_Valid() const{
    return m_sedol_isValid;
}

QString OAISecurityOverride::getTickerSymbol() const {
    return m_ticker_symbol;
}
void OAISecurityOverride::setTickerSymbol(const QString &ticker_symbol) {
    m_ticker_symbol = ticker_symbol;
    m_ticker_symbol_isSet = true;
}

bool OAISecurityOverride::is_ticker_symbol_Set() const{
    return m_ticker_symbol_isSet;
}

bool OAISecurityOverride::is_ticker_symbol_Valid() const{
    return m_ticker_symbol_isValid;
}

bool OAISecurityOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cusip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sedol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticker_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurityOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
