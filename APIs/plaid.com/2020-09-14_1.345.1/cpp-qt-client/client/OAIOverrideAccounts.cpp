/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOverrideAccounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOverrideAccounts::OAIOverrideAccounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOverrideAccounts::OAIOverrideAccounts() {
    this->initializeModel();
}

OAIOverrideAccounts::~OAIOverrideAccounts() {}

void OAIOverrideAccounts::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_force_available_balance_isSet = false;
    m_force_available_balance_isValid = false;

    m_holdings_isSet = false;
    m_holdings_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_income_isSet = false;
    m_income_isValid = false;

    m_inflow_model_isSet = false;
    m_inflow_model_isValid = false;

    m_investment_transactions_isSet = false;
    m_investment_transactions_isValid = false;

    m_liability_isSet = false;
    m_liability_isValid = false;

    m_meta_isSet = false;
    m_meta_isValid = false;

    m_numbers_isSet = false;
    m_numbers_isValid = false;

    m_starting_balance_isSet = false;
    m_starting_balance_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_transactions_isSet = false;
    m_transactions_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIOverrideAccounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOverrideAccounts::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_force_available_balance_isValid = ::OpenAPI::fromJsonValue(m_force_available_balance, json[QString("force_available_balance")]);
    m_force_available_balance_isSet = !json[QString("force_available_balance")].isNull() && m_force_available_balance_isValid;

    m_holdings_isValid = ::OpenAPI::fromJsonValue(m_holdings, json[QString("holdings")]);
    m_holdings_isSet = !json[QString("holdings")].isNull() && m_holdings_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_income_isValid = ::OpenAPI::fromJsonValue(m_income, json[QString("income")]);
    m_income_isSet = !json[QString("income")].isNull() && m_income_isValid;

    m_inflow_model_isValid = ::OpenAPI::fromJsonValue(m_inflow_model, json[QString("inflow_model")]);
    m_inflow_model_isSet = !json[QString("inflow_model")].isNull() && m_inflow_model_isValid;

    m_investment_transactions_isValid = ::OpenAPI::fromJsonValue(m_investment_transactions, json[QString("investment_transactions")]);
    m_investment_transactions_isSet = !json[QString("investment_transactions")].isNull() && m_investment_transactions_isValid;

    m_liability_isValid = ::OpenAPI::fromJsonValue(m_liability, json[QString("liability")]);
    m_liability_isSet = !json[QString("liability")].isNull() && m_liability_isValid;

    m_meta_isValid = ::OpenAPI::fromJsonValue(m_meta, json[QString("meta")]);
    m_meta_isSet = !json[QString("meta")].isNull() && m_meta_isValid;

    m_numbers_isValid = ::OpenAPI::fromJsonValue(m_numbers, json[QString("numbers")]);
    m_numbers_isSet = !json[QString("numbers")].isNull() && m_numbers_isValid;

    m_starting_balance_isValid = ::OpenAPI::fromJsonValue(m_starting_balance, json[QString("starting_balance")]);
    m_starting_balance_isSet = !json[QString("starting_balance")].isNull() && m_starting_balance_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_transactions_isValid = ::OpenAPI::fromJsonValue(m_transactions, json[QString("transactions")]);
    m_transactions_isSet = !json[QString("transactions")].isNull() && m_transactions_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIOverrideAccounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOverrideAccounts::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_force_available_balance_isSet) {
        obj.insert(QString("force_available_balance"), ::OpenAPI::toJsonValue(m_force_available_balance));
    }
    if (m_holdings.isSet()) {
        obj.insert(QString("holdings"), ::OpenAPI::toJsonValue(m_holdings));
    }
    if (m_identity.isSet()) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_income.isSet()) {
        obj.insert(QString("income"), ::OpenAPI::toJsonValue(m_income));
    }
    if (m_inflow_model.isSet()) {
        obj.insert(QString("inflow_model"), ::OpenAPI::toJsonValue(m_inflow_model));
    }
    if (m_investment_transactions.isSet()) {
        obj.insert(QString("investment_transactions"), ::OpenAPI::toJsonValue(m_investment_transactions));
    }
    if (m_liability.isSet()) {
        obj.insert(QString("liability"), ::OpenAPI::toJsonValue(m_liability));
    }
    if (m_meta.isSet()) {
        obj.insert(QString("meta"), ::OpenAPI::toJsonValue(m_meta));
    }
    if (m_numbers.isSet()) {
        obj.insert(QString("numbers"), ::OpenAPI::toJsonValue(m_numbers));
    }
    if (m_starting_balance_isSet) {
        obj.insert(QString("starting_balance"), ::OpenAPI::toJsonValue(m_starting_balance));
    }
    if (m_subtype.isSet()) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_transactions.size() > 0) {
        obj.insert(QString("transactions"), ::OpenAPI::toJsonValue(m_transactions));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIOverrideAccounts::getCurrency() const {
    return m_currency;
}
void OAIOverrideAccounts::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIOverrideAccounts::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIOverrideAccounts::is_currency_Valid() const{
    return m_currency_isValid;
}

double OAIOverrideAccounts::getForceAvailableBalance() const {
    return m_force_available_balance;
}
void OAIOverrideAccounts::setForceAvailableBalance(const double &force_available_balance) {
    m_force_available_balance = force_available_balance;
    m_force_available_balance_isSet = true;
}

bool OAIOverrideAccounts::is_force_available_balance_Set() const{
    return m_force_available_balance_isSet;
}

bool OAIOverrideAccounts::is_force_available_balance_Valid() const{
    return m_force_available_balance_isValid;
}

OAIHoldingsOverride OAIOverrideAccounts::getHoldings() const {
    return m_holdings;
}
void OAIOverrideAccounts::setHoldings(const OAIHoldingsOverride &holdings) {
    m_holdings = holdings;
    m_holdings_isSet = true;
}

bool OAIOverrideAccounts::is_holdings_Set() const{
    return m_holdings_isSet;
}

bool OAIOverrideAccounts::is_holdings_Valid() const{
    return m_holdings_isValid;
}

OAIOwnerOverride OAIOverrideAccounts::getIdentity() const {
    return m_identity;
}
void OAIOverrideAccounts::setIdentity(const OAIOwnerOverride &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIOverrideAccounts::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIOverrideAccounts::is_identity_Valid() const{
    return m_identity_isValid;
}

OAIIncomeOverride OAIOverrideAccounts::getIncome() const {
    return m_income;
}
void OAIOverrideAccounts::setIncome(const OAIIncomeOverride &income) {
    m_income = income;
    m_income_isSet = true;
}

bool OAIOverrideAccounts::is_income_Set() const{
    return m_income_isSet;
}

bool OAIOverrideAccounts::is_income_Valid() const{
    return m_income_isValid;
}

OAIInflowModel OAIOverrideAccounts::getInflowModel() const {
    return m_inflow_model;
}
void OAIOverrideAccounts::setInflowModel(const OAIInflowModel &inflow_model) {
    m_inflow_model = inflow_model;
    m_inflow_model_isSet = true;
}

bool OAIOverrideAccounts::is_inflow_model_Set() const{
    return m_inflow_model_isSet;
}

bool OAIOverrideAccounts::is_inflow_model_Valid() const{
    return m_inflow_model_isValid;
}

OAIInvestments_TransactionsOverride OAIOverrideAccounts::getInvestmentTransactions() const {
    return m_investment_transactions;
}
void OAIOverrideAccounts::setInvestmentTransactions(const OAIInvestments_TransactionsOverride &investment_transactions) {
    m_investment_transactions = investment_transactions;
    m_investment_transactions_isSet = true;
}

bool OAIOverrideAccounts::is_investment_transactions_Set() const{
    return m_investment_transactions_isSet;
}

bool OAIOverrideAccounts::is_investment_transactions_Valid() const{
    return m_investment_transactions_isValid;
}

OAILiabilityOverride OAIOverrideAccounts::getLiability() const {
    return m_liability;
}
void OAIOverrideAccounts::setLiability(const OAILiabilityOverride &liability) {
    m_liability = liability;
    m_liability_isSet = true;
}

bool OAIOverrideAccounts::is_liability_Set() const{
    return m_liability_isSet;
}

bool OAIOverrideAccounts::is_liability_Valid() const{
    return m_liability_isValid;
}

OAIMeta OAIOverrideAccounts::getMeta() const {
    return m_meta;
}
void OAIOverrideAccounts::setMeta(const OAIMeta &meta) {
    m_meta = meta;
    m_meta_isSet = true;
}

bool OAIOverrideAccounts::is_meta_Set() const{
    return m_meta_isSet;
}

bool OAIOverrideAccounts::is_meta_Valid() const{
    return m_meta_isValid;
}

OAINumbers OAIOverrideAccounts::getNumbers() const {
    return m_numbers;
}
void OAIOverrideAccounts::setNumbers(const OAINumbers &numbers) {
    m_numbers = numbers;
    m_numbers_isSet = true;
}

bool OAIOverrideAccounts::is_numbers_Set() const{
    return m_numbers_isSet;
}

bool OAIOverrideAccounts::is_numbers_Valid() const{
    return m_numbers_isValid;
}

double OAIOverrideAccounts::getStartingBalance() const {
    return m_starting_balance;
}
void OAIOverrideAccounts::setStartingBalance(const double &starting_balance) {
    m_starting_balance = starting_balance;
    m_starting_balance_isSet = true;
}

bool OAIOverrideAccounts::is_starting_balance_Set() const{
    return m_starting_balance_isSet;
}

bool OAIOverrideAccounts::is_starting_balance_Valid() const{
    return m_starting_balance_isValid;
}

OAIAccountSubtype OAIOverrideAccounts::getSubtype() const {
    return m_subtype;
}
void OAIOverrideAccounts::setSubtype(const OAIAccountSubtype &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAIOverrideAccounts::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAIOverrideAccounts::is_subtype_Valid() const{
    return m_subtype_isValid;
}

QList<OAITransactionOverride> OAIOverrideAccounts::getTransactions() const {
    return m_transactions;
}
void OAIOverrideAccounts::setTransactions(const QList<OAITransactionOverride> &transactions) {
    m_transactions = transactions;
    m_transactions_isSet = true;
}

bool OAIOverrideAccounts::is_transactions_Set() const{
    return m_transactions_isSet;
}

bool OAIOverrideAccounts::is_transactions_Valid() const{
    return m_transactions_isValid;
}

OAIOverrideAccountType OAIOverrideAccounts::getType() const {
    return m_type;
}
void OAIOverrideAccounts::setType(const OAIOverrideAccountType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOverrideAccounts::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOverrideAccounts::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIOverrideAccounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_available_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holdings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_income.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inflow_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_investment_transactions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_liability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_numbers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOverrideAccounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_isValid && m_force_available_balance_isValid && m_identity_isValid && m_inflow_model_isValid && m_liability_isValid && m_meta_isValid && m_numbers_isValid && m_starting_balance_isValid && m_subtype_isValid && m_transactions_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
