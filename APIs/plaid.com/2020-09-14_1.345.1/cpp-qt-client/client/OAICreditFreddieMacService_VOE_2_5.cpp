/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreditFreddieMacService_VOE_2_5.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreditFreddieMacService_VOE_2_5::OAICreditFreddieMacService_VOE_2_5(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreditFreddieMacService_VOE_2_5::OAICreditFreddieMacService_VOE_2_5() {
    this->initializeModel();
}

OAICreditFreddieMacService_VOE_2_5::~OAICreditFreddieMacService_VOE_2_5() {}

void OAICreditFreddieMacService_VOE_2_5::initializeModel() {

    m_statuses_isSet = false;
    m_statuses_isValid = false;

    m_verification_of_asset_isSet = false;
    m_verification_of_asset_isValid = false;
}

void OAICreditFreddieMacService_VOE_2_5::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreditFreddieMacService_VOE_2_5::fromJsonObject(QJsonObject json) {

    m_statuses_isValid = ::OpenAPI::fromJsonValue(m_statuses, json[QString("STATUSES")]);
    m_statuses_isSet = !json[QString("STATUSES")].isNull() && m_statuses_isValid;

    m_verification_of_asset_isValid = ::OpenAPI::fromJsonValue(m_verification_of_asset, json[QString("VERIFICATION_OF_ASSET")]);
    m_verification_of_asset_isSet = !json[QString("VERIFICATION_OF_ASSET")].isNull() && m_verification_of_asset_isValid;
}

QString OAICreditFreddieMacService_VOE_2_5::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreditFreddieMacService_VOE_2_5::asJsonObject() const {
    QJsonObject obj;
    if (m_statuses.isSet()) {
        obj.insert(QString("STATUSES"), ::OpenAPI::toJsonValue(m_statuses));
    }
    if (m_verification_of_asset.size() > 0) {
        obj.insert(QString("VERIFICATION_OF_ASSET"), ::OpenAPI::toJsonValue(m_verification_of_asset));
    }
    return obj;
}

OAIStatuses OAICreditFreddieMacService_VOE_2_5::getStatuses() const {
    return m_statuses;
}
void OAICreditFreddieMacService_VOE_2_5::setStatuses(const OAIStatuses &statuses) {
    m_statuses = statuses;
    m_statuses_isSet = true;
}

bool OAICreditFreddieMacService_VOE_2_5::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAICreditFreddieMacService_VOE_2_5::is_statuses_Valid() const{
    return m_statuses_isValid;
}

QList<OAICreditFreddieMacVerificationOfAsset_VOE_2_5> OAICreditFreddieMacService_VOE_2_5::getVerificationOfAsset() const {
    return m_verification_of_asset;
}
void OAICreditFreddieMacService_VOE_2_5::setVerificationOfAsset(const QList<OAICreditFreddieMacVerificationOfAsset_VOE_2_5> &verification_of_asset) {
    m_verification_of_asset = verification_of_asset;
    m_verification_of_asset_isSet = true;
}

bool OAICreditFreddieMacService_VOE_2_5::is_verification_of_asset_Set() const{
    return m_verification_of_asset_isSet;
}

bool OAICreditFreddieMacService_VOE_2_5::is_verification_of_asset_Valid() const{
    return m_verification_of_asset_isValid;
}

bool OAICreditFreddieMacService_VOE_2_5::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_statuses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_of_asset.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreditFreddieMacService_VOE_2_5::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_statuses_isValid && m_verification_of_asset_isValid && true;
}

} // namespace OpenAPI
