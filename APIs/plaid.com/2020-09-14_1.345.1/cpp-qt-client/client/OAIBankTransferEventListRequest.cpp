/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBankTransferEventListRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBankTransferEventListRequest::OAIBankTransferEventListRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBankTransferEventListRequest::OAIBankTransferEventListRequest() {
    this->initializeModel();
}

OAIBankTransferEventListRequest::~OAIBankTransferEventListRequest() {}

void OAIBankTransferEventListRequest::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_bank_transfer_id_isSet = false;
    m_bank_transfer_id_isValid = false;

    m_bank_transfer_type_isSet = false;
    m_bank_transfer_type_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_event_types_isSet = false;
    m_event_types_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_origination_account_id_isSet = false;
    m_origination_account_id_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIBankTransferEventListRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBankTransferEventListRequest::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_bank_transfer_id_isValid = ::OpenAPI::fromJsonValue(m_bank_transfer_id, json[QString("bank_transfer_id")]);
    m_bank_transfer_id_isSet = !json[QString("bank_transfer_id")].isNull() && m_bank_transfer_id_isValid;

    m_bank_transfer_type_isValid = ::OpenAPI::fromJsonValue(m_bank_transfer_type, json[QString("bank_transfer_type")]);
    m_bank_transfer_type_isSet = !json[QString("bank_transfer_type")].isNull() && m_bank_transfer_type_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_event_types_isValid = ::OpenAPI::fromJsonValue(m_event_types, json[QString("event_types")]);
    m_event_types_isSet = !json[QString("event_types")].isNull() && m_event_types_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_origination_account_id_isValid = ::OpenAPI::fromJsonValue(m_origination_account_id, json[QString("origination_account_id")]);
    m_origination_account_id_isSet = !json[QString("origination_account_id")].isNull() && m_origination_account_id_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;
}

QString OAIBankTransferEventListRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBankTransferEventListRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_bank_transfer_id_isSet) {
        obj.insert(QString("bank_transfer_id"), ::OpenAPI::toJsonValue(m_bank_transfer_id));
    }
    if (m_bank_transfer_type.isSet()) {
        obj.insert(QString("bank_transfer_type"), ::OpenAPI::toJsonValue(m_bank_transfer_type));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_event_types.size() > 0) {
        obj.insert(QString("event_types"), ::OpenAPI::toJsonValue(m_event_types));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_origination_account_id_isSet) {
        obj.insert(QString("origination_account_id"), ::OpenAPI::toJsonValue(m_origination_account_id));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QString OAIBankTransferEventListRequest::getAccountId() const {
    return m_account_id;
}
void OAIBankTransferEventListRequest::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIBankTransferEventListRequest::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIBankTransferEventListRequest::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIBankTransferEventListRequest::getBankTransferId() const {
    return m_bank_transfer_id;
}
void OAIBankTransferEventListRequest::setBankTransferId(const QString &bank_transfer_id) {
    m_bank_transfer_id = bank_transfer_id;
    m_bank_transfer_id_isSet = true;
}

bool OAIBankTransferEventListRequest::is_bank_transfer_id_Set() const{
    return m_bank_transfer_id_isSet;
}

bool OAIBankTransferEventListRequest::is_bank_transfer_id_Valid() const{
    return m_bank_transfer_id_isValid;
}

OAIBankTransferEventListBankTransferType OAIBankTransferEventListRequest::getBankTransferType() const {
    return m_bank_transfer_type;
}
void OAIBankTransferEventListRequest::setBankTransferType(const OAIBankTransferEventListBankTransferType &bank_transfer_type) {
    m_bank_transfer_type = bank_transfer_type;
    m_bank_transfer_type_isSet = true;
}

bool OAIBankTransferEventListRequest::is_bank_transfer_type_Set() const{
    return m_bank_transfer_type_isSet;
}

bool OAIBankTransferEventListRequest::is_bank_transfer_type_Valid() const{
    return m_bank_transfer_type_isValid;
}

QString OAIBankTransferEventListRequest::getClientId() const {
    return m_client_id;
}
void OAIBankTransferEventListRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIBankTransferEventListRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIBankTransferEventListRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

qint32 OAIBankTransferEventListRequest::getCount() const {
    return m_count;
}
void OAIBankTransferEventListRequest::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIBankTransferEventListRequest::is_count_Set() const{
    return m_count_isSet;
}

bool OAIBankTransferEventListRequest::is_count_Valid() const{
    return m_count_isValid;
}

OAIBankTransferEventListDirection OAIBankTransferEventListRequest::getDirection() const {
    return m_direction;
}
void OAIBankTransferEventListRequest::setDirection(const OAIBankTransferEventListDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIBankTransferEventListRequest::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIBankTransferEventListRequest::is_direction_Valid() const{
    return m_direction_isValid;
}

QDateTime OAIBankTransferEventListRequest::getEndDate() const {
    return m_end_date;
}
void OAIBankTransferEventListRequest::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIBankTransferEventListRequest::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIBankTransferEventListRequest::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QList<OAIBankTransferEventType> OAIBankTransferEventListRequest::getEventTypes() const {
    return m_event_types;
}
void OAIBankTransferEventListRequest::setEventTypes(const QList<OAIBankTransferEventType> &event_types) {
    m_event_types = event_types;
    m_event_types_isSet = true;
}

bool OAIBankTransferEventListRequest::is_event_types_Set() const{
    return m_event_types_isSet;
}

bool OAIBankTransferEventListRequest::is_event_types_Valid() const{
    return m_event_types_isValid;
}

qint32 OAIBankTransferEventListRequest::getOffset() const {
    return m_offset;
}
void OAIBankTransferEventListRequest::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIBankTransferEventListRequest::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIBankTransferEventListRequest::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAIBankTransferEventListRequest::getOriginationAccountId() const {
    return m_origination_account_id;
}
void OAIBankTransferEventListRequest::setOriginationAccountId(const QString &origination_account_id) {
    m_origination_account_id = origination_account_id;
    m_origination_account_id_isSet = true;
}

bool OAIBankTransferEventListRequest::is_origination_account_id_Set() const{
    return m_origination_account_id_isSet;
}

bool OAIBankTransferEventListRequest::is_origination_account_id_Valid() const{
    return m_origination_account_id_isValid;
}

QString OAIBankTransferEventListRequest::getSecret() const {
    return m_secret;
}
void OAIBankTransferEventListRequest::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIBankTransferEventListRequest::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIBankTransferEventListRequest::is_secret_Valid() const{
    return m_secret_isValid;
}

QDateTime OAIBankTransferEventListRequest::getStartDate() const {
    return m_start_date;
}
void OAIBankTransferEventListRequest::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIBankTransferEventListRequest::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIBankTransferEventListRequest::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIBankTransferEventListRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_transfer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_transfer_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origination_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBankTransferEventListRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
