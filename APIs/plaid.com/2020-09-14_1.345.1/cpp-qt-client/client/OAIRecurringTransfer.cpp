/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecurringTransfer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecurringTransfer::OAIRecurringTransfer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecurringTransfer::OAIRecurringTransfer() {
    this->initializeModel();
}

OAIRecurringTransfer::~OAIRecurringTransfer() {}

void OAIRecurringTransfer::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_ach_class_isSet = false;
    m_ach_class_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_funding_account_id_isSet = false;
    m_funding_account_id_isValid = false;

    m_iso_currency_code_isSet = false;
    m_iso_currency_code_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_next_origination_date_isSet = false;
    m_next_origination_date_isValid = false;

    m_origination_account_id_isSet = false;
    m_origination_account_id_isValid = false;

    m_recurring_transfer_id_isSet = false;
    m_recurring_transfer_id_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_test_clock_id_isSet = false;
    m_test_clock_id_isValid = false;

    m_transfer_ids_isSet = false;
    m_transfer_ids_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIRecurringTransfer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecurringTransfer::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_ach_class_isValid = ::OpenAPI::fromJsonValue(m_ach_class, json[QString("ach_class")]);
    m_ach_class_isSet = !json[QString("ach_class")].isNull() && m_ach_class_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_funding_account_id_isValid = ::OpenAPI::fromJsonValue(m_funding_account_id, json[QString("funding_account_id")]);
    m_funding_account_id_isSet = !json[QString("funding_account_id")].isNull() && m_funding_account_id_isValid;

    m_iso_currency_code_isValid = ::OpenAPI::fromJsonValue(m_iso_currency_code, json[QString("iso_currency_code")]);
    m_iso_currency_code_isSet = !json[QString("iso_currency_code")].isNull() && m_iso_currency_code_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_next_origination_date_isValid = ::OpenAPI::fromJsonValue(m_next_origination_date, json[QString("next_origination_date")]);
    m_next_origination_date_isSet = !json[QString("next_origination_date")].isNull() && m_next_origination_date_isValid;

    m_origination_account_id_isValid = ::OpenAPI::fromJsonValue(m_origination_account_id, json[QString("origination_account_id")]);
    m_origination_account_id_isSet = !json[QString("origination_account_id")].isNull() && m_origination_account_id_isValid;

    m_recurring_transfer_id_isValid = ::OpenAPI::fromJsonValue(m_recurring_transfer_id, json[QString("recurring_transfer_id")]);
    m_recurring_transfer_id_isSet = !json[QString("recurring_transfer_id")].isNull() && m_recurring_transfer_id_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_test_clock_id_isValid = ::OpenAPI::fromJsonValue(m_test_clock_id, json[QString("test_clock_id")]);
    m_test_clock_id_isSet = !json[QString("test_clock_id")].isNull() && m_test_clock_id_isValid;

    m_transfer_ids_isValid = ::OpenAPI::fromJsonValue(m_transfer_ids, json[QString("transfer_ids")]);
    m_transfer_ids_isSet = !json[QString("transfer_ids")].isNull() && m_transfer_ids_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIRecurringTransfer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecurringTransfer::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_ach_class.isSet()) {
        obj.insert(QString("ach_class"), ::OpenAPI::toJsonValue(m_ach_class));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_funding_account_id_isSet) {
        obj.insert(QString("funding_account_id"), ::OpenAPI::toJsonValue(m_funding_account_id));
    }
    if (m_iso_currency_code_isSet) {
        obj.insert(QString("iso_currency_code"), ::OpenAPI::toJsonValue(m_iso_currency_code));
    }
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_next_origination_date_isSet) {
        obj.insert(QString("next_origination_date"), ::OpenAPI::toJsonValue(m_next_origination_date));
    }
    if (m_origination_account_id_isSet) {
        obj.insert(QString("origination_account_id"), ::OpenAPI::toJsonValue(m_origination_account_id));
    }
    if (m_recurring_transfer_id_isSet) {
        obj.insert(QString("recurring_transfer_id"), ::OpenAPI::toJsonValue(m_recurring_transfer_id));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_test_clock_id_isSet) {
        obj.insert(QString("test_clock_id"), ::OpenAPI::toJsonValue(m_test_clock_id));
    }
    if (m_transfer_ids.size() > 0) {
        obj.insert(QString("transfer_ids"), ::OpenAPI::toJsonValue(m_transfer_ids));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIRecurringTransfer::getAccountId() const {
    return m_account_id;
}
void OAIRecurringTransfer::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIRecurringTransfer::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIRecurringTransfer::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIACHClass OAIRecurringTransfer::getAchClass() const {
    return m_ach_class;
}
void OAIRecurringTransfer::setAchClass(const OAIACHClass &ach_class) {
    m_ach_class = ach_class;
    m_ach_class_isSet = true;
}

bool OAIRecurringTransfer::is_ach_class_Set() const{
    return m_ach_class_isSet;
}

bool OAIRecurringTransfer::is_ach_class_Valid() const{
    return m_ach_class_isValid;
}

QString OAIRecurringTransfer::getAmount() const {
    return m_amount;
}
void OAIRecurringTransfer::setAmount(const QString &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIRecurringTransfer::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIRecurringTransfer::is_amount_Valid() const{
    return m_amount_isValid;
}

QDateTime OAIRecurringTransfer::getCreated() const {
    return m_created;
}
void OAIRecurringTransfer::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIRecurringTransfer::is_created_Set() const{
    return m_created_isSet;
}

bool OAIRecurringTransfer::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIRecurringTransfer::getDescription() const {
    return m_description;
}
void OAIRecurringTransfer::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRecurringTransfer::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRecurringTransfer::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRecurringTransfer::getFundingAccountId() const {
    return m_funding_account_id;
}
void OAIRecurringTransfer::setFundingAccountId(const QString &funding_account_id) {
    m_funding_account_id = funding_account_id;
    m_funding_account_id_isSet = true;
}

bool OAIRecurringTransfer::is_funding_account_id_Set() const{
    return m_funding_account_id_isSet;
}

bool OAIRecurringTransfer::is_funding_account_id_Valid() const{
    return m_funding_account_id_isValid;
}

QString OAIRecurringTransfer::getIsoCurrencyCode() const {
    return m_iso_currency_code;
}
void OAIRecurringTransfer::setIsoCurrencyCode(const QString &iso_currency_code) {
    m_iso_currency_code = iso_currency_code;
    m_iso_currency_code_isSet = true;
}

bool OAIRecurringTransfer::is_iso_currency_code_Set() const{
    return m_iso_currency_code_isSet;
}

bool OAIRecurringTransfer::is_iso_currency_code_Valid() const{
    return m_iso_currency_code_isValid;
}

OAITransferNetwork OAIRecurringTransfer::getNetwork() const {
    return m_network;
}
void OAIRecurringTransfer::setNetwork(const OAITransferNetwork &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIRecurringTransfer::is_network_Set() const{
    return m_network_isSet;
}

bool OAIRecurringTransfer::is_network_Valid() const{
    return m_network_isValid;
}

QDate OAIRecurringTransfer::getNextOriginationDate() const {
    return m_next_origination_date;
}
void OAIRecurringTransfer::setNextOriginationDate(const QDate &next_origination_date) {
    m_next_origination_date = next_origination_date;
    m_next_origination_date_isSet = true;
}

bool OAIRecurringTransfer::is_next_origination_date_Set() const{
    return m_next_origination_date_isSet;
}

bool OAIRecurringTransfer::is_next_origination_date_Valid() const{
    return m_next_origination_date_isValid;
}

QString OAIRecurringTransfer::getOriginationAccountId() const {
    return m_origination_account_id;
}
void OAIRecurringTransfer::setOriginationAccountId(const QString &origination_account_id) {
    m_origination_account_id = origination_account_id;
    m_origination_account_id_isSet = true;
}

bool OAIRecurringTransfer::is_origination_account_id_Set() const{
    return m_origination_account_id_isSet;
}

bool OAIRecurringTransfer::is_origination_account_id_Valid() const{
    return m_origination_account_id_isValid;
}

QString OAIRecurringTransfer::getRecurringTransferId() const {
    return m_recurring_transfer_id;
}
void OAIRecurringTransfer::setRecurringTransferId(const QString &recurring_transfer_id) {
    m_recurring_transfer_id = recurring_transfer_id;
    m_recurring_transfer_id_isSet = true;
}

bool OAIRecurringTransfer::is_recurring_transfer_id_Set() const{
    return m_recurring_transfer_id_isSet;
}

bool OAIRecurringTransfer::is_recurring_transfer_id_Valid() const{
    return m_recurring_transfer_id_isValid;
}

OAITransferRecurringSchedule OAIRecurringTransfer::getSchedule() const {
    return m_schedule;
}
void OAIRecurringTransfer::setSchedule(const OAITransferRecurringSchedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIRecurringTransfer::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIRecurringTransfer::is_schedule_Valid() const{
    return m_schedule_isValid;
}

OAITransferRecurringStatus OAIRecurringTransfer::getStatus() const {
    return m_status;
}
void OAIRecurringTransfer::setStatus(const OAITransferRecurringStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRecurringTransfer::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRecurringTransfer::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRecurringTransfer::getTestClockId() const {
    return m_test_clock_id;
}
void OAIRecurringTransfer::setTestClockId(const QString &test_clock_id) {
    m_test_clock_id = test_clock_id;
    m_test_clock_id_isSet = true;
}

bool OAIRecurringTransfer::is_test_clock_id_Set() const{
    return m_test_clock_id_isSet;
}

bool OAIRecurringTransfer::is_test_clock_id_Valid() const{
    return m_test_clock_id_isValid;
}

QList<QString> OAIRecurringTransfer::getTransferIds() const {
    return m_transfer_ids;
}
void OAIRecurringTransfer::setTransferIds(const QList<QString> &transfer_ids) {
    m_transfer_ids = transfer_ids;
    m_transfer_ids_isSet = true;
}

bool OAIRecurringTransfer::is_transfer_ids_Set() const{
    return m_transfer_ids_isSet;
}

bool OAIRecurringTransfer::is_transfer_ids_Valid() const{
    return m_transfer_ids_isValid;
}

OAITransferType OAIRecurringTransfer::getType() const {
    return m_type;
}
void OAIRecurringTransfer::setType(const OAITransferType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRecurringTransfer::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRecurringTransfer::is_type_Valid() const{
    return m_type_isValid;
}

OAITransferUserInResponse OAIRecurringTransfer::getUser() const {
    return m_user;
}
void OAIRecurringTransfer::setUser(const OAITransferUserInResponse &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIRecurringTransfer::is_user_Set() const{
    return m_user_isSet;
}

bool OAIRecurringTransfer::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIRecurringTransfer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ach_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_origination_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origination_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_transfer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_clock_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecurringTransfer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_amount_isValid && m_created_isValid && m_description_isValid && m_funding_account_id_isValid && m_iso_currency_code_isValid && m_network_isValid && m_next_origination_date_isValid && m_origination_account_id_isValid && m_recurring_transfer_id_isValid && m_schedule_isValid && m_status_isValid && m_transfer_ids_isValid && m_type_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
