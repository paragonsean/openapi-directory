/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhysicalDocumentExtractedDataAnalysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhysicalDocumentExtractedDataAnalysis::OAIPhysicalDocumentExtractedDataAnalysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhysicalDocumentExtractedDataAnalysis::OAIPhysicalDocumentExtractedDataAnalysis() {
    this->initializeModel();
}

OAIPhysicalDocumentExtractedDataAnalysis::~OAIPhysicalDocumentExtractedDataAnalysis() {}

void OAIPhysicalDocumentExtractedDataAnalysis::initializeModel() {

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_issuing_country_isSet = false;
    m_issuing_country_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIPhysicalDocumentExtractedDataAnalysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhysicalDocumentExtractedDataAnalysis::fromJsonObject(QJsonObject json) {

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("date_of_birth")]);
    m_date_of_birth_isSet = !json[QString("date_of_birth")].isNull() && m_date_of_birth_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expiration_date")]);
    m_expiration_date_isSet = !json[QString("expiration_date")].isNull() && m_expiration_date_isValid;

    m_issuing_country_isValid = ::OpenAPI::fromJsonValue(m_issuing_country, json[QString("issuing_country")]);
    m_issuing_country_isSet = !json[QString("issuing_country")].isNull() && m_issuing_country_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIPhysicalDocumentExtractedDataAnalysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhysicalDocumentExtractedDataAnalysis::asJsonObject() const {
    QJsonObject obj;
    if (m_date_of_birth.isSet()) {
        obj.insert(QString("date_of_birth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_expiration_date.isSet()) {
        obj.insert(QString("expiration_date"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_issuing_country.isSet()) {
        obj.insert(QString("issuing_country"), ::OpenAPI::toJsonValue(m_issuing_country));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIDocumentDateOfBirthMatchCode OAIPhysicalDocumentExtractedDataAnalysis::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIPhysicalDocumentExtractedDataAnalysis::setDateOfBirth(const OAIDocumentDateOfBirthMatchCode &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIPhysicalDocumentExtractedDataAnalysis::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIPhysicalDocumentExtractedDataAnalysis::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

OAIExpirationDate OAIPhysicalDocumentExtractedDataAnalysis::getExpirationDate() const {
    return m_expiration_date;
}
void OAIPhysicalDocumentExtractedDataAnalysis::setExpirationDate(const OAIExpirationDate &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIPhysicalDocumentExtractedDataAnalysis::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIPhysicalDocumentExtractedDataAnalysis::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

OAIIssuingCountry OAIPhysicalDocumentExtractedDataAnalysis::getIssuingCountry() const {
    return m_issuing_country;
}
void OAIPhysicalDocumentExtractedDataAnalysis::setIssuingCountry(const OAIIssuingCountry &issuing_country) {
    m_issuing_country = issuing_country;
    m_issuing_country_isSet = true;
}

bool OAIPhysicalDocumentExtractedDataAnalysis::is_issuing_country_Set() const{
    return m_issuing_country_isSet;
}

bool OAIPhysicalDocumentExtractedDataAnalysis::is_issuing_country_Valid() const{
    return m_issuing_country_isValid;
}

OAIDocumentNameMatchCode OAIPhysicalDocumentExtractedDataAnalysis::getName() const {
    return m_name;
}
void OAIPhysicalDocumentExtractedDataAnalysis::setName(const OAIDocumentNameMatchCode &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPhysicalDocumentExtractedDataAnalysis::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPhysicalDocumentExtractedDataAnalysis::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPhysicalDocumentExtractedDataAnalysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_of_birth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuing_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhysicalDocumentExtractedDataAnalysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_of_birth_isValid && m_expiration_date_isValid && m_issuing_country_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
