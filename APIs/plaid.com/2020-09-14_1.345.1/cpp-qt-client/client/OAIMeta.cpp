/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeta::OAIMeta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeta::OAIMeta() {
    this->initializeModel();
}

OAIMeta::~OAIMeta() {}

void OAIMeta::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_mask_isSet = false;
    m_mask_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_official_name_isSet = false;
    m_official_name_isValid = false;
}

void OAIMeta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeta::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_mask_isValid = ::OpenAPI::fromJsonValue(m_mask, json[QString("mask")]);
    m_mask_isSet = !json[QString("mask")].isNull() && m_mask_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_official_name_isValid = ::OpenAPI::fromJsonValue(m_official_name, json[QString("official_name")]);
    m_official_name_isSet = !json[QString("official_name")].isNull() && m_official_name_isValid;
}

QString OAIMeta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeta::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_mask_isSet) {
        obj.insert(QString("mask"), ::OpenAPI::toJsonValue(m_mask));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_official_name_isSet) {
        obj.insert(QString("official_name"), ::OpenAPI::toJsonValue(m_official_name));
    }
    return obj;
}

double OAIMeta::getLimit() const {
    return m_limit;
}
void OAIMeta::setLimit(const double &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIMeta::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIMeta::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIMeta::getMask() const {
    return m_mask;
}
void OAIMeta::setMask(const QString &mask) {
    m_mask = mask;
    m_mask_isSet = true;
}

bool OAIMeta::is_mask_Set() const{
    return m_mask_isSet;
}

bool OAIMeta::is_mask_Valid() const{
    return m_mask_isValid;
}

QString OAIMeta::getName() const {
    return m_name;
}
void OAIMeta::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMeta::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMeta::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMeta::getOfficialName() const {
    return m_official_name;
}
void OAIMeta::setOfficialName(const QString &official_name) {
    m_official_name = official_name;
    m_official_name_isSet = true;
}

bool OAIMeta::is_official_name_Set() const{
    return m_official_name_isSet;
}

bool OAIMeta::is_official_name_Valid() const{
    return m_official_name_isValid;
}

bool OAIMeta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_official_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeta::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_limit_isValid && m_mask_isValid && m_name_isValid && m_official_name_isValid && true;
}

} // namespace OpenAPI
