/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcessorSignalEvaluateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcessorSignalEvaluateRequest::OAIProcessorSignalEvaluateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcessorSignalEvaluateRequest::OAIProcessorSignalEvaluateRequest() {
    this->initializeModel();
}

OAIProcessorSignalEvaluateRequest::~OAIProcessorSignalEvaluateRequest() {}

void OAIProcessorSignalEvaluateRequest::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_transaction_id_isSet = false;
    m_client_transaction_id_isValid = false;

    m_client_user_id_isSet = false;
    m_client_user_id_isValid = false;

    m_default_payment_method_isSet = false;
    m_default_payment_method_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_is_recurring_isSet = false;
    m_is_recurring_isValid = false;

    m_processor_token_isSet = false;
    m_processor_token_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_present_isSet = false;
    m_user_present_isValid = false;
}

void OAIProcessorSignalEvaluateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProcessorSignalEvaluateRequest::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_client_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_client_transaction_id, json[QString("client_transaction_id")]);
    m_client_transaction_id_isSet = !json[QString("client_transaction_id")].isNull() && m_client_transaction_id_isValid;

    m_client_user_id_isValid = ::OpenAPI::fromJsonValue(m_client_user_id, json[QString("client_user_id")]);
    m_client_user_id_isSet = !json[QString("client_user_id")].isNull() && m_client_user_id_isValid;

    m_default_payment_method_isValid = ::OpenAPI::fromJsonValue(m_default_payment_method, json[QString("default_payment_method")]);
    m_default_payment_method_isSet = !json[QString("default_payment_method")].isNull() && m_default_payment_method_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_is_recurring_isValid = ::OpenAPI::fromJsonValue(m_is_recurring, json[QString("is_recurring")]);
    m_is_recurring_isSet = !json[QString("is_recurring")].isNull() && m_is_recurring_isValid;

    m_processor_token_isValid = ::OpenAPI::fromJsonValue(m_processor_token, json[QString("processor_token")]);
    m_processor_token_isSet = !json[QString("processor_token")].isNull() && m_processor_token_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_present_isValid = ::OpenAPI::fromJsonValue(m_user_present, json[QString("user_present")]);
    m_user_present_isSet = !json[QString("user_present")].isNull() && m_user_present_isValid;
}

QString OAIProcessorSignalEvaluateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProcessorSignalEvaluateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_transaction_id_isSet) {
        obj.insert(QString("client_transaction_id"), ::OpenAPI::toJsonValue(m_client_transaction_id));
    }
    if (m_client_user_id_isSet) {
        obj.insert(QString("client_user_id"), ::OpenAPI::toJsonValue(m_client_user_id));
    }
    if (m_default_payment_method_isSet) {
        obj.insert(QString("default_payment_method"), ::OpenAPI::toJsonValue(m_default_payment_method));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_is_recurring_isSet) {
        obj.insert(QString("is_recurring"), ::OpenAPI::toJsonValue(m_is_recurring));
    }
    if (m_processor_token_isSet) {
        obj.insert(QString("processor_token"), ::OpenAPI::toJsonValue(m_processor_token));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_present_isSet) {
        obj.insert(QString("user_present"), ::OpenAPI::toJsonValue(m_user_present));
    }
    return obj;
}

double OAIProcessorSignalEvaluateRequest::getAmount() const {
    return m_amount;
}
void OAIProcessorSignalEvaluateRequest::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIProcessorSignalEvaluateRequest::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIProcessorSignalEvaluateRequest::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIProcessorSignalEvaluateRequest::getClientId() const {
    return m_client_id;
}
void OAIProcessorSignalEvaluateRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIProcessorSignalEvaluateRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIProcessorSignalEvaluateRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIProcessorSignalEvaluateRequest::getClientTransactionId() const {
    return m_client_transaction_id;
}
void OAIProcessorSignalEvaluateRequest::setClientTransactionId(const QString &client_transaction_id) {
    m_client_transaction_id = client_transaction_id;
    m_client_transaction_id_isSet = true;
}

bool OAIProcessorSignalEvaluateRequest::is_client_transaction_id_Set() const{
    return m_client_transaction_id_isSet;
}

bool OAIProcessorSignalEvaluateRequest::is_client_transaction_id_Valid() const{
    return m_client_transaction_id_isValid;
}

QString OAIProcessorSignalEvaluateRequest::getClientUserId() const {
    return m_client_user_id;
}
void OAIProcessorSignalEvaluateRequest::setClientUserId(const QString &client_user_id) {
    m_client_user_id = client_user_id;
    m_client_user_id_isSet = true;
}

bool OAIProcessorSignalEvaluateRequest::is_client_user_id_Set() const{
    return m_client_user_id_isSet;
}

bool OAIProcessorSignalEvaluateRequest::is_client_user_id_Valid() const{
    return m_client_user_id_isValid;
}

QString OAIProcessorSignalEvaluateRequest::getDefaultPaymentMethod() const {
    return m_default_payment_method;
}
void OAIProcessorSignalEvaluateRequest::setDefaultPaymentMethod(const QString &default_payment_method) {
    m_default_payment_method = default_payment_method;
    m_default_payment_method_isSet = true;
}

bool OAIProcessorSignalEvaluateRequest::is_default_payment_method_Set() const{
    return m_default_payment_method_isSet;
}

bool OAIProcessorSignalEvaluateRequest::is_default_payment_method_Valid() const{
    return m_default_payment_method_isValid;
}

OAISignalDevice OAIProcessorSignalEvaluateRequest::getDevice() const {
    return m_device;
}
void OAIProcessorSignalEvaluateRequest::setDevice(const OAISignalDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIProcessorSignalEvaluateRequest::is_device_Set() const{
    return m_device_isSet;
}

bool OAIProcessorSignalEvaluateRequest::is_device_Valid() const{
    return m_device_isValid;
}

bool OAIProcessorSignalEvaluateRequest::isIsRecurring() const {
    return m_is_recurring;
}
void OAIProcessorSignalEvaluateRequest::setIsRecurring(const bool &is_recurring) {
    m_is_recurring = is_recurring;
    m_is_recurring_isSet = true;
}

bool OAIProcessorSignalEvaluateRequest::is_is_recurring_Set() const{
    return m_is_recurring_isSet;
}

bool OAIProcessorSignalEvaluateRequest::is_is_recurring_Valid() const{
    return m_is_recurring_isValid;
}

QString OAIProcessorSignalEvaluateRequest::getProcessorToken() const {
    return m_processor_token;
}
void OAIProcessorSignalEvaluateRequest::setProcessorToken(const QString &processor_token) {
    m_processor_token = processor_token;
    m_processor_token_isSet = true;
}

bool OAIProcessorSignalEvaluateRequest::is_processor_token_Set() const{
    return m_processor_token_isSet;
}

bool OAIProcessorSignalEvaluateRequest::is_processor_token_Valid() const{
    return m_processor_token_isValid;
}

QString OAIProcessorSignalEvaluateRequest::getSecret() const {
    return m_secret;
}
void OAIProcessorSignalEvaluateRequest::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIProcessorSignalEvaluateRequest::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIProcessorSignalEvaluateRequest::is_secret_Valid() const{
    return m_secret_isValid;
}

OAISignalUser OAIProcessorSignalEvaluateRequest::getUser() const {
    return m_user;
}
void OAIProcessorSignalEvaluateRequest::setUser(const OAISignalUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIProcessorSignalEvaluateRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIProcessorSignalEvaluateRequest::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIProcessorSignalEvaluateRequest::isUserPresent() const {
    return m_user_present;
}
void OAIProcessorSignalEvaluateRequest::setUserPresent(const bool &user_present) {
    m_user_present = user_present;
    m_user_present_isSet = true;
}

bool OAIProcessorSignalEvaluateRequest::is_user_present_Set() const{
    return m_user_present_isSet;
}

bool OAIProcessorSignalEvaluateRequest::is_user_present_Valid() const{
    return m_user_present_isValid;
}

bool OAIProcessorSignalEvaluateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_recurring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processor_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_present_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProcessorSignalEvaluateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_client_transaction_id_isValid && m_processor_token_isValid && true;
}

} // namespace OpenAPI
