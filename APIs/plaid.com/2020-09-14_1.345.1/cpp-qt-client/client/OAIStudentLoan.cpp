/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStudentLoan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStudentLoan::OAIStudentLoan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStudentLoan::OAIStudentLoan() {
    this->initializeModel();
}

OAIStudentLoan::~OAIStudentLoan() {}

void OAIStudentLoan::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_disbursement_dates_isSet = false;
    m_disbursement_dates_isValid = false;

    m_expected_payoff_date_isSet = false;
    m_expected_payoff_date_isValid = false;

    m_guarantor_isSet = false;
    m_guarantor_isValid = false;

    m_interest_rate_percentage_isSet = false;
    m_interest_rate_percentage_isValid = false;

    m_is_overdue_isSet = false;
    m_is_overdue_isValid = false;

    m_last_payment_amount_isSet = false;
    m_last_payment_amount_isValid = false;

    m_last_payment_date_isSet = false;
    m_last_payment_date_isValid = false;

    m_last_statement_issue_date_isSet = false;
    m_last_statement_issue_date_isValid = false;

    m_loan_name_isSet = false;
    m_loan_name_isValid = false;

    m_loan_status_isSet = false;
    m_loan_status_isValid = false;

    m_minimum_payment_amount_isSet = false;
    m_minimum_payment_amount_isValid = false;

    m_next_payment_due_date_isSet = false;
    m_next_payment_due_date_isValid = false;

    m_origination_date_isSet = false;
    m_origination_date_isValid = false;

    m_origination_principal_amount_isSet = false;
    m_origination_principal_amount_isValid = false;

    m_outstanding_interest_amount_isSet = false;
    m_outstanding_interest_amount_isValid = false;

    m_payment_reference_number_isSet = false;
    m_payment_reference_number_isValid = false;

    m_pslf_status_isSet = false;
    m_pslf_status_isValid = false;

    m_repayment_plan_isSet = false;
    m_repayment_plan_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;

    m_servicer_address_isSet = false;
    m_servicer_address_isValid = false;

    m_ytd_interest_paid_isSet = false;
    m_ytd_interest_paid_isValid = false;

    m_ytd_principal_paid_isSet = false;
    m_ytd_principal_paid_isValid = false;
}

void OAIStudentLoan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStudentLoan::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("account_number")]);
    m_account_number_isSet = !json[QString("account_number")].isNull() && m_account_number_isValid;

    m_disbursement_dates_isValid = ::OpenAPI::fromJsonValue(m_disbursement_dates, json[QString("disbursement_dates")]);
    m_disbursement_dates_isSet = !json[QString("disbursement_dates")].isNull() && m_disbursement_dates_isValid;

    m_expected_payoff_date_isValid = ::OpenAPI::fromJsonValue(m_expected_payoff_date, json[QString("expected_payoff_date")]);
    m_expected_payoff_date_isSet = !json[QString("expected_payoff_date")].isNull() && m_expected_payoff_date_isValid;

    m_guarantor_isValid = ::OpenAPI::fromJsonValue(m_guarantor, json[QString("guarantor")]);
    m_guarantor_isSet = !json[QString("guarantor")].isNull() && m_guarantor_isValid;

    m_interest_rate_percentage_isValid = ::OpenAPI::fromJsonValue(m_interest_rate_percentage, json[QString("interest_rate_percentage")]);
    m_interest_rate_percentage_isSet = !json[QString("interest_rate_percentage")].isNull() && m_interest_rate_percentage_isValid;

    m_is_overdue_isValid = ::OpenAPI::fromJsonValue(m_is_overdue, json[QString("is_overdue")]);
    m_is_overdue_isSet = !json[QString("is_overdue")].isNull() && m_is_overdue_isValid;

    m_last_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_last_payment_amount, json[QString("last_payment_amount")]);
    m_last_payment_amount_isSet = !json[QString("last_payment_amount")].isNull() && m_last_payment_amount_isValid;

    m_last_payment_date_isValid = ::OpenAPI::fromJsonValue(m_last_payment_date, json[QString("last_payment_date")]);
    m_last_payment_date_isSet = !json[QString("last_payment_date")].isNull() && m_last_payment_date_isValid;

    m_last_statement_issue_date_isValid = ::OpenAPI::fromJsonValue(m_last_statement_issue_date, json[QString("last_statement_issue_date")]);
    m_last_statement_issue_date_isSet = !json[QString("last_statement_issue_date")].isNull() && m_last_statement_issue_date_isValid;

    m_loan_name_isValid = ::OpenAPI::fromJsonValue(m_loan_name, json[QString("loan_name")]);
    m_loan_name_isSet = !json[QString("loan_name")].isNull() && m_loan_name_isValid;

    m_loan_status_isValid = ::OpenAPI::fromJsonValue(m_loan_status, json[QString("loan_status")]);
    m_loan_status_isSet = !json[QString("loan_status")].isNull() && m_loan_status_isValid;

    m_minimum_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_minimum_payment_amount, json[QString("minimum_payment_amount")]);
    m_minimum_payment_amount_isSet = !json[QString("minimum_payment_amount")].isNull() && m_minimum_payment_amount_isValid;

    m_next_payment_due_date_isValid = ::OpenAPI::fromJsonValue(m_next_payment_due_date, json[QString("next_payment_due_date")]);
    m_next_payment_due_date_isSet = !json[QString("next_payment_due_date")].isNull() && m_next_payment_due_date_isValid;

    m_origination_date_isValid = ::OpenAPI::fromJsonValue(m_origination_date, json[QString("origination_date")]);
    m_origination_date_isSet = !json[QString("origination_date")].isNull() && m_origination_date_isValid;

    m_origination_principal_amount_isValid = ::OpenAPI::fromJsonValue(m_origination_principal_amount, json[QString("origination_principal_amount")]);
    m_origination_principal_amount_isSet = !json[QString("origination_principal_amount")].isNull() && m_origination_principal_amount_isValid;

    m_outstanding_interest_amount_isValid = ::OpenAPI::fromJsonValue(m_outstanding_interest_amount, json[QString("outstanding_interest_amount")]);
    m_outstanding_interest_amount_isSet = !json[QString("outstanding_interest_amount")].isNull() && m_outstanding_interest_amount_isValid;

    m_payment_reference_number_isValid = ::OpenAPI::fromJsonValue(m_payment_reference_number, json[QString("payment_reference_number")]);
    m_payment_reference_number_isSet = !json[QString("payment_reference_number")].isNull() && m_payment_reference_number_isValid;

    m_pslf_status_isValid = ::OpenAPI::fromJsonValue(m_pslf_status, json[QString("pslf_status")]);
    m_pslf_status_isSet = !json[QString("pslf_status")].isNull() && m_pslf_status_isValid;

    m_repayment_plan_isValid = ::OpenAPI::fromJsonValue(m_repayment_plan, json[QString("repayment_plan")]);
    m_repayment_plan_isSet = !json[QString("repayment_plan")].isNull() && m_repayment_plan_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("sequence_number")]);
    m_sequence_number_isSet = !json[QString("sequence_number")].isNull() && m_sequence_number_isValid;

    m_servicer_address_isValid = ::OpenAPI::fromJsonValue(m_servicer_address, json[QString("servicer_address")]);
    m_servicer_address_isSet = !json[QString("servicer_address")].isNull() && m_servicer_address_isValid;

    m_ytd_interest_paid_isValid = ::OpenAPI::fromJsonValue(m_ytd_interest_paid, json[QString("ytd_interest_paid")]);
    m_ytd_interest_paid_isSet = !json[QString("ytd_interest_paid")].isNull() && m_ytd_interest_paid_isValid;

    m_ytd_principal_paid_isValid = ::OpenAPI::fromJsonValue(m_ytd_principal_paid, json[QString("ytd_principal_paid")]);
    m_ytd_principal_paid_isSet = !json[QString("ytd_principal_paid")].isNull() && m_ytd_principal_paid_isValid;
}

QString OAIStudentLoan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStudentLoan::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_account_number_isSet) {
        obj.insert(QString("account_number"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_disbursement_dates.size() > 0) {
        obj.insert(QString("disbursement_dates"), ::OpenAPI::toJsonValue(m_disbursement_dates));
    }
    if (m_expected_payoff_date_isSet) {
        obj.insert(QString("expected_payoff_date"), ::OpenAPI::toJsonValue(m_expected_payoff_date));
    }
    if (m_guarantor_isSet) {
        obj.insert(QString("guarantor"), ::OpenAPI::toJsonValue(m_guarantor));
    }
    if (m_interest_rate_percentage_isSet) {
        obj.insert(QString("interest_rate_percentage"), ::OpenAPI::toJsonValue(m_interest_rate_percentage));
    }
    if (m_is_overdue_isSet) {
        obj.insert(QString("is_overdue"), ::OpenAPI::toJsonValue(m_is_overdue));
    }
    if (m_last_payment_amount_isSet) {
        obj.insert(QString("last_payment_amount"), ::OpenAPI::toJsonValue(m_last_payment_amount));
    }
    if (m_last_payment_date_isSet) {
        obj.insert(QString("last_payment_date"), ::OpenAPI::toJsonValue(m_last_payment_date));
    }
    if (m_last_statement_issue_date_isSet) {
        obj.insert(QString("last_statement_issue_date"), ::OpenAPI::toJsonValue(m_last_statement_issue_date));
    }
    if (m_loan_name_isSet) {
        obj.insert(QString("loan_name"), ::OpenAPI::toJsonValue(m_loan_name));
    }
    if (m_loan_status.isSet()) {
        obj.insert(QString("loan_status"), ::OpenAPI::toJsonValue(m_loan_status));
    }
    if (m_minimum_payment_amount_isSet) {
        obj.insert(QString("minimum_payment_amount"), ::OpenAPI::toJsonValue(m_minimum_payment_amount));
    }
    if (m_next_payment_due_date_isSet) {
        obj.insert(QString("next_payment_due_date"), ::OpenAPI::toJsonValue(m_next_payment_due_date));
    }
    if (m_origination_date_isSet) {
        obj.insert(QString("origination_date"), ::OpenAPI::toJsonValue(m_origination_date));
    }
    if (m_origination_principal_amount_isSet) {
        obj.insert(QString("origination_principal_amount"), ::OpenAPI::toJsonValue(m_origination_principal_amount));
    }
    if (m_outstanding_interest_amount_isSet) {
        obj.insert(QString("outstanding_interest_amount"), ::OpenAPI::toJsonValue(m_outstanding_interest_amount));
    }
    if (m_payment_reference_number_isSet) {
        obj.insert(QString("payment_reference_number"), ::OpenAPI::toJsonValue(m_payment_reference_number));
    }
    if (m_pslf_status.isSet()) {
        obj.insert(QString("pslf_status"), ::OpenAPI::toJsonValue(m_pslf_status));
    }
    if (m_repayment_plan.isSet()) {
        obj.insert(QString("repayment_plan"), ::OpenAPI::toJsonValue(m_repayment_plan));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("sequence_number"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    if (m_servicer_address.isSet()) {
        obj.insert(QString("servicer_address"), ::OpenAPI::toJsonValue(m_servicer_address));
    }
    if (m_ytd_interest_paid_isSet) {
        obj.insert(QString("ytd_interest_paid"), ::OpenAPI::toJsonValue(m_ytd_interest_paid));
    }
    if (m_ytd_principal_paid_isSet) {
        obj.insert(QString("ytd_principal_paid"), ::OpenAPI::toJsonValue(m_ytd_principal_paid));
    }
    return obj;
}

QString OAIStudentLoan::getAccountId() const {
    return m_account_id;
}
void OAIStudentLoan::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIStudentLoan::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIStudentLoan::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIStudentLoan::getAccountNumber() const {
    return m_account_number;
}
void OAIStudentLoan::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIStudentLoan::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIStudentLoan::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QList<QDate> OAIStudentLoan::getDisbursementDates() const {
    return m_disbursement_dates;
}
void OAIStudentLoan::setDisbursementDates(const QList<QDate> &disbursement_dates) {
    m_disbursement_dates = disbursement_dates;
    m_disbursement_dates_isSet = true;
}

bool OAIStudentLoan::is_disbursement_dates_Set() const{
    return m_disbursement_dates_isSet;
}

bool OAIStudentLoan::is_disbursement_dates_Valid() const{
    return m_disbursement_dates_isValid;
}

QDate OAIStudentLoan::getExpectedPayoffDate() const {
    return m_expected_payoff_date;
}
void OAIStudentLoan::setExpectedPayoffDate(const QDate &expected_payoff_date) {
    m_expected_payoff_date = expected_payoff_date;
    m_expected_payoff_date_isSet = true;
}

bool OAIStudentLoan::is_expected_payoff_date_Set() const{
    return m_expected_payoff_date_isSet;
}

bool OAIStudentLoan::is_expected_payoff_date_Valid() const{
    return m_expected_payoff_date_isValid;
}

QString OAIStudentLoan::getGuarantor() const {
    return m_guarantor;
}
void OAIStudentLoan::setGuarantor(const QString &guarantor) {
    m_guarantor = guarantor;
    m_guarantor_isSet = true;
}

bool OAIStudentLoan::is_guarantor_Set() const{
    return m_guarantor_isSet;
}

bool OAIStudentLoan::is_guarantor_Valid() const{
    return m_guarantor_isValid;
}

double OAIStudentLoan::getInterestRatePercentage() const {
    return m_interest_rate_percentage;
}
void OAIStudentLoan::setInterestRatePercentage(const double &interest_rate_percentage) {
    m_interest_rate_percentage = interest_rate_percentage;
    m_interest_rate_percentage_isSet = true;
}

bool OAIStudentLoan::is_interest_rate_percentage_Set() const{
    return m_interest_rate_percentage_isSet;
}

bool OAIStudentLoan::is_interest_rate_percentage_Valid() const{
    return m_interest_rate_percentage_isValid;
}

bool OAIStudentLoan::isIsOverdue() const {
    return m_is_overdue;
}
void OAIStudentLoan::setIsOverdue(const bool &is_overdue) {
    m_is_overdue = is_overdue;
    m_is_overdue_isSet = true;
}

bool OAIStudentLoan::is_is_overdue_Set() const{
    return m_is_overdue_isSet;
}

bool OAIStudentLoan::is_is_overdue_Valid() const{
    return m_is_overdue_isValid;
}

double OAIStudentLoan::getLastPaymentAmount() const {
    return m_last_payment_amount;
}
void OAIStudentLoan::setLastPaymentAmount(const double &last_payment_amount) {
    m_last_payment_amount = last_payment_amount;
    m_last_payment_amount_isSet = true;
}

bool OAIStudentLoan::is_last_payment_amount_Set() const{
    return m_last_payment_amount_isSet;
}

bool OAIStudentLoan::is_last_payment_amount_Valid() const{
    return m_last_payment_amount_isValid;
}

QDate OAIStudentLoan::getLastPaymentDate() const {
    return m_last_payment_date;
}
void OAIStudentLoan::setLastPaymentDate(const QDate &last_payment_date) {
    m_last_payment_date = last_payment_date;
    m_last_payment_date_isSet = true;
}

bool OAIStudentLoan::is_last_payment_date_Set() const{
    return m_last_payment_date_isSet;
}

bool OAIStudentLoan::is_last_payment_date_Valid() const{
    return m_last_payment_date_isValid;
}

QDate OAIStudentLoan::getLastStatementIssueDate() const {
    return m_last_statement_issue_date;
}
void OAIStudentLoan::setLastStatementIssueDate(const QDate &last_statement_issue_date) {
    m_last_statement_issue_date = last_statement_issue_date;
    m_last_statement_issue_date_isSet = true;
}

bool OAIStudentLoan::is_last_statement_issue_date_Set() const{
    return m_last_statement_issue_date_isSet;
}

bool OAIStudentLoan::is_last_statement_issue_date_Valid() const{
    return m_last_statement_issue_date_isValid;
}

QString OAIStudentLoan::getLoanName() const {
    return m_loan_name;
}
void OAIStudentLoan::setLoanName(const QString &loan_name) {
    m_loan_name = loan_name;
    m_loan_name_isSet = true;
}

bool OAIStudentLoan::is_loan_name_Set() const{
    return m_loan_name_isSet;
}

bool OAIStudentLoan::is_loan_name_Valid() const{
    return m_loan_name_isValid;
}

OAIStudentLoanStatus OAIStudentLoan::getLoanStatus() const {
    return m_loan_status;
}
void OAIStudentLoan::setLoanStatus(const OAIStudentLoanStatus &loan_status) {
    m_loan_status = loan_status;
    m_loan_status_isSet = true;
}

bool OAIStudentLoan::is_loan_status_Set() const{
    return m_loan_status_isSet;
}

bool OAIStudentLoan::is_loan_status_Valid() const{
    return m_loan_status_isValid;
}

double OAIStudentLoan::getMinimumPaymentAmount() const {
    return m_minimum_payment_amount;
}
void OAIStudentLoan::setMinimumPaymentAmount(const double &minimum_payment_amount) {
    m_minimum_payment_amount = minimum_payment_amount;
    m_minimum_payment_amount_isSet = true;
}

bool OAIStudentLoan::is_minimum_payment_amount_Set() const{
    return m_minimum_payment_amount_isSet;
}

bool OAIStudentLoan::is_minimum_payment_amount_Valid() const{
    return m_minimum_payment_amount_isValid;
}

QDate OAIStudentLoan::getNextPaymentDueDate() const {
    return m_next_payment_due_date;
}
void OAIStudentLoan::setNextPaymentDueDate(const QDate &next_payment_due_date) {
    m_next_payment_due_date = next_payment_due_date;
    m_next_payment_due_date_isSet = true;
}

bool OAIStudentLoan::is_next_payment_due_date_Set() const{
    return m_next_payment_due_date_isSet;
}

bool OAIStudentLoan::is_next_payment_due_date_Valid() const{
    return m_next_payment_due_date_isValid;
}

QDate OAIStudentLoan::getOriginationDate() const {
    return m_origination_date;
}
void OAIStudentLoan::setOriginationDate(const QDate &origination_date) {
    m_origination_date = origination_date;
    m_origination_date_isSet = true;
}

bool OAIStudentLoan::is_origination_date_Set() const{
    return m_origination_date_isSet;
}

bool OAIStudentLoan::is_origination_date_Valid() const{
    return m_origination_date_isValid;
}

double OAIStudentLoan::getOriginationPrincipalAmount() const {
    return m_origination_principal_amount;
}
void OAIStudentLoan::setOriginationPrincipalAmount(const double &origination_principal_amount) {
    m_origination_principal_amount = origination_principal_amount;
    m_origination_principal_amount_isSet = true;
}

bool OAIStudentLoan::is_origination_principal_amount_Set() const{
    return m_origination_principal_amount_isSet;
}

bool OAIStudentLoan::is_origination_principal_amount_Valid() const{
    return m_origination_principal_amount_isValid;
}

double OAIStudentLoan::getOutstandingInterestAmount() const {
    return m_outstanding_interest_amount;
}
void OAIStudentLoan::setOutstandingInterestAmount(const double &outstanding_interest_amount) {
    m_outstanding_interest_amount = outstanding_interest_amount;
    m_outstanding_interest_amount_isSet = true;
}

bool OAIStudentLoan::is_outstanding_interest_amount_Set() const{
    return m_outstanding_interest_amount_isSet;
}

bool OAIStudentLoan::is_outstanding_interest_amount_Valid() const{
    return m_outstanding_interest_amount_isValid;
}

QString OAIStudentLoan::getPaymentReferenceNumber() const {
    return m_payment_reference_number;
}
void OAIStudentLoan::setPaymentReferenceNumber(const QString &payment_reference_number) {
    m_payment_reference_number = payment_reference_number;
    m_payment_reference_number_isSet = true;
}

bool OAIStudentLoan::is_payment_reference_number_Set() const{
    return m_payment_reference_number_isSet;
}

bool OAIStudentLoan::is_payment_reference_number_Valid() const{
    return m_payment_reference_number_isValid;
}

OAIPSLFStatus OAIStudentLoan::getPslfStatus() const {
    return m_pslf_status;
}
void OAIStudentLoan::setPslfStatus(const OAIPSLFStatus &pslf_status) {
    m_pslf_status = pslf_status;
    m_pslf_status_isSet = true;
}

bool OAIStudentLoan::is_pslf_status_Set() const{
    return m_pslf_status_isSet;
}

bool OAIStudentLoan::is_pslf_status_Valid() const{
    return m_pslf_status_isValid;
}

OAIStudentRepaymentPlan OAIStudentLoan::getRepaymentPlan() const {
    return m_repayment_plan;
}
void OAIStudentLoan::setRepaymentPlan(const OAIStudentRepaymentPlan &repayment_plan) {
    m_repayment_plan = repayment_plan;
    m_repayment_plan_isSet = true;
}

bool OAIStudentLoan::is_repayment_plan_Set() const{
    return m_repayment_plan_isSet;
}

bool OAIStudentLoan::is_repayment_plan_Valid() const{
    return m_repayment_plan_isValid;
}

QString OAIStudentLoan::getSequenceNumber() const {
    return m_sequence_number;
}
void OAIStudentLoan::setSequenceNumber(const QString &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAIStudentLoan::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAIStudentLoan::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

OAIServicerAddressData OAIStudentLoan::getServicerAddress() const {
    return m_servicer_address;
}
void OAIStudentLoan::setServicerAddress(const OAIServicerAddressData &servicer_address) {
    m_servicer_address = servicer_address;
    m_servicer_address_isSet = true;
}

bool OAIStudentLoan::is_servicer_address_Set() const{
    return m_servicer_address_isSet;
}

bool OAIStudentLoan::is_servicer_address_Valid() const{
    return m_servicer_address_isValid;
}

double OAIStudentLoan::getYtdInterestPaid() const {
    return m_ytd_interest_paid;
}
void OAIStudentLoan::setYtdInterestPaid(const double &ytd_interest_paid) {
    m_ytd_interest_paid = ytd_interest_paid;
    m_ytd_interest_paid_isSet = true;
}

bool OAIStudentLoan::is_ytd_interest_paid_Set() const{
    return m_ytd_interest_paid_isSet;
}

bool OAIStudentLoan::is_ytd_interest_paid_Valid() const{
    return m_ytd_interest_paid_isValid;
}

double OAIStudentLoan::getYtdPrincipalPaid() const {
    return m_ytd_principal_paid;
}
void OAIStudentLoan::setYtdPrincipalPaid(const double &ytd_principal_paid) {
    m_ytd_principal_paid = ytd_principal_paid;
    m_ytd_principal_paid_isSet = true;
}

bool OAIStudentLoan::is_ytd_principal_paid_Set() const{
    return m_ytd_principal_paid_isSet;
}

bool OAIStudentLoan::is_ytd_principal_paid_Valid() const{
    return m_ytd_principal_paid_isValid;
}

bool OAIStudentLoan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disbursement_dates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_payoff_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guarantor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_rate_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_overdue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_payment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_statement_issue_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_payment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_payment_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origination_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origination_principal_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outstanding_interest_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pslf_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repayment_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_servicer_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ytd_interest_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ytd_principal_paid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStudentLoan::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_account_number_isValid && m_disbursement_dates_isValid && m_expected_payoff_date_isValid && m_guarantor_isValid && m_interest_rate_percentage_isValid && m_is_overdue_isValid && m_last_payment_amount_isValid && m_last_payment_date_isValid && m_last_statement_issue_date_isValid && m_loan_name_isValid && m_loan_status_isValid && m_minimum_payment_amount_isValid && m_next_payment_due_date_isValid && m_origination_date_isValid && m_origination_principal_amount_isValid && m_outstanding_interest_amount_isValid && m_payment_reference_number_isValid && m_pslf_status_isValid && m_repayment_plan_isValid && m_sequence_number_isValid && m_servicer_address_isValid && m_ytd_interest_paid_isValid && m_ytd_principal_paid_isValid && true;
}

} // namespace OpenAPI
