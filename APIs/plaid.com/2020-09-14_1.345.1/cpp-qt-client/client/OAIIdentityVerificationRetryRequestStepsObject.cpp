/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityVerificationRetryRequestStepsObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityVerificationRetryRequestStepsObject::OAIIdentityVerificationRetryRequestStepsObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityVerificationRetryRequestStepsObject::OAIIdentityVerificationRetryRequestStepsObject() {
    this->initializeModel();
}

OAIIdentityVerificationRetryRequestStepsObject::~OAIIdentityVerificationRetryRequestStepsObject() {}

void OAIIdentityVerificationRetryRequestStepsObject::initializeModel() {

    m_documentary_verification_isSet = false;
    m_documentary_verification_isValid = false;

    m_kyc_check_isSet = false;
    m_kyc_check_isValid = false;

    m_selfie_check_isSet = false;
    m_selfie_check_isValid = false;

    m_verify_sms_isSet = false;
    m_verify_sms_isValid = false;
}

void OAIIdentityVerificationRetryRequestStepsObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityVerificationRetryRequestStepsObject::fromJsonObject(QJsonObject json) {

    m_documentary_verification_isValid = ::OpenAPI::fromJsonValue(m_documentary_verification, json[QString("documentary_verification")]);
    m_documentary_verification_isSet = !json[QString("documentary_verification")].isNull() && m_documentary_verification_isValid;

    m_kyc_check_isValid = ::OpenAPI::fromJsonValue(m_kyc_check, json[QString("kyc_check")]);
    m_kyc_check_isSet = !json[QString("kyc_check")].isNull() && m_kyc_check_isValid;

    m_selfie_check_isValid = ::OpenAPI::fromJsonValue(m_selfie_check, json[QString("selfie_check")]);
    m_selfie_check_isSet = !json[QString("selfie_check")].isNull() && m_selfie_check_isValid;

    m_verify_sms_isValid = ::OpenAPI::fromJsonValue(m_verify_sms, json[QString("verify_sms")]);
    m_verify_sms_isSet = !json[QString("verify_sms")].isNull() && m_verify_sms_isValid;
}

QString OAIIdentityVerificationRetryRequestStepsObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityVerificationRetryRequestStepsObject::asJsonObject() const {
    QJsonObject obj;
    if (m_documentary_verification_isSet) {
        obj.insert(QString("documentary_verification"), ::OpenAPI::toJsonValue(m_documentary_verification));
    }
    if (m_kyc_check_isSet) {
        obj.insert(QString("kyc_check"), ::OpenAPI::toJsonValue(m_kyc_check));
    }
    if (m_selfie_check_isSet) {
        obj.insert(QString("selfie_check"), ::OpenAPI::toJsonValue(m_selfie_check));
    }
    if (m_verify_sms_isSet) {
        obj.insert(QString("verify_sms"), ::OpenAPI::toJsonValue(m_verify_sms));
    }
    return obj;
}

bool OAIIdentityVerificationRetryRequestStepsObject::isDocumentaryVerification() const {
    return m_documentary_verification;
}
void OAIIdentityVerificationRetryRequestStepsObject::setDocumentaryVerification(const bool &documentary_verification) {
    m_documentary_verification = documentary_verification;
    m_documentary_verification_isSet = true;
}

bool OAIIdentityVerificationRetryRequestStepsObject::is_documentary_verification_Set() const{
    return m_documentary_verification_isSet;
}

bool OAIIdentityVerificationRetryRequestStepsObject::is_documentary_verification_Valid() const{
    return m_documentary_verification_isValid;
}

bool OAIIdentityVerificationRetryRequestStepsObject::isKycCheck() const {
    return m_kyc_check;
}
void OAIIdentityVerificationRetryRequestStepsObject::setKycCheck(const bool &kyc_check) {
    m_kyc_check = kyc_check;
    m_kyc_check_isSet = true;
}

bool OAIIdentityVerificationRetryRequestStepsObject::is_kyc_check_Set() const{
    return m_kyc_check_isSet;
}

bool OAIIdentityVerificationRetryRequestStepsObject::is_kyc_check_Valid() const{
    return m_kyc_check_isValid;
}

bool OAIIdentityVerificationRetryRequestStepsObject::isSelfieCheck() const {
    return m_selfie_check;
}
void OAIIdentityVerificationRetryRequestStepsObject::setSelfieCheck(const bool &selfie_check) {
    m_selfie_check = selfie_check;
    m_selfie_check_isSet = true;
}

bool OAIIdentityVerificationRetryRequestStepsObject::is_selfie_check_Set() const{
    return m_selfie_check_isSet;
}

bool OAIIdentityVerificationRetryRequestStepsObject::is_selfie_check_Valid() const{
    return m_selfie_check_isValid;
}

bool OAIIdentityVerificationRetryRequestStepsObject::isVerifySms() const {
    return m_verify_sms;
}
void OAIIdentityVerificationRetryRequestStepsObject::setVerifySms(const bool &verify_sms) {
    m_verify_sms = verify_sms;
    m_verify_sms_isSet = true;
}

bool OAIIdentityVerificationRetryRequestStepsObject::is_verify_sms_Set() const{
    return m_verify_sms_isSet;
}

bool OAIIdentityVerificationRetryRequestStepsObject::is_verify_sms_Valid() const{
    return m_verify_sms_isValid;
}

bool OAIIdentityVerificationRetryRequestStepsObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documentary_verification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kyc_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selfie_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_sms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityVerificationRetryRequestStepsObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_documentary_verification_isValid && m_kyc_check_isValid && m_selfie_check_isValid && m_verify_sms_isValid && true;
}

} // namespace OpenAPI
