/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJWKPublicKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJWKPublicKey::OAIJWKPublicKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJWKPublicKey::OAIJWKPublicKey() {
    this->initializeModel();
}

OAIJWKPublicKey::~OAIJWKPublicKey() {}

void OAIJWKPublicKey::initializeModel() {

    m_alg_isSet = false;
    m_alg_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_crv_isSet = false;
    m_crv_isValid = false;

    m_expired_at_isSet = false;
    m_expired_at_isValid = false;

    m_kid_isSet = false;
    m_kid_isValid = false;

    m_kty_isSet = false;
    m_kty_isValid = false;

    m_use_isSet = false;
    m_use_isValid = false;

    m_x_isSet = false;
    m_x_isValid = false;

    m_y_isSet = false;
    m_y_isValid = false;
}

void OAIJWKPublicKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJWKPublicKey::fromJsonObject(QJsonObject json) {

    m_alg_isValid = ::OpenAPI::fromJsonValue(m_alg, json[QString("alg")]);
    m_alg_isSet = !json[QString("alg")].isNull() && m_alg_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_crv_isValid = ::OpenAPI::fromJsonValue(m_crv, json[QString("crv")]);
    m_crv_isSet = !json[QString("crv")].isNull() && m_crv_isValid;

    m_expired_at_isValid = ::OpenAPI::fromJsonValue(m_expired_at, json[QString("expired_at")]);
    m_expired_at_isSet = !json[QString("expired_at")].isNull() && m_expired_at_isValid;

    m_kid_isValid = ::OpenAPI::fromJsonValue(m_kid, json[QString("kid")]);
    m_kid_isSet = !json[QString("kid")].isNull() && m_kid_isValid;

    m_kty_isValid = ::OpenAPI::fromJsonValue(m_kty, json[QString("kty")]);
    m_kty_isSet = !json[QString("kty")].isNull() && m_kty_isValid;

    m_use_isValid = ::OpenAPI::fromJsonValue(m_use, json[QString("use")]);
    m_use_isSet = !json[QString("use")].isNull() && m_use_isValid;

    m_x_isValid = ::OpenAPI::fromJsonValue(m_x, json[QString("x")]);
    m_x_isSet = !json[QString("x")].isNull() && m_x_isValid;

    m_y_isValid = ::OpenAPI::fromJsonValue(m_y, json[QString("y")]);
    m_y_isSet = !json[QString("y")].isNull() && m_y_isValid;
}

QString OAIJWKPublicKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJWKPublicKey::asJsonObject() const {
    QJsonObject obj;
    if (m_alg_isSet) {
        obj.insert(QString("alg"), ::OpenAPI::toJsonValue(m_alg));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_crv_isSet) {
        obj.insert(QString("crv"), ::OpenAPI::toJsonValue(m_crv));
    }
    if (m_expired_at_isSet) {
        obj.insert(QString("expired_at"), ::OpenAPI::toJsonValue(m_expired_at));
    }
    if (m_kid_isSet) {
        obj.insert(QString("kid"), ::OpenAPI::toJsonValue(m_kid));
    }
    if (m_kty_isSet) {
        obj.insert(QString("kty"), ::OpenAPI::toJsonValue(m_kty));
    }
    if (m_use_isSet) {
        obj.insert(QString("use"), ::OpenAPI::toJsonValue(m_use));
    }
    if (m_x_isSet) {
        obj.insert(QString("x"), ::OpenAPI::toJsonValue(m_x));
    }
    if (m_y_isSet) {
        obj.insert(QString("y"), ::OpenAPI::toJsonValue(m_y));
    }
    return obj;
}

QString OAIJWKPublicKey::getAlg() const {
    return m_alg;
}
void OAIJWKPublicKey::setAlg(const QString &alg) {
    m_alg = alg;
    m_alg_isSet = true;
}

bool OAIJWKPublicKey::is_alg_Set() const{
    return m_alg_isSet;
}

bool OAIJWKPublicKey::is_alg_Valid() const{
    return m_alg_isValid;
}

qint32 OAIJWKPublicKey::getCreatedAt() const {
    return m_created_at;
}
void OAIJWKPublicKey::setCreatedAt(const qint32 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIJWKPublicKey::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIJWKPublicKey::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIJWKPublicKey::getCrv() const {
    return m_crv;
}
void OAIJWKPublicKey::setCrv(const QString &crv) {
    m_crv = crv;
    m_crv_isSet = true;
}

bool OAIJWKPublicKey::is_crv_Set() const{
    return m_crv_isSet;
}

bool OAIJWKPublicKey::is_crv_Valid() const{
    return m_crv_isValid;
}

qint32 OAIJWKPublicKey::getExpiredAt() const {
    return m_expired_at;
}
void OAIJWKPublicKey::setExpiredAt(const qint32 &expired_at) {
    m_expired_at = expired_at;
    m_expired_at_isSet = true;
}

bool OAIJWKPublicKey::is_expired_at_Set() const{
    return m_expired_at_isSet;
}

bool OAIJWKPublicKey::is_expired_at_Valid() const{
    return m_expired_at_isValid;
}

QString OAIJWKPublicKey::getKid() const {
    return m_kid;
}
void OAIJWKPublicKey::setKid(const QString &kid) {
    m_kid = kid;
    m_kid_isSet = true;
}

bool OAIJWKPublicKey::is_kid_Set() const{
    return m_kid_isSet;
}

bool OAIJWKPublicKey::is_kid_Valid() const{
    return m_kid_isValid;
}

QString OAIJWKPublicKey::getKty() const {
    return m_kty;
}
void OAIJWKPublicKey::setKty(const QString &kty) {
    m_kty = kty;
    m_kty_isSet = true;
}

bool OAIJWKPublicKey::is_kty_Set() const{
    return m_kty_isSet;
}

bool OAIJWKPublicKey::is_kty_Valid() const{
    return m_kty_isValid;
}

QString OAIJWKPublicKey::getUse() const {
    return m_use;
}
void OAIJWKPublicKey::setUse(const QString &use) {
    m_use = use;
    m_use_isSet = true;
}

bool OAIJWKPublicKey::is_use_Set() const{
    return m_use_isSet;
}

bool OAIJWKPublicKey::is_use_Valid() const{
    return m_use_isValid;
}

QString OAIJWKPublicKey::getX() const {
    return m_x;
}
void OAIJWKPublicKey::setX(const QString &x) {
    m_x = x;
    m_x_isSet = true;
}

bool OAIJWKPublicKey::is_x_Set() const{
    return m_x_isSet;
}

bool OAIJWKPublicKey::is_x_Valid() const{
    return m_x_isValid;
}

QString OAIJWKPublicKey::getY() const {
    return m_y;
}
void OAIJWKPublicKey::setY(const QString &y) {
    m_y = y;
    m_y_isSet = true;
}

bool OAIJWKPublicKey::is_y_Set() const{
    return m_y_isSet;
}

bool OAIJWKPublicKey::is_y_Valid() const{
    return m_y_isValid;
}

bool OAIJWKPublicKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJWKPublicKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alg_isValid && m_created_at_isValid && m_crv_isValid && m_expired_at_isValid && m_kid_isValid && m_kty_isValid && m_use_isValid && m_x_isValid && m_y_isValid && true;
}

} // namespace OpenAPI
