/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDepositSwitchTargetAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDepositSwitchTargetAccount::OAIDepositSwitchTargetAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDepositSwitchTargetAccount::OAIDepositSwitchTargetAccount() {
    this->initializeModel();
}

OAIDepositSwitchTargetAccount::~OAIDepositSwitchTargetAccount() {}

void OAIDepositSwitchTargetAccount::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_account_subtype_isSet = false;
    m_account_subtype_isValid = false;

    m_routing_number_isSet = false;
    m_routing_number_isValid = false;
}

void OAIDepositSwitchTargetAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDepositSwitchTargetAccount::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("account_name")]);
    m_account_name_isSet = !json[QString("account_name")].isNull() && m_account_name_isValid;

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("account_number")]);
    m_account_number_isSet = !json[QString("account_number")].isNull() && m_account_number_isValid;

    m_account_subtype_isValid = ::OpenAPI::fromJsonValue(m_account_subtype, json[QString("account_subtype")]);
    m_account_subtype_isSet = !json[QString("account_subtype")].isNull() && m_account_subtype_isValid;

    m_routing_number_isValid = ::OpenAPI::fromJsonValue(m_routing_number, json[QString("routing_number")]);
    m_routing_number_isSet = !json[QString("routing_number")].isNull() && m_routing_number_isValid;
}

QString OAIDepositSwitchTargetAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDepositSwitchTargetAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("account_name"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_number_isSet) {
        obj.insert(QString("account_number"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_account_subtype_isSet) {
        obj.insert(QString("account_subtype"), ::OpenAPI::toJsonValue(m_account_subtype));
    }
    if (m_routing_number_isSet) {
        obj.insert(QString("routing_number"), ::OpenAPI::toJsonValue(m_routing_number));
    }
    return obj;
}

QString OAIDepositSwitchTargetAccount::getAccountName() const {
    return m_account_name;
}
void OAIDepositSwitchTargetAccount::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIDepositSwitchTargetAccount::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIDepositSwitchTargetAccount::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIDepositSwitchTargetAccount::getAccountNumber() const {
    return m_account_number;
}
void OAIDepositSwitchTargetAccount::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIDepositSwitchTargetAccount::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIDepositSwitchTargetAccount::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAIDepositSwitchTargetAccount::getAccountSubtype() const {
    return m_account_subtype;
}
void OAIDepositSwitchTargetAccount::setAccountSubtype(const QString &account_subtype) {
    m_account_subtype = account_subtype;
    m_account_subtype_isSet = true;
}

bool OAIDepositSwitchTargetAccount::is_account_subtype_Set() const{
    return m_account_subtype_isSet;
}

bool OAIDepositSwitchTargetAccount::is_account_subtype_Valid() const{
    return m_account_subtype_isValid;
}

QString OAIDepositSwitchTargetAccount::getRoutingNumber() const {
    return m_routing_number;
}
void OAIDepositSwitchTargetAccount::setRoutingNumber(const QString &routing_number) {
    m_routing_number = routing_number;
    m_routing_number_isSet = true;
}

bool OAIDepositSwitchTargetAccount::is_routing_number_Set() const{
    return m_routing_number_isSet;
}

bool OAIDepositSwitchTargetAccount::is_routing_number_Valid() const{
    return m_routing_number_isValid;
}

bool OAIDepositSwitchTargetAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDepositSwitchTargetAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_name_isValid && m_account_number_isValid && m_account_subtype_isValid && m_routing_number_isValid && true;
}

} // namespace OpenAPI
