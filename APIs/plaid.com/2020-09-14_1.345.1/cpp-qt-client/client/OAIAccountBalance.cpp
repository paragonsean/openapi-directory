/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountBalance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountBalance::OAIAccountBalance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountBalance::OAIAccountBalance() {
    this->initializeModel();
}

OAIAccountBalance::~OAIAccountBalance() {}

void OAIAccountBalance::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_current_isSet = false;
    m_current_isValid = false;

    m_iso_currency_code_isSet = false;
    m_iso_currency_code_isValid = false;

    m_last_updated_datetime_isSet = false;
    m_last_updated_datetime_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_unofficial_currency_code_isSet = false;
    m_unofficial_currency_code_isValid = false;
}

void OAIAccountBalance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountBalance::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;

    m_iso_currency_code_isValid = ::OpenAPI::fromJsonValue(m_iso_currency_code, json[QString("iso_currency_code")]);
    m_iso_currency_code_isSet = !json[QString("iso_currency_code")].isNull() && m_iso_currency_code_isValid;

    m_last_updated_datetime_isValid = ::OpenAPI::fromJsonValue(m_last_updated_datetime, json[QString("last_updated_datetime")]);
    m_last_updated_datetime_isSet = !json[QString("last_updated_datetime")].isNull() && m_last_updated_datetime_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_unofficial_currency_code_isValid = ::OpenAPI::fromJsonValue(m_unofficial_currency_code, json[QString("unofficial_currency_code")]);
    m_unofficial_currency_code_isSet = !json[QString("unofficial_currency_code")].isNull() && m_unofficial_currency_code_isValid;
}

QString OAIAccountBalance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountBalance::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_current_isSet) {
        obj.insert(QString("current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_iso_currency_code_isSet) {
        obj.insert(QString("iso_currency_code"), ::OpenAPI::toJsonValue(m_iso_currency_code));
    }
    if (m_last_updated_datetime_isSet) {
        obj.insert(QString("last_updated_datetime"), ::OpenAPI::toJsonValue(m_last_updated_datetime));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_unofficial_currency_code_isSet) {
        obj.insert(QString("unofficial_currency_code"), ::OpenAPI::toJsonValue(m_unofficial_currency_code));
    }
    return obj;
}

double OAIAccountBalance::getAvailable() const {
    return m_available;
}
void OAIAccountBalance::setAvailable(const double &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIAccountBalance::is_available_Set() const{
    return m_available_isSet;
}

bool OAIAccountBalance::is_available_Valid() const{
    return m_available_isValid;
}

double OAIAccountBalance::getCurrent() const {
    return m_current;
}
void OAIAccountBalance::setCurrent(const double &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAIAccountBalance::is_current_Set() const{
    return m_current_isSet;
}

bool OAIAccountBalance::is_current_Valid() const{
    return m_current_isValid;
}

QString OAIAccountBalance::getIsoCurrencyCode() const {
    return m_iso_currency_code;
}
void OAIAccountBalance::setIsoCurrencyCode(const QString &iso_currency_code) {
    m_iso_currency_code = iso_currency_code;
    m_iso_currency_code_isSet = true;
}

bool OAIAccountBalance::is_iso_currency_code_Set() const{
    return m_iso_currency_code_isSet;
}

bool OAIAccountBalance::is_iso_currency_code_Valid() const{
    return m_iso_currency_code_isValid;
}

QDateTime OAIAccountBalance::getLastUpdatedDatetime() const {
    return m_last_updated_datetime;
}
void OAIAccountBalance::setLastUpdatedDatetime(const QDateTime &last_updated_datetime) {
    m_last_updated_datetime = last_updated_datetime;
    m_last_updated_datetime_isSet = true;
}

bool OAIAccountBalance::is_last_updated_datetime_Set() const{
    return m_last_updated_datetime_isSet;
}

bool OAIAccountBalance::is_last_updated_datetime_Valid() const{
    return m_last_updated_datetime_isValid;
}

double OAIAccountBalance::getLimit() const {
    return m_limit;
}
void OAIAccountBalance::setLimit(const double &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIAccountBalance::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIAccountBalance::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIAccountBalance::getUnofficialCurrencyCode() const {
    return m_unofficial_currency_code;
}
void OAIAccountBalance::setUnofficialCurrencyCode(const QString &unofficial_currency_code) {
    m_unofficial_currency_code = unofficial_currency_code;
    m_unofficial_currency_code_isSet = true;
}

bool OAIAccountBalance::is_unofficial_currency_code_Set() const{
    return m_unofficial_currency_code_isSet;
}

bool OAIAccountBalance::is_unofficial_currency_code_Valid() const{
    return m_unofficial_currency_code_isValid;
}

bool OAIAccountBalance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unofficial_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountBalance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_isValid && m_current_isValid && m_iso_currency_code_isValid && m_limit_isValid && m_unofficial_currency_code_isValid && true;
}

} // namespace OpenAPI
