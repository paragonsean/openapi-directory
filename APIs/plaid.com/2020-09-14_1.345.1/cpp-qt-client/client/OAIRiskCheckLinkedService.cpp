/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRiskCheckLinkedService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRiskCheckLinkedService::OAIRiskCheckLinkedService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRiskCheckLinkedService::OAIRiskCheckLinkedService() {
    this->initializeModel();
}

OAIRiskCheckLinkedService::~OAIRiskCheckLinkedService() {}

void OAIRiskCheckLinkedService::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRiskCheckLinkedService::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRiskCheckLinkedService::fromJson(QString jsonString) {
    
    if ( jsonString.compare("apple", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::APPLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ebay", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::EBAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("facebook", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::FACEBOOK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("flickr", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::FLICKR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("foursquare", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::FOURSQUARE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("github", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::GITHUB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("google", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::GOOGLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("gravatar", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::GRAVATAR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("instagram", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::INSTAGRAM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lastfm", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::LASTFM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("linkedin", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::LINKEDIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("microsoft", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::MICROSOFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("myspace", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::MYSPACE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pinterest", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::PINTEREST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("skype", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::SKYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("spotify", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::SPOTIFY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("telegram", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::TELEGRAM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tumblr", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::TUMBLR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("twitter", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::TWITTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("viber", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::VIBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("vimeo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::VIMEO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("weibo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::WEIBO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("whatsapp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::WHATSAPP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("yahoo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::YAHOO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("airbnb", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::AIRBNB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("amazon", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::AMAZON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("booking", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::BOOKING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("discord", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::DISCORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("kakao", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::KAKAO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ok", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::OK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("qzone", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::QZONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("line", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::LINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("snapchat", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::SNAPCHAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("zalo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRiskCheckLinkedService::ZALO;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRiskCheckLinkedService::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRiskCheckLinkedService::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRiskCheckLinkedService::APPLE:
            val = "apple";
            break;
        case eOAIRiskCheckLinkedService::EBAY:
            val = "ebay";
            break;
        case eOAIRiskCheckLinkedService::FACEBOOK:
            val = "facebook";
            break;
        case eOAIRiskCheckLinkedService::FLICKR:
            val = "flickr";
            break;
        case eOAIRiskCheckLinkedService::FOURSQUARE:
            val = "foursquare";
            break;
        case eOAIRiskCheckLinkedService::GITHUB:
            val = "github";
            break;
        case eOAIRiskCheckLinkedService::GOOGLE:
            val = "google";
            break;
        case eOAIRiskCheckLinkedService::GRAVATAR:
            val = "gravatar";
            break;
        case eOAIRiskCheckLinkedService::INSTAGRAM:
            val = "instagram";
            break;
        case eOAIRiskCheckLinkedService::LASTFM:
            val = "lastfm";
            break;
        case eOAIRiskCheckLinkedService::LINKEDIN:
            val = "linkedin";
            break;
        case eOAIRiskCheckLinkedService::MICROSOFT:
            val = "microsoft";
            break;
        case eOAIRiskCheckLinkedService::MYSPACE:
            val = "myspace";
            break;
        case eOAIRiskCheckLinkedService::PINTEREST:
            val = "pinterest";
            break;
        case eOAIRiskCheckLinkedService::SKYPE:
            val = "skype";
            break;
        case eOAIRiskCheckLinkedService::SPOTIFY:
            val = "spotify";
            break;
        case eOAIRiskCheckLinkedService::TELEGRAM:
            val = "telegram";
            break;
        case eOAIRiskCheckLinkedService::TUMBLR:
            val = "tumblr";
            break;
        case eOAIRiskCheckLinkedService::TWITTER:
            val = "twitter";
            break;
        case eOAIRiskCheckLinkedService::VIBER:
            val = "viber";
            break;
        case eOAIRiskCheckLinkedService::VIMEO:
            val = "vimeo";
            break;
        case eOAIRiskCheckLinkedService::WEIBO:
            val = "weibo";
            break;
        case eOAIRiskCheckLinkedService::WHATSAPP:
            val = "whatsapp";
            break;
        case eOAIRiskCheckLinkedService::YAHOO:
            val = "yahoo";
            break;
        case eOAIRiskCheckLinkedService::AIRBNB:
            val = "airbnb";
            break;
        case eOAIRiskCheckLinkedService::AMAZON:
            val = "amazon";
            break;
        case eOAIRiskCheckLinkedService::BOOKING:
            val = "booking";
            break;
        case eOAIRiskCheckLinkedService::DISCORD:
            val = "discord";
            break;
        case eOAIRiskCheckLinkedService::KAKAO:
            val = "kakao";
            break;
        case eOAIRiskCheckLinkedService::OK:
            val = "ok";
            break;
        case eOAIRiskCheckLinkedService::QZONE:
            val = "qzone";
            break;
        case eOAIRiskCheckLinkedService::LINE:
            val = "line";
            break;
        case eOAIRiskCheckLinkedService::SNAPCHAT:
            val = "snapchat";
            break;
        case eOAIRiskCheckLinkedService::ZALO:
            val = "zalo";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRiskCheckLinkedService::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRiskCheckLinkedService::eOAIRiskCheckLinkedService OAIRiskCheckLinkedService::getValue() const {
    return m_value;
}

void OAIRiskCheckLinkedService::setValue(const OAIRiskCheckLinkedService::eOAIRiskCheckLinkedService& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRiskCheckLinkedService::isSet() const {
    
    return m_value_isSet;
}

bool OAIRiskCheckLinkedService::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
