/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignalWarning.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignalWarning::OAISignalWarning(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignalWarning::OAISignalWarning() {
    this->initializeModel();
}

OAISignalWarning::~OAISignalWarning() {}

void OAISignalWarning::initializeModel() {

    m_warning_code_isSet = false;
    m_warning_code_isValid = false;

    m_warning_message_isSet = false;
    m_warning_message_isValid = false;

    m_warning_type_isSet = false;
    m_warning_type_isValid = false;
}

void OAISignalWarning::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISignalWarning::fromJsonObject(QJsonObject json) {

    m_warning_code_isValid = ::OpenAPI::fromJsonValue(m_warning_code, json[QString("warning_code")]);
    m_warning_code_isSet = !json[QString("warning_code")].isNull() && m_warning_code_isValid;

    m_warning_message_isValid = ::OpenAPI::fromJsonValue(m_warning_message, json[QString("warning_message")]);
    m_warning_message_isSet = !json[QString("warning_message")].isNull() && m_warning_message_isValid;

    m_warning_type_isValid = ::OpenAPI::fromJsonValue(m_warning_type, json[QString("warning_type")]);
    m_warning_type_isSet = !json[QString("warning_type")].isNull() && m_warning_type_isValid;
}

QString OAISignalWarning::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISignalWarning::asJsonObject() const {
    QJsonObject obj;
    if (m_warning_code_isSet) {
        obj.insert(QString("warning_code"), ::OpenAPI::toJsonValue(m_warning_code));
    }
    if (m_warning_message_isSet) {
        obj.insert(QString("warning_message"), ::OpenAPI::toJsonValue(m_warning_message));
    }
    if (m_warning_type_isSet) {
        obj.insert(QString("warning_type"), ::OpenAPI::toJsonValue(m_warning_type));
    }
    return obj;
}

QString OAISignalWarning::getWarningCode() const {
    return m_warning_code;
}
void OAISignalWarning::setWarningCode(const QString &warning_code) {
    m_warning_code = warning_code;
    m_warning_code_isSet = true;
}

bool OAISignalWarning::is_warning_code_Set() const{
    return m_warning_code_isSet;
}

bool OAISignalWarning::is_warning_code_Valid() const{
    return m_warning_code_isValid;
}

QString OAISignalWarning::getWarningMessage() const {
    return m_warning_message;
}
void OAISignalWarning::setWarningMessage(const QString &warning_message) {
    m_warning_message = warning_message;
    m_warning_message_isSet = true;
}

bool OAISignalWarning::is_warning_message_Set() const{
    return m_warning_message_isSet;
}

bool OAISignalWarning::is_warning_message_Valid() const{
    return m_warning_message_isValid;
}

QString OAISignalWarning::getWarningType() const {
    return m_warning_type;
}
void OAISignalWarning::setWarningType(const QString &warning_type) {
    m_warning_type = warning_type;
    m_warning_type_isSet = true;
}

bool OAISignalWarning::is_warning_type_Set() const{
    return m_warning_type_isSet;
}

bool OAISignalWarning::is_warning_type_Valid() const{
    return m_warning_type_isValid;
}

bool OAISignalWarning::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_warning_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISignalWarning::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
