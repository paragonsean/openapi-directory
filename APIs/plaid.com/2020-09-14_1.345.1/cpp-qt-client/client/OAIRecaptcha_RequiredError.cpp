/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecaptcha_RequiredError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecaptcha_RequiredError::OAIRecaptcha_RequiredError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecaptcha_RequiredError::OAIRecaptcha_RequiredError() {
    this->initializeModel();
}

OAIRecaptcha_RequiredError::~OAIRecaptcha_RequiredError() {}

void OAIRecaptcha_RequiredError::initializeModel() {

    m_common_causes_isSet = false;
    m_common_causes_isValid = false;

    m_display_message_isSet = false;
    m_display_message_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;

    m_http_code_isSet = false;
    m_http_code_isValid = false;

    m_link_user_experience_isSet = false;
    m_link_user_experience_isValid = false;

    m_troubleshooting_steps_isSet = false;
    m_troubleshooting_steps_isValid = false;
}

void OAIRecaptcha_RequiredError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecaptcha_RequiredError::fromJsonObject(QJsonObject json) {

    m_common_causes_isValid = ::OpenAPI::fromJsonValue(m_common_causes, json[QString("common_causes")]);
    m_common_causes_isSet = !json[QString("common_causes")].isNull() && m_common_causes_isValid;

    m_display_message_isValid = ::OpenAPI::fromJsonValue(m_display_message, json[QString("display_message")]);
    m_display_message_isSet = !json[QString("display_message")].isNull() && m_display_message_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("error_code")]);
    m_error_code_isSet = !json[QString("error_code")].isNull() && m_error_code_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("error_type")]);
    m_error_type_isSet = !json[QString("error_type")].isNull() && m_error_type_isValid;

    m_http_code_isValid = ::OpenAPI::fromJsonValue(m_http_code, json[QString("http_code")]);
    m_http_code_isSet = !json[QString("http_code")].isNull() && m_http_code_isValid;

    m_link_user_experience_isValid = ::OpenAPI::fromJsonValue(m_link_user_experience, json[QString("link_user_experience")]);
    m_link_user_experience_isSet = !json[QString("link_user_experience")].isNull() && m_link_user_experience_isValid;

    m_troubleshooting_steps_isValid = ::OpenAPI::fromJsonValue(m_troubleshooting_steps, json[QString("troubleshooting_steps")]);
    m_troubleshooting_steps_isSet = !json[QString("troubleshooting_steps")].isNull() && m_troubleshooting_steps_isValid;
}

QString OAIRecaptcha_RequiredError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecaptcha_RequiredError::asJsonObject() const {
    QJsonObject obj;
    if (m_common_causes_isSet) {
        obj.insert(QString("common_causes"), ::OpenAPI::toJsonValue(m_common_causes));
    }
    if (m_display_message_isSet) {
        obj.insert(QString("display_message"), ::OpenAPI::toJsonValue(m_display_message));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("error_code"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_type_isSet) {
        obj.insert(QString("error_type"), ::OpenAPI::toJsonValue(m_error_type));
    }
    if (m_http_code_isSet) {
        obj.insert(QString("http_code"), ::OpenAPI::toJsonValue(m_http_code));
    }
    if (m_link_user_experience_isSet) {
        obj.insert(QString("link_user_experience"), ::OpenAPI::toJsonValue(m_link_user_experience));
    }
    if (m_troubleshooting_steps_isSet) {
        obj.insert(QString("troubleshooting_steps"), ::OpenAPI::toJsonValue(m_troubleshooting_steps));
    }
    return obj;
}

QString OAIRecaptcha_RequiredError::getCommonCauses() const {
    return m_common_causes;
}
void OAIRecaptcha_RequiredError::setCommonCauses(const QString &common_causes) {
    m_common_causes = common_causes;
    m_common_causes_isSet = true;
}

bool OAIRecaptcha_RequiredError::is_common_causes_Set() const{
    return m_common_causes_isSet;
}

bool OAIRecaptcha_RequiredError::is_common_causes_Valid() const{
    return m_common_causes_isValid;
}

QString OAIRecaptcha_RequiredError::getDisplayMessage() const {
    return m_display_message;
}
void OAIRecaptcha_RequiredError::setDisplayMessage(const QString &display_message) {
    m_display_message = display_message;
    m_display_message_isSet = true;
}

bool OAIRecaptcha_RequiredError::is_display_message_Set() const{
    return m_display_message_isSet;
}

bool OAIRecaptcha_RequiredError::is_display_message_Valid() const{
    return m_display_message_isValid;
}

QString OAIRecaptcha_RequiredError::getErrorCode() const {
    return m_error_code;
}
void OAIRecaptcha_RequiredError::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIRecaptcha_RequiredError::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIRecaptcha_RequiredError::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIRecaptcha_RequiredError::getErrorType() const {
    return m_error_type;
}
void OAIRecaptcha_RequiredError::setErrorType(const QString &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAIRecaptcha_RequiredError::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAIRecaptcha_RequiredError::is_error_type_Valid() const{
    return m_error_type_isValid;
}

QString OAIRecaptcha_RequiredError::getHttpCode() const {
    return m_http_code;
}
void OAIRecaptcha_RequiredError::setHttpCode(const QString &http_code) {
    m_http_code = http_code;
    m_http_code_isSet = true;
}

bool OAIRecaptcha_RequiredError::is_http_code_Set() const{
    return m_http_code_isSet;
}

bool OAIRecaptcha_RequiredError::is_http_code_Valid() const{
    return m_http_code_isValid;
}

QString OAIRecaptcha_RequiredError::getLinkUserExperience() const {
    return m_link_user_experience;
}
void OAIRecaptcha_RequiredError::setLinkUserExperience(const QString &link_user_experience) {
    m_link_user_experience = link_user_experience;
    m_link_user_experience_isSet = true;
}

bool OAIRecaptcha_RequiredError::is_link_user_experience_Set() const{
    return m_link_user_experience_isSet;
}

bool OAIRecaptcha_RequiredError::is_link_user_experience_Valid() const{
    return m_link_user_experience_isValid;
}

QString OAIRecaptcha_RequiredError::getTroubleshootingSteps() const {
    return m_troubleshooting_steps;
}
void OAIRecaptcha_RequiredError::setTroubleshootingSteps(const QString &troubleshooting_steps) {
    m_troubleshooting_steps = troubleshooting_steps;
    m_troubleshooting_steps_isSet = true;
}

bool OAIRecaptcha_RequiredError::is_troubleshooting_steps_Set() const{
    return m_troubleshooting_steps_isSet;
}

bool OAIRecaptcha_RequiredError::is_troubleshooting_steps_Valid() const{
    return m_troubleshooting_steps_isValid;
}

bool OAIRecaptcha_RequiredError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common_causes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_user_experience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_troubleshooting_steps_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecaptcha_RequiredError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_common_causes_isValid && m_display_message_isValid && m_error_code_isValid && m_error_type_isValid && m_http_code_isValid && m_link_user_experience_isValid && m_troubleshooting_steps_isValid && true;
}

} // namespace OpenAPI
