/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferRecurringCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferRecurringCreateRequest::OAITransferRecurringCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferRecurringCreateRequest::OAITransferRecurringCreateRequest() {
    this->initializeModel();
}

OAITransferRecurringCreateRequest::~OAITransferRecurringCreateRequest() {}

void OAITransferRecurringCreateRequest::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_ach_class_isSet = false;
    m_ach_class_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_funding_account_id_isSet = false;
    m_funding_account_id_isValid = false;

    m_idempotency_key_isSet = false;
    m_idempotency_key_isValid = false;

    m_iso_currency_code_isSet = false;
    m_iso_currency_code_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_test_clock_id_isSet = false;
    m_test_clock_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_present_isSet = false;
    m_user_present_isValid = false;
}

void OAITransferRecurringCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferRecurringCreateRequest::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("access_token")]);
    m_access_token_isSet = !json[QString("access_token")].isNull() && m_access_token_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_ach_class_isValid = ::OpenAPI::fromJsonValue(m_ach_class, json[QString("ach_class")]);
    m_ach_class_isSet = !json[QString("ach_class")].isNull() && m_ach_class_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_funding_account_id_isValid = ::OpenAPI::fromJsonValue(m_funding_account_id, json[QString("funding_account_id")]);
    m_funding_account_id_isSet = !json[QString("funding_account_id")].isNull() && m_funding_account_id_isValid;

    m_idempotency_key_isValid = ::OpenAPI::fromJsonValue(m_idempotency_key, json[QString("idempotency_key")]);
    m_idempotency_key_isSet = !json[QString("idempotency_key")].isNull() && m_idempotency_key_isValid;

    m_iso_currency_code_isValid = ::OpenAPI::fromJsonValue(m_iso_currency_code, json[QString("iso_currency_code")]);
    m_iso_currency_code_isSet = !json[QString("iso_currency_code")].isNull() && m_iso_currency_code_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_test_clock_id_isValid = ::OpenAPI::fromJsonValue(m_test_clock_id, json[QString("test_clock_id")]);
    m_test_clock_id_isSet = !json[QString("test_clock_id")].isNull() && m_test_clock_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_present_isValid = ::OpenAPI::fromJsonValue(m_user_present, json[QString("user_present")]);
    m_user_present_isSet = !json[QString("user_present")].isNull() && m_user_present_isValid;
}

QString OAITransferRecurringCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferRecurringCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("access_token"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_ach_class.isSet()) {
        obj.insert(QString("ach_class"), ::OpenAPI::toJsonValue(m_ach_class));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_funding_account_id_isSet) {
        obj.insert(QString("funding_account_id"), ::OpenAPI::toJsonValue(m_funding_account_id));
    }
    if (m_idempotency_key_isSet) {
        obj.insert(QString("idempotency_key"), ::OpenAPI::toJsonValue(m_idempotency_key));
    }
    if (m_iso_currency_code_isSet) {
        obj.insert(QString("iso_currency_code"), ::OpenAPI::toJsonValue(m_iso_currency_code));
    }
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_test_clock_id_isSet) {
        obj.insert(QString("test_clock_id"), ::OpenAPI::toJsonValue(m_test_clock_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_present_isSet) {
        obj.insert(QString("user_present"), ::OpenAPI::toJsonValue(m_user_present));
    }
    return obj;
}

QString OAITransferRecurringCreateRequest::getAccessToken() const {
    return m_access_token;
}
void OAITransferRecurringCreateRequest::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAITransferRecurringCreateRequest::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QString OAITransferRecurringCreateRequest::getAccountId() const {
    return m_account_id;
}
void OAITransferRecurringCreateRequest::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAITransferRecurringCreateRequest::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIACHClass OAITransferRecurringCreateRequest::getAchClass() const {
    return m_ach_class;
}
void OAITransferRecurringCreateRequest::setAchClass(const OAIACHClass &ach_class) {
    m_ach_class = ach_class;
    m_ach_class_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_ach_class_Set() const{
    return m_ach_class_isSet;
}

bool OAITransferRecurringCreateRequest::is_ach_class_Valid() const{
    return m_ach_class_isValid;
}

QString OAITransferRecurringCreateRequest::getAmount() const {
    return m_amount;
}
void OAITransferRecurringCreateRequest::setAmount(const QString &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransferRecurringCreateRequest::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAITransferRecurringCreateRequest::getClientId() const {
    return m_client_id;
}
void OAITransferRecurringCreateRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAITransferRecurringCreateRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAITransferRecurringCreateRequest::getDescription() const {
    return m_description;
}
void OAITransferRecurringCreateRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAITransferRecurringCreateRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAITransferDevice OAITransferRecurringCreateRequest::getDevice() const {
    return m_device;
}
void OAITransferRecurringCreateRequest::setDevice(const OAITransferDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_device_Set() const{
    return m_device_isSet;
}

bool OAITransferRecurringCreateRequest::is_device_Valid() const{
    return m_device_isValid;
}

QString OAITransferRecurringCreateRequest::getFundingAccountId() const {
    return m_funding_account_id;
}
void OAITransferRecurringCreateRequest::setFundingAccountId(const QString &funding_account_id) {
    m_funding_account_id = funding_account_id;
    m_funding_account_id_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_funding_account_id_Set() const{
    return m_funding_account_id_isSet;
}

bool OAITransferRecurringCreateRequest::is_funding_account_id_Valid() const{
    return m_funding_account_id_isValid;
}

QString OAITransferRecurringCreateRequest::getIdempotencyKey() const {
    return m_idempotency_key;
}
void OAITransferRecurringCreateRequest::setIdempotencyKey(const QString &idempotency_key) {
    m_idempotency_key = idempotency_key;
    m_idempotency_key_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_idempotency_key_Set() const{
    return m_idempotency_key_isSet;
}

bool OAITransferRecurringCreateRequest::is_idempotency_key_Valid() const{
    return m_idempotency_key_isValid;
}

QString OAITransferRecurringCreateRequest::getIsoCurrencyCode() const {
    return m_iso_currency_code;
}
void OAITransferRecurringCreateRequest::setIsoCurrencyCode(const QString &iso_currency_code) {
    m_iso_currency_code = iso_currency_code;
    m_iso_currency_code_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_iso_currency_code_Set() const{
    return m_iso_currency_code_isSet;
}

bool OAITransferRecurringCreateRequest::is_iso_currency_code_Valid() const{
    return m_iso_currency_code_isValid;
}

OAITransferNetwork OAITransferRecurringCreateRequest::getNetwork() const {
    return m_network;
}
void OAITransferRecurringCreateRequest::setNetwork(const OAITransferNetwork &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_network_Set() const{
    return m_network_isSet;
}

bool OAITransferRecurringCreateRequest::is_network_Valid() const{
    return m_network_isValid;
}

OAITransferRecurringSchedule OAITransferRecurringCreateRequest::getSchedule() const {
    return m_schedule;
}
void OAITransferRecurringCreateRequest::setSchedule(const OAITransferRecurringSchedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAITransferRecurringCreateRequest::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAITransferRecurringCreateRequest::getSecret() const {
    return m_secret;
}
void OAITransferRecurringCreateRequest::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAITransferRecurringCreateRequest::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAITransferRecurringCreateRequest::getTestClockId() const {
    return m_test_clock_id;
}
void OAITransferRecurringCreateRequest::setTestClockId(const QString &test_clock_id) {
    m_test_clock_id = test_clock_id;
    m_test_clock_id_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_test_clock_id_Set() const{
    return m_test_clock_id_isSet;
}

bool OAITransferRecurringCreateRequest::is_test_clock_id_Valid() const{
    return m_test_clock_id_isValid;
}

OAITransferType OAITransferRecurringCreateRequest::getType() const {
    return m_type;
}
void OAITransferRecurringCreateRequest::setType(const OAITransferType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransferRecurringCreateRequest::is_type_Valid() const{
    return m_type_isValid;
}

OAITransferUserInRequest OAITransferRecurringCreateRequest::getUser() const {
    return m_user;
}
void OAITransferRecurringCreateRequest::setUser(const OAITransferUserInRequest &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAITransferRecurringCreateRequest::is_user_Valid() const{
    return m_user_isValid;
}

bool OAITransferRecurringCreateRequest::isUserPresent() const {
    return m_user_present;
}
void OAITransferRecurringCreateRequest::setUserPresent(const bool &user_present) {
    m_user_present = user_present;
    m_user_present_isSet = true;
}

bool OAITransferRecurringCreateRequest::is_user_present_Set() const{
    return m_user_present_isSet;
}

bool OAITransferRecurringCreateRequest::is_user_present_Valid() const{
    return m_user_present_isValid;
}

bool OAITransferRecurringCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ach_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_clock_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_present_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferRecurringCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_token_isValid && m_account_id_isValid && m_amount_isValid && m_description_isValid && m_device_isValid && m_idempotency_key_isValid && m_network_isValid && m_schedule_isValid && m_type_isValid && m_user_isValid && m_user_present_isValid && true;
}

} // namespace OpenAPI
