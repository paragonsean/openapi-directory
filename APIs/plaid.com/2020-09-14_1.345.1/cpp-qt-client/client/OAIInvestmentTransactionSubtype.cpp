/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvestmentTransactionSubtype.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvestmentTransactionSubtype::OAIInvestmentTransactionSubtype(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvestmentTransactionSubtype::OAIInvestmentTransactionSubtype() {
    this->initializeModel();
}

OAIInvestmentTransactionSubtype::~OAIInvestmentTransactionSubtype() {}

void OAIInvestmentTransactionSubtype::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIInvestmentTransactionSubtype::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIInvestmentTransactionSubtype::fromJson(QString jsonString) {
    
    if ( jsonString.compare("account fee", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::ACCOUNT_FEE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("adjustment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::ADJUSTMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("assignment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::ASSIGNMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("buy", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::BUY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("buy to cover", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::BUY_TO_COVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("contribution", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::CONTRIBUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("deposit", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::DEPOSIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("distribution", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::DISTRIBUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dividend", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::DIVIDEND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dividend reinvestment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::DIVIDEND_REINVESTMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("exercise", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::EXERCISE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("expire", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::EXPIRE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fund fee", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::FUND_FEE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("interest", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::INTEREST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("interest receivable", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::INTEREST_RECEIVABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("interest reinvestment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::INTEREST_REINVESTMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("legal fee", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::LEGAL_FEE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("loan payment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::LOAN_PAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("long-term capital gain", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::LONG_TERM_CAPITAL_GAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("long-term capital gain reinvestment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::LONG_TERM_CAPITAL_GAIN_REINVESTMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("management fee", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::MANAGEMENT_FEE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("margin expense", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::MARGIN_EXPENSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("merger", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::MERGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("miscellaneous fee", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::MISCELLANEOUS_FEE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("non-qualified dividend", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::NON_QUALIFIED_DIVIDEND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("non-resident tax", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::NON_RESIDENT_TAX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pending credit", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::PENDING_CREDIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pending debit", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::PENDING_DEBIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("qualified dividend", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::QUALIFIED_DIVIDEND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rebalance", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::REBALANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("return of principal", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::RETURN_OF_PRINCIPAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("request", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::REQUEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sell", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::SELL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sell short", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::SELL_SHORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("send", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::SEND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("short-term capital gain", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::SHORT_TERM_CAPITAL_GAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("short-term capital gain reinvestment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::SHORT_TERM_CAPITAL_GAIN_REINVESTMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("spin off", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::SPIN_OFF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("split", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::SPLIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("stock distribution", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::STOCK_DISTRIBUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tax", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::TAX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tax withheld", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::TAX_WITHHELD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("trade", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::TRADE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("transfer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("transfer fee", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::TRANSFER_FEE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("trust fee", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::TRUST_FEE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unqualified gain", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::UNQUALIFIED_GAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("withdrawal", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInvestmentTransactionSubtype::WITHDRAWAL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIInvestmentTransactionSubtype::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIInvestmentTransactionSubtype::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIInvestmentTransactionSubtype::ACCOUNT_FEE:
            val = "account fee";
            break;
        case eOAIInvestmentTransactionSubtype::ADJUSTMENT:
            val = "adjustment";
            break;
        case eOAIInvestmentTransactionSubtype::ASSIGNMENT:
            val = "assignment";
            break;
        case eOAIInvestmentTransactionSubtype::BUY:
            val = "buy";
            break;
        case eOAIInvestmentTransactionSubtype::BUY_TO_COVER:
            val = "buy to cover";
            break;
        case eOAIInvestmentTransactionSubtype::CONTRIBUTION:
            val = "contribution";
            break;
        case eOAIInvestmentTransactionSubtype::DEPOSIT:
            val = "deposit";
            break;
        case eOAIInvestmentTransactionSubtype::DISTRIBUTION:
            val = "distribution";
            break;
        case eOAIInvestmentTransactionSubtype::DIVIDEND:
            val = "dividend";
            break;
        case eOAIInvestmentTransactionSubtype::DIVIDEND_REINVESTMENT:
            val = "dividend reinvestment";
            break;
        case eOAIInvestmentTransactionSubtype::EXERCISE:
            val = "exercise";
            break;
        case eOAIInvestmentTransactionSubtype::EXPIRE:
            val = "expire";
            break;
        case eOAIInvestmentTransactionSubtype::FUND_FEE:
            val = "fund fee";
            break;
        case eOAIInvestmentTransactionSubtype::INTEREST:
            val = "interest";
            break;
        case eOAIInvestmentTransactionSubtype::INTEREST_RECEIVABLE:
            val = "interest receivable";
            break;
        case eOAIInvestmentTransactionSubtype::INTEREST_REINVESTMENT:
            val = "interest reinvestment";
            break;
        case eOAIInvestmentTransactionSubtype::LEGAL_FEE:
            val = "legal fee";
            break;
        case eOAIInvestmentTransactionSubtype::LOAN_PAYMENT:
            val = "loan payment";
            break;
        case eOAIInvestmentTransactionSubtype::LONG_TERM_CAPITAL_GAIN:
            val = "long-term capital gain";
            break;
        case eOAIInvestmentTransactionSubtype::LONG_TERM_CAPITAL_GAIN_REINVESTMENT:
            val = "long-term capital gain reinvestment";
            break;
        case eOAIInvestmentTransactionSubtype::MANAGEMENT_FEE:
            val = "management fee";
            break;
        case eOAIInvestmentTransactionSubtype::MARGIN_EXPENSE:
            val = "margin expense";
            break;
        case eOAIInvestmentTransactionSubtype::MERGER:
            val = "merger";
            break;
        case eOAIInvestmentTransactionSubtype::MISCELLANEOUS_FEE:
            val = "miscellaneous fee";
            break;
        case eOAIInvestmentTransactionSubtype::NON_QUALIFIED_DIVIDEND:
            val = "non-qualified dividend";
            break;
        case eOAIInvestmentTransactionSubtype::NON_RESIDENT_TAX:
            val = "non-resident tax";
            break;
        case eOAIInvestmentTransactionSubtype::PENDING_CREDIT:
            val = "pending credit";
            break;
        case eOAIInvestmentTransactionSubtype::PENDING_DEBIT:
            val = "pending debit";
            break;
        case eOAIInvestmentTransactionSubtype::QUALIFIED_DIVIDEND:
            val = "qualified dividend";
            break;
        case eOAIInvestmentTransactionSubtype::REBALANCE:
            val = "rebalance";
            break;
        case eOAIInvestmentTransactionSubtype::RETURN_OF_PRINCIPAL:
            val = "return of principal";
            break;
        case eOAIInvestmentTransactionSubtype::REQUEST:
            val = "request";
            break;
        case eOAIInvestmentTransactionSubtype::SELL:
            val = "sell";
            break;
        case eOAIInvestmentTransactionSubtype::SELL_SHORT:
            val = "sell short";
            break;
        case eOAIInvestmentTransactionSubtype::SEND:
            val = "send";
            break;
        case eOAIInvestmentTransactionSubtype::SHORT_TERM_CAPITAL_GAIN:
            val = "short-term capital gain";
            break;
        case eOAIInvestmentTransactionSubtype::SHORT_TERM_CAPITAL_GAIN_REINVESTMENT:
            val = "short-term capital gain reinvestment";
            break;
        case eOAIInvestmentTransactionSubtype::SPIN_OFF:
            val = "spin off";
            break;
        case eOAIInvestmentTransactionSubtype::SPLIT:
            val = "split";
            break;
        case eOAIInvestmentTransactionSubtype::STOCK_DISTRIBUTION:
            val = "stock distribution";
            break;
        case eOAIInvestmentTransactionSubtype::TAX:
            val = "tax";
            break;
        case eOAIInvestmentTransactionSubtype::TAX_WITHHELD:
            val = "tax withheld";
            break;
        case eOAIInvestmentTransactionSubtype::TRADE:
            val = "trade";
            break;
        case eOAIInvestmentTransactionSubtype::TRANSFER:
            val = "transfer";
            break;
        case eOAIInvestmentTransactionSubtype::TRANSFER_FEE:
            val = "transfer fee";
            break;
        case eOAIInvestmentTransactionSubtype::TRUST_FEE:
            val = "trust fee";
            break;
        case eOAIInvestmentTransactionSubtype::UNQUALIFIED_GAIN:
            val = "unqualified gain";
            break;
        case eOAIInvestmentTransactionSubtype::WITHDRAWAL:
            val = "withdrawal";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIInvestmentTransactionSubtype::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIInvestmentTransactionSubtype::eOAIInvestmentTransactionSubtype OAIInvestmentTransactionSubtype::getValue() const {
    return m_value;
}

void OAIInvestmentTransactionSubtype::setValue(const OAIInvestmentTransactionSubtype::eOAIInvestmentTransactionSubtype& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIInvestmentTransactionSubtype::isSet() const {
    
    return m_value_isSet;
}

bool OAIInvestmentTransactionSubtype::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
