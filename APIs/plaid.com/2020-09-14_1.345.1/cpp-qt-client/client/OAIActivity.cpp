/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivity::OAIActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivity::OAIActivity() {
    this->initializeModel();
}

OAIActivity::~OAIActivity() {}

void OAIActivity::initializeModel() {

    m_activity_isSet = false;
    m_activity_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_initiated_date_isSet = false;
    m_initiated_date_isValid = false;

    m_initiator_isSet = false;
    m_initiator_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_target_application_id_isSet = false;
    m_target_application_id_isValid = false;
}

void OAIActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivity::fromJsonObject(QJsonObject json) {

    m_activity_isValid = ::OpenAPI::fromJsonValue(m_activity, json[QString("activity")]);
    m_activity_isSet = !json[QString("activity")].isNull() && m_activity_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_initiated_date_isValid = ::OpenAPI::fromJsonValue(m_initiated_date, json[QString("initiated_date")]);
    m_initiated_date_isSet = !json[QString("initiated_date")].isNull() && m_initiated_date_isValid;

    m_initiator_isValid = ::OpenAPI::fromJsonValue(m_initiator, json[QString("initiator")]);
    m_initiator_isSet = !json[QString("initiator")].isNull() && m_initiator_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_target_application_id_isValid = ::OpenAPI::fromJsonValue(m_target_application_id, json[QString("target_application_id")]);
    m_target_application_id_isSet = !json[QString("target_application_id")].isNull() && m_target_application_id_isValid;
}

QString OAIActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_activity.isSet()) {
        obj.insert(QString("activity"), ::OpenAPI::toJsonValue(m_activity));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_initiated_date_isSet) {
        obj.insert(QString("initiated_date"), ::OpenAPI::toJsonValue(m_initiated_date));
    }
    if (m_initiator_isSet) {
        obj.insert(QString("initiator"), ::OpenAPI::toJsonValue(m_initiator));
    }
    if (m_scopes.isSet()) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_target_application_id_isSet) {
        obj.insert(QString("target_application_id"), ::OpenAPI::toJsonValue(m_target_application_id));
    }
    return obj;
}

OAIActivityType OAIActivity::getActivity() const {
    return m_activity;
}
void OAIActivity::setActivity(const OAIActivityType &activity) {
    m_activity = activity;
    m_activity_isSet = true;
}

bool OAIActivity::is_activity_Set() const{
    return m_activity_isSet;
}

bool OAIActivity::is_activity_Valid() const{
    return m_activity_isValid;
}

QString OAIActivity::getId() const {
    return m_id;
}
void OAIActivity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActivity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActivity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIActivity::getInitiatedDate() const {
    return m_initiated_date;
}
void OAIActivity::setInitiatedDate(const QString &initiated_date) {
    m_initiated_date = initiated_date;
    m_initiated_date_isSet = true;
}

bool OAIActivity::is_initiated_date_Set() const{
    return m_initiated_date_isSet;
}

bool OAIActivity::is_initiated_date_Valid() const{
    return m_initiated_date_isValid;
}

QString OAIActivity::getInitiator() const {
    return m_initiator;
}
void OAIActivity::setInitiator(const QString &initiator) {
    m_initiator = initiator;
    m_initiator_isSet = true;
}

bool OAIActivity::is_initiator_Set() const{
    return m_initiator_isSet;
}

bool OAIActivity::is_initiator_Valid() const{
    return m_initiator_isValid;
}

OAIScopesNullable OAIActivity::getScopes() const {
    return m_scopes;
}
void OAIActivity::setScopes(const OAIScopesNullable &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIActivity::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIActivity::is_scopes_Valid() const{
    return m_scopes_isValid;
}

OAIActionState OAIActivity::getState() const {
    return m_state;
}
void OAIActivity::setState(const OAIActionState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIActivity::is_state_Set() const{
    return m_state_isSet;
}

bool OAIActivity::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIActivity::getTargetApplicationId() const {
    return m_target_application_id;
}
void OAIActivity::setTargetApplicationId(const QString &target_application_id) {
    m_target_application_id = target_application_id;
    m_target_application_id_isSet = true;
}

bool OAIActivity::is_target_application_id_Set() const{
    return m_target_application_id_isSet;
}

bool OAIActivity::is_target_application_id_Valid() const{
    return m_target_application_id_isValid;
}

bool OAIActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiated_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activity_isValid && m_id_isValid && m_initiated_date_isValid && m_initiator_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
