/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRiskCheckDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRiskCheckDevice::OAIRiskCheckDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRiskCheckDevice::OAIRiskCheckDevice() {
    this->initializeModel();
}

OAIRiskCheckDevice::~OAIRiskCheckDevice() {}

void OAIRiskCheckDevice::initializeModel() {

    m_ip_proxy_type_isSet = false;
    m_ip_proxy_type_isValid = false;

    m_ip_spam_list_count_isSet = false;
    m_ip_spam_list_count_isValid = false;

    m_ip_timezone_offset_isSet = false;
    m_ip_timezone_offset_isValid = false;
}

void OAIRiskCheckDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRiskCheckDevice::fromJsonObject(QJsonObject json) {

    m_ip_proxy_type_isValid = ::OpenAPI::fromJsonValue(m_ip_proxy_type, json[QString("ip_proxy_type")]);
    m_ip_proxy_type_isSet = !json[QString("ip_proxy_type")].isNull() && m_ip_proxy_type_isValid;

    m_ip_spam_list_count_isValid = ::OpenAPI::fromJsonValue(m_ip_spam_list_count, json[QString("ip_spam_list_count")]);
    m_ip_spam_list_count_isSet = !json[QString("ip_spam_list_count")].isNull() && m_ip_spam_list_count_isValid;

    m_ip_timezone_offset_isValid = ::OpenAPI::fromJsonValue(m_ip_timezone_offset, json[QString("ip_timezone_offset")]);
    m_ip_timezone_offset_isSet = !json[QString("ip_timezone_offset")].isNull() && m_ip_timezone_offset_isValid;
}

QString OAIRiskCheckDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRiskCheckDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_proxy_type.isSet()) {
        obj.insert(QString("ip_proxy_type"), ::OpenAPI::toJsonValue(m_ip_proxy_type));
    }
    if (m_ip_spam_list_count_isSet) {
        obj.insert(QString("ip_spam_list_count"), ::OpenAPI::toJsonValue(m_ip_spam_list_count));
    }
    if (m_ip_timezone_offset_isSet) {
        obj.insert(QString("ip_timezone_offset"), ::OpenAPI::toJsonValue(m_ip_timezone_offset));
    }
    return obj;
}

OAIProxyType OAIRiskCheckDevice::getIpProxyType() const {
    return m_ip_proxy_type;
}
void OAIRiskCheckDevice::setIpProxyType(const OAIProxyType &ip_proxy_type) {
    m_ip_proxy_type = ip_proxy_type;
    m_ip_proxy_type_isSet = true;
}

bool OAIRiskCheckDevice::is_ip_proxy_type_Set() const{
    return m_ip_proxy_type_isSet;
}

bool OAIRiskCheckDevice::is_ip_proxy_type_Valid() const{
    return m_ip_proxy_type_isValid;
}

qint32 OAIRiskCheckDevice::getIpSpamListCount() const {
    return m_ip_spam_list_count;
}
void OAIRiskCheckDevice::setIpSpamListCount(const qint32 &ip_spam_list_count) {
    m_ip_spam_list_count = ip_spam_list_count;
    m_ip_spam_list_count_isSet = true;
}

bool OAIRiskCheckDevice::is_ip_spam_list_count_Set() const{
    return m_ip_spam_list_count_isSet;
}

bool OAIRiskCheckDevice::is_ip_spam_list_count_Valid() const{
    return m_ip_spam_list_count_isValid;
}

QString OAIRiskCheckDevice::getIpTimezoneOffset() const {
    return m_ip_timezone_offset;
}
void OAIRiskCheckDevice::setIpTimezoneOffset(const QString &ip_timezone_offset) {
    m_ip_timezone_offset = ip_timezone_offset;
    m_ip_timezone_offset_isSet = true;
}

bool OAIRiskCheckDevice::is_ip_timezone_offset_Set() const{
    return m_ip_timezone_offset_isSet;
}

bool OAIRiskCheckDevice::is_ip_timezone_offset_Valid() const{
    return m_ip_timezone_offset_isValid;
}

bool OAIRiskCheckDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_proxy_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_spam_list_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_timezone_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRiskCheckDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ip_proxy_type_isValid && m_ip_spam_list_count_isValid && m_ip_timezone_offset_isValid && true;
}

} // namespace OpenAPI
