/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemApplicationScopesUpdateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemApplicationScopesUpdateRequest::OAIItemApplicationScopesUpdateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemApplicationScopesUpdateRequest::OAIItemApplicationScopesUpdateRequest() {
    this->initializeModel();
}

OAIItemApplicationScopesUpdateRequest::~OAIItemApplicationScopesUpdateRequest() {}

void OAIItemApplicationScopesUpdateRequest::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIItemApplicationScopesUpdateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemApplicationScopesUpdateRequest::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("access_token")]);
    m_access_token_isSet = !json[QString("access_token")].isNull() && m_access_token_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("application_id")]);
    m_application_id_isSet = !json[QString("application_id")].isNull() && m_application_id_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIItemApplicationScopesUpdateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemApplicationScopesUpdateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("access_token"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("application_id"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_scopes.isSet()) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIItemApplicationScopesUpdateRequest::getAccessToken() const {
    return m_access_token;
}
void OAIItemApplicationScopesUpdateRequest::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIItemApplicationScopesUpdateRequest::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIItemApplicationScopesUpdateRequest::is_access_token_Valid() const{
    return m_access_token_isValid;
}

QString OAIItemApplicationScopesUpdateRequest::getApplicationId() const {
    return m_application_id;
}
void OAIItemApplicationScopesUpdateRequest::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIItemApplicationScopesUpdateRequest::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIItemApplicationScopesUpdateRequest::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIItemApplicationScopesUpdateRequest::getClientId() const {
    return m_client_id;
}
void OAIItemApplicationScopesUpdateRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIItemApplicationScopesUpdateRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIItemApplicationScopesUpdateRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

OAIScopesContext OAIItemApplicationScopesUpdateRequest::getContext() const {
    return m_context;
}
void OAIItemApplicationScopesUpdateRequest::setContext(const OAIScopesContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIItemApplicationScopesUpdateRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAIItemApplicationScopesUpdateRequest::is_context_Valid() const{
    return m_context_isValid;
}

OAIScopes OAIItemApplicationScopesUpdateRequest::getScopes() const {
    return m_scopes;
}
void OAIItemApplicationScopesUpdateRequest::setScopes(const OAIScopes &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIItemApplicationScopesUpdateRequest::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIItemApplicationScopesUpdateRequest::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAIItemApplicationScopesUpdateRequest::getSecret() const {
    return m_secret;
}
void OAIItemApplicationScopesUpdateRequest::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIItemApplicationScopesUpdateRequest::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIItemApplicationScopesUpdateRequest::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAIItemApplicationScopesUpdateRequest::getState() const {
    return m_state;
}
void OAIItemApplicationScopesUpdateRequest::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIItemApplicationScopesUpdateRequest::is_state_Set() const{
    return m_state_isSet;
}

bool OAIItemApplicationScopesUpdateRequest::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIItemApplicationScopesUpdateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemApplicationScopesUpdateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_token_isValid && m_application_id_isValid && m_context_isValid && m_scopes_isValid && true;
}

} // namespace OpenAPI
