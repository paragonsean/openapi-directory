/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityWatchlistScreeningSearchTerms.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityWatchlistScreeningSearchTerms::OAIEntityWatchlistScreeningSearchTerms(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityWatchlistScreeningSearchTerms::OAIEntityWatchlistScreeningSearchTerms() {
    this->initializeModel();
}

OAIEntityWatchlistScreeningSearchTerms::~OAIEntityWatchlistScreeningSearchTerms() {}

void OAIEntityWatchlistScreeningSearchTerms::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_document_number_isSet = false;
    m_document_number_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_entity_watchlist_program_id_isSet = false;
    m_entity_watchlist_program_id_isValid = false;

    m_legal_name_isSet = false;
    m_legal_name_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIEntityWatchlistScreeningSearchTerms::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityWatchlistScreeningSearchTerms::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_document_number_isValid = ::OpenAPI::fromJsonValue(m_document_number, json[QString("document_number")]);
    m_document_number_isSet = !json[QString("document_number")].isNull() && m_document_number_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("email_address")]);
    m_email_address_isSet = !json[QString("email_address")].isNull() && m_email_address_isValid;

    m_entity_watchlist_program_id_isValid = ::OpenAPI::fromJsonValue(m_entity_watchlist_program_id, json[QString("entity_watchlist_program_id")]);
    m_entity_watchlist_program_id_isSet = !json[QString("entity_watchlist_program_id")].isNull() && m_entity_watchlist_program_id_isValid;

    m_legal_name_isValid = ::OpenAPI::fromJsonValue(m_legal_name, json[QString("legal_name")]);
    m_legal_name_isSet = !json[QString("legal_name")].isNull() && m_legal_name_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phone_number")]);
    m_phone_number_isSet = !json[QString("phone_number")].isNull() && m_phone_number_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIEntityWatchlistScreeningSearchTerms::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityWatchlistScreeningSearchTerms::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_document_number_isSet) {
        obj.insert(QString("document_number"), ::OpenAPI::toJsonValue(m_document_number));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("email_address"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_entity_watchlist_program_id_isSet) {
        obj.insert(QString("entity_watchlist_program_id"), ::OpenAPI::toJsonValue(m_entity_watchlist_program_id));
    }
    if (m_legal_name_isSet) {
        obj.insert(QString("legal_name"), ::OpenAPI::toJsonValue(m_legal_name));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phone_number"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIEntityWatchlistScreeningSearchTerms::getCountry() const {
    return m_country;
}
void OAIEntityWatchlistScreeningSearchTerms::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIEntityWatchlistScreeningSearchTerms::is_country_Set() const{
    return m_country_isSet;
}

bool OAIEntityWatchlistScreeningSearchTerms::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIEntityWatchlistScreeningSearchTerms::getDocumentNumber() const {
    return m_document_number;
}
void OAIEntityWatchlistScreeningSearchTerms::setDocumentNumber(const QString &document_number) {
    m_document_number = document_number;
    m_document_number_isSet = true;
}

bool OAIEntityWatchlistScreeningSearchTerms::is_document_number_Set() const{
    return m_document_number_isSet;
}

bool OAIEntityWatchlistScreeningSearchTerms::is_document_number_Valid() const{
    return m_document_number_isValid;
}

QString OAIEntityWatchlistScreeningSearchTerms::getEmailAddress() const {
    return m_email_address;
}
void OAIEntityWatchlistScreeningSearchTerms::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIEntityWatchlistScreeningSearchTerms::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIEntityWatchlistScreeningSearchTerms::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAIEntityWatchlistScreeningSearchTerms::getEntityWatchlistProgramId() const {
    return m_entity_watchlist_program_id;
}
void OAIEntityWatchlistScreeningSearchTerms::setEntityWatchlistProgramId(const QString &entity_watchlist_program_id) {
    m_entity_watchlist_program_id = entity_watchlist_program_id;
    m_entity_watchlist_program_id_isSet = true;
}

bool OAIEntityWatchlistScreeningSearchTerms::is_entity_watchlist_program_id_Set() const{
    return m_entity_watchlist_program_id_isSet;
}

bool OAIEntityWatchlistScreeningSearchTerms::is_entity_watchlist_program_id_Valid() const{
    return m_entity_watchlist_program_id_isValid;
}

QString OAIEntityWatchlistScreeningSearchTerms::getLegalName() const {
    return m_legal_name;
}
void OAIEntityWatchlistScreeningSearchTerms::setLegalName(const QString &legal_name) {
    m_legal_name = legal_name;
    m_legal_name_isSet = true;
}

bool OAIEntityWatchlistScreeningSearchTerms::is_legal_name_Set() const{
    return m_legal_name_isSet;
}

bool OAIEntityWatchlistScreeningSearchTerms::is_legal_name_Valid() const{
    return m_legal_name_isValid;
}

QString OAIEntityWatchlistScreeningSearchTerms::getPhoneNumber() const {
    return m_phone_number;
}
void OAIEntityWatchlistScreeningSearchTerms::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIEntityWatchlistScreeningSearchTerms::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIEntityWatchlistScreeningSearchTerms::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIEntityWatchlistScreeningSearchTerms::getUrl() const {
    return m_url;
}
void OAIEntityWatchlistScreeningSearchTerms::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEntityWatchlistScreeningSearchTerms::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEntityWatchlistScreeningSearchTerms::is_url_Valid() const{
    return m_url_isValid;
}

double OAIEntityWatchlistScreeningSearchTerms::getVersion() const {
    return m_version;
}
void OAIEntityWatchlistScreeningSearchTerms::setVersion(const double &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIEntityWatchlistScreeningSearchTerms::is_version_Set() const{
    return m_version_isSet;
}

bool OAIEntityWatchlistScreeningSearchTerms::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIEntityWatchlistScreeningSearchTerms::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_watchlist_program_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityWatchlistScreeningSearchTerms::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && m_document_number_isValid && m_email_address_isValid && m_entity_watchlist_program_id_isValid && m_legal_name_isValid && m_phone_number_isValid && m_url_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
