/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreditPayStub.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreditPayStub::OAICreditPayStub(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreditPayStub::OAICreditPayStub() {
    this->initializeModel();
}

OAICreditPayStub::~OAICreditPayStub() {}

void OAICreditPayStub::initializeModel() {

    m_deductions_isSet = false;
    m_deductions_isValid = false;

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_document_metadata_isSet = false;
    m_document_metadata_isValid = false;

    m_earnings_isSet = false;
    m_earnings_isValid = false;

    m_employee_isSet = false;
    m_employee_isValid = false;

    m_employer_isSet = false;
    m_employer_isValid = false;

    m_net_pay_isSet = false;
    m_net_pay_isValid = false;

    m_pay_period_details_isSet = false;
    m_pay_period_details_isValid = false;
}

void OAICreditPayStub::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreditPayStub::fromJsonObject(QJsonObject json) {

    m_deductions_isValid = ::OpenAPI::fromJsonValue(m_deductions, json[QString("deductions")]);
    m_deductions_isSet = !json[QString("deductions")].isNull() && m_deductions_isValid;

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("document_id")]);
    m_document_id_isSet = !json[QString("document_id")].isNull() && m_document_id_isValid;

    m_document_metadata_isValid = ::OpenAPI::fromJsonValue(m_document_metadata, json[QString("document_metadata")]);
    m_document_metadata_isSet = !json[QString("document_metadata")].isNull() && m_document_metadata_isValid;

    m_earnings_isValid = ::OpenAPI::fromJsonValue(m_earnings, json[QString("earnings")]);
    m_earnings_isSet = !json[QString("earnings")].isNull() && m_earnings_isValid;

    m_employee_isValid = ::OpenAPI::fromJsonValue(m_employee, json[QString("employee")]);
    m_employee_isSet = !json[QString("employee")].isNull() && m_employee_isValid;

    m_employer_isValid = ::OpenAPI::fromJsonValue(m_employer, json[QString("employer")]);
    m_employer_isSet = !json[QString("employer")].isNull() && m_employer_isValid;

    m_net_pay_isValid = ::OpenAPI::fromJsonValue(m_net_pay, json[QString("net_pay")]);
    m_net_pay_isSet = !json[QString("net_pay")].isNull() && m_net_pay_isValid;

    m_pay_period_details_isValid = ::OpenAPI::fromJsonValue(m_pay_period_details, json[QString("pay_period_details")]);
    m_pay_period_details_isSet = !json[QString("pay_period_details")].isNull() && m_pay_period_details_isValid;
}

QString OAICreditPayStub::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreditPayStub::asJsonObject() const {
    QJsonObject obj;
    if (m_deductions.isSet()) {
        obj.insert(QString("deductions"), ::OpenAPI::toJsonValue(m_deductions));
    }
    if (m_document_id_isSet) {
        obj.insert(QString("document_id"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_document_metadata.isSet()) {
        obj.insert(QString("document_metadata"), ::OpenAPI::toJsonValue(m_document_metadata));
    }
    if (m_earnings.isSet()) {
        obj.insert(QString("earnings"), ::OpenAPI::toJsonValue(m_earnings));
    }
    if (m_employee.isSet()) {
        obj.insert(QString("employee"), ::OpenAPI::toJsonValue(m_employee));
    }
    if (m_employer.isSet()) {
        obj.insert(QString("employer"), ::OpenAPI::toJsonValue(m_employer));
    }
    if (m_net_pay.isSet()) {
        obj.insert(QString("net_pay"), ::OpenAPI::toJsonValue(m_net_pay));
    }
    if (m_pay_period_details.isSet()) {
        obj.insert(QString("pay_period_details"), ::OpenAPI::toJsonValue(m_pay_period_details));
    }
    return obj;
}

OAICreditPayStubDeductions OAICreditPayStub::getDeductions() const {
    return m_deductions;
}
void OAICreditPayStub::setDeductions(const OAICreditPayStubDeductions &deductions) {
    m_deductions = deductions;
    m_deductions_isSet = true;
}

bool OAICreditPayStub::is_deductions_Set() const{
    return m_deductions_isSet;
}

bool OAICreditPayStub::is_deductions_Valid() const{
    return m_deductions_isValid;
}

QString OAICreditPayStub::getDocumentId() const {
    return m_document_id;
}
void OAICreditPayStub::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAICreditPayStub::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAICreditPayStub::is_document_id_Valid() const{
    return m_document_id_isValid;
}

OAICreditDocumentMetadata OAICreditPayStub::getDocumentMetadata() const {
    return m_document_metadata;
}
void OAICreditPayStub::setDocumentMetadata(const OAICreditDocumentMetadata &document_metadata) {
    m_document_metadata = document_metadata;
    m_document_metadata_isSet = true;
}

bool OAICreditPayStub::is_document_metadata_Set() const{
    return m_document_metadata_isSet;
}

bool OAICreditPayStub::is_document_metadata_Valid() const{
    return m_document_metadata_isValid;
}

OAICreditPayStubEarnings OAICreditPayStub::getEarnings() const {
    return m_earnings;
}
void OAICreditPayStub::setEarnings(const OAICreditPayStubEarnings &earnings) {
    m_earnings = earnings;
    m_earnings_isSet = true;
}

bool OAICreditPayStub::is_earnings_Set() const{
    return m_earnings_isSet;
}

bool OAICreditPayStub::is_earnings_Valid() const{
    return m_earnings_isValid;
}

OAICreditPayStubEmployee OAICreditPayStub::getEmployee() const {
    return m_employee;
}
void OAICreditPayStub::setEmployee(const OAICreditPayStubEmployee &employee) {
    m_employee = employee;
    m_employee_isSet = true;
}

bool OAICreditPayStub::is_employee_Set() const{
    return m_employee_isSet;
}

bool OAICreditPayStub::is_employee_Valid() const{
    return m_employee_isValid;
}

OAICreditPayStubEmployer OAICreditPayStub::getEmployer() const {
    return m_employer;
}
void OAICreditPayStub::setEmployer(const OAICreditPayStubEmployer &employer) {
    m_employer = employer;
    m_employer_isSet = true;
}

bool OAICreditPayStub::is_employer_Set() const{
    return m_employer_isSet;
}

bool OAICreditPayStub::is_employer_Valid() const{
    return m_employer_isValid;
}

OAICreditPayStubNetPay OAICreditPayStub::getNetPay() const {
    return m_net_pay;
}
void OAICreditPayStub::setNetPay(const OAICreditPayStubNetPay &net_pay) {
    m_net_pay = net_pay;
    m_net_pay_isSet = true;
}

bool OAICreditPayStub::is_net_pay_Set() const{
    return m_net_pay_isSet;
}

bool OAICreditPayStub::is_net_pay_Valid() const{
    return m_net_pay_isValid;
}

OAIPayStubPayPeriodDetails OAICreditPayStub::getPayPeriodDetails() const {
    return m_pay_period_details;
}
void OAICreditPayStub::setPayPeriodDetails(const OAIPayStubPayPeriodDetails &pay_period_details) {
    m_pay_period_details = pay_period_details;
    m_pay_period_details_isSet = true;
}

bool OAICreditPayStub::is_pay_period_details_Set() const{
    return m_pay_period_details_isSet;
}

bool OAICreditPayStub::is_pay_period_details_Valid() const{
    return m_pay_period_details_isValid;
}

bool OAICreditPayStub::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deductions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_earnings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_pay.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_period_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreditPayStub::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deductions_isValid && m_document_id_isValid && m_document_metadata_isValid && m_earnings_isValid && m_employee_isValid && m_employer_isValid && m_net_pay_isValid && m_pay_period_details_isValid && true;
}

} // namespace OpenAPI
