/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountIdentityMatchScore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountIdentityMatchScore::OAIAccountIdentityMatchScore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountIdentityMatchScore::OAIAccountIdentityMatchScore() {
    this->initializeModel();
}

OAIAccountIdentityMatchScore::~OAIAccountIdentityMatchScore() {}

void OAIAccountIdentityMatchScore::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_balances_isSet = false;
    m_balances_isValid = false;

    m_mask_isSet = false;
    m_mask_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_official_name_isSet = false;
    m_official_name_isValid = false;

    m_persistent_account_id_isSet = false;
    m_persistent_account_id_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_verification_status_isSet = false;
    m_verification_status_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_legal_name_isSet = false;
    m_legal_name_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;
}

void OAIAccountIdentityMatchScore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountIdentityMatchScore::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_balances_isValid = ::OpenAPI::fromJsonValue(m_balances, json[QString("balances")]);
    m_balances_isSet = !json[QString("balances")].isNull() && m_balances_isValid;

    m_mask_isValid = ::OpenAPI::fromJsonValue(m_mask, json[QString("mask")]);
    m_mask_isSet = !json[QString("mask")].isNull() && m_mask_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_official_name_isValid = ::OpenAPI::fromJsonValue(m_official_name, json[QString("official_name")]);
    m_official_name_isSet = !json[QString("official_name")].isNull() && m_official_name_isValid;

    m_persistent_account_id_isValid = ::OpenAPI::fromJsonValue(m_persistent_account_id, json[QString("persistent_account_id")]);
    m_persistent_account_id_isSet = !json[QString("persistent_account_id")].isNull() && m_persistent_account_id_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_verification_status_isValid = ::OpenAPI::fromJsonValue(m_verification_status, json[QString("verification_status")]);
    m_verification_status_isSet = !json[QString("verification_status")].isNull() && m_verification_status_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("email_address")]);
    m_email_address_isSet = !json[QString("email_address")].isNull() && m_email_address_isValid;

    m_legal_name_isValid = ::OpenAPI::fromJsonValue(m_legal_name, json[QString("legal_name")]);
    m_legal_name_isSet = !json[QString("legal_name")].isNull() && m_legal_name_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phone_number")]);
    m_phone_number_isSet = !json[QString("phone_number")].isNull() && m_phone_number_isValid;
}

QString OAIAccountIdentityMatchScore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountIdentityMatchScore::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_balances.isSet()) {
        obj.insert(QString("balances"), ::OpenAPI::toJsonValue(m_balances));
    }
    if (m_mask_isSet) {
        obj.insert(QString("mask"), ::OpenAPI::toJsonValue(m_mask));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_official_name_isSet) {
        obj.insert(QString("official_name"), ::OpenAPI::toJsonValue(m_official_name));
    }
    if (m_persistent_account_id_isSet) {
        obj.insert(QString("persistent_account_id"), ::OpenAPI::toJsonValue(m_persistent_account_id));
    }
    if (m_subtype.isSet()) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_verification_status_isSet) {
        obj.insert(QString("verification_status"), ::OpenAPI::toJsonValue(m_verification_status));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_email_address.isSet()) {
        obj.insert(QString("email_address"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_legal_name.isSet()) {
        obj.insert(QString("legal_name"), ::OpenAPI::toJsonValue(m_legal_name));
    }
    if (m_phone_number.isSet()) {
        obj.insert(QString("phone_number"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    return obj;
}

QString OAIAccountIdentityMatchScore::getAccountId() const {
    return m_account_id;
}
void OAIAccountIdentityMatchScore::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAccountIdentityMatchScore::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAccountIdentityMatchScore::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIAccountBalance OAIAccountIdentityMatchScore::getBalances() const {
    return m_balances;
}
void OAIAccountIdentityMatchScore::setBalances(const OAIAccountBalance &balances) {
    m_balances = balances;
    m_balances_isSet = true;
}

bool OAIAccountIdentityMatchScore::is_balances_Set() const{
    return m_balances_isSet;
}

bool OAIAccountIdentityMatchScore::is_balances_Valid() const{
    return m_balances_isValid;
}

QString OAIAccountIdentityMatchScore::getMask() const {
    return m_mask;
}
void OAIAccountIdentityMatchScore::setMask(const QString &mask) {
    m_mask = mask;
    m_mask_isSet = true;
}

bool OAIAccountIdentityMatchScore::is_mask_Set() const{
    return m_mask_isSet;
}

bool OAIAccountIdentityMatchScore::is_mask_Valid() const{
    return m_mask_isValid;
}

QString OAIAccountIdentityMatchScore::getName() const {
    return m_name;
}
void OAIAccountIdentityMatchScore::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccountIdentityMatchScore::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccountIdentityMatchScore::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAccountIdentityMatchScore::getOfficialName() const {
    return m_official_name;
}
void OAIAccountIdentityMatchScore::setOfficialName(const QString &official_name) {
    m_official_name = official_name;
    m_official_name_isSet = true;
}

bool OAIAccountIdentityMatchScore::is_official_name_Set() const{
    return m_official_name_isSet;
}

bool OAIAccountIdentityMatchScore::is_official_name_Valid() const{
    return m_official_name_isValid;
}

QString OAIAccountIdentityMatchScore::getPersistentAccountId() const {
    return m_persistent_account_id;
}
void OAIAccountIdentityMatchScore::setPersistentAccountId(const QString &persistent_account_id) {
    m_persistent_account_id = persistent_account_id;
    m_persistent_account_id_isSet = true;
}

bool OAIAccountIdentityMatchScore::is_persistent_account_id_Set() const{
    return m_persistent_account_id_isSet;
}

bool OAIAccountIdentityMatchScore::is_persistent_account_id_Valid() const{
    return m_persistent_account_id_isValid;
}

OAIAccountSubtype OAIAccountIdentityMatchScore::getSubtype() const {
    return m_subtype;
}
void OAIAccountIdentityMatchScore::setSubtype(const OAIAccountSubtype &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAIAccountIdentityMatchScore::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAIAccountIdentityMatchScore::is_subtype_Valid() const{
    return m_subtype_isValid;
}

OAIAccountType OAIAccountIdentityMatchScore::getType() const {
    return m_type;
}
void OAIAccountIdentityMatchScore::setType(const OAIAccountType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAccountIdentityMatchScore::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAccountIdentityMatchScore::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAccountIdentityMatchScore::getVerificationStatus() const {
    return m_verification_status;
}
void OAIAccountIdentityMatchScore::setVerificationStatus(const QString &verification_status) {
    m_verification_status = verification_status;
    m_verification_status_isSet = true;
}

bool OAIAccountIdentityMatchScore::is_verification_status_Set() const{
    return m_verification_status_isSet;
}

bool OAIAccountIdentityMatchScore::is_verification_status_Valid() const{
    return m_verification_status_isValid;
}

OAIAddressMatchScore OAIAccountIdentityMatchScore::getAddress() const {
    return m_address;
}
void OAIAccountIdentityMatchScore::setAddress(const OAIAddressMatchScore &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAccountIdentityMatchScore::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAccountIdentityMatchScore::is_address_Valid() const{
    return m_address_isValid;
}

OAIEmailAddressMatchScore OAIAccountIdentityMatchScore::getEmailAddress() const {
    return m_email_address;
}
void OAIAccountIdentityMatchScore::setEmailAddress(const OAIEmailAddressMatchScore &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIAccountIdentityMatchScore::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIAccountIdentityMatchScore::is_email_address_Valid() const{
    return m_email_address_isValid;
}

OAINameMatchScore OAIAccountIdentityMatchScore::getLegalName() const {
    return m_legal_name;
}
void OAIAccountIdentityMatchScore::setLegalName(const OAINameMatchScore &legal_name) {
    m_legal_name = legal_name;
    m_legal_name_isSet = true;
}

bool OAIAccountIdentityMatchScore::is_legal_name_Set() const{
    return m_legal_name_isSet;
}

bool OAIAccountIdentityMatchScore::is_legal_name_Valid() const{
    return m_legal_name_isValid;
}

OAIPhoneNumberMatchScore OAIAccountIdentityMatchScore::getPhoneNumber() const {
    return m_phone_number;
}
void OAIAccountIdentityMatchScore::setPhoneNumber(const OAIPhoneNumberMatchScore &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIAccountIdentityMatchScore::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIAccountIdentityMatchScore::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

bool OAIAccountIdentityMatchScore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_official_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistent_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountIdentityMatchScore::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_balances_isValid && m_mask_isValid && m_name_isValid && m_official_name_isValid && m_subtype_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
