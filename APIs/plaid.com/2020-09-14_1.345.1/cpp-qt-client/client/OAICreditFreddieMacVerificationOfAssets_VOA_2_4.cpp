/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreditFreddieMacVerificationOfAssets_VOA_2_4.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreditFreddieMacVerificationOfAssets_VOA_2_4::OAICreditFreddieMacVerificationOfAssets_VOA_2_4(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreditFreddieMacVerificationOfAssets_VOA_2_4::OAICreditFreddieMacVerificationOfAssets_VOA_2_4() {
    this->initializeModel();
}

OAICreditFreddieMacVerificationOfAssets_VOA_2_4::~OAICreditFreddieMacVerificationOfAssets_VOA_2_4() {}

void OAICreditFreddieMacVerificationOfAssets_VOA_2_4::initializeModel() {

    m_deal_isSet = false;
    m_deal_isValid = false;

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;
}

void OAICreditFreddieMacVerificationOfAssets_VOA_2_4::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreditFreddieMacVerificationOfAssets_VOA_2_4::fromJsonObject(QJsonObject json) {

    m_deal_isValid = ::OpenAPI::fromJsonValue(m_deal, json[QString("DEAL")]);
    m_deal_isSet = !json[QString("DEAL")].isNull() && m_deal_isValid;

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("SchemaVersion")]);
    m_schema_version_isSet = !json[QString("SchemaVersion")].isNull() && m_schema_version_isValid;
}

QString OAICreditFreddieMacVerificationOfAssets_VOA_2_4::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreditFreddieMacVerificationOfAssets_VOA_2_4::asJsonObject() const {
    QJsonObject obj;
    if (m_deal.isSet()) {
        obj.insert(QString("DEAL"), ::OpenAPI::toJsonValue(m_deal));
    }
    if (m_schema_version_isSet) {
        obj.insert(QString("SchemaVersion"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    return obj;
}

OAICreditFreddieMacVerificationOfAssetsDeal_VOA_2_4 OAICreditFreddieMacVerificationOfAssets_VOA_2_4::getDeal() const {
    return m_deal;
}
void OAICreditFreddieMacVerificationOfAssets_VOA_2_4::setDeal(const OAICreditFreddieMacVerificationOfAssetsDeal_VOA_2_4 &deal) {
    m_deal = deal;
    m_deal_isSet = true;
}

bool OAICreditFreddieMacVerificationOfAssets_VOA_2_4::is_deal_Set() const{
    return m_deal_isSet;
}

bool OAICreditFreddieMacVerificationOfAssets_VOA_2_4::is_deal_Valid() const{
    return m_deal_isValid;
}

double OAICreditFreddieMacVerificationOfAssets_VOA_2_4::getSchemaVersion() const {
    return m_schema_version;
}
void OAICreditFreddieMacVerificationOfAssets_VOA_2_4::setSchemaVersion(const double &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAICreditFreddieMacVerificationOfAssets_VOA_2_4::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAICreditFreddieMacVerificationOfAssets_VOA_2_4::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

bool OAICreditFreddieMacVerificationOfAssets_VOA_2_4::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreditFreddieMacVerificationOfAssets_VOA_2_4::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deal_isValid && m_schema_version_isValid && true;
}

} // namespace OpenAPI
