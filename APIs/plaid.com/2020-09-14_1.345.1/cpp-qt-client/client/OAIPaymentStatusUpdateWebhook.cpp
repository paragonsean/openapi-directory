/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentStatusUpdateWebhook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentStatusUpdateWebhook::OAIPaymentStatusUpdateWebhook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentStatusUpdateWebhook::OAIPaymentStatusUpdateWebhook() {
    this->initializeModel();
}

OAIPaymentStatusUpdateWebhook::~OAIPaymentStatusUpdateWebhook() {}

void OAIPaymentStatusUpdateWebhook::initializeModel() {

    m_adjusted_reference_isSet = false;
    m_adjusted_reference_isValid = false;

    m_adjusted_start_date_isSet = false;
    m_adjusted_start_date_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_new_payment_status_isSet = false;
    m_new_payment_status_isValid = false;

    m_old_payment_status_isSet = false;
    m_old_payment_status_isValid = false;

    m_original_reference_isSet = false;
    m_original_reference_isValid = false;

    m_original_start_date_isSet = false;
    m_original_start_date_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_webhook_code_isSet = false;
    m_webhook_code_isValid = false;

    m_webhook_type_isSet = false;
    m_webhook_type_isValid = false;
}

void OAIPaymentStatusUpdateWebhook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentStatusUpdateWebhook::fromJsonObject(QJsonObject json) {

    m_adjusted_reference_isValid = ::OpenAPI::fromJsonValue(m_adjusted_reference, json[QString("adjusted_reference")]);
    m_adjusted_reference_isSet = !json[QString("adjusted_reference")].isNull() && m_adjusted_reference_isValid;

    m_adjusted_start_date_isValid = ::OpenAPI::fromJsonValue(m_adjusted_start_date, json[QString("adjusted_start_date")]);
    m_adjusted_start_date_isSet = !json[QString("adjusted_start_date")].isNull() && m_adjusted_start_date_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_new_payment_status_isValid = ::OpenAPI::fromJsonValue(m_new_payment_status, json[QString("new_payment_status")]);
    m_new_payment_status_isSet = !json[QString("new_payment_status")].isNull() && m_new_payment_status_isValid;

    m_old_payment_status_isValid = ::OpenAPI::fromJsonValue(m_old_payment_status, json[QString("old_payment_status")]);
    m_old_payment_status_isSet = !json[QString("old_payment_status")].isNull() && m_old_payment_status_isValid;

    m_original_reference_isValid = ::OpenAPI::fromJsonValue(m_original_reference, json[QString("original_reference")]);
    m_original_reference_isSet = !json[QString("original_reference")].isNull() && m_original_reference_isValid;

    m_original_start_date_isValid = ::OpenAPI::fromJsonValue(m_original_start_date, json[QString("original_start_date")]);
    m_original_start_date_isSet = !json[QString("original_start_date")].isNull() && m_original_start_date_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("payment_id")]);
    m_payment_id_isSet = !json[QString("payment_id")].isNull() && m_payment_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;

    m_webhook_code_isValid = ::OpenAPI::fromJsonValue(m_webhook_code, json[QString("webhook_code")]);
    m_webhook_code_isSet = !json[QString("webhook_code")].isNull() && m_webhook_code_isValid;

    m_webhook_type_isValid = ::OpenAPI::fromJsonValue(m_webhook_type, json[QString("webhook_type")]);
    m_webhook_type_isSet = !json[QString("webhook_type")].isNull() && m_webhook_type_isValid;
}

QString OAIPaymentStatusUpdateWebhook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentStatusUpdateWebhook::asJsonObject() const {
    QJsonObject obj;
    if (m_adjusted_reference_isSet) {
        obj.insert(QString("adjusted_reference"), ::OpenAPI::toJsonValue(m_adjusted_reference));
    }
    if (m_adjusted_start_date_isSet) {
        obj.insert(QString("adjusted_start_date"), ::OpenAPI::toJsonValue(m_adjusted_start_date));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_new_payment_status.isSet()) {
        obj.insert(QString("new_payment_status"), ::OpenAPI::toJsonValue(m_new_payment_status));
    }
    if (m_old_payment_status.isSet()) {
        obj.insert(QString("old_payment_status"), ::OpenAPI::toJsonValue(m_old_payment_status));
    }
    if (m_original_reference_isSet) {
        obj.insert(QString("original_reference"), ::OpenAPI::toJsonValue(m_original_reference));
    }
    if (m_original_start_date_isSet) {
        obj.insert(QString("original_start_date"), ::OpenAPI::toJsonValue(m_original_start_date));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("payment_id"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_webhook_code_isSet) {
        obj.insert(QString("webhook_code"), ::OpenAPI::toJsonValue(m_webhook_code));
    }
    if (m_webhook_type_isSet) {
        obj.insert(QString("webhook_type"), ::OpenAPI::toJsonValue(m_webhook_type));
    }
    return obj;
}

QString OAIPaymentStatusUpdateWebhook::getAdjustedReference() const {
    return m_adjusted_reference;
}
void OAIPaymentStatusUpdateWebhook::setAdjustedReference(const QString &adjusted_reference) {
    m_adjusted_reference = adjusted_reference;
    m_adjusted_reference_isSet = true;
}

bool OAIPaymentStatusUpdateWebhook::is_adjusted_reference_Set() const{
    return m_adjusted_reference_isSet;
}

bool OAIPaymentStatusUpdateWebhook::is_adjusted_reference_Valid() const{
    return m_adjusted_reference_isValid;
}

QDate OAIPaymentStatusUpdateWebhook::getAdjustedStartDate() const {
    return m_adjusted_start_date;
}
void OAIPaymentStatusUpdateWebhook::setAdjustedStartDate(const QDate &adjusted_start_date) {
    m_adjusted_start_date = adjusted_start_date;
    m_adjusted_start_date_isSet = true;
}

bool OAIPaymentStatusUpdateWebhook::is_adjusted_start_date_Set() const{
    return m_adjusted_start_date_isSet;
}

bool OAIPaymentStatusUpdateWebhook::is_adjusted_start_date_Valid() const{
    return m_adjusted_start_date_isValid;
}

OAIWebhookEnvironmentValues OAIPaymentStatusUpdateWebhook::getEnvironment() const {
    return m_environment;
}
void OAIPaymentStatusUpdateWebhook::setEnvironment(const OAIWebhookEnvironmentValues &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIPaymentStatusUpdateWebhook::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIPaymentStatusUpdateWebhook::is_environment_Valid() const{
    return m_environment_isValid;
}

OAIPlaidError OAIPaymentStatusUpdateWebhook::getError() const {
    return m_error;
}
void OAIPaymentStatusUpdateWebhook::setError(const OAIPlaidError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIPaymentStatusUpdateWebhook::is_error_Set() const{
    return m_error_isSet;
}

bool OAIPaymentStatusUpdateWebhook::is_error_Valid() const{
    return m_error_isValid;
}

OAIPaymentInitiationPaymentStatus OAIPaymentStatusUpdateWebhook::getNewPaymentStatus() const {
    return m_new_payment_status;
}
void OAIPaymentStatusUpdateWebhook::setNewPaymentStatus(const OAIPaymentInitiationPaymentStatus &new_payment_status) {
    m_new_payment_status = new_payment_status;
    m_new_payment_status_isSet = true;
}

bool OAIPaymentStatusUpdateWebhook::is_new_payment_status_Set() const{
    return m_new_payment_status_isSet;
}

bool OAIPaymentStatusUpdateWebhook::is_new_payment_status_Valid() const{
    return m_new_payment_status_isValid;
}

OAIPaymentInitiationPaymentStatus OAIPaymentStatusUpdateWebhook::getOldPaymentStatus() const {
    return m_old_payment_status;
}
void OAIPaymentStatusUpdateWebhook::setOldPaymentStatus(const OAIPaymentInitiationPaymentStatus &old_payment_status) {
    m_old_payment_status = old_payment_status;
    m_old_payment_status_isSet = true;
}

bool OAIPaymentStatusUpdateWebhook::is_old_payment_status_Set() const{
    return m_old_payment_status_isSet;
}

bool OAIPaymentStatusUpdateWebhook::is_old_payment_status_Valid() const{
    return m_old_payment_status_isValid;
}

QString OAIPaymentStatusUpdateWebhook::getOriginalReference() const {
    return m_original_reference;
}
void OAIPaymentStatusUpdateWebhook::setOriginalReference(const QString &original_reference) {
    m_original_reference = original_reference;
    m_original_reference_isSet = true;
}

bool OAIPaymentStatusUpdateWebhook::is_original_reference_Set() const{
    return m_original_reference_isSet;
}

bool OAIPaymentStatusUpdateWebhook::is_original_reference_Valid() const{
    return m_original_reference_isValid;
}

QDate OAIPaymentStatusUpdateWebhook::getOriginalStartDate() const {
    return m_original_start_date;
}
void OAIPaymentStatusUpdateWebhook::setOriginalStartDate(const QDate &original_start_date) {
    m_original_start_date = original_start_date;
    m_original_start_date_isSet = true;
}

bool OAIPaymentStatusUpdateWebhook::is_original_start_date_Set() const{
    return m_original_start_date_isSet;
}

bool OAIPaymentStatusUpdateWebhook::is_original_start_date_Valid() const{
    return m_original_start_date_isValid;
}

QString OAIPaymentStatusUpdateWebhook::getPaymentId() const {
    return m_payment_id;
}
void OAIPaymentStatusUpdateWebhook::setPaymentId(const QString &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAIPaymentStatusUpdateWebhook::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAIPaymentStatusUpdateWebhook::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

QDateTime OAIPaymentStatusUpdateWebhook::getTimestamp() const {
    return m_timestamp;
}
void OAIPaymentStatusUpdateWebhook::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIPaymentStatusUpdateWebhook::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIPaymentStatusUpdateWebhook::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIPaymentStatusUpdateWebhook::getTransactionId() const {
    return m_transaction_id;
}
void OAIPaymentStatusUpdateWebhook::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIPaymentStatusUpdateWebhook::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIPaymentStatusUpdateWebhook::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAIPaymentStatusUpdateWebhook::getWebhookCode() const {
    return m_webhook_code;
}
void OAIPaymentStatusUpdateWebhook::setWebhookCode(const QString &webhook_code) {
    m_webhook_code = webhook_code;
    m_webhook_code_isSet = true;
}

bool OAIPaymentStatusUpdateWebhook::is_webhook_code_Set() const{
    return m_webhook_code_isSet;
}

bool OAIPaymentStatusUpdateWebhook::is_webhook_code_Valid() const{
    return m_webhook_code_isValid;
}

QString OAIPaymentStatusUpdateWebhook::getWebhookType() const {
    return m_webhook_type;
}
void OAIPaymentStatusUpdateWebhook::setWebhookType(const QString &webhook_type) {
    m_webhook_type = webhook_type;
    m_webhook_type_isSet = true;
}

bool OAIPaymentStatusUpdateWebhook::is_webhook_type_Set() const{
    return m_webhook_type_isSet;
}

bool OAIPaymentStatusUpdateWebhook::is_webhook_type_Valid() const{
    return m_webhook_type_isValid;
}

bool OAIPaymentStatusUpdateWebhook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjusted_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adjusted_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_payment_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_payment_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentStatusUpdateWebhook::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_adjusted_start_date_isValid && m_environment_isValid && m_new_payment_status_isValid && m_old_payment_status_isValid && m_original_reference_isValid && m_original_start_date_isValid && m_payment_id_isValid && m_timestamp_isValid && m_webhook_code_isValid && m_webhook_type_isValid && true;
}

} // namespace OpenAPI
