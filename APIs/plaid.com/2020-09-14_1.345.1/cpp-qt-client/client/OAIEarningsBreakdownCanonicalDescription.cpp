/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEarningsBreakdownCanonicalDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEarningsBreakdownCanonicalDescription::OAIEarningsBreakdownCanonicalDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEarningsBreakdownCanonicalDescription::OAIEarningsBreakdownCanonicalDescription() {
    this->initializeModel();
}

OAIEarningsBreakdownCanonicalDescription::~OAIEarningsBreakdownCanonicalDescription() {}

void OAIEarningsBreakdownCanonicalDescription::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEarningsBreakdownCanonicalDescription::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEarningsBreakdownCanonicalDescription::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BONUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsBreakdownCanonicalDescription::BONUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMMISSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsBreakdownCanonicalDescription::COMMISSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OVERTIME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsBreakdownCanonicalDescription::OVERTIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAID TIME OFF", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsBreakdownCanonicalDescription::PAID_TIME_OFF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REGULAR PAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsBreakdownCanonicalDescription::REGULAR_PAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VACATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsBreakdownCanonicalDescription::VACATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BASIC ALLOWANCE HOUSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsBreakdownCanonicalDescription::BASIC_ALLOWANCE_HOUSING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BASIC ALLOWANCE SUBSISTENCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsBreakdownCanonicalDescription::BASIC_ALLOWANCE_SUBSISTENCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEarningsBreakdownCanonicalDescription::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEarningsBreakdownCanonicalDescription::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEarningsBreakdownCanonicalDescription::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEarningsBreakdownCanonicalDescription::BONUS:
            val = "BONUS";
            break;
        case eOAIEarningsBreakdownCanonicalDescription::COMMISSION:
            val = "COMMISSION";
            break;
        case eOAIEarningsBreakdownCanonicalDescription::OVERTIME:
            val = "OVERTIME";
            break;
        case eOAIEarningsBreakdownCanonicalDescription::PAID_TIME_OFF:
            val = "PAID TIME OFF";
            break;
        case eOAIEarningsBreakdownCanonicalDescription::REGULAR_PAY:
            val = "REGULAR PAY";
            break;
        case eOAIEarningsBreakdownCanonicalDescription::VACATION:
            val = "VACATION";
            break;
        case eOAIEarningsBreakdownCanonicalDescription::BASIC_ALLOWANCE_HOUSING:
            val = "BASIC ALLOWANCE HOUSING";
            break;
        case eOAIEarningsBreakdownCanonicalDescription::BASIC_ALLOWANCE_SUBSISTENCE:
            val = "BASIC ALLOWANCE SUBSISTENCE";
            break;
        case eOAIEarningsBreakdownCanonicalDescription::OTHER:
            val = "OTHER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEarningsBreakdownCanonicalDescription::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEarningsBreakdownCanonicalDescription::eOAIEarningsBreakdownCanonicalDescription OAIEarningsBreakdownCanonicalDescription::getValue() const {
    return m_value;
}

void OAIEarningsBreakdownCanonicalDescription::setValue(const OAIEarningsBreakdownCanonicalDescription::eOAIEarningsBreakdownCanonicalDescription& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEarningsBreakdownCanonicalDescription::isSet() const {
    
    return m_value_isSet;
}

bool OAIEarningsBreakdownCanonicalDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
