/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityVerificationStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityVerificationStatus::OAIIdentityVerificationStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityVerificationStatus::OAIIdentityVerificationStatus() {
    this->initializeModel();
}

OAIIdentityVerificationStatus::~OAIIdentityVerificationStatus() {}

void OAIIdentityVerificationStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIIdentityVerificationStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIIdentityVerificationStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("active", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStatus::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("success", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStatus::SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("expired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStatus::EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("canceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStatus::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pending_review", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStatus::PENDING_REVIEW;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIIdentityVerificationStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIIdentityVerificationStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIIdentityVerificationStatus::ACTIVE:
            val = "active";
            break;
        case eOAIIdentityVerificationStatus::SUCCESS:
            val = "success";
            break;
        case eOAIIdentityVerificationStatus::FAILED:
            val = "failed";
            break;
        case eOAIIdentityVerificationStatus::EXPIRED:
            val = "expired";
            break;
        case eOAIIdentityVerificationStatus::CANCELED:
            val = "canceled";
            break;
        case eOAIIdentityVerificationStatus::PENDING_REVIEW:
            val = "pending_review";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIIdentityVerificationStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIIdentityVerificationStatus::eOAIIdentityVerificationStatus OAIIdentityVerificationStatus::getValue() const {
    return m_value;
}

void OAIIdentityVerificationStatus::setValue(const OAIIdentityVerificationStatus::eOAIIdentityVerificationStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIIdentityVerificationStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIIdentityVerificationStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
