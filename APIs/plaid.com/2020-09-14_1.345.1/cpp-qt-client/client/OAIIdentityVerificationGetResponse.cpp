/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityVerificationGetResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityVerificationGetResponse::OAIIdentityVerificationGetResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityVerificationGetResponse::OAIIdentityVerificationGetResponse() {
    this->initializeModel();
}

OAIIdentityVerificationGetResponse::~OAIIdentityVerificationGetResponse() {}

void OAIIdentityVerificationGetResponse::initializeModel() {

    m_client_user_id_isSet = false;
    m_client_user_id_isValid = false;

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_documentary_verification_isSet = false;
    m_documentary_verification_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kyc_check_isSet = false;
    m_kyc_check_isValid = false;

    m_previous_attempt_id_isSet = false;
    m_previous_attempt_id_isValid = false;

    m_redacted_at_isSet = false;
    m_redacted_at_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_risk_check_isSet = false;
    m_risk_check_isValid = false;

    m_shareable_url_isSet = false;
    m_shareable_url_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_watchlist_screening_id_isSet = false;
    m_watchlist_screening_id_isValid = false;
}

void OAIIdentityVerificationGetResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityVerificationGetResponse::fromJsonObject(QJsonObject json) {

    m_client_user_id_isValid = ::OpenAPI::fromJsonValue(m_client_user_id, json[QString("client_user_id")]);
    m_client_user_id_isSet = !json[QString("client_user_id")].isNull() && m_client_user_id_isValid;

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completed_at")]);
    m_completed_at_isSet = !json[QString("completed_at")].isNull() && m_completed_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_documentary_verification_isValid = ::OpenAPI::fromJsonValue(m_documentary_verification, json[QString("documentary_verification")]);
    m_documentary_verification_isSet = !json[QString("documentary_verification")].isNull() && m_documentary_verification_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kyc_check_isValid = ::OpenAPI::fromJsonValue(m_kyc_check, json[QString("kyc_check")]);
    m_kyc_check_isSet = !json[QString("kyc_check")].isNull() && m_kyc_check_isValid;

    m_previous_attempt_id_isValid = ::OpenAPI::fromJsonValue(m_previous_attempt_id, json[QString("previous_attempt_id")]);
    m_previous_attempt_id_isSet = !json[QString("previous_attempt_id")].isNull() && m_previous_attempt_id_isValid;

    m_redacted_at_isValid = ::OpenAPI::fromJsonValue(m_redacted_at, json[QString("redacted_at")]);
    m_redacted_at_isSet = !json[QString("redacted_at")].isNull() && m_redacted_at_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_risk_check_isValid = ::OpenAPI::fromJsonValue(m_risk_check, json[QString("risk_check")]);
    m_risk_check_isSet = !json[QString("risk_check")].isNull() && m_risk_check_isValid;

    m_shareable_url_isValid = ::OpenAPI::fromJsonValue(m_shareable_url, json[QString("shareable_url")]);
    m_shareable_url_isSet = !json[QString("shareable_url")].isNull() && m_shareable_url_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_watchlist_screening_id_isValid = ::OpenAPI::fromJsonValue(m_watchlist_screening_id, json[QString("watchlist_screening_id")]);
    m_watchlist_screening_id_isSet = !json[QString("watchlist_screening_id")].isNull() && m_watchlist_screening_id_isValid;
}

QString OAIIdentityVerificationGetResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityVerificationGetResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_client_user_id_isSet) {
        obj.insert(QString("client_user_id"), ::OpenAPI::toJsonValue(m_client_user_id));
    }
    if (m_completed_at_isSet) {
        obj.insert(QString("completed_at"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_documentary_verification.isSet()) {
        obj.insert(QString("documentary_verification"), ::OpenAPI::toJsonValue(m_documentary_verification));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kyc_check.isSet()) {
        obj.insert(QString("kyc_check"), ::OpenAPI::toJsonValue(m_kyc_check));
    }
    if (m_previous_attempt_id_isSet) {
        obj.insert(QString("previous_attempt_id"), ::OpenAPI::toJsonValue(m_previous_attempt_id));
    }
    if (m_redacted_at_isSet) {
        obj.insert(QString("redacted_at"), ::OpenAPI::toJsonValue(m_redacted_at));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_risk_check.isSet()) {
        obj.insert(QString("risk_check"), ::OpenAPI::toJsonValue(m_risk_check));
    }
    if (m_shareable_url_isSet) {
        obj.insert(QString("shareable_url"), ::OpenAPI::toJsonValue(m_shareable_url));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_steps.isSet()) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    if (m_r_template.isSet()) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_watchlist_screening_id_isSet) {
        obj.insert(QString("watchlist_screening_id"), ::OpenAPI::toJsonValue(m_watchlist_screening_id));
    }
    return obj;
}

QString OAIIdentityVerificationGetResponse::getClientUserId() const {
    return m_client_user_id;
}
void OAIIdentityVerificationGetResponse::setClientUserId(const QString &client_user_id) {
    m_client_user_id = client_user_id;
    m_client_user_id_isSet = true;
}

bool OAIIdentityVerificationGetResponse::is_client_user_id_Set() const{
    return m_client_user_id_isSet;
}

bool OAIIdentityVerificationGetResponse::is_client_user_id_Valid() const{
    return m_client_user_id_isValid;
}

QDateTime OAIIdentityVerificationGetResponse::getCompletedAt() const {
    return m_completed_at;
}
void OAIIdentityVerificationGetResponse::setCompletedAt(const QDateTime &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAIIdentityVerificationGetResponse::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAIIdentityVerificationGetResponse::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

QDateTime OAIIdentityVerificationGetResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIIdentityVerificationGetResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIIdentityVerificationGetResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIIdentityVerificationGetResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIDocumentaryVerification OAIIdentityVerificationGetResponse::getDocumentaryVerification() const {
    return m_documentary_verification;
}
void OAIIdentityVerificationGetResponse::setDocumentaryVerification(const OAIDocumentaryVerification &documentary_verification) {
    m_documentary_verification = documentary_verification;
    m_documentary_verification_isSet = true;
}

bool OAIIdentityVerificationGetResponse::is_documentary_verification_Set() const{
    return m_documentary_verification_isSet;
}

bool OAIIdentityVerificationGetResponse::is_documentary_verification_Valid() const{
    return m_documentary_verification_isValid;
}

QString OAIIdentityVerificationGetResponse::getId() const {
    return m_id;
}
void OAIIdentityVerificationGetResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIdentityVerificationGetResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIdentityVerificationGetResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAIKYCCheckDetails OAIIdentityVerificationGetResponse::getKycCheck() const {
    return m_kyc_check;
}
void OAIIdentityVerificationGetResponse::setKycCheck(const OAIKYCCheckDetails &kyc_check) {
    m_kyc_check = kyc_check;
    m_kyc_check_isSet = true;
}

bool OAIIdentityVerificationGetResponse::is_kyc_check_Set() const{
    return m_kyc_check_isSet;
}

bool OAIIdentityVerificationGetResponse::is_kyc_check_Valid() const{
    return m_kyc_check_isValid;
}

QString OAIIdentityVerificationGetResponse::getPreviousAttemptId() const {
    return m_previous_attempt_id;
}
void OAIIdentityVerificationGetResponse::setPreviousAttemptId(const QString &previous_attempt_id) {
    m_previous_attempt_id = previous_attempt_id;
    m_previous_attempt_id_isSet = true;
}

bool OAIIdentityVerificationGetResponse::is_previous_attempt_id_Set() const{
    return m_previous_attempt_id_isSet;
}

bool OAIIdentityVerificationGetResponse::is_previous_attempt_id_Valid() const{
    return m_previous_attempt_id_isValid;
}

QDateTime OAIIdentityVerificationGetResponse::getRedactedAt() const {
    return m_redacted_at;
}
void OAIIdentityVerificationGetResponse::setRedactedAt(const QDateTime &redacted_at) {
    m_redacted_at = redacted_at;
    m_redacted_at_isSet = true;
}

bool OAIIdentityVerificationGetResponse::is_redacted_at_Set() const{
    return m_redacted_at_isSet;
}

bool OAIIdentityVerificationGetResponse::is_redacted_at_Valid() const{
    return m_redacted_at_isValid;
}

QString OAIIdentityVerificationGetResponse::getRequestId() const {
    return m_request_id;
}
void OAIIdentityVerificationGetResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIIdentityVerificationGetResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIIdentityVerificationGetResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIRiskCheckDetails OAIIdentityVerificationGetResponse::getRiskCheck() const {
    return m_risk_check;
}
void OAIIdentityVerificationGetResponse::setRiskCheck(const OAIRiskCheckDetails &risk_check) {
    m_risk_check = risk_check;
    m_risk_check_isSet = true;
}

bool OAIIdentityVerificationGetResponse::is_risk_check_Set() const{
    return m_risk_check_isSet;
}

bool OAIIdentityVerificationGetResponse::is_risk_check_Valid() const{
    return m_risk_check_isValid;
}

QString OAIIdentityVerificationGetResponse::getShareableUrl() const {
    return m_shareable_url;
}
void OAIIdentityVerificationGetResponse::setShareableUrl(const QString &shareable_url) {
    m_shareable_url = shareable_url;
    m_shareable_url_isSet = true;
}

bool OAIIdentityVerificationGetResponse::is_shareable_url_Set() const{
    return m_shareable_url_isSet;
}

bool OAIIdentityVerificationGetResponse::is_shareable_url_Valid() const{
    return m_shareable_url_isValid;
}

OAIIdentityVerificationStatus OAIIdentityVerificationGetResponse::getStatus() const {
    return m_status;
}
void OAIIdentityVerificationGetResponse::setStatus(const OAIIdentityVerificationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIIdentityVerificationGetResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIIdentityVerificationGetResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAIIdentityVerificationStepSummary OAIIdentityVerificationGetResponse::getSteps() const {
    return m_steps;
}
void OAIIdentityVerificationGetResponse::setSteps(const OAIIdentityVerificationStepSummary &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIIdentityVerificationGetResponse::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIIdentityVerificationGetResponse::is_steps_Valid() const{
    return m_steps_isValid;
}

OAIIdentityVerificationTemplateReference OAIIdentityVerificationGetResponse::getRTemplate() const {
    return m_r_template;
}
void OAIIdentityVerificationGetResponse::setRTemplate(const OAIIdentityVerificationTemplateReference &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIIdentityVerificationGetResponse::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIIdentityVerificationGetResponse::is_r_template_Valid() const{
    return m_r_template_isValid;
}

OAIIdentityVerificationUserData OAIIdentityVerificationGetResponse::getUser() const {
    return m_user;
}
void OAIIdentityVerificationGetResponse::setUser(const OAIIdentityVerificationUserData &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIIdentityVerificationGetResponse::is_user_Set() const{
    return m_user_isSet;
}

bool OAIIdentityVerificationGetResponse::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIIdentityVerificationGetResponse::getWatchlistScreeningId() const {
    return m_watchlist_screening_id;
}
void OAIIdentityVerificationGetResponse::setWatchlistScreeningId(const QString &watchlist_screening_id) {
    m_watchlist_screening_id = watchlist_screening_id;
    m_watchlist_screening_id_isSet = true;
}

bool OAIIdentityVerificationGetResponse::is_watchlist_screening_id_Set() const{
    return m_watchlist_screening_id_isSet;
}

bool OAIIdentityVerificationGetResponse::is_watchlist_screening_id_Valid() const{
    return m_watchlist_screening_id_isValid;
}

bool OAIIdentityVerificationGetResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentary_verification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kyc_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_attempt_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shareable_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchlist_screening_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityVerificationGetResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_user_id_isValid && m_completed_at_isValid && m_created_at_isValid && m_documentary_verification_isValid && m_id_isValid && m_kyc_check_isValid && m_previous_attempt_id_isValid && m_redacted_at_isValid && m_request_id_isValid && m_risk_check_isValid && m_shareable_url_isValid && m_status_isValid && m_steps_isValid && m_r_template_isValid && m_user_isValid && m_watchlist_screening_id_isValid && true;
}

} // namespace OpenAPI
