/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentInitiationConsentGetResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentInitiationConsentGetResponse::OAIPaymentInitiationConsentGetResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentInitiationConsentGetResponse::OAIPaymentInitiationConsentGetResponse() {
    this->initializeModel();
}

OAIPaymentInitiationConsentGetResponse::~OAIPaymentInitiationConsentGetResponse() {}

void OAIPaymentInitiationConsentGetResponse::initializeModel() {

    m_consent_id_isSet = false;
    m_consent_id_isValid = false;

    m_constraints_isSet = false;
    m_constraints_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_recipient_id_isSet = false;
    m_recipient_id_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIPaymentInitiationConsentGetResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentInitiationConsentGetResponse::fromJsonObject(QJsonObject json) {

    m_consent_id_isValid = ::OpenAPI::fromJsonValue(m_consent_id, json[QString("consent_id")]);
    m_consent_id_isSet = !json[QString("consent_id")].isNull() && m_consent_id_isValid;

    m_constraints_isValid = ::OpenAPI::fromJsonValue(m_constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_recipient_id_isValid = ::OpenAPI::fromJsonValue(m_recipient_id, json[QString("recipient_id")]);
    m_recipient_id_isSet = !json[QString("recipient_id")].isNull() && m_recipient_id_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;
}

QString OAIPaymentInitiationConsentGetResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentInitiationConsentGetResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_id_isSet) {
        obj.insert(QString("consent_id"), ::OpenAPI::toJsonValue(m_consent_id));
    }
    if (m_constraints.isSet()) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(m_constraints));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_recipient_id_isSet) {
        obj.insert(QString("recipient_id"), ::OpenAPI::toJsonValue(m_recipient_id));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QString OAIPaymentInitiationConsentGetResponse::getConsentId() const {
    return m_consent_id;
}
void OAIPaymentInitiationConsentGetResponse::setConsentId(const QString &consent_id) {
    m_consent_id = consent_id;
    m_consent_id_isSet = true;
}

bool OAIPaymentInitiationConsentGetResponse::is_consent_id_Set() const{
    return m_consent_id_isSet;
}

bool OAIPaymentInitiationConsentGetResponse::is_consent_id_Valid() const{
    return m_consent_id_isValid;
}

OAIPaymentInitiationConsentConstraints OAIPaymentInitiationConsentGetResponse::getConstraints() const {
    return m_constraints;
}
void OAIPaymentInitiationConsentGetResponse::setConstraints(const OAIPaymentInitiationConsentConstraints &constraints) {
    m_constraints = constraints;
    m_constraints_isSet = true;
}

bool OAIPaymentInitiationConsentGetResponse::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAIPaymentInitiationConsentGetResponse::is_constraints_Valid() const{
    return m_constraints_isValid;
}

QDateTime OAIPaymentInitiationConsentGetResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIPaymentInitiationConsentGetResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPaymentInitiationConsentGetResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPaymentInitiationConsentGetResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPaymentInitiationConsentGetResponse::getRecipientId() const {
    return m_recipient_id;
}
void OAIPaymentInitiationConsentGetResponse::setRecipientId(const QString &recipient_id) {
    m_recipient_id = recipient_id;
    m_recipient_id_isSet = true;
}

bool OAIPaymentInitiationConsentGetResponse::is_recipient_id_Set() const{
    return m_recipient_id_isSet;
}

bool OAIPaymentInitiationConsentGetResponse::is_recipient_id_Valid() const{
    return m_recipient_id_isValid;
}

QString OAIPaymentInitiationConsentGetResponse::getReference() const {
    return m_reference;
}
void OAIPaymentInitiationConsentGetResponse::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIPaymentInitiationConsentGetResponse::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIPaymentInitiationConsentGetResponse::is_reference_Valid() const{
    return m_reference_isValid;
}

QList<OAIPaymentInitiationConsentScope> OAIPaymentInitiationConsentGetResponse::getScopes() const {
    return m_scopes;
}
void OAIPaymentInitiationConsentGetResponse::setScopes(const QList<OAIPaymentInitiationConsentScope> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIPaymentInitiationConsentGetResponse::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIPaymentInitiationConsentGetResponse::is_scopes_Valid() const{
    return m_scopes_isValid;
}

OAIPaymentInitiationConsentStatus OAIPaymentInitiationConsentGetResponse::getStatus() const {
    return m_status;
}
void OAIPaymentInitiationConsentGetResponse::setStatus(const OAIPaymentInitiationConsentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPaymentInitiationConsentGetResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPaymentInitiationConsentGetResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPaymentInitiationConsentGetResponse::getRequestId() const {
    return m_request_id;
}
void OAIPaymentInitiationConsentGetResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIPaymentInitiationConsentGetResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIPaymentInitiationConsentGetResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIPaymentInitiationConsentGetResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentInitiationConsentGetResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consent_id_isValid && m_constraints_isValid && m_created_at_isValid && m_recipient_id_isValid && m_reference_isValid && m_scopes_isValid && m_status_isValid && m_request_id_isValid && true;
}

} // namespace OpenAPI
