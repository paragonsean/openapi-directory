/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferAuthorizationDecisionRationaleCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferAuthorizationDecisionRationaleCode::OAITransferAuthorizationDecisionRationaleCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferAuthorizationDecisionRationaleCode::OAITransferAuthorizationDecisionRationaleCode() {
    this->initializeModel();
}

OAITransferAuthorizationDecisionRationaleCode::~OAITransferAuthorizationDecisionRationaleCode() {}

void OAITransferAuthorizationDecisionRationaleCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITransferAuthorizationDecisionRationaleCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITransferAuthorizationDecisionRationaleCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NSF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransferAuthorizationDecisionRationaleCode::NSF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RISK", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransferAuthorizationDecisionRationaleCode::RISK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRANSFER_LIMIT_REACHED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransferAuthorizationDecisionRationaleCode::TRANSFER_LIMIT_REACHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MANUALLY_VERIFIED_ITEM", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransferAuthorizationDecisionRationaleCode::MANUALLY_VERIFIED_ITEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_LOGIN_REQUIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransferAuthorizationDecisionRationaleCode::ITEM_LOGIN_REQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAYMENT_PROFILE_LOGIN_REQUIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransferAuthorizationDecisionRationaleCode::PAYMENT_PROFILE_LOGIN_REQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransferAuthorizationDecisionRationaleCode::ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MIGRATED_ACCOUNT_ITEM", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransferAuthorizationDecisionRationaleCode::MIGRATED_ACCOUNT_ITEM;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITransferAuthorizationDecisionRationaleCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITransferAuthorizationDecisionRationaleCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITransferAuthorizationDecisionRationaleCode::NSF:
            val = "NSF";
            break;
        case eOAITransferAuthorizationDecisionRationaleCode::RISK:
            val = "RISK";
            break;
        case eOAITransferAuthorizationDecisionRationaleCode::TRANSFER_LIMIT_REACHED:
            val = "TRANSFER_LIMIT_REACHED";
            break;
        case eOAITransferAuthorizationDecisionRationaleCode::MANUALLY_VERIFIED_ITEM:
            val = "MANUALLY_VERIFIED_ITEM";
            break;
        case eOAITransferAuthorizationDecisionRationaleCode::ITEM_LOGIN_REQUIRED:
            val = "ITEM_LOGIN_REQUIRED";
            break;
        case eOAITransferAuthorizationDecisionRationaleCode::PAYMENT_PROFILE_LOGIN_REQUIRED:
            val = "PAYMENT_PROFILE_LOGIN_REQUIRED";
            break;
        case eOAITransferAuthorizationDecisionRationaleCode::ERROR:
            val = "ERROR";
            break;
        case eOAITransferAuthorizationDecisionRationaleCode::MIGRATED_ACCOUNT_ITEM:
            val = "MIGRATED_ACCOUNT_ITEM";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITransferAuthorizationDecisionRationaleCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITransferAuthorizationDecisionRationaleCode::eOAITransferAuthorizationDecisionRationaleCode OAITransferAuthorizationDecisionRationaleCode::getValue() const {
    return m_value;
}

void OAITransferAuthorizationDecisionRationaleCode::setValue(const OAITransferAuthorizationDecisionRationaleCode::eOAITransferAuthorizationDecisionRationaleCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITransferAuthorizationDecisionRationaleCode::isSet() const {
    
    return m_value_isSet;
}

bool OAITransferAuthorizationDecisionRationaleCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
