/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkEventName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkEventName::OAILinkEventName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkEventName::OAILinkEventName() {
    this->initializeModel();
}

OAILinkEventName::~OAILinkEventName() {}

void OAILinkEventName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILinkEventName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILinkEventName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BANK_INCOME_INSIGHTS_COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::BANK_INCOME_INSIGHTS_COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CLOSE_OAUTH", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::CLOSE_OAUTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::EXIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAIL_OAUTH", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::FAIL_OAUTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HANDOFF", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::HANDOFF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OPEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::OPEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OPEN_MY_PLAID", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::OPEN_MY_PLAID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OPEN_OAUTH", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::OPEN_OAUTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SEARCH_INSTITUTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::SEARCH_INSTITUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SELECT_AUTH_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::SELECT_AUTH_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SELECT_BRAND", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::SELECT_BRAND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SELECT_DEGRADED_INSTITUTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::SELECT_DEGRADED_INSTITUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SELECT_DOWN_INSTITUTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::SELECT_DOWN_INSTITUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SELECT_INSTITUTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::SELECT_INSTITUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBMIT_ACCOUNT_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::SUBMIT_ACCOUNT_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBMIT_CREDENTIALS", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::SUBMIT_CREDENTIALS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBMIT_DOCUMENTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::SUBMIT_DOCUMENTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBMIT_DOCUMENTS_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::SUBMIT_DOCUMENTS_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBMIT_DOCUMENTS_SUCCESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::SUBMIT_DOCUMENTS_SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBMIT_MFA", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::SUBMIT_MFA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBMIT_ROUTING_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::SUBMIT_ROUTING_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRANSITION_VIEW", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::TRANSITION_VIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VIEW_DATA_TYPES", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkEventName::VIEW_DATA_TYPES;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILinkEventName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILinkEventName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILinkEventName::BANK_INCOME_INSIGHTS_COMPLETED:
            val = "BANK_INCOME_INSIGHTS_COMPLETED";
            break;
        case eOAILinkEventName::CLOSE_OAUTH:
            val = "CLOSE_OAUTH";
            break;
        case eOAILinkEventName::ERROR:
            val = "ERROR";
            break;
        case eOAILinkEventName::EXIT:
            val = "EXIT";
            break;
        case eOAILinkEventName::FAIL_OAUTH:
            val = "FAIL_OAUTH";
            break;
        case eOAILinkEventName::HANDOFF:
            val = "HANDOFF";
            break;
        case eOAILinkEventName::OPEN:
            val = "OPEN";
            break;
        case eOAILinkEventName::OPEN_MY_PLAID:
            val = "OPEN_MY_PLAID";
            break;
        case eOAILinkEventName::OPEN_OAUTH:
            val = "OPEN_OAUTH";
            break;
        case eOAILinkEventName::SEARCH_INSTITUTION:
            val = "SEARCH_INSTITUTION";
            break;
        case eOAILinkEventName::SELECT_AUTH_TYPE:
            val = "SELECT_AUTH_TYPE";
            break;
        case eOAILinkEventName::SELECT_BRAND:
            val = "SELECT_BRAND";
            break;
        case eOAILinkEventName::SELECT_DEGRADED_INSTITUTION:
            val = "SELECT_DEGRADED_INSTITUTION";
            break;
        case eOAILinkEventName::SELECT_DOWN_INSTITUTION:
            val = "SELECT_DOWN_INSTITUTION";
            break;
        case eOAILinkEventName::SELECT_INSTITUTION:
            val = "SELECT_INSTITUTION";
            break;
        case eOAILinkEventName::SUBMIT_ACCOUNT_NUMBER:
            val = "SUBMIT_ACCOUNT_NUMBER";
            break;
        case eOAILinkEventName::SUBMIT_CREDENTIALS:
            val = "SUBMIT_CREDENTIALS";
            break;
        case eOAILinkEventName::SUBMIT_DOCUMENTS:
            val = "SUBMIT_DOCUMENTS";
            break;
        case eOAILinkEventName::SUBMIT_DOCUMENTS_ERROR:
            val = "SUBMIT_DOCUMENTS_ERROR";
            break;
        case eOAILinkEventName::SUBMIT_DOCUMENTS_SUCCESS:
            val = "SUBMIT_DOCUMENTS_SUCCESS";
            break;
        case eOAILinkEventName::SUBMIT_MFA:
            val = "SUBMIT_MFA";
            break;
        case eOAILinkEventName::SUBMIT_ROUTING_NUMBER:
            val = "SUBMIT_ROUTING_NUMBER";
            break;
        case eOAILinkEventName::TRANSITION_VIEW:
            val = "TRANSITION_VIEW";
            break;
        case eOAILinkEventName::VIEW_DATA_TYPES:
            val = "VIEW_DATA_TYPES";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILinkEventName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILinkEventName::eOAILinkEventName OAILinkEventName::getValue() const {
    return m_value;
}

void OAILinkEventName::setValue(const OAILinkEventName::eOAILinkEventName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILinkEventName::isSet() const {
    
    return m_value_isSet;
}

bool OAILinkEventName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
