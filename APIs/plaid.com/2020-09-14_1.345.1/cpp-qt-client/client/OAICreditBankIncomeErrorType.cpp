/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreditBankIncomeErrorType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreditBankIncomeErrorType::OAICreditBankIncomeErrorType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreditBankIncomeErrorType::OAICreditBankIncomeErrorType() {
    this->initializeModel();
}

OAICreditBankIncomeErrorType::~OAICreditBankIncomeErrorType() {}

void OAICreditBankIncomeErrorType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICreditBankIncomeErrorType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICreditBankIncomeErrorType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("INTERNAL_SERVER_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditBankIncomeErrorType::INTERNAL_SERVER_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSUFFICIENT_CREDENTIALS", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditBankIncomeErrorType::INSUFFICIENT_CREDENTIALS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_LOCKED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditBankIncomeErrorType::ITEM_LOCKED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USER_SETUP_REQUIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditBankIncomeErrorType::USER_SETUP_REQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COUNTRY_NOT_SUPPORTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditBankIncomeErrorType::COUNTRY_NOT_SUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSTITUTION_DOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditBankIncomeErrorType::INSTITUTION_DOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSTITUTION_NO_LONGER_SUPPORTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditBankIncomeErrorType::INSTITUTION_NO_LONGER_SUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSTITUTION_NOT_RESPONDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditBankIncomeErrorType::INSTITUTION_NOT_RESPONDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_CREDENTIALS", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditBankIncomeErrorType::INVALID_CREDENTIALS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_MFA", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditBankIncomeErrorType::INVALID_MFA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_SEND_METHOD", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditBankIncomeErrorType::INVALID_SEND_METHOD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_LOGIN_REQUIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditBankIncomeErrorType::ITEM_LOGIN_REQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MFA_NOT_SUPPORTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditBankIncomeErrorType::MFA_NOT_SUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NO_ACCOUNTS", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditBankIncomeErrorType::NO_ACCOUNTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_NOT_SUPPORTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditBankIncomeErrorType::ITEM_NOT_SUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACCESS_NOT_GRANTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAICreditBankIncomeErrorType::ACCESS_NOT_GRANTED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICreditBankIncomeErrorType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICreditBankIncomeErrorType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICreditBankIncomeErrorType::INTERNAL_SERVER_ERROR:
            val = "INTERNAL_SERVER_ERROR";
            break;
        case eOAICreditBankIncomeErrorType::INSUFFICIENT_CREDENTIALS:
            val = "INSUFFICIENT_CREDENTIALS";
            break;
        case eOAICreditBankIncomeErrorType::ITEM_LOCKED:
            val = "ITEM_LOCKED";
            break;
        case eOAICreditBankIncomeErrorType::USER_SETUP_REQUIRED:
            val = "USER_SETUP_REQUIRED";
            break;
        case eOAICreditBankIncomeErrorType::COUNTRY_NOT_SUPPORTED:
            val = "COUNTRY_NOT_SUPPORTED";
            break;
        case eOAICreditBankIncomeErrorType::INSTITUTION_DOWN:
            val = "INSTITUTION_DOWN";
            break;
        case eOAICreditBankIncomeErrorType::INSTITUTION_NO_LONGER_SUPPORTED:
            val = "INSTITUTION_NO_LONGER_SUPPORTED";
            break;
        case eOAICreditBankIncomeErrorType::INSTITUTION_NOT_RESPONDING:
            val = "INSTITUTION_NOT_RESPONDING";
            break;
        case eOAICreditBankIncomeErrorType::INVALID_CREDENTIALS:
            val = "INVALID_CREDENTIALS";
            break;
        case eOAICreditBankIncomeErrorType::INVALID_MFA:
            val = "INVALID_MFA";
            break;
        case eOAICreditBankIncomeErrorType::INVALID_SEND_METHOD:
            val = "INVALID_SEND_METHOD";
            break;
        case eOAICreditBankIncomeErrorType::ITEM_LOGIN_REQUIRED:
            val = "ITEM_LOGIN_REQUIRED";
            break;
        case eOAICreditBankIncomeErrorType::MFA_NOT_SUPPORTED:
            val = "MFA_NOT_SUPPORTED";
            break;
        case eOAICreditBankIncomeErrorType::NO_ACCOUNTS:
            val = "NO_ACCOUNTS";
            break;
        case eOAICreditBankIncomeErrorType::ITEM_NOT_SUPPORTED:
            val = "ITEM_NOT_SUPPORTED";
            break;
        case eOAICreditBankIncomeErrorType::ACCESS_NOT_GRANTED:
            val = "ACCESS_NOT_GRANTED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICreditBankIncomeErrorType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICreditBankIncomeErrorType::eOAICreditBankIncomeErrorType OAICreditBankIncomeErrorType::getValue() const {
    return m_value;
}

void OAICreditBankIncomeErrorType::setValue(const OAICreditBankIncomeErrorType::eOAICreditBankIncomeErrorType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICreditBankIncomeErrorType::isSet() const {
    
    return m_value_isSet;
}

bool OAICreditBankIncomeErrorType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
