/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductAccess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductAccess::OAIProductAccess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductAccess::OAIProductAccess() {
    this->initializeModel();
}

OAIProductAccess::~OAIProductAccess() {}

void OAIProductAccess::initializeModel() {

    m_accounts_details_transactions_isSet = false;
    m_accounts_details_transactions_isValid = false;

    m_accounts_routing_number_isSet = false;
    m_accounts_routing_number_isValid = false;

    m_accounts_statements_isSet = false;
    m_accounts_statements_isValid = false;

    m_accounts_tax_statements_isSet = false;
    m_accounts_tax_statements_isValid = false;

    m_auth_isSet = false;
    m_auth_isValid = false;

    m_customers_profiles_isSet = false;
    m_customers_profiles_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_statements_isSet = false;
    m_statements_isValid = false;

    m_transactions_isSet = false;
    m_transactions_isValid = false;
}

void OAIProductAccess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductAccess::fromJsonObject(QJsonObject json) {

    m_accounts_details_transactions_isValid = ::OpenAPI::fromJsonValue(m_accounts_details_transactions, json[QString("accounts_details_transactions")]);
    m_accounts_details_transactions_isSet = !json[QString("accounts_details_transactions")].isNull() && m_accounts_details_transactions_isValid;

    m_accounts_routing_number_isValid = ::OpenAPI::fromJsonValue(m_accounts_routing_number, json[QString("accounts_routing_number")]);
    m_accounts_routing_number_isSet = !json[QString("accounts_routing_number")].isNull() && m_accounts_routing_number_isValid;

    m_accounts_statements_isValid = ::OpenAPI::fromJsonValue(m_accounts_statements, json[QString("accounts_statements")]);
    m_accounts_statements_isSet = !json[QString("accounts_statements")].isNull() && m_accounts_statements_isValid;

    m_accounts_tax_statements_isValid = ::OpenAPI::fromJsonValue(m_accounts_tax_statements, json[QString("accounts_tax_statements")]);
    m_accounts_tax_statements_isSet = !json[QString("accounts_tax_statements")].isNull() && m_accounts_tax_statements_isValid;

    m_auth_isValid = ::OpenAPI::fromJsonValue(m_auth, json[QString("auth")]);
    m_auth_isSet = !json[QString("auth")].isNull() && m_auth_isValid;

    m_customers_profiles_isValid = ::OpenAPI::fromJsonValue(m_customers_profiles, json[QString("customers_profiles")]);
    m_customers_profiles_isSet = !json[QString("customers_profiles")].isNull() && m_customers_profiles_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("identity")]);
    m_identity_isSet = !json[QString("identity")].isNull() && m_identity_isValid;

    m_statements_isValid = ::OpenAPI::fromJsonValue(m_statements, json[QString("statements")]);
    m_statements_isSet = !json[QString("statements")].isNull() && m_statements_isValid;

    m_transactions_isValid = ::OpenAPI::fromJsonValue(m_transactions, json[QString("transactions")]);
    m_transactions_isSet = !json[QString("transactions")].isNull() && m_transactions_isValid;
}

QString OAIProductAccess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductAccess::asJsonObject() const {
    QJsonObject obj;
    if (m_accounts_details_transactions_isSet) {
        obj.insert(QString("accounts_details_transactions"), ::OpenAPI::toJsonValue(m_accounts_details_transactions));
    }
    if (m_accounts_routing_number_isSet) {
        obj.insert(QString("accounts_routing_number"), ::OpenAPI::toJsonValue(m_accounts_routing_number));
    }
    if (m_accounts_statements_isSet) {
        obj.insert(QString("accounts_statements"), ::OpenAPI::toJsonValue(m_accounts_statements));
    }
    if (m_accounts_tax_statements_isSet) {
        obj.insert(QString("accounts_tax_statements"), ::OpenAPI::toJsonValue(m_accounts_tax_statements));
    }
    if (m_auth_isSet) {
        obj.insert(QString("auth"), ::OpenAPI::toJsonValue(m_auth));
    }
    if (m_customers_profiles_isSet) {
        obj.insert(QString("customers_profiles"), ::OpenAPI::toJsonValue(m_customers_profiles));
    }
    if (m_identity_isSet) {
        obj.insert(QString("identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_statements_isSet) {
        obj.insert(QString("statements"), ::OpenAPI::toJsonValue(m_statements));
    }
    if (m_transactions_isSet) {
        obj.insert(QString("transactions"), ::OpenAPI::toJsonValue(m_transactions));
    }
    return obj;
}

bool OAIProductAccess::isAccountsDetailsTransactions() const {
    return m_accounts_details_transactions;
}
void OAIProductAccess::setAccountsDetailsTransactions(const bool &accounts_details_transactions) {
    m_accounts_details_transactions = accounts_details_transactions;
    m_accounts_details_transactions_isSet = true;
}

bool OAIProductAccess::is_accounts_details_transactions_Set() const{
    return m_accounts_details_transactions_isSet;
}

bool OAIProductAccess::is_accounts_details_transactions_Valid() const{
    return m_accounts_details_transactions_isValid;
}

bool OAIProductAccess::isAccountsRoutingNumber() const {
    return m_accounts_routing_number;
}
void OAIProductAccess::setAccountsRoutingNumber(const bool &accounts_routing_number) {
    m_accounts_routing_number = accounts_routing_number;
    m_accounts_routing_number_isSet = true;
}

bool OAIProductAccess::is_accounts_routing_number_Set() const{
    return m_accounts_routing_number_isSet;
}

bool OAIProductAccess::is_accounts_routing_number_Valid() const{
    return m_accounts_routing_number_isValid;
}

bool OAIProductAccess::isAccountsStatements() const {
    return m_accounts_statements;
}
void OAIProductAccess::setAccountsStatements(const bool &accounts_statements) {
    m_accounts_statements = accounts_statements;
    m_accounts_statements_isSet = true;
}

bool OAIProductAccess::is_accounts_statements_Set() const{
    return m_accounts_statements_isSet;
}

bool OAIProductAccess::is_accounts_statements_Valid() const{
    return m_accounts_statements_isValid;
}

bool OAIProductAccess::isAccountsTaxStatements() const {
    return m_accounts_tax_statements;
}
void OAIProductAccess::setAccountsTaxStatements(const bool &accounts_tax_statements) {
    m_accounts_tax_statements = accounts_tax_statements;
    m_accounts_tax_statements_isSet = true;
}

bool OAIProductAccess::is_accounts_tax_statements_Set() const{
    return m_accounts_tax_statements_isSet;
}

bool OAIProductAccess::is_accounts_tax_statements_Valid() const{
    return m_accounts_tax_statements_isValid;
}

bool OAIProductAccess::isAuth() const {
    return m_auth;
}
void OAIProductAccess::setAuth(const bool &auth) {
    m_auth = auth;
    m_auth_isSet = true;
}

bool OAIProductAccess::is_auth_Set() const{
    return m_auth_isSet;
}

bool OAIProductAccess::is_auth_Valid() const{
    return m_auth_isValid;
}

bool OAIProductAccess::isCustomersProfiles() const {
    return m_customers_profiles;
}
void OAIProductAccess::setCustomersProfiles(const bool &customers_profiles) {
    m_customers_profiles = customers_profiles;
    m_customers_profiles_isSet = true;
}

bool OAIProductAccess::is_customers_profiles_Set() const{
    return m_customers_profiles_isSet;
}

bool OAIProductAccess::is_customers_profiles_Valid() const{
    return m_customers_profiles_isValid;
}

bool OAIProductAccess::isIdentity() const {
    return m_identity;
}
void OAIProductAccess::setIdentity(const bool &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIProductAccess::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIProductAccess::is_identity_Valid() const{
    return m_identity_isValid;
}

bool OAIProductAccess::isStatements() const {
    return m_statements;
}
void OAIProductAccess::setStatements(const bool &statements) {
    m_statements = statements;
    m_statements_isSet = true;
}

bool OAIProductAccess::is_statements_Set() const{
    return m_statements_isSet;
}

bool OAIProductAccess::is_statements_Valid() const{
    return m_statements_isValid;
}

bool OAIProductAccess::isTransactions() const {
    return m_transactions;
}
void OAIProductAccess::setTransactions(const bool &transactions) {
    m_transactions = transactions;
    m_transactions_isSet = true;
}

bool OAIProductAccess::is_transactions_Set() const{
    return m_transactions_isSet;
}

bool OAIProductAccess::is_transactions_Valid() const{
    return m_transactions_isValid;
}

bool OAIProductAccess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounts_details_transactions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounts_routing_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounts_statements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounts_tax_statements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customers_profiles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductAccess::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
