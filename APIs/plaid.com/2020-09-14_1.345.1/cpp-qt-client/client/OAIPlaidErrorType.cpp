/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaidErrorType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaidErrorType::OAIPlaidErrorType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaidErrorType::OAIPlaidErrorType() {
    this->initializeModel();
}

OAIPlaidErrorType::~OAIPlaidErrorType() {}

void OAIPlaidErrorType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPlaidErrorType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPlaidErrorType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("INVALID_REQUEST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaidErrorType::INVALID_REQUEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_RESULT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaidErrorType::INVALID_RESULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_INPUT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaidErrorType::INVALID_INPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INSTITUTION_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaidErrorType::INSTITUTION_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RATE_LIMIT_EXCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaidErrorType::RATE_LIMIT_EXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("API_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaidErrorType::API_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaidErrorType::ITEM_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ASSET_REPORT_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaidErrorType::ASSET_REPORT_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RECAPTCHA_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaidErrorType::RECAPTCHA_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OAUTH_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaidErrorType::OAUTH_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAYMENT_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaidErrorType::PAYMENT_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BANK_TRANSFER_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaidErrorType::BANK_TRANSFER_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INCOME_VERIFICATION_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaidErrorType::INCOME_VERIFICATION_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MICRODEPOSITS_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlaidErrorType::MICRODEPOSITS_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPlaidErrorType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPlaidErrorType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPlaidErrorType::INVALID_REQUEST:
            val = "INVALID_REQUEST";
            break;
        case eOAIPlaidErrorType::INVALID_RESULT:
            val = "INVALID_RESULT";
            break;
        case eOAIPlaidErrorType::INVALID_INPUT:
            val = "INVALID_INPUT";
            break;
        case eOAIPlaidErrorType::INSTITUTION_ERROR:
            val = "INSTITUTION_ERROR";
            break;
        case eOAIPlaidErrorType::RATE_LIMIT_EXCEEDED:
            val = "RATE_LIMIT_EXCEEDED";
            break;
        case eOAIPlaidErrorType::API_ERROR:
            val = "API_ERROR";
            break;
        case eOAIPlaidErrorType::ITEM_ERROR:
            val = "ITEM_ERROR";
            break;
        case eOAIPlaidErrorType::ASSET_REPORT_ERROR:
            val = "ASSET_REPORT_ERROR";
            break;
        case eOAIPlaidErrorType::RECAPTCHA_ERROR:
            val = "RECAPTCHA_ERROR";
            break;
        case eOAIPlaidErrorType::OAUTH_ERROR:
            val = "OAUTH_ERROR";
            break;
        case eOAIPlaidErrorType::PAYMENT_ERROR:
            val = "PAYMENT_ERROR";
            break;
        case eOAIPlaidErrorType::BANK_TRANSFER_ERROR:
            val = "BANK_TRANSFER_ERROR";
            break;
        case eOAIPlaidErrorType::INCOME_VERIFICATION_ERROR:
            val = "INCOME_VERIFICATION_ERROR";
            break;
        case eOAIPlaidErrorType::MICRODEPOSITS_ERROR:
            val = "MICRODEPOSITS_ERROR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPlaidErrorType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPlaidErrorType::eOAIPlaidErrorType OAIPlaidErrorType::getValue() const {
    return m_value;
}

void OAIPlaidErrorType::setValue(const OAIPlaidErrorType::eOAIPlaidErrorType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPlaidErrorType::isSet() const {
    
    return m_value_isSet;
}

bool OAIPlaidErrorType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
