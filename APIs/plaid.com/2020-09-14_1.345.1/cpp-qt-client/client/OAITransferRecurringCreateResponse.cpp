/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferRecurringCreateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferRecurringCreateResponse::OAITransferRecurringCreateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferRecurringCreateResponse::OAITransferRecurringCreateResponse() {
    this->initializeModel();
}

OAITransferRecurringCreateResponse::~OAITransferRecurringCreateResponse() {}

void OAITransferRecurringCreateResponse::initializeModel() {

    m_decision_isSet = false;
    m_decision_isValid = false;

    m_decision_rationale_isSet = false;
    m_decision_rationale_isValid = false;

    m_recurring_transfer_isSet = false;
    m_recurring_transfer_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAITransferRecurringCreateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferRecurringCreateResponse::fromJsonObject(QJsonObject json) {

    m_decision_isValid = ::OpenAPI::fromJsonValue(m_decision, json[QString("decision")]);
    m_decision_isSet = !json[QString("decision")].isNull() && m_decision_isValid;

    m_decision_rationale_isValid = ::OpenAPI::fromJsonValue(m_decision_rationale, json[QString("decision_rationale")]);
    m_decision_rationale_isSet = !json[QString("decision_rationale")].isNull() && m_decision_rationale_isValid;

    m_recurring_transfer_isValid = ::OpenAPI::fromJsonValue(m_recurring_transfer, json[QString("recurring_transfer")]);
    m_recurring_transfer_isSet = !json[QString("recurring_transfer")].isNull() && m_recurring_transfer_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;
}

QString OAITransferRecurringCreateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferRecurringCreateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_decision.isSet()) {
        obj.insert(QString("decision"), ::OpenAPI::toJsonValue(m_decision));
    }
    if (m_decision_rationale.isSet()) {
        obj.insert(QString("decision_rationale"), ::OpenAPI::toJsonValue(m_decision_rationale));
    }
    if (m_recurring_transfer.isSet()) {
        obj.insert(QString("recurring_transfer"), ::OpenAPI::toJsonValue(m_recurring_transfer));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

OAITransferAuthorizationDecision OAITransferRecurringCreateResponse::getDecision() const {
    return m_decision;
}
void OAITransferRecurringCreateResponse::setDecision(const OAITransferAuthorizationDecision &decision) {
    m_decision = decision;
    m_decision_isSet = true;
}

bool OAITransferRecurringCreateResponse::is_decision_Set() const{
    return m_decision_isSet;
}

bool OAITransferRecurringCreateResponse::is_decision_Valid() const{
    return m_decision_isValid;
}

OAITransferAuthorizationDecisionRationale OAITransferRecurringCreateResponse::getDecisionRationale() const {
    return m_decision_rationale;
}
void OAITransferRecurringCreateResponse::setDecisionRationale(const OAITransferAuthorizationDecisionRationale &decision_rationale) {
    m_decision_rationale = decision_rationale;
    m_decision_rationale_isSet = true;
}

bool OAITransferRecurringCreateResponse::is_decision_rationale_Set() const{
    return m_decision_rationale_isSet;
}

bool OAITransferRecurringCreateResponse::is_decision_rationale_Valid() const{
    return m_decision_rationale_isValid;
}

OAIRecurringTransferNullable OAITransferRecurringCreateResponse::getRecurringTransfer() const {
    return m_recurring_transfer;
}
void OAITransferRecurringCreateResponse::setRecurringTransfer(const OAIRecurringTransferNullable &recurring_transfer) {
    m_recurring_transfer = recurring_transfer;
    m_recurring_transfer_isSet = true;
}

bool OAITransferRecurringCreateResponse::is_recurring_transfer_Set() const{
    return m_recurring_transfer_isSet;
}

bool OAITransferRecurringCreateResponse::is_recurring_transfer_Valid() const{
    return m_recurring_transfer_isValid;
}

QString OAITransferRecurringCreateResponse::getRequestId() const {
    return m_request_id;
}
void OAITransferRecurringCreateResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAITransferRecurringCreateResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAITransferRecurringCreateResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAITransferRecurringCreateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_decision.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision_rationale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_transfer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferRecurringCreateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_decision_isValid && m_request_id_isValid && true;
}

} // namespace OpenAPI
