/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreditW2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreditW2::OAICreditW2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreditW2::OAICreditW2() {
    this->initializeModel();
}

OAICreditW2::~OAICreditW2() {}

void OAICreditW2::initializeModel() {

    m_allocated_tips_isSet = false;
    m_allocated_tips_isValid = false;

    m_box_12_isSet = false;
    m_box_12_isValid = false;

    m_box_9_isSet = false;
    m_box_9_isValid = false;

    m_dependent_care_benefits_isSet = false;
    m_dependent_care_benefits_isValid = false;

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_document_metadata_isSet = false;
    m_document_metadata_isValid = false;

    m_employee_isSet = false;
    m_employee_isValid = false;

    m_employer_isSet = false;
    m_employer_isValid = false;

    m_employer_id_number_isSet = false;
    m_employer_id_number_isValid = false;

    m_federal_income_tax_withheld_isSet = false;
    m_federal_income_tax_withheld_isValid = false;

    m_medicare_tax_withheld_isSet = false;
    m_medicare_tax_withheld_isValid = false;

    m_medicare_wages_and_tips_isSet = false;
    m_medicare_wages_and_tips_isValid = false;

    m_nonqualified_plans_isSet = false;
    m_nonqualified_plans_isValid = false;

    m_other_isSet = false;
    m_other_isValid = false;

    m_retirement_plan_isSet = false;
    m_retirement_plan_isValid = false;

    m_social_security_tax_withheld_isSet = false;
    m_social_security_tax_withheld_isValid = false;

    m_social_security_tips_isSet = false;
    m_social_security_tips_isValid = false;

    m_social_security_wages_isSet = false;
    m_social_security_wages_isValid = false;

    m_state_and_local_wages_isSet = false;
    m_state_and_local_wages_isValid = false;

    m_statutory_employee_isSet = false;
    m_statutory_employee_isValid = false;

    m_tax_year_isSet = false;
    m_tax_year_isValid = false;

    m_third_party_sick_pay_isSet = false;
    m_third_party_sick_pay_isValid = false;

    m_wages_tips_other_comp_isSet = false;
    m_wages_tips_other_comp_isValid = false;
}

void OAICreditW2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreditW2::fromJsonObject(QJsonObject json) {

    m_allocated_tips_isValid = ::OpenAPI::fromJsonValue(m_allocated_tips, json[QString("allocated_tips")]);
    m_allocated_tips_isSet = !json[QString("allocated_tips")].isNull() && m_allocated_tips_isValid;

    m_box_12_isValid = ::OpenAPI::fromJsonValue(m_box_12, json[QString("box_12")]);
    m_box_12_isSet = !json[QString("box_12")].isNull() && m_box_12_isValid;

    m_box_9_isValid = ::OpenAPI::fromJsonValue(m_box_9, json[QString("box_9")]);
    m_box_9_isSet = !json[QString("box_9")].isNull() && m_box_9_isValid;

    m_dependent_care_benefits_isValid = ::OpenAPI::fromJsonValue(m_dependent_care_benefits, json[QString("dependent_care_benefits")]);
    m_dependent_care_benefits_isSet = !json[QString("dependent_care_benefits")].isNull() && m_dependent_care_benefits_isValid;

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("document_id")]);
    m_document_id_isSet = !json[QString("document_id")].isNull() && m_document_id_isValid;

    m_document_metadata_isValid = ::OpenAPI::fromJsonValue(m_document_metadata, json[QString("document_metadata")]);
    m_document_metadata_isSet = !json[QString("document_metadata")].isNull() && m_document_metadata_isValid;

    m_employee_isValid = ::OpenAPI::fromJsonValue(m_employee, json[QString("employee")]);
    m_employee_isSet = !json[QString("employee")].isNull() && m_employee_isValid;

    m_employer_isValid = ::OpenAPI::fromJsonValue(m_employer, json[QString("employer")]);
    m_employer_isSet = !json[QString("employer")].isNull() && m_employer_isValid;

    m_employer_id_number_isValid = ::OpenAPI::fromJsonValue(m_employer_id_number, json[QString("employer_id_number")]);
    m_employer_id_number_isSet = !json[QString("employer_id_number")].isNull() && m_employer_id_number_isValid;

    m_federal_income_tax_withheld_isValid = ::OpenAPI::fromJsonValue(m_federal_income_tax_withheld, json[QString("federal_income_tax_withheld")]);
    m_federal_income_tax_withheld_isSet = !json[QString("federal_income_tax_withheld")].isNull() && m_federal_income_tax_withheld_isValid;

    m_medicare_tax_withheld_isValid = ::OpenAPI::fromJsonValue(m_medicare_tax_withheld, json[QString("medicare_tax_withheld")]);
    m_medicare_tax_withheld_isSet = !json[QString("medicare_tax_withheld")].isNull() && m_medicare_tax_withheld_isValid;

    m_medicare_wages_and_tips_isValid = ::OpenAPI::fromJsonValue(m_medicare_wages_and_tips, json[QString("medicare_wages_and_tips")]);
    m_medicare_wages_and_tips_isSet = !json[QString("medicare_wages_and_tips")].isNull() && m_medicare_wages_and_tips_isValid;

    m_nonqualified_plans_isValid = ::OpenAPI::fromJsonValue(m_nonqualified_plans, json[QString("nonqualified_plans")]);
    m_nonqualified_plans_isSet = !json[QString("nonqualified_plans")].isNull() && m_nonqualified_plans_isValid;

    m_other_isValid = ::OpenAPI::fromJsonValue(m_other, json[QString("other")]);
    m_other_isSet = !json[QString("other")].isNull() && m_other_isValid;

    m_retirement_plan_isValid = ::OpenAPI::fromJsonValue(m_retirement_plan, json[QString("retirement_plan")]);
    m_retirement_plan_isSet = !json[QString("retirement_plan")].isNull() && m_retirement_plan_isValid;

    m_social_security_tax_withheld_isValid = ::OpenAPI::fromJsonValue(m_social_security_tax_withheld, json[QString("social_security_tax_withheld")]);
    m_social_security_tax_withheld_isSet = !json[QString("social_security_tax_withheld")].isNull() && m_social_security_tax_withheld_isValid;

    m_social_security_tips_isValid = ::OpenAPI::fromJsonValue(m_social_security_tips, json[QString("social_security_tips")]);
    m_social_security_tips_isSet = !json[QString("social_security_tips")].isNull() && m_social_security_tips_isValid;

    m_social_security_wages_isValid = ::OpenAPI::fromJsonValue(m_social_security_wages, json[QString("social_security_wages")]);
    m_social_security_wages_isSet = !json[QString("social_security_wages")].isNull() && m_social_security_wages_isValid;

    m_state_and_local_wages_isValid = ::OpenAPI::fromJsonValue(m_state_and_local_wages, json[QString("state_and_local_wages")]);
    m_state_and_local_wages_isSet = !json[QString("state_and_local_wages")].isNull() && m_state_and_local_wages_isValid;

    m_statutory_employee_isValid = ::OpenAPI::fromJsonValue(m_statutory_employee, json[QString("statutory_employee")]);
    m_statutory_employee_isSet = !json[QString("statutory_employee")].isNull() && m_statutory_employee_isValid;

    m_tax_year_isValid = ::OpenAPI::fromJsonValue(m_tax_year, json[QString("tax_year")]);
    m_tax_year_isSet = !json[QString("tax_year")].isNull() && m_tax_year_isValid;

    m_third_party_sick_pay_isValid = ::OpenAPI::fromJsonValue(m_third_party_sick_pay, json[QString("third_party_sick_pay")]);
    m_third_party_sick_pay_isSet = !json[QString("third_party_sick_pay")].isNull() && m_third_party_sick_pay_isValid;

    m_wages_tips_other_comp_isValid = ::OpenAPI::fromJsonValue(m_wages_tips_other_comp, json[QString("wages_tips_other_comp")]);
    m_wages_tips_other_comp_isSet = !json[QString("wages_tips_other_comp")].isNull() && m_wages_tips_other_comp_isValid;
}

QString OAICreditW2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreditW2::asJsonObject() const {
    QJsonObject obj;
    if (m_allocated_tips_isSet) {
        obj.insert(QString("allocated_tips"), ::OpenAPI::toJsonValue(m_allocated_tips));
    }
    if (m_box_12.size() > 0) {
        obj.insert(QString("box_12"), ::OpenAPI::toJsonValue(m_box_12));
    }
    if (m_box_9_isSet) {
        obj.insert(QString("box_9"), ::OpenAPI::toJsonValue(m_box_9));
    }
    if (m_dependent_care_benefits_isSet) {
        obj.insert(QString("dependent_care_benefits"), ::OpenAPI::toJsonValue(m_dependent_care_benefits));
    }
    if (m_document_id_isSet) {
        obj.insert(QString("document_id"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_document_metadata.isSet()) {
        obj.insert(QString("document_metadata"), ::OpenAPI::toJsonValue(m_document_metadata));
    }
    if (m_employee.isSet()) {
        obj.insert(QString("employee"), ::OpenAPI::toJsonValue(m_employee));
    }
    if (m_employer.isSet()) {
        obj.insert(QString("employer"), ::OpenAPI::toJsonValue(m_employer));
    }
    if (m_employer_id_number_isSet) {
        obj.insert(QString("employer_id_number"), ::OpenAPI::toJsonValue(m_employer_id_number));
    }
    if (m_federal_income_tax_withheld_isSet) {
        obj.insert(QString("federal_income_tax_withheld"), ::OpenAPI::toJsonValue(m_federal_income_tax_withheld));
    }
    if (m_medicare_tax_withheld_isSet) {
        obj.insert(QString("medicare_tax_withheld"), ::OpenAPI::toJsonValue(m_medicare_tax_withheld));
    }
    if (m_medicare_wages_and_tips_isSet) {
        obj.insert(QString("medicare_wages_and_tips"), ::OpenAPI::toJsonValue(m_medicare_wages_and_tips));
    }
    if (m_nonqualified_plans_isSet) {
        obj.insert(QString("nonqualified_plans"), ::OpenAPI::toJsonValue(m_nonqualified_plans));
    }
    if (m_other_isSet) {
        obj.insert(QString("other"), ::OpenAPI::toJsonValue(m_other));
    }
    if (m_retirement_plan_isSet) {
        obj.insert(QString("retirement_plan"), ::OpenAPI::toJsonValue(m_retirement_plan));
    }
    if (m_social_security_tax_withheld_isSet) {
        obj.insert(QString("social_security_tax_withheld"), ::OpenAPI::toJsonValue(m_social_security_tax_withheld));
    }
    if (m_social_security_tips_isSet) {
        obj.insert(QString("social_security_tips"), ::OpenAPI::toJsonValue(m_social_security_tips));
    }
    if (m_social_security_wages_isSet) {
        obj.insert(QString("social_security_wages"), ::OpenAPI::toJsonValue(m_social_security_wages));
    }
    if (m_state_and_local_wages.size() > 0) {
        obj.insert(QString("state_and_local_wages"), ::OpenAPI::toJsonValue(m_state_and_local_wages));
    }
    if (m_statutory_employee_isSet) {
        obj.insert(QString("statutory_employee"), ::OpenAPI::toJsonValue(m_statutory_employee));
    }
    if (m_tax_year_isSet) {
        obj.insert(QString("tax_year"), ::OpenAPI::toJsonValue(m_tax_year));
    }
    if (m_third_party_sick_pay_isSet) {
        obj.insert(QString("third_party_sick_pay"), ::OpenAPI::toJsonValue(m_third_party_sick_pay));
    }
    if (m_wages_tips_other_comp_isSet) {
        obj.insert(QString("wages_tips_other_comp"), ::OpenAPI::toJsonValue(m_wages_tips_other_comp));
    }
    return obj;
}

QString OAICreditW2::getAllocatedTips() const {
    return m_allocated_tips;
}
void OAICreditW2::setAllocatedTips(const QString &allocated_tips) {
    m_allocated_tips = allocated_tips;
    m_allocated_tips_isSet = true;
}

bool OAICreditW2::is_allocated_tips_Set() const{
    return m_allocated_tips_isSet;
}

bool OAICreditW2::is_allocated_tips_Valid() const{
    return m_allocated_tips_isValid;
}

QList<OAIW2Box12> OAICreditW2::getBox12() const {
    return m_box_12;
}
void OAICreditW2::setBox12(const QList<OAIW2Box12> &box_12) {
    m_box_12 = box_12;
    m_box_12_isSet = true;
}

bool OAICreditW2::is_box_12_Set() const{
    return m_box_12_isSet;
}

bool OAICreditW2::is_box_12_Valid() const{
    return m_box_12_isValid;
}

QString OAICreditW2::getBox9() const {
    return m_box_9;
}
void OAICreditW2::setBox9(const QString &box_9) {
    m_box_9 = box_9;
    m_box_9_isSet = true;
}

bool OAICreditW2::is_box_9_Set() const{
    return m_box_9_isSet;
}

bool OAICreditW2::is_box_9_Valid() const{
    return m_box_9_isValid;
}

QString OAICreditW2::getDependentCareBenefits() const {
    return m_dependent_care_benefits;
}
void OAICreditW2::setDependentCareBenefits(const QString &dependent_care_benefits) {
    m_dependent_care_benefits = dependent_care_benefits;
    m_dependent_care_benefits_isSet = true;
}

bool OAICreditW2::is_dependent_care_benefits_Set() const{
    return m_dependent_care_benefits_isSet;
}

bool OAICreditW2::is_dependent_care_benefits_Valid() const{
    return m_dependent_care_benefits_isValid;
}

QString OAICreditW2::getDocumentId() const {
    return m_document_id;
}
void OAICreditW2::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAICreditW2::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAICreditW2::is_document_id_Valid() const{
    return m_document_id_isValid;
}

OAICreditDocumentMetadata OAICreditW2::getDocumentMetadata() const {
    return m_document_metadata;
}
void OAICreditW2::setDocumentMetadata(const OAICreditDocumentMetadata &document_metadata) {
    m_document_metadata = document_metadata;
    m_document_metadata_isSet = true;
}

bool OAICreditW2::is_document_metadata_Set() const{
    return m_document_metadata_isSet;
}

bool OAICreditW2::is_document_metadata_Valid() const{
    return m_document_metadata_isValid;
}

OAICreditPayStubEmployee OAICreditW2::getEmployee() const {
    return m_employee;
}
void OAICreditW2::setEmployee(const OAICreditPayStubEmployee &employee) {
    m_employee = employee;
    m_employee_isSet = true;
}

bool OAICreditW2::is_employee_Set() const{
    return m_employee_isSet;
}

bool OAICreditW2::is_employee_Valid() const{
    return m_employee_isValid;
}

OAICreditPayStubEmployer OAICreditW2::getEmployer() const {
    return m_employer;
}
void OAICreditW2::setEmployer(const OAICreditPayStubEmployer &employer) {
    m_employer = employer;
    m_employer_isSet = true;
}

bool OAICreditW2::is_employer_Set() const{
    return m_employer_isSet;
}

bool OAICreditW2::is_employer_Valid() const{
    return m_employer_isValid;
}

QString OAICreditW2::getEmployerIdNumber() const {
    return m_employer_id_number;
}
void OAICreditW2::setEmployerIdNumber(const QString &employer_id_number) {
    m_employer_id_number = employer_id_number;
    m_employer_id_number_isSet = true;
}

bool OAICreditW2::is_employer_id_number_Set() const{
    return m_employer_id_number_isSet;
}

bool OAICreditW2::is_employer_id_number_Valid() const{
    return m_employer_id_number_isValid;
}

QString OAICreditW2::getFederalIncomeTaxWithheld() const {
    return m_federal_income_tax_withheld;
}
void OAICreditW2::setFederalIncomeTaxWithheld(const QString &federal_income_tax_withheld) {
    m_federal_income_tax_withheld = federal_income_tax_withheld;
    m_federal_income_tax_withheld_isSet = true;
}

bool OAICreditW2::is_federal_income_tax_withheld_Set() const{
    return m_federal_income_tax_withheld_isSet;
}

bool OAICreditW2::is_federal_income_tax_withheld_Valid() const{
    return m_federal_income_tax_withheld_isValid;
}

QString OAICreditW2::getMedicareTaxWithheld() const {
    return m_medicare_tax_withheld;
}
void OAICreditW2::setMedicareTaxWithheld(const QString &medicare_tax_withheld) {
    m_medicare_tax_withheld = medicare_tax_withheld;
    m_medicare_tax_withheld_isSet = true;
}

bool OAICreditW2::is_medicare_tax_withheld_Set() const{
    return m_medicare_tax_withheld_isSet;
}

bool OAICreditW2::is_medicare_tax_withheld_Valid() const{
    return m_medicare_tax_withheld_isValid;
}

QString OAICreditW2::getMedicareWagesAndTips() const {
    return m_medicare_wages_and_tips;
}
void OAICreditW2::setMedicareWagesAndTips(const QString &medicare_wages_and_tips) {
    m_medicare_wages_and_tips = medicare_wages_and_tips;
    m_medicare_wages_and_tips_isSet = true;
}

bool OAICreditW2::is_medicare_wages_and_tips_Set() const{
    return m_medicare_wages_and_tips_isSet;
}

bool OAICreditW2::is_medicare_wages_and_tips_Valid() const{
    return m_medicare_wages_and_tips_isValid;
}

QString OAICreditW2::getNonqualifiedPlans() const {
    return m_nonqualified_plans;
}
void OAICreditW2::setNonqualifiedPlans(const QString &nonqualified_plans) {
    m_nonqualified_plans = nonqualified_plans;
    m_nonqualified_plans_isSet = true;
}

bool OAICreditW2::is_nonqualified_plans_Set() const{
    return m_nonqualified_plans_isSet;
}

bool OAICreditW2::is_nonqualified_plans_Valid() const{
    return m_nonqualified_plans_isValid;
}

QString OAICreditW2::getOther() const {
    return m_other;
}
void OAICreditW2::setOther(const QString &other) {
    m_other = other;
    m_other_isSet = true;
}

bool OAICreditW2::is_other_Set() const{
    return m_other_isSet;
}

bool OAICreditW2::is_other_Valid() const{
    return m_other_isValid;
}

QString OAICreditW2::getRetirementPlan() const {
    return m_retirement_plan;
}
void OAICreditW2::setRetirementPlan(const QString &retirement_plan) {
    m_retirement_plan = retirement_plan;
    m_retirement_plan_isSet = true;
}

bool OAICreditW2::is_retirement_plan_Set() const{
    return m_retirement_plan_isSet;
}

bool OAICreditW2::is_retirement_plan_Valid() const{
    return m_retirement_plan_isValid;
}

QString OAICreditW2::getSocialSecurityTaxWithheld() const {
    return m_social_security_tax_withheld;
}
void OAICreditW2::setSocialSecurityTaxWithheld(const QString &social_security_tax_withheld) {
    m_social_security_tax_withheld = social_security_tax_withheld;
    m_social_security_tax_withheld_isSet = true;
}

bool OAICreditW2::is_social_security_tax_withheld_Set() const{
    return m_social_security_tax_withheld_isSet;
}

bool OAICreditW2::is_social_security_tax_withheld_Valid() const{
    return m_social_security_tax_withheld_isValid;
}

QString OAICreditW2::getSocialSecurityTips() const {
    return m_social_security_tips;
}
void OAICreditW2::setSocialSecurityTips(const QString &social_security_tips) {
    m_social_security_tips = social_security_tips;
    m_social_security_tips_isSet = true;
}

bool OAICreditW2::is_social_security_tips_Set() const{
    return m_social_security_tips_isSet;
}

bool OAICreditW2::is_social_security_tips_Valid() const{
    return m_social_security_tips_isValid;
}

QString OAICreditW2::getSocialSecurityWages() const {
    return m_social_security_wages;
}
void OAICreditW2::setSocialSecurityWages(const QString &social_security_wages) {
    m_social_security_wages = social_security_wages;
    m_social_security_wages_isSet = true;
}

bool OAICreditW2::is_social_security_wages_Set() const{
    return m_social_security_wages_isSet;
}

bool OAICreditW2::is_social_security_wages_Valid() const{
    return m_social_security_wages_isValid;
}

QList<OAIW2StateAndLocalWages> OAICreditW2::getStateAndLocalWages() const {
    return m_state_and_local_wages;
}
void OAICreditW2::setStateAndLocalWages(const QList<OAIW2StateAndLocalWages> &state_and_local_wages) {
    m_state_and_local_wages = state_and_local_wages;
    m_state_and_local_wages_isSet = true;
}

bool OAICreditW2::is_state_and_local_wages_Set() const{
    return m_state_and_local_wages_isSet;
}

bool OAICreditW2::is_state_and_local_wages_Valid() const{
    return m_state_and_local_wages_isValid;
}

QString OAICreditW2::getStatutoryEmployee() const {
    return m_statutory_employee;
}
void OAICreditW2::setStatutoryEmployee(const QString &statutory_employee) {
    m_statutory_employee = statutory_employee;
    m_statutory_employee_isSet = true;
}

bool OAICreditW2::is_statutory_employee_Set() const{
    return m_statutory_employee_isSet;
}

bool OAICreditW2::is_statutory_employee_Valid() const{
    return m_statutory_employee_isValid;
}

QString OAICreditW2::getTaxYear() const {
    return m_tax_year;
}
void OAICreditW2::setTaxYear(const QString &tax_year) {
    m_tax_year = tax_year;
    m_tax_year_isSet = true;
}

bool OAICreditW2::is_tax_year_Set() const{
    return m_tax_year_isSet;
}

bool OAICreditW2::is_tax_year_Valid() const{
    return m_tax_year_isValid;
}

QString OAICreditW2::getThirdPartySickPay() const {
    return m_third_party_sick_pay;
}
void OAICreditW2::setThirdPartySickPay(const QString &third_party_sick_pay) {
    m_third_party_sick_pay = third_party_sick_pay;
    m_third_party_sick_pay_isSet = true;
}

bool OAICreditW2::is_third_party_sick_pay_Set() const{
    return m_third_party_sick_pay_isSet;
}

bool OAICreditW2::is_third_party_sick_pay_Valid() const{
    return m_third_party_sick_pay_isValid;
}

QString OAICreditW2::getWagesTipsOtherComp() const {
    return m_wages_tips_other_comp;
}
void OAICreditW2::setWagesTipsOtherComp(const QString &wages_tips_other_comp) {
    m_wages_tips_other_comp = wages_tips_other_comp;
    m_wages_tips_other_comp_isSet = true;
}

bool OAICreditW2::is_wages_tips_other_comp_Set() const{
    return m_wages_tips_other_comp_isSet;
}

bool OAICreditW2::is_wages_tips_other_comp_Valid() const{
    return m_wages_tips_other_comp_isValid;
}

bool OAICreditW2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocated_tips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_box_12.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_box_9_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependent_care_benefits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer_id_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federal_income_tax_withheld_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medicare_tax_withheld_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medicare_wages_and_tips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nonqualified_plans_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retirement_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_security_tax_withheld_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_security_tips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_security_wages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_and_local_wages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_statutory_employee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_sick_pay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wages_tips_other_comp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreditW2::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allocated_tips_isValid && m_box_12_isValid && m_box_9_isValid && m_dependent_care_benefits_isValid && m_document_id_isValid && m_document_metadata_isValid && m_employee_isValid && m_employer_isValid && m_employer_id_number_isValid && m_federal_income_tax_withheld_isValid && m_medicare_tax_withheld_isValid && m_medicare_wages_and_tips_isValid && m_nonqualified_plans_isValid && m_other_isValid && m_retirement_plan_isValid && m_social_security_tax_withheld_isValid && m_social_security_tips_isValid && m_social_security_wages_isValid && m_state_and_local_wages_isValid && m_statutory_employee_isValid && m_tax_year_isValid && m_third_party_sick_pay_isValid && m_wages_tips_other_comp_isValid && true;
}

} // namespace OpenAPI
