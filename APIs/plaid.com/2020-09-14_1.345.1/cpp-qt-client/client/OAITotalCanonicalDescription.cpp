/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITotalCanonicalDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITotalCanonicalDescription::OAITotalCanonicalDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITotalCanonicalDescription::OAITotalCanonicalDescription() {
    this->initializeModel();
}

OAITotalCanonicalDescription::~OAITotalCanonicalDescription() {}

void OAITotalCanonicalDescription::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITotalCanonicalDescription::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITotalCanonicalDescription::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BONUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAITotalCanonicalDescription::BONUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMMISSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAITotalCanonicalDescription::COMMISSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OVERTIME", Qt::CaseInsensitive) == 0) {
        m_value = eOAITotalCanonicalDescription::OVERTIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAID TIME OFF", Qt::CaseInsensitive) == 0) {
        m_value = eOAITotalCanonicalDescription::PAID_TIME_OFF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REGULAR PAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAITotalCanonicalDescription::REGULAR_PAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VACATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAITotalCanonicalDescription::VACATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EMPLOYEE MEDICARE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITotalCanonicalDescription::EMPLOYEE_MEDICARE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FICA", Qt::CaseInsensitive) == 0) {
        m_value = eOAITotalCanonicalDescription::FICA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SOCIAL SECURITY EMPLOYEE TAX", Qt::CaseInsensitive) == 0) {
        m_value = eOAITotalCanonicalDescription::SOCIAL_SECURITY_EMPLOYEE_TAX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEDICAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITotalCanonicalDescription::MEDICAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VISION", Qt::CaseInsensitive) == 0) {
        m_value = eOAITotalCanonicalDescription::VISION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DENTAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAITotalCanonicalDescription::DENTAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NET PAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAITotalCanonicalDescription::NET_PAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAXES", Qt::CaseInsensitive) == 0) {
        m_value = eOAITotalCanonicalDescription::TAXES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAITotalCanonicalDescription::NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHER", Qt::CaseInsensitive) == 0) {
        m_value = eOAITotalCanonicalDescription::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITotalCanonicalDescription::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITotalCanonicalDescription::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITotalCanonicalDescription::BONUS:
            val = "BONUS";
            break;
        case eOAITotalCanonicalDescription::COMMISSION:
            val = "COMMISSION";
            break;
        case eOAITotalCanonicalDescription::OVERTIME:
            val = "OVERTIME";
            break;
        case eOAITotalCanonicalDescription::PAID_TIME_OFF:
            val = "PAID TIME OFF";
            break;
        case eOAITotalCanonicalDescription::REGULAR_PAY:
            val = "REGULAR PAY";
            break;
        case eOAITotalCanonicalDescription::VACATION:
            val = "VACATION";
            break;
        case eOAITotalCanonicalDescription::EMPLOYEE_MEDICARE:
            val = "EMPLOYEE MEDICARE";
            break;
        case eOAITotalCanonicalDescription::FICA:
            val = "FICA";
            break;
        case eOAITotalCanonicalDescription::SOCIAL_SECURITY_EMPLOYEE_TAX:
            val = "SOCIAL SECURITY EMPLOYEE TAX";
            break;
        case eOAITotalCanonicalDescription::MEDICAL:
            val = "MEDICAL";
            break;
        case eOAITotalCanonicalDescription::VISION:
            val = "VISION";
            break;
        case eOAITotalCanonicalDescription::DENTAL:
            val = "DENTAL";
            break;
        case eOAITotalCanonicalDescription::NET_PAY:
            val = "NET PAY";
            break;
        case eOAITotalCanonicalDescription::TAXES:
            val = "TAXES";
            break;
        case eOAITotalCanonicalDescription::NOT_FOUND:
            val = "NOT_FOUND";
            break;
        case eOAITotalCanonicalDescription::OTHER:
            val = "OTHER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITotalCanonicalDescription::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITotalCanonicalDescription::eOAITotalCanonicalDescription OAITotalCanonicalDescription::getValue() const {
    return m_value;
}

void OAITotalCanonicalDescription::setValue(const OAITotalCanonicalDescription::eOAITotalCanonicalDescription& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITotalCanonicalDescription::isSet() const {
    
    return m_value_isSet;
}

bool OAITotalCanonicalDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
