/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiDocumentRiskSignal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiDocumentRiskSignal::OAIMultiDocumentRiskSignal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiDocumentRiskSignal::OAIMultiDocumentRiskSignal() {
    this->initializeModel();
}

OAIMultiDocumentRiskSignal::~OAIMultiDocumentRiskSignal() {}

void OAIMultiDocumentRiskSignal::initializeModel() {

    m_document_references_isSet = false;
    m_document_references_isValid = false;

    m_risk_signals_isSet = false;
    m_risk_signals_isValid = false;
}

void OAIMultiDocumentRiskSignal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiDocumentRiskSignal::fromJsonObject(QJsonObject json) {

    m_document_references_isValid = ::OpenAPI::fromJsonValue(m_document_references, json[QString("document_references")]);
    m_document_references_isSet = !json[QString("document_references")].isNull() && m_document_references_isValid;

    m_risk_signals_isValid = ::OpenAPI::fromJsonValue(m_risk_signals, json[QString("risk_signals")]);
    m_risk_signals_isSet = !json[QString("risk_signals")].isNull() && m_risk_signals_isValid;
}

QString OAIMultiDocumentRiskSignal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiDocumentRiskSignal::asJsonObject() const {
    QJsonObject obj;
    if (m_document_references.size() > 0) {
        obj.insert(QString("document_references"), ::OpenAPI::toJsonValue(m_document_references));
    }
    if (m_risk_signals.size() > 0) {
        obj.insert(QString("risk_signals"), ::OpenAPI::toJsonValue(m_risk_signals));
    }
    return obj;
}

QList<OAIRiskSignalDocumentReference> OAIMultiDocumentRiskSignal::getDocumentReferences() const {
    return m_document_references;
}
void OAIMultiDocumentRiskSignal::setDocumentReferences(const QList<OAIRiskSignalDocumentReference> &document_references) {
    m_document_references = document_references;
    m_document_references_isSet = true;
}

bool OAIMultiDocumentRiskSignal::is_document_references_Set() const{
    return m_document_references_isSet;
}

bool OAIMultiDocumentRiskSignal::is_document_references_Valid() const{
    return m_document_references_isValid;
}

QList<OAIDocumentRiskSignal> OAIMultiDocumentRiskSignal::getRiskSignals() const {
    return m_risk_signals;
}
void OAIMultiDocumentRiskSignal::setRiskSignals(const QList<OAIDocumentRiskSignal> &risk_signals) {
    m_risk_signals = risk_signals;
    m_risk_signals_isSet = true;
}

bool OAIMultiDocumentRiskSignal::is_risk_signals_Set() const{
    return m_risk_signals_isSet;
}

bool OAIMultiDocumentRiskSignal::is_risk_signals_Valid() const{
    return m_risk_signals_isValid;
}

bool OAIMultiDocumentRiskSignal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_signals.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiDocumentRiskSignal::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_references_isValid && m_risk_signals_isValid && true;
}

} // namespace OpenAPI
