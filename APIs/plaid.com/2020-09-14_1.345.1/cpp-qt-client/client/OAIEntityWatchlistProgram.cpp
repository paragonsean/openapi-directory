/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityWatchlistProgram.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityWatchlistProgram::OAIEntityWatchlistProgram(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityWatchlistProgram::OAIEntityWatchlistProgram() {
    this->initializeModel();
}

OAIEntityWatchlistProgram::~OAIEntityWatchlistProgram() {}

void OAIEntityWatchlistProgram::initializeModel() {

    m_audit_trail_isSet = false;
    m_audit_trail_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_archived_isSet = false;
    m_is_archived_isValid = false;

    m_is_rescanning_enabled_isSet = false;
    m_is_rescanning_enabled_isValid = false;

    m_lists_enabled_isSet = false;
    m_lists_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_sensitivity_isSet = false;
    m_name_sensitivity_isValid = false;
}

void OAIEntityWatchlistProgram::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityWatchlistProgram::fromJsonObject(QJsonObject json) {

    m_audit_trail_isValid = ::OpenAPI::fromJsonValue(m_audit_trail, json[QString("audit_trail")]);
    m_audit_trail_isSet = !json[QString("audit_trail")].isNull() && m_audit_trail_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_archived_isValid = ::OpenAPI::fromJsonValue(m_is_archived, json[QString("is_archived")]);
    m_is_archived_isSet = !json[QString("is_archived")].isNull() && m_is_archived_isValid;

    m_is_rescanning_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_rescanning_enabled, json[QString("is_rescanning_enabled")]);
    m_is_rescanning_enabled_isSet = !json[QString("is_rescanning_enabled")].isNull() && m_is_rescanning_enabled_isValid;

    m_lists_enabled_isValid = ::OpenAPI::fromJsonValue(m_lists_enabled, json[QString("lists_enabled")]);
    m_lists_enabled_isSet = !json[QString("lists_enabled")].isNull() && m_lists_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_sensitivity_isValid = ::OpenAPI::fromJsonValue(m_name_sensitivity, json[QString("name_sensitivity")]);
    m_name_sensitivity_isSet = !json[QString("name_sensitivity")].isNull() && m_name_sensitivity_isValid;
}

QString OAIEntityWatchlistProgram::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityWatchlistProgram::asJsonObject() const {
    QJsonObject obj;
    if (m_audit_trail.isSet()) {
        obj.insert(QString("audit_trail"), ::OpenAPI::toJsonValue(m_audit_trail));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_archived_isSet) {
        obj.insert(QString("is_archived"), ::OpenAPI::toJsonValue(m_is_archived));
    }
    if (m_is_rescanning_enabled_isSet) {
        obj.insert(QString("is_rescanning_enabled"), ::OpenAPI::toJsonValue(m_is_rescanning_enabled));
    }
    if (m_lists_enabled.size() > 0) {
        obj.insert(QString("lists_enabled"), ::OpenAPI::toJsonValue(m_lists_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_sensitivity.isSet()) {
        obj.insert(QString("name_sensitivity"), ::OpenAPI::toJsonValue(m_name_sensitivity));
    }
    return obj;
}

OAIWatchlistScreeningAuditTrail OAIEntityWatchlistProgram::getAuditTrail() const {
    return m_audit_trail;
}
void OAIEntityWatchlistProgram::setAuditTrail(const OAIWatchlistScreeningAuditTrail &audit_trail) {
    m_audit_trail = audit_trail;
    m_audit_trail_isSet = true;
}

bool OAIEntityWatchlistProgram::is_audit_trail_Set() const{
    return m_audit_trail_isSet;
}

bool OAIEntityWatchlistProgram::is_audit_trail_Valid() const{
    return m_audit_trail_isValid;
}

QDateTime OAIEntityWatchlistProgram::getCreatedAt() const {
    return m_created_at;
}
void OAIEntityWatchlistProgram::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIEntityWatchlistProgram::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIEntityWatchlistProgram::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIEntityWatchlistProgram::getId() const {
    return m_id;
}
void OAIEntityWatchlistProgram::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEntityWatchlistProgram::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEntityWatchlistProgram::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIEntityWatchlistProgram::isIsArchived() const {
    return m_is_archived;
}
void OAIEntityWatchlistProgram::setIsArchived(const bool &is_archived) {
    m_is_archived = is_archived;
    m_is_archived_isSet = true;
}

bool OAIEntityWatchlistProgram::is_is_archived_Set() const{
    return m_is_archived_isSet;
}

bool OAIEntityWatchlistProgram::is_is_archived_Valid() const{
    return m_is_archived_isValid;
}

bool OAIEntityWatchlistProgram::isIsRescanningEnabled() const {
    return m_is_rescanning_enabled;
}
void OAIEntityWatchlistProgram::setIsRescanningEnabled(const bool &is_rescanning_enabled) {
    m_is_rescanning_enabled = is_rescanning_enabled;
    m_is_rescanning_enabled_isSet = true;
}

bool OAIEntityWatchlistProgram::is_is_rescanning_enabled_Set() const{
    return m_is_rescanning_enabled_isSet;
}

bool OAIEntityWatchlistProgram::is_is_rescanning_enabled_Valid() const{
    return m_is_rescanning_enabled_isValid;
}

QSet<OAIEntityWatchlistCode> OAIEntityWatchlistProgram::getListsEnabled() const {
    return m_lists_enabled;
}
void OAIEntityWatchlistProgram::setListsEnabled(const QSet<OAIEntityWatchlistCode> &lists_enabled) {
    m_lists_enabled = lists_enabled;
    m_lists_enabled_isSet = true;
}

bool OAIEntityWatchlistProgram::is_lists_enabled_Set() const{
    return m_lists_enabled_isSet;
}

bool OAIEntityWatchlistProgram::is_lists_enabled_Valid() const{
    return m_lists_enabled_isValid;
}

QString OAIEntityWatchlistProgram::getName() const {
    return m_name;
}
void OAIEntityWatchlistProgram::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEntityWatchlistProgram::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEntityWatchlistProgram::is_name_Valid() const{
    return m_name_isValid;
}

OAIProgramNameSensitivity OAIEntityWatchlistProgram::getNameSensitivity() const {
    return m_name_sensitivity;
}
void OAIEntityWatchlistProgram::setNameSensitivity(const OAIProgramNameSensitivity &name_sensitivity) {
    m_name_sensitivity = name_sensitivity;
    m_name_sensitivity_isSet = true;
}

bool OAIEntityWatchlistProgram::is_name_sensitivity_Set() const{
    return m_name_sensitivity_isSet;
}

bool OAIEntityWatchlistProgram::is_name_sensitivity_Valid() const{
    return m_name_sensitivity_isValid;
}

bool OAIEntityWatchlistProgram::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audit_trail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_rescanning_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lists_enabled.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_sensitivity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityWatchlistProgram::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audit_trail_isValid && m_created_at_isValid && m_id_isValid && m_is_archived_isValid && m_is_rescanning_enabled_isValid && m_lists_enabled_isValid && m_name_isValid && m_name_sensitivity_isValid && true;
}

} // namespace OpenAPI
