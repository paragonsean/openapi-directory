/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFDXNotificationCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFDXNotificationCategory::OAIFDXNotificationCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFDXNotificationCategory::OAIFDXNotificationCategory() {
    this->initializeModel();
}

OAIFDXNotificationCategory::~OAIFDXNotificationCategory() {}

void OAIFDXNotificationCategory::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFDXNotificationCategory::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFDXNotificationCategory::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SECURITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFDXNotificationCategory::SECURITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAINTENANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFDXNotificationCategory::MAINTENANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FRAUD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFDXNotificationCategory::FRAUD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONSENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFDXNotificationCategory::CONSENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NEW_DATA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFDXNotificationCategory::NEW_DATA;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFDXNotificationCategory::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFDXNotificationCategory::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFDXNotificationCategory::SECURITY:
            val = "SECURITY";
            break;
        case eOAIFDXNotificationCategory::MAINTENANCE:
            val = "MAINTENANCE";
            break;
        case eOAIFDXNotificationCategory::FRAUD:
            val = "FRAUD";
            break;
        case eOAIFDXNotificationCategory::CONSENT:
            val = "CONSENT";
            break;
        case eOAIFDXNotificationCategory::NEW_DATA:
            val = "NEW_DATA";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFDXNotificationCategory::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFDXNotificationCategory::eOAIFDXNotificationCategory OAIFDXNotificationCategory::getValue() const {
    return m_value;
}

void OAIFDXNotificationCategory::setValue(const OAIFDXNotificationCategory::eOAIFDXNotificationCategory& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFDXNotificationCategory::isSet() const {
    
    return m_value_isSet;
}

bool OAIFDXNotificationCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
