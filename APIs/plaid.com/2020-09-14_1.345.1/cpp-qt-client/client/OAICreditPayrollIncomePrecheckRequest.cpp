/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreditPayrollIncomePrecheckRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreditPayrollIncomePrecheckRequest::OAICreditPayrollIncomePrecheckRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreditPayrollIncomePrecheckRequest::OAICreditPayrollIncomePrecheckRequest() {
    this->initializeModel();
}

OAICreditPayrollIncomePrecheckRequest::~OAICreditPayrollIncomePrecheckRequest() {}

void OAICreditPayrollIncomePrecheckRequest::initializeModel() {

    m_access_tokens_isSet = false;
    m_access_tokens_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_employer_isSet = false;
    m_employer_isValid = false;

    m_payroll_institution_isSet = false;
    m_payroll_institution_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_us_military_info_isSet = false;
    m_us_military_info_isValid = false;

    m_user_token_isSet = false;
    m_user_token_isValid = false;
}

void OAICreditPayrollIncomePrecheckRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreditPayrollIncomePrecheckRequest::fromJsonObject(QJsonObject json) {

    m_access_tokens_isValid = ::OpenAPI::fromJsonValue(m_access_tokens, json[QString("access_tokens")]);
    m_access_tokens_isSet = !json[QString("access_tokens")].isNull() && m_access_tokens_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_employer_isValid = ::OpenAPI::fromJsonValue(m_employer, json[QString("employer")]);
    m_employer_isSet = !json[QString("employer")].isNull() && m_employer_isValid;

    m_payroll_institution_isValid = ::OpenAPI::fromJsonValue(m_payroll_institution, json[QString("payroll_institution")]);
    m_payroll_institution_isSet = !json[QString("payroll_institution")].isNull() && m_payroll_institution_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_us_military_info_isValid = ::OpenAPI::fromJsonValue(m_us_military_info, json[QString("us_military_info")]);
    m_us_military_info_isSet = !json[QString("us_military_info")].isNull() && m_us_military_info_isValid;

    m_user_token_isValid = ::OpenAPI::fromJsonValue(m_user_token, json[QString("user_token")]);
    m_user_token_isSet = !json[QString("user_token")].isNull() && m_user_token_isValid;
}

QString OAICreditPayrollIncomePrecheckRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreditPayrollIncomePrecheckRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_access_tokens.size() > 0) {
        obj.insert(QString("access_tokens"), ::OpenAPI::toJsonValue(m_access_tokens));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_employer.isSet()) {
        obj.insert(QString("employer"), ::OpenAPI::toJsonValue(m_employer));
    }
    if (m_payroll_institution.isSet()) {
        obj.insert(QString("payroll_institution"), ::OpenAPI::toJsonValue(m_payroll_institution));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_us_military_info.isSet()) {
        obj.insert(QString("us_military_info"), ::OpenAPI::toJsonValue(m_us_military_info));
    }
    if (m_user_token_isSet) {
        obj.insert(QString("user_token"), ::OpenAPI::toJsonValue(m_user_token));
    }
    return obj;
}

QList<QString> OAICreditPayrollIncomePrecheckRequest::getAccessTokens() const {
    return m_access_tokens;
}
void OAICreditPayrollIncomePrecheckRequest::setAccessTokens(const QList<QString> &access_tokens) {
    m_access_tokens = access_tokens;
    m_access_tokens_isSet = true;
}

bool OAICreditPayrollIncomePrecheckRequest::is_access_tokens_Set() const{
    return m_access_tokens_isSet;
}

bool OAICreditPayrollIncomePrecheckRequest::is_access_tokens_Valid() const{
    return m_access_tokens_isValid;
}

QString OAICreditPayrollIncomePrecheckRequest::getClientId() const {
    return m_client_id;
}
void OAICreditPayrollIncomePrecheckRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAICreditPayrollIncomePrecheckRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAICreditPayrollIncomePrecheckRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

OAIIncomeVerificationPrecheckEmployer OAICreditPayrollIncomePrecheckRequest::getEmployer() const {
    return m_employer;
}
void OAICreditPayrollIncomePrecheckRequest::setEmployer(const OAIIncomeVerificationPrecheckEmployer &employer) {
    m_employer = employer;
    m_employer_isSet = true;
}

bool OAICreditPayrollIncomePrecheckRequest::is_employer_Set() const{
    return m_employer_isSet;
}

bool OAICreditPayrollIncomePrecheckRequest::is_employer_Valid() const{
    return m_employer_isValid;
}

OAIIncomeVerificationPrecheckPayrollInstitution OAICreditPayrollIncomePrecheckRequest::getPayrollInstitution() const {
    return m_payroll_institution;
}
void OAICreditPayrollIncomePrecheckRequest::setPayrollInstitution(const OAIIncomeVerificationPrecheckPayrollInstitution &payroll_institution) {
    m_payroll_institution = payroll_institution;
    m_payroll_institution_isSet = true;
}

bool OAICreditPayrollIncomePrecheckRequest::is_payroll_institution_Set() const{
    return m_payroll_institution_isSet;
}

bool OAICreditPayrollIncomePrecheckRequest::is_payroll_institution_Valid() const{
    return m_payroll_institution_isValid;
}

QString OAICreditPayrollIncomePrecheckRequest::getSecret() const {
    return m_secret;
}
void OAICreditPayrollIncomePrecheckRequest::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAICreditPayrollIncomePrecheckRequest::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAICreditPayrollIncomePrecheckRequest::is_secret_Valid() const{
    return m_secret_isValid;
}

OAIIncomeVerificationPrecheckMilitaryInfo OAICreditPayrollIncomePrecheckRequest::getUsMilitaryInfo() const {
    return m_us_military_info;
}
void OAICreditPayrollIncomePrecheckRequest::setUsMilitaryInfo(const OAIIncomeVerificationPrecheckMilitaryInfo &us_military_info) {
    m_us_military_info = us_military_info;
    m_us_military_info_isSet = true;
}

bool OAICreditPayrollIncomePrecheckRequest::is_us_military_info_Set() const{
    return m_us_military_info_isSet;
}

bool OAICreditPayrollIncomePrecheckRequest::is_us_military_info_Valid() const{
    return m_us_military_info_isValid;
}

QString OAICreditPayrollIncomePrecheckRequest::getUserToken() const {
    return m_user_token;
}
void OAICreditPayrollIncomePrecheckRequest::setUserToken(const QString &user_token) {
    m_user_token = user_token;
    m_user_token_isSet = true;
}

bool OAICreditPayrollIncomePrecheckRequest::is_user_token_Set() const{
    return m_user_token_isSet;
}

bool OAICreditPayrollIncomePrecheckRequest::is_user_token_Valid() const{
    return m_user_token_isValid;
}

bool OAICreditPayrollIncomePrecheckRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_tokens.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payroll_institution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_us_military_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreditPayrollIncomePrecheckRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
