/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhysicalDocumentExtractedData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhysicalDocumentExtractedData::OAIPhysicalDocumentExtractedData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhysicalDocumentExtractedData::OAIPhysicalDocumentExtractedData() {
    this->initializeModel();
}

OAIPhysicalDocumentExtractedData::~OAIPhysicalDocumentExtractedData() {}

void OAIPhysicalDocumentExtractedData::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_id_number_isSet = false;
    m_id_number_isValid = false;

    m_issuing_country_isSet = false;
    m_issuing_country_isValid = false;

    m_issuing_region_isSet = false;
    m_issuing_region_isValid = false;
}

void OAIPhysicalDocumentExtractedData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhysicalDocumentExtractedData::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expiration_date")]);
    m_expiration_date_isSet = !json[QString("expiration_date")].isNull() && m_expiration_date_isValid;

    m_id_number_isValid = ::OpenAPI::fromJsonValue(m_id_number, json[QString("id_number")]);
    m_id_number_isSet = !json[QString("id_number")].isNull() && m_id_number_isValid;

    m_issuing_country_isValid = ::OpenAPI::fromJsonValue(m_issuing_country, json[QString("issuing_country")]);
    m_issuing_country_isSet = !json[QString("issuing_country")].isNull() && m_issuing_country_isValid;

    m_issuing_region_isValid = ::OpenAPI::fromJsonValue(m_issuing_region, json[QString("issuing_region")]);
    m_issuing_region_isSet = !json[QString("issuing_region")].isNull() && m_issuing_region_isValid;
}

QString OAIPhysicalDocumentExtractedData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhysicalDocumentExtractedData::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expiration_date"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_id_number_isSet) {
        obj.insert(QString("id_number"), ::OpenAPI::toJsonValue(m_id_number));
    }
    if (m_issuing_country_isSet) {
        obj.insert(QString("issuing_country"), ::OpenAPI::toJsonValue(m_issuing_country));
    }
    if (m_issuing_region_isSet) {
        obj.insert(QString("issuing_region"), ::OpenAPI::toJsonValue(m_issuing_region));
    }
    return obj;
}

OAIPhysicalDocumentCategory OAIPhysicalDocumentExtractedData::getCategory() const {
    return m_category;
}
void OAIPhysicalDocumentExtractedData::setCategory(const OAIPhysicalDocumentCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIPhysicalDocumentExtractedData::is_category_Set() const{
    return m_category_isSet;
}

bool OAIPhysicalDocumentExtractedData::is_category_Valid() const{
    return m_category_isValid;
}

QDate OAIPhysicalDocumentExtractedData::getExpirationDate() const {
    return m_expiration_date;
}
void OAIPhysicalDocumentExtractedData::setExpirationDate(const QDate &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIPhysicalDocumentExtractedData::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIPhysicalDocumentExtractedData::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIPhysicalDocumentExtractedData::getIdNumber() const {
    return m_id_number;
}
void OAIPhysicalDocumentExtractedData::setIdNumber(const QString &id_number) {
    m_id_number = id_number;
    m_id_number_isSet = true;
}

bool OAIPhysicalDocumentExtractedData::is_id_number_Set() const{
    return m_id_number_isSet;
}

bool OAIPhysicalDocumentExtractedData::is_id_number_Valid() const{
    return m_id_number_isValid;
}

QString OAIPhysicalDocumentExtractedData::getIssuingCountry() const {
    return m_issuing_country;
}
void OAIPhysicalDocumentExtractedData::setIssuingCountry(const QString &issuing_country) {
    m_issuing_country = issuing_country;
    m_issuing_country_isSet = true;
}

bool OAIPhysicalDocumentExtractedData::is_issuing_country_Set() const{
    return m_issuing_country_isSet;
}

bool OAIPhysicalDocumentExtractedData::is_issuing_country_Valid() const{
    return m_issuing_country_isValid;
}

QString OAIPhysicalDocumentExtractedData::getIssuingRegion() const {
    return m_issuing_region;
}
void OAIPhysicalDocumentExtractedData::setIssuingRegion(const QString &issuing_region) {
    m_issuing_region = issuing_region;
    m_issuing_region_isSet = true;
}

bool OAIPhysicalDocumentExtractedData::is_issuing_region_Set() const{
    return m_issuing_region_isSet;
}

bool OAIPhysicalDocumentExtractedData::is_issuing_region_Valid() const{
    return m_issuing_region_isValid;
}

bool OAIPhysicalDocumentExtractedData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuing_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuing_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhysicalDocumentExtractedData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_isValid && m_expiration_date_isValid && m_id_number_isValid && m_issuing_country_isValid && m_issuing_region_isValid && true;
}

} // namespace OpenAPI
