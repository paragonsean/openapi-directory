/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentInitiationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentInitiationMetadata::OAIPaymentInitiationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentInitiationMetadata::OAIPaymentInitiationMetadata() {
    this->initializeModel();
}

OAIPaymentInitiationMetadata::~OAIPaymentInitiationMetadata() {}

void OAIPaymentInitiationMetadata::initializeModel() {

    m_maximum_payment_amount_isSet = false;
    m_maximum_payment_amount_isValid = false;

    m_standing_order_metadata_isSet = false;
    m_standing_order_metadata_isValid = false;

    m_supports_international_payments_isSet = false;
    m_supports_international_payments_isValid = false;

    m_supports_refund_details_isSet = false;
    m_supports_refund_details_isValid = false;

    m_supports_sepa_instant_isSet = false;
    m_supports_sepa_instant_isValid = false;
}

void OAIPaymentInitiationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentInitiationMetadata::fromJsonObject(QJsonObject json) {

    m_maximum_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_maximum_payment_amount, json[QString("maximum_payment_amount")]);
    m_maximum_payment_amount_isSet = !json[QString("maximum_payment_amount")].isNull() && m_maximum_payment_amount_isValid;

    m_standing_order_metadata_isValid = ::OpenAPI::fromJsonValue(m_standing_order_metadata, json[QString("standing_order_metadata")]);
    m_standing_order_metadata_isSet = !json[QString("standing_order_metadata")].isNull() && m_standing_order_metadata_isValid;

    m_supports_international_payments_isValid = ::OpenAPI::fromJsonValue(m_supports_international_payments, json[QString("supports_international_payments")]);
    m_supports_international_payments_isSet = !json[QString("supports_international_payments")].isNull() && m_supports_international_payments_isValid;

    m_supports_refund_details_isValid = ::OpenAPI::fromJsonValue(m_supports_refund_details, json[QString("supports_refund_details")]);
    m_supports_refund_details_isSet = !json[QString("supports_refund_details")].isNull() && m_supports_refund_details_isValid;

    m_supports_sepa_instant_isValid = ::OpenAPI::fromJsonValue(m_supports_sepa_instant, json[QString("supports_sepa_instant")]);
    m_supports_sepa_instant_isSet = !json[QString("supports_sepa_instant")].isNull() && m_supports_sepa_instant_isValid;
}

QString OAIPaymentInitiationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentInitiationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_maximum_payment_amount.size() > 0) {
        obj.insert(QString("maximum_payment_amount"), ::OpenAPI::toJsonValue(m_maximum_payment_amount));
    }
    if (m_standing_order_metadata.isSet()) {
        obj.insert(QString("standing_order_metadata"), ::OpenAPI::toJsonValue(m_standing_order_metadata));
    }
    if (m_supports_international_payments_isSet) {
        obj.insert(QString("supports_international_payments"), ::OpenAPI::toJsonValue(m_supports_international_payments));
    }
    if (m_supports_refund_details_isSet) {
        obj.insert(QString("supports_refund_details"), ::OpenAPI::toJsonValue(m_supports_refund_details));
    }
    if (m_supports_sepa_instant_isSet) {
        obj.insert(QString("supports_sepa_instant"), ::OpenAPI::toJsonValue(m_supports_sepa_instant));
    }
    return obj;
}

QMap<QString, QString> OAIPaymentInitiationMetadata::getMaximumPaymentAmount() const {
    return m_maximum_payment_amount;
}
void OAIPaymentInitiationMetadata::setMaximumPaymentAmount(const QMap<QString, QString> &maximum_payment_amount) {
    m_maximum_payment_amount = maximum_payment_amount;
    m_maximum_payment_amount_isSet = true;
}

bool OAIPaymentInitiationMetadata::is_maximum_payment_amount_Set() const{
    return m_maximum_payment_amount_isSet;
}

bool OAIPaymentInitiationMetadata::is_maximum_payment_amount_Valid() const{
    return m_maximum_payment_amount_isValid;
}

OAIPaymentInitiationStandingOrderMetadata OAIPaymentInitiationMetadata::getStandingOrderMetadata() const {
    return m_standing_order_metadata;
}
void OAIPaymentInitiationMetadata::setStandingOrderMetadata(const OAIPaymentInitiationStandingOrderMetadata &standing_order_metadata) {
    m_standing_order_metadata = standing_order_metadata;
    m_standing_order_metadata_isSet = true;
}

bool OAIPaymentInitiationMetadata::is_standing_order_metadata_Set() const{
    return m_standing_order_metadata_isSet;
}

bool OAIPaymentInitiationMetadata::is_standing_order_metadata_Valid() const{
    return m_standing_order_metadata_isValid;
}

bool OAIPaymentInitiationMetadata::isSupportsInternationalPayments() const {
    return m_supports_international_payments;
}
void OAIPaymentInitiationMetadata::setSupportsInternationalPayments(const bool &supports_international_payments) {
    m_supports_international_payments = supports_international_payments;
    m_supports_international_payments_isSet = true;
}

bool OAIPaymentInitiationMetadata::is_supports_international_payments_Set() const{
    return m_supports_international_payments_isSet;
}

bool OAIPaymentInitiationMetadata::is_supports_international_payments_Valid() const{
    return m_supports_international_payments_isValid;
}

bool OAIPaymentInitiationMetadata::isSupportsRefundDetails() const {
    return m_supports_refund_details;
}
void OAIPaymentInitiationMetadata::setSupportsRefundDetails(const bool &supports_refund_details) {
    m_supports_refund_details = supports_refund_details;
    m_supports_refund_details_isSet = true;
}

bool OAIPaymentInitiationMetadata::is_supports_refund_details_Set() const{
    return m_supports_refund_details_isSet;
}

bool OAIPaymentInitiationMetadata::is_supports_refund_details_Valid() const{
    return m_supports_refund_details_isValid;
}

bool OAIPaymentInitiationMetadata::isSupportsSepaInstant() const {
    return m_supports_sepa_instant;
}
void OAIPaymentInitiationMetadata::setSupportsSepaInstant(const bool &supports_sepa_instant) {
    m_supports_sepa_instant = supports_sepa_instant;
    m_supports_sepa_instant_isSet = true;
}

bool OAIPaymentInitiationMetadata::is_supports_sepa_instant_Set() const{
    return m_supports_sepa_instant_isSet;
}

bool OAIPaymentInitiationMetadata::is_supports_sepa_instant_Valid() const{
    return m_supports_sepa_instant_isValid;
}

bool OAIPaymentInitiationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maximum_payment_amount.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_standing_order_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_international_payments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_refund_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_sepa_instant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentInitiationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_maximum_payment_amount_isValid && m_standing_order_metadata_isValid && m_supports_international_payments_isValid && m_supports_refund_details_isValid && m_supports_sepa_instant_isValid && true;
}

} // namespace OpenAPI
