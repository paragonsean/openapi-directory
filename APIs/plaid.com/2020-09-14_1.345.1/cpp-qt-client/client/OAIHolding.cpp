/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHolding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHolding::OAIHolding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHolding::OAIHolding() {
    this->initializeModel();
}

OAIHolding::~OAIHolding() {}

void OAIHolding::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_cost_basis_isSet = false;
    m_cost_basis_isValid = false;

    m_institution_price_isSet = false;
    m_institution_price_isValid = false;

    m_institution_price_as_of_isSet = false;
    m_institution_price_as_of_isValid = false;

    m_institution_price_datetime_isSet = false;
    m_institution_price_datetime_isValid = false;

    m_institution_value_isSet = false;
    m_institution_value_isValid = false;

    m_iso_currency_code_isSet = false;
    m_iso_currency_code_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_security_id_isSet = false;
    m_security_id_isValid = false;

    m_unofficial_currency_code_isSet = false;
    m_unofficial_currency_code_isValid = false;
}

void OAIHolding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHolding::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_cost_basis_isValid = ::OpenAPI::fromJsonValue(m_cost_basis, json[QString("cost_basis")]);
    m_cost_basis_isSet = !json[QString("cost_basis")].isNull() && m_cost_basis_isValid;

    m_institution_price_isValid = ::OpenAPI::fromJsonValue(m_institution_price, json[QString("institution_price")]);
    m_institution_price_isSet = !json[QString("institution_price")].isNull() && m_institution_price_isValid;

    m_institution_price_as_of_isValid = ::OpenAPI::fromJsonValue(m_institution_price_as_of, json[QString("institution_price_as_of")]);
    m_institution_price_as_of_isSet = !json[QString("institution_price_as_of")].isNull() && m_institution_price_as_of_isValid;

    m_institution_price_datetime_isValid = ::OpenAPI::fromJsonValue(m_institution_price_datetime, json[QString("institution_price_datetime")]);
    m_institution_price_datetime_isSet = !json[QString("institution_price_datetime")].isNull() && m_institution_price_datetime_isValid;

    m_institution_value_isValid = ::OpenAPI::fromJsonValue(m_institution_value, json[QString("institution_value")]);
    m_institution_value_isSet = !json[QString("institution_value")].isNull() && m_institution_value_isValid;

    m_iso_currency_code_isValid = ::OpenAPI::fromJsonValue(m_iso_currency_code, json[QString("iso_currency_code")]);
    m_iso_currency_code_isSet = !json[QString("iso_currency_code")].isNull() && m_iso_currency_code_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_security_id_isValid = ::OpenAPI::fromJsonValue(m_security_id, json[QString("security_id")]);
    m_security_id_isSet = !json[QString("security_id")].isNull() && m_security_id_isValid;

    m_unofficial_currency_code_isValid = ::OpenAPI::fromJsonValue(m_unofficial_currency_code, json[QString("unofficial_currency_code")]);
    m_unofficial_currency_code_isSet = !json[QString("unofficial_currency_code")].isNull() && m_unofficial_currency_code_isValid;
}

QString OAIHolding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHolding::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_cost_basis_isSet) {
        obj.insert(QString("cost_basis"), ::OpenAPI::toJsonValue(m_cost_basis));
    }
    if (m_institution_price_isSet) {
        obj.insert(QString("institution_price"), ::OpenAPI::toJsonValue(m_institution_price));
    }
    if (m_institution_price_as_of_isSet) {
        obj.insert(QString("institution_price_as_of"), ::OpenAPI::toJsonValue(m_institution_price_as_of));
    }
    if (m_institution_price_datetime_isSet) {
        obj.insert(QString("institution_price_datetime"), ::OpenAPI::toJsonValue(m_institution_price_datetime));
    }
    if (m_institution_value_isSet) {
        obj.insert(QString("institution_value"), ::OpenAPI::toJsonValue(m_institution_value));
    }
    if (m_iso_currency_code_isSet) {
        obj.insert(QString("iso_currency_code"), ::OpenAPI::toJsonValue(m_iso_currency_code));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_security_id_isSet) {
        obj.insert(QString("security_id"), ::OpenAPI::toJsonValue(m_security_id));
    }
    if (m_unofficial_currency_code_isSet) {
        obj.insert(QString("unofficial_currency_code"), ::OpenAPI::toJsonValue(m_unofficial_currency_code));
    }
    return obj;
}

QString OAIHolding::getAccountId() const {
    return m_account_id;
}
void OAIHolding::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIHolding::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIHolding::is_account_id_Valid() const{
    return m_account_id_isValid;
}

double OAIHolding::getCostBasis() const {
    return m_cost_basis;
}
void OAIHolding::setCostBasis(const double &cost_basis) {
    m_cost_basis = cost_basis;
    m_cost_basis_isSet = true;
}

bool OAIHolding::is_cost_basis_Set() const{
    return m_cost_basis_isSet;
}

bool OAIHolding::is_cost_basis_Valid() const{
    return m_cost_basis_isValid;
}

double OAIHolding::getInstitutionPrice() const {
    return m_institution_price;
}
void OAIHolding::setInstitutionPrice(const double &institution_price) {
    m_institution_price = institution_price;
    m_institution_price_isSet = true;
}

bool OAIHolding::is_institution_price_Set() const{
    return m_institution_price_isSet;
}

bool OAIHolding::is_institution_price_Valid() const{
    return m_institution_price_isValid;
}

QDate OAIHolding::getInstitutionPriceAsOf() const {
    return m_institution_price_as_of;
}
void OAIHolding::setInstitutionPriceAsOf(const QDate &institution_price_as_of) {
    m_institution_price_as_of = institution_price_as_of;
    m_institution_price_as_of_isSet = true;
}

bool OAIHolding::is_institution_price_as_of_Set() const{
    return m_institution_price_as_of_isSet;
}

bool OAIHolding::is_institution_price_as_of_Valid() const{
    return m_institution_price_as_of_isValid;
}

QDateTime OAIHolding::getInstitutionPriceDatetime() const {
    return m_institution_price_datetime;
}
void OAIHolding::setInstitutionPriceDatetime(const QDateTime &institution_price_datetime) {
    m_institution_price_datetime = institution_price_datetime;
    m_institution_price_datetime_isSet = true;
}

bool OAIHolding::is_institution_price_datetime_Set() const{
    return m_institution_price_datetime_isSet;
}

bool OAIHolding::is_institution_price_datetime_Valid() const{
    return m_institution_price_datetime_isValid;
}

double OAIHolding::getInstitutionValue() const {
    return m_institution_value;
}
void OAIHolding::setInstitutionValue(const double &institution_value) {
    m_institution_value = institution_value;
    m_institution_value_isSet = true;
}

bool OAIHolding::is_institution_value_Set() const{
    return m_institution_value_isSet;
}

bool OAIHolding::is_institution_value_Valid() const{
    return m_institution_value_isValid;
}

QString OAIHolding::getIsoCurrencyCode() const {
    return m_iso_currency_code;
}
void OAIHolding::setIsoCurrencyCode(const QString &iso_currency_code) {
    m_iso_currency_code = iso_currency_code;
    m_iso_currency_code_isSet = true;
}

bool OAIHolding::is_iso_currency_code_Set() const{
    return m_iso_currency_code_isSet;
}

bool OAIHolding::is_iso_currency_code_Valid() const{
    return m_iso_currency_code_isValid;
}

double OAIHolding::getQuantity() const {
    return m_quantity;
}
void OAIHolding::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIHolding::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIHolding::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIHolding::getSecurityId() const {
    return m_security_id;
}
void OAIHolding::setSecurityId(const QString &security_id) {
    m_security_id = security_id;
    m_security_id_isSet = true;
}

bool OAIHolding::is_security_id_Set() const{
    return m_security_id_isSet;
}

bool OAIHolding::is_security_id_Valid() const{
    return m_security_id_isValid;
}

QString OAIHolding::getUnofficialCurrencyCode() const {
    return m_unofficial_currency_code;
}
void OAIHolding::setUnofficialCurrencyCode(const QString &unofficial_currency_code) {
    m_unofficial_currency_code = unofficial_currency_code;
    m_unofficial_currency_code_isSet = true;
}

bool OAIHolding::is_unofficial_currency_code_Set() const{
    return m_unofficial_currency_code_isSet;
}

bool OAIHolding::is_unofficial_currency_code_Valid() const{
    return m_unofficial_currency_code_isValid;
}

bool OAIHolding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_basis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_price_as_of_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_price_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unofficial_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHolding::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_cost_basis_isValid && m_institution_price_isValid && m_institution_value_isValid && m_iso_currency_code_isValid && m_quantity_isValid && m_security_id_isValid && m_unofficial_currency_code_isValid && true;
}

} // namespace OpenAPI
