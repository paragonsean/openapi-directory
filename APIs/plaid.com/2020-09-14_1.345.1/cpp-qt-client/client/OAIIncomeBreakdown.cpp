/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIncomeBreakdown.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIncomeBreakdown::OAIIncomeBreakdown(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIncomeBreakdown::OAIIncomeBreakdown() {
    this->initializeModel();
}

OAIIncomeBreakdown::~OAIIncomeBreakdown() {}

void OAIIncomeBreakdown::initializeModel() {

    m_hours_isSet = false;
    m_hours_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIIncomeBreakdown::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIncomeBreakdown::fromJsonObject(QJsonObject json) {

    m_hours_isValid = ::OpenAPI::fromJsonValue(m_hours, json[QString("hours")]);
    m_hours_isSet = !json[QString("hours")].isNull() && m_hours_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIIncomeBreakdown::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIncomeBreakdown::asJsonObject() const {
    QJsonObject obj;
    if (m_hours_isSet) {
        obj.insert(QString("hours"), ::OpenAPI::toJsonValue(m_hours));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

double OAIIncomeBreakdown::getHours() const {
    return m_hours;
}
void OAIIncomeBreakdown::setHours(const double &hours) {
    m_hours = hours;
    m_hours_isSet = true;
}

bool OAIIncomeBreakdown::is_hours_Set() const{
    return m_hours_isSet;
}

bool OAIIncomeBreakdown::is_hours_Valid() const{
    return m_hours_isValid;
}

double OAIIncomeBreakdown::getRate() const {
    return m_rate;
}
void OAIIncomeBreakdown::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIIncomeBreakdown::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIIncomeBreakdown::is_rate_Valid() const{
    return m_rate_isValid;
}

double OAIIncomeBreakdown::getTotal() const {
    return m_total;
}
void OAIIncomeBreakdown::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIIncomeBreakdown::is_total_Set() const{
    return m_total_isSet;
}

bool OAIIncomeBreakdown::is_total_Valid() const{
    return m_total_isValid;
}

OAIIncomeBreakdownType OAIIncomeBreakdown::getType() const {
    return m_type;
}
void OAIIncomeBreakdown::setType(const OAIIncomeBreakdownType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIncomeBreakdown::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIncomeBreakdown::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIIncomeBreakdown::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIncomeBreakdown::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hours_isValid && m_rate_isValid && m_total_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
