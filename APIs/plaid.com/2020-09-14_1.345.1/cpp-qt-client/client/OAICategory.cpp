/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategory::OAICategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategory::OAICategory() {
    this->initializeModel();
}

OAICategory::~OAICategory() {}

void OAICategory::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_hierarchy_isSet = false;
    m_hierarchy_isValid = false;
}

void OAICategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategory::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("category_id")]);
    m_category_id_isSet = !json[QString("category_id")].isNull() && m_category_id_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_hierarchy_isValid = ::OpenAPI::fromJsonValue(m_hierarchy, json[QString("hierarchy")]);
    m_hierarchy_isSet = !json[QString("hierarchy")].isNull() && m_hierarchy_isValid;
}

QString OAICategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategory::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("category_id"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_hierarchy.size() > 0) {
        obj.insert(QString("hierarchy"), ::OpenAPI::toJsonValue(m_hierarchy));
    }
    return obj;
}

QString OAICategory::getCategoryId() const {
    return m_category_id;
}
void OAICategory::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAICategory::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAICategory::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAICategory::getGroup() const {
    return m_group;
}
void OAICategory::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAICategory::is_group_Set() const{
    return m_group_isSet;
}

bool OAICategory::is_group_Valid() const{
    return m_group_isValid;
}

QList<QString> OAICategory::getHierarchy() const {
    return m_hierarchy;
}
void OAICategory::setHierarchy(const QList<QString> &hierarchy) {
    m_hierarchy = hierarchy;
    m_hierarchy_isSet = true;
}

bool OAICategory::is_hierarchy_Set() const{
    return m_hierarchy_isSet;
}

bool OAICategory::is_hierarchy_Valid() const{
    return m_hierarchy_isValid;
}

bool OAICategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchy.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_id_isValid && m_group_isValid && m_hierarchy_isValid && true;
}

} // namespace OpenAPI
