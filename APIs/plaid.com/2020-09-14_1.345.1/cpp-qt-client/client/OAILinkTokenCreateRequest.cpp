/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkTokenCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkTokenCreateRequest::OAILinkTokenCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkTokenCreateRequest::OAILinkTokenCreateRequest() {
    this->initializeModel();
}

OAILinkTokenCreateRequest::~OAILinkTokenCreateRequest() {}

void OAILinkTokenCreateRequest::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_account_filters_isSet = false;
    m_account_filters_isValid = false;

    m_additional_consented_products_isSet = false;
    m_additional_consented_products_isValid = false;

    m_android_package_name_isSet = false;
    m_android_package_name_isValid = false;

    m_auth_isSet = false;
    m_auth_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_name_isSet = false;
    m_client_name_isValid = false;

    m_country_codes_isSet = false;
    m_country_codes_isValid = false;

    m_deposit_switch_isSet = false;
    m_deposit_switch_isValid = false;

    m_employment_isSet = false;
    m_employment_isValid = false;

    m_eu_config_isSet = false;
    m_eu_config_isValid = false;

    m_identity_verification_isSet = false;
    m_identity_verification_isValid = false;

    m_income_verification_isSet = false;
    m_income_verification_isValid = false;

    m_institution_data_isSet = false;
    m_institution_data_isValid = false;

    m_institution_id_isSet = false;
    m_institution_id_isValid = false;

    m_investments_isSet = false;
    m_investments_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_link_customization_name_isSet = false;
    m_link_customization_name_isValid = false;

    m_payment_initiation_isSet = false;
    m_payment_initiation_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_redirect_uri_isSet = false;
    m_redirect_uri_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_transfer_isSet = false;
    m_transfer_isValid = false;

    m_update_isSet = false;
    m_update_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_token_isSet = false;
    m_user_token_isValid = false;

    m_webhook_isSet = false;
    m_webhook_isValid = false;
}

void OAILinkTokenCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinkTokenCreateRequest::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("access_token")]);
    m_access_token_isSet = !json[QString("access_token")].isNull() && m_access_token_isValid;

    m_account_filters_isValid = ::OpenAPI::fromJsonValue(m_account_filters, json[QString("account_filters")]);
    m_account_filters_isSet = !json[QString("account_filters")].isNull() && m_account_filters_isValid;

    m_additional_consented_products_isValid = ::OpenAPI::fromJsonValue(m_additional_consented_products, json[QString("additional_consented_products")]);
    m_additional_consented_products_isSet = !json[QString("additional_consented_products")].isNull() && m_additional_consented_products_isValid;

    m_android_package_name_isValid = ::OpenAPI::fromJsonValue(m_android_package_name, json[QString("android_package_name")]);
    m_android_package_name_isSet = !json[QString("android_package_name")].isNull() && m_android_package_name_isValid;

    m_auth_isValid = ::OpenAPI::fromJsonValue(m_auth, json[QString("auth")]);
    m_auth_isSet = !json[QString("auth")].isNull() && m_auth_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_client_name_isValid = ::OpenAPI::fromJsonValue(m_client_name, json[QString("client_name")]);
    m_client_name_isSet = !json[QString("client_name")].isNull() && m_client_name_isValid;

    m_country_codes_isValid = ::OpenAPI::fromJsonValue(m_country_codes, json[QString("country_codes")]);
    m_country_codes_isSet = !json[QString("country_codes")].isNull() && m_country_codes_isValid;

    m_deposit_switch_isValid = ::OpenAPI::fromJsonValue(m_deposit_switch, json[QString("deposit_switch")]);
    m_deposit_switch_isSet = !json[QString("deposit_switch")].isNull() && m_deposit_switch_isValid;

    m_employment_isValid = ::OpenAPI::fromJsonValue(m_employment, json[QString("employment")]);
    m_employment_isSet = !json[QString("employment")].isNull() && m_employment_isValid;

    m_eu_config_isValid = ::OpenAPI::fromJsonValue(m_eu_config, json[QString("eu_config")]);
    m_eu_config_isSet = !json[QString("eu_config")].isNull() && m_eu_config_isValid;

    m_identity_verification_isValid = ::OpenAPI::fromJsonValue(m_identity_verification, json[QString("identity_verification")]);
    m_identity_verification_isSet = !json[QString("identity_verification")].isNull() && m_identity_verification_isValid;

    m_income_verification_isValid = ::OpenAPI::fromJsonValue(m_income_verification, json[QString("income_verification")]);
    m_income_verification_isSet = !json[QString("income_verification")].isNull() && m_income_verification_isValid;

    m_institution_data_isValid = ::OpenAPI::fromJsonValue(m_institution_data, json[QString("institution_data")]);
    m_institution_data_isSet = !json[QString("institution_data")].isNull() && m_institution_data_isValid;

    m_institution_id_isValid = ::OpenAPI::fromJsonValue(m_institution_id, json[QString("institution_id")]);
    m_institution_id_isSet = !json[QString("institution_id")].isNull() && m_institution_id_isValid;

    m_investments_isValid = ::OpenAPI::fromJsonValue(m_investments, json[QString("investments")]);
    m_investments_isSet = !json[QString("investments")].isNull() && m_investments_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_link_customization_name_isValid = ::OpenAPI::fromJsonValue(m_link_customization_name, json[QString("link_customization_name")]);
    m_link_customization_name_isSet = !json[QString("link_customization_name")].isNull() && m_link_customization_name_isValid;

    m_payment_initiation_isValid = ::OpenAPI::fromJsonValue(m_payment_initiation, json[QString("payment_initiation")]);
    m_payment_initiation_isSet = !json[QString("payment_initiation")].isNull() && m_payment_initiation_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_redirect_uri, json[QString("redirect_uri")]);
    m_redirect_uri_isSet = !json[QString("redirect_uri")].isNull() && m_redirect_uri_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_transfer_isValid = ::OpenAPI::fromJsonValue(m_transfer, json[QString("transfer")]);
    m_transfer_isSet = !json[QString("transfer")].isNull() && m_transfer_isValid;

    m_update_isValid = ::OpenAPI::fromJsonValue(m_update, json[QString("update")]);
    m_update_isSet = !json[QString("update")].isNull() && m_update_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_token_isValid = ::OpenAPI::fromJsonValue(m_user_token, json[QString("user_token")]);
    m_user_token_isSet = !json[QString("user_token")].isNull() && m_user_token_isValid;

    m_webhook_isValid = ::OpenAPI::fromJsonValue(m_webhook, json[QString("webhook")]);
    m_webhook_isSet = !json[QString("webhook")].isNull() && m_webhook_isValid;
}

QString OAILinkTokenCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinkTokenCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("access_token"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_account_filters.isSet()) {
        obj.insert(QString("account_filters"), ::OpenAPI::toJsonValue(m_account_filters));
    }
    if (m_additional_consented_products.size() > 0) {
        obj.insert(QString("additional_consented_products"), ::OpenAPI::toJsonValue(m_additional_consented_products));
    }
    if (m_android_package_name_isSet) {
        obj.insert(QString("android_package_name"), ::OpenAPI::toJsonValue(m_android_package_name));
    }
    if (m_auth.isSet()) {
        obj.insert(QString("auth"), ::OpenAPI::toJsonValue(m_auth));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_name_isSet) {
        obj.insert(QString("client_name"), ::OpenAPI::toJsonValue(m_client_name));
    }
    if (m_country_codes.size() > 0) {
        obj.insert(QString("country_codes"), ::OpenAPI::toJsonValue(m_country_codes));
    }
    if (m_deposit_switch.isSet()) {
        obj.insert(QString("deposit_switch"), ::OpenAPI::toJsonValue(m_deposit_switch));
    }
    if (m_employment.isSet()) {
        obj.insert(QString("employment"), ::OpenAPI::toJsonValue(m_employment));
    }
    if (m_eu_config.isSet()) {
        obj.insert(QString("eu_config"), ::OpenAPI::toJsonValue(m_eu_config));
    }
    if (m_identity_verification.isSet()) {
        obj.insert(QString("identity_verification"), ::OpenAPI::toJsonValue(m_identity_verification));
    }
    if (m_income_verification.isSet()) {
        obj.insert(QString("income_verification"), ::OpenAPI::toJsonValue(m_income_verification));
    }
    if (m_institution_data.isSet()) {
        obj.insert(QString("institution_data"), ::OpenAPI::toJsonValue(m_institution_data));
    }
    if (m_institution_id_isSet) {
        obj.insert(QString("institution_id"), ::OpenAPI::toJsonValue(m_institution_id));
    }
    if (m_investments.isSet()) {
        obj.insert(QString("investments"), ::OpenAPI::toJsonValue(m_investments));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_link_customization_name_isSet) {
        obj.insert(QString("link_customization_name"), ::OpenAPI::toJsonValue(m_link_customization_name));
    }
    if (m_payment_initiation.isSet()) {
        obj.insert(QString("payment_initiation"), ::OpenAPI::toJsonValue(m_payment_initiation));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_redirect_uri_isSet) {
        obj.insert(QString("redirect_uri"), ::OpenAPI::toJsonValue(m_redirect_uri));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_transfer.isSet()) {
        obj.insert(QString("transfer"), ::OpenAPI::toJsonValue(m_transfer));
    }
    if (m_update.isSet()) {
        obj.insert(QString("update"), ::OpenAPI::toJsonValue(m_update));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_token_isSet) {
        obj.insert(QString("user_token"), ::OpenAPI::toJsonValue(m_user_token));
    }
    if (m_webhook_isSet) {
        obj.insert(QString("webhook"), ::OpenAPI::toJsonValue(m_webhook));
    }
    return obj;
}

QString OAILinkTokenCreateRequest::getAccessToken() const {
    return m_access_token;
}
void OAILinkTokenCreateRequest::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAILinkTokenCreateRequest::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAILinkTokenCreateRequest::is_access_token_Valid() const{
    return m_access_token_isValid;
}

OAILinkTokenAccountFilters OAILinkTokenCreateRequest::getAccountFilters() const {
    return m_account_filters;
}
void OAILinkTokenCreateRequest::setAccountFilters(const OAILinkTokenAccountFilters &account_filters) {
    m_account_filters = account_filters;
    m_account_filters_isSet = true;
}

bool OAILinkTokenCreateRequest::is_account_filters_Set() const{
    return m_account_filters_isSet;
}

bool OAILinkTokenCreateRequest::is_account_filters_Valid() const{
    return m_account_filters_isValid;
}

QList<OAIProducts> OAILinkTokenCreateRequest::getAdditionalConsentedProducts() const {
    return m_additional_consented_products;
}
void OAILinkTokenCreateRequest::setAdditionalConsentedProducts(const QList<OAIProducts> &additional_consented_products) {
    m_additional_consented_products = additional_consented_products;
    m_additional_consented_products_isSet = true;
}

bool OAILinkTokenCreateRequest::is_additional_consented_products_Set() const{
    return m_additional_consented_products_isSet;
}

bool OAILinkTokenCreateRequest::is_additional_consented_products_Valid() const{
    return m_additional_consented_products_isValid;
}

QString OAILinkTokenCreateRequest::getAndroidPackageName() const {
    return m_android_package_name;
}
void OAILinkTokenCreateRequest::setAndroidPackageName(const QString &android_package_name) {
    m_android_package_name = android_package_name;
    m_android_package_name_isSet = true;
}

bool OAILinkTokenCreateRequest::is_android_package_name_Set() const{
    return m_android_package_name_isSet;
}

bool OAILinkTokenCreateRequest::is_android_package_name_Valid() const{
    return m_android_package_name_isValid;
}

OAILinkTokenCreateRequestAuth OAILinkTokenCreateRequest::getAuth() const {
    return m_auth;
}
void OAILinkTokenCreateRequest::setAuth(const OAILinkTokenCreateRequestAuth &auth) {
    m_auth = auth;
    m_auth_isSet = true;
}

bool OAILinkTokenCreateRequest::is_auth_Set() const{
    return m_auth_isSet;
}

bool OAILinkTokenCreateRequest::is_auth_Valid() const{
    return m_auth_isValid;
}

QString OAILinkTokenCreateRequest::getClientId() const {
    return m_client_id;
}
void OAILinkTokenCreateRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAILinkTokenCreateRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAILinkTokenCreateRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAILinkTokenCreateRequest::getClientName() const {
    return m_client_name;
}
void OAILinkTokenCreateRequest::setClientName(const QString &client_name) {
    m_client_name = client_name;
    m_client_name_isSet = true;
}

bool OAILinkTokenCreateRequest::is_client_name_Set() const{
    return m_client_name_isSet;
}

bool OAILinkTokenCreateRequest::is_client_name_Valid() const{
    return m_client_name_isValid;
}

QList<OAICountryCode> OAILinkTokenCreateRequest::getCountryCodes() const {
    return m_country_codes;
}
void OAILinkTokenCreateRequest::setCountryCodes(const QList<OAICountryCode> &country_codes) {
    m_country_codes = country_codes;
    m_country_codes_isSet = true;
}

bool OAILinkTokenCreateRequest::is_country_codes_Set() const{
    return m_country_codes_isSet;
}

bool OAILinkTokenCreateRequest::is_country_codes_Valid() const{
    return m_country_codes_isValid;
}

OAILinkTokenCreateRequestDepositSwitch OAILinkTokenCreateRequest::getDepositSwitch() const {
    return m_deposit_switch;
}
void OAILinkTokenCreateRequest::setDepositSwitch(const OAILinkTokenCreateRequestDepositSwitch &deposit_switch) {
    m_deposit_switch = deposit_switch;
    m_deposit_switch_isSet = true;
}

bool OAILinkTokenCreateRequest::is_deposit_switch_Set() const{
    return m_deposit_switch_isSet;
}

bool OAILinkTokenCreateRequest::is_deposit_switch_Valid() const{
    return m_deposit_switch_isValid;
}

OAILinkTokenCreateRequestEmployment OAILinkTokenCreateRequest::getEmployment() const {
    return m_employment;
}
void OAILinkTokenCreateRequest::setEmployment(const OAILinkTokenCreateRequestEmployment &employment) {
    m_employment = employment;
    m_employment_isSet = true;
}

bool OAILinkTokenCreateRequest::is_employment_Set() const{
    return m_employment_isSet;
}

bool OAILinkTokenCreateRequest::is_employment_Valid() const{
    return m_employment_isValid;
}

OAILinkTokenEUConfig OAILinkTokenCreateRequest::getEuConfig() const {
    return m_eu_config;
}
void OAILinkTokenCreateRequest::setEuConfig(const OAILinkTokenEUConfig &eu_config) {
    m_eu_config = eu_config;
    m_eu_config_isSet = true;
}

bool OAILinkTokenCreateRequest::is_eu_config_Set() const{
    return m_eu_config_isSet;
}

bool OAILinkTokenCreateRequest::is_eu_config_Valid() const{
    return m_eu_config_isValid;
}

OAILinkTokenCreateRequestIdentityVerification OAILinkTokenCreateRequest::getIdentityVerification() const {
    return m_identity_verification;
}
void OAILinkTokenCreateRequest::setIdentityVerification(const OAILinkTokenCreateRequestIdentityVerification &identity_verification) {
    m_identity_verification = identity_verification;
    m_identity_verification_isSet = true;
}

bool OAILinkTokenCreateRequest::is_identity_verification_Set() const{
    return m_identity_verification_isSet;
}

bool OAILinkTokenCreateRequest::is_identity_verification_Valid() const{
    return m_identity_verification_isValid;
}

OAILinkTokenCreateRequestIncomeVerification OAILinkTokenCreateRequest::getIncomeVerification() const {
    return m_income_verification;
}
void OAILinkTokenCreateRequest::setIncomeVerification(const OAILinkTokenCreateRequestIncomeVerification &income_verification) {
    m_income_verification = income_verification;
    m_income_verification_isSet = true;
}

bool OAILinkTokenCreateRequest::is_income_verification_Set() const{
    return m_income_verification_isSet;
}

bool OAILinkTokenCreateRequest::is_income_verification_Valid() const{
    return m_income_verification_isValid;
}

OAILinkTokenCreateInstitutionData OAILinkTokenCreateRequest::getInstitutionData() const {
    return m_institution_data;
}
void OAILinkTokenCreateRequest::setInstitutionData(const OAILinkTokenCreateInstitutionData &institution_data) {
    m_institution_data = institution_data;
    m_institution_data_isSet = true;
}

bool OAILinkTokenCreateRequest::is_institution_data_Set() const{
    return m_institution_data_isSet;
}

bool OAILinkTokenCreateRequest::is_institution_data_Valid() const{
    return m_institution_data_isValid;
}

QString OAILinkTokenCreateRequest::getInstitutionId() const {
    return m_institution_id;
}
void OAILinkTokenCreateRequest::setInstitutionId(const QString &institution_id) {
    m_institution_id = institution_id;
    m_institution_id_isSet = true;
}

bool OAILinkTokenCreateRequest::is_institution_id_Set() const{
    return m_institution_id_isSet;
}

bool OAILinkTokenCreateRequest::is_institution_id_Valid() const{
    return m_institution_id_isValid;
}

OAILinkTokenInvestments OAILinkTokenCreateRequest::getInvestments() const {
    return m_investments;
}
void OAILinkTokenCreateRequest::setInvestments(const OAILinkTokenInvestments &investments) {
    m_investments = investments;
    m_investments_isSet = true;
}

bool OAILinkTokenCreateRequest::is_investments_Set() const{
    return m_investments_isSet;
}

bool OAILinkTokenCreateRequest::is_investments_Valid() const{
    return m_investments_isValid;
}

QString OAILinkTokenCreateRequest::getLanguage() const {
    return m_language;
}
void OAILinkTokenCreateRequest::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAILinkTokenCreateRequest::is_language_Set() const{
    return m_language_isSet;
}

bool OAILinkTokenCreateRequest::is_language_Valid() const{
    return m_language_isValid;
}

QString OAILinkTokenCreateRequest::getLinkCustomizationName() const {
    return m_link_customization_name;
}
void OAILinkTokenCreateRequest::setLinkCustomizationName(const QString &link_customization_name) {
    m_link_customization_name = link_customization_name;
    m_link_customization_name_isSet = true;
}

bool OAILinkTokenCreateRequest::is_link_customization_name_Set() const{
    return m_link_customization_name_isSet;
}

bool OAILinkTokenCreateRequest::is_link_customization_name_Valid() const{
    return m_link_customization_name_isValid;
}

OAILinkTokenCreateRequestPaymentInitiation OAILinkTokenCreateRequest::getPaymentInitiation() const {
    return m_payment_initiation;
}
void OAILinkTokenCreateRequest::setPaymentInitiation(const OAILinkTokenCreateRequestPaymentInitiation &payment_initiation) {
    m_payment_initiation = payment_initiation;
    m_payment_initiation_isSet = true;
}

bool OAILinkTokenCreateRequest::is_payment_initiation_Set() const{
    return m_payment_initiation_isSet;
}

bool OAILinkTokenCreateRequest::is_payment_initiation_Valid() const{
    return m_payment_initiation_isValid;
}

QList<OAIProducts> OAILinkTokenCreateRequest::getProducts() const {
    return m_products;
}
void OAILinkTokenCreateRequest::setProducts(const QList<OAIProducts> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAILinkTokenCreateRequest::is_products_Set() const{
    return m_products_isSet;
}

bool OAILinkTokenCreateRequest::is_products_Valid() const{
    return m_products_isValid;
}

QString OAILinkTokenCreateRequest::getRedirectUri() const {
    return m_redirect_uri;
}
void OAILinkTokenCreateRequest::setRedirectUri(const QString &redirect_uri) {
    m_redirect_uri = redirect_uri;
    m_redirect_uri_isSet = true;
}

bool OAILinkTokenCreateRequest::is_redirect_uri_Set() const{
    return m_redirect_uri_isSet;
}

bool OAILinkTokenCreateRequest::is_redirect_uri_Valid() const{
    return m_redirect_uri_isValid;
}

QString OAILinkTokenCreateRequest::getSecret() const {
    return m_secret;
}
void OAILinkTokenCreateRequest::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAILinkTokenCreateRequest::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAILinkTokenCreateRequest::is_secret_Valid() const{
    return m_secret_isValid;
}

OAILinkTokenCreateRequestTransfer OAILinkTokenCreateRequest::getTransfer() const {
    return m_transfer;
}
void OAILinkTokenCreateRequest::setTransfer(const OAILinkTokenCreateRequestTransfer &transfer) {
    m_transfer = transfer;
    m_transfer_isSet = true;
}

bool OAILinkTokenCreateRequest::is_transfer_Set() const{
    return m_transfer_isSet;
}

bool OAILinkTokenCreateRequest::is_transfer_Valid() const{
    return m_transfer_isValid;
}

OAILinkTokenCreateRequestUpdate OAILinkTokenCreateRequest::getUpdate() const {
    return m_update;
}
void OAILinkTokenCreateRequest::setUpdate(const OAILinkTokenCreateRequestUpdate &update) {
    m_update = update;
    m_update_isSet = true;
}

bool OAILinkTokenCreateRequest::is_update_Set() const{
    return m_update_isSet;
}

bool OAILinkTokenCreateRequest::is_update_Valid() const{
    return m_update_isValid;
}

OAILinkTokenCreateRequestUser OAILinkTokenCreateRequest::getUser() const {
    return m_user;
}
void OAILinkTokenCreateRequest::setUser(const OAILinkTokenCreateRequestUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAILinkTokenCreateRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAILinkTokenCreateRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAILinkTokenCreateRequest::getUserToken() const {
    return m_user_token;
}
void OAILinkTokenCreateRequest::setUserToken(const QString &user_token) {
    m_user_token = user_token;
    m_user_token_isSet = true;
}

bool OAILinkTokenCreateRequest::is_user_token_Set() const{
    return m_user_token_isSet;
}

bool OAILinkTokenCreateRequest::is_user_token_Valid() const{
    return m_user_token_isValid;
}

QString OAILinkTokenCreateRequest::getWebhook() const {
    return m_webhook;
}
void OAILinkTokenCreateRequest::setWebhook(const QString &webhook) {
    m_webhook = webhook;
    m_webhook_isSet = true;
}

bool OAILinkTokenCreateRequest::is_webhook_Set() const{
    return m_webhook_isSet;
}

bool OAILinkTokenCreateRequest::is_webhook_Valid() const{
    return m_webhook_isValid;
}

bool OAILinkTokenCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_consented_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_android_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deposit_switch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eu_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_verification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_income_verification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_investments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_customization_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_initiation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinkTokenCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_name_isValid && m_country_codes_isValid && m_language_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
