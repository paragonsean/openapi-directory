/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientProvidedTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientProvidedTransaction::OAIClientProvidedTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientProvidedTransaction::OAIClientProvidedTransaction() {
    this->initializeModel();
}

OAIClientProvidedTransaction::~OAIClientProvidedTransaction() {}

void OAIClientProvidedTransaction::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_date_posted_isSet = false;
    m_date_posted_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_iso_currency_code_isSet = false;
    m_iso_currency_code_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_mcc_isSet = false;
    m_mcc_isValid = false;
}

void OAIClientProvidedTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientProvidedTransaction::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_date_posted_isValid = ::OpenAPI::fromJsonValue(m_date_posted, json[QString("date_posted")]);
    m_date_posted_isSet = !json[QString("date_posted")].isNull() && m_date_posted_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_iso_currency_code_isValid = ::OpenAPI::fromJsonValue(m_iso_currency_code, json[QString("iso_currency_code")]);
    m_iso_currency_code_isSet = !json[QString("iso_currency_code")].isNull() && m_iso_currency_code_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_mcc_isValid = ::OpenAPI::fromJsonValue(m_mcc, json[QString("mcc")]);
    m_mcc_isSet = !json[QString("mcc")].isNull() && m_mcc_isValid;
}

QString OAIClientProvidedTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientProvidedTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_date_posted_isSet) {
        obj.insert(QString("date_posted"), ::OpenAPI::toJsonValue(m_date_posted));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_iso_currency_code_isSet) {
        obj.insert(QString("iso_currency_code"), ::OpenAPI::toJsonValue(m_iso_currency_code));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_mcc_isSet) {
        obj.insert(QString("mcc"), ::OpenAPI::toJsonValue(m_mcc));
    }
    return obj;
}

double OAIClientProvidedTransaction::getAmount() const {
    return m_amount;
}
void OAIClientProvidedTransaction::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIClientProvidedTransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIClientProvidedTransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

QDate OAIClientProvidedTransaction::getDatePosted() const {
    return m_date_posted;
}
void OAIClientProvidedTransaction::setDatePosted(const QDate &date_posted) {
    m_date_posted = date_posted;
    m_date_posted_isSet = true;
}

bool OAIClientProvidedTransaction::is_date_posted_Set() const{
    return m_date_posted_isSet;
}

bool OAIClientProvidedTransaction::is_date_posted_Valid() const{
    return m_date_posted_isValid;
}

QString OAIClientProvidedTransaction::getDescription() const {
    return m_description;
}
void OAIClientProvidedTransaction::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIClientProvidedTransaction::is_description_Set() const{
    return m_description_isSet;
}

bool OAIClientProvidedTransaction::is_description_Valid() const{
    return m_description_isValid;
}

OAIEnrichTransactionDirection OAIClientProvidedTransaction::getDirection() const {
    return m_direction;
}
void OAIClientProvidedTransaction::setDirection(const OAIEnrichTransactionDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIClientProvidedTransaction::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIClientProvidedTransaction::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAIClientProvidedTransaction::getId() const {
    return m_id;
}
void OAIClientProvidedTransaction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIClientProvidedTransaction::is_id_Set() const{
    return m_id_isSet;
}

bool OAIClientProvidedTransaction::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIClientProvidedTransaction::getIsoCurrencyCode() const {
    return m_iso_currency_code;
}
void OAIClientProvidedTransaction::setIsoCurrencyCode(const QString &iso_currency_code) {
    m_iso_currency_code = iso_currency_code;
    m_iso_currency_code_isSet = true;
}

bool OAIClientProvidedTransaction::is_iso_currency_code_Set() const{
    return m_iso_currency_code_isSet;
}

bool OAIClientProvidedTransaction::is_iso_currency_code_Valid() const{
    return m_iso_currency_code_isValid;
}

OAIClientProvidedTransactionLocation OAIClientProvidedTransaction::getLocation() const {
    return m_location;
}
void OAIClientProvidedTransaction::setLocation(const OAIClientProvidedTransactionLocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIClientProvidedTransaction::is_location_Set() const{
    return m_location_isSet;
}

bool OAIClientProvidedTransaction::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIClientProvidedTransaction::getMcc() const {
    return m_mcc;
}
void OAIClientProvidedTransaction::setMcc(const QString &mcc) {
    m_mcc = mcc;
    m_mcc_isSet = true;
}

bool OAIClientProvidedTransaction::is_mcc_Set() const{
    return m_mcc_isSet;
}

bool OAIClientProvidedTransaction::is_mcc_Valid() const{
    return m_mcc_isValid;
}

bool OAIClientProvidedTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_posted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientProvidedTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_description_isValid && m_direction_isValid && m_id_isValid && m_iso_currency_code_isValid && true;
}

} // namespace OpenAPI
