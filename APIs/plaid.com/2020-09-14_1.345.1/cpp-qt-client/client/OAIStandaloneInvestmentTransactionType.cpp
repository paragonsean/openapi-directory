/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStandaloneInvestmentTransactionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStandaloneInvestmentTransactionType::OAIStandaloneInvestmentTransactionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStandaloneInvestmentTransactionType::OAIStandaloneInvestmentTransactionType() {
    this->initializeModel();
}

OAIStandaloneInvestmentTransactionType::~OAIStandaloneInvestmentTransactionType() {}

void OAIStandaloneInvestmentTransactionType::initializeModel() {

    m_buy_isSet = false;
    m_buy_isValid = false;

    m_cancel_isSet = false;
    m_cancel_isValid = false;

    m_cash_isSet = false;
    m_cash_isValid = false;

    m_fee_isSet = false;
    m_fee_isValid = false;

    m_sell_isSet = false;
    m_sell_isValid = false;

    m_transfer_isSet = false;
    m_transfer_isValid = false;
}

void OAIStandaloneInvestmentTransactionType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStandaloneInvestmentTransactionType::fromJsonObject(QJsonObject json) {

    m_buy_isValid = ::OpenAPI::fromJsonValue(m_buy, json[QString("buy")]);
    m_buy_isSet = !json[QString("buy")].isNull() && m_buy_isValid;

    m_cancel_isValid = ::OpenAPI::fromJsonValue(m_cancel, json[QString("cancel")]);
    m_cancel_isSet = !json[QString("cancel")].isNull() && m_cancel_isValid;

    m_cash_isValid = ::OpenAPI::fromJsonValue(m_cash, json[QString("cash")]);
    m_cash_isSet = !json[QString("cash")].isNull() && m_cash_isValid;

    m_fee_isValid = ::OpenAPI::fromJsonValue(m_fee, json[QString("fee")]);
    m_fee_isSet = !json[QString("fee")].isNull() && m_fee_isValid;

    m_sell_isValid = ::OpenAPI::fromJsonValue(m_sell, json[QString("sell")]);
    m_sell_isSet = !json[QString("sell")].isNull() && m_sell_isValid;

    m_transfer_isValid = ::OpenAPI::fromJsonValue(m_transfer, json[QString("transfer")]);
    m_transfer_isSet = !json[QString("transfer")].isNull() && m_transfer_isValid;
}

QString OAIStandaloneInvestmentTransactionType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStandaloneInvestmentTransactionType::asJsonObject() const {
    QJsonObject obj;
    if (m_buy_isSet) {
        obj.insert(QString("buy"), ::OpenAPI::toJsonValue(m_buy));
    }
    if (m_cancel_isSet) {
        obj.insert(QString("cancel"), ::OpenAPI::toJsonValue(m_cancel));
    }
    if (m_cash_isSet) {
        obj.insert(QString("cash"), ::OpenAPI::toJsonValue(m_cash));
    }
    if (m_fee_isSet) {
        obj.insert(QString("fee"), ::OpenAPI::toJsonValue(m_fee));
    }
    if (m_sell_isSet) {
        obj.insert(QString("sell"), ::OpenAPI::toJsonValue(m_sell));
    }
    if (m_transfer_isSet) {
        obj.insert(QString("transfer"), ::OpenAPI::toJsonValue(m_transfer));
    }
    return obj;
}

QString OAIStandaloneInvestmentTransactionType::getBuy() const {
    return m_buy;
}
void OAIStandaloneInvestmentTransactionType::setBuy(const QString &buy) {
    m_buy = buy;
    m_buy_isSet = true;
}

bool OAIStandaloneInvestmentTransactionType::is_buy_Set() const{
    return m_buy_isSet;
}

bool OAIStandaloneInvestmentTransactionType::is_buy_Valid() const{
    return m_buy_isValid;
}

QString OAIStandaloneInvestmentTransactionType::getCancel() const {
    return m_cancel;
}
void OAIStandaloneInvestmentTransactionType::setCancel(const QString &cancel) {
    m_cancel = cancel;
    m_cancel_isSet = true;
}

bool OAIStandaloneInvestmentTransactionType::is_cancel_Set() const{
    return m_cancel_isSet;
}

bool OAIStandaloneInvestmentTransactionType::is_cancel_Valid() const{
    return m_cancel_isValid;
}

QString OAIStandaloneInvestmentTransactionType::getCash() const {
    return m_cash;
}
void OAIStandaloneInvestmentTransactionType::setCash(const QString &cash) {
    m_cash = cash;
    m_cash_isSet = true;
}

bool OAIStandaloneInvestmentTransactionType::is_cash_Set() const{
    return m_cash_isSet;
}

bool OAIStandaloneInvestmentTransactionType::is_cash_Valid() const{
    return m_cash_isValid;
}

QString OAIStandaloneInvestmentTransactionType::getFee() const {
    return m_fee;
}
void OAIStandaloneInvestmentTransactionType::setFee(const QString &fee) {
    m_fee = fee;
    m_fee_isSet = true;
}

bool OAIStandaloneInvestmentTransactionType::is_fee_Set() const{
    return m_fee_isSet;
}

bool OAIStandaloneInvestmentTransactionType::is_fee_Valid() const{
    return m_fee_isValid;
}

QString OAIStandaloneInvestmentTransactionType::getSell() const {
    return m_sell;
}
void OAIStandaloneInvestmentTransactionType::setSell(const QString &sell) {
    m_sell = sell;
    m_sell_isSet = true;
}

bool OAIStandaloneInvestmentTransactionType::is_sell_Set() const{
    return m_sell_isSet;
}

bool OAIStandaloneInvestmentTransactionType::is_sell_Valid() const{
    return m_sell_isValid;
}

QString OAIStandaloneInvestmentTransactionType::getTransfer() const {
    return m_transfer;
}
void OAIStandaloneInvestmentTransactionType::setTransfer(const QString &transfer) {
    m_transfer = transfer;
    m_transfer_isSet = true;
}

bool OAIStandaloneInvestmentTransactionType::is_transfer_Set() const{
    return m_transfer_isSet;
}

bool OAIStandaloneInvestmentTransactionType::is_transfer_Valid() const{
    return m_transfer_isValid;
}

bool OAIStandaloneInvestmentTransactionType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStandaloneInvestmentTransactionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_buy_isValid && m_cancel_isValid && m_cash_isValid && m_fee_isValid && m_sell_isValid && m_transfer_isValid && true;
}

} // namespace OpenAPI
