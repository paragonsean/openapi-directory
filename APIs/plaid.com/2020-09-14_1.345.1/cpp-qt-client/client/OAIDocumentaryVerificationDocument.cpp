/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentaryVerificationDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentaryVerificationDocument::OAIDocumentaryVerificationDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentaryVerificationDocument::OAIDocumentaryVerificationDocument() {
    this->initializeModel();
}

OAIDocumentaryVerificationDocument::~OAIDocumentaryVerificationDocument() {}

void OAIDocumentaryVerificationDocument::initializeModel() {

    m_analysis_isSet = false;
    m_analysis_isValid = false;

    m_attempt_isSet = false;
    m_attempt_isValid = false;

    m_extracted_data_isSet = false;
    m_extracted_data_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_redacted_at_isSet = false;
    m_redacted_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDocumentaryVerificationDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentaryVerificationDocument::fromJsonObject(QJsonObject json) {

    m_analysis_isValid = ::OpenAPI::fromJsonValue(m_analysis, json[QString("analysis")]);
    m_analysis_isSet = !json[QString("analysis")].isNull() && m_analysis_isValid;

    m_attempt_isValid = ::OpenAPI::fromJsonValue(m_attempt, json[QString("attempt")]);
    m_attempt_isSet = !json[QString("attempt")].isNull() && m_attempt_isValid;

    m_extracted_data_isValid = ::OpenAPI::fromJsonValue(m_extracted_data, json[QString("extracted_data")]);
    m_extracted_data_isSet = !json[QString("extracted_data")].isNull() && m_extracted_data_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_redacted_at_isValid = ::OpenAPI::fromJsonValue(m_redacted_at, json[QString("redacted_at")]);
    m_redacted_at_isSet = !json[QString("redacted_at")].isNull() && m_redacted_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDocumentaryVerificationDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentaryVerificationDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis.isSet()) {
        obj.insert(QString("analysis"), ::OpenAPI::toJsonValue(m_analysis));
    }
    if (m_attempt_isSet) {
        obj.insert(QString("attempt"), ::OpenAPI::toJsonValue(m_attempt));
    }
    if (m_extracted_data.isSet()) {
        obj.insert(QString("extracted_data"), ::OpenAPI::toJsonValue(m_extracted_data));
    }
    if (m_images.isSet()) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_redacted_at_isSet) {
        obj.insert(QString("redacted_at"), ::OpenAPI::toJsonValue(m_redacted_at));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIDocumentAnalysis OAIDocumentaryVerificationDocument::getAnalysis() const {
    return m_analysis;
}
void OAIDocumentaryVerificationDocument::setAnalysis(const OAIDocumentAnalysis &analysis) {
    m_analysis = analysis;
    m_analysis_isSet = true;
}

bool OAIDocumentaryVerificationDocument::is_analysis_Set() const{
    return m_analysis_isSet;
}

bool OAIDocumentaryVerificationDocument::is_analysis_Valid() const{
    return m_analysis_isValid;
}

double OAIDocumentaryVerificationDocument::getAttempt() const {
    return m_attempt;
}
void OAIDocumentaryVerificationDocument::setAttempt(const double &attempt) {
    m_attempt = attempt;
    m_attempt_isSet = true;
}

bool OAIDocumentaryVerificationDocument::is_attempt_Set() const{
    return m_attempt_isSet;
}

bool OAIDocumentaryVerificationDocument::is_attempt_Valid() const{
    return m_attempt_isValid;
}

OAIPhysicalDocumentExtractedData OAIDocumentaryVerificationDocument::getExtractedData() const {
    return m_extracted_data;
}
void OAIDocumentaryVerificationDocument::setExtractedData(const OAIPhysicalDocumentExtractedData &extracted_data) {
    m_extracted_data = extracted_data;
    m_extracted_data_isSet = true;
}

bool OAIDocumentaryVerificationDocument::is_extracted_data_Set() const{
    return m_extracted_data_isSet;
}

bool OAIDocumentaryVerificationDocument::is_extracted_data_Valid() const{
    return m_extracted_data_isValid;
}

OAIPhysicalDocumentImages OAIDocumentaryVerificationDocument::getImages() const {
    return m_images;
}
void OAIDocumentaryVerificationDocument::setImages(const OAIPhysicalDocumentImages &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIDocumentaryVerificationDocument::is_images_Set() const{
    return m_images_isSet;
}

bool OAIDocumentaryVerificationDocument::is_images_Valid() const{
    return m_images_isValid;
}

QDateTime OAIDocumentaryVerificationDocument::getRedactedAt() const {
    return m_redacted_at;
}
void OAIDocumentaryVerificationDocument::setRedactedAt(const QDateTime &redacted_at) {
    m_redacted_at = redacted_at;
    m_redacted_at_isSet = true;
}

bool OAIDocumentaryVerificationDocument::is_redacted_at_Set() const{
    return m_redacted_at_isSet;
}

bool OAIDocumentaryVerificationDocument::is_redacted_at_Valid() const{
    return m_redacted_at_isValid;
}

OAIDocumentStatus OAIDocumentaryVerificationDocument::getStatus() const {
    return m_status;
}
void OAIDocumentaryVerificationDocument::setStatus(const OAIDocumentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDocumentaryVerificationDocument::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDocumentaryVerificationDocument::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDocumentaryVerificationDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extracted_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redacted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentaryVerificationDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_analysis_isValid && m_attempt_isValid && m_extracted_data_isValid && m_images_isValid && m_redacted_at_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
