/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkTokenGetMetadataResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkTokenGetMetadataResponse::OAILinkTokenGetMetadataResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkTokenGetMetadataResponse::OAILinkTokenGetMetadataResponse() {
    this->initializeModel();
}

OAILinkTokenGetMetadataResponse::~OAILinkTokenGetMetadataResponse() {}

void OAILinkTokenGetMetadataResponse::initializeModel() {

    m_account_filters_isSet = false;
    m_account_filters_isValid = false;

    m_client_name_isSet = false;
    m_client_name_isValid = false;

    m_country_codes_isSet = false;
    m_country_codes_isValid = false;

    m_initial_products_isSet = false;
    m_initial_products_isValid = false;

    m_institution_data_isSet = false;
    m_institution_data_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_redirect_uri_isSet = false;
    m_redirect_uri_isValid = false;

    m_webhook_isSet = false;
    m_webhook_isValid = false;
}

void OAILinkTokenGetMetadataResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinkTokenGetMetadataResponse::fromJsonObject(QJsonObject json) {

    m_account_filters_isValid = ::OpenAPI::fromJsonValue(m_account_filters, json[QString("account_filters")]);
    m_account_filters_isSet = !json[QString("account_filters")].isNull() && m_account_filters_isValid;

    m_client_name_isValid = ::OpenAPI::fromJsonValue(m_client_name, json[QString("client_name")]);
    m_client_name_isSet = !json[QString("client_name")].isNull() && m_client_name_isValid;

    m_country_codes_isValid = ::OpenAPI::fromJsonValue(m_country_codes, json[QString("country_codes")]);
    m_country_codes_isSet = !json[QString("country_codes")].isNull() && m_country_codes_isValid;

    m_initial_products_isValid = ::OpenAPI::fromJsonValue(m_initial_products, json[QString("initial_products")]);
    m_initial_products_isSet = !json[QString("initial_products")].isNull() && m_initial_products_isValid;

    m_institution_data_isValid = ::OpenAPI::fromJsonValue(m_institution_data, json[QString("institution_data")]);
    m_institution_data_isSet = !json[QString("institution_data")].isNull() && m_institution_data_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_redirect_uri, json[QString("redirect_uri")]);
    m_redirect_uri_isSet = !json[QString("redirect_uri")].isNull() && m_redirect_uri_isValid;

    m_webhook_isValid = ::OpenAPI::fromJsonValue(m_webhook, json[QString("webhook")]);
    m_webhook_isSet = !json[QString("webhook")].isNull() && m_webhook_isValid;
}

QString OAILinkTokenGetMetadataResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinkTokenGetMetadataResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_account_filters.isSet()) {
        obj.insert(QString("account_filters"), ::OpenAPI::toJsonValue(m_account_filters));
    }
    if (m_client_name_isSet) {
        obj.insert(QString("client_name"), ::OpenAPI::toJsonValue(m_client_name));
    }
    if (m_country_codes.size() > 0) {
        obj.insert(QString("country_codes"), ::OpenAPI::toJsonValue(m_country_codes));
    }
    if (m_initial_products.size() > 0) {
        obj.insert(QString("initial_products"), ::OpenAPI::toJsonValue(m_initial_products));
    }
    if (m_institution_data.isSet()) {
        obj.insert(QString("institution_data"), ::OpenAPI::toJsonValue(m_institution_data));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_redirect_uri_isSet) {
        obj.insert(QString("redirect_uri"), ::OpenAPI::toJsonValue(m_redirect_uri));
    }
    if (m_webhook_isSet) {
        obj.insert(QString("webhook"), ::OpenAPI::toJsonValue(m_webhook));
    }
    return obj;
}

OAIAccountFiltersResponse OAILinkTokenGetMetadataResponse::getAccountFilters() const {
    return m_account_filters;
}
void OAILinkTokenGetMetadataResponse::setAccountFilters(const OAIAccountFiltersResponse &account_filters) {
    m_account_filters = account_filters;
    m_account_filters_isSet = true;
}

bool OAILinkTokenGetMetadataResponse::is_account_filters_Set() const{
    return m_account_filters_isSet;
}

bool OAILinkTokenGetMetadataResponse::is_account_filters_Valid() const{
    return m_account_filters_isValid;
}

QString OAILinkTokenGetMetadataResponse::getClientName() const {
    return m_client_name;
}
void OAILinkTokenGetMetadataResponse::setClientName(const QString &client_name) {
    m_client_name = client_name;
    m_client_name_isSet = true;
}

bool OAILinkTokenGetMetadataResponse::is_client_name_Set() const{
    return m_client_name_isSet;
}

bool OAILinkTokenGetMetadataResponse::is_client_name_Valid() const{
    return m_client_name_isValid;
}

QList<OAICountryCode> OAILinkTokenGetMetadataResponse::getCountryCodes() const {
    return m_country_codes;
}
void OAILinkTokenGetMetadataResponse::setCountryCodes(const QList<OAICountryCode> &country_codes) {
    m_country_codes = country_codes;
    m_country_codes_isSet = true;
}

bool OAILinkTokenGetMetadataResponse::is_country_codes_Set() const{
    return m_country_codes_isSet;
}

bool OAILinkTokenGetMetadataResponse::is_country_codes_Valid() const{
    return m_country_codes_isValid;
}

QList<OAIProducts> OAILinkTokenGetMetadataResponse::getInitialProducts() const {
    return m_initial_products;
}
void OAILinkTokenGetMetadataResponse::setInitialProducts(const QList<OAIProducts> &initial_products) {
    m_initial_products = initial_products;
    m_initial_products_isSet = true;
}

bool OAILinkTokenGetMetadataResponse::is_initial_products_Set() const{
    return m_initial_products_isSet;
}

bool OAILinkTokenGetMetadataResponse::is_initial_products_Valid() const{
    return m_initial_products_isValid;
}

OAILinkTokenCreateInstitutionData OAILinkTokenGetMetadataResponse::getInstitutionData() const {
    return m_institution_data;
}
void OAILinkTokenGetMetadataResponse::setInstitutionData(const OAILinkTokenCreateInstitutionData &institution_data) {
    m_institution_data = institution_data;
    m_institution_data_isSet = true;
}

bool OAILinkTokenGetMetadataResponse::is_institution_data_Set() const{
    return m_institution_data_isSet;
}

bool OAILinkTokenGetMetadataResponse::is_institution_data_Valid() const{
    return m_institution_data_isValid;
}

QString OAILinkTokenGetMetadataResponse::getLanguage() const {
    return m_language;
}
void OAILinkTokenGetMetadataResponse::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAILinkTokenGetMetadataResponse::is_language_Set() const{
    return m_language_isSet;
}

bool OAILinkTokenGetMetadataResponse::is_language_Valid() const{
    return m_language_isValid;
}

QString OAILinkTokenGetMetadataResponse::getRedirectUri() const {
    return m_redirect_uri;
}
void OAILinkTokenGetMetadataResponse::setRedirectUri(const QString &redirect_uri) {
    m_redirect_uri = redirect_uri;
    m_redirect_uri_isSet = true;
}

bool OAILinkTokenGetMetadataResponse::is_redirect_uri_Set() const{
    return m_redirect_uri_isSet;
}

bool OAILinkTokenGetMetadataResponse::is_redirect_uri_Valid() const{
    return m_redirect_uri_isValid;
}

QString OAILinkTokenGetMetadataResponse::getWebhook() const {
    return m_webhook;
}
void OAILinkTokenGetMetadataResponse::setWebhook(const QString &webhook) {
    m_webhook = webhook;
    m_webhook_isSet = true;
}

bool OAILinkTokenGetMetadataResponse::is_webhook_Set() const{
    return m_webhook_isSet;
}

bool OAILinkTokenGetMetadataResponse::is_webhook_Valid() const{
    return m_webhook_isValid;
}

bool OAILinkTokenGetMetadataResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinkTokenGetMetadataResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_name_isValid && m_country_codes_isValid && m_initial_products_isValid && m_language_isValid && m_redirect_uri_isValid && m_webhook_isValid && true;
}

} // namespace OpenAPI
