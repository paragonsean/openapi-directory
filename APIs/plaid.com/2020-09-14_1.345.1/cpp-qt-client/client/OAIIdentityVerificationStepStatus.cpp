/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityVerificationStepStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityVerificationStepStatus::OAIIdentityVerificationStepStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityVerificationStepStatus::OAIIdentityVerificationStepStatus() {
    this->initializeModel();
}

OAIIdentityVerificationStepStatus::~OAIIdentityVerificationStepStatus() {}

void OAIIdentityVerificationStepStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIIdentityVerificationStepStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIIdentityVerificationStepStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("success", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStepStatus::SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("active", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStepStatus::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStepStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("waiting_for_prerequisite", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStepStatus::WAITING_FOR_PREREQUISITE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("not_applicable", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStepStatus::NOT_APPLICABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("skipped", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStepStatus::SKIPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("expired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStepStatus::EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("canceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStepStatus::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pending_review", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStepStatus::PENDING_REVIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("manually_approved", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStepStatus::MANUALLY_APPROVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("manually_rejected", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentityVerificationStepStatus::MANUALLY_REJECTED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIIdentityVerificationStepStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIIdentityVerificationStepStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIIdentityVerificationStepStatus::SUCCESS:
            val = "success";
            break;
        case eOAIIdentityVerificationStepStatus::ACTIVE:
            val = "active";
            break;
        case eOAIIdentityVerificationStepStatus::FAILED:
            val = "failed";
            break;
        case eOAIIdentityVerificationStepStatus::WAITING_FOR_PREREQUISITE:
            val = "waiting_for_prerequisite";
            break;
        case eOAIIdentityVerificationStepStatus::NOT_APPLICABLE:
            val = "not_applicable";
            break;
        case eOAIIdentityVerificationStepStatus::SKIPPED:
            val = "skipped";
            break;
        case eOAIIdentityVerificationStepStatus::EXPIRED:
            val = "expired";
            break;
        case eOAIIdentityVerificationStepStatus::CANCELED:
            val = "canceled";
            break;
        case eOAIIdentityVerificationStepStatus::PENDING_REVIEW:
            val = "pending_review";
            break;
        case eOAIIdentityVerificationStepStatus::MANUALLY_APPROVED:
            val = "manually_approved";
            break;
        case eOAIIdentityVerificationStepStatus::MANUALLY_REJECTED:
            val = "manually_rejected";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIIdentityVerificationStepStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIIdentityVerificationStepStatus::eOAIIdentityVerificationStepStatus OAIIdentityVerificationStepStatus::getValue() const {
    return m_value;
}

void OAIIdentityVerificationStepStatus::setValue(const OAIIdentityVerificationStepStatus::eOAIIdentityVerificationStepStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIIdentityVerificationStepStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIIdentityVerificationStepStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
