/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserCustomPassword.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserCustomPassword::OAIUserCustomPassword(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserCustomPassword::OAIUserCustomPassword() {
    this->initializeModel();
}

OAIUserCustomPassword::~OAIUserCustomPassword() {}

void OAIUserCustomPassword::initializeModel() {

    m_force_error_isSet = false;
    m_force_error_isValid = false;

    m_mfa_isSet = false;
    m_mfa_isValid = false;

    m_override_accounts_isSet = false;
    m_override_accounts_isValid = false;

    m_recaptcha_isSet = false;
    m_recaptcha_isValid = false;

    m_seed_isSet = false;
    m_seed_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIUserCustomPassword::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserCustomPassword::fromJsonObject(QJsonObject json) {

    m_force_error_isValid = ::OpenAPI::fromJsonValue(m_force_error, json[QString("force_error")]);
    m_force_error_isSet = !json[QString("force_error")].isNull() && m_force_error_isValid;

    m_mfa_isValid = ::OpenAPI::fromJsonValue(m_mfa, json[QString("mfa")]);
    m_mfa_isSet = !json[QString("mfa")].isNull() && m_mfa_isValid;

    m_override_accounts_isValid = ::OpenAPI::fromJsonValue(m_override_accounts, json[QString("override_accounts")]);
    m_override_accounts_isSet = !json[QString("override_accounts")].isNull() && m_override_accounts_isValid;

    m_recaptcha_isValid = ::OpenAPI::fromJsonValue(m_recaptcha, json[QString("recaptcha")]);
    m_recaptcha_isSet = !json[QString("recaptcha")].isNull() && m_recaptcha_isValid;

    m_seed_isValid = ::OpenAPI::fromJsonValue(m_seed, json[QString("seed")]);
    m_seed_isSet = !json[QString("seed")].isNull() && m_seed_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIUserCustomPassword::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserCustomPassword::asJsonObject() const {
    QJsonObject obj;
    if (m_force_error_isSet) {
        obj.insert(QString("force_error"), ::OpenAPI::toJsonValue(m_force_error));
    }
    if (m_mfa.isSet()) {
        obj.insert(QString("mfa"), ::OpenAPI::toJsonValue(m_mfa));
    }
    if (m_override_accounts.size() > 0) {
        obj.insert(QString("override_accounts"), ::OpenAPI::toJsonValue(m_override_accounts));
    }
    if (m_recaptcha_isSet) {
        obj.insert(QString("recaptcha"), ::OpenAPI::toJsonValue(m_recaptcha));
    }
    if (m_seed_isSet) {
        obj.insert(QString("seed"), ::OpenAPI::toJsonValue(m_seed));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIUserCustomPassword::getForceError() const {
    return m_force_error;
}
void OAIUserCustomPassword::setForceError(const QString &force_error) {
    m_force_error = force_error;
    m_force_error_isSet = true;
}

bool OAIUserCustomPassword::is_force_error_Set() const{
    return m_force_error_isSet;
}

bool OAIUserCustomPassword::is_force_error_Valid() const{
    return m_force_error_isValid;
}

OAIMFA OAIUserCustomPassword::getMfa() const {
    return m_mfa;
}
void OAIUserCustomPassword::setMfa(const OAIMFA &mfa) {
    m_mfa = mfa;
    m_mfa_isSet = true;
}

bool OAIUserCustomPassword::is_mfa_Set() const{
    return m_mfa_isSet;
}

bool OAIUserCustomPassword::is_mfa_Valid() const{
    return m_mfa_isValid;
}

QList<OAIOverrideAccounts> OAIUserCustomPassword::getOverrideAccounts() const {
    return m_override_accounts;
}
void OAIUserCustomPassword::setOverrideAccounts(const QList<OAIOverrideAccounts> &override_accounts) {
    m_override_accounts = override_accounts;
    m_override_accounts_isSet = true;
}

bool OAIUserCustomPassword::is_override_accounts_Set() const{
    return m_override_accounts_isSet;
}

bool OAIUserCustomPassword::is_override_accounts_Valid() const{
    return m_override_accounts_isValid;
}

QString OAIUserCustomPassword::getRecaptcha() const {
    return m_recaptcha;
}
void OAIUserCustomPassword::setRecaptcha(const QString &recaptcha) {
    m_recaptcha = recaptcha;
    m_recaptcha_isSet = true;
}

bool OAIUserCustomPassword::is_recaptcha_Set() const{
    return m_recaptcha_isSet;
}

bool OAIUserCustomPassword::is_recaptcha_Valid() const{
    return m_recaptcha_isValid;
}

QString OAIUserCustomPassword::getSeed() const {
    return m_seed;
}
void OAIUserCustomPassword::setSeed(const QString &seed) {
    m_seed = seed;
    m_seed_isSet = true;
}

bool OAIUserCustomPassword::is_seed_Set() const{
    return m_seed_isSet;
}

bool OAIUserCustomPassword::is_seed_Valid() const{
    return m_seed_isValid;
}

QString OAIUserCustomPassword::getVersion() const {
    return m_version;
}
void OAIUserCustomPassword::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUserCustomPassword::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUserCustomPassword::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIUserCustomPassword::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_force_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mfa.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recaptcha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserCustomPassword::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_force_error_isValid && m_mfa_isValid && m_override_accounts_isValid && m_recaptcha_isValid && m_seed_isValid && true;
}

} // namespace OpenAPI
