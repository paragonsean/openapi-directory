/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIW2StateAndLocalWages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIW2StateAndLocalWages::OAIW2StateAndLocalWages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIW2StateAndLocalWages::OAIW2StateAndLocalWages() {
    this->initializeModel();
}

OAIW2StateAndLocalWages::~OAIW2StateAndLocalWages() {}

void OAIW2StateAndLocalWages::initializeModel() {

    m_employer_state_id_number_isSet = false;
    m_employer_state_id_number_isValid = false;

    m_local_income_tax_isSet = false;
    m_local_income_tax_isValid = false;

    m_local_wages_tips_isSet = false;
    m_local_wages_tips_isValid = false;

    m_locality_name_isSet = false;
    m_locality_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_income_tax_isSet = false;
    m_state_income_tax_isValid = false;

    m_state_wages_tips_isSet = false;
    m_state_wages_tips_isValid = false;
}

void OAIW2StateAndLocalWages::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIW2StateAndLocalWages::fromJsonObject(QJsonObject json) {

    m_employer_state_id_number_isValid = ::OpenAPI::fromJsonValue(m_employer_state_id_number, json[QString("employer_state_id_number")]);
    m_employer_state_id_number_isSet = !json[QString("employer_state_id_number")].isNull() && m_employer_state_id_number_isValid;

    m_local_income_tax_isValid = ::OpenAPI::fromJsonValue(m_local_income_tax, json[QString("local_income_tax")]);
    m_local_income_tax_isSet = !json[QString("local_income_tax")].isNull() && m_local_income_tax_isValid;

    m_local_wages_tips_isValid = ::OpenAPI::fromJsonValue(m_local_wages_tips, json[QString("local_wages_tips")]);
    m_local_wages_tips_isSet = !json[QString("local_wages_tips")].isNull() && m_local_wages_tips_isValid;

    m_locality_name_isValid = ::OpenAPI::fromJsonValue(m_locality_name, json[QString("locality_name")]);
    m_locality_name_isSet = !json[QString("locality_name")].isNull() && m_locality_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_income_tax_isValid = ::OpenAPI::fromJsonValue(m_state_income_tax, json[QString("state_income_tax")]);
    m_state_income_tax_isSet = !json[QString("state_income_tax")].isNull() && m_state_income_tax_isValid;

    m_state_wages_tips_isValid = ::OpenAPI::fromJsonValue(m_state_wages_tips, json[QString("state_wages_tips")]);
    m_state_wages_tips_isSet = !json[QString("state_wages_tips")].isNull() && m_state_wages_tips_isValid;
}

QString OAIW2StateAndLocalWages::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIW2StateAndLocalWages::asJsonObject() const {
    QJsonObject obj;
    if (m_employer_state_id_number_isSet) {
        obj.insert(QString("employer_state_id_number"), ::OpenAPI::toJsonValue(m_employer_state_id_number));
    }
    if (m_local_income_tax_isSet) {
        obj.insert(QString("local_income_tax"), ::OpenAPI::toJsonValue(m_local_income_tax));
    }
    if (m_local_wages_tips_isSet) {
        obj.insert(QString("local_wages_tips"), ::OpenAPI::toJsonValue(m_local_wages_tips));
    }
    if (m_locality_name_isSet) {
        obj.insert(QString("locality_name"), ::OpenAPI::toJsonValue(m_locality_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_income_tax_isSet) {
        obj.insert(QString("state_income_tax"), ::OpenAPI::toJsonValue(m_state_income_tax));
    }
    if (m_state_wages_tips_isSet) {
        obj.insert(QString("state_wages_tips"), ::OpenAPI::toJsonValue(m_state_wages_tips));
    }
    return obj;
}

QString OAIW2StateAndLocalWages::getEmployerStateIdNumber() const {
    return m_employer_state_id_number;
}
void OAIW2StateAndLocalWages::setEmployerStateIdNumber(const QString &employer_state_id_number) {
    m_employer_state_id_number = employer_state_id_number;
    m_employer_state_id_number_isSet = true;
}

bool OAIW2StateAndLocalWages::is_employer_state_id_number_Set() const{
    return m_employer_state_id_number_isSet;
}

bool OAIW2StateAndLocalWages::is_employer_state_id_number_Valid() const{
    return m_employer_state_id_number_isValid;
}

QString OAIW2StateAndLocalWages::getLocalIncomeTax() const {
    return m_local_income_tax;
}
void OAIW2StateAndLocalWages::setLocalIncomeTax(const QString &local_income_tax) {
    m_local_income_tax = local_income_tax;
    m_local_income_tax_isSet = true;
}

bool OAIW2StateAndLocalWages::is_local_income_tax_Set() const{
    return m_local_income_tax_isSet;
}

bool OAIW2StateAndLocalWages::is_local_income_tax_Valid() const{
    return m_local_income_tax_isValid;
}

QString OAIW2StateAndLocalWages::getLocalWagesTips() const {
    return m_local_wages_tips;
}
void OAIW2StateAndLocalWages::setLocalWagesTips(const QString &local_wages_tips) {
    m_local_wages_tips = local_wages_tips;
    m_local_wages_tips_isSet = true;
}

bool OAIW2StateAndLocalWages::is_local_wages_tips_Set() const{
    return m_local_wages_tips_isSet;
}

bool OAIW2StateAndLocalWages::is_local_wages_tips_Valid() const{
    return m_local_wages_tips_isValid;
}

QString OAIW2StateAndLocalWages::getLocalityName() const {
    return m_locality_name;
}
void OAIW2StateAndLocalWages::setLocalityName(const QString &locality_name) {
    m_locality_name = locality_name;
    m_locality_name_isSet = true;
}

bool OAIW2StateAndLocalWages::is_locality_name_Set() const{
    return m_locality_name_isSet;
}

bool OAIW2StateAndLocalWages::is_locality_name_Valid() const{
    return m_locality_name_isValid;
}

QString OAIW2StateAndLocalWages::getState() const {
    return m_state;
}
void OAIW2StateAndLocalWages::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIW2StateAndLocalWages::is_state_Set() const{
    return m_state_isSet;
}

bool OAIW2StateAndLocalWages::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIW2StateAndLocalWages::getStateIncomeTax() const {
    return m_state_income_tax;
}
void OAIW2StateAndLocalWages::setStateIncomeTax(const QString &state_income_tax) {
    m_state_income_tax = state_income_tax;
    m_state_income_tax_isSet = true;
}

bool OAIW2StateAndLocalWages::is_state_income_tax_Set() const{
    return m_state_income_tax_isSet;
}

bool OAIW2StateAndLocalWages::is_state_income_tax_Valid() const{
    return m_state_income_tax_isValid;
}

QString OAIW2StateAndLocalWages::getStateWagesTips() const {
    return m_state_wages_tips;
}
void OAIW2StateAndLocalWages::setStateWagesTips(const QString &state_wages_tips) {
    m_state_wages_tips = state_wages_tips;
    m_state_wages_tips_isSet = true;
}

bool OAIW2StateAndLocalWages::is_state_wages_tips_Set() const{
    return m_state_wages_tips_isSet;
}

bool OAIW2StateAndLocalWages::is_state_wages_tips_Valid() const{
    return m_state_wages_tips_isValid;
}

bool OAIW2StateAndLocalWages::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_employer_state_id_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_income_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_wages_tips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locality_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_income_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_wages_tips_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIW2StateAndLocalWages::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
