/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFDXNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFDXNotification::OAIFDXNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFDXNotification::OAIFDXNotification() {
    this->initializeModel();
}

OAIFDXNotification::~OAIFDXNotification() {}

void OAIFDXNotification::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_notification_id_isSet = false;
    m_notification_id_isValid = false;

    m_notification_payload_isSet = false;
    m_notification_payload_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_sent_on_isSet = false;
    m_sent_on_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_subscriber_isSet = false;
    m_subscriber_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIFDXNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFDXNotification::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_notification_id_isValid = ::OpenAPI::fromJsonValue(m_notification_id, json[QString("notificationId")]);
    m_notification_id_isSet = !json[QString("notificationId")].isNull() && m_notification_id_isValid;

    m_notification_payload_isValid = ::OpenAPI::fromJsonValue(m_notification_payload, json[QString("notificationPayload")]);
    m_notification_payload_isSet = !json[QString("notificationPayload")].isNull() && m_notification_payload_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_sent_on_isValid = ::OpenAPI::fromJsonValue(m_sent_on, json[QString("sentOn")]);
    m_sent_on_isSet = !json[QString("sentOn")].isNull() && m_sent_on_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_subscriber_isValid = ::OpenAPI::fromJsonValue(m_subscriber, json[QString("subscriber")]);
    m_subscriber_isSet = !json[QString("subscriber")].isNull() && m_subscriber_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIFDXNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFDXNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_notification_id_isSet) {
        obj.insert(QString("notificationId"), ::OpenAPI::toJsonValue(m_notification_id));
    }
    if (m_notification_payload.isSet()) {
        obj.insert(QString("notificationPayload"), ::OpenAPI::toJsonValue(m_notification_payload));
    }
    if (m_priority.isSet()) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_publisher.isSet()) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_sent_on_isSet) {
        obj.insert(QString("sentOn"), ::OpenAPI::toJsonValue(m_sent_on));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_subscriber.isSet()) {
        obj.insert(QString("subscriber"), ::OpenAPI::toJsonValue(m_subscriber));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url.isSet()) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIFDXNotificationCategory OAIFDXNotification::getCategory() const {
    return m_category;
}
void OAIFDXNotification::setCategory(const OAIFDXNotificationCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIFDXNotification::is_category_Set() const{
    return m_category_isSet;
}

bool OAIFDXNotification::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIFDXNotification::getNotificationId() const {
    return m_notification_id;
}
void OAIFDXNotification::setNotificationId(const QString &notification_id) {
    m_notification_id = notification_id;
    m_notification_id_isSet = true;
}

bool OAIFDXNotification::is_notification_id_Set() const{
    return m_notification_id_isSet;
}

bool OAIFDXNotification::is_notification_id_Valid() const{
    return m_notification_id_isValid;
}

OAIFDXNotificationPayload OAIFDXNotification::getNotificationPayload() const {
    return m_notification_payload;
}
void OAIFDXNotification::setNotificationPayload(const OAIFDXNotificationPayload &notification_payload) {
    m_notification_payload = notification_payload;
    m_notification_payload_isSet = true;
}

bool OAIFDXNotification::is_notification_payload_Set() const{
    return m_notification_payload_isSet;
}

bool OAIFDXNotification::is_notification_payload_Valid() const{
    return m_notification_payload_isValid;
}

OAIFDXNotificationPriority OAIFDXNotification::getPriority() const {
    return m_priority;
}
void OAIFDXNotification::setPriority(const OAIFDXNotificationPriority &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIFDXNotification::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIFDXNotification::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIFDXParty OAIFDXNotification::getPublisher() const {
    return m_publisher;
}
void OAIFDXNotification::setPublisher(const OAIFDXParty &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIFDXNotification::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIFDXNotification::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QDateTime OAIFDXNotification::getSentOn() const {
    return m_sent_on;
}
void OAIFDXNotification::setSentOn(const QDateTime &sent_on) {
    m_sent_on = sent_on;
    m_sent_on_isSet = true;
}

bool OAIFDXNotification::is_sent_on_Set() const{
    return m_sent_on_isSet;
}

bool OAIFDXNotification::is_sent_on_Valid() const{
    return m_sent_on_isValid;
}

OAIFDXNotificationSeverity OAIFDXNotification::getSeverity() const {
    return m_severity;
}
void OAIFDXNotification::setSeverity(const OAIFDXNotificationSeverity &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIFDXNotification::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIFDXNotification::is_severity_Valid() const{
    return m_severity_isValid;
}

OAIFDXParty OAIFDXNotification::getSubscriber() const {
    return m_subscriber;
}
void OAIFDXNotification::setSubscriber(const OAIFDXParty &subscriber) {
    m_subscriber = subscriber;
    m_subscriber_isSet = true;
}

bool OAIFDXNotification::is_subscriber_Set() const{
    return m_subscriber_isSet;
}

bool OAIFDXNotification::is_subscriber_Valid() const{
    return m_subscriber_isValid;
}

OAIFDXNotificationType OAIFDXNotification::getType() const {
    return m_type;
}
void OAIFDXNotification::setType(const OAIFDXNotificationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFDXNotification::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFDXNotification::is_type_Valid() const{
    return m_type_isValid;
}

OAIFDXHateoasLink OAIFDXNotification::getUrl() const {
    return m_url;
}
void OAIFDXNotification::setUrl(const OAIFDXHateoasLink &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIFDXNotification::is_url_Set() const{
    return m_url_isSet;
}

bool OAIFDXNotification::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIFDXNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriber.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFDXNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_isValid && m_notification_id_isValid && m_notification_payload_isValid && m_publisher_isValid && m_sent_on_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
