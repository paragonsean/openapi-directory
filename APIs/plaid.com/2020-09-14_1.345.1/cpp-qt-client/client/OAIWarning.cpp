/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarning.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarning::OAIWarning(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarning::OAIWarning() {
    this->initializeModel();
}

OAIWarning::~OAIWarning() {}

void OAIWarning::initializeModel() {

    m_cause_isSet = false;
    m_cause_isValid = false;

    m_warning_code_isSet = false;
    m_warning_code_isValid = false;

    m_warning_type_isSet = false;
    m_warning_type_isValid = false;
}

void OAIWarning::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarning::fromJsonObject(QJsonObject json) {

    m_cause_isValid = ::OpenAPI::fromJsonValue(m_cause, json[QString("cause")]);
    m_cause_isSet = !json[QString("cause")].isNull() && m_cause_isValid;

    m_warning_code_isValid = ::OpenAPI::fromJsonValue(m_warning_code, json[QString("warning_code")]);
    m_warning_code_isSet = !json[QString("warning_code")].isNull() && m_warning_code_isValid;

    m_warning_type_isValid = ::OpenAPI::fromJsonValue(m_warning_type, json[QString("warning_type")]);
    m_warning_type_isSet = !json[QString("warning_type")].isNull() && m_warning_type_isValid;
}

QString OAIWarning::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarning::asJsonObject() const {
    QJsonObject obj;
    if (m_cause.isSet()) {
        obj.insert(QString("cause"), ::OpenAPI::toJsonValue(m_cause));
    }
    if (m_warning_code_isSet) {
        obj.insert(QString("warning_code"), ::OpenAPI::toJsonValue(m_warning_code));
    }
    if (m_warning_type_isSet) {
        obj.insert(QString("warning_type"), ::OpenAPI::toJsonValue(m_warning_type));
    }
    return obj;
}

OAICause OAIWarning::getCause() const {
    return m_cause;
}
void OAIWarning::setCause(const OAICause &cause) {
    m_cause = cause;
    m_cause_isSet = true;
}

bool OAIWarning::is_cause_Set() const{
    return m_cause_isSet;
}

bool OAIWarning::is_cause_Valid() const{
    return m_cause_isValid;
}

QString OAIWarning::getWarningCode() const {
    return m_warning_code;
}
void OAIWarning::setWarningCode(const QString &warning_code) {
    m_warning_code = warning_code;
    m_warning_code_isSet = true;
}

bool OAIWarning::is_warning_code_Set() const{
    return m_warning_code_isSet;
}

bool OAIWarning::is_warning_code_Valid() const{
    return m_warning_code_isValid;
}

QString OAIWarning::getWarningType() const {
    return m_warning_type;
}
void OAIWarning::setWarningType(const QString &warning_type) {
    m_warning_type = warning_type;
    m_warning_type_isSet = true;
}

bool OAIWarning::is_warning_type_Set() const{
    return m_warning_type_isSet;
}

bool OAIWarning::is_warning_type_Valid() const{
    return m_warning_type_isValid;
}

bool OAIWarning::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cause.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarning::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cause_isValid && m_warning_code_isValid && m_warning_type_isValid && true;
}

} // namespace OpenAPI
