/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISandboxTransferRepaymentSimulateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISandboxTransferRepaymentSimulateRequest::OAISandboxTransferRepaymentSimulateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISandboxTransferRepaymentSimulateRequest::OAISandboxTransferRepaymentSimulateRequest() {
    this->initializeModel();
}

OAISandboxTransferRepaymentSimulateRequest::~OAISandboxTransferRepaymentSimulateRequest() {}

void OAISandboxTransferRepaymentSimulateRequest::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;
}

void OAISandboxTransferRepaymentSimulateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISandboxTransferRepaymentSimulateRequest::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;
}

QString OAISandboxTransferRepaymentSimulateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISandboxTransferRepaymentSimulateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    return obj;
}

QString OAISandboxTransferRepaymentSimulateRequest::getClientId() const {
    return m_client_id;
}
void OAISandboxTransferRepaymentSimulateRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAISandboxTransferRepaymentSimulateRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAISandboxTransferRepaymentSimulateRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAISandboxTransferRepaymentSimulateRequest::getSecret() const {
    return m_secret;
}
void OAISandboxTransferRepaymentSimulateRequest::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAISandboxTransferRepaymentSimulateRequest::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAISandboxTransferRepaymentSimulateRequest::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAISandboxTransferRepaymentSimulateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISandboxTransferRepaymentSimulateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
