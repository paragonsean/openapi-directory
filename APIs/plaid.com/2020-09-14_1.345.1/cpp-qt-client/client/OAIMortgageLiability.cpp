/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMortgageLiability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMortgageLiability::OAIMortgageLiability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMortgageLiability::OAIMortgageLiability() {
    this->initializeModel();
}

OAIMortgageLiability::~OAIMortgageLiability() {}

void OAIMortgageLiability::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_current_late_fee_isSet = false;
    m_current_late_fee_isValid = false;

    m_escrow_balance_isSet = false;
    m_escrow_balance_isValid = false;

    m_has_pmi_isSet = false;
    m_has_pmi_isValid = false;

    m_has_prepayment_penalty_isSet = false;
    m_has_prepayment_penalty_isValid = false;

    m_interest_rate_isSet = false;
    m_interest_rate_isValid = false;

    m_last_payment_amount_isSet = false;
    m_last_payment_amount_isValid = false;

    m_last_payment_date_isSet = false;
    m_last_payment_date_isValid = false;

    m_loan_term_isSet = false;
    m_loan_term_isValid = false;

    m_loan_type_description_isSet = false;
    m_loan_type_description_isValid = false;

    m_maturity_date_isSet = false;
    m_maturity_date_isValid = false;

    m_next_monthly_payment_isSet = false;
    m_next_monthly_payment_isValid = false;

    m_next_payment_due_date_isSet = false;
    m_next_payment_due_date_isValid = false;

    m_origination_date_isSet = false;
    m_origination_date_isValid = false;

    m_origination_principal_amount_isSet = false;
    m_origination_principal_amount_isValid = false;

    m_past_due_amount_isSet = false;
    m_past_due_amount_isValid = false;

    m_property_address_isSet = false;
    m_property_address_isValid = false;

    m_ytd_interest_paid_isSet = false;
    m_ytd_interest_paid_isValid = false;

    m_ytd_principal_paid_isSet = false;
    m_ytd_principal_paid_isValid = false;
}

void OAIMortgageLiability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMortgageLiability::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("account_number")]);
    m_account_number_isSet = !json[QString("account_number")].isNull() && m_account_number_isValid;

    m_current_late_fee_isValid = ::OpenAPI::fromJsonValue(m_current_late_fee, json[QString("current_late_fee")]);
    m_current_late_fee_isSet = !json[QString("current_late_fee")].isNull() && m_current_late_fee_isValid;

    m_escrow_balance_isValid = ::OpenAPI::fromJsonValue(m_escrow_balance, json[QString("escrow_balance")]);
    m_escrow_balance_isSet = !json[QString("escrow_balance")].isNull() && m_escrow_balance_isValid;

    m_has_pmi_isValid = ::OpenAPI::fromJsonValue(m_has_pmi, json[QString("has_pmi")]);
    m_has_pmi_isSet = !json[QString("has_pmi")].isNull() && m_has_pmi_isValid;

    m_has_prepayment_penalty_isValid = ::OpenAPI::fromJsonValue(m_has_prepayment_penalty, json[QString("has_prepayment_penalty")]);
    m_has_prepayment_penalty_isSet = !json[QString("has_prepayment_penalty")].isNull() && m_has_prepayment_penalty_isValid;

    m_interest_rate_isValid = ::OpenAPI::fromJsonValue(m_interest_rate, json[QString("interest_rate")]);
    m_interest_rate_isSet = !json[QString("interest_rate")].isNull() && m_interest_rate_isValid;

    m_last_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_last_payment_amount, json[QString("last_payment_amount")]);
    m_last_payment_amount_isSet = !json[QString("last_payment_amount")].isNull() && m_last_payment_amount_isValid;

    m_last_payment_date_isValid = ::OpenAPI::fromJsonValue(m_last_payment_date, json[QString("last_payment_date")]);
    m_last_payment_date_isSet = !json[QString("last_payment_date")].isNull() && m_last_payment_date_isValid;

    m_loan_term_isValid = ::OpenAPI::fromJsonValue(m_loan_term, json[QString("loan_term")]);
    m_loan_term_isSet = !json[QString("loan_term")].isNull() && m_loan_term_isValid;

    m_loan_type_description_isValid = ::OpenAPI::fromJsonValue(m_loan_type_description, json[QString("loan_type_description")]);
    m_loan_type_description_isSet = !json[QString("loan_type_description")].isNull() && m_loan_type_description_isValid;

    m_maturity_date_isValid = ::OpenAPI::fromJsonValue(m_maturity_date, json[QString("maturity_date")]);
    m_maturity_date_isSet = !json[QString("maturity_date")].isNull() && m_maturity_date_isValid;

    m_next_monthly_payment_isValid = ::OpenAPI::fromJsonValue(m_next_monthly_payment, json[QString("next_monthly_payment")]);
    m_next_monthly_payment_isSet = !json[QString("next_monthly_payment")].isNull() && m_next_monthly_payment_isValid;

    m_next_payment_due_date_isValid = ::OpenAPI::fromJsonValue(m_next_payment_due_date, json[QString("next_payment_due_date")]);
    m_next_payment_due_date_isSet = !json[QString("next_payment_due_date")].isNull() && m_next_payment_due_date_isValid;

    m_origination_date_isValid = ::OpenAPI::fromJsonValue(m_origination_date, json[QString("origination_date")]);
    m_origination_date_isSet = !json[QString("origination_date")].isNull() && m_origination_date_isValid;

    m_origination_principal_amount_isValid = ::OpenAPI::fromJsonValue(m_origination_principal_amount, json[QString("origination_principal_amount")]);
    m_origination_principal_amount_isSet = !json[QString("origination_principal_amount")].isNull() && m_origination_principal_amount_isValid;

    m_past_due_amount_isValid = ::OpenAPI::fromJsonValue(m_past_due_amount, json[QString("past_due_amount")]);
    m_past_due_amount_isSet = !json[QString("past_due_amount")].isNull() && m_past_due_amount_isValid;

    m_property_address_isValid = ::OpenAPI::fromJsonValue(m_property_address, json[QString("property_address")]);
    m_property_address_isSet = !json[QString("property_address")].isNull() && m_property_address_isValid;

    m_ytd_interest_paid_isValid = ::OpenAPI::fromJsonValue(m_ytd_interest_paid, json[QString("ytd_interest_paid")]);
    m_ytd_interest_paid_isSet = !json[QString("ytd_interest_paid")].isNull() && m_ytd_interest_paid_isValid;

    m_ytd_principal_paid_isValid = ::OpenAPI::fromJsonValue(m_ytd_principal_paid, json[QString("ytd_principal_paid")]);
    m_ytd_principal_paid_isSet = !json[QString("ytd_principal_paid")].isNull() && m_ytd_principal_paid_isValid;
}

QString OAIMortgageLiability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMortgageLiability::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_account_number_isSet) {
        obj.insert(QString("account_number"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_current_late_fee_isSet) {
        obj.insert(QString("current_late_fee"), ::OpenAPI::toJsonValue(m_current_late_fee));
    }
    if (m_escrow_balance_isSet) {
        obj.insert(QString("escrow_balance"), ::OpenAPI::toJsonValue(m_escrow_balance));
    }
    if (m_has_pmi_isSet) {
        obj.insert(QString("has_pmi"), ::OpenAPI::toJsonValue(m_has_pmi));
    }
    if (m_has_prepayment_penalty_isSet) {
        obj.insert(QString("has_prepayment_penalty"), ::OpenAPI::toJsonValue(m_has_prepayment_penalty));
    }
    if (m_interest_rate.isSet()) {
        obj.insert(QString("interest_rate"), ::OpenAPI::toJsonValue(m_interest_rate));
    }
    if (m_last_payment_amount_isSet) {
        obj.insert(QString("last_payment_amount"), ::OpenAPI::toJsonValue(m_last_payment_amount));
    }
    if (m_last_payment_date_isSet) {
        obj.insert(QString("last_payment_date"), ::OpenAPI::toJsonValue(m_last_payment_date));
    }
    if (m_loan_term_isSet) {
        obj.insert(QString("loan_term"), ::OpenAPI::toJsonValue(m_loan_term));
    }
    if (m_loan_type_description_isSet) {
        obj.insert(QString("loan_type_description"), ::OpenAPI::toJsonValue(m_loan_type_description));
    }
    if (m_maturity_date_isSet) {
        obj.insert(QString("maturity_date"), ::OpenAPI::toJsonValue(m_maturity_date));
    }
    if (m_next_monthly_payment_isSet) {
        obj.insert(QString("next_monthly_payment"), ::OpenAPI::toJsonValue(m_next_monthly_payment));
    }
    if (m_next_payment_due_date_isSet) {
        obj.insert(QString("next_payment_due_date"), ::OpenAPI::toJsonValue(m_next_payment_due_date));
    }
    if (m_origination_date_isSet) {
        obj.insert(QString("origination_date"), ::OpenAPI::toJsonValue(m_origination_date));
    }
    if (m_origination_principal_amount_isSet) {
        obj.insert(QString("origination_principal_amount"), ::OpenAPI::toJsonValue(m_origination_principal_amount));
    }
    if (m_past_due_amount_isSet) {
        obj.insert(QString("past_due_amount"), ::OpenAPI::toJsonValue(m_past_due_amount));
    }
    if (m_property_address.isSet()) {
        obj.insert(QString("property_address"), ::OpenAPI::toJsonValue(m_property_address));
    }
    if (m_ytd_interest_paid_isSet) {
        obj.insert(QString("ytd_interest_paid"), ::OpenAPI::toJsonValue(m_ytd_interest_paid));
    }
    if (m_ytd_principal_paid_isSet) {
        obj.insert(QString("ytd_principal_paid"), ::OpenAPI::toJsonValue(m_ytd_principal_paid));
    }
    return obj;
}

QString OAIMortgageLiability::getAccountId() const {
    return m_account_id;
}
void OAIMortgageLiability::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIMortgageLiability::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIMortgageLiability::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIMortgageLiability::getAccountNumber() const {
    return m_account_number;
}
void OAIMortgageLiability::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIMortgageLiability::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIMortgageLiability::is_account_number_Valid() const{
    return m_account_number_isValid;
}

double OAIMortgageLiability::getCurrentLateFee() const {
    return m_current_late_fee;
}
void OAIMortgageLiability::setCurrentLateFee(const double &current_late_fee) {
    m_current_late_fee = current_late_fee;
    m_current_late_fee_isSet = true;
}

bool OAIMortgageLiability::is_current_late_fee_Set() const{
    return m_current_late_fee_isSet;
}

bool OAIMortgageLiability::is_current_late_fee_Valid() const{
    return m_current_late_fee_isValid;
}

double OAIMortgageLiability::getEscrowBalance() const {
    return m_escrow_balance;
}
void OAIMortgageLiability::setEscrowBalance(const double &escrow_balance) {
    m_escrow_balance = escrow_balance;
    m_escrow_balance_isSet = true;
}

bool OAIMortgageLiability::is_escrow_balance_Set() const{
    return m_escrow_balance_isSet;
}

bool OAIMortgageLiability::is_escrow_balance_Valid() const{
    return m_escrow_balance_isValid;
}

bool OAIMortgageLiability::isHasPmi() const {
    return m_has_pmi;
}
void OAIMortgageLiability::setHasPmi(const bool &has_pmi) {
    m_has_pmi = has_pmi;
    m_has_pmi_isSet = true;
}

bool OAIMortgageLiability::is_has_pmi_Set() const{
    return m_has_pmi_isSet;
}

bool OAIMortgageLiability::is_has_pmi_Valid() const{
    return m_has_pmi_isValid;
}

bool OAIMortgageLiability::isHasPrepaymentPenalty() const {
    return m_has_prepayment_penalty;
}
void OAIMortgageLiability::setHasPrepaymentPenalty(const bool &has_prepayment_penalty) {
    m_has_prepayment_penalty = has_prepayment_penalty;
    m_has_prepayment_penalty_isSet = true;
}

bool OAIMortgageLiability::is_has_prepayment_penalty_Set() const{
    return m_has_prepayment_penalty_isSet;
}

bool OAIMortgageLiability::is_has_prepayment_penalty_Valid() const{
    return m_has_prepayment_penalty_isValid;
}

OAIMortgageInterestRate OAIMortgageLiability::getInterestRate() const {
    return m_interest_rate;
}
void OAIMortgageLiability::setInterestRate(const OAIMortgageInterestRate &interest_rate) {
    m_interest_rate = interest_rate;
    m_interest_rate_isSet = true;
}

bool OAIMortgageLiability::is_interest_rate_Set() const{
    return m_interest_rate_isSet;
}

bool OAIMortgageLiability::is_interest_rate_Valid() const{
    return m_interest_rate_isValid;
}

double OAIMortgageLiability::getLastPaymentAmount() const {
    return m_last_payment_amount;
}
void OAIMortgageLiability::setLastPaymentAmount(const double &last_payment_amount) {
    m_last_payment_amount = last_payment_amount;
    m_last_payment_amount_isSet = true;
}

bool OAIMortgageLiability::is_last_payment_amount_Set() const{
    return m_last_payment_amount_isSet;
}

bool OAIMortgageLiability::is_last_payment_amount_Valid() const{
    return m_last_payment_amount_isValid;
}

QDate OAIMortgageLiability::getLastPaymentDate() const {
    return m_last_payment_date;
}
void OAIMortgageLiability::setLastPaymentDate(const QDate &last_payment_date) {
    m_last_payment_date = last_payment_date;
    m_last_payment_date_isSet = true;
}

bool OAIMortgageLiability::is_last_payment_date_Set() const{
    return m_last_payment_date_isSet;
}

bool OAIMortgageLiability::is_last_payment_date_Valid() const{
    return m_last_payment_date_isValid;
}

QString OAIMortgageLiability::getLoanTerm() const {
    return m_loan_term;
}
void OAIMortgageLiability::setLoanTerm(const QString &loan_term) {
    m_loan_term = loan_term;
    m_loan_term_isSet = true;
}

bool OAIMortgageLiability::is_loan_term_Set() const{
    return m_loan_term_isSet;
}

bool OAIMortgageLiability::is_loan_term_Valid() const{
    return m_loan_term_isValid;
}

QString OAIMortgageLiability::getLoanTypeDescription() const {
    return m_loan_type_description;
}
void OAIMortgageLiability::setLoanTypeDescription(const QString &loan_type_description) {
    m_loan_type_description = loan_type_description;
    m_loan_type_description_isSet = true;
}

bool OAIMortgageLiability::is_loan_type_description_Set() const{
    return m_loan_type_description_isSet;
}

bool OAIMortgageLiability::is_loan_type_description_Valid() const{
    return m_loan_type_description_isValid;
}

QDate OAIMortgageLiability::getMaturityDate() const {
    return m_maturity_date;
}
void OAIMortgageLiability::setMaturityDate(const QDate &maturity_date) {
    m_maturity_date = maturity_date;
    m_maturity_date_isSet = true;
}

bool OAIMortgageLiability::is_maturity_date_Set() const{
    return m_maturity_date_isSet;
}

bool OAIMortgageLiability::is_maturity_date_Valid() const{
    return m_maturity_date_isValid;
}

double OAIMortgageLiability::getNextMonthlyPayment() const {
    return m_next_monthly_payment;
}
void OAIMortgageLiability::setNextMonthlyPayment(const double &next_monthly_payment) {
    m_next_monthly_payment = next_monthly_payment;
    m_next_monthly_payment_isSet = true;
}

bool OAIMortgageLiability::is_next_monthly_payment_Set() const{
    return m_next_monthly_payment_isSet;
}

bool OAIMortgageLiability::is_next_monthly_payment_Valid() const{
    return m_next_monthly_payment_isValid;
}

QDate OAIMortgageLiability::getNextPaymentDueDate() const {
    return m_next_payment_due_date;
}
void OAIMortgageLiability::setNextPaymentDueDate(const QDate &next_payment_due_date) {
    m_next_payment_due_date = next_payment_due_date;
    m_next_payment_due_date_isSet = true;
}

bool OAIMortgageLiability::is_next_payment_due_date_Set() const{
    return m_next_payment_due_date_isSet;
}

bool OAIMortgageLiability::is_next_payment_due_date_Valid() const{
    return m_next_payment_due_date_isValid;
}

QDate OAIMortgageLiability::getOriginationDate() const {
    return m_origination_date;
}
void OAIMortgageLiability::setOriginationDate(const QDate &origination_date) {
    m_origination_date = origination_date;
    m_origination_date_isSet = true;
}

bool OAIMortgageLiability::is_origination_date_Set() const{
    return m_origination_date_isSet;
}

bool OAIMortgageLiability::is_origination_date_Valid() const{
    return m_origination_date_isValid;
}

double OAIMortgageLiability::getOriginationPrincipalAmount() const {
    return m_origination_principal_amount;
}
void OAIMortgageLiability::setOriginationPrincipalAmount(const double &origination_principal_amount) {
    m_origination_principal_amount = origination_principal_amount;
    m_origination_principal_amount_isSet = true;
}

bool OAIMortgageLiability::is_origination_principal_amount_Set() const{
    return m_origination_principal_amount_isSet;
}

bool OAIMortgageLiability::is_origination_principal_amount_Valid() const{
    return m_origination_principal_amount_isValid;
}

double OAIMortgageLiability::getPastDueAmount() const {
    return m_past_due_amount;
}
void OAIMortgageLiability::setPastDueAmount(const double &past_due_amount) {
    m_past_due_amount = past_due_amount;
    m_past_due_amount_isSet = true;
}

bool OAIMortgageLiability::is_past_due_amount_Set() const{
    return m_past_due_amount_isSet;
}

bool OAIMortgageLiability::is_past_due_amount_Valid() const{
    return m_past_due_amount_isValid;
}

OAIMortgagePropertyAddress OAIMortgageLiability::getPropertyAddress() const {
    return m_property_address;
}
void OAIMortgageLiability::setPropertyAddress(const OAIMortgagePropertyAddress &property_address) {
    m_property_address = property_address;
    m_property_address_isSet = true;
}

bool OAIMortgageLiability::is_property_address_Set() const{
    return m_property_address_isSet;
}

bool OAIMortgageLiability::is_property_address_Valid() const{
    return m_property_address_isValid;
}

double OAIMortgageLiability::getYtdInterestPaid() const {
    return m_ytd_interest_paid;
}
void OAIMortgageLiability::setYtdInterestPaid(const double &ytd_interest_paid) {
    m_ytd_interest_paid = ytd_interest_paid;
    m_ytd_interest_paid_isSet = true;
}

bool OAIMortgageLiability::is_ytd_interest_paid_Set() const{
    return m_ytd_interest_paid_isSet;
}

bool OAIMortgageLiability::is_ytd_interest_paid_Valid() const{
    return m_ytd_interest_paid_isValid;
}

double OAIMortgageLiability::getYtdPrincipalPaid() const {
    return m_ytd_principal_paid;
}
void OAIMortgageLiability::setYtdPrincipalPaid(const double &ytd_principal_paid) {
    m_ytd_principal_paid = ytd_principal_paid;
    m_ytd_principal_paid_isSet = true;
}

bool OAIMortgageLiability::is_ytd_principal_paid_Set() const{
    return m_ytd_principal_paid_isSet;
}

bool OAIMortgageLiability::is_ytd_principal_paid_Valid() const{
    return m_ytd_principal_paid_isValid;
}

bool OAIMortgageLiability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_late_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_escrow_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_pmi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_prepayment_penalty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_payment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_type_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maturity_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_monthly_payment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_payment_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origination_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origination_principal_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_past_due_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ytd_interest_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ytd_principal_paid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMortgageLiability::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_account_number_isValid && m_current_late_fee_isValid && m_escrow_balance_isValid && m_has_pmi_isValid && m_has_prepayment_penalty_isValid && m_interest_rate_isValid && m_last_payment_amount_isValid && m_last_payment_date_isValid && m_loan_term_isValid && m_loan_type_description_isValid && m_maturity_date_isValid && m_next_monthly_payment_isValid && m_next_payment_due_date_isValid && m_origination_date_isValid && m_origination_principal_amount_isValid && m_past_due_amount_isValid && m_property_address_isValid && m_ytd_interest_paid_isValid && m_ytd_principal_paid_isValid && true;
}

} // namespace OpenAPI
