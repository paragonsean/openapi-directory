/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWatchlistScreeningAuditTrail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWatchlistScreeningAuditTrail::OAIWatchlistScreeningAuditTrail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWatchlistScreeningAuditTrail::OAIWatchlistScreeningAuditTrail() {
    this->initializeModel();
}

OAIWatchlistScreeningAuditTrail::~OAIWatchlistScreeningAuditTrail() {}

void OAIWatchlistScreeningAuditTrail::initializeModel() {

    m_dashboard_user_id_isSet = false;
    m_dashboard_user_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIWatchlistScreeningAuditTrail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWatchlistScreeningAuditTrail::fromJsonObject(QJsonObject json) {

    m_dashboard_user_id_isValid = ::OpenAPI::fromJsonValue(m_dashboard_user_id, json[QString("dashboard_user_id")]);
    m_dashboard_user_id_isSet = !json[QString("dashboard_user_id")].isNull() && m_dashboard_user_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIWatchlistScreeningAuditTrail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWatchlistScreeningAuditTrail::asJsonObject() const {
    QJsonObject obj;
    if (m_dashboard_user_id_isSet) {
        obj.insert(QString("dashboard_user_id"), ::OpenAPI::toJsonValue(m_dashboard_user_id));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIWatchlistScreeningAuditTrail::getDashboardUserId() const {
    return m_dashboard_user_id;
}
void OAIWatchlistScreeningAuditTrail::setDashboardUserId(const QString &dashboard_user_id) {
    m_dashboard_user_id = dashboard_user_id;
    m_dashboard_user_id_isSet = true;
}

bool OAIWatchlistScreeningAuditTrail::is_dashboard_user_id_Set() const{
    return m_dashboard_user_id_isSet;
}

bool OAIWatchlistScreeningAuditTrail::is_dashboard_user_id_Valid() const{
    return m_dashboard_user_id_isValid;
}

OAISource OAIWatchlistScreeningAuditTrail::getSource() const {
    return m_source;
}
void OAIWatchlistScreeningAuditTrail::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIWatchlistScreeningAuditTrail::is_source_Set() const{
    return m_source_isSet;
}

bool OAIWatchlistScreeningAuditTrail::is_source_Valid() const{
    return m_source_isValid;
}

QDateTime OAIWatchlistScreeningAuditTrail::getTimestamp() const {
    return m_timestamp;
}
void OAIWatchlistScreeningAuditTrail::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIWatchlistScreeningAuditTrail::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIWatchlistScreeningAuditTrail::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIWatchlistScreeningAuditTrail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dashboard_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWatchlistScreeningAuditTrail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dashboard_user_id_isValid && m_source_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
