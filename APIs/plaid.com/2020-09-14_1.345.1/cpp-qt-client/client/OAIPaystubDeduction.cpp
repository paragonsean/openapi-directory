/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaystubDeduction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaystubDeduction::OAIPaystubDeduction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaystubDeduction::OAIPaystubDeduction() {
    this->initializeModel();
}

OAIPaystubDeduction::~OAIPaystubDeduction() {}

void OAIPaystubDeduction::initializeModel() {

    m_is_pretax_isSet = false;
    m_is_pretax_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPaystubDeduction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaystubDeduction::fromJsonObject(QJsonObject json) {

    m_is_pretax_isValid = ::OpenAPI::fromJsonValue(m_is_pretax, json[QString("is_pretax")]);
    m_is_pretax_isSet = !json[QString("is_pretax")].isNull() && m_is_pretax_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPaystubDeduction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaystubDeduction::asJsonObject() const {
    QJsonObject obj;
    if (m_is_pretax_isSet) {
        obj.insert(QString("is_pretax"), ::OpenAPI::toJsonValue(m_is_pretax));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIPaystubDeduction::isIsPretax() const {
    return m_is_pretax;
}
void OAIPaystubDeduction::setIsPretax(const bool &is_pretax) {
    m_is_pretax = is_pretax;
    m_is_pretax_isSet = true;
}

bool OAIPaystubDeduction::is_is_pretax_Set() const{
    return m_is_pretax_isSet;
}

bool OAIPaystubDeduction::is_is_pretax_Valid() const{
    return m_is_pretax_isValid;
}

double OAIPaystubDeduction::getTotal() const {
    return m_total;
}
void OAIPaystubDeduction::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPaystubDeduction::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPaystubDeduction::is_total_Valid() const{
    return m_total_isValid;
}

QString OAIPaystubDeduction::getType() const {
    return m_type;
}
void OAIPaystubDeduction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPaystubDeduction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPaystubDeduction::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPaystubDeduction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_pretax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaystubDeduction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_pretax_isValid && m_total_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
