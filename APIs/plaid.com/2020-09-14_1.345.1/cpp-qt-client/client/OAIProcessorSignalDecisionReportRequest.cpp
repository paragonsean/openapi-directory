/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcessorSignalDecisionReportRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcessorSignalDecisionReportRequest::OAIProcessorSignalDecisionReportRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcessorSignalDecisionReportRequest::OAIProcessorSignalDecisionReportRequest() {
    this->initializeModel();
}

OAIProcessorSignalDecisionReportRequest::~OAIProcessorSignalDecisionReportRequest() {}

void OAIProcessorSignalDecisionReportRequest::initializeModel() {

    m_amount_instantly_available_isSet = false;
    m_amount_instantly_available_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_transaction_id_isSet = false;
    m_client_transaction_id_isValid = false;

    m_days_funds_on_hold_isSet = false;
    m_days_funds_on_hold_isValid = false;

    m_decision_outcome_isSet = false;
    m_decision_outcome_isValid = false;

    m_initiated_isSet = false;
    m_initiated_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_processor_token_isSet = false;
    m_processor_token_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;
}

void OAIProcessorSignalDecisionReportRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProcessorSignalDecisionReportRequest::fromJsonObject(QJsonObject json) {

    m_amount_instantly_available_isValid = ::OpenAPI::fromJsonValue(m_amount_instantly_available, json[QString("amount_instantly_available")]);
    m_amount_instantly_available_isSet = !json[QString("amount_instantly_available")].isNull() && m_amount_instantly_available_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_client_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_client_transaction_id, json[QString("client_transaction_id")]);
    m_client_transaction_id_isSet = !json[QString("client_transaction_id")].isNull() && m_client_transaction_id_isValid;

    m_days_funds_on_hold_isValid = ::OpenAPI::fromJsonValue(m_days_funds_on_hold, json[QString("days_funds_on_hold")]);
    m_days_funds_on_hold_isSet = !json[QString("days_funds_on_hold")].isNull() && m_days_funds_on_hold_isValid;

    m_decision_outcome_isValid = ::OpenAPI::fromJsonValue(m_decision_outcome, json[QString("decision_outcome")]);
    m_decision_outcome_isSet = !json[QString("decision_outcome")].isNull() && m_decision_outcome_isValid;

    m_initiated_isValid = ::OpenAPI::fromJsonValue(m_initiated, json[QString("initiated")]);
    m_initiated_isSet = !json[QString("initiated")].isNull() && m_initiated_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("payment_method")]);
    m_payment_method_isSet = !json[QString("payment_method")].isNull() && m_payment_method_isValid;

    m_processor_token_isValid = ::OpenAPI::fromJsonValue(m_processor_token, json[QString("processor_token")]);
    m_processor_token_isSet = !json[QString("processor_token")].isNull() && m_processor_token_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;
}

QString OAIProcessorSignalDecisionReportRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProcessorSignalDecisionReportRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_instantly_available_isSet) {
        obj.insert(QString("amount_instantly_available"), ::OpenAPI::toJsonValue(m_amount_instantly_available));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_transaction_id_isSet) {
        obj.insert(QString("client_transaction_id"), ::OpenAPI::toJsonValue(m_client_transaction_id));
    }
    if (m_days_funds_on_hold_isSet) {
        obj.insert(QString("days_funds_on_hold"), ::OpenAPI::toJsonValue(m_days_funds_on_hold));
    }
    if (m_decision_outcome.isSet()) {
        obj.insert(QString("decision_outcome"), ::OpenAPI::toJsonValue(m_decision_outcome));
    }
    if (m_initiated_isSet) {
        obj.insert(QString("initiated"), ::OpenAPI::toJsonValue(m_initiated));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("payment_method"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_processor_token_isSet) {
        obj.insert(QString("processor_token"), ::OpenAPI::toJsonValue(m_processor_token));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    return obj;
}

double OAIProcessorSignalDecisionReportRequest::getAmountInstantlyAvailable() const {
    return m_amount_instantly_available;
}
void OAIProcessorSignalDecisionReportRequest::setAmountInstantlyAvailable(const double &amount_instantly_available) {
    m_amount_instantly_available = amount_instantly_available;
    m_amount_instantly_available_isSet = true;
}

bool OAIProcessorSignalDecisionReportRequest::is_amount_instantly_available_Set() const{
    return m_amount_instantly_available_isSet;
}

bool OAIProcessorSignalDecisionReportRequest::is_amount_instantly_available_Valid() const{
    return m_amount_instantly_available_isValid;
}

QString OAIProcessorSignalDecisionReportRequest::getClientId() const {
    return m_client_id;
}
void OAIProcessorSignalDecisionReportRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIProcessorSignalDecisionReportRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIProcessorSignalDecisionReportRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIProcessorSignalDecisionReportRequest::getClientTransactionId() const {
    return m_client_transaction_id;
}
void OAIProcessorSignalDecisionReportRequest::setClientTransactionId(const QString &client_transaction_id) {
    m_client_transaction_id = client_transaction_id;
    m_client_transaction_id_isSet = true;
}

bool OAIProcessorSignalDecisionReportRequest::is_client_transaction_id_Set() const{
    return m_client_transaction_id_isSet;
}

bool OAIProcessorSignalDecisionReportRequest::is_client_transaction_id_Valid() const{
    return m_client_transaction_id_isValid;
}

qint32 OAIProcessorSignalDecisionReportRequest::getDaysFundsOnHold() const {
    return m_days_funds_on_hold;
}
void OAIProcessorSignalDecisionReportRequest::setDaysFundsOnHold(const qint32 &days_funds_on_hold) {
    m_days_funds_on_hold = days_funds_on_hold;
    m_days_funds_on_hold_isSet = true;
}

bool OAIProcessorSignalDecisionReportRequest::is_days_funds_on_hold_Set() const{
    return m_days_funds_on_hold_isSet;
}

bool OAIProcessorSignalDecisionReportRequest::is_days_funds_on_hold_Valid() const{
    return m_days_funds_on_hold_isValid;
}

OAISignalDecisionOutcome OAIProcessorSignalDecisionReportRequest::getDecisionOutcome() const {
    return m_decision_outcome;
}
void OAIProcessorSignalDecisionReportRequest::setDecisionOutcome(const OAISignalDecisionOutcome &decision_outcome) {
    m_decision_outcome = decision_outcome;
    m_decision_outcome_isSet = true;
}

bool OAIProcessorSignalDecisionReportRequest::is_decision_outcome_Set() const{
    return m_decision_outcome_isSet;
}

bool OAIProcessorSignalDecisionReportRequest::is_decision_outcome_Valid() const{
    return m_decision_outcome_isValid;
}

bool OAIProcessorSignalDecisionReportRequest::isInitiated() const {
    return m_initiated;
}
void OAIProcessorSignalDecisionReportRequest::setInitiated(const bool &initiated) {
    m_initiated = initiated;
    m_initiated_isSet = true;
}

bool OAIProcessorSignalDecisionReportRequest::is_initiated_Set() const{
    return m_initiated_isSet;
}

bool OAIProcessorSignalDecisionReportRequest::is_initiated_Valid() const{
    return m_initiated_isValid;
}

OAISignalPaymentMethod OAIProcessorSignalDecisionReportRequest::getPaymentMethod() const {
    return m_payment_method;
}
void OAIProcessorSignalDecisionReportRequest::setPaymentMethod(const OAISignalPaymentMethod &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIProcessorSignalDecisionReportRequest::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIProcessorSignalDecisionReportRequest::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAIProcessorSignalDecisionReportRequest::getProcessorToken() const {
    return m_processor_token;
}
void OAIProcessorSignalDecisionReportRequest::setProcessorToken(const QString &processor_token) {
    m_processor_token = processor_token;
    m_processor_token_isSet = true;
}

bool OAIProcessorSignalDecisionReportRequest::is_processor_token_Set() const{
    return m_processor_token_isSet;
}

bool OAIProcessorSignalDecisionReportRequest::is_processor_token_Valid() const{
    return m_processor_token_isValid;
}

QString OAIProcessorSignalDecisionReportRequest::getSecret() const {
    return m_secret;
}
void OAIProcessorSignalDecisionReportRequest::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIProcessorSignalDecisionReportRequest::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIProcessorSignalDecisionReportRequest::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAIProcessorSignalDecisionReportRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_instantly_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_funds_on_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision_outcome.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processor_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProcessorSignalDecisionReportRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_transaction_id_isValid && m_initiated_isValid && m_processor_token_isValid && true;
}

} // namespace OpenAPI
