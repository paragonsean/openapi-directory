/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentRiskSignal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentRiskSignal::OAIDocumentRiskSignal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentRiskSignal::OAIDocumentRiskSignal() {
    this->initializeModel();
}

OAIDocumentRiskSignal::~OAIDocumentRiskSignal() {}

void OAIDocumentRiskSignal::initializeModel() {

    m_actual_value_isSet = false;
    m_actual_value_isValid = false;

    m_expected_value_isSet = false;
    m_expected_value_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_has_fraud_risk_isSet = false;
    m_has_fraud_risk_isValid = false;

    m_institution_metadata_isSet = false;
    m_institution_metadata_isValid = false;

    m_page_number_isSet = false;
    m_page_number_isValid = false;

    m_signal_description_isSet = false;
    m_signal_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDocumentRiskSignal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentRiskSignal::fromJsonObject(QJsonObject json) {

    m_actual_value_isValid = ::OpenAPI::fromJsonValue(m_actual_value, json[QString("actual_value")]);
    m_actual_value_isSet = !json[QString("actual_value")].isNull() && m_actual_value_isValid;

    m_expected_value_isValid = ::OpenAPI::fromJsonValue(m_expected_value, json[QString("expected_value")]);
    m_expected_value_isSet = !json[QString("expected_value")].isNull() && m_expected_value_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_has_fraud_risk_isValid = ::OpenAPI::fromJsonValue(m_has_fraud_risk, json[QString("has_fraud_risk")]);
    m_has_fraud_risk_isSet = !json[QString("has_fraud_risk")].isNull() && m_has_fraud_risk_isValid;

    m_institution_metadata_isValid = ::OpenAPI::fromJsonValue(m_institution_metadata, json[QString("institution_metadata")]);
    m_institution_metadata_isSet = !json[QString("institution_metadata")].isNull() && m_institution_metadata_isValid;

    m_page_number_isValid = ::OpenAPI::fromJsonValue(m_page_number, json[QString("page_number")]);
    m_page_number_isSet = !json[QString("page_number")].isNull() && m_page_number_isValid;

    m_signal_description_isValid = ::OpenAPI::fromJsonValue(m_signal_description, json[QString("signal_description")]);
    m_signal_description_isSet = !json[QString("signal_description")].isNull() && m_signal_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDocumentRiskSignal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentRiskSignal::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_value_isSet) {
        obj.insert(QString("actual_value"), ::OpenAPI::toJsonValue(m_actual_value));
    }
    if (m_expected_value_isSet) {
        obj.insert(QString("expected_value"), ::OpenAPI::toJsonValue(m_expected_value));
    }
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_has_fraud_risk_isSet) {
        obj.insert(QString("has_fraud_risk"), ::OpenAPI::toJsonValue(m_has_fraud_risk));
    }
    if (m_institution_metadata.isSet()) {
        obj.insert(QString("institution_metadata"), ::OpenAPI::toJsonValue(m_institution_metadata));
    }
    if (m_page_number_isSet) {
        obj.insert(QString("page_number"), ::OpenAPI::toJsonValue(m_page_number));
    }
    if (m_signal_description_isSet) {
        obj.insert(QString("signal_description"), ::OpenAPI::toJsonValue(m_signal_description));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDocumentRiskSignal::getActualValue() const {
    return m_actual_value;
}
void OAIDocumentRiskSignal::setActualValue(const QString &actual_value) {
    m_actual_value = actual_value;
    m_actual_value_isSet = true;
}

bool OAIDocumentRiskSignal::is_actual_value_Set() const{
    return m_actual_value_isSet;
}

bool OAIDocumentRiskSignal::is_actual_value_Valid() const{
    return m_actual_value_isValid;
}

QString OAIDocumentRiskSignal::getExpectedValue() const {
    return m_expected_value;
}
void OAIDocumentRiskSignal::setExpectedValue(const QString &expected_value) {
    m_expected_value = expected_value;
    m_expected_value_isSet = true;
}

bool OAIDocumentRiskSignal::is_expected_value_Set() const{
    return m_expected_value_isSet;
}

bool OAIDocumentRiskSignal::is_expected_value_Valid() const{
    return m_expected_value_isValid;
}

QString OAIDocumentRiskSignal::getField() const {
    return m_field;
}
void OAIDocumentRiskSignal::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIDocumentRiskSignal::is_field_Set() const{
    return m_field_isSet;
}

bool OAIDocumentRiskSignal::is_field_Valid() const{
    return m_field_isValid;
}

bool OAIDocumentRiskSignal::isHasFraudRisk() const {
    return m_has_fraud_risk;
}
void OAIDocumentRiskSignal::setHasFraudRisk(const bool &has_fraud_risk) {
    m_has_fraud_risk = has_fraud_risk;
    m_has_fraud_risk_isSet = true;
}

bool OAIDocumentRiskSignal::is_has_fraud_risk_Set() const{
    return m_has_fraud_risk_isSet;
}

bool OAIDocumentRiskSignal::is_has_fraud_risk_Valid() const{
    return m_has_fraud_risk_isValid;
}

OAIDocumentRiskSignalInstitutionMetadata OAIDocumentRiskSignal::getInstitutionMetadata() const {
    return m_institution_metadata;
}
void OAIDocumentRiskSignal::setInstitutionMetadata(const OAIDocumentRiskSignalInstitutionMetadata &institution_metadata) {
    m_institution_metadata = institution_metadata;
    m_institution_metadata_isSet = true;
}

bool OAIDocumentRiskSignal::is_institution_metadata_Set() const{
    return m_institution_metadata_isSet;
}

bool OAIDocumentRiskSignal::is_institution_metadata_Valid() const{
    return m_institution_metadata_isValid;
}

qint32 OAIDocumentRiskSignal::getPageNumber() const {
    return m_page_number;
}
void OAIDocumentRiskSignal::setPageNumber(const qint32 &page_number) {
    m_page_number = page_number;
    m_page_number_isSet = true;
}

bool OAIDocumentRiskSignal::is_page_number_Set() const{
    return m_page_number_isSet;
}

bool OAIDocumentRiskSignal::is_page_number_Valid() const{
    return m_page_number_isValid;
}

QString OAIDocumentRiskSignal::getSignalDescription() const {
    return m_signal_description;
}
void OAIDocumentRiskSignal::setSignalDescription(const QString &signal_description) {
    m_signal_description = signal_description;
    m_signal_description_isSet = true;
}

bool OAIDocumentRiskSignal::is_signal_description_Set() const{
    return m_signal_description_isSet;
}

bool OAIDocumentRiskSignal::is_signal_description_Valid() const{
    return m_signal_description_isValid;
}

QString OAIDocumentRiskSignal::getType() const {
    return m_type;
}
void OAIDocumentRiskSignal::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDocumentRiskSignal::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDocumentRiskSignal::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDocumentRiskSignal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_fraud_risk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentRiskSignal::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_actual_value_isValid && m_expected_value_isValid && m_field_isValid && m_has_fraud_risk_isValid && m_institution_metadata_isValid && m_page_number_isValid && m_signal_description_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
