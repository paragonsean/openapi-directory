/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMFA.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMFA::OAIMFA(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMFA::OAIMFA() {
    this->initializeModel();
}

OAIMFA::~OAIMFA() {}

void OAIMFA::initializeModel() {

    m_question_rounds_isSet = false;
    m_question_rounds_isValid = false;

    m_questions_per_round_isSet = false;
    m_questions_per_round_isValid = false;

    m_selection_rounds_isSet = false;
    m_selection_rounds_isValid = false;

    m_selections_per_question_isSet = false;
    m_selections_per_question_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMFA::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMFA::fromJsonObject(QJsonObject json) {

    m_question_rounds_isValid = ::OpenAPI::fromJsonValue(m_question_rounds, json[QString("question_rounds")]);
    m_question_rounds_isSet = !json[QString("question_rounds")].isNull() && m_question_rounds_isValid;

    m_questions_per_round_isValid = ::OpenAPI::fromJsonValue(m_questions_per_round, json[QString("questions_per_round")]);
    m_questions_per_round_isSet = !json[QString("questions_per_round")].isNull() && m_questions_per_round_isValid;

    m_selection_rounds_isValid = ::OpenAPI::fromJsonValue(m_selection_rounds, json[QString("selection_rounds")]);
    m_selection_rounds_isSet = !json[QString("selection_rounds")].isNull() && m_selection_rounds_isValid;

    m_selections_per_question_isValid = ::OpenAPI::fromJsonValue(m_selections_per_question, json[QString("selections_per_question")]);
    m_selections_per_question_isSet = !json[QString("selections_per_question")].isNull() && m_selections_per_question_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMFA::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMFA::asJsonObject() const {
    QJsonObject obj;
    if (m_question_rounds_isSet) {
        obj.insert(QString("question_rounds"), ::OpenAPI::toJsonValue(m_question_rounds));
    }
    if (m_questions_per_round_isSet) {
        obj.insert(QString("questions_per_round"), ::OpenAPI::toJsonValue(m_questions_per_round));
    }
    if (m_selection_rounds_isSet) {
        obj.insert(QString("selection_rounds"), ::OpenAPI::toJsonValue(m_selection_rounds));
    }
    if (m_selections_per_question_isSet) {
        obj.insert(QString("selections_per_question"), ::OpenAPI::toJsonValue(m_selections_per_question));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

double OAIMFA::getQuestionRounds() const {
    return m_question_rounds;
}
void OAIMFA::setQuestionRounds(const double &question_rounds) {
    m_question_rounds = question_rounds;
    m_question_rounds_isSet = true;
}

bool OAIMFA::is_question_rounds_Set() const{
    return m_question_rounds_isSet;
}

bool OAIMFA::is_question_rounds_Valid() const{
    return m_question_rounds_isValid;
}

double OAIMFA::getQuestionsPerRound() const {
    return m_questions_per_round;
}
void OAIMFA::setQuestionsPerRound(const double &questions_per_round) {
    m_questions_per_round = questions_per_round;
    m_questions_per_round_isSet = true;
}

bool OAIMFA::is_questions_per_round_Set() const{
    return m_questions_per_round_isSet;
}

bool OAIMFA::is_questions_per_round_Valid() const{
    return m_questions_per_round_isValid;
}

double OAIMFA::getSelectionRounds() const {
    return m_selection_rounds;
}
void OAIMFA::setSelectionRounds(const double &selection_rounds) {
    m_selection_rounds = selection_rounds;
    m_selection_rounds_isSet = true;
}

bool OAIMFA::is_selection_rounds_Set() const{
    return m_selection_rounds_isSet;
}

bool OAIMFA::is_selection_rounds_Valid() const{
    return m_selection_rounds_isValid;
}

double OAIMFA::getSelectionsPerQuestion() const {
    return m_selections_per_question;
}
void OAIMFA::setSelectionsPerQuestion(const double &selections_per_question) {
    m_selections_per_question = selections_per_question;
    m_selections_per_question_isSet = true;
}

bool OAIMFA::is_selections_per_question_Set() const{
    return m_selections_per_question_isSet;
}

bool OAIMFA::is_selections_per_question_Valid() const{
    return m_selections_per_question_isValid;
}

QString OAIMFA::getType() const {
    return m_type;
}
void OAIMFA::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMFA::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMFA::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMFA::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_question_rounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_questions_per_round_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_rounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selections_per_question_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMFA::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_question_rounds_isValid && m_questions_per_round_isValid && m_selection_rounds_isValid && m_selections_per_question_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
