/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaidError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaidError::OAIPlaidError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaidError::OAIPlaidError() {
    this->initializeModel();
}

OAIPlaidError::~OAIPlaidError() {}

void OAIPlaidError::initializeModel() {

    m_causes_isSet = false;
    m_causes_isValid = false;

    m_display_message_isSet = false;
    m_display_message_isValid = false;

    m_documentation_url_isSet = false;
    m_documentation_url_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_suggested_action_isSet = false;
    m_suggested_action_isValid = false;
}

void OAIPlaidError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaidError::fromJsonObject(QJsonObject json) {

    m_causes_isValid = ::OpenAPI::fromJsonValue(m_causes, json[QString("causes")]);
    m_causes_isSet = !json[QString("causes")].isNull() && m_causes_isValid;

    m_display_message_isValid = ::OpenAPI::fromJsonValue(m_display_message, json[QString("display_message")]);
    m_display_message_isSet = !json[QString("display_message")].isNull() && m_display_message_isValid;

    m_documentation_url_isValid = ::OpenAPI::fromJsonValue(m_documentation_url, json[QString("documentation_url")]);
    m_documentation_url_isSet = !json[QString("documentation_url")].isNull() && m_documentation_url_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("error_code")]);
    m_error_code_isSet = !json[QString("error_code")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("error_type")]);
    m_error_type_isSet = !json[QString("error_type")].isNull() && m_error_type_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_suggested_action_isValid = ::OpenAPI::fromJsonValue(m_suggested_action, json[QString("suggested_action")]);
    m_suggested_action_isSet = !json[QString("suggested_action")].isNull() && m_suggested_action_isValid;
}

QString OAIPlaidError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaidError::asJsonObject() const {
    QJsonObject obj;
    if (m_causes.size() > 0) {
        obj.insert(QString("causes"), ::OpenAPI::toJsonValue(m_causes));
    }
    if (m_display_message_isSet) {
        obj.insert(QString("display_message"), ::OpenAPI::toJsonValue(m_display_message));
    }
    if (m_documentation_url_isSet) {
        obj.insert(QString("documentation_url"), ::OpenAPI::toJsonValue(m_documentation_url));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("error_code"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_type.isSet()) {
        obj.insert(QString("error_type"), ::OpenAPI::toJsonValue(m_error_type));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_suggested_action_isSet) {
        obj.insert(QString("suggested_action"), ::OpenAPI::toJsonValue(m_suggested_action));
    }
    return obj;
}

QList<QJsonValue> OAIPlaidError::getCauses() const {
    return m_causes;
}
void OAIPlaidError::setCauses(const QList<QJsonValue> &causes) {
    m_causes = causes;
    m_causes_isSet = true;
}

bool OAIPlaidError::is_causes_Set() const{
    return m_causes_isSet;
}

bool OAIPlaidError::is_causes_Valid() const{
    return m_causes_isValid;
}

QString OAIPlaidError::getDisplayMessage() const {
    return m_display_message;
}
void OAIPlaidError::setDisplayMessage(const QString &display_message) {
    m_display_message = display_message;
    m_display_message_isSet = true;
}

bool OAIPlaidError::is_display_message_Set() const{
    return m_display_message_isSet;
}

bool OAIPlaidError::is_display_message_Valid() const{
    return m_display_message_isValid;
}

QString OAIPlaidError::getDocumentationUrl() const {
    return m_documentation_url;
}
void OAIPlaidError::setDocumentationUrl(const QString &documentation_url) {
    m_documentation_url = documentation_url;
    m_documentation_url_isSet = true;
}

bool OAIPlaidError::is_documentation_url_Set() const{
    return m_documentation_url_isSet;
}

bool OAIPlaidError::is_documentation_url_Valid() const{
    return m_documentation_url_isValid;
}

QString OAIPlaidError::getErrorCode() const {
    return m_error_code;
}
void OAIPlaidError::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIPlaidError::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIPlaidError::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIPlaidError::getErrorMessage() const {
    return m_error_message;
}
void OAIPlaidError::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIPlaidError::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIPlaidError::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAIPlaidErrorType OAIPlaidError::getErrorType() const {
    return m_error_type;
}
void OAIPlaidError::setErrorType(const OAIPlaidErrorType &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAIPlaidError::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAIPlaidError::is_error_type_Valid() const{
    return m_error_type_isValid;
}

QString OAIPlaidError::getRequestId() const {
    return m_request_id;
}
void OAIPlaidError::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIPlaidError::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIPlaidError::is_request_id_Valid() const{
    return m_request_id_isValid;
}

double OAIPlaidError::getStatus() const {
    return m_status;
}
void OAIPlaidError::setStatus(const double &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPlaidError::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPlaidError::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPlaidError::getSuggestedAction() const {
    return m_suggested_action;
}
void OAIPlaidError::setSuggestedAction(const QString &suggested_action) {
    m_suggested_action = suggested_action;
    m_suggested_action_isSet = true;
}

bool OAIPlaidError::is_suggested_action_Set() const{
    return m_suggested_action_isSet;
}

bool OAIPlaidError::is_suggested_action_Valid() const{
    return m_suggested_action_isValid;
}

bool OAIPlaidError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_causes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_action_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaidError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_message_isValid && m_error_code_isValid && m_error_message_isValid && m_error_type_isValid && true;
}

} // namespace OpenAPI
