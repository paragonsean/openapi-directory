/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnrichments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnrichments::OAIEnrichments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnrichments::OAIEnrichments() {
    this->initializeModel();
}

OAIEnrichments::~OAIEnrichments() {}

void OAIEnrichments::initializeModel() {

    m_check_number_isSet = false;
    m_check_number_isValid = false;

    m_counterparties_isSet = false;
    m_counterparties_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_legacy_category_isSet = false;
    m_legacy_category_isValid = false;

    m_legacy_category_id_isSet = false;
    m_legacy_category_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_merchant_name_isSet = false;
    m_merchant_name_isValid = false;

    m_payment_channel_isSet = false;
    m_payment_channel_isValid = false;

    m_personal_finance_category_isSet = false;
    m_personal_finance_category_isValid = false;

    m_personal_finance_category_icon_url_isSet = false;
    m_personal_finance_category_icon_url_isValid = false;

    m_recurrence_isSet = false;
    m_recurrence_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIEnrichments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnrichments::fromJsonObject(QJsonObject json) {

    m_check_number_isValid = ::OpenAPI::fromJsonValue(m_check_number, json[QString("check_number")]);
    m_check_number_isSet = !json[QString("check_number")].isNull() && m_check_number_isValid;

    m_counterparties_isValid = ::OpenAPI::fromJsonValue(m_counterparties, json[QString("counterparties")]);
    m_counterparties_isSet = !json[QString("counterparties")].isNull() && m_counterparties_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_legacy_category_isValid = ::OpenAPI::fromJsonValue(m_legacy_category, json[QString("legacy_category")]);
    m_legacy_category_isSet = !json[QString("legacy_category")].isNull() && m_legacy_category_isValid;

    m_legacy_category_id_isValid = ::OpenAPI::fromJsonValue(m_legacy_category_id, json[QString("legacy_category_id")]);
    m_legacy_category_id_isSet = !json[QString("legacy_category_id")].isNull() && m_legacy_category_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logo_url")]);
    m_logo_url_isSet = !json[QString("logo_url")].isNull() && m_logo_url_isValid;

    m_merchant_name_isValid = ::OpenAPI::fromJsonValue(m_merchant_name, json[QString("merchant_name")]);
    m_merchant_name_isSet = !json[QString("merchant_name")].isNull() && m_merchant_name_isValid;

    m_payment_channel_isValid = ::OpenAPI::fromJsonValue(m_payment_channel, json[QString("payment_channel")]);
    m_payment_channel_isSet = !json[QString("payment_channel")].isNull() && m_payment_channel_isValid;

    m_personal_finance_category_isValid = ::OpenAPI::fromJsonValue(m_personal_finance_category, json[QString("personal_finance_category")]);
    m_personal_finance_category_isSet = !json[QString("personal_finance_category")].isNull() && m_personal_finance_category_isValid;

    m_personal_finance_category_icon_url_isValid = ::OpenAPI::fromJsonValue(m_personal_finance_category_icon_url, json[QString("personal_finance_category_icon_url")]);
    m_personal_finance_category_icon_url_isSet = !json[QString("personal_finance_category_icon_url")].isNull() && m_personal_finance_category_icon_url_isValid;

    m_recurrence_isValid = ::OpenAPI::fromJsonValue(m_recurrence, json[QString("recurrence")]);
    m_recurrence_isSet = !json[QString("recurrence")].isNull() && m_recurrence_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIEnrichments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnrichments::asJsonObject() const {
    QJsonObject obj;
    if (m_check_number_isSet) {
        obj.insert(QString("check_number"), ::OpenAPI::toJsonValue(m_check_number));
    }
    if (m_counterparties.size() > 0) {
        obj.insert(QString("counterparties"), ::OpenAPI::toJsonValue(m_counterparties));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_legacy_category.size() > 0) {
        obj.insert(QString("legacy_category"), ::OpenAPI::toJsonValue(m_legacy_category));
    }
    if (m_legacy_category_id_isSet) {
        obj.insert(QString("legacy_category_id"), ::OpenAPI::toJsonValue(m_legacy_category_id));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logo_url"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_merchant_name_isSet) {
        obj.insert(QString("merchant_name"), ::OpenAPI::toJsonValue(m_merchant_name));
    }
    if (m_payment_channel.isSet()) {
        obj.insert(QString("payment_channel"), ::OpenAPI::toJsonValue(m_payment_channel));
    }
    if (m_personal_finance_category.isSet()) {
        obj.insert(QString("personal_finance_category"), ::OpenAPI::toJsonValue(m_personal_finance_category));
    }
    if (m_personal_finance_category_icon_url_isSet) {
        obj.insert(QString("personal_finance_category_icon_url"), ::OpenAPI::toJsonValue(m_personal_finance_category_icon_url));
    }
    if (m_recurrence.isSet()) {
        obj.insert(QString("recurrence"), ::OpenAPI::toJsonValue(m_recurrence));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAIEnrichments::getCheckNumber() const {
    return m_check_number;
}
void OAIEnrichments::setCheckNumber(const QString &check_number) {
    m_check_number = check_number;
    m_check_number_isSet = true;
}

bool OAIEnrichments::is_check_number_Set() const{
    return m_check_number_isSet;
}

bool OAIEnrichments::is_check_number_Valid() const{
    return m_check_number_isValid;
}

QList<OAICounterparty> OAIEnrichments::getCounterparties() const {
    return m_counterparties;
}
void OAIEnrichments::setCounterparties(const QList<OAICounterparty> &counterparties) {
    m_counterparties = counterparties;
    m_counterparties_isSet = true;
}

bool OAIEnrichments::is_counterparties_Set() const{
    return m_counterparties_isSet;
}

bool OAIEnrichments::is_counterparties_Valid() const{
    return m_counterparties_isValid;
}

QString OAIEnrichments::getEntityId() const {
    return m_entity_id;
}
void OAIEnrichments::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIEnrichments::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIEnrichments::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QList<QString> OAIEnrichments::getLegacyCategory() const {
    return m_legacy_category;
}
void OAIEnrichments::setLegacyCategory(const QList<QString> &legacy_category) {
    m_legacy_category = legacy_category;
    m_legacy_category_isSet = true;
}

bool OAIEnrichments::is_legacy_category_Set() const{
    return m_legacy_category_isSet;
}

bool OAIEnrichments::is_legacy_category_Valid() const{
    return m_legacy_category_isValid;
}

QString OAIEnrichments::getLegacyCategoryId() const {
    return m_legacy_category_id;
}
void OAIEnrichments::setLegacyCategoryId(const QString &legacy_category_id) {
    m_legacy_category_id = legacy_category_id;
    m_legacy_category_id_isSet = true;
}

bool OAIEnrichments::is_legacy_category_id_Set() const{
    return m_legacy_category_id_isSet;
}

bool OAIEnrichments::is_legacy_category_id_Valid() const{
    return m_legacy_category_id_isValid;
}

OAILocation OAIEnrichments::getLocation() const {
    return m_location;
}
void OAIEnrichments::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIEnrichments::is_location_Set() const{
    return m_location_isSet;
}

bool OAIEnrichments::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIEnrichments::getLogoUrl() const {
    return m_logo_url;
}
void OAIEnrichments::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIEnrichments::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIEnrichments::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAIEnrichments::getMerchantName() const {
    return m_merchant_name;
}
void OAIEnrichments::setMerchantName(const QString &merchant_name) {
    m_merchant_name = merchant_name;
    m_merchant_name_isSet = true;
}

bool OAIEnrichments::is_merchant_name_Set() const{
    return m_merchant_name_isSet;
}

bool OAIEnrichments::is_merchant_name_Valid() const{
    return m_merchant_name_isValid;
}

OAIPaymentChannel OAIEnrichments::getPaymentChannel() const {
    return m_payment_channel;
}
void OAIEnrichments::setPaymentChannel(const OAIPaymentChannel &payment_channel) {
    m_payment_channel = payment_channel;
    m_payment_channel_isSet = true;
}

bool OAIEnrichments::is_payment_channel_Set() const{
    return m_payment_channel_isSet;
}

bool OAIEnrichments::is_payment_channel_Valid() const{
    return m_payment_channel_isValid;
}

OAIPersonalFinanceCategory OAIEnrichments::getPersonalFinanceCategory() const {
    return m_personal_finance_category;
}
void OAIEnrichments::setPersonalFinanceCategory(const OAIPersonalFinanceCategory &personal_finance_category) {
    m_personal_finance_category = personal_finance_category;
    m_personal_finance_category_isSet = true;
}

bool OAIEnrichments::is_personal_finance_category_Set() const{
    return m_personal_finance_category_isSet;
}

bool OAIEnrichments::is_personal_finance_category_Valid() const{
    return m_personal_finance_category_isValid;
}

QString OAIEnrichments::getPersonalFinanceCategoryIconUrl() const {
    return m_personal_finance_category_icon_url;
}
void OAIEnrichments::setPersonalFinanceCategoryIconUrl(const QString &personal_finance_category_icon_url) {
    m_personal_finance_category_icon_url = personal_finance_category_icon_url;
    m_personal_finance_category_icon_url_isSet = true;
}

bool OAIEnrichments::is_personal_finance_category_icon_url_Set() const{
    return m_personal_finance_category_icon_url_isSet;
}

bool OAIEnrichments::is_personal_finance_category_icon_url_Valid() const{
    return m_personal_finance_category_icon_url_isValid;
}

OAIRecurrence OAIEnrichments::getRecurrence() const {
    return m_recurrence;
}
void OAIEnrichments::setRecurrence(const OAIRecurrence &recurrence) {
    m_recurrence = recurrence;
    m_recurrence_isSet = true;
}

bool OAIEnrichments::is_recurrence_Set() const{
    return m_recurrence_isSet;
}

bool OAIEnrichments::is_recurrence_Valid() const{
    return m_recurrence_isValid;
}

QString OAIEnrichments::getWebsite() const {
    return m_website;
}
void OAIEnrichments::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIEnrichments::is_website_Set() const{
    return m_website_isSet;
}

bool OAIEnrichments::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIEnrichments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counterparties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_personal_finance_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_personal_finance_category_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnrichments::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_counterparties_isValid && m_location_isValid && m_logo_url_isValid && m_merchant_name_isValid && m_payment_channel_isValid && m_personal_finance_category_isValid && m_personal_finance_category_icon_url_isValid && m_website_isValid && true;
}

} // namespace OpenAPI
