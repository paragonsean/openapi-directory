/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstitutionsGetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstitutionsGetRequest::OAIInstitutionsGetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstitutionsGetRequest::OAIInstitutionsGetRequest() {
    this->initializeModel();
}

OAIInstitutionsGetRequest::~OAIInstitutionsGetRequest() {}

void OAIInstitutionsGetRequest::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_country_codes_isSet = false;
    m_country_codes_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;
}

void OAIInstitutionsGetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstitutionsGetRequest::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_country_codes_isValid = ::OpenAPI::fromJsonValue(m_country_codes, json[QString("country_codes")]);
    m_country_codes_isSet = !json[QString("country_codes")].isNull() && m_country_codes_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;
}

QString OAIInstitutionsGetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstitutionsGetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_country_codes.size() > 0) {
        obj.insert(QString("country_codes"), ::OpenAPI::toJsonValue(m_country_codes));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_options.isSet()) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    return obj;
}

QString OAIInstitutionsGetRequest::getClientId() const {
    return m_client_id;
}
void OAIInstitutionsGetRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIInstitutionsGetRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIInstitutionsGetRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

qint32 OAIInstitutionsGetRequest::getCount() const {
    return m_count;
}
void OAIInstitutionsGetRequest::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIInstitutionsGetRequest::is_count_Set() const{
    return m_count_isSet;
}

bool OAIInstitutionsGetRequest::is_count_Valid() const{
    return m_count_isValid;
}

QList<OAICountryCode> OAIInstitutionsGetRequest::getCountryCodes() const {
    return m_country_codes;
}
void OAIInstitutionsGetRequest::setCountryCodes(const QList<OAICountryCode> &country_codes) {
    m_country_codes = country_codes;
    m_country_codes_isSet = true;
}

bool OAIInstitutionsGetRequest::is_country_codes_Set() const{
    return m_country_codes_isSet;
}

bool OAIInstitutionsGetRequest::is_country_codes_Valid() const{
    return m_country_codes_isValid;
}

qint32 OAIInstitutionsGetRequest::getOffset() const {
    return m_offset;
}
void OAIInstitutionsGetRequest::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIInstitutionsGetRequest::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIInstitutionsGetRequest::is_offset_Valid() const{
    return m_offset_isValid;
}

OAIInstitutionsGetRequestOptions OAIInstitutionsGetRequest::getOptions() const {
    return m_options;
}
void OAIInstitutionsGetRequest::setOptions(const OAIInstitutionsGetRequestOptions &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIInstitutionsGetRequest::is_options_Set() const{
    return m_options_isSet;
}

bool OAIInstitutionsGetRequest::is_options_Valid() const{
    return m_options_isValid;
}

QString OAIInstitutionsGetRequest::getSecret() const {
    return m_secret;
}
void OAIInstitutionsGetRequest::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIInstitutionsGetRequest::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIInstitutionsGetRequest::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAIInstitutionsGetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstitutionsGetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_country_codes_isValid && m_offset_isValid && true;
}

} // namespace OpenAPI
