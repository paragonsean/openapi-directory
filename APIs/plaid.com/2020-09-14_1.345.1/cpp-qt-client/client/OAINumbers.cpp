/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumbers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumbers::OAINumbers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumbers::OAINumbers() {
    this->initializeModel();
}

OAINumbers::~OAINumbers() {}

void OAINumbers::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_ach_routing_isSet = false;
    m_ach_routing_isValid = false;

    m_ach_wire_routing_isSet = false;
    m_ach_wire_routing_isValid = false;

    m_bacs_sort_code_isSet = false;
    m_bacs_sort_code_isValid = false;

    m_eft_branch_isSet = false;
    m_eft_branch_isValid = false;

    m_eft_institution_isSet = false;
    m_eft_institution_isValid = false;

    m_international_bic_isSet = false;
    m_international_bic_isValid = false;

    m_international_iban_isSet = false;
    m_international_iban_isValid = false;
}

void OAINumbers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumbers::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_ach_routing_isValid = ::OpenAPI::fromJsonValue(m_ach_routing, json[QString("ach_routing")]);
    m_ach_routing_isSet = !json[QString("ach_routing")].isNull() && m_ach_routing_isValid;

    m_ach_wire_routing_isValid = ::OpenAPI::fromJsonValue(m_ach_wire_routing, json[QString("ach_wire_routing")]);
    m_ach_wire_routing_isSet = !json[QString("ach_wire_routing")].isNull() && m_ach_wire_routing_isValid;

    m_bacs_sort_code_isValid = ::OpenAPI::fromJsonValue(m_bacs_sort_code, json[QString("bacs_sort_code")]);
    m_bacs_sort_code_isSet = !json[QString("bacs_sort_code")].isNull() && m_bacs_sort_code_isValid;

    m_eft_branch_isValid = ::OpenAPI::fromJsonValue(m_eft_branch, json[QString("eft_branch")]);
    m_eft_branch_isSet = !json[QString("eft_branch")].isNull() && m_eft_branch_isValid;

    m_eft_institution_isValid = ::OpenAPI::fromJsonValue(m_eft_institution, json[QString("eft_institution")]);
    m_eft_institution_isSet = !json[QString("eft_institution")].isNull() && m_eft_institution_isValid;

    m_international_bic_isValid = ::OpenAPI::fromJsonValue(m_international_bic, json[QString("international_bic")]);
    m_international_bic_isSet = !json[QString("international_bic")].isNull() && m_international_bic_isValid;

    m_international_iban_isValid = ::OpenAPI::fromJsonValue(m_international_iban, json[QString("international_iban")]);
    m_international_iban_isSet = !json[QString("international_iban")].isNull() && m_international_iban_isValid;
}

QString OAINumbers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumbers::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_ach_routing_isSet) {
        obj.insert(QString("ach_routing"), ::OpenAPI::toJsonValue(m_ach_routing));
    }
    if (m_ach_wire_routing_isSet) {
        obj.insert(QString("ach_wire_routing"), ::OpenAPI::toJsonValue(m_ach_wire_routing));
    }
    if (m_bacs_sort_code_isSet) {
        obj.insert(QString("bacs_sort_code"), ::OpenAPI::toJsonValue(m_bacs_sort_code));
    }
    if (m_eft_branch_isSet) {
        obj.insert(QString("eft_branch"), ::OpenAPI::toJsonValue(m_eft_branch));
    }
    if (m_eft_institution_isSet) {
        obj.insert(QString("eft_institution"), ::OpenAPI::toJsonValue(m_eft_institution));
    }
    if (m_international_bic_isSet) {
        obj.insert(QString("international_bic"), ::OpenAPI::toJsonValue(m_international_bic));
    }
    if (m_international_iban_isSet) {
        obj.insert(QString("international_iban"), ::OpenAPI::toJsonValue(m_international_iban));
    }
    return obj;
}

QString OAINumbers::getAccount() const {
    return m_account;
}
void OAINumbers::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAINumbers::is_account_Set() const{
    return m_account_isSet;
}

bool OAINumbers::is_account_Valid() const{
    return m_account_isValid;
}

QString OAINumbers::getAchRouting() const {
    return m_ach_routing;
}
void OAINumbers::setAchRouting(const QString &ach_routing) {
    m_ach_routing = ach_routing;
    m_ach_routing_isSet = true;
}

bool OAINumbers::is_ach_routing_Set() const{
    return m_ach_routing_isSet;
}

bool OAINumbers::is_ach_routing_Valid() const{
    return m_ach_routing_isValid;
}

QString OAINumbers::getAchWireRouting() const {
    return m_ach_wire_routing;
}
void OAINumbers::setAchWireRouting(const QString &ach_wire_routing) {
    m_ach_wire_routing = ach_wire_routing;
    m_ach_wire_routing_isSet = true;
}

bool OAINumbers::is_ach_wire_routing_Set() const{
    return m_ach_wire_routing_isSet;
}

bool OAINumbers::is_ach_wire_routing_Valid() const{
    return m_ach_wire_routing_isValid;
}

QString OAINumbers::getBacsSortCode() const {
    return m_bacs_sort_code;
}
void OAINumbers::setBacsSortCode(const QString &bacs_sort_code) {
    m_bacs_sort_code = bacs_sort_code;
    m_bacs_sort_code_isSet = true;
}

bool OAINumbers::is_bacs_sort_code_Set() const{
    return m_bacs_sort_code_isSet;
}

bool OAINumbers::is_bacs_sort_code_Valid() const{
    return m_bacs_sort_code_isValid;
}

QString OAINumbers::getEftBranch() const {
    return m_eft_branch;
}
void OAINumbers::setEftBranch(const QString &eft_branch) {
    m_eft_branch = eft_branch;
    m_eft_branch_isSet = true;
}

bool OAINumbers::is_eft_branch_Set() const{
    return m_eft_branch_isSet;
}

bool OAINumbers::is_eft_branch_Valid() const{
    return m_eft_branch_isValid;
}

QString OAINumbers::getEftInstitution() const {
    return m_eft_institution;
}
void OAINumbers::setEftInstitution(const QString &eft_institution) {
    m_eft_institution = eft_institution;
    m_eft_institution_isSet = true;
}

bool OAINumbers::is_eft_institution_Set() const{
    return m_eft_institution_isSet;
}

bool OAINumbers::is_eft_institution_Valid() const{
    return m_eft_institution_isValid;
}

QString OAINumbers::getInternationalBic() const {
    return m_international_bic;
}
void OAINumbers::setInternationalBic(const QString &international_bic) {
    m_international_bic = international_bic;
    m_international_bic_isSet = true;
}

bool OAINumbers::is_international_bic_Set() const{
    return m_international_bic_isSet;
}

bool OAINumbers::is_international_bic_Valid() const{
    return m_international_bic_isValid;
}

QString OAINumbers::getInternationalIban() const {
    return m_international_iban;
}
void OAINumbers::setInternationalIban(const QString &international_iban) {
    m_international_iban = international_iban;
    m_international_iban_isSet = true;
}

bool OAINumbers::is_international_iban_Set() const{
    return m_international_iban_isSet;
}

bool OAINumbers::is_international_iban_Valid() const{
    return m_international_iban_isValid;
}

bool OAINumbers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ach_routing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ach_wire_routing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bacs_sort_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eft_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eft_institution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_bic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_international_iban_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumbers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
