/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignalEvaluateCoreAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignalEvaluateCoreAttributes::OAISignalEvaluateCoreAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignalEvaluateCoreAttributes::OAISignalEvaluateCoreAttributes() {
    this->initializeModel();
}

OAISignalEvaluateCoreAttributes::~OAISignalEvaluateCoreAttributes() {}

void OAISignalEvaluateCoreAttributes::initializeModel() {

    m_address_change_count_28d_isSet = false;
    m_address_change_count_28d_isValid = false;

    m_address_change_count_90d_isSet = false;
    m_address_change_count_90d_isValid = false;

    m_available_balance_isSet = false;
    m_available_balance_isValid = false;

    m_balance_last_updated_isSet = false;
    m_balance_last_updated_isValid = false;

    m_credit_transactions_count_10d_isSet = false;
    m_credit_transactions_count_10d_isValid = false;

    m_credit_transactions_count_30d_isSet = false;
    m_credit_transactions_count_30d_isValid = false;

    m_credit_transactions_count_60d_isSet = false;
    m_credit_transactions_count_60d_isValid = false;

    m_credit_transactions_count_90d_isSet = false;
    m_credit_transactions_count_90d_isValid = false;

    m_current_balance_isSet = false;
    m_current_balance_isValid = false;

    m_days_since_first_plaid_connection_isSet = false;
    m_days_since_first_plaid_connection_isValid = false;

    m_days_with_negative_balance_count_90d_isSet = false;
    m_days_with_negative_balance_count_90d_isValid = false;

    m_debit_transactions_count_10d_isSet = false;
    m_debit_transactions_count_10d_isValid = false;

    m_debit_transactions_count_30d_isSet = false;
    m_debit_transactions_count_30d_isValid = false;

    m_debit_transactions_count_60d_isSet = false;
    m_debit_transactions_count_60d_isValid = false;

    m_debit_transactions_count_90d_isSet = false;
    m_debit_transactions_count_90d_isValid = false;

    m_email_change_count_28d_isSet = false;
    m_email_change_count_28d_isValid = false;

    m_email_change_count_90d_isSet = false;
    m_email_change_count_90d_isValid = false;

    m_failed_plaid_non_oauth_authentication_attempts_count_30d_isSet = false;
    m_failed_plaid_non_oauth_authentication_attempts_count_30d_isValid = false;

    m_failed_plaid_non_oauth_authentication_attempts_count_3d_isSet = false;
    m_failed_plaid_non_oauth_authentication_attempts_count_3d_isValid = false;

    m_failed_plaid_non_oauth_authentication_attempts_count_7d_isSet = false;
    m_failed_plaid_non_oauth_authentication_attempts_count_7d_isValid = false;

    m_is_savings_or_money_market_account_isSet = false;
    m_is_savings_or_money_market_account_isValid = false;

    m_nsf_overdraft_transactions_count_30d_isSet = false;
    m_nsf_overdraft_transactions_count_30d_isValid = false;

    m_nsf_overdraft_transactions_count_60d_isSet = false;
    m_nsf_overdraft_transactions_count_60d_isValid = false;

    m_nsf_overdraft_transactions_count_7d_isSet = false;
    m_nsf_overdraft_transactions_count_7d_isValid = false;

    m_nsf_overdraft_transactions_count_90d_isSet = false;
    m_nsf_overdraft_transactions_count_90d_isValid = false;

    m_p10_eod_balance_30d_isSet = false;
    m_p10_eod_balance_30d_isValid = false;

    m_p10_eod_balance_31d_to_60d_isSet = false;
    m_p10_eod_balance_31d_to_60d_isValid = false;

    m_p10_eod_balance_60d_isSet = false;
    m_p10_eod_balance_60d_isValid = false;

    m_p10_eod_balance_61d_to_90d_isSet = false;
    m_p10_eod_balance_61d_to_90d_isValid = false;

    m_p10_eod_balance_90d_isSet = false;
    m_p10_eod_balance_90d_isValid = false;

    m_p50_credit_transactions_amount_28d_isSet = false;
    m_p50_credit_transactions_amount_28d_isValid = false;

    m_p50_debit_transactions_amount_28d_isSet = false;
    m_p50_debit_transactions_amount_28d_isValid = false;

    m_p50_eod_balance_30d_isSet = false;
    m_p50_eod_balance_30d_isValid = false;

    m_p50_eod_balance_31d_to_60d_isSet = false;
    m_p50_eod_balance_31d_to_60d_isValid = false;

    m_p50_eod_balance_60d_isSet = false;
    m_p50_eod_balance_60d_isValid = false;

    m_p50_eod_balance_61d_to_90d_isSet = false;
    m_p50_eod_balance_61d_to_90d_isValid = false;

    m_p50_eod_balance_90d_isSet = false;
    m_p50_eod_balance_90d_isValid = false;

    m_p90_eod_balance_30d_isSet = false;
    m_p90_eod_balance_30d_isValid = false;

    m_p90_eod_balance_31d_to_60d_isSet = false;
    m_p90_eod_balance_31d_to_60d_isValid = false;

    m_p90_eod_balance_60d_isSet = false;
    m_p90_eod_balance_60d_isValid = false;

    m_p90_eod_balance_61d_to_90d_isSet = false;
    m_p90_eod_balance_61d_to_90d_isValid = false;

    m_p90_eod_balance_90d_isSet = false;
    m_p90_eod_balance_90d_isValid = false;

    m_p95_credit_transactions_amount_28d_isSet = false;
    m_p95_credit_transactions_amount_28d_isValid = false;

    m_p95_debit_transactions_amount_28d_isSet = false;
    m_p95_debit_transactions_amount_28d_isValid = false;

    m_phone_change_count_28d_isSet = false;
    m_phone_change_count_28d_isValid = false;

    m_phone_change_count_90d_isSet = false;
    m_phone_change_count_90d_isValid = false;

    m_plaid_connections_count_30d_isSet = false;
    m_plaid_connections_count_30d_isValid = false;

    m_plaid_connections_count_7d_isSet = false;
    m_plaid_connections_count_7d_isValid = false;

    m_plaid_non_oauth_authentication_attempts_count_30d_isSet = false;
    m_plaid_non_oauth_authentication_attempts_count_30d_isValid = false;

    m_plaid_non_oauth_authentication_attempts_count_3d_isSet = false;
    m_plaid_non_oauth_authentication_attempts_count_3d_isValid = false;

    m_plaid_non_oauth_authentication_attempts_count_7d_isSet = false;
    m_plaid_non_oauth_authentication_attempts_count_7d_isValid = false;

    m_total_credit_transactions_amount_10d_isSet = false;
    m_total_credit_transactions_amount_10d_isValid = false;

    m_total_credit_transactions_amount_30d_isSet = false;
    m_total_credit_transactions_amount_30d_isValid = false;

    m_total_credit_transactions_amount_60d_isSet = false;
    m_total_credit_transactions_amount_60d_isValid = false;

    m_total_credit_transactions_amount_90d_isSet = false;
    m_total_credit_transactions_amount_90d_isValid = false;

    m_total_debit_transactions_amount_10d_isSet = false;
    m_total_debit_transactions_amount_10d_isValid = false;

    m_total_debit_transactions_amount_30d_isSet = false;
    m_total_debit_transactions_amount_30d_isValid = false;

    m_total_debit_transactions_amount_60d_isSet = false;
    m_total_debit_transactions_amount_60d_isValid = false;

    m_total_debit_transactions_amount_90d_isSet = false;
    m_total_debit_transactions_amount_90d_isValid = false;

    m_total_plaid_connections_count_isSet = false;
    m_total_plaid_connections_count_isValid = false;

    m_transactions_last_updated_isSet = false;
    m_transactions_last_updated_isValid = false;

    m_unauthorized_transactions_count_30d_isSet = false;
    m_unauthorized_transactions_count_30d_isValid = false;

    m_unauthorized_transactions_count_60d_isSet = false;
    m_unauthorized_transactions_count_60d_isValid = false;

    m_unauthorized_transactions_count_7d_isSet = false;
    m_unauthorized_transactions_count_7d_isValid = false;

    m_unauthorized_transactions_count_90d_isSet = false;
    m_unauthorized_transactions_count_90d_isValid = false;
}

void OAISignalEvaluateCoreAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISignalEvaluateCoreAttributes::fromJsonObject(QJsonObject json) {

    m_address_change_count_28d_isValid = ::OpenAPI::fromJsonValue(m_address_change_count_28d, json[QString("address_change_count_28d")]);
    m_address_change_count_28d_isSet = !json[QString("address_change_count_28d")].isNull() && m_address_change_count_28d_isValid;

    m_address_change_count_90d_isValid = ::OpenAPI::fromJsonValue(m_address_change_count_90d, json[QString("address_change_count_90d")]);
    m_address_change_count_90d_isSet = !json[QString("address_change_count_90d")].isNull() && m_address_change_count_90d_isValid;

    m_available_balance_isValid = ::OpenAPI::fromJsonValue(m_available_balance, json[QString("available_balance")]);
    m_available_balance_isSet = !json[QString("available_balance")].isNull() && m_available_balance_isValid;

    m_balance_last_updated_isValid = ::OpenAPI::fromJsonValue(m_balance_last_updated, json[QString("balance_last_updated")]);
    m_balance_last_updated_isSet = !json[QString("balance_last_updated")].isNull() && m_balance_last_updated_isValid;

    m_credit_transactions_count_10d_isValid = ::OpenAPI::fromJsonValue(m_credit_transactions_count_10d, json[QString("credit_transactions_count_10d")]);
    m_credit_transactions_count_10d_isSet = !json[QString("credit_transactions_count_10d")].isNull() && m_credit_transactions_count_10d_isValid;

    m_credit_transactions_count_30d_isValid = ::OpenAPI::fromJsonValue(m_credit_transactions_count_30d, json[QString("credit_transactions_count_30d")]);
    m_credit_transactions_count_30d_isSet = !json[QString("credit_transactions_count_30d")].isNull() && m_credit_transactions_count_30d_isValid;

    m_credit_transactions_count_60d_isValid = ::OpenAPI::fromJsonValue(m_credit_transactions_count_60d, json[QString("credit_transactions_count_60d")]);
    m_credit_transactions_count_60d_isSet = !json[QString("credit_transactions_count_60d")].isNull() && m_credit_transactions_count_60d_isValid;

    m_credit_transactions_count_90d_isValid = ::OpenAPI::fromJsonValue(m_credit_transactions_count_90d, json[QString("credit_transactions_count_90d")]);
    m_credit_transactions_count_90d_isSet = !json[QString("credit_transactions_count_90d")].isNull() && m_credit_transactions_count_90d_isValid;

    m_current_balance_isValid = ::OpenAPI::fromJsonValue(m_current_balance, json[QString("current_balance")]);
    m_current_balance_isSet = !json[QString("current_balance")].isNull() && m_current_balance_isValid;

    m_days_since_first_plaid_connection_isValid = ::OpenAPI::fromJsonValue(m_days_since_first_plaid_connection, json[QString("days_since_first_plaid_connection")]);
    m_days_since_first_plaid_connection_isSet = !json[QString("days_since_first_plaid_connection")].isNull() && m_days_since_first_plaid_connection_isValid;

    m_days_with_negative_balance_count_90d_isValid = ::OpenAPI::fromJsonValue(m_days_with_negative_balance_count_90d, json[QString("days_with_negative_balance_count_90d")]);
    m_days_with_negative_balance_count_90d_isSet = !json[QString("days_with_negative_balance_count_90d")].isNull() && m_days_with_negative_balance_count_90d_isValid;

    m_debit_transactions_count_10d_isValid = ::OpenAPI::fromJsonValue(m_debit_transactions_count_10d, json[QString("debit_transactions_count_10d")]);
    m_debit_transactions_count_10d_isSet = !json[QString("debit_transactions_count_10d")].isNull() && m_debit_transactions_count_10d_isValid;

    m_debit_transactions_count_30d_isValid = ::OpenAPI::fromJsonValue(m_debit_transactions_count_30d, json[QString("debit_transactions_count_30d")]);
    m_debit_transactions_count_30d_isSet = !json[QString("debit_transactions_count_30d")].isNull() && m_debit_transactions_count_30d_isValid;

    m_debit_transactions_count_60d_isValid = ::OpenAPI::fromJsonValue(m_debit_transactions_count_60d, json[QString("debit_transactions_count_60d")]);
    m_debit_transactions_count_60d_isSet = !json[QString("debit_transactions_count_60d")].isNull() && m_debit_transactions_count_60d_isValid;

    m_debit_transactions_count_90d_isValid = ::OpenAPI::fromJsonValue(m_debit_transactions_count_90d, json[QString("debit_transactions_count_90d")]);
    m_debit_transactions_count_90d_isSet = !json[QString("debit_transactions_count_90d")].isNull() && m_debit_transactions_count_90d_isValid;

    m_email_change_count_28d_isValid = ::OpenAPI::fromJsonValue(m_email_change_count_28d, json[QString("email_change_count_28d")]);
    m_email_change_count_28d_isSet = !json[QString("email_change_count_28d")].isNull() && m_email_change_count_28d_isValid;

    m_email_change_count_90d_isValid = ::OpenAPI::fromJsonValue(m_email_change_count_90d, json[QString("email_change_count_90d")]);
    m_email_change_count_90d_isSet = !json[QString("email_change_count_90d")].isNull() && m_email_change_count_90d_isValid;

    m_failed_plaid_non_oauth_authentication_attempts_count_30d_isValid = ::OpenAPI::fromJsonValue(m_failed_plaid_non_oauth_authentication_attempts_count_30d, json[QString("failed_plaid_non_oauth_authentication_attempts_count_30d")]);
    m_failed_plaid_non_oauth_authentication_attempts_count_30d_isSet = !json[QString("failed_plaid_non_oauth_authentication_attempts_count_30d")].isNull() && m_failed_plaid_non_oauth_authentication_attempts_count_30d_isValid;

    m_failed_plaid_non_oauth_authentication_attempts_count_3d_isValid = ::OpenAPI::fromJsonValue(m_failed_plaid_non_oauth_authentication_attempts_count_3d, json[QString("failed_plaid_non_oauth_authentication_attempts_count_3d")]);
    m_failed_plaid_non_oauth_authentication_attempts_count_3d_isSet = !json[QString("failed_plaid_non_oauth_authentication_attempts_count_3d")].isNull() && m_failed_plaid_non_oauth_authentication_attempts_count_3d_isValid;

    m_failed_plaid_non_oauth_authentication_attempts_count_7d_isValid = ::OpenAPI::fromJsonValue(m_failed_plaid_non_oauth_authentication_attempts_count_7d, json[QString("failed_plaid_non_oauth_authentication_attempts_count_7d")]);
    m_failed_plaid_non_oauth_authentication_attempts_count_7d_isSet = !json[QString("failed_plaid_non_oauth_authentication_attempts_count_7d")].isNull() && m_failed_plaid_non_oauth_authentication_attempts_count_7d_isValid;

    m_is_savings_or_money_market_account_isValid = ::OpenAPI::fromJsonValue(m_is_savings_or_money_market_account, json[QString("is_savings_or_money_market_account")]);
    m_is_savings_or_money_market_account_isSet = !json[QString("is_savings_or_money_market_account")].isNull() && m_is_savings_or_money_market_account_isValid;

    m_nsf_overdraft_transactions_count_30d_isValid = ::OpenAPI::fromJsonValue(m_nsf_overdraft_transactions_count_30d, json[QString("nsf_overdraft_transactions_count_30d")]);
    m_nsf_overdraft_transactions_count_30d_isSet = !json[QString("nsf_overdraft_transactions_count_30d")].isNull() && m_nsf_overdraft_transactions_count_30d_isValid;

    m_nsf_overdraft_transactions_count_60d_isValid = ::OpenAPI::fromJsonValue(m_nsf_overdraft_transactions_count_60d, json[QString("nsf_overdraft_transactions_count_60d")]);
    m_nsf_overdraft_transactions_count_60d_isSet = !json[QString("nsf_overdraft_transactions_count_60d")].isNull() && m_nsf_overdraft_transactions_count_60d_isValid;

    m_nsf_overdraft_transactions_count_7d_isValid = ::OpenAPI::fromJsonValue(m_nsf_overdraft_transactions_count_7d, json[QString("nsf_overdraft_transactions_count_7d")]);
    m_nsf_overdraft_transactions_count_7d_isSet = !json[QString("nsf_overdraft_transactions_count_7d")].isNull() && m_nsf_overdraft_transactions_count_7d_isValid;

    m_nsf_overdraft_transactions_count_90d_isValid = ::OpenAPI::fromJsonValue(m_nsf_overdraft_transactions_count_90d, json[QString("nsf_overdraft_transactions_count_90d")]);
    m_nsf_overdraft_transactions_count_90d_isSet = !json[QString("nsf_overdraft_transactions_count_90d")].isNull() && m_nsf_overdraft_transactions_count_90d_isValid;

    m_p10_eod_balance_30d_isValid = ::OpenAPI::fromJsonValue(m_p10_eod_balance_30d, json[QString("p10_eod_balance_30d")]);
    m_p10_eod_balance_30d_isSet = !json[QString("p10_eod_balance_30d")].isNull() && m_p10_eod_balance_30d_isValid;

    m_p10_eod_balance_31d_to_60d_isValid = ::OpenAPI::fromJsonValue(m_p10_eod_balance_31d_to_60d, json[QString("p10_eod_balance_31d_to_60d")]);
    m_p10_eod_balance_31d_to_60d_isSet = !json[QString("p10_eod_balance_31d_to_60d")].isNull() && m_p10_eod_balance_31d_to_60d_isValid;

    m_p10_eod_balance_60d_isValid = ::OpenAPI::fromJsonValue(m_p10_eod_balance_60d, json[QString("p10_eod_balance_60d")]);
    m_p10_eod_balance_60d_isSet = !json[QString("p10_eod_balance_60d")].isNull() && m_p10_eod_balance_60d_isValid;

    m_p10_eod_balance_61d_to_90d_isValid = ::OpenAPI::fromJsonValue(m_p10_eod_balance_61d_to_90d, json[QString("p10_eod_balance_61d_to_90d")]);
    m_p10_eod_balance_61d_to_90d_isSet = !json[QString("p10_eod_balance_61d_to_90d")].isNull() && m_p10_eod_balance_61d_to_90d_isValid;

    m_p10_eod_balance_90d_isValid = ::OpenAPI::fromJsonValue(m_p10_eod_balance_90d, json[QString("p10_eod_balance_90d")]);
    m_p10_eod_balance_90d_isSet = !json[QString("p10_eod_balance_90d")].isNull() && m_p10_eod_balance_90d_isValid;

    m_p50_credit_transactions_amount_28d_isValid = ::OpenAPI::fromJsonValue(m_p50_credit_transactions_amount_28d, json[QString("p50_credit_transactions_amount_28d")]);
    m_p50_credit_transactions_amount_28d_isSet = !json[QString("p50_credit_transactions_amount_28d")].isNull() && m_p50_credit_transactions_amount_28d_isValid;

    m_p50_debit_transactions_amount_28d_isValid = ::OpenAPI::fromJsonValue(m_p50_debit_transactions_amount_28d, json[QString("p50_debit_transactions_amount_28d")]);
    m_p50_debit_transactions_amount_28d_isSet = !json[QString("p50_debit_transactions_amount_28d")].isNull() && m_p50_debit_transactions_amount_28d_isValid;

    m_p50_eod_balance_30d_isValid = ::OpenAPI::fromJsonValue(m_p50_eod_balance_30d, json[QString("p50_eod_balance_30d")]);
    m_p50_eod_balance_30d_isSet = !json[QString("p50_eod_balance_30d")].isNull() && m_p50_eod_balance_30d_isValid;

    m_p50_eod_balance_31d_to_60d_isValid = ::OpenAPI::fromJsonValue(m_p50_eod_balance_31d_to_60d, json[QString("p50_eod_balance_31d_to_60d")]);
    m_p50_eod_balance_31d_to_60d_isSet = !json[QString("p50_eod_balance_31d_to_60d")].isNull() && m_p50_eod_balance_31d_to_60d_isValid;

    m_p50_eod_balance_60d_isValid = ::OpenAPI::fromJsonValue(m_p50_eod_balance_60d, json[QString("p50_eod_balance_60d")]);
    m_p50_eod_balance_60d_isSet = !json[QString("p50_eod_balance_60d")].isNull() && m_p50_eod_balance_60d_isValid;

    m_p50_eod_balance_61d_to_90d_isValid = ::OpenAPI::fromJsonValue(m_p50_eod_balance_61d_to_90d, json[QString("p50_eod_balance_61d_to_90d")]);
    m_p50_eod_balance_61d_to_90d_isSet = !json[QString("p50_eod_balance_61d_to_90d")].isNull() && m_p50_eod_balance_61d_to_90d_isValid;

    m_p50_eod_balance_90d_isValid = ::OpenAPI::fromJsonValue(m_p50_eod_balance_90d, json[QString("p50_eod_balance_90d")]);
    m_p50_eod_balance_90d_isSet = !json[QString("p50_eod_balance_90d")].isNull() && m_p50_eod_balance_90d_isValid;

    m_p90_eod_balance_30d_isValid = ::OpenAPI::fromJsonValue(m_p90_eod_balance_30d, json[QString("p90_eod_balance_30d")]);
    m_p90_eod_balance_30d_isSet = !json[QString("p90_eod_balance_30d")].isNull() && m_p90_eod_balance_30d_isValid;

    m_p90_eod_balance_31d_to_60d_isValid = ::OpenAPI::fromJsonValue(m_p90_eod_balance_31d_to_60d, json[QString("p90_eod_balance_31d_to_60d")]);
    m_p90_eod_balance_31d_to_60d_isSet = !json[QString("p90_eod_balance_31d_to_60d")].isNull() && m_p90_eod_balance_31d_to_60d_isValid;

    m_p90_eod_balance_60d_isValid = ::OpenAPI::fromJsonValue(m_p90_eod_balance_60d, json[QString("p90_eod_balance_60d")]);
    m_p90_eod_balance_60d_isSet = !json[QString("p90_eod_balance_60d")].isNull() && m_p90_eod_balance_60d_isValid;

    m_p90_eod_balance_61d_to_90d_isValid = ::OpenAPI::fromJsonValue(m_p90_eod_balance_61d_to_90d, json[QString("p90_eod_balance_61d_to_90d")]);
    m_p90_eod_balance_61d_to_90d_isSet = !json[QString("p90_eod_balance_61d_to_90d")].isNull() && m_p90_eod_balance_61d_to_90d_isValid;

    m_p90_eod_balance_90d_isValid = ::OpenAPI::fromJsonValue(m_p90_eod_balance_90d, json[QString("p90_eod_balance_90d")]);
    m_p90_eod_balance_90d_isSet = !json[QString("p90_eod_balance_90d")].isNull() && m_p90_eod_balance_90d_isValid;

    m_p95_credit_transactions_amount_28d_isValid = ::OpenAPI::fromJsonValue(m_p95_credit_transactions_amount_28d, json[QString("p95_credit_transactions_amount_28d")]);
    m_p95_credit_transactions_amount_28d_isSet = !json[QString("p95_credit_transactions_amount_28d")].isNull() && m_p95_credit_transactions_amount_28d_isValid;

    m_p95_debit_transactions_amount_28d_isValid = ::OpenAPI::fromJsonValue(m_p95_debit_transactions_amount_28d, json[QString("p95_debit_transactions_amount_28d")]);
    m_p95_debit_transactions_amount_28d_isSet = !json[QString("p95_debit_transactions_amount_28d")].isNull() && m_p95_debit_transactions_amount_28d_isValid;

    m_phone_change_count_28d_isValid = ::OpenAPI::fromJsonValue(m_phone_change_count_28d, json[QString("phone_change_count_28d")]);
    m_phone_change_count_28d_isSet = !json[QString("phone_change_count_28d")].isNull() && m_phone_change_count_28d_isValid;

    m_phone_change_count_90d_isValid = ::OpenAPI::fromJsonValue(m_phone_change_count_90d, json[QString("phone_change_count_90d")]);
    m_phone_change_count_90d_isSet = !json[QString("phone_change_count_90d")].isNull() && m_phone_change_count_90d_isValid;

    m_plaid_connections_count_30d_isValid = ::OpenAPI::fromJsonValue(m_plaid_connections_count_30d, json[QString("plaid_connections_count_30d")]);
    m_plaid_connections_count_30d_isSet = !json[QString("plaid_connections_count_30d")].isNull() && m_plaid_connections_count_30d_isValid;

    m_plaid_connections_count_7d_isValid = ::OpenAPI::fromJsonValue(m_plaid_connections_count_7d, json[QString("plaid_connections_count_7d")]);
    m_plaid_connections_count_7d_isSet = !json[QString("plaid_connections_count_7d")].isNull() && m_plaid_connections_count_7d_isValid;

    m_plaid_non_oauth_authentication_attempts_count_30d_isValid = ::OpenAPI::fromJsonValue(m_plaid_non_oauth_authentication_attempts_count_30d, json[QString("plaid_non_oauth_authentication_attempts_count_30d")]);
    m_plaid_non_oauth_authentication_attempts_count_30d_isSet = !json[QString("plaid_non_oauth_authentication_attempts_count_30d")].isNull() && m_plaid_non_oauth_authentication_attempts_count_30d_isValid;

    m_plaid_non_oauth_authentication_attempts_count_3d_isValid = ::OpenAPI::fromJsonValue(m_plaid_non_oauth_authentication_attempts_count_3d, json[QString("plaid_non_oauth_authentication_attempts_count_3d")]);
    m_plaid_non_oauth_authentication_attempts_count_3d_isSet = !json[QString("plaid_non_oauth_authentication_attempts_count_3d")].isNull() && m_plaid_non_oauth_authentication_attempts_count_3d_isValid;

    m_plaid_non_oauth_authentication_attempts_count_7d_isValid = ::OpenAPI::fromJsonValue(m_plaid_non_oauth_authentication_attempts_count_7d, json[QString("plaid_non_oauth_authentication_attempts_count_7d")]);
    m_plaid_non_oauth_authentication_attempts_count_7d_isSet = !json[QString("plaid_non_oauth_authentication_attempts_count_7d")].isNull() && m_plaid_non_oauth_authentication_attempts_count_7d_isValid;

    m_total_credit_transactions_amount_10d_isValid = ::OpenAPI::fromJsonValue(m_total_credit_transactions_amount_10d, json[QString("total_credit_transactions_amount_10d")]);
    m_total_credit_transactions_amount_10d_isSet = !json[QString("total_credit_transactions_amount_10d")].isNull() && m_total_credit_transactions_amount_10d_isValid;

    m_total_credit_transactions_amount_30d_isValid = ::OpenAPI::fromJsonValue(m_total_credit_transactions_amount_30d, json[QString("total_credit_transactions_amount_30d")]);
    m_total_credit_transactions_amount_30d_isSet = !json[QString("total_credit_transactions_amount_30d")].isNull() && m_total_credit_transactions_amount_30d_isValid;

    m_total_credit_transactions_amount_60d_isValid = ::OpenAPI::fromJsonValue(m_total_credit_transactions_amount_60d, json[QString("total_credit_transactions_amount_60d")]);
    m_total_credit_transactions_amount_60d_isSet = !json[QString("total_credit_transactions_amount_60d")].isNull() && m_total_credit_transactions_amount_60d_isValid;

    m_total_credit_transactions_amount_90d_isValid = ::OpenAPI::fromJsonValue(m_total_credit_transactions_amount_90d, json[QString("total_credit_transactions_amount_90d")]);
    m_total_credit_transactions_amount_90d_isSet = !json[QString("total_credit_transactions_amount_90d")].isNull() && m_total_credit_transactions_amount_90d_isValid;

    m_total_debit_transactions_amount_10d_isValid = ::OpenAPI::fromJsonValue(m_total_debit_transactions_amount_10d, json[QString("total_debit_transactions_amount_10d")]);
    m_total_debit_transactions_amount_10d_isSet = !json[QString("total_debit_transactions_amount_10d")].isNull() && m_total_debit_transactions_amount_10d_isValid;

    m_total_debit_transactions_amount_30d_isValid = ::OpenAPI::fromJsonValue(m_total_debit_transactions_amount_30d, json[QString("total_debit_transactions_amount_30d")]);
    m_total_debit_transactions_amount_30d_isSet = !json[QString("total_debit_transactions_amount_30d")].isNull() && m_total_debit_transactions_amount_30d_isValid;

    m_total_debit_transactions_amount_60d_isValid = ::OpenAPI::fromJsonValue(m_total_debit_transactions_amount_60d, json[QString("total_debit_transactions_amount_60d")]);
    m_total_debit_transactions_amount_60d_isSet = !json[QString("total_debit_transactions_amount_60d")].isNull() && m_total_debit_transactions_amount_60d_isValid;

    m_total_debit_transactions_amount_90d_isValid = ::OpenAPI::fromJsonValue(m_total_debit_transactions_amount_90d, json[QString("total_debit_transactions_amount_90d")]);
    m_total_debit_transactions_amount_90d_isSet = !json[QString("total_debit_transactions_amount_90d")].isNull() && m_total_debit_transactions_amount_90d_isValid;

    m_total_plaid_connections_count_isValid = ::OpenAPI::fromJsonValue(m_total_plaid_connections_count, json[QString("total_plaid_connections_count")]);
    m_total_plaid_connections_count_isSet = !json[QString("total_plaid_connections_count")].isNull() && m_total_plaid_connections_count_isValid;

    m_transactions_last_updated_isValid = ::OpenAPI::fromJsonValue(m_transactions_last_updated, json[QString("transactions_last_updated")]);
    m_transactions_last_updated_isSet = !json[QString("transactions_last_updated")].isNull() && m_transactions_last_updated_isValid;

    m_unauthorized_transactions_count_30d_isValid = ::OpenAPI::fromJsonValue(m_unauthorized_transactions_count_30d, json[QString("unauthorized_transactions_count_30d")]);
    m_unauthorized_transactions_count_30d_isSet = !json[QString("unauthorized_transactions_count_30d")].isNull() && m_unauthorized_transactions_count_30d_isValid;

    m_unauthorized_transactions_count_60d_isValid = ::OpenAPI::fromJsonValue(m_unauthorized_transactions_count_60d, json[QString("unauthorized_transactions_count_60d")]);
    m_unauthorized_transactions_count_60d_isSet = !json[QString("unauthorized_transactions_count_60d")].isNull() && m_unauthorized_transactions_count_60d_isValid;

    m_unauthorized_transactions_count_7d_isValid = ::OpenAPI::fromJsonValue(m_unauthorized_transactions_count_7d, json[QString("unauthorized_transactions_count_7d")]);
    m_unauthorized_transactions_count_7d_isSet = !json[QString("unauthorized_transactions_count_7d")].isNull() && m_unauthorized_transactions_count_7d_isValid;

    m_unauthorized_transactions_count_90d_isValid = ::OpenAPI::fromJsonValue(m_unauthorized_transactions_count_90d, json[QString("unauthorized_transactions_count_90d")]);
    m_unauthorized_transactions_count_90d_isSet = !json[QString("unauthorized_transactions_count_90d")].isNull() && m_unauthorized_transactions_count_90d_isValid;
}

QString OAISignalEvaluateCoreAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISignalEvaluateCoreAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_address_change_count_28d_isSet) {
        obj.insert(QString("address_change_count_28d"), ::OpenAPI::toJsonValue(m_address_change_count_28d));
    }
    if (m_address_change_count_90d_isSet) {
        obj.insert(QString("address_change_count_90d"), ::OpenAPI::toJsonValue(m_address_change_count_90d));
    }
    if (m_available_balance_isSet) {
        obj.insert(QString("available_balance"), ::OpenAPI::toJsonValue(m_available_balance));
    }
    if (m_balance_last_updated_isSet) {
        obj.insert(QString("balance_last_updated"), ::OpenAPI::toJsonValue(m_balance_last_updated));
    }
    if (m_credit_transactions_count_10d_isSet) {
        obj.insert(QString("credit_transactions_count_10d"), ::OpenAPI::toJsonValue(m_credit_transactions_count_10d));
    }
    if (m_credit_transactions_count_30d_isSet) {
        obj.insert(QString("credit_transactions_count_30d"), ::OpenAPI::toJsonValue(m_credit_transactions_count_30d));
    }
    if (m_credit_transactions_count_60d_isSet) {
        obj.insert(QString("credit_transactions_count_60d"), ::OpenAPI::toJsonValue(m_credit_transactions_count_60d));
    }
    if (m_credit_transactions_count_90d_isSet) {
        obj.insert(QString("credit_transactions_count_90d"), ::OpenAPI::toJsonValue(m_credit_transactions_count_90d));
    }
    if (m_current_balance_isSet) {
        obj.insert(QString("current_balance"), ::OpenAPI::toJsonValue(m_current_balance));
    }
    if (m_days_since_first_plaid_connection_isSet) {
        obj.insert(QString("days_since_first_plaid_connection"), ::OpenAPI::toJsonValue(m_days_since_first_plaid_connection));
    }
    if (m_days_with_negative_balance_count_90d_isSet) {
        obj.insert(QString("days_with_negative_balance_count_90d"), ::OpenAPI::toJsonValue(m_days_with_negative_balance_count_90d));
    }
    if (m_debit_transactions_count_10d_isSet) {
        obj.insert(QString("debit_transactions_count_10d"), ::OpenAPI::toJsonValue(m_debit_transactions_count_10d));
    }
    if (m_debit_transactions_count_30d_isSet) {
        obj.insert(QString("debit_transactions_count_30d"), ::OpenAPI::toJsonValue(m_debit_transactions_count_30d));
    }
    if (m_debit_transactions_count_60d_isSet) {
        obj.insert(QString("debit_transactions_count_60d"), ::OpenAPI::toJsonValue(m_debit_transactions_count_60d));
    }
    if (m_debit_transactions_count_90d_isSet) {
        obj.insert(QString("debit_transactions_count_90d"), ::OpenAPI::toJsonValue(m_debit_transactions_count_90d));
    }
    if (m_email_change_count_28d_isSet) {
        obj.insert(QString("email_change_count_28d"), ::OpenAPI::toJsonValue(m_email_change_count_28d));
    }
    if (m_email_change_count_90d_isSet) {
        obj.insert(QString("email_change_count_90d"), ::OpenAPI::toJsonValue(m_email_change_count_90d));
    }
    if (m_failed_plaid_non_oauth_authentication_attempts_count_30d_isSet) {
        obj.insert(QString("failed_plaid_non_oauth_authentication_attempts_count_30d"), ::OpenAPI::toJsonValue(m_failed_plaid_non_oauth_authentication_attempts_count_30d));
    }
    if (m_failed_plaid_non_oauth_authentication_attempts_count_3d_isSet) {
        obj.insert(QString("failed_plaid_non_oauth_authentication_attempts_count_3d"), ::OpenAPI::toJsonValue(m_failed_plaid_non_oauth_authentication_attempts_count_3d));
    }
    if (m_failed_plaid_non_oauth_authentication_attempts_count_7d_isSet) {
        obj.insert(QString("failed_plaid_non_oauth_authentication_attempts_count_7d"), ::OpenAPI::toJsonValue(m_failed_plaid_non_oauth_authentication_attempts_count_7d));
    }
    if (m_is_savings_or_money_market_account_isSet) {
        obj.insert(QString("is_savings_or_money_market_account"), ::OpenAPI::toJsonValue(m_is_savings_or_money_market_account));
    }
    if (m_nsf_overdraft_transactions_count_30d_isSet) {
        obj.insert(QString("nsf_overdraft_transactions_count_30d"), ::OpenAPI::toJsonValue(m_nsf_overdraft_transactions_count_30d));
    }
    if (m_nsf_overdraft_transactions_count_60d_isSet) {
        obj.insert(QString("nsf_overdraft_transactions_count_60d"), ::OpenAPI::toJsonValue(m_nsf_overdraft_transactions_count_60d));
    }
    if (m_nsf_overdraft_transactions_count_7d_isSet) {
        obj.insert(QString("nsf_overdraft_transactions_count_7d"), ::OpenAPI::toJsonValue(m_nsf_overdraft_transactions_count_7d));
    }
    if (m_nsf_overdraft_transactions_count_90d_isSet) {
        obj.insert(QString("nsf_overdraft_transactions_count_90d"), ::OpenAPI::toJsonValue(m_nsf_overdraft_transactions_count_90d));
    }
    if (m_p10_eod_balance_30d_isSet) {
        obj.insert(QString("p10_eod_balance_30d"), ::OpenAPI::toJsonValue(m_p10_eod_balance_30d));
    }
    if (m_p10_eod_balance_31d_to_60d_isSet) {
        obj.insert(QString("p10_eod_balance_31d_to_60d"), ::OpenAPI::toJsonValue(m_p10_eod_balance_31d_to_60d));
    }
    if (m_p10_eod_balance_60d_isSet) {
        obj.insert(QString("p10_eod_balance_60d"), ::OpenAPI::toJsonValue(m_p10_eod_balance_60d));
    }
    if (m_p10_eod_balance_61d_to_90d_isSet) {
        obj.insert(QString("p10_eod_balance_61d_to_90d"), ::OpenAPI::toJsonValue(m_p10_eod_balance_61d_to_90d));
    }
    if (m_p10_eod_balance_90d_isSet) {
        obj.insert(QString("p10_eod_balance_90d"), ::OpenAPI::toJsonValue(m_p10_eod_balance_90d));
    }
    if (m_p50_credit_transactions_amount_28d_isSet) {
        obj.insert(QString("p50_credit_transactions_amount_28d"), ::OpenAPI::toJsonValue(m_p50_credit_transactions_amount_28d));
    }
    if (m_p50_debit_transactions_amount_28d_isSet) {
        obj.insert(QString("p50_debit_transactions_amount_28d"), ::OpenAPI::toJsonValue(m_p50_debit_transactions_amount_28d));
    }
    if (m_p50_eod_balance_30d_isSet) {
        obj.insert(QString("p50_eod_balance_30d"), ::OpenAPI::toJsonValue(m_p50_eod_balance_30d));
    }
    if (m_p50_eod_balance_31d_to_60d_isSet) {
        obj.insert(QString("p50_eod_balance_31d_to_60d"), ::OpenAPI::toJsonValue(m_p50_eod_balance_31d_to_60d));
    }
    if (m_p50_eod_balance_60d_isSet) {
        obj.insert(QString("p50_eod_balance_60d"), ::OpenAPI::toJsonValue(m_p50_eod_balance_60d));
    }
    if (m_p50_eod_balance_61d_to_90d_isSet) {
        obj.insert(QString("p50_eod_balance_61d_to_90d"), ::OpenAPI::toJsonValue(m_p50_eod_balance_61d_to_90d));
    }
    if (m_p50_eod_balance_90d_isSet) {
        obj.insert(QString("p50_eod_balance_90d"), ::OpenAPI::toJsonValue(m_p50_eod_balance_90d));
    }
    if (m_p90_eod_balance_30d_isSet) {
        obj.insert(QString("p90_eod_balance_30d"), ::OpenAPI::toJsonValue(m_p90_eod_balance_30d));
    }
    if (m_p90_eod_balance_31d_to_60d_isSet) {
        obj.insert(QString("p90_eod_balance_31d_to_60d"), ::OpenAPI::toJsonValue(m_p90_eod_balance_31d_to_60d));
    }
    if (m_p90_eod_balance_60d_isSet) {
        obj.insert(QString("p90_eod_balance_60d"), ::OpenAPI::toJsonValue(m_p90_eod_balance_60d));
    }
    if (m_p90_eod_balance_61d_to_90d_isSet) {
        obj.insert(QString("p90_eod_balance_61d_to_90d"), ::OpenAPI::toJsonValue(m_p90_eod_balance_61d_to_90d));
    }
    if (m_p90_eod_balance_90d_isSet) {
        obj.insert(QString("p90_eod_balance_90d"), ::OpenAPI::toJsonValue(m_p90_eod_balance_90d));
    }
    if (m_p95_credit_transactions_amount_28d_isSet) {
        obj.insert(QString("p95_credit_transactions_amount_28d"), ::OpenAPI::toJsonValue(m_p95_credit_transactions_amount_28d));
    }
    if (m_p95_debit_transactions_amount_28d_isSet) {
        obj.insert(QString("p95_debit_transactions_amount_28d"), ::OpenAPI::toJsonValue(m_p95_debit_transactions_amount_28d));
    }
    if (m_phone_change_count_28d_isSet) {
        obj.insert(QString("phone_change_count_28d"), ::OpenAPI::toJsonValue(m_phone_change_count_28d));
    }
    if (m_phone_change_count_90d_isSet) {
        obj.insert(QString("phone_change_count_90d"), ::OpenAPI::toJsonValue(m_phone_change_count_90d));
    }
    if (m_plaid_connections_count_30d_isSet) {
        obj.insert(QString("plaid_connections_count_30d"), ::OpenAPI::toJsonValue(m_plaid_connections_count_30d));
    }
    if (m_plaid_connections_count_7d_isSet) {
        obj.insert(QString("plaid_connections_count_7d"), ::OpenAPI::toJsonValue(m_plaid_connections_count_7d));
    }
    if (m_plaid_non_oauth_authentication_attempts_count_30d_isSet) {
        obj.insert(QString("plaid_non_oauth_authentication_attempts_count_30d"), ::OpenAPI::toJsonValue(m_plaid_non_oauth_authentication_attempts_count_30d));
    }
    if (m_plaid_non_oauth_authentication_attempts_count_3d_isSet) {
        obj.insert(QString("plaid_non_oauth_authentication_attempts_count_3d"), ::OpenAPI::toJsonValue(m_plaid_non_oauth_authentication_attempts_count_3d));
    }
    if (m_plaid_non_oauth_authentication_attempts_count_7d_isSet) {
        obj.insert(QString("plaid_non_oauth_authentication_attempts_count_7d"), ::OpenAPI::toJsonValue(m_plaid_non_oauth_authentication_attempts_count_7d));
    }
    if (m_total_credit_transactions_amount_10d_isSet) {
        obj.insert(QString("total_credit_transactions_amount_10d"), ::OpenAPI::toJsonValue(m_total_credit_transactions_amount_10d));
    }
    if (m_total_credit_transactions_amount_30d_isSet) {
        obj.insert(QString("total_credit_transactions_amount_30d"), ::OpenAPI::toJsonValue(m_total_credit_transactions_amount_30d));
    }
    if (m_total_credit_transactions_amount_60d_isSet) {
        obj.insert(QString("total_credit_transactions_amount_60d"), ::OpenAPI::toJsonValue(m_total_credit_transactions_amount_60d));
    }
    if (m_total_credit_transactions_amount_90d_isSet) {
        obj.insert(QString("total_credit_transactions_amount_90d"), ::OpenAPI::toJsonValue(m_total_credit_transactions_amount_90d));
    }
    if (m_total_debit_transactions_amount_10d_isSet) {
        obj.insert(QString("total_debit_transactions_amount_10d"), ::OpenAPI::toJsonValue(m_total_debit_transactions_amount_10d));
    }
    if (m_total_debit_transactions_amount_30d_isSet) {
        obj.insert(QString("total_debit_transactions_amount_30d"), ::OpenAPI::toJsonValue(m_total_debit_transactions_amount_30d));
    }
    if (m_total_debit_transactions_amount_60d_isSet) {
        obj.insert(QString("total_debit_transactions_amount_60d"), ::OpenAPI::toJsonValue(m_total_debit_transactions_amount_60d));
    }
    if (m_total_debit_transactions_amount_90d_isSet) {
        obj.insert(QString("total_debit_transactions_amount_90d"), ::OpenAPI::toJsonValue(m_total_debit_transactions_amount_90d));
    }
    if (m_total_plaid_connections_count_isSet) {
        obj.insert(QString("total_plaid_connections_count"), ::OpenAPI::toJsonValue(m_total_plaid_connections_count));
    }
    if (m_transactions_last_updated_isSet) {
        obj.insert(QString("transactions_last_updated"), ::OpenAPI::toJsonValue(m_transactions_last_updated));
    }
    if (m_unauthorized_transactions_count_30d_isSet) {
        obj.insert(QString("unauthorized_transactions_count_30d"), ::OpenAPI::toJsonValue(m_unauthorized_transactions_count_30d));
    }
    if (m_unauthorized_transactions_count_60d_isSet) {
        obj.insert(QString("unauthorized_transactions_count_60d"), ::OpenAPI::toJsonValue(m_unauthorized_transactions_count_60d));
    }
    if (m_unauthorized_transactions_count_7d_isSet) {
        obj.insert(QString("unauthorized_transactions_count_7d"), ::OpenAPI::toJsonValue(m_unauthorized_transactions_count_7d));
    }
    if (m_unauthorized_transactions_count_90d_isSet) {
        obj.insert(QString("unauthorized_transactions_count_90d"), ::OpenAPI::toJsonValue(m_unauthorized_transactions_count_90d));
    }
    return obj;
}

qint32 OAISignalEvaluateCoreAttributes::getAddressChangeCount28d() const {
    return m_address_change_count_28d;
}
void OAISignalEvaluateCoreAttributes::setAddressChangeCount28d(const qint32 &address_change_count_28d) {
    m_address_change_count_28d = address_change_count_28d;
    m_address_change_count_28d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_address_change_count_28d_Set() const{
    return m_address_change_count_28d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_address_change_count_28d_Valid() const{
    return m_address_change_count_28d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getAddressChangeCount90d() const {
    return m_address_change_count_90d;
}
void OAISignalEvaluateCoreAttributes::setAddressChangeCount90d(const qint32 &address_change_count_90d) {
    m_address_change_count_90d = address_change_count_90d;
    m_address_change_count_90d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_address_change_count_90d_Set() const{
    return m_address_change_count_90d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_address_change_count_90d_Valid() const{
    return m_address_change_count_90d_isValid;
}

double OAISignalEvaluateCoreAttributes::getAvailableBalance() const {
    return m_available_balance;
}
void OAISignalEvaluateCoreAttributes::setAvailableBalance(const double &available_balance) {
    m_available_balance = available_balance;
    m_available_balance_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_available_balance_Set() const{
    return m_available_balance_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_available_balance_Valid() const{
    return m_available_balance_isValid;
}

QDateTime OAISignalEvaluateCoreAttributes::getBalanceLastUpdated() const {
    return m_balance_last_updated;
}
void OAISignalEvaluateCoreAttributes::setBalanceLastUpdated(const QDateTime &balance_last_updated) {
    m_balance_last_updated = balance_last_updated;
    m_balance_last_updated_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_balance_last_updated_Set() const{
    return m_balance_last_updated_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_balance_last_updated_Valid() const{
    return m_balance_last_updated_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getCreditTransactionsCount10d() const {
    return m_credit_transactions_count_10d;
}
void OAISignalEvaluateCoreAttributes::setCreditTransactionsCount10d(const qint32 &credit_transactions_count_10d) {
    m_credit_transactions_count_10d = credit_transactions_count_10d;
    m_credit_transactions_count_10d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_credit_transactions_count_10d_Set() const{
    return m_credit_transactions_count_10d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_credit_transactions_count_10d_Valid() const{
    return m_credit_transactions_count_10d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getCreditTransactionsCount30d() const {
    return m_credit_transactions_count_30d;
}
void OAISignalEvaluateCoreAttributes::setCreditTransactionsCount30d(const qint32 &credit_transactions_count_30d) {
    m_credit_transactions_count_30d = credit_transactions_count_30d;
    m_credit_transactions_count_30d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_credit_transactions_count_30d_Set() const{
    return m_credit_transactions_count_30d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_credit_transactions_count_30d_Valid() const{
    return m_credit_transactions_count_30d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getCreditTransactionsCount60d() const {
    return m_credit_transactions_count_60d;
}
void OAISignalEvaluateCoreAttributes::setCreditTransactionsCount60d(const qint32 &credit_transactions_count_60d) {
    m_credit_transactions_count_60d = credit_transactions_count_60d;
    m_credit_transactions_count_60d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_credit_transactions_count_60d_Set() const{
    return m_credit_transactions_count_60d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_credit_transactions_count_60d_Valid() const{
    return m_credit_transactions_count_60d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getCreditTransactionsCount90d() const {
    return m_credit_transactions_count_90d;
}
void OAISignalEvaluateCoreAttributes::setCreditTransactionsCount90d(const qint32 &credit_transactions_count_90d) {
    m_credit_transactions_count_90d = credit_transactions_count_90d;
    m_credit_transactions_count_90d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_credit_transactions_count_90d_Set() const{
    return m_credit_transactions_count_90d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_credit_transactions_count_90d_Valid() const{
    return m_credit_transactions_count_90d_isValid;
}

double OAISignalEvaluateCoreAttributes::getCurrentBalance() const {
    return m_current_balance;
}
void OAISignalEvaluateCoreAttributes::setCurrentBalance(const double &current_balance) {
    m_current_balance = current_balance;
    m_current_balance_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_current_balance_Set() const{
    return m_current_balance_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_current_balance_Valid() const{
    return m_current_balance_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getDaysSinceFirstPlaidConnection() const {
    return m_days_since_first_plaid_connection;
}
void OAISignalEvaluateCoreAttributes::setDaysSinceFirstPlaidConnection(const qint32 &days_since_first_plaid_connection) {
    m_days_since_first_plaid_connection = days_since_first_plaid_connection;
    m_days_since_first_plaid_connection_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_days_since_first_plaid_connection_Set() const{
    return m_days_since_first_plaid_connection_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_days_since_first_plaid_connection_Valid() const{
    return m_days_since_first_plaid_connection_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getDaysWithNegativeBalanceCount90d() const {
    return m_days_with_negative_balance_count_90d;
}
void OAISignalEvaluateCoreAttributes::setDaysWithNegativeBalanceCount90d(const qint32 &days_with_negative_balance_count_90d) {
    m_days_with_negative_balance_count_90d = days_with_negative_balance_count_90d;
    m_days_with_negative_balance_count_90d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_days_with_negative_balance_count_90d_Set() const{
    return m_days_with_negative_balance_count_90d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_days_with_negative_balance_count_90d_Valid() const{
    return m_days_with_negative_balance_count_90d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getDebitTransactionsCount10d() const {
    return m_debit_transactions_count_10d;
}
void OAISignalEvaluateCoreAttributes::setDebitTransactionsCount10d(const qint32 &debit_transactions_count_10d) {
    m_debit_transactions_count_10d = debit_transactions_count_10d;
    m_debit_transactions_count_10d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_debit_transactions_count_10d_Set() const{
    return m_debit_transactions_count_10d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_debit_transactions_count_10d_Valid() const{
    return m_debit_transactions_count_10d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getDebitTransactionsCount30d() const {
    return m_debit_transactions_count_30d;
}
void OAISignalEvaluateCoreAttributes::setDebitTransactionsCount30d(const qint32 &debit_transactions_count_30d) {
    m_debit_transactions_count_30d = debit_transactions_count_30d;
    m_debit_transactions_count_30d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_debit_transactions_count_30d_Set() const{
    return m_debit_transactions_count_30d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_debit_transactions_count_30d_Valid() const{
    return m_debit_transactions_count_30d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getDebitTransactionsCount60d() const {
    return m_debit_transactions_count_60d;
}
void OAISignalEvaluateCoreAttributes::setDebitTransactionsCount60d(const qint32 &debit_transactions_count_60d) {
    m_debit_transactions_count_60d = debit_transactions_count_60d;
    m_debit_transactions_count_60d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_debit_transactions_count_60d_Set() const{
    return m_debit_transactions_count_60d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_debit_transactions_count_60d_Valid() const{
    return m_debit_transactions_count_60d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getDebitTransactionsCount90d() const {
    return m_debit_transactions_count_90d;
}
void OAISignalEvaluateCoreAttributes::setDebitTransactionsCount90d(const qint32 &debit_transactions_count_90d) {
    m_debit_transactions_count_90d = debit_transactions_count_90d;
    m_debit_transactions_count_90d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_debit_transactions_count_90d_Set() const{
    return m_debit_transactions_count_90d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_debit_transactions_count_90d_Valid() const{
    return m_debit_transactions_count_90d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getEmailChangeCount28d() const {
    return m_email_change_count_28d;
}
void OAISignalEvaluateCoreAttributes::setEmailChangeCount28d(const qint32 &email_change_count_28d) {
    m_email_change_count_28d = email_change_count_28d;
    m_email_change_count_28d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_email_change_count_28d_Set() const{
    return m_email_change_count_28d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_email_change_count_28d_Valid() const{
    return m_email_change_count_28d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getEmailChangeCount90d() const {
    return m_email_change_count_90d;
}
void OAISignalEvaluateCoreAttributes::setEmailChangeCount90d(const qint32 &email_change_count_90d) {
    m_email_change_count_90d = email_change_count_90d;
    m_email_change_count_90d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_email_change_count_90d_Set() const{
    return m_email_change_count_90d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_email_change_count_90d_Valid() const{
    return m_email_change_count_90d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getFailedPlaidNonOauthAuthenticationAttemptsCount30d() const {
    return m_failed_plaid_non_oauth_authentication_attempts_count_30d;
}
void OAISignalEvaluateCoreAttributes::setFailedPlaidNonOauthAuthenticationAttemptsCount30d(const qint32 &failed_plaid_non_oauth_authentication_attempts_count_30d) {
    m_failed_plaid_non_oauth_authentication_attempts_count_30d = failed_plaid_non_oauth_authentication_attempts_count_30d;
    m_failed_plaid_non_oauth_authentication_attempts_count_30d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_failed_plaid_non_oauth_authentication_attempts_count_30d_Set() const{
    return m_failed_plaid_non_oauth_authentication_attempts_count_30d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_failed_plaid_non_oauth_authentication_attempts_count_30d_Valid() const{
    return m_failed_plaid_non_oauth_authentication_attempts_count_30d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getFailedPlaidNonOauthAuthenticationAttemptsCount3d() const {
    return m_failed_plaid_non_oauth_authentication_attempts_count_3d;
}
void OAISignalEvaluateCoreAttributes::setFailedPlaidNonOauthAuthenticationAttemptsCount3d(const qint32 &failed_plaid_non_oauth_authentication_attempts_count_3d) {
    m_failed_plaid_non_oauth_authentication_attempts_count_3d = failed_plaid_non_oauth_authentication_attempts_count_3d;
    m_failed_plaid_non_oauth_authentication_attempts_count_3d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_failed_plaid_non_oauth_authentication_attempts_count_3d_Set() const{
    return m_failed_plaid_non_oauth_authentication_attempts_count_3d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_failed_plaid_non_oauth_authentication_attempts_count_3d_Valid() const{
    return m_failed_plaid_non_oauth_authentication_attempts_count_3d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getFailedPlaidNonOauthAuthenticationAttemptsCount7d() const {
    return m_failed_plaid_non_oauth_authentication_attempts_count_7d;
}
void OAISignalEvaluateCoreAttributes::setFailedPlaidNonOauthAuthenticationAttemptsCount7d(const qint32 &failed_plaid_non_oauth_authentication_attempts_count_7d) {
    m_failed_plaid_non_oauth_authentication_attempts_count_7d = failed_plaid_non_oauth_authentication_attempts_count_7d;
    m_failed_plaid_non_oauth_authentication_attempts_count_7d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_failed_plaid_non_oauth_authentication_attempts_count_7d_Set() const{
    return m_failed_plaid_non_oauth_authentication_attempts_count_7d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_failed_plaid_non_oauth_authentication_attempts_count_7d_Valid() const{
    return m_failed_plaid_non_oauth_authentication_attempts_count_7d_isValid;
}

bool OAISignalEvaluateCoreAttributes::isIsSavingsOrMoneyMarketAccount() const {
    return m_is_savings_or_money_market_account;
}
void OAISignalEvaluateCoreAttributes::setIsSavingsOrMoneyMarketAccount(const bool &is_savings_or_money_market_account) {
    m_is_savings_or_money_market_account = is_savings_or_money_market_account;
    m_is_savings_or_money_market_account_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_is_savings_or_money_market_account_Set() const{
    return m_is_savings_or_money_market_account_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_is_savings_or_money_market_account_Valid() const{
    return m_is_savings_or_money_market_account_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getNsfOverdraftTransactionsCount30d() const {
    return m_nsf_overdraft_transactions_count_30d;
}
void OAISignalEvaluateCoreAttributes::setNsfOverdraftTransactionsCount30d(const qint32 &nsf_overdraft_transactions_count_30d) {
    m_nsf_overdraft_transactions_count_30d = nsf_overdraft_transactions_count_30d;
    m_nsf_overdraft_transactions_count_30d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_nsf_overdraft_transactions_count_30d_Set() const{
    return m_nsf_overdraft_transactions_count_30d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_nsf_overdraft_transactions_count_30d_Valid() const{
    return m_nsf_overdraft_transactions_count_30d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getNsfOverdraftTransactionsCount60d() const {
    return m_nsf_overdraft_transactions_count_60d;
}
void OAISignalEvaluateCoreAttributes::setNsfOverdraftTransactionsCount60d(const qint32 &nsf_overdraft_transactions_count_60d) {
    m_nsf_overdraft_transactions_count_60d = nsf_overdraft_transactions_count_60d;
    m_nsf_overdraft_transactions_count_60d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_nsf_overdraft_transactions_count_60d_Set() const{
    return m_nsf_overdraft_transactions_count_60d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_nsf_overdraft_transactions_count_60d_Valid() const{
    return m_nsf_overdraft_transactions_count_60d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getNsfOverdraftTransactionsCount7d() const {
    return m_nsf_overdraft_transactions_count_7d;
}
void OAISignalEvaluateCoreAttributes::setNsfOverdraftTransactionsCount7d(const qint32 &nsf_overdraft_transactions_count_7d) {
    m_nsf_overdraft_transactions_count_7d = nsf_overdraft_transactions_count_7d;
    m_nsf_overdraft_transactions_count_7d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_nsf_overdraft_transactions_count_7d_Set() const{
    return m_nsf_overdraft_transactions_count_7d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_nsf_overdraft_transactions_count_7d_Valid() const{
    return m_nsf_overdraft_transactions_count_7d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getNsfOverdraftTransactionsCount90d() const {
    return m_nsf_overdraft_transactions_count_90d;
}
void OAISignalEvaluateCoreAttributes::setNsfOverdraftTransactionsCount90d(const qint32 &nsf_overdraft_transactions_count_90d) {
    m_nsf_overdraft_transactions_count_90d = nsf_overdraft_transactions_count_90d;
    m_nsf_overdraft_transactions_count_90d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_nsf_overdraft_transactions_count_90d_Set() const{
    return m_nsf_overdraft_transactions_count_90d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_nsf_overdraft_transactions_count_90d_Valid() const{
    return m_nsf_overdraft_transactions_count_90d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP10EodBalance30d() const {
    return m_p10_eod_balance_30d;
}
void OAISignalEvaluateCoreAttributes::setP10EodBalance30d(const double &p10_eod_balance_30d) {
    m_p10_eod_balance_30d = p10_eod_balance_30d;
    m_p10_eod_balance_30d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p10_eod_balance_30d_Set() const{
    return m_p10_eod_balance_30d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p10_eod_balance_30d_Valid() const{
    return m_p10_eod_balance_30d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP10EodBalance31dTo60d() const {
    return m_p10_eod_balance_31d_to_60d;
}
void OAISignalEvaluateCoreAttributes::setP10EodBalance31dTo60d(const double &p10_eod_balance_31d_to_60d) {
    m_p10_eod_balance_31d_to_60d = p10_eod_balance_31d_to_60d;
    m_p10_eod_balance_31d_to_60d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p10_eod_balance_31d_to_60d_Set() const{
    return m_p10_eod_balance_31d_to_60d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p10_eod_balance_31d_to_60d_Valid() const{
    return m_p10_eod_balance_31d_to_60d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP10EodBalance60d() const {
    return m_p10_eod_balance_60d;
}
void OAISignalEvaluateCoreAttributes::setP10EodBalance60d(const double &p10_eod_balance_60d) {
    m_p10_eod_balance_60d = p10_eod_balance_60d;
    m_p10_eod_balance_60d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p10_eod_balance_60d_Set() const{
    return m_p10_eod_balance_60d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p10_eod_balance_60d_Valid() const{
    return m_p10_eod_balance_60d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP10EodBalance61dTo90d() const {
    return m_p10_eod_balance_61d_to_90d;
}
void OAISignalEvaluateCoreAttributes::setP10EodBalance61dTo90d(const double &p10_eod_balance_61d_to_90d) {
    m_p10_eod_balance_61d_to_90d = p10_eod_balance_61d_to_90d;
    m_p10_eod_balance_61d_to_90d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p10_eod_balance_61d_to_90d_Set() const{
    return m_p10_eod_balance_61d_to_90d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p10_eod_balance_61d_to_90d_Valid() const{
    return m_p10_eod_balance_61d_to_90d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP10EodBalance90d() const {
    return m_p10_eod_balance_90d;
}
void OAISignalEvaluateCoreAttributes::setP10EodBalance90d(const double &p10_eod_balance_90d) {
    m_p10_eod_balance_90d = p10_eod_balance_90d;
    m_p10_eod_balance_90d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p10_eod_balance_90d_Set() const{
    return m_p10_eod_balance_90d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p10_eod_balance_90d_Valid() const{
    return m_p10_eod_balance_90d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP50CreditTransactionsAmount28d() const {
    return m_p50_credit_transactions_amount_28d;
}
void OAISignalEvaluateCoreAttributes::setP50CreditTransactionsAmount28d(const double &p50_credit_transactions_amount_28d) {
    m_p50_credit_transactions_amount_28d = p50_credit_transactions_amount_28d;
    m_p50_credit_transactions_amount_28d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p50_credit_transactions_amount_28d_Set() const{
    return m_p50_credit_transactions_amount_28d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p50_credit_transactions_amount_28d_Valid() const{
    return m_p50_credit_transactions_amount_28d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP50DebitTransactionsAmount28d() const {
    return m_p50_debit_transactions_amount_28d;
}
void OAISignalEvaluateCoreAttributes::setP50DebitTransactionsAmount28d(const double &p50_debit_transactions_amount_28d) {
    m_p50_debit_transactions_amount_28d = p50_debit_transactions_amount_28d;
    m_p50_debit_transactions_amount_28d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p50_debit_transactions_amount_28d_Set() const{
    return m_p50_debit_transactions_amount_28d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p50_debit_transactions_amount_28d_Valid() const{
    return m_p50_debit_transactions_amount_28d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP50EodBalance30d() const {
    return m_p50_eod_balance_30d;
}
void OAISignalEvaluateCoreAttributes::setP50EodBalance30d(const double &p50_eod_balance_30d) {
    m_p50_eod_balance_30d = p50_eod_balance_30d;
    m_p50_eod_balance_30d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p50_eod_balance_30d_Set() const{
    return m_p50_eod_balance_30d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p50_eod_balance_30d_Valid() const{
    return m_p50_eod_balance_30d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP50EodBalance31dTo60d() const {
    return m_p50_eod_balance_31d_to_60d;
}
void OAISignalEvaluateCoreAttributes::setP50EodBalance31dTo60d(const double &p50_eod_balance_31d_to_60d) {
    m_p50_eod_balance_31d_to_60d = p50_eod_balance_31d_to_60d;
    m_p50_eod_balance_31d_to_60d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p50_eod_balance_31d_to_60d_Set() const{
    return m_p50_eod_balance_31d_to_60d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p50_eod_balance_31d_to_60d_Valid() const{
    return m_p50_eod_balance_31d_to_60d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP50EodBalance60d() const {
    return m_p50_eod_balance_60d;
}
void OAISignalEvaluateCoreAttributes::setP50EodBalance60d(const double &p50_eod_balance_60d) {
    m_p50_eod_balance_60d = p50_eod_balance_60d;
    m_p50_eod_balance_60d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p50_eod_balance_60d_Set() const{
    return m_p50_eod_balance_60d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p50_eod_balance_60d_Valid() const{
    return m_p50_eod_balance_60d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP50EodBalance61dTo90d() const {
    return m_p50_eod_balance_61d_to_90d;
}
void OAISignalEvaluateCoreAttributes::setP50EodBalance61dTo90d(const double &p50_eod_balance_61d_to_90d) {
    m_p50_eod_balance_61d_to_90d = p50_eod_balance_61d_to_90d;
    m_p50_eod_balance_61d_to_90d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p50_eod_balance_61d_to_90d_Set() const{
    return m_p50_eod_balance_61d_to_90d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p50_eod_balance_61d_to_90d_Valid() const{
    return m_p50_eod_balance_61d_to_90d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP50EodBalance90d() const {
    return m_p50_eod_balance_90d;
}
void OAISignalEvaluateCoreAttributes::setP50EodBalance90d(const double &p50_eod_balance_90d) {
    m_p50_eod_balance_90d = p50_eod_balance_90d;
    m_p50_eod_balance_90d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p50_eod_balance_90d_Set() const{
    return m_p50_eod_balance_90d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p50_eod_balance_90d_Valid() const{
    return m_p50_eod_balance_90d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP90EodBalance30d() const {
    return m_p90_eod_balance_30d;
}
void OAISignalEvaluateCoreAttributes::setP90EodBalance30d(const double &p90_eod_balance_30d) {
    m_p90_eod_balance_30d = p90_eod_balance_30d;
    m_p90_eod_balance_30d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p90_eod_balance_30d_Set() const{
    return m_p90_eod_balance_30d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p90_eod_balance_30d_Valid() const{
    return m_p90_eod_balance_30d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP90EodBalance31dTo60d() const {
    return m_p90_eod_balance_31d_to_60d;
}
void OAISignalEvaluateCoreAttributes::setP90EodBalance31dTo60d(const double &p90_eod_balance_31d_to_60d) {
    m_p90_eod_balance_31d_to_60d = p90_eod_balance_31d_to_60d;
    m_p90_eod_balance_31d_to_60d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p90_eod_balance_31d_to_60d_Set() const{
    return m_p90_eod_balance_31d_to_60d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p90_eod_balance_31d_to_60d_Valid() const{
    return m_p90_eod_balance_31d_to_60d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP90EodBalance60d() const {
    return m_p90_eod_balance_60d;
}
void OAISignalEvaluateCoreAttributes::setP90EodBalance60d(const double &p90_eod_balance_60d) {
    m_p90_eod_balance_60d = p90_eod_balance_60d;
    m_p90_eod_balance_60d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p90_eod_balance_60d_Set() const{
    return m_p90_eod_balance_60d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p90_eod_balance_60d_Valid() const{
    return m_p90_eod_balance_60d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP90EodBalance61dTo90d() const {
    return m_p90_eod_balance_61d_to_90d;
}
void OAISignalEvaluateCoreAttributes::setP90EodBalance61dTo90d(const double &p90_eod_balance_61d_to_90d) {
    m_p90_eod_balance_61d_to_90d = p90_eod_balance_61d_to_90d;
    m_p90_eod_balance_61d_to_90d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p90_eod_balance_61d_to_90d_Set() const{
    return m_p90_eod_balance_61d_to_90d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p90_eod_balance_61d_to_90d_Valid() const{
    return m_p90_eod_balance_61d_to_90d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP90EodBalance90d() const {
    return m_p90_eod_balance_90d;
}
void OAISignalEvaluateCoreAttributes::setP90EodBalance90d(const double &p90_eod_balance_90d) {
    m_p90_eod_balance_90d = p90_eod_balance_90d;
    m_p90_eod_balance_90d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p90_eod_balance_90d_Set() const{
    return m_p90_eod_balance_90d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p90_eod_balance_90d_Valid() const{
    return m_p90_eod_balance_90d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP95CreditTransactionsAmount28d() const {
    return m_p95_credit_transactions_amount_28d;
}
void OAISignalEvaluateCoreAttributes::setP95CreditTransactionsAmount28d(const double &p95_credit_transactions_amount_28d) {
    m_p95_credit_transactions_amount_28d = p95_credit_transactions_amount_28d;
    m_p95_credit_transactions_amount_28d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p95_credit_transactions_amount_28d_Set() const{
    return m_p95_credit_transactions_amount_28d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p95_credit_transactions_amount_28d_Valid() const{
    return m_p95_credit_transactions_amount_28d_isValid;
}

double OAISignalEvaluateCoreAttributes::getP95DebitTransactionsAmount28d() const {
    return m_p95_debit_transactions_amount_28d;
}
void OAISignalEvaluateCoreAttributes::setP95DebitTransactionsAmount28d(const double &p95_debit_transactions_amount_28d) {
    m_p95_debit_transactions_amount_28d = p95_debit_transactions_amount_28d;
    m_p95_debit_transactions_amount_28d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_p95_debit_transactions_amount_28d_Set() const{
    return m_p95_debit_transactions_amount_28d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_p95_debit_transactions_amount_28d_Valid() const{
    return m_p95_debit_transactions_amount_28d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getPhoneChangeCount28d() const {
    return m_phone_change_count_28d;
}
void OAISignalEvaluateCoreAttributes::setPhoneChangeCount28d(const qint32 &phone_change_count_28d) {
    m_phone_change_count_28d = phone_change_count_28d;
    m_phone_change_count_28d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_phone_change_count_28d_Set() const{
    return m_phone_change_count_28d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_phone_change_count_28d_Valid() const{
    return m_phone_change_count_28d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getPhoneChangeCount90d() const {
    return m_phone_change_count_90d;
}
void OAISignalEvaluateCoreAttributes::setPhoneChangeCount90d(const qint32 &phone_change_count_90d) {
    m_phone_change_count_90d = phone_change_count_90d;
    m_phone_change_count_90d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_phone_change_count_90d_Set() const{
    return m_phone_change_count_90d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_phone_change_count_90d_Valid() const{
    return m_phone_change_count_90d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getPlaidConnectionsCount30d() const {
    return m_plaid_connections_count_30d;
}
void OAISignalEvaluateCoreAttributes::setPlaidConnectionsCount30d(const qint32 &plaid_connections_count_30d) {
    m_plaid_connections_count_30d = plaid_connections_count_30d;
    m_plaid_connections_count_30d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_plaid_connections_count_30d_Set() const{
    return m_plaid_connections_count_30d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_plaid_connections_count_30d_Valid() const{
    return m_plaid_connections_count_30d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getPlaidConnectionsCount7d() const {
    return m_plaid_connections_count_7d;
}
void OAISignalEvaluateCoreAttributes::setPlaidConnectionsCount7d(const qint32 &plaid_connections_count_7d) {
    m_plaid_connections_count_7d = plaid_connections_count_7d;
    m_plaid_connections_count_7d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_plaid_connections_count_7d_Set() const{
    return m_plaid_connections_count_7d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_plaid_connections_count_7d_Valid() const{
    return m_plaid_connections_count_7d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getPlaidNonOauthAuthenticationAttemptsCount30d() const {
    return m_plaid_non_oauth_authentication_attempts_count_30d;
}
void OAISignalEvaluateCoreAttributes::setPlaidNonOauthAuthenticationAttemptsCount30d(const qint32 &plaid_non_oauth_authentication_attempts_count_30d) {
    m_plaid_non_oauth_authentication_attempts_count_30d = plaid_non_oauth_authentication_attempts_count_30d;
    m_plaid_non_oauth_authentication_attempts_count_30d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_plaid_non_oauth_authentication_attempts_count_30d_Set() const{
    return m_plaid_non_oauth_authentication_attempts_count_30d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_plaid_non_oauth_authentication_attempts_count_30d_Valid() const{
    return m_plaid_non_oauth_authentication_attempts_count_30d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getPlaidNonOauthAuthenticationAttemptsCount3d() const {
    return m_plaid_non_oauth_authentication_attempts_count_3d;
}
void OAISignalEvaluateCoreAttributes::setPlaidNonOauthAuthenticationAttemptsCount3d(const qint32 &plaid_non_oauth_authentication_attempts_count_3d) {
    m_plaid_non_oauth_authentication_attempts_count_3d = plaid_non_oauth_authentication_attempts_count_3d;
    m_plaid_non_oauth_authentication_attempts_count_3d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_plaid_non_oauth_authentication_attempts_count_3d_Set() const{
    return m_plaid_non_oauth_authentication_attempts_count_3d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_plaid_non_oauth_authentication_attempts_count_3d_Valid() const{
    return m_plaid_non_oauth_authentication_attempts_count_3d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getPlaidNonOauthAuthenticationAttemptsCount7d() const {
    return m_plaid_non_oauth_authentication_attempts_count_7d;
}
void OAISignalEvaluateCoreAttributes::setPlaidNonOauthAuthenticationAttemptsCount7d(const qint32 &plaid_non_oauth_authentication_attempts_count_7d) {
    m_plaid_non_oauth_authentication_attempts_count_7d = plaid_non_oauth_authentication_attempts_count_7d;
    m_plaid_non_oauth_authentication_attempts_count_7d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_plaid_non_oauth_authentication_attempts_count_7d_Set() const{
    return m_plaid_non_oauth_authentication_attempts_count_7d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_plaid_non_oauth_authentication_attempts_count_7d_Valid() const{
    return m_plaid_non_oauth_authentication_attempts_count_7d_isValid;
}

double OAISignalEvaluateCoreAttributes::getTotalCreditTransactionsAmount10d() const {
    return m_total_credit_transactions_amount_10d;
}
void OAISignalEvaluateCoreAttributes::setTotalCreditTransactionsAmount10d(const double &total_credit_transactions_amount_10d) {
    m_total_credit_transactions_amount_10d = total_credit_transactions_amount_10d;
    m_total_credit_transactions_amount_10d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_total_credit_transactions_amount_10d_Set() const{
    return m_total_credit_transactions_amount_10d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_total_credit_transactions_amount_10d_Valid() const{
    return m_total_credit_transactions_amount_10d_isValid;
}

double OAISignalEvaluateCoreAttributes::getTotalCreditTransactionsAmount30d() const {
    return m_total_credit_transactions_amount_30d;
}
void OAISignalEvaluateCoreAttributes::setTotalCreditTransactionsAmount30d(const double &total_credit_transactions_amount_30d) {
    m_total_credit_transactions_amount_30d = total_credit_transactions_amount_30d;
    m_total_credit_transactions_amount_30d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_total_credit_transactions_amount_30d_Set() const{
    return m_total_credit_transactions_amount_30d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_total_credit_transactions_amount_30d_Valid() const{
    return m_total_credit_transactions_amount_30d_isValid;
}

double OAISignalEvaluateCoreAttributes::getTotalCreditTransactionsAmount60d() const {
    return m_total_credit_transactions_amount_60d;
}
void OAISignalEvaluateCoreAttributes::setTotalCreditTransactionsAmount60d(const double &total_credit_transactions_amount_60d) {
    m_total_credit_transactions_amount_60d = total_credit_transactions_amount_60d;
    m_total_credit_transactions_amount_60d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_total_credit_transactions_amount_60d_Set() const{
    return m_total_credit_transactions_amount_60d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_total_credit_transactions_amount_60d_Valid() const{
    return m_total_credit_transactions_amount_60d_isValid;
}

double OAISignalEvaluateCoreAttributes::getTotalCreditTransactionsAmount90d() const {
    return m_total_credit_transactions_amount_90d;
}
void OAISignalEvaluateCoreAttributes::setTotalCreditTransactionsAmount90d(const double &total_credit_transactions_amount_90d) {
    m_total_credit_transactions_amount_90d = total_credit_transactions_amount_90d;
    m_total_credit_transactions_amount_90d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_total_credit_transactions_amount_90d_Set() const{
    return m_total_credit_transactions_amount_90d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_total_credit_transactions_amount_90d_Valid() const{
    return m_total_credit_transactions_amount_90d_isValid;
}

double OAISignalEvaluateCoreAttributes::getTotalDebitTransactionsAmount10d() const {
    return m_total_debit_transactions_amount_10d;
}
void OAISignalEvaluateCoreAttributes::setTotalDebitTransactionsAmount10d(const double &total_debit_transactions_amount_10d) {
    m_total_debit_transactions_amount_10d = total_debit_transactions_amount_10d;
    m_total_debit_transactions_amount_10d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_total_debit_transactions_amount_10d_Set() const{
    return m_total_debit_transactions_amount_10d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_total_debit_transactions_amount_10d_Valid() const{
    return m_total_debit_transactions_amount_10d_isValid;
}

double OAISignalEvaluateCoreAttributes::getTotalDebitTransactionsAmount30d() const {
    return m_total_debit_transactions_amount_30d;
}
void OAISignalEvaluateCoreAttributes::setTotalDebitTransactionsAmount30d(const double &total_debit_transactions_amount_30d) {
    m_total_debit_transactions_amount_30d = total_debit_transactions_amount_30d;
    m_total_debit_transactions_amount_30d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_total_debit_transactions_amount_30d_Set() const{
    return m_total_debit_transactions_amount_30d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_total_debit_transactions_amount_30d_Valid() const{
    return m_total_debit_transactions_amount_30d_isValid;
}

double OAISignalEvaluateCoreAttributes::getTotalDebitTransactionsAmount60d() const {
    return m_total_debit_transactions_amount_60d;
}
void OAISignalEvaluateCoreAttributes::setTotalDebitTransactionsAmount60d(const double &total_debit_transactions_amount_60d) {
    m_total_debit_transactions_amount_60d = total_debit_transactions_amount_60d;
    m_total_debit_transactions_amount_60d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_total_debit_transactions_amount_60d_Set() const{
    return m_total_debit_transactions_amount_60d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_total_debit_transactions_amount_60d_Valid() const{
    return m_total_debit_transactions_amount_60d_isValid;
}

double OAISignalEvaluateCoreAttributes::getTotalDebitTransactionsAmount90d() const {
    return m_total_debit_transactions_amount_90d;
}
void OAISignalEvaluateCoreAttributes::setTotalDebitTransactionsAmount90d(const double &total_debit_transactions_amount_90d) {
    m_total_debit_transactions_amount_90d = total_debit_transactions_amount_90d;
    m_total_debit_transactions_amount_90d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_total_debit_transactions_amount_90d_Set() const{
    return m_total_debit_transactions_amount_90d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_total_debit_transactions_amount_90d_Valid() const{
    return m_total_debit_transactions_amount_90d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getTotalPlaidConnectionsCount() const {
    return m_total_plaid_connections_count;
}
void OAISignalEvaluateCoreAttributes::setTotalPlaidConnectionsCount(const qint32 &total_plaid_connections_count) {
    m_total_plaid_connections_count = total_plaid_connections_count;
    m_total_plaid_connections_count_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_total_plaid_connections_count_Set() const{
    return m_total_plaid_connections_count_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_total_plaid_connections_count_Valid() const{
    return m_total_plaid_connections_count_isValid;
}

QDateTime OAISignalEvaluateCoreAttributes::getTransactionsLastUpdated() const {
    return m_transactions_last_updated;
}
void OAISignalEvaluateCoreAttributes::setTransactionsLastUpdated(const QDateTime &transactions_last_updated) {
    m_transactions_last_updated = transactions_last_updated;
    m_transactions_last_updated_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_transactions_last_updated_Set() const{
    return m_transactions_last_updated_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_transactions_last_updated_Valid() const{
    return m_transactions_last_updated_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getUnauthorizedTransactionsCount30d() const {
    return m_unauthorized_transactions_count_30d;
}
void OAISignalEvaluateCoreAttributes::setUnauthorizedTransactionsCount30d(const qint32 &unauthorized_transactions_count_30d) {
    m_unauthorized_transactions_count_30d = unauthorized_transactions_count_30d;
    m_unauthorized_transactions_count_30d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_unauthorized_transactions_count_30d_Set() const{
    return m_unauthorized_transactions_count_30d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_unauthorized_transactions_count_30d_Valid() const{
    return m_unauthorized_transactions_count_30d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getUnauthorizedTransactionsCount60d() const {
    return m_unauthorized_transactions_count_60d;
}
void OAISignalEvaluateCoreAttributes::setUnauthorizedTransactionsCount60d(const qint32 &unauthorized_transactions_count_60d) {
    m_unauthorized_transactions_count_60d = unauthorized_transactions_count_60d;
    m_unauthorized_transactions_count_60d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_unauthorized_transactions_count_60d_Set() const{
    return m_unauthorized_transactions_count_60d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_unauthorized_transactions_count_60d_Valid() const{
    return m_unauthorized_transactions_count_60d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getUnauthorizedTransactionsCount7d() const {
    return m_unauthorized_transactions_count_7d;
}
void OAISignalEvaluateCoreAttributes::setUnauthorizedTransactionsCount7d(const qint32 &unauthorized_transactions_count_7d) {
    m_unauthorized_transactions_count_7d = unauthorized_transactions_count_7d;
    m_unauthorized_transactions_count_7d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_unauthorized_transactions_count_7d_Set() const{
    return m_unauthorized_transactions_count_7d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_unauthorized_transactions_count_7d_Valid() const{
    return m_unauthorized_transactions_count_7d_isValid;
}

qint32 OAISignalEvaluateCoreAttributes::getUnauthorizedTransactionsCount90d() const {
    return m_unauthorized_transactions_count_90d;
}
void OAISignalEvaluateCoreAttributes::setUnauthorizedTransactionsCount90d(const qint32 &unauthorized_transactions_count_90d) {
    m_unauthorized_transactions_count_90d = unauthorized_transactions_count_90d;
    m_unauthorized_transactions_count_90d_isSet = true;
}

bool OAISignalEvaluateCoreAttributes::is_unauthorized_transactions_count_90d_Set() const{
    return m_unauthorized_transactions_count_90d_isSet;
}

bool OAISignalEvaluateCoreAttributes::is_unauthorized_transactions_count_90d_Valid() const{
    return m_unauthorized_transactions_count_90d_isValid;
}

bool OAISignalEvaluateCoreAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_change_count_28d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_change_count_90d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_transactions_count_10d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_transactions_count_30d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_transactions_count_60d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_transactions_count_90d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_since_first_plaid_connection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_with_negative_balance_count_90d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_transactions_count_10d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_transactions_count_30d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_transactions_count_60d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_transactions_count_90d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_change_count_28d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_change_count_90d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_plaid_non_oauth_authentication_attempts_count_30d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_plaid_non_oauth_authentication_attempts_count_3d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_plaid_non_oauth_authentication_attempts_count_7d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_savings_or_money_market_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsf_overdraft_transactions_count_30d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsf_overdraft_transactions_count_60d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsf_overdraft_transactions_count_7d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsf_overdraft_transactions_count_90d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p10_eod_balance_30d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p10_eod_balance_31d_to_60d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p10_eod_balance_60d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p10_eod_balance_61d_to_90d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p10_eod_balance_90d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p50_credit_transactions_amount_28d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p50_debit_transactions_amount_28d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p50_eod_balance_30d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p50_eod_balance_31d_to_60d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p50_eod_balance_60d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p50_eod_balance_61d_to_90d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p50_eod_balance_90d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p90_eod_balance_30d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p90_eod_balance_31d_to_60d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p90_eod_balance_60d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p90_eod_balance_61d_to_90d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p90_eod_balance_90d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p95_credit_transactions_amount_28d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p95_debit_transactions_amount_28d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_change_count_28d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_change_count_90d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plaid_connections_count_30d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plaid_connections_count_7d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plaid_non_oauth_authentication_attempts_count_30d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plaid_non_oauth_authentication_attempts_count_3d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plaid_non_oauth_authentication_attempts_count_7d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_credit_transactions_amount_10d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_credit_transactions_amount_30d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_credit_transactions_amount_60d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_credit_transactions_amount_90d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_debit_transactions_amount_10d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_debit_transactions_amount_30d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_debit_transactions_amount_60d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_debit_transactions_amount_90d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_plaid_connections_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unauthorized_transactions_count_30d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unauthorized_transactions_count_60d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unauthorized_transactions_count_7d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unauthorized_transactions_count_90d_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISignalEvaluateCoreAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
