/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkTokenCreateRequestUserStatedIncomeSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkTokenCreateRequestUserStatedIncomeSource::OAILinkTokenCreateRequestUserStatedIncomeSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkTokenCreateRequestUserStatedIncomeSource::OAILinkTokenCreateRequestUserStatedIncomeSource() {
    this->initializeModel();
}

OAILinkTokenCreateRequestUserStatedIncomeSource::~OAILinkTokenCreateRequestUserStatedIncomeSource() {}

void OAILinkTokenCreateRequestUserStatedIncomeSource::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_employer_isSet = false;
    m_employer_isValid = false;

    m_pay_annual_isSet = false;
    m_pay_annual_isValid = false;

    m_pay_frequency_isSet = false;
    m_pay_frequency_isValid = false;

    m_pay_per_cycle_isSet = false;
    m_pay_per_cycle_isValid = false;

    m_pay_type_isSet = false;
    m_pay_type_isValid = false;
}

void OAILinkTokenCreateRequestUserStatedIncomeSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinkTokenCreateRequestUserStatedIncomeSource::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_employer_isValid = ::OpenAPI::fromJsonValue(m_employer, json[QString("employer")]);
    m_employer_isSet = !json[QString("employer")].isNull() && m_employer_isValid;

    m_pay_annual_isValid = ::OpenAPI::fromJsonValue(m_pay_annual, json[QString("pay_annual")]);
    m_pay_annual_isSet = !json[QString("pay_annual")].isNull() && m_pay_annual_isValid;

    m_pay_frequency_isValid = ::OpenAPI::fromJsonValue(m_pay_frequency, json[QString("pay_frequency")]);
    m_pay_frequency_isSet = !json[QString("pay_frequency")].isNull() && m_pay_frequency_isValid;

    m_pay_per_cycle_isValid = ::OpenAPI::fromJsonValue(m_pay_per_cycle, json[QString("pay_per_cycle")]);
    m_pay_per_cycle_isSet = !json[QString("pay_per_cycle")].isNull() && m_pay_per_cycle_isValid;

    m_pay_type_isValid = ::OpenAPI::fromJsonValue(m_pay_type, json[QString("pay_type")]);
    m_pay_type_isSet = !json[QString("pay_type")].isNull() && m_pay_type_isValid;
}

QString OAILinkTokenCreateRequestUserStatedIncomeSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinkTokenCreateRequestUserStatedIncomeSource::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_employer_isSet) {
        obj.insert(QString("employer"), ::OpenAPI::toJsonValue(m_employer));
    }
    if (m_pay_annual_isSet) {
        obj.insert(QString("pay_annual"), ::OpenAPI::toJsonValue(m_pay_annual));
    }
    if (m_pay_frequency.isSet()) {
        obj.insert(QString("pay_frequency"), ::OpenAPI::toJsonValue(m_pay_frequency));
    }
    if (m_pay_per_cycle_isSet) {
        obj.insert(QString("pay_per_cycle"), ::OpenAPI::toJsonValue(m_pay_per_cycle));
    }
    if (m_pay_type.isSet()) {
        obj.insert(QString("pay_type"), ::OpenAPI::toJsonValue(m_pay_type));
    }
    return obj;
}

OAIUserStatedIncomeSourceCategory OAILinkTokenCreateRequestUserStatedIncomeSource::getCategory() const {
    return m_category;
}
void OAILinkTokenCreateRequestUserStatedIncomeSource::setCategory(const OAIUserStatedIncomeSourceCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAILinkTokenCreateRequestUserStatedIncomeSource::is_category_Set() const{
    return m_category_isSet;
}

bool OAILinkTokenCreateRequestUserStatedIncomeSource::is_category_Valid() const{
    return m_category_isValid;
}

QString OAILinkTokenCreateRequestUserStatedIncomeSource::getEmployer() const {
    return m_employer;
}
void OAILinkTokenCreateRequestUserStatedIncomeSource::setEmployer(const QString &employer) {
    m_employer = employer;
    m_employer_isSet = true;
}

bool OAILinkTokenCreateRequestUserStatedIncomeSource::is_employer_Set() const{
    return m_employer_isSet;
}

bool OAILinkTokenCreateRequestUserStatedIncomeSource::is_employer_Valid() const{
    return m_employer_isValid;
}

double OAILinkTokenCreateRequestUserStatedIncomeSource::getPayAnnual() const {
    return m_pay_annual;
}
void OAILinkTokenCreateRequestUserStatedIncomeSource::setPayAnnual(const double &pay_annual) {
    m_pay_annual = pay_annual;
    m_pay_annual_isSet = true;
}

bool OAILinkTokenCreateRequestUserStatedIncomeSource::is_pay_annual_Set() const{
    return m_pay_annual_isSet;
}

bool OAILinkTokenCreateRequestUserStatedIncomeSource::is_pay_annual_Valid() const{
    return m_pay_annual_isValid;
}

OAIUserStatedIncomeSourceFrequency OAILinkTokenCreateRequestUserStatedIncomeSource::getPayFrequency() const {
    return m_pay_frequency;
}
void OAILinkTokenCreateRequestUserStatedIncomeSource::setPayFrequency(const OAIUserStatedIncomeSourceFrequency &pay_frequency) {
    m_pay_frequency = pay_frequency;
    m_pay_frequency_isSet = true;
}

bool OAILinkTokenCreateRequestUserStatedIncomeSource::is_pay_frequency_Set() const{
    return m_pay_frequency_isSet;
}

bool OAILinkTokenCreateRequestUserStatedIncomeSource::is_pay_frequency_Valid() const{
    return m_pay_frequency_isValid;
}

double OAILinkTokenCreateRequestUserStatedIncomeSource::getPayPerCycle() const {
    return m_pay_per_cycle;
}
void OAILinkTokenCreateRequestUserStatedIncomeSource::setPayPerCycle(const double &pay_per_cycle) {
    m_pay_per_cycle = pay_per_cycle;
    m_pay_per_cycle_isSet = true;
}

bool OAILinkTokenCreateRequestUserStatedIncomeSource::is_pay_per_cycle_Set() const{
    return m_pay_per_cycle_isSet;
}

bool OAILinkTokenCreateRequestUserStatedIncomeSource::is_pay_per_cycle_Valid() const{
    return m_pay_per_cycle_isValid;
}

OAIUserStatedIncomeSourcePayType OAILinkTokenCreateRequestUserStatedIncomeSource::getPayType() const {
    return m_pay_type;
}
void OAILinkTokenCreateRequestUserStatedIncomeSource::setPayType(const OAIUserStatedIncomeSourcePayType &pay_type) {
    m_pay_type = pay_type;
    m_pay_type_isSet = true;
}

bool OAILinkTokenCreateRequestUserStatedIncomeSource::is_pay_type_Set() const{
    return m_pay_type_isSet;
}

bool OAILinkTokenCreateRequestUserStatedIncomeSource::is_pay_type_Valid() const{
    return m_pay_type_isValid;
}

bool OAILinkTokenCreateRequestUserStatedIncomeSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_annual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_per_cycle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinkTokenCreateRequestUserStatedIncomeSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
