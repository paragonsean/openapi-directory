/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhysicalDocumentImages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhysicalDocumentImages::OAIPhysicalDocumentImages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhysicalDocumentImages::OAIPhysicalDocumentImages() {
    this->initializeModel();
}

OAIPhysicalDocumentImages::~OAIPhysicalDocumentImages() {}

void OAIPhysicalDocumentImages::initializeModel() {

    m_cropped_back_isSet = false;
    m_cropped_back_isValid = false;

    m_cropped_front_isSet = false;
    m_cropped_front_isValid = false;

    m_face_isSet = false;
    m_face_isValid = false;

    m_original_back_isSet = false;
    m_original_back_isValid = false;

    m_original_front_isSet = false;
    m_original_front_isValid = false;
}

void OAIPhysicalDocumentImages::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhysicalDocumentImages::fromJsonObject(QJsonObject json) {

    m_cropped_back_isValid = ::OpenAPI::fromJsonValue(m_cropped_back, json[QString("cropped_back")]);
    m_cropped_back_isSet = !json[QString("cropped_back")].isNull() && m_cropped_back_isValid;

    m_cropped_front_isValid = ::OpenAPI::fromJsonValue(m_cropped_front, json[QString("cropped_front")]);
    m_cropped_front_isSet = !json[QString("cropped_front")].isNull() && m_cropped_front_isValid;

    m_face_isValid = ::OpenAPI::fromJsonValue(m_face, json[QString("face")]);
    m_face_isSet = !json[QString("face")].isNull() && m_face_isValid;

    m_original_back_isValid = ::OpenAPI::fromJsonValue(m_original_back, json[QString("original_back")]);
    m_original_back_isSet = !json[QString("original_back")].isNull() && m_original_back_isValid;

    m_original_front_isValid = ::OpenAPI::fromJsonValue(m_original_front, json[QString("original_front")]);
    m_original_front_isSet = !json[QString("original_front")].isNull() && m_original_front_isValid;
}

QString OAIPhysicalDocumentImages::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhysicalDocumentImages::asJsonObject() const {
    QJsonObject obj;
    if (m_cropped_back_isSet) {
        obj.insert(QString("cropped_back"), ::OpenAPI::toJsonValue(m_cropped_back));
    }
    if (m_cropped_front_isSet) {
        obj.insert(QString("cropped_front"), ::OpenAPI::toJsonValue(m_cropped_front));
    }
    if (m_face_isSet) {
        obj.insert(QString("face"), ::OpenAPI::toJsonValue(m_face));
    }
    if (m_original_back_isSet) {
        obj.insert(QString("original_back"), ::OpenAPI::toJsonValue(m_original_back));
    }
    if (m_original_front_isSet) {
        obj.insert(QString("original_front"), ::OpenAPI::toJsonValue(m_original_front));
    }
    return obj;
}

QString OAIPhysicalDocumentImages::getCroppedBack() const {
    return m_cropped_back;
}
void OAIPhysicalDocumentImages::setCroppedBack(const QString &cropped_back) {
    m_cropped_back = cropped_back;
    m_cropped_back_isSet = true;
}

bool OAIPhysicalDocumentImages::is_cropped_back_Set() const{
    return m_cropped_back_isSet;
}

bool OAIPhysicalDocumentImages::is_cropped_back_Valid() const{
    return m_cropped_back_isValid;
}

QString OAIPhysicalDocumentImages::getCroppedFront() const {
    return m_cropped_front;
}
void OAIPhysicalDocumentImages::setCroppedFront(const QString &cropped_front) {
    m_cropped_front = cropped_front;
    m_cropped_front_isSet = true;
}

bool OAIPhysicalDocumentImages::is_cropped_front_Set() const{
    return m_cropped_front_isSet;
}

bool OAIPhysicalDocumentImages::is_cropped_front_Valid() const{
    return m_cropped_front_isValid;
}

QString OAIPhysicalDocumentImages::getFace() const {
    return m_face;
}
void OAIPhysicalDocumentImages::setFace(const QString &face) {
    m_face = face;
    m_face_isSet = true;
}

bool OAIPhysicalDocumentImages::is_face_Set() const{
    return m_face_isSet;
}

bool OAIPhysicalDocumentImages::is_face_Valid() const{
    return m_face_isValid;
}

QString OAIPhysicalDocumentImages::getOriginalBack() const {
    return m_original_back;
}
void OAIPhysicalDocumentImages::setOriginalBack(const QString &original_back) {
    m_original_back = original_back;
    m_original_back_isSet = true;
}

bool OAIPhysicalDocumentImages::is_original_back_Set() const{
    return m_original_back_isSet;
}

bool OAIPhysicalDocumentImages::is_original_back_Valid() const{
    return m_original_back_isValid;
}

QString OAIPhysicalDocumentImages::getOriginalFront() const {
    return m_original_front;
}
void OAIPhysicalDocumentImages::setOriginalFront(const QString &original_front) {
    m_original_front = original_front;
    m_original_front_isSet = true;
}

bool OAIPhysicalDocumentImages::is_original_front_Set() const{
    return m_original_front_isSet;
}

bool OAIPhysicalDocumentImages::is_original_front_Valid() const{
    return m_original_front_isValid;
}

bool OAIPhysicalDocumentImages::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cropped_back_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cropped_front_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_back_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_front_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhysicalDocumentImages::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cropped_back_isValid && m_cropped_front_isValid && m_face_isValid && m_original_back_isValid && m_original_front_isValid && true;
}

} // namespace OpenAPI
