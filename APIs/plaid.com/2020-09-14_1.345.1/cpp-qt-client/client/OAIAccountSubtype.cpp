/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountSubtype.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountSubtype::OAIAccountSubtype(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountSubtype::OAIAccountSubtype() {
    this->initializeModel();
}

OAIAccountSubtype::~OAIAccountSubtype() {}

void OAIAccountSubtype::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAccountSubtype::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAccountSubtype::fromJson(QString jsonString) {
    
    if ( jsonString.compare("401a", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::_401A;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("401k", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::_401K;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("403B", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::_403B;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("457b", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::_457B;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("529", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::_529;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("brokerage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::BROKERAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cash isa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::CASH_ISA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("crypto exchange", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::CRYPTO_EXCHANGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("education savings account", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::EDUCATION_SAVINGS_ACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ebt", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::EBT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fixed annuity", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::FIXED_ANNUITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("gic", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::GIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("health reimbursement arrangement", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::HEALTH_REIMBURSEMENT_ARRANGEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hsa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::HSA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("isa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::ISA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ira", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::IRA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lif", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::LIF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("life insurance", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::LIFE_INSURANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lira", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::LIRA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lrif", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::LRIF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lrsp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::LRSP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("non-custodial wallet", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::NON_CUSTODIAL_WALLET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("non-taxable brokerage account", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::NON_TAXABLE_BROKERAGE_ACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("other", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("other insurance", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::OTHER_INSURANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("other annuity", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::OTHER_ANNUITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("prif", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::PRIF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rdsp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::RDSP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("resp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::RESP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rlif", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::RLIF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rrif", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::RRIF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pension", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::PENSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("profit sharing plan", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::PROFIT_SHARING_PLAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("retirement", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::RETIREMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("roth", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::ROTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("roth 401k", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::ROTH_401K;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rrsp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::RRSP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sep ira", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::SEP_IRA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("simple ira", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::SIMPLE_IRA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sipp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::SIPP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("stock plan", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::STOCK_PLAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("thrift savings plan", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::THRIFT_SAVINGS_PLAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tfsa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::TFSA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("trust", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::TRUST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ugma", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::UGMA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("utma", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::UTMA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("variable annuity", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::VARIABLE_ANNUITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("credit card", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::CREDIT_CARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("paypal", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::PAYPAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cd", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::CD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("checking", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::CHECKING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("savings", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::SAVINGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("money market", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::MONEY_MARKET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("prepaid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::PREPAID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("auto", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::AUTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("business", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::BUSINESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("commercial", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::COMMERCIAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("construction", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::CONSTRUCTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("consumer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::CONSUMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("home equity", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::HOME_EQUITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("loan", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::LOAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mortgage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::MORTGAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("overdraft", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::OVERDRAFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("line of credit", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::LINE_OF_CREDIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("student", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::STUDENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cash management", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::CASH_MANAGEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("keogh", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::KEOGH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mutual fund", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::MUTUAL_FUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("recurring", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::RECURRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rewards", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::REWARDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("safe deposit", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::SAFE_DEPOSIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sarsep", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::SARSEP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("payroll", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountSubtype::PAYROLL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAccountSubtype::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAccountSubtype::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAccountSubtype::_401A:
            val = "401a";
            break;
        case eOAIAccountSubtype::_401K:
            val = "401k";
            break;
        case eOAIAccountSubtype::_403B:
            val = "403B";
            break;
        case eOAIAccountSubtype::_457B:
            val = "457b";
            break;
        case eOAIAccountSubtype::_529:
            val = "529";
            break;
        case eOAIAccountSubtype::BROKERAGE:
            val = "brokerage";
            break;
        case eOAIAccountSubtype::CASH_ISA:
            val = "cash isa";
            break;
        case eOAIAccountSubtype::CRYPTO_EXCHANGE:
            val = "crypto exchange";
            break;
        case eOAIAccountSubtype::EDUCATION_SAVINGS_ACCOUNT:
            val = "education savings account";
            break;
        case eOAIAccountSubtype::EBT:
            val = "ebt";
            break;
        case eOAIAccountSubtype::FIXED_ANNUITY:
            val = "fixed annuity";
            break;
        case eOAIAccountSubtype::GIC:
            val = "gic";
            break;
        case eOAIAccountSubtype::HEALTH_REIMBURSEMENT_ARRANGEMENT:
            val = "health reimbursement arrangement";
            break;
        case eOAIAccountSubtype::HSA:
            val = "hsa";
            break;
        case eOAIAccountSubtype::ISA:
            val = "isa";
            break;
        case eOAIAccountSubtype::IRA:
            val = "ira";
            break;
        case eOAIAccountSubtype::LIF:
            val = "lif";
            break;
        case eOAIAccountSubtype::LIFE_INSURANCE:
            val = "life insurance";
            break;
        case eOAIAccountSubtype::LIRA:
            val = "lira";
            break;
        case eOAIAccountSubtype::LRIF:
            val = "lrif";
            break;
        case eOAIAccountSubtype::LRSP:
            val = "lrsp";
            break;
        case eOAIAccountSubtype::NON_CUSTODIAL_WALLET:
            val = "non-custodial wallet";
            break;
        case eOAIAccountSubtype::NON_TAXABLE_BROKERAGE_ACCOUNT:
            val = "non-taxable brokerage account";
            break;
        case eOAIAccountSubtype::OTHER:
            val = "other";
            break;
        case eOAIAccountSubtype::OTHER_INSURANCE:
            val = "other insurance";
            break;
        case eOAIAccountSubtype::OTHER_ANNUITY:
            val = "other annuity";
            break;
        case eOAIAccountSubtype::PRIF:
            val = "prif";
            break;
        case eOAIAccountSubtype::RDSP:
            val = "rdsp";
            break;
        case eOAIAccountSubtype::RESP:
            val = "resp";
            break;
        case eOAIAccountSubtype::RLIF:
            val = "rlif";
            break;
        case eOAIAccountSubtype::RRIF:
            val = "rrif";
            break;
        case eOAIAccountSubtype::PENSION:
            val = "pension";
            break;
        case eOAIAccountSubtype::PROFIT_SHARING_PLAN:
            val = "profit sharing plan";
            break;
        case eOAIAccountSubtype::RETIREMENT:
            val = "retirement";
            break;
        case eOAIAccountSubtype::ROTH:
            val = "roth";
            break;
        case eOAIAccountSubtype::ROTH_401K:
            val = "roth 401k";
            break;
        case eOAIAccountSubtype::RRSP:
            val = "rrsp";
            break;
        case eOAIAccountSubtype::SEP_IRA:
            val = "sep ira";
            break;
        case eOAIAccountSubtype::SIMPLE_IRA:
            val = "simple ira";
            break;
        case eOAIAccountSubtype::SIPP:
            val = "sipp";
            break;
        case eOAIAccountSubtype::STOCK_PLAN:
            val = "stock plan";
            break;
        case eOAIAccountSubtype::THRIFT_SAVINGS_PLAN:
            val = "thrift savings plan";
            break;
        case eOAIAccountSubtype::TFSA:
            val = "tfsa";
            break;
        case eOAIAccountSubtype::TRUST:
            val = "trust";
            break;
        case eOAIAccountSubtype::UGMA:
            val = "ugma";
            break;
        case eOAIAccountSubtype::UTMA:
            val = "utma";
            break;
        case eOAIAccountSubtype::VARIABLE_ANNUITY:
            val = "variable annuity";
            break;
        case eOAIAccountSubtype::CREDIT_CARD:
            val = "credit card";
            break;
        case eOAIAccountSubtype::PAYPAL:
            val = "paypal";
            break;
        case eOAIAccountSubtype::CD:
            val = "cd";
            break;
        case eOAIAccountSubtype::CHECKING:
            val = "checking";
            break;
        case eOAIAccountSubtype::SAVINGS:
            val = "savings";
            break;
        case eOAIAccountSubtype::MONEY_MARKET:
            val = "money market";
            break;
        case eOAIAccountSubtype::PREPAID:
            val = "prepaid";
            break;
        case eOAIAccountSubtype::AUTO:
            val = "auto";
            break;
        case eOAIAccountSubtype::BUSINESS:
            val = "business";
            break;
        case eOAIAccountSubtype::COMMERCIAL:
            val = "commercial";
            break;
        case eOAIAccountSubtype::CONSTRUCTION:
            val = "construction";
            break;
        case eOAIAccountSubtype::CONSUMER:
            val = "consumer";
            break;
        case eOAIAccountSubtype::HOME_EQUITY:
            val = "home equity";
            break;
        case eOAIAccountSubtype::LOAN:
            val = "loan";
            break;
        case eOAIAccountSubtype::MORTGAGE:
            val = "mortgage";
            break;
        case eOAIAccountSubtype::OVERDRAFT:
            val = "overdraft";
            break;
        case eOAIAccountSubtype::LINE_OF_CREDIT:
            val = "line of credit";
            break;
        case eOAIAccountSubtype::STUDENT:
            val = "student";
            break;
        case eOAIAccountSubtype::CASH_MANAGEMENT:
            val = "cash management";
            break;
        case eOAIAccountSubtype::KEOGH:
            val = "keogh";
            break;
        case eOAIAccountSubtype::MUTUAL_FUND:
            val = "mutual fund";
            break;
        case eOAIAccountSubtype::RECURRING:
            val = "recurring";
            break;
        case eOAIAccountSubtype::REWARDS:
            val = "rewards";
            break;
        case eOAIAccountSubtype::SAFE_DEPOSIT:
            val = "safe deposit";
            break;
        case eOAIAccountSubtype::SARSEP:
            val = "sarsep";
            break;
        case eOAIAccountSubtype::PAYROLL:
            val = "payroll";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAccountSubtype::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAccountSubtype::eOAIAccountSubtype OAIAccountSubtype::getValue() const {
    return m_value;
}

void OAIAccountSubtype::setValue(const OAIAccountSubtype::eOAIAccountSubtype& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAccountSubtype::isSet() const {
    
    return m_value_isSet;
}

bool OAIAccountSubtype::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
