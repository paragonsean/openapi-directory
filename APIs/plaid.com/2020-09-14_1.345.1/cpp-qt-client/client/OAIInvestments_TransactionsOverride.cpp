/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvestments_TransactionsOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvestments_TransactionsOverride::OAIInvestments_TransactionsOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvestments_TransactionsOverride::OAIInvestments_TransactionsOverride() {
    this->initializeModel();
}

OAIInvestments_TransactionsOverride::~OAIInvestments_TransactionsOverride() {}

void OAIInvestments_TransactionsOverride::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_fees_isSet = false;
    m_fees_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_security_isSet = false;
    m_security_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIInvestments_TransactionsOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvestments_TransactionsOverride::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_fees_isValid = ::OpenAPI::fromJsonValue(m_fees, json[QString("fees")]);
    m_fees_isSet = !json[QString("fees")].isNull() && m_fees_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_security_isValid = ::OpenAPI::fromJsonValue(m_security, json[QString("security")]);
    m_security_isSet = !json[QString("security")].isNull() && m_security_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIInvestments_TransactionsOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvestments_TransactionsOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_fees_isSet) {
        obj.insert(QString("fees"), ::OpenAPI::toJsonValue(m_fees));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_security.isSet()) {
        obj.insert(QString("security"), ::OpenAPI::toJsonValue(m_security));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIInvestments_TransactionsOverride::getCurrency() const {
    return m_currency;
}
void OAIInvestments_TransactionsOverride::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIInvestments_TransactionsOverride::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIInvestments_TransactionsOverride::is_currency_Valid() const{
    return m_currency_isValid;
}

QDate OAIInvestments_TransactionsOverride::getDate() const {
    return m_date;
}
void OAIInvestments_TransactionsOverride::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIInvestments_TransactionsOverride::is_date_Set() const{
    return m_date_isSet;
}

bool OAIInvestments_TransactionsOverride::is_date_Valid() const{
    return m_date_isValid;
}

double OAIInvestments_TransactionsOverride::getFees() const {
    return m_fees;
}
void OAIInvestments_TransactionsOverride::setFees(const double &fees) {
    m_fees = fees;
    m_fees_isSet = true;
}

bool OAIInvestments_TransactionsOverride::is_fees_Set() const{
    return m_fees_isSet;
}

bool OAIInvestments_TransactionsOverride::is_fees_Valid() const{
    return m_fees_isValid;
}

QString OAIInvestments_TransactionsOverride::getName() const {
    return m_name;
}
void OAIInvestments_TransactionsOverride::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInvestments_TransactionsOverride::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInvestments_TransactionsOverride::is_name_Valid() const{
    return m_name_isValid;
}

double OAIInvestments_TransactionsOverride::getPrice() const {
    return m_price;
}
void OAIInvestments_TransactionsOverride::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIInvestments_TransactionsOverride::is_price_Set() const{
    return m_price_isSet;
}

bool OAIInvestments_TransactionsOverride::is_price_Valid() const{
    return m_price_isValid;
}

double OAIInvestments_TransactionsOverride::getQuantity() const {
    return m_quantity;
}
void OAIInvestments_TransactionsOverride::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIInvestments_TransactionsOverride::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIInvestments_TransactionsOverride::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAISecurityOverride OAIInvestments_TransactionsOverride::getSecurity() const {
    return m_security;
}
void OAIInvestments_TransactionsOverride::setSecurity(const OAISecurityOverride &security) {
    m_security = security;
    m_security_isSet = true;
}

bool OAIInvestments_TransactionsOverride::is_security_Set() const{
    return m_security_isSet;
}

bool OAIInvestments_TransactionsOverride::is_security_Valid() const{
    return m_security_isValid;
}

QString OAIInvestments_TransactionsOverride::getType() const {
    return m_type;
}
void OAIInvestments_TransactionsOverride::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInvestments_TransactionsOverride::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInvestments_TransactionsOverride::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIInvestments_TransactionsOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvestments_TransactionsOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_isValid && m_date_isValid && m_name_isValid && m_price_isValid && m_quantity_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
