/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityWatchlistScreening.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityWatchlistScreening::OAIEntityWatchlistScreening(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityWatchlistScreening::OAIEntityWatchlistScreening() {
    this->initializeModel();
}

OAIEntityWatchlistScreening::~OAIEntityWatchlistScreening() {}

void OAIEntityWatchlistScreening::initializeModel() {

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_audit_trail_isSet = false;
    m_audit_trail_isValid = false;

    m_client_user_id_isSet = false;
    m_client_user_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_search_terms_isSet = false;
    m_search_terms_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIEntityWatchlistScreening::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityWatchlistScreening::fromJsonObject(QJsonObject json) {

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_audit_trail_isValid = ::OpenAPI::fromJsonValue(m_audit_trail, json[QString("audit_trail")]);
    m_audit_trail_isSet = !json[QString("audit_trail")].isNull() && m_audit_trail_isValid;

    m_client_user_id_isValid = ::OpenAPI::fromJsonValue(m_client_user_id, json[QString("client_user_id")]);
    m_client_user_id_isSet = !json[QString("client_user_id")].isNull() && m_client_user_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_search_terms_isValid = ::OpenAPI::fromJsonValue(m_search_terms, json[QString("search_terms")]);
    m_search_terms_isSet = !json[QString("search_terms")].isNull() && m_search_terms_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIEntityWatchlistScreening::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityWatchlistScreening::asJsonObject() const {
    QJsonObject obj;
    if (m_assignee_isSet) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_audit_trail.isSet()) {
        obj.insert(QString("audit_trail"), ::OpenAPI::toJsonValue(m_audit_trail));
    }
    if (m_client_user_id_isSet) {
        obj.insert(QString("client_user_id"), ::OpenAPI::toJsonValue(m_client_user_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_search_terms.isSet()) {
        obj.insert(QString("search_terms"), ::OpenAPI::toJsonValue(m_search_terms));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIEntityWatchlistScreening::getAssignee() const {
    return m_assignee;
}
void OAIEntityWatchlistScreening::setAssignee(const QString &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAIEntityWatchlistScreening::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAIEntityWatchlistScreening::is_assignee_Valid() const{
    return m_assignee_isValid;
}

OAIWatchlistScreeningAuditTrail OAIEntityWatchlistScreening::getAuditTrail() const {
    return m_audit_trail;
}
void OAIEntityWatchlistScreening::setAuditTrail(const OAIWatchlistScreeningAuditTrail &audit_trail) {
    m_audit_trail = audit_trail;
    m_audit_trail_isSet = true;
}

bool OAIEntityWatchlistScreening::is_audit_trail_Set() const{
    return m_audit_trail_isSet;
}

bool OAIEntityWatchlistScreening::is_audit_trail_Valid() const{
    return m_audit_trail_isValid;
}

QString OAIEntityWatchlistScreening::getClientUserId() const {
    return m_client_user_id;
}
void OAIEntityWatchlistScreening::setClientUserId(const QString &client_user_id) {
    m_client_user_id = client_user_id;
    m_client_user_id_isSet = true;
}

bool OAIEntityWatchlistScreening::is_client_user_id_Set() const{
    return m_client_user_id_isSet;
}

bool OAIEntityWatchlistScreening::is_client_user_id_Valid() const{
    return m_client_user_id_isValid;
}

QString OAIEntityWatchlistScreening::getId() const {
    return m_id;
}
void OAIEntityWatchlistScreening::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEntityWatchlistScreening::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEntityWatchlistScreening::is_id_Valid() const{
    return m_id_isValid;
}

OAIEntityWatchlistScreeningSearchTerms OAIEntityWatchlistScreening::getSearchTerms() const {
    return m_search_terms;
}
void OAIEntityWatchlistScreening::setSearchTerms(const OAIEntityWatchlistScreeningSearchTerms &search_terms) {
    m_search_terms = search_terms;
    m_search_terms_isSet = true;
}

bool OAIEntityWatchlistScreening::is_search_terms_Set() const{
    return m_search_terms_isSet;
}

bool OAIEntityWatchlistScreening::is_search_terms_Valid() const{
    return m_search_terms_isValid;
}

OAIWatchlistScreeningStatus OAIEntityWatchlistScreening::getStatus() const {
    return m_status;
}
void OAIEntityWatchlistScreening::setStatus(const OAIWatchlistScreeningStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEntityWatchlistScreening::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEntityWatchlistScreening::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIEntityWatchlistScreening::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audit_trail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_terms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityWatchlistScreening::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assignee_isValid && m_audit_trail_isValid && m_client_user_id_isValid && m_id_isValid && m_search_terms_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
