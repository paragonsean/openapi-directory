/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplication::OAIApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplication::OAIApplication() {
    this->initializeModel();
}

OAIApplication::~OAIApplication() {}

void OAIApplication::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_application_url_isSet = false;
    m_application_url_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_company_legal_name_isSet = false;
    m_company_legal_name_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_join_date_isSet = false;
    m_join_date_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_reason_for_access_isSet = false;
    m_reason_for_access_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_use_case_isSet = false;
    m_use_case_isValid = false;
}

void OAIApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplication::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("application_id")]);
    m_application_id_isSet = !json[QString("application_id")].isNull() && m_application_id_isValid;

    m_application_url_isValid = ::OpenAPI::fromJsonValue(m_application_url, json[QString("application_url")]);
    m_application_url_isSet = !json[QString("application_url")].isNull() && m_application_url_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_company_legal_name_isValid = ::OpenAPI::fromJsonValue(m_company_legal_name, json[QString("company_legal_name")]);
    m_company_legal_name_isSet = !json[QString("company_legal_name")].isNull() && m_company_legal_name_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_join_date_isValid = ::OpenAPI::fromJsonValue(m_join_date, json[QString("join_date")]);
    m_join_date_isSet = !json[QString("join_date")].isNull() && m_join_date_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logo_url")]);
    m_logo_url_isSet = !json[QString("logo_url")].isNull() && m_logo_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;

    m_reason_for_access_isValid = ::OpenAPI::fromJsonValue(m_reason_for_access, json[QString("reason_for_access")]);
    m_reason_for_access_isSet = !json[QString("reason_for_access")].isNull() && m_reason_for_access_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_use_case_isValid = ::OpenAPI::fromJsonValue(m_use_case, json[QString("use_case")]);
    m_use_case_isSet = !json[QString("use_case")].isNull() && m_use_case_isValid;
}

QString OAIApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("application_id"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_application_url_isSet) {
        obj.insert(QString("application_url"), ::OpenAPI::toJsonValue(m_application_url));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_company_legal_name_isSet) {
        obj.insert(QString("company_legal_name"), ::OpenAPI::toJsonValue(m_company_legal_name));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_join_date_isSet) {
        obj.insert(QString("join_date"), ::OpenAPI::toJsonValue(m_join_date));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logo_url"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_reason_for_access_isSet) {
        obj.insert(QString("reason_for_access"), ::OpenAPI::toJsonValue(m_reason_for_access));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_use_case_isSet) {
        obj.insert(QString("use_case"), ::OpenAPI::toJsonValue(m_use_case));
    }
    return obj;
}

QString OAIApplication::getApplicationId() const {
    return m_application_id;
}
void OAIApplication::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIApplication::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIApplication::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIApplication::getApplicationUrl() const {
    return m_application_url;
}
void OAIApplication::setApplicationUrl(const QString &application_url) {
    m_application_url = application_url;
    m_application_url_isSet = true;
}

bool OAIApplication::is_application_url_Set() const{
    return m_application_url_isSet;
}

bool OAIApplication::is_application_url_Valid() const{
    return m_application_url_isValid;
}

QString OAIApplication::getCity() const {
    return m_city;
}
void OAIApplication::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIApplication::is_city_Set() const{
    return m_city_isSet;
}

bool OAIApplication::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIApplication::getCompanyLegalName() const {
    return m_company_legal_name;
}
void OAIApplication::setCompanyLegalName(const QString &company_legal_name) {
    m_company_legal_name = company_legal_name;
    m_company_legal_name_isSet = true;
}

bool OAIApplication::is_company_legal_name_Set() const{
    return m_company_legal_name_isSet;
}

bool OAIApplication::is_company_legal_name_Valid() const{
    return m_company_legal_name_isValid;
}

QString OAIApplication::getCountryCode() const {
    return m_country_code;
}
void OAIApplication::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIApplication::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIApplication::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIApplication::getDisplayName() const {
    return m_display_name;
}
void OAIApplication::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIApplication::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIApplication::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QDate OAIApplication::getJoinDate() const {
    return m_join_date;
}
void OAIApplication::setJoinDate(const QDate &join_date) {
    m_join_date = join_date;
    m_join_date_isSet = true;
}

bool OAIApplication::is_join_date_Set() const{
    return m_join_date_isSet;
}

bool OAIApplication::is_join_date_Valid() const{
    return m_join_date_isValid;
}

QString OAIApplication::getLogoUrl() const {
    return m_logo_url;
}
void OAIApplication::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIApplication::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIApplication::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAIApplication::getName() const {
    return m_name;
}
void OAIApplication::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplication::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplication::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApplication::getPostalCode() const {
    return m_postal_code;
}
void OAIApplication::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIApplication::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIApplication::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIApplication::getReasonForAccess() const {
    return m_reason_for_access;
}
void OAIApplication::setReasonForAccess(const QString &reason_for_access) {
    m_reason_for_access = reason_for_access;
    m_reason_for_access_isSet = true;
}

bool OAIApplication::is_reason_for_access_Set() const{
    return m_reason_for_access_isSet;
}

bool OAIApplication::is_reason_for_access_Valid() const{
    return m_reason_for_access_isValid;
}

QString OAIApplication::getRegion() const {
    return m_region;
}
void OAIApplication::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIApplication::is_region_Set() const{
    return m_region_isSet;
}

bool OAIApplication::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIApplication::getUseCase() const {
    return m_use_case;
}
void OAIApplication::setUseCase(const QString &use_case) {
    m_use_case = use_case;
    m_use_case_isSet = true;
}

bool OAIApplication::is_use_case_Set() const{
    return m_use_case_isSet;
}

bool OAIApplication::is_use_case_Valid() const{
    return m_use_case_isValid;
}

bool OAIApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_legal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_for_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_case_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && m_application_url_isValid && m_city_isValid && m_company_legal_name_isValid && m_country_code_isValid && m_display_name_isValid && m_join_date_isValid && m_logo_url_isValid && m_name_isValid && m_postal_code_isValid && m_reason_for_access_isValid && m_region_isValid && m_use_case_isValid && true;
}

} // namespace OpenAPI
