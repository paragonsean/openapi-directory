/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferAuthorizationGuaranteeDecisionRationaleCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferAuthorizationGuaranteeDecisionRationaleCode::OAITransferAuthorizationGuaranteeDecisionRationaleCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferAuthorizationGuaranteeDecisionRationaleCode::OAITransferAuthorizationGuaranteeDecisionRationaleCode() {
    this->initializeModel();
}

OAITransferAuthorizationGuaranteeDecisionRationaleCode::~OAITransferAuthorizationGuaranteeDecisionRationaleCode() {}

void OAITransferAuthorizationGuaranteeDecisionRationaleCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITransferAuthorizationGuaranteeDecisionRationaleCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITransferAuthorizationGuaranteeDecisionRationaleCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("RETURN_BANK", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransferAuthorizationGuaranteeDecisionRationaleCode::RETURN_BANK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RETURN_CUSTOMER", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransferAuthorizationGuaranteeDecisionRationaleCode::RETURN_CUSTOMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GUARANTEE_LIMIT_REACHED", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransferAuthorizationGuaranteeDecisionRationaleCode::GUARANTEE_LIMIT_REACHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RISK_ESTIMATE_UNAVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransferAuthorizationGuaranteeDecisionRationaleCode::RISK_ESTIMATE_UNAVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REQUIRED_PARAM_MISSING", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransferAuthorizationGuaranteeDecisionRationaleCode::REQUIRED_PARAM_MISSING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITransferAuthorizationGuaranteeDecisionRationaleCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITransferAuthorizationGuaranteeDecisionRationaleCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITransferAuthorizationGuaranteeDecisionRationaleCode::RETURN_BANK:
            val = "RETURN_BANK";
            break;
        case eOAITransferAuthorizationGuaranteeDecisionRationaleCode::RETURN_CUSTOMER:
            val = "RETURN_CUSTOMER";
            break;
        case eOAITransferAuthorizationGuaranteeDecisionRationaleCode::GUARANTEE_LIMIT_REACHED:
            val = "GUARANTEE_LIMIT_REACHED";
            break;
        case eOAITransferAuthorizationGuaranteeDecisionRationaleCode::RISK_ESTIMATE_UNAVAILABLE:
            val = "RISK_ESTIMATE_UNAVAILABLE";
            break;
        case eOAITransferAuthorizationGuaranteeDecisionRationaleCode::REQUIRED_PARAM_MISSING:
            val = "REQUIRED_PARAM_MISSING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITransferAuthorizationGuaranteeDecisionRationaleCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITransferAuthorizationGuaranteeDecisionRationaleCode::eOAITransferAuthorizationGuaranteeDecisionRationaleCode OAITransferAuthorizationGuaranteeDecisionRationaleCode::getValue() const {
    return m_value;
}

void OAITransferAuthorizationGuaranteeDecisionRationaleCode::setValue(const OAITransferAuthorizationGuaranteeDecisionRationaleCode::eOAITransferAuthorizationGuaranteeDecisionRationaleCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITransferAuthorizationGuaranteeDecisionRationaleCode::isSet() const {
    
    return m_value_isSet;
}

bool OAITransferAuthorizationGuaranteeDecisionRationaleCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
