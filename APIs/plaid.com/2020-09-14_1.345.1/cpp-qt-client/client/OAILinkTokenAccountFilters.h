/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILinkTokenAccountFilters.h
 *
 * By default, Link will provide limited account filtering: it will only display Institutions that are compatible with all products supplied in the &#x60;products&#x60; parameter of &#x60;/link/token/create&#x60;, and, if &#x60;auth&#x60; is specified in the &#x60;products&#x60; array, will also filter out accounts other than &#x60;checking&#x60; and &#x60;savings&#x60; accounts on the Account Select pane. You can further limit the accounts shown in Link by using &#x60;account_filters&#x60; to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value &#x60;\&quot;all\&quot;&#x60;. If the &#x60;account_filters&#x60; filter is used, any account type for which a filter is not specified will be entirely omitted from Link. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).  For institutions using OAuth, the filter will not affect the list of accounts shown by the bank in the OAuth window. 
 */

#ifndef OAILinkTokenAccountFilters_H
#define OAILinkTokenAccountFilters_H

#include <QJsonObject>

#include "OAICreditFilter.h"
#include "OAIDepositoryFilter.h"
#include "OAIInvestmentFilter.h"
#include "OAILoanFilter.h"
#include <QJsonValue>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILinkTokenAccountFilters : public OAIObject {
public:
    OAILinkTokenAccountFilters();
    OAILinkTokenAccountFilters(QString json);
    ~OAILinkTokenAccountFilters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICreditFilter getCredit() const;
    void setCredit(const OAICreditFilter &credit);
    bool is_credit_Set() const;
    bool is_credit_Valid() const;

    OAIDepositoryFilter getDepository() const;
    void setDepository(const OAIDepositoryFilter &depository);
    bool is_depository_Set() const;
    bool is_depository_Valid() const;

    OAIInvestmentFilter getInvestment() const;
    void setInvestment(const OAIInvestmentFilter &investment);
    bool is_investment_Set() const;
    bool is_investment_Valid() const;

    OAILoanFilter getLoan() const;
    void setLoan(const OAILoanFilter &loan);
    bool is_loan_Set() const;
    bool is_loan_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICreditFilter m_credit;
    bool m_credit_isSet;
    bool m_credit_isValid;

    OAIDepositoryFilter m_depository;
    bool m_depository_isSet;
    bool m_depository_isValid;

    OAIInvestmentFilter m_investment;
    bool m_investment_isSet;
    bool m_investment_isValid;

    OAILoanFilter m_loan;
    bool m_loan_isSet;
    bool m_loan_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILinkTokenAccountFilters)

#endif // OAILinkTokenAccountFilters_H
