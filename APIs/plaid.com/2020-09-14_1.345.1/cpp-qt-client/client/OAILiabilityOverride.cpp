/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiabilityOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiabilityOverride::OAILiabilityOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiabilityOverride::OAILiabilityOverride() {
    this->initializeModel();
}

OAILiabilityOverride::~OAILiabilityOverride() {}

void OAILiabilityOverride::initializeModel() {

    m_balance_transfer_apr_isSet = false;
    m_balance_transfer_apr_isValid = false;

    m_cash_apr_isSet = false;
    m_cash_apr_isValid = false;

    m_expected_payoff_date_isSet = false;
    m_expected_payoff_date_isValid = false;

    m_guarantor_isSet = false;
    m_guarantor_isValid = false;

    m_interest_capitalization_grace_period_months_isSet = false;
    m_interest_capitalization_grace_period_months_isValid = false;

    m_is_federal_isSet = false;
    m_is_federal_isValid = false;

    m_is_overdue_isSet = false;
    m_is_overdue_isValid = false;

    m_last_payment_amount_isSet = false;
    m_last_payment_amount_isValid = false;

    m_loan_name_isSet = false;
    m_loan_name_isValid = false;

    m_loan_status_isSet = false;
    m_loan_status_isValid = false;

    m_minimum_payment_amount_isSet = false;
    m_minimum_payment_amount_isValid = false;

    m_nominal_apr_isSet = false;
    m_nominal_apr_isValid = false;

    m_origination_date_isSet = false;
    m_origination_date_isValid = false;

    m_payment_reference_number_isSet = false;
    m_payment_reference_number_isValid = false;

    m_principal_isSet = false;
    m_principal_isValid = false;

    m_pslf_status_isSet = false;
    m_pslf_status_isValid = false;

    m_purchase_apr_isSet = false;
    m_purchase_apr_isValid = false;

    m_repayment_model_isSet = false;
    m_repayment_model_isValid = false;

    m_repayment_plan_description_isSet = false;
    m_repayment_plan_description_isValid = false;

    m_repayment_plan_type_isSet = false;
    m_repayment_plan_type_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;

    m_servicer_address_isSet = false;
    m_servicer_address_isValid = false;

    m_special_apr_isSet = false;
    m_special_apr_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILiabilityOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiabilityOverride::fromJsonObject(QJsonObject json) {

    m_balance_transfer_apr_isValid = ::OpenAPI::fromJsonValue(m_balance_transfer_apr, json[QString("balance_transfer_apr")]);
    m_balance_transfer_apr_isSet = !json[QString("balance_transfer_apr")].isNull() && m_balance_transfer_apr_isValid;

    m_cash_apr_isValid = ::OpenAPI::fromJsonValue(m_cash_apr, json[QString("cash_apr")]);
    m_cash_apr_isSet = !json[QString("cash_apr")].isNull() && m_cash_apr_isValid;

    m_expected_payoff_date_isValid = ::OpenAPI::fromJsonValue(m_expected_payoff_date, json[QString("expected_payoff_date")]);
    m_expected_payoff_date_isSet = !json[QString("expected_payoff_date")].isNull() && m_expected_payoff_date_isValid;

    m_guarantor_isValid = ::OpenAPI::fromJsonValue(m_guarantor, json[QString("guarantor")]);
    m_guarantor_isSet = !json[QString("guarantor")].isNull() && m_guarantor_isValid;

    m_interest_capitalization_grace_period_months_isValid = ::OpenAPI::fromJsonValue(m_interest_capitalization_grace_period_months, json[QString("interest_capitalization_grace_period_months")]);
    m_interest_capitalization_grace_period_months_isSet = !json[QString("interest_capitalization_grace_period_months")].isNull() && m_interest_capitalization_grace_period_months_isValid;

    m_is_federal_isValid = ::OpenAPI::fromJsonValue(m_is_federal, json[QString("is_federal")]);
    m_is_federal_isSet = !json[QString("is_federal")].isNull() && m_is_federal_isValid;

    m_is_overdue_isValid = ::OpenAPI::fromJsonValue(m_is_overdue, json[QString("is_overdue")]);
    m_is_overdue_isSet = !json[QString("is_overdue")].isNull() && m_is_overdue_isValid;

    m_last_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_last_payment_amount, json[QString("last_payment_amount")]);
    m_last_payment_amount_isSet = !json[QString("last_payment_amount")].isNull() && m_last_payment_amount_isValid;

    m_loan_name_isValid = ::OpenAPI::fromJsonValue(m_loan_name, json[QString("loan_name")]);
    m_loan_name_isSet = !json[QString("loan_name")].isNull() && m_loan_name_isValid;

    m_loan_status_isValid = ::OpenAPI::fromJsonValue(m_loan_status, json[QString("loan_status")]);
    m_loan_status_isSet = !json[QString("loan_status")].isNull() && m_loan_status_isValid;

    m_minimum_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_minimum_payment_amount, json[QString("minimum_payment_amount")]);
    m_minimum_payment_amount_isSet = !json[QString("minimum_payment_amount")].isNull() && m_minimum_payment_amount_isValid;

    m_nominal_apr_isValid = ::OpenAPI::fromJsonValue(m_nominal_apr, json[QString("nominal_apr")]);
    m_nominal_apr_isSet = !json[QString("nominal_apr")].isNull() && m_nominal_apr_isValid;

    m_origination_date_isValid = ::OpenAPI::fromJsonValue(m_origination_date, json[QString("origination_date")]);
    m_origination_date_isSet = !json[QString("origination_date")].isNull() && m_origination_date_isValid;

    m_payment_reference_number_isValid = ::OpenAPI::fromJsonValue(m_payment_reference_number, json[QString("payment_reference_number")]);
    m_payment_reference_number_isSet = !json[QString("payment_reference_number")].isNull() && m_payment_reference_number_isValid;

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("principal")]);
    m_principal_isSet = !json[QString("principal")].isNull() && m_principal_isValid;

    m_pslf_status_isValid = ::OpenAPI::fromJsonValue(m_pslf_status, json[QString("pslf_status")]);
    m_pslf_status_isSet = !json[QString("pslf_status")].isNull() && m_pslf_status_isValid;

    m_purchase_apr_isValid = ::OpenAPI::fromJsonValue(m_purchase_apr, json[QString("purchase_apr")]);
    m_purchase_apr_isSet = !json[QString("purchase_apr")].isNull() && m_purchase_apr_isValid;

    m_repayment_model_isValid = ::OpenAPI::fromJsonValue(m_repayment_model, json[QString("repayment_model")]);
    m_repayment_model_isSet = !json[QString("repayment_model")].isNull() && m_repayment_model_isValid;

    m_repayment_plan_description_isValid = ::OpenAPI::fromJsonValue(m_repayment_plan_description, json[QString("repayment_plan_description")]);
    m_repayment_plan_description_isSet = !json[QString("repayment_plan_description")].isNull() && m_repayment_plan_description_isValid;

    m_repayment_plan_type_isValid = ::OpenAPI::fromJsonValue(m_repayment_plan_type, json[QString("repayment_plan_type")]);
    m_repayment_plan_type_isSet = !json[QString("repayment_plan_type")].isNull() && m_repayment_plan_type_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("sequence_number")]);
    m_sequence_number_isSet = !json[QString("sequence_number")].isNull() && m_sequence_number_isValid;

    m_servicer_address_isValid = ::OpenAPI::fromJsonValue(m_servicer_address, json[QString("servicer_address")]);
    m_servicer_address_isSet = !json[QString("servicer_address")].isNull() && m_servicer_address_isValid;

    m_special_apr_isValid = ::OpenAPI::fromJsonValue(m_special_apr, json[QString("special_apr")]);
    m_special_apr_isSet = !json[QString("special_apr")].isNull() && m_special_apr_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAILiabilityOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiabilityOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_transfer_apr_isSet) {
        obj.insert(QString("balance_transfer_apr"), ::OpenAPI::toJsonValue(m_balance_transfer_apr));
    }
    if (m_cash_apr_isSet) {
        obj.insert(QString("cash_apr"), ::OpenAPI::toJsonValue(m_cash_apr));
    }
    if (m_expected_payoff_date_isSet) {
        obj.insert(QString("expected_payoff_date"), ::OpenAPI::toJsonValue(m_expected_payoff_date));
    }
    if (m_guarantor_isSet) {
        obj.insert(QString("guarantor"), ::OpenAPI::toJsonValue(m_guarantor));
    }
    if (m_interest_capitalization_grace_period_months_isSet) {
        obj.insert(QString("interest_capitalization_grace_period_months"), ::OpenAPI::toJsonValue(m_interest_capitalization_grace_period_months));
    }
    if (m_is_federal_isSet) {
        obj.insert(QString("is_federal"), ::OpenAPI::toJsonValue(m_is_federal));
    }
    if (m_is_overdue_isSet) {
        obj.insert(QString("is_overdue"), ::OpenAPI::toJsonValue(m_is_overdue));
    }
    if (m_last_payment_amount_isSet) {
        obj.insert(QString("last_payment_amount"), ::OpenAPI::toJsonValue(m_last_payment_amount));
    }
    if (m_loan_name_isSet) {
        obj.insert(QString("loan_name"), ::OpenAPI::toJsonValue(m_loan_name));
    }
    if (m_loan_status.isSet()) {
        obj.insert(QString("loan_status"), ::OpenAPI::toJsonValue(m_loan_status));
    }
    if (m_minimum_payment_amount_isSet) {
        obj.insert(QString("minimum_payment_amount"), ::OpenAPI::toJsonValue(m_minimum_payment_amount));
    }
    if (m_nominal_apr_isSet) {
        obj.insert(QString("nominal_apr"), ::OpenAPI::toJsonValue(m_nominal_apr));
    }
    if (m_origination_date_isSet) {
        obj.insert(QString("origination_date"), ::OpenAPI::toJsonValue(m_origination_date));
    }
    if (m_payment_reference_number_isSet) {
        obj.insert(QString("payment_reference_number"), ::OpenAPI::toJsonValue(m_payment_reference_number));
    }
    if (m_principal_isSet) {
        obj.insert(QString("principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    if (m_pslf_status.isSet()) {
        obj.insert(QString("pslf_status"), ::OpenAPI::toJsonValue(m_pslf_status));
    }
    if (m_purchase_apr_isSet) {
        obj.insert(QString("purchase_apr"), ::OpenAPI::toJsonValue(m_purchase_apr));
    }
    if (m_repayment_model.isSet()) {
        obj.insert(QString("repayment_model"), ::OpenAPI::toJsonValue(m_repayment_model));
    }
    if (m_repayment_plan_description_isSet) {
        obj.insert(QString("repayment_plan_description"), ::OpenAPI::toJsonValue(m_repayment_plan_description));
    }
    if (m_repayment_plan_type_isSet) {
        obj.insert(QString("repayment_plan_type"), ::OpenAPI::toJsonValue(m_repayment_plan_type));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("sequence_number"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    if (m_servicer_address.isSet()) {
        obj.insert(QString("servicer_address"), ::OpenAPI::toJsonValue(m_servicer_address));
    }
    if (m_special_apr_isSet) {
        obj.insert(QString("special_apr"), ::OpenAPI::toJsonValue(m_special_apr));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

double OAILiabilityOverride::getBalanceTransferApr() const {
    return m_balance_transfer_apr;
}
void OAILiabilityOverride::setBalanceTransferApr(const double &balance_transfer_apr) {
    m_balance_transfer_apr = balance_transfer_apr;
    m_balance_transfer_apr_isSet = true;
}

bool OAILiabilityOverride::is_balance_transfer_apr_Set() const{
    return m_balance_transfer_apr_isSet;
}

bool OAILiabilityOverride::is_balance_transfer_apr_Valid() const{
    return m_balance_transfer_apr_isValid;
}

double OAILiabilityOverride::getCashApr() const {
    return m_cash_apr;
}
void OAILiabilityOverride::setCashApr(const double &cash_apr) {
    m_cash_apr = cash_apr;
    m_cash_apr_isSet = true;
}

bool OAILiabilityOverride::is_cash_apr_Set() const{
    return m_cash_apr_isSet;
}

bool OAILiabilityOverride::is_cash_apr_Valid() const{
    return m_cash_apr_isValid;
}

QDate OAILiabilityOverride::getExpectedPayoffDate() const {
    return m_expected_payoff_date;
}
void OAILiabilityOverride::setExpectedPayoffDate(const QDate &expected_payoff_date) {
    m_expected_payoff_date = expected_payoff_date;
    m_expected_payoff_date_isSet = true;
}

bool OAILiabilityOverride::is_expected_payoff_date_Set() const{
    return m_expected_payoff_date_isSet;
}

bool OAILiabilityOverride::is_expected_payoff_date_Valid() const{
    return m_expected_payoff_date_isValid;
}

QString OAILiabilityOverride::getGuarantor() const {
    return m_guarantor;
}
void OAILiabilityOverride::setGuarantor(const QString &guarantor) {
    m_guarantor = guarantor;
    m_guarantor_isSet = true;
}

bool OAILiabilityOverride::is_guarantor_Set() const{
    return m_guarantor_isSet;
}

bool OAILiabilityOverride::is_guarantor_Valid() const{
    return m_guarantor_isValid;
}

double OAILiabilityOverride::getInterestCapitalizationGracePeriodMonths() const {
    return m_interest_capitalization_grace_period_months;
}
void OAILiabilityOverride::setInterestCapitalizationGracePeriodMonths(const double &interest_capitalization_grace_period_months) {
    m_interest_capitalization_grace_period_months = interest_capitalization_grace_period_months;
    m_interest_capitalization_grace_period_months_isSet = true;
}

bool OAILiabilityOverride::is_interest_capitalization_grace_period_months_Set() const{
    return m_interest_capitalization_grace_period_months_isSet;
}

bool OAILiabilityOverride::is_interest_capitalization_grace_period_months_Valid() const{
    return m_interest_capitalization_grace_period_months_isValid;
}

bool OAILiabilityOverride::isIsFederal() const {
    return m_is_federal;
}
void OAILiabilityOverride::setIsFederal(const bool &is_federal) {
    m_is_federal = is_federal;
    m_is_federal_isSet = true;
}

bool OAILiabilityOverride::is_is_federal_Set() const{
    return m_is_federal_isSet;
}

bool OAILiabilityOverride::is_is_federal_Valid() const{
    return m_is_federal_isValid;
}

bool OAILiabilityOverride::isIsOverdue() const {
    return m_is_overdue;
}
void OAILiabilityOverride::setIsOverdue(const bool &is_overdue) {
    m_is_overdue = is_overdue;
    m_is_overdue_isSet = true;
}

bool OAILiabilityOverride::is_is_overdue_Set() const{
    return m_is_overdue_isSet;
}

bool OAILiabilityOverride::is_is_overdue_Valid() const{
    return m_is_overdue_isValid;
}

double OAILiabilityOverride::getLastPaymentAmount() const {
    return m_last_payment_amount;
}
void OAILiabilityOverride::setLastPaymentAmount(const double &last_payment_amount) {
    m_last_payment_amount = last_payment_amount;
    m_last_payment_amount_isSet = true;
}

bool OAILiabilityOverride::is_last_payment_amount_Set() const{
    return m_last_payment_amount_isSet;
}

bool OAILiabilityOverride::is_last_payment_amount_Valid() const{
    return m_last_payment_amount_isValid;
}

QString OAILiabilityOverride::getLoanName() const {
    return m_loan_name;
}
void OAILiabilityOverride::setLoanName(const QString &loan_name) {
    m_loan_name = loan_name;
    m_loan_name_isSet = true;
}

bool OAILiabilityOverride::is_loan_name_Set() const{
    return m_loan_name_isSet;
}

bool OAILiabilityOverride::is_loan_name_Valid() const{
    return m_loan_name_isValid;
}

OAIStudentLoanStatus OAILiabilityOverride::getLoanStatus() const {
    return m_loan_status;
}
void OAILiabilityOverride::setLoanStatus(const OAIStudentLoanStatus &loan_status) {
    m_loan_status = loan_status;
    m_loan_status_isSet = true;
}

bool OAILiabilityOverride::is_loan_status_Set() const{
    return m_loan_status_isSet;
}

bool OAILiabilityOverride::is_loan_status_Valid() const{
    return m_loan_status_isValid;
}

double OAILiabilityOverride::getMinimumPaymentAmount() const {
    return m_minimum_payment_amount;
}
void OAILiabilityOverride::setMinimumPaymentAmount(const double &minimum_payment_amount) {
    m_minimum_payment_amount = minimum_payment_amount;
    m_minimum_payment_amount_isSet = true;
}

bool OAILiabilityOverride::is_minimum_payment_amount_Set() const{
    return m_minimum_payment_amount_isSet;
}

bool OAILiabilityOverride::is_minimum_payment_amount_Valid() const{
    return m_minimum_payment_amount_isValid;
}

double OAILiabilityOverride::getNominalApr() const {
    return m_nominal_apr;
}
void OAILiabilityOverride::setNominalApr(const double &nominal_apr) {
    m_nominal_apr = nominal_apr;
    m_nominal_apr_isSet = true;
}

bool OAILiabilityOverride::is_nominal_apr_Set() const{
    return m_nominal_apr_isSet;
}

bool OAILiabilityOverride::is_nominal_apr_Valid() const{
    return m_nominal_apr_isValid;
}

QDate OAILiabilityOverride::getOriginationDate() const {
    return m_origination_date;
}
void OAILiabilityOverride::setOriginationDate(const QDate &origination_date) {
    m_origination_date = origination_date;
    m_origination_date_isSet = true;
}

bool OAILiabilityOverride::is_origination_date_Set() const{
    return m_origination_date_isSet;
}

bool OAILiabilityOverride::is_origination_date_Valid() const{
    return m_origination_date_isValid;
}

QString OAILiabilityOverride::getPaymentReferenceNumber() const {
    return m_payment_reference_number;
}
void OAILiabilityOverride::setPaymentReferenceNumber(const QString &payment_reference_number) {
    m_payment_reference_number = payment_reference_number;
    m_payment_reference_number_isSet = true;
}

bool OAILiabilityOverride::is_payment_reference_number_Set() const{
    return m_payment_reference_number_isSet;
}

bool OAILiabilityOverride::is_payment_reference_number_Valid() const{
    return m_payment_reference_number_isValid;
}

double OAILiabilityOverride::getPrincipal() const {
    return m_principal;
}
void OAILiabilityOverride::setPrincipal(const double &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAILiabilityOverride::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAILiabilityOverride::is_principal_Valid() const{
    return m_principal_isValid;
}

OAIPSLFStatus OAILiabilityOverride::getPslfStatus() const {
    return m_pslf_status;
}
void OAILiabilityOverride::setPslfStatus(const OAIPSLFStatus &pslf_status) {
    m_pslf_status = pslf_status;
    m_pslf_status_isSet = true;
}

bool OAILiabilityOverride::is_pslf_status_Set() const{
    return m_pslf_status_isSet;
}

bool OAILiabilityOverride::is_pslf_status_Valid() const{
    return m_pslf_status_isValid;
}

double OAILiabilityOverride::getPurchaseApr() const {
    return m_purchase_apr;
}
void OAILiabilityOverride::setPurchaseApr(const double &purchase_apr) {
    m_purchase_apr = purchase_apr;
    m_purchase_apr_isSet = true;
}

bool OAILiabilityOverride::is_purchase_apr_Set() const{
    return m_purchase_apr_isSet;
}

bool OAILiabilityOverride::is_purchase_apr_Valid() const{
    return m_purchase_apr_isValid;
}

OAIStudentLoanRepaymentModel OAILiabilityOverride::getRepaymentModel() const {
    return m_repayment_model;
}
void OAILiabilityOverride::setRepaymentModel(const OAIStudentLoanRepaymentModel &repayment_model) {
    m_repayment_model = repayment_model;
    m_repayment_model_isSet = true;
}

bool OAILiabilityOverride::is_repayment_model_Set() const{
    return m_repayment_model_isSet;
}

bool OAILiabilityOverride::is_repayment_model_Valid() const{
    return m_repayment_model_isValid;
}

QString OAILiabilityOverride::getRepaymentPlanDescription() const {
    return m_repayment_plan_description;
}
void OAILiabilityOverride::setRepaymentPlanDescription(const QString &repayment_plan_description) {
    m_repayment_plan_description = repayment_plan_description;
    m_repayment_plan_description_isSet = true;
}

bool OAILiabilityOverride::is_repayment_plan_description_Set() const{
    return m_repayment_plan_description_isSet;
}

bool OAILiabilityOverride::is_repayment_plan_description_Valid() const{
    return m_repayment_plan_description_isValid;
}

QString OAILiabilityOverride::getRepaymentPlanType() const {
    return m_repayment_plan_type;
}
void OAILiabilityOverride::setRepaymentPlanType(const QString &repayment_plan_type) {
    m_repayment_plan_type = repayment_plan_type;
    m_repayment_plan_type_isSet = true;
}

bool OAILiabilityOverride::is_repayment_plan_type_Set() const{
    return m_repayment_plan_type_isSet;
}

bool OAILiabilityOverride::is_repayment_plan_type_Valid() const{
    return m_repayment_plan_type_isValid;
}

QString OAILiabilityOverride::getSequenceNumber() const {
    return m_sequence_number;
}
void OAILiabilityOverride::setSequenceNumber(const QString &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAILiabilityOverride::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAILiabilityOverride::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

OAIAddress OAILiabilityOverride::getServicerAddress() const {
    return m_servicer_address;
}
void OAILiabilityOverride::setServicerAddress(const OAIAddress &servicer_address) {
    m_servicer_address = servicer_address;
    m_servicer_address_isSet = true;
}

bool OAILiabilityOverride::is_servicer_address_Set() const{
    return m_servicer_address_isSet;
}

bool OAILiabilityOverride::is_servicer_address_Valid() const{
    return m_servicer_address_isValid;
}

double OAILiabilityOverride::getSpecialApr() const {
    return m_special_apr;
}
void OAILiabilityOverride::setSpecialApr(const double &special_apr) {
    m_special_apr = special_apr;
    m_special_apr_isSet = true;
}

bool OAILiabilityOverride::is_special_apr_Set() const{
    return m_special_apr_isSet;
}

bool OAILiabilityOverride::is_special_apr_Valid() const{
    return m_special_apr_isValid;
}

QString OAILiabilityOverride::getType() const {
    return m_type;
}
void OAILiabilityOverride::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILiabilityOverride::is_type_Set() const{
    return m_type_isSet;
}

bool OAILiabilityOverride::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILiabilityOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_transfer_apr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_apr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_payoff_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guarantor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interest_capitalization_grace_period_months_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_federal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_overdue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_payment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loan_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_payment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nominal_apr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origination_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pslf_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_apr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repayment_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repayment_plan_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repayment_plan_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_servicer_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_apr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiabilityOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_balance_transfer_apr_isValid && m_cash_apr_isValid && m_expected_payoff_date_isValid && m_guarantor_isValid && m_interest_capitalization_grace_period_months_isValid && m_is_federal_isValid && m_is_overdue_isValid && m_last_payment_amount_isValid && m_loan_name_isValid && m_loan_status_isValid && m_minimum_payment_amount_isValid && m_nominal_apr_isValid && m_origination_date_isValid && m_payment_reference_number_isValid && m_principal_isValid && m_pslf_status_isValid && m_purchase_apr_isValid && m_repayment_model_isValid && m_repayment_plan_description_isValid && m_repayment_plan_type_isValid && m_sequence_number_isValid && m_servicer_address_isValid && m_special_apr_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
