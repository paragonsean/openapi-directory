/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProcessorSignalEvaluateRequest.h
 *
 * ProcessorSignalEvaluateRequest defines the request schema for &#x60;/processor/signal/evaluate&#x60;
 */

#ifndef OAIProcessorSignalEvaluateRequest_H
#define OAIProcessorSignalEvaluateRequest_H

#include <QJsonObject>

#include "OAISignalDevice.h"
#include "OAISignalUser.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISignalDevice;
class OAISignalUser;

class OAIProcessorSignalEvaluateRequest : public OAIObject {
public:
    OAIProcessorSignalEvaluateRequest();
    OAIProcessorSignalEvaluateRequest(QString json);
    ~OAIProcessorSignalEvaluateRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAmount() const;
    void setAmount(const double &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    QString getClientId() const;
    void setClientId(const QString &client_id);
    bool is_client_id_Set() const;
    bool is_client_id_Valid() const;

    QString getClientTransactionId() const;
    void setClientTransactionId(const QString &client_transaction_id);
    bool is_client_transaction_id_Set() const;
    bool is_client_transaction_id_Valid() const;

    QString getClientUserId() const;
    void setClientUserId(const QString &client_user_id);
    bool is_client_user_id_Set() const;
    bool is_client_user_id_Valid() const;

    QString getDefaultPaymentMethod() const;
    void setDefaultPaymentMethod(const QString &default_payment_method);
    bool is_default_payment_method_Set() const;
    bool is_default_payment_method_Valid() const;

    OAISignalDevice getDevice() const;
    void setDevice(const OAISignalDevice &device);
    bool is_device_Set() const;
    bool is_device_Valid() const;

    bool isIsRecurring() const;
    void setIsRecurring(const bool &is_recurring);
    bool is_is_recurring_Set() const;
    bool is_is_recurring_Valid() const;

    QString getProcessorToken() const;
    void setProcessorToken(const QString &processor_token);
    bool is_processor_token_Set() const;
    bool is_processor_token_Valid() const;

    QString getSecret() const;
    void setSecret(const QString &secret);
    bool is_secret_Set() const;
    bool is_secret_Valid() const;

    OAISignalUser getUser() const;
    void setUser(const OAISignalUser &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    bool isUserPresent() const;
    void setUserPresent(const bool &user_present);
    bool is_user_present_Set() const;
    bool is_user_present_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    QString m_client_id;
    bool m_client_id_isSet;
    bool m_client_id_isValid;

    QString m_client_transaction_id;
    bool m_client_transaction_id_isSet;
    bool m_client_transaction_id_isValid;

    QString m_client_user_id;
    bool m_client_user_id_isSet;
    bool m_client_user_id_isValid;

    QString m_default_payment_method;
    bool m_default_payment_method_isSet;
    bool m_default_payment_method_isValid;

    OAISignalDevice m_device;
    bool m_device_isSet;
    bool m_device_isValid;

    bool m_is_recurring;
    bool m_is_recurring_isSet;
    bool m_is_recurring_isValid;

    QString m_processor_token;
    bool m_processor_token_isSet;
    bool m_processor_token_isValid;

    QString m_secret;
    bool m_secret_isSet;
    bool m_secret_isValid;

    OAISignalUser m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    bool m_user_present;
    bool m_user_present_isSet;
    bool m_user_present_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProcessorSignalEvaluateRequest)

#endif // OAIProcessorSignalEvaluateRequest_H
