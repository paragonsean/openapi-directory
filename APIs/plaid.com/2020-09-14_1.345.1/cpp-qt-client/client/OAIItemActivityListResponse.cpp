/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemActivityListResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemActivityListResponse::OAIItemActivityListResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemActivityListResponse::OAIItemActivityListResponse() {
    this->initializeModel();
}

OAIItemActivityListResponse::~OAIItemActivityListResponse() {}

void OAIItemActivityListResponse::initializeModel() {

    m_activities_isSet = false;
    m_activities_isValid = false;

    m_cursor_isSet = false;
    m_cursor_isValid = false;

    m_last_data_access_times_isSet = false;
    m_last_data_access_times_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIItemActivityListResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemActivityListResponse::fromJsonObject(QJsonObject json) {

    m_activities_isValid = ::OpenAPI::fromJsonValue(m_activities, json[QString("activities")]);
    m_activities_isSet = !json[QString("activities")].isNull() && m_activities_isValid;

    m_cursor_isValid = ::OpenAPI::fromJsonValue(m_cursor, json[QString("cursor")]);
    m_cursor_isSet = !json[QString("cursor")].isNull() && m_cursor_isValid;

    m_last_data_access_times_isValid = ::OpenAPI::fromJsonValue(m_last_data_access_times, json[QString("last_data_access_times")]);
    m_last_data_access_times_isSet = !json[QString("last_data_access_times")].isNull() && m_last_data_access_times_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("request_id")]);
    m_request_id_isSet = !json[QString("request_id")].isNull() && m_request_id_isValid;
}

QString OAIItemActivityListResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemActivityListResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_activities.size() > 0) {
        obj.insert(QString("activities"), ::OpenAPI::toJsonValue(m_activities));
    }
    if (m_cursor_isSet) {
        obj.insert(QString("cursor"), ::OpenAPI::toJsonValue(m_cursor));
    }
    if (m_last_data_access_times.size() > 0) {
        obj.insert(QString("last_data_access_times"), ::OpenAPI::toJsonValue(m_last_data_access_times));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("request_id"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QList<OAIActivity> OAIItemActivityListResponse::getActivities() const {
    return m_activities;
}
void OAIItemActivityListResponse::setActivities(const QList<OAIActivity> &activities) {
    m_activities = activities;
    m_activities_isSet = true;
}

bool OAIItemActivityListResponse::is_activities_Set() const{
    return m_activities_isSet;
}

bool OAIItemActivityListResponse::is_activities_Valid() const{
    return m_activities_isValid;
}

QString OAIItemActivityListResponse::getCursor() const {
    return m_cursor;
}
void OAIItemActivityListResponse::setCursor(const QString &cursor) {
    m_cursor = cursor;
    m_cursor_isSet = true;
}

bool OAIItemActivityListResponse::is_cursor_Set() const{
    return m_cursor_isSet;
}

bool OAIItemActivityListResponse::is_cursor_Valid() const{
    return m_cursor_isValid;
}

QList<OAILastDataAccessTimes> OAIItemActivityListResponse::getLastDataAccessTimes() const {
    return m_last_data_access_times;
}
void OAIItemActivityListResponse::setLastDataAccessTimes(const QList<OAILastDataAccessTimes> &last_data_access_times) {
    m_last_data_access_times = last_data_access_times;
    m_last_data_access_times_isSet = true;
}

bool OAIItemActivityListResponse::is_last_data_access_times_Set() const{
    return m_last_data_access_times_isSet;
}

bool OAIItemActivityListResponse::is_last_data_access_times_Valid() const{
    return m_last_data_access_times_isValid;
}

QString OAIItemActivityListResponse::getRequestId() const {
    return m_request_id;
}
void OAIItemActivityListResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIItemActivityListResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIItemActivityListResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIItemActivityListResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_data_access_times.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemActivityListResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activities_isValid && m_last_data_access_times_isValid && true;
}

} // namespace OpenAPI
