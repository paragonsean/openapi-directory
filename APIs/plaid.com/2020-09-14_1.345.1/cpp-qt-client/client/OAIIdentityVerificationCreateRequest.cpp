/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityVerificationCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityVerificationCreateRequest::OAIIdentityVerificationCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityVerificationCreateRequest::OAIIdentityVerificationCreateRequest() {
    this->initializeModel();
}

OAIIdentityVerificationCreateRequest::~OAIIdentityVerificationCreateRequest() {}

void OAIIdentityVerificationCreateRequest::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_gave_consent_isSet = false;
    m_gave_consent_isValid = false;

    m_is_idempotent_isSet = false;
    m_is_idempotent_isValid = false;

    m_is_shareable_isSet = false;
    m_is_shareable_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIIdentityVerificationCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityVerificationCreateRequest::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_gave_consent_isValid = ::OpenAPI::fromJsonValue(m_gave_consent, json[QString("gave_consent")]);
    m_gave_consent_isSet = !json[QString("gave_consent")].isNull() && m_gave_consent_isValid;

    m_is_idempotent_isValid = ::OpenAPI::fromJsonValue(m_is_idempotent, json[QString("is_idempotent")]);
    m_is_idempotent_isSet = !json[QString("is_idempotent")].isNull() && m_is_idempotent_isValid;

    m_is_shareable_isValid = ::OpenAPI::fromJsonValue(m_is_shareable, json[QString("is_shareable")]);
    m_is_shareable_isSet = !json[QString("is_shareable")].isNull() && m_is_shareable_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("template_id")]);
    m_template_id_isSet = !json[QString("template_id")].isNull() && m_template_id_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIIdentityVerificationCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityVerificationCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_gave_consent_isSet) {
        obj.insert(QString("gave_consent"), ::OpenAPI::toJsonValue(m_gave_consent));
    }
    if (m_is_idempotent_isSet) {
        obj.insert(QString("is_idempotent"), ::OpenAPI::toJsonValue(m_is_idempotent));
    }
    if (m_is_shareable_isSet) {
        obj.insert(QString("is_shareable"), ::OpenAPI::toJsonValue(m_is_shareable));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("template_id"), ::OpenAPI::toJsonValue(m_template_id));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIIdentityVerificationCreateRequest::getClientId() const {
    return m_client_id;
}
void OAIIdentityVerificationCreateRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIIdentityVerificationCreateRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIIdentityVerificationCreateRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

bool OAIIdentityVerificationCreateRequest::isGaveConsent() const {
    return m_gave_consent;
}
void OAIIdentityVerificationCreateRequest::setGaveConsent(const bool &gave_consent) {
    m_gave_consent = gave_consent;
    m_gave_consent_isSet = true;
}

bool OAIIdentityVerificationCreateRequest::is_gave_consent_Set() const{
    return m_gave_consent_isSet;
}

bool OAIIdentityVerificationCreateRequest::is_gave_consent_Valid() const{
    return m_gave_consent_isValid;
}

bool OAIIdentityVerificationCreateRequest::isIsIdempotent() const {
    return m_is_idempotent;
}
void OAIIdentityVerificationCreateRequest::setIsIdempotent(const bool &is_idempotent) {
    m_is_idempotent = is_idempotent;
    m_is_idempotent_isSet = true;
}

bool OAIIdentityVerificationCreateRequest::is_is_idempotent_Set() const{
    return m_is_idempotent_isSet;
}

bool OAIIdentityVerificationCreateRequest::is_is_idempotent_Valid() const{
    return m_is_idempotent_isValid;
}

bool OAIIdentityVerificationCreateRequest::isIsShareable() const {
    return m_is_shareable;
}
void OAIIdentityVerificationCreateRequest::setIsShareable(const bool &is_shareable) {
    m_is_shareable = is_shareable;
    m_is_shareable_isSet = true;
}

bool OAIIdentityVerificationCreateRequest::is_is_shareable_Set() const{
    return m_is_shareable_isSet;
}

bool OAIIdentityVerificationCreateRequest::is_is_shareable_Valid() const{
    return m_is_shareable_isValid;
}

QString OAIIdentityVerificationCreateRequest::getSecret() const {
    return m_secret;
}
void OAIIdentityVerificationCreateRequest::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIIdentityVerificationCreateRequest::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIIdentityVerificationCreateRequest::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAIIdentityVerificationCreateRequest::getTemplateId() const {
    return m_template_id;
}
void OAIIdentityVerificationCreateRequest::setTemplateId(const QString &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAIIdentityVerificationCreateRequest::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAIIdentityVerificationCreateRequest::is_template_id_Valid() const{
    return m_template_id_isValid;
}

OAIIdentityVerificationRequestUser OAIIdentityVerificationCreateRequest::getUser() const {
    return m_user;
}
void OAIIdentityVerificationCreateRequest::setUser(const OAIIdentityVerificationRequestUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIIdentityVerificationCreateRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIIdentityVerificationCreateRequest::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIIdentityVerificationCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gave_consent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_idempotent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_shareable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityVerificationCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_gave_consent_isValid && m_is_shareable_isValid && m_template_id_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
