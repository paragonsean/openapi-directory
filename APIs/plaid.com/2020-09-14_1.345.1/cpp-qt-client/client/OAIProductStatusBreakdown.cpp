/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductStatusBreakdown.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductStatusBreakdown::OAIProductStatusBreakdown(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductStatusBreakdown::OAIProductStatusBreakdown() {
    this->initializeModel();
}

OAIProductStatusBreakdown::~OAIProductStatusBreakdown() {}

void OAIProductStatusBreakdown::initializeModel() {

    m_error_institution_isSet = false;
    m_error_institution_isValid = false;

    m_error_plaid_isSet = false;
    m_error_plaid_isValid = false;

    m_refresh_interval_isSet = false;
    m_refresh_interval_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIProductStatusBreakdown::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductStatusBreakdown::fromJsonObject(QJsonObject json) {

    m_error_institution_isValid = ::OpenAPI::fromJsonValue(m_error_institution, json[QString("error_institution")]);
    m_error_institution_isSet = !json[QString("error_institution")].isNull() && m_error_institution_isValid;

    m_error_plaid_isValid = ::OpenAPI::fromJsonValue(m_error_plaid, json[QString("error_plaid")]);
    m_error_plaid_isSet = !json[QString("error_plaid")].isNull() && m_error_plaid_isValid;

    m_refresh_interval_isValid = ::OpenAPI::fromJsonValue(m_refresh_interval, json[QString("refresh_interval")]);
    m_refresh_interval_isSet = !json[QString("refresh_interval")].isNull() && m_refresh_interval_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAIProductStatusBreakdown::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductStatusBreakdown::asJsonObject() const {
    QJsonObject obj;
    if (m_error_institution_isSet) {
        obj.insert(QString("error_institution"), ::OpenAPI::toJsonValue(m_error_institution));
    }
    if (m_error_plaid_isSet) {
        obj.insert(QString("error_plaid"), ::OpenAPI::toJsonValue(m_error_plaid));
    }
    if (m_refresh_interval_isSet) {
        obj.insert(QString("refresh_interval"), ::OpenAPI::toJsonValue(m_refresh_interval));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

double OAIProductStatusBreakdown::getErrorInstitution() const {
    return m_error_institution;
}
void OAIProductStatusBreakdown::setErrorInstitution(const double &error_institution) {
    m_error_institution = error_institution;
    m_error_institution_isSet = true;
}

bool OAIProductStatusBreakdown::is_error_institution_Set() const{
    return m_error_institution_isSet;
}

bool OAIProductStatusBreakdown::is_error_institution_Valid() const{
    return m_error_institution_isValid;
}

double OAIProductStatusBreakdown::getErrorPlaid() const {
    return m_error_plaid;
}
void OAIProductStatusBreakdown::setErrorPlaid(const double &error_plaid) {
    m_error_plaid = error_plaid;
    m_error_plaid_isSet = true;
}

bool OAIProductStatusBreakdown::is_error_plaid_Set() const{
    return m_error_plaid_isSet;
}

bool OAIProductStatusBreakdown::is_error_plaid_Valid() const{
    return m_error_plaid_isValid;
}

QString OAIProductStatusBreakdown::getRefreshInterval() const {
    return m_refresh_interval;
}
void OAIProductStatusBreakdown::setRefreshInterval(const QString &refresh_interval) {
    m_refresh_interval = refresh_interval;
    m_refresh_interval_isSet = true;
}

bool OAIProductStatusBreakdown::is_refresh_interval_Set() const{
    return m_refresh_interval_isSet;
}

bool OAIProductStatusBreakdown::is_refresh_interval_Valid() const{
    return m_refresh_interval_isValid;
}

double OAIProductStatusBreakdown::getSuccess() const {
    return m_success;
}
void OAIProductStatusBreakdown::setSuccess(const double &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIProductStatusBreakdown::is_success_Set() const{
    return m_success_isSet;
}

bool OAIProductStatusBreakdown::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIProductStatusBreakdown::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_institution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_plaid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductStatusBreakdown::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_institution_isValid && m_error_plaid_isValid && m_success_isValid && true;
}

} // namespace OpenAPI
