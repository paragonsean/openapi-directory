/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityType::OAIActivityType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityType::OAIActivityType() {
    this->initializeModel();
}

OAIActivityType::~OAIActivityType() {}

void OAIActivityType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIActivityType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIActivityType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActivityType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_CREATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActivityType::ITEM_CREATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_IMPORT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActivityType::ITEM_IMPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_UPDATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActivityType::ITEM_UPDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_UNLINK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActivityType::ITEM_UNLINK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PORTAL_UNLINK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActivityType::PORTAL_UNLINK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PORTAL_ITEMS_DELETE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActivityType::PORTAL_ITEMS_DELETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ITEM_REMOVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActivityType::ITEM_REMOVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVARIANT_CHECKER_DELETION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActivityType::INVARIANT_CHECKER_DELETION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCOPES_UPDATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActivityType::SCOPES_UPDATE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIActivityType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIActivityType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIActivityType::UNKNOWN:
            val = "UNKNOWN";
            break;
        case eOAIActivityType::ITEM_CREATE:
            val = "ITEM_CREATE";
            break;
        case eOAIActivityType::ITEM_IMPORT:
            val = "ITEM_IMPORT";
            break;
        case eOAIActivityType::ITEM_UPDATE:
            val = "ITEM_UPDATE";
            break;
        case eOAIActivityType::ITEM_UNLINK:
            val = "ITEM_UNLINK";
            break;
        case eOAIActivityType::PORTAL_UNLINK:
            val = "PORTAL_UNLINK";
            break;
        case eOAIActivityType::PORTAL_ITEMS_DELETE:
            val = "PORTAL_ITEMS_DELETE";
            break;
        case eOAIActivityType::ITEM_REMOVE:
            val = "ITEM_REMOVE";
            break;
        case eOAIActivityType::INVARIANT_CHECKER_DELETION:
            val = "INVARIANT_CHECKER_DELETION";
            break;
        case eOAIActivityType::SCOPES_UPDATE:
            val = "SCOPES_UPDATE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIActivityType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIActivityType::eOAIActivityType OAIActivityType::getValue() const {
    return m_value;
}

void OAIActivityType::setValue(const OAIActivityType::eOAIActivityType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIActivityType::isSet() const {
    
    return m_value_isSet;
}

bool OAIActivityType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
