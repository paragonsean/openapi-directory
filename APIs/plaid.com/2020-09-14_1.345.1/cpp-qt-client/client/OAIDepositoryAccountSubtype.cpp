/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDepositoryAccountSubtype.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDepositoryAccountSubtype::OAIDepositoryAccountSubtype(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDepositoryAccountSubtype::OAIDepositoryAccountSubtype() {
    this->initializeModel();
}

OAIDepositoryAccountSubtype::~OAIDepositoryAccountSubtype() {}

void OAIDepositoryAccountSubtype::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDepositoryAccountSubtype::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDepositoryAccountSubtype::fromJson(QString jsonString) {
    
    if ( jsonString.compare("checking", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDepositoryAccountSubtype::CHECKING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("savings", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDepositoryAccountSubtype::SAVINGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hsa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDepositoryAccountSubtype::HSA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cd", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDepositoryAccountSubtype::CD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("money market", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDepositoryAccountSubtype::MONEY_MARKET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("paypal", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDepositoryAccountSubtype::PAYPAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("prepaid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDepositoryAccountSubtype::PREPAID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cash management", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDepositoryAccountSubtype::CASH_MANAGEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ebt", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDepositoryAccountSubtype::EBT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("all", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDepositoryAccountSubtype::ALL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDepositoryAccountSubtype::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDepositoryAccountSubtype::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDepositoryAccountSubtype::CHECKING:
            val = "checking";
            break;
        case eOAIDepositoryAccountSubtype::SAVINGS:
            val = "savings";
            break;
        case eOAIDepositoryAccountSubtype::HSA:
            val = "hsa";
            break;
        case eOAIDepositoryAccountSubtype::CD:
            val = "cd";
            break;
        case eOAIDepositoryAccountSubtype::MONEY_MARKET:
            val = "money market";
            break;
        case eOAIDepositoryAccountSubtype::PAYPAL:
            val = "paypal";
            break;
        case eOAIDepositoryAccountSubtype::PREPAID:
            val = "prepaid";
            break;
        case eOAIDepositoryAccountSubtype::CASH_MANAGEMENT:
            val = "cash management";
            break;
        case eOAIDepositoryAccountSubtype::EBT:
            val = "ebt";
            break;
        case eOAIDepositoryAccountSubtype::ALL:
            val = "all";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDepositoryAccountSubtype::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDepositoryAccountSubtype::eOAIDepositoryAccountSubtype OAIDepositoryAccountSubtype::getValue() const {
    return m_value;
}

void OAIDepositoryAccountSubtype::setValue(const OAIDepositoryAccountSubtype::eOAIDepositoryAccountSubtype& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDepositoryAccountSubtype::isSet() const {
    
    return m_value_isSet;
}

bool OAIDepositoryAccountSubtype::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
