/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferAuthorizationDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferAuthorizationDevice::OAITransferAuthorizationDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferAuthorizationDevice::OAITransferAuthorizationDevice() {
    this->initializeModel();
}

OAITransferAuthorizationDevice::~OAITransferAuthorizationDevice() {}

void OAITransferAuthorizationDevice::initializeModel() {

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;
}

void OAITransferAuthorizationDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferAuthorizationDevice::fromJsonObject(QJsonObject json) {

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ip_address")]);
    m_ip_address_isSet = !json[QString("ip_address")].isNull() && m_ip_address_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("user_agent")]);
    m_user_agent_isSet = !json[QString("user_agent")].isNull() && m_user_agent_isValid;
}

QString OAITransferAuthorizationDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferAuthorizationDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_address_isSet) {
        obj.insert(QString("ip_address"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("user_agent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    return obj;
}

QString OAITransferAuthorizationDevice::getIpAddress() const {
    return m_ip_address;
}
void OAITransferAuthorizationDevice::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAITransferAuthorizationDevice::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAITransferAuthorizationDevice::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAITransferAuthorizationDevice::getUserAgent() const {
    return m_user_agent;
}
void OAITransferAuthorizationDevice::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAITransferAuthorizationDevice::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAITransferAuthorizationDevice::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

bool OAITransferAuthorizationDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferAuthorizationDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
