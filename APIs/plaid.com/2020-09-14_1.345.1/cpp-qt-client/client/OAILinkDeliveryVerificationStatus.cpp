/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkDeliveryVerificationStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkDeliveryVerificationStatus::OAILinkDeliveryVerificationStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkDeliveryVerificationStatus::OAILinkDeliveryVerificationStatus() {
    this->initializeModel();
}

OAILinkDeliveryVerificationStatus::~OAILinkDeliveryVerificationStatus() {}

void OAILinkDeliveryVerificationStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILinkDeliveryVerificationStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILinkDeliveryVerificationStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("automatically_verified", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkDeliveryVerificationStatus::AUTOMATICALLY_VERIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pending_automatic_verification", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkDeliveryVerificationStatus::PENDING_AUTOMATIC_VERIFICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pending_manual_verification", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkDeliveryVerificationStatus::PENDING_MANUAL_VERIFICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("manually_verified", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkDeliveryVerificationStatus::MANUALLY_VERIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("verification_expired", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkDeliveryVerificationStatus::VERIFICATION_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("verification_failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAILinkDeliveryVerificationStatus::VERIFICATION_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILinkDeliveryVerificationStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILinkDeliveryVerificationStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILinkDeliveryVerificationStatus::AUTOMATICALLY_VERIFIED:
            val = "automatically_verified";
            break;
        case eOAILinkDeliveryVerificationStatus::PENDING_AUTOMATIC_VERIFICATION:
            val = "pending_automatic_verification";
            break;
        case eOAILinkDeliveryVerificationStatus::PENDING_MANUAL_VERIFICATION:
            val = "pending_manual_verification";
            break;
        case eOAILinkDeliveryVerificationStatus::MANUALLY_VERIFIED:
            val = "manually_verified";
            break;
        case eOAILinkDeliveryVerificationStatus::VERIFICATION_EXPIRED:
            val = "verification_expired";
            break;
        case eOAILinkDeliveryVerificationStatus::VERIFICATION_FAILED:
            val = "verification_failed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILinkDeliveryVerificationStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILinkDeliveryVerificationStatus::eOAILinkDeliveryVerificationStatus OAILinkDeliveryVerificationStatus::getValue() const {
    return m_value;
}

void OAILinkDeliveryVerificationStatus::setValue(const OAILinkDeliveryVerificationStatus::eOAILinkDeliveryVerificationStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILinkDeliveryVerificationStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAILinkDeliveryVerificationStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
