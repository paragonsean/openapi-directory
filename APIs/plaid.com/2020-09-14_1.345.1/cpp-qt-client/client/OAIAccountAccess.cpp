/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountAccess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountAccess::OAIAccountAccess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountAccess::OAIAccountAccess() {
    this->initializeModel();
}

OAIAccountAccess::~OAIAccountAccess() {}

void OAIAccountAccess::initializeModel() {

    m_account_product_access_isSet = false;
    m_account_product_access_isValid = false;

    m_authorized_isSet = false;
    m_authorized_isValid = false;

    m_unique_id_isSet = false;
    m_unique_id_isValid = false;
}

void OAIAccountAccess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountAccess::fromJsonObject(QJsonObject json) {

    m_account_product_access_isValid = ::OpenAPI::fromJsonValue(m_account_product_access, json[QString("account_product_access")]);
    m_account_product_access_isSet = !json[QString("account_product_access")].isNull() && m_account_product_access_isValid;

    m_authorized_isValid = ::OpenAPI::fromJsonValue(m_authorized, json[QString("authorized")]);
    m_authorized_isSet = !json[QString("authorized")].isNull() && m_authorized_isValid;

    m_unique_id_isValid = ::OpenAPI::fromJsonValue(m_unique_id, json[QString("unique_id")]);
    m_unique_id_isSet = !json[QString("unique_id")].isNull() && m_unique_id_isValid;
}

QString OAIAccountAccess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountAccess::asJsonObject() const {
    QJsonObject obj;
    if (m_account_product_access.isSet()) {
        obj.insert(QString("account_product_access"), ::OpenAPI::toJsonValue(m_account_product_access));
    }
    if (m_authorized_isSet) {
        obj.insert(QString("authorized"), ::OpenAPI::toJsonValue(m_authorized));
    }
    if (m_unique_id_isSet) {
        obj.insert(QString("unique_id"), ::OpenAPI::toJsonValue(m_unique_id));
    }
    return obj;
}

OAIAccountProductAccessNullable OAIAccountAccess::getAccountProductAccess() const {
    return m_account_product_access;
}
void OAIAccountAccess::setAccountProductAccess(const OAIAccountProductAccessNullable &account_product_access) {
    m_account_product_access = account_product_access;
    m_account_product_access_isSet = true;
}

bool OAIAccountAccess::is_account_product_access_Set() const{
    return m_account_product_access_isSet;
}

bool OAIAccountAccess::is_account_product_access_Valid() const{
    return m_account_product_access_isValid;
}

bool OAIAccountAccess::isAuthorized() const {
    return m_authorized;
}
void OAIAccountAccess::setAuthorized(const bool &authorized) {
    m_authorized = authorized;
    m_authorized_isSet = true;
}

bool OAIAccountAccess::is_authorized_Set() const{
    return m_authorized_isSet;
}

bool OAIAccountAccess::is_authorized_Valid() const{
    return m_authorized_isValid;
}

QString OAIAccountAccess::getUniqueId() const {
    return m_unique_id;
}
void OAIAccountAccess::setUniqueId(const QString &unique_id) {
    m_unique_id = unique_id;
    m_unique_id_isSet = true;
}

bool OAIAccountAccess::is_unique_id_Set() const{
    return m_unique_id_isSet;
}

bool OAIAccountAccess::is_unique_id_Valid() const{
    return m_unique_id_isValid;
}

bool OAIAccountAccess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_product_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountAccess::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_unique_id_isValid && true;
}

} // namespace OpenAPI
