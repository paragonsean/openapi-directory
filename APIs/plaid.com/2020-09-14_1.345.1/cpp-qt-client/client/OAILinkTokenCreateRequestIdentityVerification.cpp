/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkTokenCreateRequestIdentityVerification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkTokenCreateRequestIdentityVerification::OAILinkTokenCreateRequestIdentityVerification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkTokenCreateRequestIdentityVerification::OAILinkTokenCreateRequestIdentityVerification() {
    this->initializeModel();
}

OAILinkTokenCreateRequestIdentityVerification::~OAILinkTokenCreateRequestIdentityVerification() {}

void OAILinkTokenCreateRequestIdentityVerification::initializeModel() {

    m_consent_isSet = false;
    m_consent_isValid = false;

    m_gave_consent_isSet = false;
    m_gave_consent_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;
}

void OAILinkTokenCreateRequestIdentityVerification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinkTokenCreateRequestIdentityVerification::fromJsonObject(QJsonObject json) {

    m_consent_isValid = ::OpenAPI::fromJsonValue(m_consent, json[QString("consent")]);
    m_consent_isSet = !json[QString("consent")].isNull() && m_consent_isValid;

    m_gave_consent_isValid = ::OpenAPI::fromJsonValue(m_gave_consent, json[QString("gave_consent")]);
    m_gave_consent_isSet = !json[QString("gave_consent")].isNull() && m_gave_consent_isValid;

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("template_id")]);
    m_template_id_isSet = !json[QString("template_id")].isNull() && m_template_id_isValid;
}

QString OAILinkTokenCreateRequestIdentityVerification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinkTokenCreateRequestIdentityVerification::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_isSet) {
        obj.insert(QString("consent"), ::OpenAPI::toJsonValue(m_consent));
    }
    if (m_gave_consent_isSet) {
        obj.insert(QString("gave_consent"), ::OpenAPI::toJsonValue(m_gave_consent));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("template_id"), ::OpenAPI::toJsonValue(m_template_id));
    }
    return obj;
}

bool OAILinkTokenCreateRequestIdentityVerification::isConsent() const {
    return m_consent;
}
void OAILinkTokenCreateRequestIdentityVerification::setConsent(const bool &consent) {
    m_consent = consent;
    m_consent_isSet = true;
}

bool OAILinkTokenCreateRequestIdentityVerification::is_consent_Set() const{
    return m_consent_isSet;
}

bool OAILinkTokenCreateRequestIdentityVerification::is_consent_Valid() const{
    return m_consent_isValid;
}

bool OAILinkTokenCreateRequestIdentityVerification::isGaveConsent() const {
    return m_gave_consent;
}
void OAILinkTokenCreateRequestIdentityVerification::setGaveConsent(const bool &gave_consent) {
    m_gave_consent = gave_consent;
    m_gave_consent_isSet = true;
}

bool OAILinkTokenCreateRequestIdentityVerification::is_gave_consent_Set() const{
    return m_gave_consent_isSet;
}

bool OAILinkTokenCreateRequestIdentityVerification::is_gave_consent_Valid() const{
    return m_gave_consent_isValid;
}

QString OAILinkTokenCreateRequestIdentityVerification::getTemplateId() const {
    return m_template_id;
}
void OAILinkTokenCreateRequestIdentityVerification::setTemplateId(const QString &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAILinkTokenCreateRequestIdentityVerification::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAILinkTokenCreateRequestIdentityVerification::is_template_id_Valid() const{
    return m_template_id_isValid;
}

bool OAILinkTokenCreateRequestIdentityVerification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gave_consent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinkTokenCreateRequestIdentityVerification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_template_id_isValid && true;
}

} // namespace OpenAPI
