/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPlaidError.h
 *
 * We use standard HTTP response codes for success and failure notifications, and our errors are further classified by &#x60;error_type&#x60;. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-&#x60;null&#x60; error object will only be part of an API response when calling &#x60;/item/get&#x60; to view Item status. Otherwise, error fields will be &#x60;null&#x60; if no error has occurred; if an error has occurred, an error code will be returned instead.
 */

#ifndef OAIPlaidError_H
#define OAIPlaidError_H

#include <QJsonObject>

#include "OAIPlaidErrorType.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPlaidError : public OAIObject {
public:
    OAIPlaidError();
    OAIPlaidError(QString json);
    ~OAIPlaidError() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QJsonValue> getCauses() const;
    void setCauses(const QList<QJsonValue> &causes);
    bool is_causes_Set() const;
    bool is_causes_Valid() const;

    QString getDisplayMessage() const;
    void setDisplayMessage(const QString &display_message);
    bool is_display_message_Set() const;
    bool is_display_message_Valid() const;

    QString getDocumentationUrl() const;
    void setDocumentationUrl(const QString &documentation_url);
    bool is_documentation_url_Set() const;
    bool is_documentation_url_Valid() const;

    QString getErrorCode() const;
    void setErrorCode(const QString &error_code);
    bool is_error_code_Set() const;
    bool is_error_code_Valid() const;

    QString getErrorMessage() const;
    void setErrorMessage(const QString &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    OAIPlaidErrorType getErrorType() const;
    void setErrorType(const OAIPlaidErrorType &error_type);
    bool is_error_type_Set() const;
    bool is_error_type_Valid() const;

    QString getRequestId() const;
    void setRequestId(const QString &request_id);
    bool is_request_id_Set() const;
    bool is_request_id_Valid() const;

    double getStatus() const;
    void setStatus(const double &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getSuggestedAction() const;
    void setSuggestedAction(const QString &suggested_action);
    bool is_suggested_action_Set() const;
    bool is_suggested_action_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QJsonValue> m_causes;
    bool m_causes_isSet;
    bool m_causes_isValid;

    QString m_display_message;
    bool m_display_message_isSet;
    bool m_display_message_isValid;

    QString m_documentation_url;
    bool m_documentation_url_isSet;
    bool m_documentation_url_isValid;

    QString m_error_code;
    bool m_error_code_isSet;
    bool m_error_code_isValid;

    QString m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    OAIPlaidErrorType m_error_type;
    bool m_error_type_isSet;
    bool m_error_type_isValid;

    QString m_request_id;
    bool m_request_id_isSet;
    bool m_request_id_isValid;

    double m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_suggested_action;
    bool m_suggested_action_isSet;
    bool m_suggested_action_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPlaidError)

#endif // OAIPlaidError_H
