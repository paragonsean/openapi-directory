/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRiskCheckEmail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRiskCheckEmail::OAIRiskCheckEmail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRiskCheckEmail::OAIRiskCheckEmail() {
    this->initializeModel();
}

OAIRiskCheckEmail::~OAIRiskCheckEmail() {}

void OAIRiskCheckEmail::initializeModel() {

    m_breach_count_isSet = false;
    m_breach_count_isValid = false;

    m_domain_is_custom_isSet = false;
    m_domain_is_custom_isValid = false;

    m_domain_is_disposable_isSet = false;
    m_domain_is_disposable_isValid = false;

    m_domain_is_free_provider_isSet = false;
    m_domain_is_free_provider_isValid = false;

    m_domain_registered_at_isSet = false;
    m_domain_registered_at_isValid = false;

    m_first_breached_at_isSet = false;
    m_first_breached_at_isValid = false;

    m_is_deliverable_isSet = false;
    m_is_deliverable_isValid = false;

    m_last_breached_at_isSet = false;
    m_last_breached_at_isValid = false;

    m_linked_services_isSet = false;
    m_linked_services_isValid = false;

    m_top_level_domain_is_suspicious_isSet = false;
    m_top_level_domain_is_suspicious_isValid = false;
}

void OAIRiskCheckEmail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRiskCheckEmail::fromJsonObject(QJsonObject json) {

    m_breach_count_isValid = ::OpenAPI::fromJsonValue(m_breach_count, json[QString("breach_count")]);
    m_breach_count_isSet = !json[QString("breach_count")].isNull() && m_breach_count_isValid;

    m_domain_is_custom_isValid = ::OpenAPI::fromJsonValue(m_domain_is_custom, json[QString("domain_is_custom")]);
    m_domain_is_custom_isSet = !json[QString("domain_is_custom")].isNull() && m_domain_is_custom_isValid;

    m_domain_is_disposable_isValid = ::OpenAPI::fromJsonValue(m_domain_is_disposable, json[QString("domain_is_disposable")]);
    m_domain_is_disposable_isSet = !json[QString("domain_is_disposable")].isNull() && m_domain_is_disposable_isValid;

    m_domain_is_free_provider_isValid = ::OpenAPI::fromJsonValue(m_domain_is_free_provider, json[QString("domain_is_free_provider")]);
    m_domain_is_free_provider_isSet = !json[QString("domain_is_free_provider")].isNull() && m_domain_is_free_provider_isValid;

    m_domain_registered_at_isValid = ::OpenAPI::fromJsonValue(m_domain_registered_at, json[QString("domain_registered_at")]);
    m_domain_registered_at_isSet = !json[QString("domain_registered_at")].isNull() && m_domain_registered_at_isValid;

    m_first_breached_at_isValid = ::OpenAPI::fromJsonValue(m_first_breached_at, json[QString("first_breached_at")]);
    m_first_breached_at_isSet = !json[QString("first_breached_at")].isNull() && m_first_breached_at_isValid;

    m_is_deliverable_isValid = ::OpenAPI::fromJsonValue(m_is_deliverable, json[QString("is_deliverable")]);
    m_is_deliverable_isSet = !json[QString("is_deliverable")].isNull() && m_is_deliverable_isValid;

    m_last_breached_at_isValid = ::OpenAPI::fromJsonValue(m_last_breached_at, json[QString("last_breached_at")]);
    m_last_breached_at_isSet = !json[QString("last_breached_at")].isNull() && m_last_breached_at_isValid;

    m_linked_services_isValid = ::OpenAPI::fromJsonValue(m_linked_services, json[QString("linked_services")]);
    m_linked_services_isSet = !json[QString("linked_services")].isNull() && m_linked_services_isValid;

    m_top_level_domain_is_suspicious_isValid = ::OpenAPI::fromJsonValue(m_top_level_domain_is_suspicious, json[QString("top_level_domain_is_suspicious")]);
    m_top_level_domain_is_suspicious_isSet = !json[QString("top_level_domain_is_suspicious")].isNull() && m_top_level_domain_is_suspicious_isValid;
}

QString OAIRiskCheckEmail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRiskCheckEmail::asJsonObject() const {
    QJsonObject obj;
    if (m_breach_count_isSet) {
        obj.insert(QString("breach_count"), ::OpenAPI::toJsonValue(m_breach_count));
    }
    if (m_domain_is_custom.isSet()) {
        obj.insert(QString("domain_is_custom"), ::OpenAPI::toJsonValue(m_domain_is_custom));
    }
    if (m_domain_is_disposable.isSet()) {
        obj.insert(QString("domain_is_disposable"), ::OpenAPI::toJsonValue(m_domain_is_disposable));
    }
    if (m_domain_is_free_provider.isSet()) {
        obj.insert(QString("domain_is_free_provider"), ::OpenAPI::toJsonValue(m_domain_is_free_provider));
    }
    if (m_domain_registered_at_isSet) {
        obj.insert(QString("domain_registered_at"), ::OpenAPI::toJsonValue(m_domain_registered_at));
    }
    if (m_first_breached_at_isSet) {
        obj.insert(QString("first_breached_at"), ::OpenAPI::toJsonValue(m_first_breached_at));
    }
    if (m_is_deliverable.isSet()) {
        obj.insert(QString("is_deliverable"), ::OpenAPI::toJsonValue(m_is_deliverable));
    }
    if (m_last_breached_at_isSet) {
        obj.insert(QString("last_breached_at"), ::OpenAPI::toJsonValue(m_last_breached_at));
    }
    if (m_linked_services.size() > 0) {
        obj.insert(QString("linked_services"), ::OpenAPI::toJsonValue(m_linked_services));
    }
    if (m_top_level_domain_is_suspicious.isSet()) {
        obj.insert(QString("top_level_domain_is_suspicious"), ::OpenAPI::toJsonValue(m_top_level_domain_is_suspicious));
    }
    return obj;
}

qint32 OAIRiskCheckEmail::getBreachCount() const {
    return m_breach_count;
}
void OAIRiskCheckEmail::setBreachCount(const qint32 &breach_count) {
    m_breach_count = breach_count;
    m_breach_count_isSet = true;
}

bool OAIRiskCheckEmail::is_breach_count_Set() const{
    return m_breach_count_isSet;
}

bool OAIRiskCheckEmail::is_breach_count_Valid() const{
    return m_breach_count_isValid;
}

OAIRiskCheckEmailDomainIsCustom OAIRiskCheckEmail::getDomainIsCustom() const {
    return m_domain_is_custom;
}
void OAIRiskCheckEmail::setDomainIsCustom(const OAIRiskCheckEmailDomainIsCustom &domain_is_custom) {
    m_domain_is_custom = domain_is_custom;
    m_domain_is_custom_isSet = true;
}

bool OAIRiskCheckEmail::is_domain_is_custom_Set() const{
    return m_domain_is_custom_isSet;
}

bool OAIRiskCheckEmail::is_domain_is_custom_Valid() const{
    return m_domain_is_custom_isValid;
}

OAIRiskCheckEmailDomainIsDisposable OAIRiskCheckEmail::getDomainIsDisposable() const {
    return m_domain_is_disposable;
}
void OAIRiskCheckEmail::setDomainIsDisposable(const OAIRiskCheckEmailDomainIsDisposable &domain_is_disposable) {
    m_domain_is_disposable = domain_is_disposable;
    m_domain_is_disposable_isSet = true;
}

bool OAIRiskCheckEmail::is_domain_is_disposable_Set() const{
    return m_domain_is_disposable_isSet;
}

bool OAIRiskCheckEmail::is_domain_is_disposable_Valid() const{
    return m_domain_is_disposable_isValid;
}

OAIRiskCheckEmailDomainIsFreeProvider OAIRiskCheckEmail::getDomainIsFreeProvider() const {
    return m_domain_is_free_provider;
}
void OAIRiskCheckEmail::setDomainIsFreeProvider(const OAIRiskCheckEmailDomainIsFreeProvider &domain_is_free_provider) {
    m_domain_is_free_provider = domain_is_free_provider;
    m_domain_is_free_provider_isSet = true;
}

bool OAIRiskCheckEmail::is_domain_is_free_provider_Set() const{
    return m_domain_is_free_provider_isSet;
}

bool OAIRiskCheckEmail::is_domain_is_free_provider_Valid() const{
    return m_domain_is_free_provider_isValid;
}

QDate OAIRiskCheckEmail::getDomainRegisteredAt() const {
    return m_domain_registered_at;
}
void OAIRiskCheckEmail::setDomainRegisteredAt(const QDate &domain_registered_at) {
    m_domain_registered_at = domain_registered_at;
    m_domain_registered_at_isSet = true;
}

bool OAIRiskCheckEmail::is_domain_registered_at_Set() const{
    return m_domain_registered_at_isSet;
}

bool OAIRiskCheckEmail::is_domain_registered_at_Valid() const{
    return m_domain_registered_at_isValid;
}

QDate OAIRiskCheckEmail::getFirstBreachedAt() const {
    return m_first_breached_at;
}
void OAIRiskCheckEmail::setFirstBreachedAt(const QDate &first_breached_at) {
    m_first_breached_at = first_breached_at;
    m_first_breached_at_isSet = true;
}

bool OAIRiskCheckEmail::is_first_breached_at_Set() const{
    return m_first_breached_at_isSet;
}

bool OAIRiskCheckEmail::is_first_breached_at_Valid() const{
    return m_first_breached_at_isValid;
}

OAIRiskCheckEmailIsDeliverableStatus OAIRiskCheckEmail::getIsDeliverable() const {
    return m_is_deliverable;
}
void OAIRiskCheckEmail::setIsDeliverable(const OAIRiskCheckEmailIsDeliverableStatus &is_deliverable) {
    m_is_deliverable = is_deliverable;
    m_is_deliverable_isSet = true;
}

bool OAIRiskCheckEmail::is_is_deliverable_Set() const{
    return m_is_deliverable_isSet;
}

bool OAIRiskCheckEmail::is_is_deliverable_Valid() const{
    return m_is_deliverable_isValid;
}

QDate OAIRiskCheckEmail::getLastBreachedAt() const {
    return m_last_breached_at;
}
void OAIRiskCheckEmail::setLastBreachedAt(const QDate &last_breached_at) {
    m_last_breached_at = last_breached_at;
    m_last_breached_at_isSet = true;
}

bool OAIRiskCheckEmail::is_last_breached_at_Set() const{
    return m_last_breached_at_isSet;
}

bool OAIRiskCheckEmail::is_last_breached_at_Valid() const{
    return m_last_breached_at_isValid;
}

QSet<OAIRiskCheckLinkedService> OAIRiskCheckEmail::getLinkedServices() const {
    return m_linked_services;
}
void OAIRiskCheckEmail::setLinkedServices(const QSet<OAIRiskCheckLinkedService> &linked_services) {
    m_linked_services = linked_services;
    m_linked_services_isSet = true;
}

bool OAIRiskCheckEmail::is_linked_services_Set() const{
    return m_linked_services_isSet;
}

bool OAIRiskCheckEmail::is_linked_services_Valid() const{
    return m_linked_services_isValid;
}

OAIRiskCheckEmailTopLevelDomainIsSuspicious OAIRiskCheckEmail::getTopLevelDomainIsSuspicious() const {
    return m_top_level_domain_is_suspicious;
}
void OAIRiskCheckEmail::setTopLevelDomainIsSuspicious(const OAIRiskCheckEmailTopLevelDomainIsSuspicious &top_level_domain_is_suspicious) {
    m_top_level_domain_is_suspicious = top_level_domain_is_suspicious;
    m_top_level_domain_is_suspicious_isSet = true;
}

bool OAIRiskCheckEmail::is_top_level_domain_is_suspicious_Set() const{
    return m_top_level_domain_is_suspicious_isSet;
}

bool OAIRiskCheckEmail::is_top_level_domain_is_suspicious_Valid() const{
    return m_top_level_domain_is_suspicious_isValid;
}

bool OAIRiskCheckEmail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_breach_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_is_custom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_is_disposable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_is_free_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_registered_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_breached_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deliverable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_breached_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_level_domain_is_suspicious.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRiskCheckEmail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_breach_count_isValid && m_domain_is_custom_isValid && m_domain_is_disposable_isValid && m_domain_is_free_provider_isValid && m_domain_registered_at_isValid && m_first_breached_at_isValid && m_is_deliverable_isValid && m_last_breached_at_isValid && m_linked_services_isValid && m_top_level_domain_is_suspicious_isValid && true;
}

} // namespace OpenAPI
