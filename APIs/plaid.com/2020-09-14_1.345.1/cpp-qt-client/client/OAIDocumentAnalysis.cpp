/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentAnalysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentAnalysis::OAIDocumentAnalysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentAnalysis::OAIDocumentAnalysis() {
    this->initializeModel();
}

OAIDocumentAnalysis::~OAIDocumentAnalysis() {}

void OAIDocumentAnalysis::initializeModel() {

    m_authenticity_isSet = false;
    m_authenticity_isValid = false;

    m_extracted_data_isSet = false;
    m_extracted_data_isValid = false;

    m_image_quality_isSet = false;
    m_image_quality_isValid = false;
}

void OAIDocumentAnalysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentAnalysis::fromJsonObject(QJsonObject json) {

    m_authenticity_isValid = ::OpenAPI::fromJsonValue(m_authenticity, json[QString("authenticity")]);
    m_authenticity_isSet = !json[QString("authenticity")].isNull() && m_authenticity_isValid;

    m_extracted_data_isValid = ::OpenAPI::fromJsonValue(m_extracted_data, json[QString("extracted_data")]);
    m_extracted_data_isSet = !json[QString("extracted_data")].isNull() && m_extracted_data_isValid;

    m_image_quality_isValid = ::OpenAPI::fromJsonValue(m_image_quality, json[QString("image_quality")]);
    m_image_quality_isSet = !json[QString("image_quality")].isNull() && m_image_quality_isValid;
}

QString OAIDocumentAnalysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentAnalysis::asJsonObject() const {
    QJsonObject obj;
    if (m_authenticity.isSet()) {
        obj.insert(QString("authenticity"), ::OpenAPI::toJsonValue(m_authenticity));
    }
    if (m_extracted_data.isSet()) {
        obj.insert(QString("extracted_data"), ::OpenAPI::toJsonValue(m_extracted_data));
    }
    if (m_image_quality.isSet()) {
        obj.insert(QString("image_quality"), ::OpenAPI::toJsonValue(m_image_quality));
    }
    return obj;
}

OAIDocumentAuthenticityMatchCode OAIDocumentAnalysis::getAuthenticity() const {
    return m_authenticity;
}
void OAIDocumentAnalysis::setAuthenticity(const OAIDocumentAuthenticityMatchCode &authenticity) {
    m_authenticity = authenticity;
    m_authenticity_isSet = true;
}

bool OAIDocumentAnalysis::is_authenticity_Set() const{
    return m_authenticity_isSet;
}

bool OAIDocumentAnalysis::is_authenticity_Valid() const{
    return m_authenticity_isValid;
}

OAIPhysicalDocumentExtractedDataAnalysis OAIDocumentAnalysis::getExtractedData() const {
    return m_extracted_data;
}
void OAIDocumentAnalysis::setExtractedData(const OAIPhysicalDocumentExtractedDataAnalysis &extracted_data) {
    m_extracted_data = extracted_data;
    m_extracted_data_isSet = true;
}

bool OAIDocumentAnalysis::is_extracted_data_Set() const{
    return m_extracted_data_isSet;
}

bool OAIDocumentAnalysis::is_extracted_data_Valid() const{
    return m_extracted_data_isValid;
}

OAIImageQuality OAIDocumentAnalysis::getImageQuality() const {
    return m_image_quality;
}
void OAIDocumentAnalysis::setImageQuality(const OAIImageQuality &image_quality) {
    m_image_quality = image_quality;
    m_image_quality_isSet = true;
}

bool OAIDocumentAnalysis::is_image_quality_Set() const{
    return m_image_quality_isSet;
}

bool OAIDocumentAnalysis::is_image_quality_Valid() const{
    return m_image_quality_isValid;
}

bool OAIDocumentAnalysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authenticity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extracted_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_quality.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentAnalysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authenticity_isValid && m_extracted_data_isValid && m_image_quality_isValid && true;
}

} // namespace OpenAPI
