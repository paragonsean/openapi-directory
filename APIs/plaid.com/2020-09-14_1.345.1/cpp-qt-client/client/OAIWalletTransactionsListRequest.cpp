/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWalletTransactionsListRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWalletTransactionsListRequest::OAIWalletTransactionsListRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWalletTransactionsListRequest::OAIWalletTransactionsListRequest() {
    this->initializeModel();
}

OAIWalletTransactionsListRequest::~OAIWalletTransactionsListRequest() {}

void OAIWalletTransactionsListRequest::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_cursor_isSet = false;
    m_cursor_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_wallet_id_isSet = false;
    m_wallet_id_isValid = false;
}

void OAIWalletTransactionsListRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWalletTransactionsListRequest::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_cursor_isValid = ::OpenAPI::fromJsonValue(m_cursor, json[QString("cursor")]);
    m_cursor_isSet = !json[QString("cursor")].isNull() && m_cursor_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_wallet_id_isValid = ::OpenAPI::fromJsonValue(m_wallet_id, json[QString("wallet_id")]);
    m_wallet_id_isSet = !json[QString("wallet_id")].isNull() && m_wallet_id_isValid;
}

QString OAIWalletTransactionsListRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWalletTransactionsListRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_cursor_isSet) {
        obj.insert(QString("cursor"), ::OpenAPI::toJsonValue(m_cursor));
    }
    if (m_options.isSet()) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_wallet_id_isSet) {
        obj.insert(QString("wallet_id"), ::OpenAPI::toJsonValue(m_wallet_id));
    }
    return obj;
}

QString OAIWalletTransactionsListRequest::getClientId() const {
    return m_client_id;
}
void OAIWalletTransactionsListRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIWalletTransactionsListRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIWalletTransactionsListRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

qint32 OAIWalletTransactionsListRequest::getCount() const {
    return m_count;
}
void OAIWalletTransactionsListRequest::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIWalletTransactionsListRequest::is_count_Set() const{
    return m_count_isSet;
}

bool OAIWalletTransactionsListRequest::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIWalletTransactionsListRequest::getCursor() const {
    return m_cursor;
}
void OAIWalletTransactionsListRequest::setCursor(const QString &cursor) {
    m_cursor = cursor;
    m_cursor_isSet = true;
}

bool OAIWalletTransactionsListRequest::is_cursor_Set() const{
    return m_cursor_isSet;
}

bool OAIWalletTransactionsListRequest::is_cursor_Valid() const{
    return m_cursor_isValid;
}

OAIWalletTransactionListRequestOptions OAIWalletTransactionsListRequest::getOptions() const {
    return m_options;
}
void OAIWalletTransactionsListRequest::setOptions(const OAIWalletTransactionListRequestOptions &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIWalletTransactionsListRequest::is_options_Set() const{
    return m_options_isSet;
}

bool OAIWalletTransactionsListRequest::is_options_Valid() const{
    return m_options_isValid;
}

QString OAIWalletTransactionsListRequest::getSecret() const {
    return m_secret;
}
void OAIWalletTransactionsListRequest::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIWalletTransactionsListRequest::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIWalletTransactionsListRequest::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAIWalletTransactionsListRequest::getWalletId() const {
    return m_wallet_id;
}
void OAIWalletTransactionsListRequest::setWalletId(const QString &wallet_id) {
    m_wallet_id = wallet_id;
    m_wallet_id_isSet = true;
}

bool OAIWalletTransactionsListRequest::is_wallet_id_Set() const{
    return m_wallet_id_isSet;
}

bool OAIWalletTransactionsListRequest::is_wallet_id_Valid() const{
    return m_wallet_id_isValid;
}

bool OAIWalletTransactionsListRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wallet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWalletTransactionsListRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_wallet_id_isValid && true;
}

} // namespace OpenAPI
