/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeductionsBreakdown.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeductionsBreakdown::OAIDeductionsBreakdown(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeductionsBreakdown::OAIDeductionsBreakdown() {
    this->initializeModel();
}

OAIDeductionsBreakdown::~OAIDeductionsBreakdown() {}

void OAIDeductionsBreakdown::initializeModel() {

    m_current_amount_isSet = false;
    m_current_amount_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_iso_currency_code_isSet = false;
    m_iso_currency_code_isValid = false;

    m_unofficial_currency_code_isSet = false;
    m_unofficial_currency_code_isValid = false;

    m_ytd_amount_isSet = false;
    m_ytd_amount_isValid = false;
}

void OAIDeductionsBreakdown::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeductionsBreakdown::fromJsonObject(QJsonObject json) {

    m_current_amount_isValid = ::OpenAPI::fromJsonValue(m_current_amount, json[QString("current_amount")]);
    m_current_amount_isSet = !json[QString("current_amount")].isNull() && m_current_amount_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_iso_currency_code_isValid = ::OpenAPI::fromJsonValue(m_iso_currency_code, json[QString("iso_currency_code")]);
    m_iso_currency_code_isSet = !json[QString("iso_currency_code")].isNull() && m_iso_currency_code_isValid;

    m_unofficial_currency_code_isValid = ::OpenAPI::fromJsonValue(m_unofficial_currency_code, json[QString("unofficial_currency_code")]);
    m_unofficial_currency_code_isSet = !json[QString("unofficial_currency_code")].isNull() && m_unofficial_currency_code_isValid;

    m_ytd_amount_isValid = ::OpenAPI::fromJsonValue(m_ytd_amount, json[QString("ytd_amount")]);
    m_ytd_amount_isSet = !json[QString("ytd_amount")].isNull() && m_ytd_amount_isValid;
}

QString OAIDeductionsBreakdown::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeductionsBreakdown::asJsonObject() const {
    QJsonObject obj;
    if (m_current_amount_isSet) {
        obj.insert(QString("current_amount"), ::OpenAPI::toJsonValue(m_current_amount));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_iso_currency_code_isSet) {
        obj.insert(QString("iso_currency_code"), ::OpenAPI::toJsonValue(m_iso_currency_code));
    }
    if (m_unofficial_currency_code_isSet) {
        obj.insert(QString("unofficial_currency_code"), ::OpenAPI::toJsonValue(m_unofficial_currency_code));
    }
    if (m_ytd_amount_isSet) {
        obj.insert(QString("ytd_amount"), ::OpenAPI::toJsonValue(m_ytd_amount));
    }
    return obj;
}

double OAIDeductionsBreakdown::getCurrentAmount() const {
    return m_current_amount;
}
void OAIDeductionsBreakdown::setCurrentAmount(const double &current_amount) {
    m_current_amount = current_amount;
    m_current_amount_isSet = true;
}

bool OAIDeductionsBreakdown::is_current_amount_Set() const{
    return m_current_amount_isSet;
}

bool OAIDeductionsBreakdown::is_current_amount_Valid() const{
    return m_current_amount_isValid;
}

QString OAIDeductionsBreakdown::getDescription() const {
    return m_description;
}
void OAIDeductionsBreakdown::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeductionsBreakdown::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeductionsBreakdown::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDeductionsBreakdown::getIsoCurrencyCode() const {
    return m_iso_currency_code;
}
void OAIDeductionsBreakdown::setIsoCurrencyCode(const QString &iso_currency_code) {
    m_iso_currency_code = iso_currency_code;
    m_iso_currency_code_isSet = true;
}

bool OAIDeductionsBreakdown::is_iso_currency_code_Set() const{
    return m_iso_currency_code_isSet;
}

bool OAIDeductionsBreakdown::is_iso_currency_code_Valid() const{
    return m_iso_currency_code_isValid;
}

QString OAIDeductionsBreakdown::getUnofficialCurrencyCode() const {
    return m_unofficial_currency_code;
}
void OAIDeductionsBreakdown::setUnofficialCurrencyCode(const QString &unofficial_currency_code) {
    m_unofficial_currency_code = unofficial_currency_code;
    m_unofficial_currency_code_isSet = true;
}

bool OAIDeductionsBreakdown::is_unofficial_currency_code_Set() const{
    return m_unofficial_currency_code_isSet;
}

bool OAIDeductionsBreakdown::is_unofficial_currency_code_Valid() const{
    return m_unofficial_currency_code_isValid;
}

double OAIDeductionsBreakdown::getYtdAmount() const {
    return m_ytd_amount;
}
void OAIDeductionsBreakdown::setYtdAmount(const double &ytd_amount) {
    m_ytd_amount = ytd_amount;
    m_ytd_amount_isSet = true;
}

bool OAIDeductionsBreakdown::is_ytd_amount_Set() const{
    return m_ytd_amount_isSet;
}

bool OAIDeductionsBreakdown::is_ytd_amount_Valid() const{
    return m_ytd_amount_isValid;
}

bool OAIDeductionsBreakdown::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unofficial_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ytd_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeductionsBreakdown::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
