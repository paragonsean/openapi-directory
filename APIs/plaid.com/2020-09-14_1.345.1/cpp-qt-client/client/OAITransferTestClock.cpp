/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferTestClock.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferTestClock::OAITransferTestClock(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferTestClock::OAITransferTestClock() {
    this->initializeModel();
}

OAITransferTestClock::~OAITransferTestClock() {}

void OAITransferTestClock::initializeModel() {

    m_test_clock_id_isSet = false;
    m_test_clock_id_isValid = false;

    m_virtual_time_isSet = false;
    m_virtual_time_isValid = false;
}

void OAITransferTestClock::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferTestClock::fromJsonObject(QJsonObject json) {

    m_test_clock_id_isValid = ::OpenAPI::fromJsonValue(m_test_clock_id, json[QString("test_clock_id")]);
    m_test_clock_id_isSet = !json[QString("test_clock_id")].isNull() && m_test_clock_id_isValid;

    m_virtual_time_isValid = ::OpenAPI::fromJsonValue(m_virtual_time, json[QString("virtual_time")]);
    m_virtual_time_isSet = !json[QString("virtual_time")].isNull() && m_virtual_time_isValid;
}

QString OAITransferTestClock::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferTestClock::asJsonObject() const {
    QJsonObject obj;
    if (m_test_clock_id_isSet) {
        obj.insert(QString("test_clock_id"), ::OpenAPI::toJsonValue(m_test_clock_id));
    }
    if (m_virtual_time_isSet) {
        obj.insert(QString("virtual_time"), ::OpenAPI::toJsonValue(m_virtual_time));
    }
    return obj;
}

QString OAITransferTestClock::getTestClockId() const {
    return m_test_clock_id;
}
void OAITransferTestClock::setTestClockId(const QString &test_clock_id) {
    m_test_clock_id = test_clock_id;
    m_test_clock_id_isSet = true;
}

bool OAITransferTestClock::is_test_clock_id_Set() const{
    return m_test_clock_id_isSet;
}

bool OAITransferTestClock::is_test_clock_id_Valid() const{
    return m_test_clock_id_isValid;
}

QDateTime OAITransferTestClock::getVirtualTime() const {
    return m_virtual_time;
}
void OAITransferTestClock::setVirtualTime(const QDateTime &virtual_time) {
    m_virtual_time = virtual_time;
    m_virtual_time_isSet = true;
}

bool OAITransferTestClock::is_virtual_time_Set() const{
    return m_virtual_time_isSet;
}

bool OAITransferTestClock::is_virtual_time_Valid() const{
    return m_virtual_time_isValid;
}

bool OAITransferTestClock::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_test_clock_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferTestClock::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_test_clock_id_isValid && m_virtual_time_isValid && true;
}

} // namespace OpenAPI
