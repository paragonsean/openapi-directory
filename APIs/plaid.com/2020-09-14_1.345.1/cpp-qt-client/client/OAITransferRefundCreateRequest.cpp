/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferRefundCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferRefundCreateRequest::OAITransferRefundCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferRefundCreateRequest::OAITransferRefundCreateRequest() {
    this->initializeModel();
}

OAITransferRefundCreateRequest::~OAITransferRefundCreateRequest() {}

void OAITransferRefundCreateRequest::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_idempotency_key_isSet = false;
    m_idempotency_key_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_transfer_id_isSet = false;
    m_transfer_id_isValid = false;
}

void OAITransferRefundCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferRefundCreateRequest::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_idempotency_key_isValid = ::OpenAPI::fromJsonValue(m_idempotency_key, json[QString("idempotency_key")]);
    m_idempotency_key_isSet = !json[QString("idempotency_key")].isNull() && m_idempotency_key_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_transfer_id_isValid = ::OpenAPI::fromJsonValue(m_transfer_id, json[QString("transfer_id")]);
    m_transfer_id_isSet = !json[QString("transfer_id")].isNull() && m_transfer_id_isValid;
}

QString OAITransferRefundCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferRefundCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_idempotency_key_isSet) {
        obj.insert(QString("idempotency_key"), ::OpenAPI::toJsonValue(m_idempotency_key));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_transfer_id_isSet) {
        obj.insert(QString("transfer_id"), ::OpenAPI::toJsonValue(m_transfer_id));
    }
    return obj;
}

QString OAITransferRefundCreateRequest::getAmount() const {
    return m_amount;
}
void OAITransferRefundCreateRequest::setAmount(const QString &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransferRefundCreateRequest::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransferRefundCreateRequest::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAITransferRefundCreateRequest::getClientId() const {
    return m_client_id;
}
void OAITransferRefundCreateRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAITransferRefundCreateRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAITransferRefundCreateRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAITransferRefundCreateRequest::getIdempotencyKey() const {
    return m_idempotency_key;
}
void OAITransferRefundCreateRequest::setIdempotencyKey(const QString &idempotency_key) {
    m_idempotency_key = idempotency_key;
    m_idempotency_key_isSet = true;
}

bool OAITransferRefundCreateRequest::is_idempotency_key_Set() const{
    return m_idempotency_key_isSet;
}

bool OAITransferRefundCreateRequest::is_idempotency_key_Valid() const{
    return m_idempotency_key_isValid;
}

QString OAITransferRefundCreateRequest::getSecret() const {
    return m_secret;
}
void OAITransferRefundCreateRequest::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAITransferRefundCreateRequest::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAITransferRefundCreateRequest::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAITransferRefundCreateRequest::getTransferId() const {
    return m_transfer_id;
}
void OAITransferRefundCreateRequest::setTransferId(const QString &transfer_id) {
    m_transfer_id = transfer_id;
    m_transfer_id_isSet = true;
}

bool OAITransferRefundCreateRequest::is_transfer_id_Set() const{
    return m_transfer_id_isSet;
}

bool OAITransferRefundCreateRequest::is_transfer_id_Valid() const{
    return m_transfer_id_isValid;
}

bool OAITransferRefundCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferRefundCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_idempotency_key_isValid && m_transfer_id_isValid && true;
}

} // namespace OpenAPI
