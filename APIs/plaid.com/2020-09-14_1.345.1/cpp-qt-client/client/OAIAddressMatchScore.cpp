/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddressMatchScore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddressMatchScore::OAIAddressMatchScore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddressMatchScore::OAIAddressMatchScore() {
    this->initializeModel();
}

OAIAddressMatchScore::~OAIAddressMatchScore() {}

void OAIAddressMatchScore::initializeModel() {

    m_is_postal_code_match_isSet = false;
    m_is_postal_code_match_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIAddressMatchScore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddressMatchScore::fromJsonObject(QJsonObject json) {

    m_is_postal_code_match_isValid = ::OpenAPI::fromJsonValue(m_is_postal_code_match, json[QString("is_postal_code_match")]);
    m_is_postal_code_match_isSet = !json[QString("is_postal_code_match")].isNull() && m_is_postal_code_match_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAIAddressMatchScore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddressMatchScore::asJsonObject() const {
    QJsonObject obj;
    if (m_is_postal_code_match_isSet) {
        obj.insert(QString("is_postal_code_match"), ::OpenAPI::toJsonValue(m_is_postal_code_match));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

bool OAIAddressMatchScore::isIsPostalCodeMatch() const {
    return m_is_postal_code_match;
}
void OAIAddressMatchScore::setIsPostalCodeMatch(const bool &is_postal_code_match) {
    m_is_postal_code_match = is_postal_code_match;
    m_is_postal_code_match_isSet = true;
}

bool OAIAddressMatchScore::is_is_postal_code_match_Set() const{
    return m_is_postal_code_match_isSet;
}

bool OAIAddressMatchScore::is_is_postal_code_match_Valid() const{
    return m_is_postal_code_match_isValid;
}

qint32 OAIAddressMatchScore::getScore() const {
    return m_score;
}
void OAIAddressMatchScore::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIAddressMatchScore::is_score_Set() const{
    return m_score_isSet;
}

bool OAIAddressMatchScore::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIAddressMatchScore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_postal_code_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddressMatchScore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
