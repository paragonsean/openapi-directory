/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerificationOfAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerificationOfAsset::OAIVerificationOfAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerificationOfAsset::OAIVerificationOfAsset() {
    this->initializeModel();
}

OAIVerificationOfAsset::~OAIVerificationOfAsset() {}

void OAIVerificationOfAsset::initializeModel() {

    m_reporting_information_isSet = false;
    m_reporting_information_isValid = false;

    m_service_product_fulfillment_isSet = false;
    m_service_product_fulfillment_isValid = false;

    m_verification_of_asset_response_isSet = false;
    m_verification_of_asset_response_isValid = false;
}

void OAIVerificationOfAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerificationOfAsset::fromJsonObject(QJsonObject json) {

    m_reporting_information_isValid = ::OpenAPI::fromJsonValue(m_reporting_information, json[QString("REPORTING_INFORMATION")]);
    m_reporting_information_isSet = !json[QString("REPORTING_INFORMATION")].isNull() && m_reporting_information_isValid;

    m_service_product_fulfillment_isValid = ::OpenAPI::fromJsonValue(m_service_product_fulfillment, json[QString("SERVICE_PRODUCT_FULFILLMENT")]);
    m_service_product_fulfillment_isSet = !json[QString("SERVICE_PRODUCT_FULFILLMENT")].isNull() && m_service_product_fulfillment_isValid;

    m_verification_of_asset_response_isValid = ::OpenAPI::fromJsonValue(m_verification_of_asset_response, json[QString("VERIFICATION_OF_ASSET_RESPONSE")]);
    m_verification_of_asset_response_isSet = !json[QString("VERIFICATION_OF_ASSET_RESPONSE")].isNull() && m_verification_of_asset_response_isValid;
}

QString OAIVerificationOfAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerificationOfAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_reporting_information.isSet()) {
        obj.insert(QString("REPORTING_INFORMATION"), ::OpenAPI::toJsonValue(m_reporting_information));
    }
    if (m_service_product_fulfillment.isSet()) {
        obj.insert(QString("SERVICE_PRODUCT_FULFILLMENT"), ::OpenAPI::toJsonValue(m_service_product_fulfillment));
    }
    if (m_verification_of_asset_response.isSet()) {
        obj.insert(QString("VERIFICATION_OF_ASSET_RESPONSE"), ::OpenAPI::toJsonValue(m_verification_of_asset_response));
    }
    return obj;
}

OAIReportingInformation OAIVerificationOfAsset::getReportingInformation() const {
    return m_reporting_information;
}
void OAIVerificationOfAsset::setReportingInformation(const OAIReportingInformation &reporting_information) {
    m_reporting_information = reporting_information;
    m_reporting_information_isSet = true;
}

bool OAIVerificationOfAsset::is_reporting_information_Set() const{
    return m_reporting_information_isSet;
}

bool OAIVerificationOfAsset::is_reporting_information_Valid() const{
    return m_reporting_information_isValid;
}

OAIServiceProductFulfillment OAIVerificationOfAsset::getServiceProductFulfillment() const {
    return m_service_product_fulfillment;
}
void OAIVerificationOfAsset::setServiceProductFulfillment(const OAIServiceProductFulfillment &service_product_fulfillment) {
    m_service_product_fulfillment = service_product_fulfillment;
    m_service_product_fulfillment_isSet = true;
}

bool OAIVerificationOfAsset::is_service_product_fulfillment_Set() const{
    return m_service_product_fulfillment_isSet;
}

bool OAIVerificationOfAsset::is_service_product_fulfillment_Valid() const{
    return m_service_product_fulfillment_isValid;
}

OAIVerificationOfAssetResponse OAIVerificationOfAsset::getVerificationOfAssetResponse() const {
    return m_verification_of_asset_response;
}
void OAIVerificationOfAsset::setVerificationOfAssetResponse(const OAIVerificationOfAssetResponse &verification_of_asset_response) {
    m_verification_of_asset_response = verification_of_asset_response;
    m_verification_of_asset_response_isSet = true;
}

bool OAIVerificationOfAsset::is_verification_of_asset_response_Set() const{
    return m_verification_of_asset_response_isSet;
}

bool OAIVerificationOfAsset::is_verification_of_asset_response_Valid() const{
    return m_verification_of_asset_response_isValid;
}

bool OAIVerificationOfAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reporting_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_product_fulfillment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_of_asset_response.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerificationOfAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_reporting_information_isValid && m_service_product_fulfillment_isValid && m_verification_of_asset_response_isValid && true;
}

} // namespace OpenAPI
