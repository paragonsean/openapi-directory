/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaystubOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaystubOverride::OAIPaystubOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaystubOverride::OAIPaystubOverride() {
    this->initializeModel();
}

OAIPaystubOverride::~OAIPaystubOverride() {}

void OAIPaystubOverride::initializeModel() {

    m_employee_isSet = false;
    m_employee_isValid = false;

    m_employer_isSet = false;
    m_employer_isValid = false;

    m_income_breakdown_isSet = false;
    m_income_breakdown_isValid = false;

    m_pay_period_details_isSet = false;
    m_pay_period_details_isValid = false;
}

void OAIPaystubOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaystubOverride::fromJsonObject(QJsonObject json) {

    m_employee_isValid = ::OpenAPI::fromJsonValue(m_employee, json[QString("employee")]);
    m_employee_isSet = !json[QString("employee")].isNull() && m_employee_isValid;

    m_employer_isValid = ::OpenAPI::fromJsonValue(m_employer, json[QString("employer")]);
    m_employer_isSet = !json[QString("employer")].isNull() && m_employer_isValid;

    m_income_breakdown_isValid = ::OpenAPI::fromJsonValue(m_income_breakdown, json[QString("income_breakdown")]);
    m_income_breakdown_isSet = !json[QString("income_breakdown")].isNull() && m_income_breakdown_isValid;

    m_pay_period_details_isValid = ::OpenAPI::fromJsonValue(m_pay_period_details, json[QString("pay_period_details")]);
    m_pay_period_details_isSet = !json[QString("pay_period_details")].isNull() && m_pay_period_details_isValid;
}

QString OAIPaystubOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaystubOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_employee.isSet()) {
        obj.insert(QString("employee"), ::OpenAPI::toJsonValue(m_employee));
    }
    if (m_employer.isSet()) {
        obj.insert(QString("employer"), ::OpenAPI::toJsonValue(m_employer));
    }
    if (m_income_breakdown.size() > 0) {
        obj.insert(QString("income_breakdown"), ::OpenAPI::toJsonValue(m_income_breakdown));
    }
    if (m_pay_period_details.isSet()) {
        obj.insert(QString("pay_period_details"), ::OpenAPI::toJsonValue(m_pay_period_details));
    }
    return obj;
}

OAIPaystubOverrideEmployee OAIPaystubOverride::getEmployee() const {
    return m_employee;
}
void OAIPaystubOverride::setEmployee(const OAIPaystubOverrideEmployee &employee) {
    m_employee = employee;
    m_employee_isSet = true;
}

bool OAIPaystubOverride::is_employee_Set() const{
    return m_employee_isSet;
}

bool OAIPaystubOverride::is_employee_Valid() const{
    return m_employee_isValid;
}

OAIPaystubOverrideEmployer OAIPaystubOverride::getEmployer() const {
    return m_employer;
}
void OAIPaystubOverride::setEmployer(const OAIPaystubOverrideEmployer &employer) {
    m_employer = employer;
    m_employer_isSet = true;
}

bool OAIPaystubOverride::is_employer_Set() const{
    return m_employer_isSet;
}

bool OAIPaystubOverride::is_employer_Valid() const{
    return m_employer_isValid;
}

QList<OAIIncomeBreakdown> OAIPaystubOverride::getIncomeBreakdown() const {
    return m_income_breakdown;
}
void OAIPaystubOverride::setIncomeBreakdown(const QList<OAIIncomeBreakdown> &income_breakdown) {
    m_income_breakdown = income_breakdown;
    m_income_breakdown_isSet = true;
}

bool OAIPaystubOverride::is_income_breakdown_Set() const{
    return m_income_breakdown_isSet;
}

bool OAIPaystubOverride::is_income_breakdown_Valid() const{
    return m_income_breakdown_isValid;
}

OAIPayPeriodDetails OAIPaystubOverride::getPayPeriodDetails() const {
    return m_pay_period_details;
}
void OAIPaystubOverride::setPayPeriodDetails(const OAIPayPeriodDetails &pay_period_details) {
    m_pay_period_details = pay_period_details;
    m_pay_period_details_isSet = true;
}

bool OAIPaystubOverride::is_pay_period_details_Set() const{
    return m_pay_period_details_isSet;
}

bool OAIPaystubOverride::is_pay_period_details_Valid() const{
    return m_pay_period_details_isValid;
}

bool OAIPaystubOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_employee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_income_breakdown.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_period_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaystubOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
