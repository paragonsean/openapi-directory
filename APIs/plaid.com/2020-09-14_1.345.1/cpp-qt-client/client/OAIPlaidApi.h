/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPlaidApi_H
#define OAI_OAIPlaidApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountsBalanceGetRequest.h"
#include "OAIAccountsGetRequest.h"
#include "OAIAccountsGetResponse.h"
#include "OAIApplicationGetRequest.h"
#include "OAIApplicationGetResponse.h"
#include "OAIAssetReportAuditCopyCreateRequest.h"
#include "OAIAssetReportAuditCopyCreateResponse.h"
#include "OAIAssetReportAuditCopyGetRequest.h"
#include "OAIAssetReportAuditCopyRemoveRequest.h"
#include "OAIAssetReportAuditCopyRemoveResponse.h"
#include "OAIAssetReportCreateRequest.h"
#include "OAIAssetReportCreateResponse.h"
#include "OAIAssetReportFilterRequest.h"
#include "OAIAssetReportFilterResponse.h"
#include "OAIAssetReportFreddieGetRequest.h"
#include "OAIAssetReportFreddieGetResponse.h"
#include "OAIAssetReportGetRequest.h"
#include "OAIAssetReportGetResponse.h"
#include "OAIAssetReportPDFGetRequest.h"
#include "OAIAssetReportRefreshRequest.h"
#include "OAIAssetReportRefreshResponse.h"
#include "OAIAssetReportRemoveRequest.h"
#include "OAIAssetReportRemoveResponse.h"
#include "OAIAuthGetRequest.h"
#include "OAIAuthGetResponse.h"
#include "OAIBankTransferBalanceGetRequest.h"
#include "OAIBankTransferBalanceGetResponse.h"
#include "OAIBankTransferCancelRequest.h"
#include "OAIBankTransferCancelResponse.h"
#include "OAIBankTransferCreateRequest.h"
#include "OAIBankTransferCreateResponse.h"
#include "OAIBankTransferEventListRequest.h"
#include "OAIBankTransferEventListResponse.h"
#include "OAIBankTransferEventSyncRequest.h"
#include "OAIBankTransferEventSyncResponse.h"
#include "OAIBankTransferGetRequest.h"
#include "OAIBankTransferGetResponse.h"
#include "OAIBankTransferListRequest.h"
#include "OAIBankTransferListResponse.h"
#include "OAIBankTransferMigrateAccountRequest.h"
#include "OAIBankTransferMigrateAccountResponse.h"
#include "OAIBankTransferSweepGetRequest.h"
#include "OAIBankTransferSweepGetResponse.h"
#include "OAIBankTransferSweepListRequest.h"
#include "OAIBankTransferSweepListResponse.h"
#include "OAICategoriesGetResponse.h"
#include "OAICreditAuditCopyTokenCreateRequest.h"
#include "OAICreditAuditCopyTokenCreateResponse.h"
#include "OAICreditAuditCopyTokenRemoveRequest.h"
#include "OAICreditAuditCopyTokenRemoveResponse.h"
#include "OAICreditAuditCopyTokenUpdateRequest.h"
#include "OAICreditAuditCopyTokenUpdateResponse.h"
#include "OAICreditBankEmploymentGetRequest.h"
#include "OAICreditBankEmploymentGetResponse.h"
#include "OAICreditBankIncomeGetRequest.h"
#include "OAICreditBankIncomeGetResponse.h"
#include "OAICreditBankIncomePDFGetRequest.h"
#include "OAICreditBankIncomeRefreshRequest.h"
#include "OAICreditBankIncomeRefreshResponse.h"
#include "OAICreditEmploymentGetRequest.h"
#include "OAICreditEmploymentGetResponse.h"
#include "OAICreditFreddieMacReportsGetRequest.h"
#include "OAICreditFreddieMacReportsGetResponse.h"
#include "OAICreditPayrollIncomeGetRequest.h"
#include "OAICreditPayrollIncomeGetResponse.h"
#include "OAICreditPayrollIncomePrecheckRequest.h"
#include "OAICreditPayrollIncomePrecheckResponse.h"
#include "OAICreditPayrollIncomeRefreshRequest.h"
#include "OAICreditPayrollIncomeRefreshResponse.h"
#include "OAICreditRelayCreateRequest.h"
#include "OAICreditRelayCreateResponse.h"
#include "OAICreditRelayGetRequest.h"
#include "OAICreditRelayRefreshRequest.h"
#include "OAICreditRelayRefreshResponse.h"
#include "OAICreditRelayRemoveRequest.h"
#include "OAICreditRelayRemoveResponse.h"
#include "OAICreditSessionsGetRequest.h"
#include "OAICreditSessionsGetResponse.h"
#include "OAIDashboardUserGetRequest.h"
#include "OAIDashboardUserGetResponse.h"
#include "OAIDashboardUserListRequest.h"
#include "OAIDashboardUserListResponse.h"
#include "OAIDepositSwitchAltCreateRequest.h"
#include "OAIDepositSwitchAltCreateResponse.h"
#include "OAIDepositSwitchCreateRequest.h"
#include "OAIDepositSwitchCreateResponse.h"
#include "OAIDepositSwitchGetRequest.h"
#include "OAIDepositSwitchGetResponse.h"
#include "OAIDepositSwitchTokenCreateRequest.h"
#include "OAIDepositSwitchTokenCreateResponse.h"
#include "OAIEmployersSearchRequest.h"
#include "OAIEmployersSearchResponse.h"
#include "OAIEmploymentVerificationGetRequest.h"
#include "OAIEmploymentVerificationGetResponse.h"
#include "OAIFDXNotification.h"
#include "OAIHttpFileElement.h"
#include "OAIIdentityGetRequest.h"
#include "OAIIdentityGetResponse.h"
#include "OAIIdentityMatchRequest.h"
#include "OAIIdentityMatchResponse.h"
#include "OAIIdentityVerificationCreateRequest.h"
#include "OAIIdentityVerificationCreateResponse.h"
#include "OAIIdentityVerificationGetRequest.h"
#include "OAIIdentityVerificationGetResponse.h"
#include "OAIIdentityVerificationListRequest.h"
#include "OAIIdentityVerificationListResponse.h"
#include "OAIIdentityVerificationRetryRequest.h"
#include "OAIIdentityVerificationRetryResponse.h"
#include "OAIIncomeVerificationCreateRequest.h"
#include "OAIIncomeVerificationCreateResponse.h"
#include "OAIIncomeVerificationDocumentsDownloadRequest.h"
#include "OAIIncomeVerificationPaystubsGetRequest.h"
#include "OAIIncomeVerificationPaystubsGetResponse.h"
#include "OAIIncomeVerificationPrecheckRequest.h"
#include "OAIIncomeVerificationPrecheckResponse.h"
#include "OAIIncomeVerificationTaxformsGetRequest.h"
#include "OAIIncomeVerificationTaxformsGetResponse.h"
#include "OAIInstitutionsGetByIdRequest.h"
#include "OAIInstitutionsGetByIdResponse.h"
#include "OAIInstitutionsGetRequest.h"
#include "OAIInstitutionsGetResponse.h"
#include "OAIInstitutionsSearchRequest.h"
#include "OAIInstitutionsSearchResponse.h"
#include "OAIInvestmentsHoldingsGetRequest.h"
#include "OAIInvestmentsHoldingsGetResponse.h"
#include "OAIInvestmentsTransactionsGetRequest.h"
#include "OAIInvestmentsTransactionsGetResponse.h"
#include "OAIItemAccessTokenInvalidateRequest.h"
#include "OAIItemAccessTokenInvalidateResponse.h"
#include "OAIItemActivityListRequest.h"
#include "OAIItemActivityListResponse.h"
#include "OAIItemApplicationListRequest.h"
#include "OAIItemApplicationListResponse.h"
#include "OAIItemApplicationScopesUpdateRequest.h"
#include "OAIItemApplicationScopesUpdateResponse.h"
#include "OAIItemGetRequest.h"
#include "OAIItemGetResponse.h"
#include "OAIItemImportRequest.h"
#include "OAIItemImportResponse.h"
#include "OAIItemPublicTokenCreateRequest.h"
#include "OAIItemPublicTokenCreateResponse.h"
#include "OAIItemPublicTokenExchangeRequest.h"
#include "OAIItemPublicTokenExchangeResponse.h"
#include "OAIItemRemoveRequest.h"
#include "OAIItemRemoveResponse.h"
#include "OAIItemWebhookUpdateRequest.h"
#include "OAIItemWebhookUpdateResponse.h"
#include "OAILiabilitiesGetRequest.h"
#include "OAILiabilitiesGetResponse.h"
#include "OAILinkDeliveryCreateRequest.h"
#include "OAILinkDeliveryCreateResponse.h"
#include "OAILinkDeliveryGetRequest.h"
#include "OAILinkDeliveryGetResponse.h"
#include "OAILinkOAuthCorrelationIdExchangeRequest.h"
#include "OAILinkOAuthCorrelationIdExchangeResponse.h"
#include "OAILinkTokenCreateRequest.h"
#include "OAILinkTokenCreateResponse.h"
#include "OAILinkTokenGetRequest.h"
#include "OAILinkTokenGetResponse.h"
#include "OAIObject.h"
#include "OAIPartnerCustomerCreateRequest.h"
#include "OAIPartnerCustomerCreateResponse.h"
#include "OAIPartnerCustomerEnableRequest.h"
#include "OAIPartnerCustomerEnableResponse.h"
#include "OAIPartnerCustomerGetRequest.h"
#include "OAIPartnerCustomerGetResponse.h"
#include "OAIPartnerCustomerOAuthInstitutionsGetRequest.h"
#include "OAIPartnerCustomerOAuthInstitutionsGetResponse.h"
#include "OAIPartnerCustomerRemoveRequest.h"
#include "OAIPartnerCustomerRemoveResponse.h"
#include "OAIPaymentInitiationConsentCreateRequest.h"
#include "OAIPaymentInitiationConsentCreateResponse.h"
#include "OAIPaymentInitiationConsentGetRequest.h"
#include "OAIPaymentInitiationConsentGetResponse.h"
#include "OAIPaymentInitiationConsentPaymentExecuteRequest.h"
#include "OAIPaymentInitiationConsentPaymentExecuteResponse.h"
#include "OAIPaymentInitiationConsentRevokeRequest.h"
#include "OAIPaymentInitiationConsentRevokeResponse.h"
#include "OAIPaymentInitiationPaymentCreateRequest.h"
#include "OAIPaymentInitiationPaymentCreateResponse.h"
#include "OAIPaymentInitiationPaymentGetRequest.h"
#include "OAIPaymentInitiationPaymentGetResponse.h"
#include "OAIPaymentInitiationPaymentListRequest.h"
#include "OAIPaymentInitiationPaymentListResponse.h"
#include "OAIPaymentInitiationPaymentReverseRequest.h"
#include "OAIPaymentInitiationPaymentReverseResponse.h"
#include "OAIPaymentInitiationPaymentTokenCreateRequest.h"
#include "OAIPaymentInitiationPaymentTokenCreateResponse.h"
#include "OAIPaymentInitiationRecipientCreateRequest.h"
#include "OAIPaymentInitiationRecipientCreateResponse.h"
#include "OAIPaymentInitiationRecipientGetRequest.h"
#include "OAIPaymentInitiationRecipientGetResponse.h"
#include "OAIPaymentInitiationRecipientListRequest.h"
#include "OAIPaymentInitiationRecipientListResponse.h"
#include "OAIPaymentProfileCreateRequest.h"
#include "OAIPaymentProfileCreateResponse.h"
#include "OAIPaymentProfileGetRequest.h"
#include "OAIPaymentProfileGetResponse.h"
#include "OAIPaymentProfileRemoveRequest.h"
#include "OAIPaymentProfileRemoveResponse.h"
#include "OAIPlaidError.h"
#include "OAIProcessorApexProcessorTokenCreateRequest.h"
#include "OAIProcessorAuthGetRequest.h"
#include "OAIProcessorAuthGetResponse.h"
#include "OAIProcessorBalanceGetRequest.h"
#include "OAIProcessorBalanceGetResponse.h"
#include "OAIProcessorBankTransferCreateRequest.h"
#include "OAIProcessorBankTransferCreateResponse.h"
#include "OAIProcessorIdentityGetRequest.h"
#include "OAIProcessorIdentityGetResponse.h"
#include "OAIProcessorSignalDecisionReportRequest.h"
#include "OAIProcessorSignalDecisionReportResponse.h"
#include "OAIProcessorSignalEvaluateRequest.h"
#include "OAIProcessorSignalEvaluateResponse.h"
#include "OAIProcessorSignalReturnReportRequest.h"
#include "OAIProcessorSignalReturnReportResponse.h"
#include "OAIProcessorStripeBankAccountTokenCreateRequest.h"
#include "OAIProcessorStripeBankAccountTokenCreateResponse.h"
#include "OAIProcessorTokenCreateRequest.h"
#include "OAIProcessorTokenCreateResponse.h"
#include "OAISandboxBankTransferFireWebhookRequest.h"
#include "OAISandboxBankTransferFireWebhookResponse.h"
#include "OAISandboxBankTransferSimulateRequest.h"
#include "OAISandboxBankTransferSimulateResponse.h"
#include "OAISandboxIncomeFireWebhookRequest.h"
#include "OAISandboxIncomeFireWebhookResponse.h"
#include "OAISandboxItemFireWebhookRequest.h"
#include "OAISandboxItemFireWebhookResponse.h"
#include "OAISandboxItemResetLoginRequest.h"
#include "OAISandboxItemResetLoginResponse.h"
#include "OAISandboxItemSetVerificationStatusRequest.h"
#include "OAISandboxItemSetVerificationStatusResponse.h"
#include "OAISandboxOauthSelectAccountsRequest.h"
#include "OAISandboxPaymentProfileResetLoginRequest.h"
#include "OAISandboxPaymentProfileResetLoginResponse.h"
#include "OAISandboxProcessorTokenCreateRequest.h"
#include "OAISandboxProcessorTokenCreateResponse.h"
#include "OAISandboxPublicTokenCreateRequest.h"
#include "OAISandboxPublicTokenCreateResponse.h"
#include "OAISandboxTransferFireWebhookRequest.h"
#include "OAISandboxTransferFireWebhookResponse.h"
#include "OAISandboxTransferRepaymentSimulateRequest.h"
#include "OAISandboxTransferRepaymentSimulateResponse.h"
#include "OAISandboxTransferSimulateRequest.h"
#include "OAISandboxTransferSimulateResponse.h"
#include "OAISandboxTransferSweepSimulateRequest.h"
#include "OAISandboxTransferSweepSimulateResponse.h"
#include "OAISandboxTransferTestClockAdvanceRequest.h"
#include "OAISandboxTransferTestClockAdvanceResponse.h"
#include "OAISandboxTransferTestClockCreateRequest.h"
#include "OAISandboxTransferTestClockCreateResponse.h"
#include "OAISandboxTransferTestClockGetRequest.h"
#include "OAISandboxTransferTestClockGetResponse.h"
#include "OAISandboxTransferTestClockListRequest.h"
#include "OAISandboxTransferTestClockListResponse.h"
#include "OAISignalDecisionReportRequest.h"
#include "OAISignalDecisionReportResponse.h"
#include "OAISignalEvaluateRequest.h"
#include "OAISignalEvaluateResponse.h"
#include "OAISignalPrepareRequest.h"
#include "OAISignalPrepareResponse.h"
#include "OAISignalReturnReportRequest.h"
#include "OAISignalReturnReportResponse.h"
#include "OAITransactionsEnhanceGetRequest.h"
#include "OAITransactionsEnhanceGetResponse.h"
#include "OAITransactionsEnrichGetRequest.h"
#include "OAITransactionsEnrichGetResponse.h"
#include "OAITransactionsGetRequest.h"
#include "OAITransactionsGetResponse.h"
#include "OAITransactionsRecurringGetRequest.h"
#include "OAITransactionsRecurringGetResponse.h"
#include "OAITransactionsRefreshRequest.h"
#include "OAITransactionsRefreshResponse.h"
#include "OAITransactionsRulesCreateRequest.h"
#include "OAITransactionsRulesCreateResponse.h"
#include "OAITransactionsRulesListRequest.h"
#include "OAITransactionsRulesListResponse.h"
#include "OAITransactionsRulesRemoveRequest.h"
#include "OAITransactionsRulesRemoveResponse.h"
#include "OAITransactionsSyncRequest.h"
#include "OAITransactionsSyncResponse.h"
#include "OAITransferAuthorizationCreateRequest.h"
#include "OAITransferAuthorizationCreateResponse.h"
#include "OAITransferCancelRequest.h"
#include "OAITransferCancelResponse.h"
#include "OAITransferCapabilitiesGetRequest.h"
#include "OAITransferCapabilitiesGetResponse.h"
#include "OAITransferConfigurationGetRequest.h"
#include "OAITransferConfigurationGetResponse.h"
#include "OAITransferCreateRequest.h"
#include "OAITransferCreateResponse.h"
#include "OAITransferEventListRequest.h"
#include "OAITransferEventListResponse.h"
#include "OAITransferEventSyncRequest.h"
#include "OAITransferEventSyncResponse.h"
#include "OAITransferGetRequest.h"
#include "OAITransferGetResponse.h"
#include "OAITransferIntentCreateRequest.h"
#include "OAITransferIntentCreateResponse.h"
#include "OAITransferIntentGetRequest.h"
#include "OAITransferIntentGetResponse.h"
#include "OAITransferListRequest.h"
#include "OAITransferListResponse.h"
#include "OAITransferMetricsGetRequest.h"
#include "OAITransferMetricsGetResponse.h"
#include "OAITransferMigrateAccountRequest.h"
#include "OAITransferMigrateAccountResponse.h"
#include "OAITransferOriginatorCreateRequest.h"
#include "OAITransferOriginatorCreateResponse.h"
#include "OAITransferOriginatorGetRequest.h"
#include "OAITransferOriginatorGetResponse.h"
#include "OAITransferOriginatorListRequest.h"
#include "OAITransferOriginatorListResponse.h"
#include "OAITransferQuestionnaireCreateRequest.h"
#include "OAITransferQuestionnaireCreateResponse.h"
#include "OAITransferRecurringCancelRequest.h"
#include "OAITransferRecurringCancelResponse.h"
#include "OAITransferRecurringCreateRequest.h"
#include "OAITransferRecurringCreateResponse.h"
#include "OAITransferRecurringGetRequest.h"
#include "OAITransferRecurringGetResponse.h"
#include "OAITransferRecurringListRequest.h"
#include "OAITransferRecurringListResponse.h"
#include "OAITransferRefundCancelRequest.h"
#include "OAITransferRefundCancelResponse.h"
#include "OAITransferRefundCreateRequest.h"
#include "OAITransferRefundCreateResponse.h"
#include "OAITransferRefundGetRequest.h"
#include "OAITransferRefundGetResponse.h"
#include "OAITransferRepaymentListRequest.h"
#include "OAITransferRepaymentListResponse.h"
#include "OAITransferRepaymentReturnListRequest.h"
#include "OAITransferRepaymentReturnListResponse.h"
#include "OAITransferSweepGetRequest.h"
#include "OAITransferSweepGetResponse.h"
#include "OAITransferSweepListRequest.h"
#include "OAITransferSweepListResponse.h"
#include "OAIUserCreateRequest.h"
#include "OAIUserCreateResponse.h"
#include "OAIWalletCreateRequest.h"
#include "OAIWalletCreateResponse.h"
#include "OAIWalletGetRequest.h"
#include "OAIWalletGetResponse.h"
#include "OAIWalletListRequest.h"
#include "OAIWalletListResponse.h"
#include "OAIWalletTransactionExecuteRequest.h"
#include "OAIWalletTransactionExecuteResponse.h"
#include "OAIWalletTransactionGetRequest.h"
#include "OAIWalletTransactionGetResponse.h"
#include "OAIWalletTransactionListRequest.h"
#include "OAIWalletTransactionListResponse.h"
#include "OAIWatchlistScreeningEntityCreateRequest.h"
#include "OAIWatchlistScreeningEntityCreateResponse.h"
#include "OAIWatchlistScreeningEntityGetRequest.h"
#include "OAIWatchlistScreeningEntityGetResponse.h"
#include "OAIWatchlistScreeningEntityHistoryListRequest.h"
#include "OAIWatchlistScreeningEntityHistoryListResponse.h"
#include "OAIWatchlistScreeningEntityHitListRequest.h"
#include "OAIWatchlistScreeningEntityHitListResponse.h"
#include "OAIWatchlistScreeningEntityListRequest.h"
#include "OAIWatchlistScreeningEntityListResponse.h"
#include "OAIWatchlistScreeningEntityProgramGetRequest.h"
#include "OAIWatchlistScreeningEntityProgramGetResponse.h"
#include "OAIWatchlistScreeningEntityProgramListRequest.h"
#include "OAIWatchlistScreeningEntityProgramListResponse.h"
#include "OAIWatchlistScreeningEntityReviewCreateRequest.h"
#include "OAIWatchlistScreeningEntityReviewCreateResponse.h"
#include "OAIWatchlistScreeningEntityReviewListRequest.h"
#include "OAIWatchlistScreeningEntityReviewListResponse.h"
#include "OAIWatchlistScreeningEntityUpdateRequest.h"
#include "OAIWatchlistScreeningEntityUpdateResponse.h"
#include "OAIWatchlistScreeningIndividualCreateRequest.h"
#include "OAIWatchlistScreeningIndividualCreateResponse.h"
#include "OAIWatchlistScreeningIndividualGetRequest.h"
#include "OAIWatchlistScreeningIndividualGetResponse.h"
#include "OAIWatchlistScreeningIndividualHistoryListRequest.h"
#include "OAIWatchlistScreeningIndividualHistoryListResponse.h"
#include "OAIWatchlistScreeningIndividualHitListRequest.h"
#include "OAIWatchlistScreeningIndividualHitListResponse.h"
#include "OAIWatchlistScreeningIndividualListRequest.h"
#include "OAIWatchlistScreeningIndividualListResponse.h"
#include "OAIWatchlistScreeningIndividualProgramGetRequest.h"
#include "OAIWatchlistScreeningIndividualProgramGetResponse.h"
#include "OAIWatchlistScreeningIndividualProgramListRequest.h"
#include "OAIWatchlistScreeningIndividualProgramListResponse.h"
#include "OAIWatchlistScreeningIndividualReviewCreateRequest.h"
#include "OAIWatchlistScreeningIndividualReviewCreateResponse.h"
#include "OAIWatchlistScreeningIndividualReviewListRequest.h"
#include "OAIWatchlistScreeningIndividualReviewListResponse.h"
#include "OAIWatchlistScreeningIndividualUpdateRequest.h"
#include "OAIWatchlistScreeningIndividualUpdateResponse.h"
#include "OAIWebhookVerificationKeyGetRequest.h"
#include "OAIWebhookVerificationKeyGetResponse.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPlaidApi : public QObject {
    Q_OBJECT

public:
    OAIPlaidApi(const int timeOut = 0);
    ~OAIPlaidApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_accounts_balance_get_request OAIAccountsBalanceGetRequest [required]
    */
    virtual void accountsBalanceGet(const OAIAccountsBalanceGetRequest &oai_accounts_balance_get_request);

    /**
    * @param[in]  oai_accounts_get_request OAIAccountsGetRequest [required]
    */
    virtual void accountsGet(const OAIAccountsGetRequest &oai_accounts_get_request);

    /**
    * @param[in]  oai_application_get_request OAIApplicationGetRequest [required]
    */
    virtual void applicationGet(const OAIApplicationGetRequest &oai_application_get_request);

    /**
    * @param[in]  oai_asset_report_audit_copy_create_request OAIAssetReportAuditCopyCreateRequest [required]
    */
    virtual void assetReportAuditCopyCreate(const OAIAssetReportAuditCopyCreateRequest &oai_asset_report_audit_copy_create_request);

    /**
    * @param[in]  oai_asset_report_audit_copy_get_request OAIAssetReportAuditCopyGetRequest [required]
    */
    virtual void assetReportAuditCopyGet(const OAIAssetReportAuditCopyGetRequest &oai_asset_report_audit_copy_get_request);

    /**
    * @param[in]  oai_asset_report_audit_copy_remove_request OAIAssetReportAuditCopyRemoveRequest [required]
    */
    virtual void assetReportAuditCopyRemove(const OAIAssetReportAuditCopyRemoveRequest &oai_asset_report_audit_copy_remove_request);

    /**
    * @param[in]  oai_asset_report_create_request OAIAssetReportCreateRequest [required]
    */
    virtual void assetReportCreate(const OAIAssetReportCreateRequest &oai_asset_report_create_request);

    /**
    * @param[in]  oai_asset_report_filter_request OAIAssetReportFilterRequest [required]
    */
    virtual void assetReportFilter(const OAIAssetReportFilterRequest &oai_asset_report_filter_request);

    /**
    * @param[in]  oai_asset_report_get_request OAIAssetReportGetRequest [required]
    */
    virtual void assetReportGet(const OAIAssetReportGetRequest &oai_asset_report_get_request);

    /**
    * @param[in]  oai_asset_report_pdf_get_request OAIAssetReportPDFGetRequest [required]
    */
    virtual void assetReportPdfGet(const OAIAssetReportPDFGetRequest &oai_asset_report_pdf_get_request);

    /**
    * @param[in]  oai_asset_report_refresh_request OAIAssetReportRefreshRequest [required]
    */
    virtual void assetReportRefresh(const OAIAssetReportRefreshRequest &oai_asset_report_refresh_request);

    /**
    * @param[in]  oai_asset_report_remove_request OAIAssetReportRemoveRequest [required]
    */
    virtual void assetReportRemove(const OAIAssetReportRemoveRequest &oai_asset_report_remove_request);

    /**
    * @param[in]  oai_auth_get_request OAIAuthGetRequest [required]
    */
    virtual void authGet(const OAIAuthGetRequest &oai_auth_get_request);

    /**
    * @param[in]  oai_bank_transfer_balance_get_request OAIBankTransferBalanceGetRequest [required]
    */
    virtual void bankTransferBalanceGet(const OAIBankTransferBalanceGetRequest &oai_bank_transfer_balance_get_request);

    /**
    * @param[in]  oai_bank_transfer_cancel_request OAIBankTransferCancelRequest [required]
    */
    virtual void bankTransferCancel(const OAIBankTransferCancelRequest &oai_bank_transfer_cancel_request);

    /**
    * @param[in]  oai_bank_transfer_create_request OAIBankTransferCreateRequest [required]
    */
    virtual void bankTransferCreate(const OAIBankTransferCreateRequest &oai_bank_transfer_create_request);

    /**
    * @param[in]  oai_bank_transfer_event_list_request OAIBankTransferEventListRequest [required]
    */
    virtual void bankTransferEventList(const OAIBankTransferEventListRequest &oai_bank_transfer_event_list_request);

    /**
    * @param[in]  oai_bank_transfer_event_sync_request OAIBankTransferEventSyncRequest [required]
    */
    virtual void bankTransferEventSync(const OAIBankTransferEventSyncRequest &oai_bank_transfer_event_sync_request);

    /**
    * @param[in]  oai_bank_transfer_get_request OAIBankTransferGetRequest [required]
    */
    virtual void bankTransferGet(const OAIBankTransferGetRequest &oai_bank_transfer_get_request);

    /**
    * @param[in]  oai_bank_transfer_list_request OAIBankTransferListRequest [required]
    */
    virtual void bankTransferList(const OAIBankTransferListRequest &oai_bank_transfer_list_request);

    /**
    * @param[in]  oai_bank_transfer_migrate_account_request OAIBankTransferMigrateAccountRequest [required]
    */
    virtual void bankTransferMigrateAccount(const OAIBankTransferMigrateAccountRequest &oai_bank_transfer_migrate_account_request);

    /**
    * @param[in]  oai_bank_transfer_sweep_get_request OAIBankTransferSweepGetRequest [required]
    */
    virtual void bankTransferSweepGet(const OAIBankTransferSweepGetRequest &oai_bank_transfer_sweep_get_request);

    /**
    * @param[in]  oai_bank_transfer_sweep_list_request OAIBankTransferSweepListRequest [required]
    */
    virtual void bankTransferSweepList(const OAIBankTransferSweepListRequest &oai_bank_transfer_sweep_list_request);

    /**
    * @param[in]  body OAIObject [required]
    */
    virtual void categoriesGet(const OAIObject &body);

    /**
    * @param[in]  oai_payment_initiation_payment_token_create_request OAIPaymentInitiationPaymentTokenCreateRequest [required]
    */
    Q_DECL_DEPRECATED virtual void createPaymentToken(const OAIPaymentInitiationPaymentTokenCreateRequest &oai_payment_initiation_payment_token_create_request);

    /**
    * @param[in]  oai_asset_report_freddie_get_request OAIAssetReportFreddieGetRequest [required]
    */
    virtual void creditAssetReportFreddieMacGet(const OAIAssetReportFreddieGetRequest &oai_asset_report_freddie_get_request);

    /**
    * @param[in]  oai_credit_audit_copy_token_create_request OAICreditAuditCopyTokenCreateRequest [required]
    */
    virtual void creditAuditCopyTokenCreate(const OAICreditAuditCopyTokenCreateRequest &oai_credit_audit_copy_token_create_request);

    /**
    * @param[in]  oai_credit_audit_copy_token_update_request OAICreditAuditCopyTokenUpdateRequest [required]
    */
    virtual void creditAuditCopyTokenUpdate(const OAICreditAuditCopyTokenUpdateRequest &oai_credit_audit_copy_token_update_request);

    /**
    * @param[in]  oai_credit_bank_employment_get_request OAICreditBankEmploymentGetRequest [required]
    */
    virtual void creditBankEmploymentGet(const OAICreditBankEmploymentGetRequest &oai_credit_bank_employment_get_request);

    /**
    * @param[in]  oai_credit_bank_income_get_request OAICreditBankIncomeGetRequest [required]
    */
    virtual void creditBankIncomeGet(const OAICreditBankIncomeGetRequest &oai_credit_bank_income_get_request);

    /**
    * @param[in]  oai_credit_bank_income_pdf_get_request OAICreditBankIncomePDFGetRequest [required]
    */
    virtual void creditBankIncomePdfGet(const OAICreditBankIncomePDFGetRequest &oai_credit_bank_income_pdf_get_request);

    /**
    * @param[in]  oai_credit_bank_income_refresh_request OAICreditBankIncomeRefreshRequest [required]
    */
    virtual void creditBankIncomeRefresh(const OAICreditBankIncomeRefreshRequest &oai_credit_bank_income_refresh_request);

    /**
    * @param[in]  oai_credit_employment_get_request OAICreditEmploymentGetRequest [required]
    */
    virtual void creditEmploymentGet(const OAICreditEmploymentGetRequest &oai_credit_employment_get_request);

    /**
    * @param[in]  oai_credit_freddie_mac_reports_get_request OAICreditFreddieMacReportsGetRequest [required]
    */
    virtual void creditFreddieMacReportsGet(const OAICreditFreddieMacReportsGetRequest &oai_credit_freddie_mac_reports_get_request);

    /**
    * @param[in]  oai_credit_payroll_income_get_request OAICreditPayrollIncomeGetRequest [required]
    */
    virtual void creditPayrollIncomeGet(const OAICreditPayrollIncomeGetRequest &oai_credit_payroll_income_get_request);

    /**
    * @param[in]  oai_credit_payroll_income_precheck_request OAICreditPayrollIncomePrecheckRequest [required]
    */
    virtual void creditPayrollIncomePrecheck(const OAICreditPayrollIncomePrecheckRequest &oai_credit_payroll_income_precheck_request);

    /**
    * @param[in]  oai_credit_payroll_income_refresh_request OAICreditPayrollIncomeRefreshRequest [required]
    */
    virtual void creditPayrollIncomeRefresh(const OAICreditPayrollIncomeRefreshRequest &oai_credit_payroll_income_refresh_request);

    /**
    * @param[in]  oai_credit_relay_create_request OAICreditRelayCreateRequest [required]
    */
    virtual void creditRelayCreate(const OAICreditRelayCreateRequest &oai_credit_relay_create_request);

    /**
    * @param[in]  oai_credit_relay_get_request OAICreditRelayGetRequest [required]
    */
    virtual void creditRelayGet(const OAICreditRelayGetRequest &oai_credit_relay_get_request);

    /**
    * @param[in]  oai_credit_relay_refresh_request OAICreditRelayRefreshRequest [required]
    */
    virtual void creditRelayRefresh(const OAICreditRelayRefreshRequest &oai_credit_relay_refresh_request);

    /**
    * @param[in]  oai_credit_relay_remove_request OAICreditRelayRemoveRequest [required]
    */
    virtual void creditRelayRemove(const OAICreditRelayRemoveRequest &oai_credit_relay_remove_request);

    /**
    * @param[in]  oai_credit_audit_copy_token_remove_request OAICreditAuditCopyTokenRemoveRequest [required]
    */
    virtual void creditReportAuditCopyRemove(const OAICreditAuditCopyTokenRemoveRequest &oai_credit_audit_copy_token_remove_request);

    /**
    * @param[in]  oai_credit_sessions_get_request OAICreditSessionsGetRequest [required]
    */
    virtual void creditSessionsGet(const OAICreditSessionsGetRequest &oai_credit_sessions_get_request);

    /**
    * @param[in]  oai_dashboard_user_get_request OAIDashboardUserGetRequest [required]
    */
    virtual void dashboardUserGet(const OAIDashboardUserGetRequest &oai_dashboard_user_get_request);

    /**
    * @param[in]  oai_dashboard_user_list_request OAIDashboardUserListRequest [required]
    */
    virtual void dashboardUserList(const OAIDashboardUserListRequest &oai_dashboard_user_list_request);

    /**
    * @param[in]  oai_deposit_switch_alt_create_request OAIDepositSwitchAltCreateRequest [required]
    */
    virtual void depositSwitchAltCreate(const OAIDepositSwitchAltCreateRequest &oai_deposit_switch_alt_create_request);

    /**
    * @param[in]  oai_deposit_switch_create_request OAIDepositSwitchCreateRequest [required]
    */
    virtual void depositSwitchCreate(const OAIDepositSwitchCreateRequest &oai_deposit_switch_create_request);

    /**
    * @param[in]  oai_deposit_switch_get_request OAIDepositSwitchGetRequest [required]
    */
    virtual void depositSwitchGet(const OAIDepositSwitchGetRequest &oai_deposit_switch_get_request);

    /**
    * @param[in]  oai_deposit_switch_token_create_request OAIDepositSwitchTokenCreateRequest [required]
    */
    virtual void depositSwitchTokenCreate(const OAIDepositSwitchTokenCreateRequest &oai_deposit_switch_token_create_request);

    /**
    * @param[in]  oai_employers_search_request OAIEmployersSearchRequest [required]
    */
    virtual void employersSearch(const OAIEmployersSearchRequest &oai_employers_search_request);

    /**
    * @param[in]  oai_employment_verification_get_request OAIEmploymentVerificationGetRequest [required]
    */
    Q_DECL_DEPRECATED virtual void employmentVerificationGet(const OAIEmploymentVerificationGetRequest &oai_employment_verification_get_request);

    /**
    * @param[in]  oaifdx_notification OAIFDXNotification [required]
    */
    virtual void fdxNotifications(const OAIFDXNotification &oaifdx_notification);

    /**
    * @param[in]  oai_identity_get_request OAIIdentityGetRequest [required]
    */
    virtual void identityGet(const OAIIdentityGetRequest &oai_identity_get_request);

    /**
    * @param[in]  oai_identity_match_request OAIIdentityMatchRequest [required]
    */
    virtual void identityMatch(const OAIIdentityMatchRequest &oai_identity_match_request);

    /**
    * @param[in]  oai_identity_verification_create_request OAIIdentityVerificationCreateRequest [required]
    */
    virtual void identityVerificationCreate(const OAIIdentityVerificationCreateRequest &oai_identity_verification_create_request);

    /**
    * @param[in]  oai_identity_verification_get_request OAIIdentityVerificationGetRequest [required]
    */
    virtual void identityVerificationGet(const OAIIdentityVerificationGetRequest &oai_identity_verification_get_request);

    /**
    * @param[in]  oai_identity_verification_list_request OAIIdentityVerificationListRequest [required]
    */
    virtual void identityVerificationList(const OAIIdentityVerificationListRequest &oai_identity_verification_list_request);

    /**
    * @param[in]  oai_identity_verification_retry_request OAIIdentityVerificationRetryRequest [required]
    */
    virtual void identityVerificationRetry(const OAIIdentityVerificationRetryRequest &oai_identity_verification_retry_request);

    /**
    * @param[in]  oai_income_verification_create_request OAIIncomeVerificationCreateRequest [required]
    */
    Q_DECL_DEPRECATED virtual void incomeVerificationCreate(const OAIIncomeVerificationCreateRequest &oai_income_verification_create_request);

    /**
    * @param[in]  oai_income_verification_documents_download_request OAIIncomeVerificationDocumentsDownloadRequest [required]
    */
    Q_DECL_DEPRECATED virtual void incomeVerificationDocumentsDownload(const OAIIncomeVerificationDocumentsDownloadRequest &oai_income_verification_documents_download_request);

    /**
    * @param[in]  oai_income_verification_paystubs_get_request OAIIncomeVerificationPaystubsGetRequest [required]
    */
    Q_DECL_DEPRECATED virtual void incomeVerificationPaystubsGet(const OAIIncomeVerificationPaystubsGetRequest &oai_income_verification_paystubs_get_request);

    /**
    * @param[in]  oai_income_verification_precheck_request OAIIncomeVerificationPrecheckRequest [required]
    */
    Q_DECL_DEPRECATED virtual void incomeVerificationPrecheck(const OAIIncomeVerificationPrecheckRequest &oai_income_verification_precheck_request);

    /**
    * @param[in]  oai_income_verification_taxforms_get_request OAIIncomeVerificationTaxformsGetRequest [required]
    */
    Q_DECL_DEPRECATED virtual void incomeVerificationTaxformsGet(const OAIIncomeVerificationTaxformsGetRequest &oai_income_verification_taxforms_get_request);

    /**
    * @param[in]  oai_institutions_get_request OAIInstitutionsGetRequest [required]
    */
    virtual void institutionsGet(const OAIInstitutionsGetRequest &oai_institutions_get_request);

    /**
    * @param[in]  oai_institutions_get_by_id_request OAIInstitutionsGetByIdRequest [required]
    */
    virtual void institutionsGetById(const OAIInstitutionsGetByIdRequest &oai_institutions_get_by_id_request);

    /**
    * @param[in]  oai_institutions_search_request OAIInstitutionsSearchRequest [required]
    */
    virtual void institutionsSearch(const OAIInstitutionsSearchRequest &oai_institutions_search_request);

    /**
    * @param[in]  oai_investments_holdings_get_request OAIInvestmentsHoldingsGetRequest [required]
    */
    virtual void investmentsHoldingsGet(const OAIInvestmentsHoldingsGetRequest &oai_investments_holdings_get_request);

    /**
    * @param[in]  oai_investments_transactions_get_request OAIInvestmentsTransactionsGetRequest [required]
    */
    virtual void investmentsTransactionsGet(const OAIInvestmentsTransactionsGetRequest &oai_investments_transactions_get_request);

    /**
    * @param[in]  oai_item_access_token_invalidate_request OAIItemAccessTokenInvalidateRequest [required]
    */
    virtual void itemAccessTokenInvalidate(const OAIItemAccessTokenInvalidateRequest &oai_item_access_token_invalidate_request);

    /**
    * @param[in]  oai_item_activity_list_request OAIItemActivityListRequest [required]
    */
    virtual void itemActivityList(const OAIItemActivityListRequest &oai_item_activity_list_request);

    /**
    * @param[in]  oai_item_application_list_request OAIItemApplicationListRequest [required]
    */
    virtual void itemApplicationList(const OAIItemApplicationListRequest &oai_item_application_list_request);

    /**
    * @param[in]  oai_item_application_scopes_update_request OAIItemApplicationScopesUpdateRequest [required]
    */
    virtual void itemApplicationScopesUpdate(const OAIItemApplicationScopesUpdateRequest &oai_item_application_scopes_update_request);

    /**
    * @param[in]  oai_item_public_token_create_request OAIItemPublicTokenCreateRequest [required]
    */
    virtual void itemCreatePublicToken(const OAIItemPublicTokenCreateRequest &oai_item_public_token_create_request);

    /**
    * @param[in]  oai_item_get_request OAIItemGetRequest [required]
    */
    virtual void itemGet(const OAIItemGetRequest &oai_item_get_request);

    /**
    * @param[in]  oai_item_import_request OAIItemImportRequest [required]
    */
    virtual void itemImport(const OAIItemImportRequest &oai_item_import_request);

    /**
    * @param[in]  oai_item_public_token_exchange_request OAIItemPublicTokenExchangeRequest [required]
    */
    virtual void itemPublicTokenExchange(const OAIItemPublicTokenExchangeRequest &oai_item_public_token_exchange_request);

    /**
    * @param[in]  oai_item_remove_request OAIItemRemoveRequest [required]
    */
    virtual void itemRemove(const OAIItemRemoveRequest &oai_item_remove_request);

    /**
    * @param[in]  oai_item_webhook_update_request OAIItemWebhookUpdateRequest [required]
    */
    virtual void itemWebhookUpdate(const OAIItemWebhookUpdateRequest &oai_item_webhook_update_request);

    /**
    * @param[in]  oai_liabilities_get_request OAILiabilitiesGetRequest [required]
    */
    virtual void liabilitiesGet(const OAILiabilitiesGetRequest &oai_liabilities_get_request);

    /**
    * @param[in]  oai_link_delivery_create_request OAILinkDeliveryCreateRequest [required]
    */
    virtual void linkDeliveryCreate(const OAILinkDeliveryCreateRequest &oai_link_delivery_create_request);

    /**
    * @param[in]  oai_link_delivery_get_request OAILinkDeliveryGetRequest [required]
    */
    virtual void linkDeliveryGet(const OAILinkDeliveryGetRequest &oai_link_delivery_get_request);

    /**
    * @param[in]  oai_link_o_auth_correlation_id_exchange_request OAILinkOAuthCorrelationIdExchangeRequest [required]
    */
    virtual void linkOauthCorrelationIdExchange(const OAILinkOAuthCorrelationIdExchangeRequest &oai_link_o_auth_correlation_id_exchange_request);

    /**
    * @param[in]  oai_link_token_create_request OAILinkTokenCreateRequest [required]
    */
    virtual void linkTokenCreate(const OAILinkTokenCreateRequest &oai_link_token_create_request);

    /**
    * @param[in]  oai_link_token_get_request OAILinkTokenGetRequest [required]
    */
    virtual void linkTokenGet(const OAILinkTokenGetRequest &oai_link_token_get_request);

    /**
    * @param[in]  oai_partner_customer_create_request OAIPartnerCustomerCreateRequest [required]
    */
    virtual void partnerCustomerCreate(const OAIPartnerCustomerCreateRequest &oai_partner_customer_create_request);

    /**
    * @param[in]  oai_partner_customer_enable_request OAIPartnerCustomerEnableRequest [required]
    */
    virtual void partnerCustomerEnable(const OAIPartnerCustomerEnableRequest &oai_partner_customer_enable_request);

    /**
    * @param[in]  oai_partner_customer_get_request OAIPartnerCustomerGetRequest [required]
    */
    virtual void partnerCustomerGet(const OAIPartnerCustomerGetRequest &oai_partner_customer_get_request);

    /**
    * @param[in]  oai_partner_customer_o_auth_institutions_get_request OAIPartnerCustomerOAuthInstitutionsGetRequest [required]
    */
    virtual void partnerCustomerOauthInstitutionsGet(const OAIPartnerCustomerOAuthInstitutionsGetRequest &oai_partner_customer_o_auth_institutions_get_request);

    /**
    * @param[in]  oai_partner_customer_remove_request OAIPartnerCustomerRemoveRequest [required]
    */
    virtual void partnerCustomerRemove(const OAIPartnerCustomerRemoveRequest &oai_partner_customer_remove_request);

    /**
    * @param[in]  oai_payment_initiation_consent_create_request OAIPaymentInitiationConsentCreateRequest [required]
    */
    virtual void paymentInitiationConsentCreate(const OAIPaymentInitiationConsentCreateRequest &oai_payment_initiation_consent_create_request);

    /**
    * @param[in]  oai_payment_initiation_consent_get_request OAIPaymentInitiationConsentGetRequest [required]
    */
    virtual void paymentInitiationConsentGet(const OAIPaymentInitiationConsentGetRequest &oai_payment_initiation_consent_get_request);

    /**
    * @param[in]  oai_payment_initiation_consent_payment_execute_request OAIPaymentInitiationConsentPaymentExecuteRequest [required]
    */
    virtual void paymentInitiationConsentPaymentExecute(const OAIPaymentInitiationConsentPaymentExecuteRequest &oai_payment_initiation_consent_payment_execute_request);

    /**
    * @param[in]  oai_payment_initiation_consent_revoke_request OAIPaymentInitiationConsentRevokeRequest [required]
    */
    virtual void paymentInitiationConsentRevoke(const OAIPaymentInitiationConsentRevokeRequest &oai_payment_initiation_consent_revoke_request);

    /**
    * @param[in]  oai_payment_initiation_payment_create_request OAIPaymentInitiationPaymentCreateRequest [required]
    */
    virtual void paymentInitiationPaymentCreate(const OAIPaymentInitiationPaymentCreateRequest &oai_payment_initiation_payment_create_request);

    /**
    * @param[in]  oai_payment_initiation_payment_get_request OAIPaymentInitiationPaymentGetRequest [required]
    */
    virtual void paymentInitiationPaymentGet(const OAIPaymentInitiationPaymentGetRequest &oai_payment_initiation_payment_get_request);

    /**
    * @param[in]  oai_payment_initiation_payment_list_request OAIPaymentInitiationPaymentListRequest [required]
    */
    virtual void paymentInitiationPaymentList(const OAIPaymentInitiationPaymentListRequest &oai_payment_initiation_payment_list_request);

    /**
    * @param[in]  oai_payment_initiation_payment_reverse_request OAIPaymentInitiationPaymentReverseRequest [required]
    */
    virtual void paymentInitiationPaymentReverse(const OAIPaymentInitiationPaymentReverseRequest &oai_payment_initiation_payment_reverse_request);

    /**
    * @param[in]  oai_payment_initiation_recipient_create_request OAIPaymentInitiationRecipientCreateRequest [required]
    */
    virtual void paymentInitiationRecipientCreate(const OAIPaymentInitiationRecipientCreateRequest &oai_payment_initiation_recipient_create_request);

    /**
    * @param[in]  oai_payment_initiation_recipient_get_request OAIPaymentInitiationRecipientGetRequest [required]
    */
    virtual void paymentInitiationRecipientGet(const OAIPaymentInitiationRecipientGetRequest &oai_payment_initiation_recipient_get_request);

    /**
    * @param[in]  oai_payment_initiation_recipient_list_request OAIPaymentInitiationRecipientListRequest [required]
    */
    virtual void paymentInitiationRecipientList(const OAIPaymentInitiationRecipientListRequest &oai_payment_initiation_recipient_list_request);

    /**
    * @param[in]  oai_payment_profile_create_request OAIPaymentProfileCreateRequest [required]
    */
    virtual void paymentProfileCreate(const OAIPaymentProfileCreateRequest &oai_payment_profile_create_request);

    /**
    * @param[in]  oai_payment_profile_get_request OAIPaymentProfileGetRequest [required]
    */
    virtual void paymentProfileGet(const OAIPaymentProfileGetRequest &oai_payment_profile_get_request);

    /**
    * @param[in]  oai_payment_profile_remove_request OAIPaymentProfileRemoveRequest [required]
    */
    virtual void paymentProfileRemove(const OAIPaymentProfileRemoveRequest &oai_payment_profile_remove_request);

    /**
    * @param[in]  oai_processor_apex_processor_token_create_request OAIProcessorApexProcessorTokenCreateRequest [required]
    */
    virtual void processorApexProcessorTokenCreate(const OAIProcessorApexProcessorTokenCreateRequest &oai_processor_apex_processor_token_create_request);

    /**
    * @param[in]  oai_processor_auth_get_request OAIProcessorAuthGetRequest [required]
    */
    virtual void processorAuthGet(const OAIProcessorAuthGetRequest &oai_processor_auth_get_request);

    /**
    * @param[in]  oai_processor_balance_get_request OAIProcessorBalanceGetRequest [required]
    */
    virtual void processorBalanceGet(const OAIProcessorBalanceGetRequest &oai_processor_balance_get_request);

    /**
    * @param[in]  oai_processor_bank_transfer_create_request OAIProcessorBankTransferCreateRequest [required]
    */
    virtual void processorBankTransferCreate(const OAIProcessorBankTransferCreateRequest &oai_processor_bank_transfer_create_request);

    /**
    * @param[in]  oai_processor_identity_get_request OAIProcessorIdentityGetRequest [required]
    */
    virtual void processorIdentityGet(const OAIProcessorIdentityGetRequest &oai_processor_identity_get_request);

    /**
    * @param[in]  oai_processor_signal_decision_report_request OAIProcessorSignalDecisionReportRequest [required]
    */
    virtual void processorSignalDecisionReport(const OAIProcessorSignalDecisionReportRequest &oai_processor_signal_decision_report_request);

    /**
    * @param[in]  oai_processor_signal_evaluate_request OAIProcessorSignalEvaluateRequest [required]
    */
    virtual void processorSignalEvaluate(const OAIProcessorSignalEvaluateRequest &oai_processor_signal_evaluate_request);

    /**
    * @param[in]  oai_processor_signal_return_report_request OAIProcessorSignalReturnReportRequest [required]
    */
    virtual void processorSignalReturnReport(const OAIProcessorSignalReturnReportRequest &oai_processor_signal_return_report_request);

    /**
    * @param[in]  oai_processor_stripe_bank_account_token_create_request OAIProcessorStripeBankAccountTokenCreateRequest [required]
    */
    virtual void processorStripeBankAccountTokenCreate(const OAIProcessorStripeBankAccountTokenCreateRequest &oai_processor_stripe_bank_account_token_create_request);

    /**
    * @param[in]  oai_processor_token_create_request OAIProcessorTokenCreateRequest [required]
    */
    virtual void processorTokenCreate(const OAIProcessorTokenCreateRequest &oai_processor_token_create_request);

    /**
    * @param[in]  oai_sandbox_bank_transfer_fire_webhook_request OAISandboxBankTransferFireWebhookRequest [required]
    */
    virtual void sandboxBankTransferFireWebhook(const OAISandboxBankTransferFireWebhookRequest &oai_sandbox_bank_transfer_fire_webhook_request);

    /**
    * @param[in]  oai_sandbox_bank_transfer_simulate_request OAISandboxBankTransferSimulateRequest [required]
    */
    virtual void sandboxBankTransferSimulate(const OAISandboxBankTransferSimulateRequest &oai_sandbox_bank_transfer_simulate_request);

    /**
    * @param[in]  oai_sandbox_income_fire_webhook_request OAISandboxIncomeFireWebhookRequest [required]
    */
    virtual void sandboxIncomeFireWebhook(const OAISandboxIncomeFireWebhookRequest &oai_sandbox_income_fire_webhook_request);

    /**
    * @param[in]  oai_sandbox_item_fire_webhook_request OAISandboxItemFireWebhookRequest [required]
    */
    virtual void sandboxItemFireWebhook(const OAISandboxItemFireWebhookRequest &oai_sandbox_item_fire_webhook_request);

    /**
    * @param[in]  oai_sandbox_item_reset_login_request OAISandboxItemResetLoginRequest [required]
    */
    virtual void sandboxItemResetLogin(const OAISandboxItemResetLoginRequest &oai_sandbox_item_reset_login_request);

    /**
    * @param[in]  oai_sandbox_item_set_verification_status_request OAISandboxItemSetVerificationStatusRequest [required]
    */
    virtual void sandboxItemSetVerificationStatus(const OAISandboxItemSetVerificationStatusRequest &oai_sandbox_item_set_verification_status_request);

    /**
    * @param[in]  oai_sandbox_oauth_select_accounts_request OAISandboxOauthSelectAccountsRequest [required]
    */
    virtual void sandboxOauthSelectAccounts(const OAISandboxOauthSelectAccountsRequest &oai_sandbox_oauth_select_accounts_request);

    /**
    * @param[in]  oai_sandbox_payment_profile_reset_login_request OAISandboxPaymentProfileResetLoginRequest [required]
    */
    virtual void sandboxPaymentProfileResetLogin(const OAISandboxPaymentProfileResetLoginRequest &oai_sandbox_payment_profile_reset_login_request);

    /**
    * @param[in]  oai_sandbox_processor_token_create_request OAISandboxProcessorTokenCreateRequest [required]
    */
    virtual void sandboxProcessorTokenCreate(const OAISandboxProcessorTokenCreateRequest &oai_sandbox_processor_token_create_request);

    /**
    * @param[in]  oai_sandbox_public_token_create_request OAISandboxPublicTokenCreateRequest [required]
    */
    virtual void sandboxPublicTokenCreate(const OAISandboxPublicTokenCreateRequest &oai_sandbox_public_token_create_request);

    /**
    * @param[in]  oai_sandbox_transfer_fire_webhook_request OAISandboxTransferFireWebhookRequest [required]
    */
    virtual void sandboxTransferFireWebhook(const OAISandboxTransferFireWebhookRequest &oai_sandbox_transfer_fire_webhook_request);

    /**
    * @param[in]  oai_sandbox_transfer_repayment_simulate_request OAISandboxTransferRepaymentSimulateRequest [required]
    */
    virtual void sandboxTransferRepaymentSimulate(const OAISandboxTransferRepaymentSimulateRequest &oai_sandbox_transfer_repayment_simulate_request);

    /**
    * @param[in]  oai_sandbox_transfer_simulate_request OAISandboxTransferSimulateRequest [required]
    */
    virtual void sandboxTransferSimulate(const OAISandboxTransferSimulateRequest &oai_sandbox_transfer_simulate_request);

    /**
    * @param[in]  oai_sandbox_transfer_sweep_simulate_request OAISandboxTransferSweepSimulateRequest [required]
    */
    virtual void sandboxTransferSweepSimulate(const OAISandboxTransferSweepSimulateRequest &oai_sandbox_transfer_sweep_simulate_request);

    /**
    * @param[in]  oai_sandbox_transfer_test_clock_advance_request OAISandboxTransferTestClockAdvanceRequest [required]
    */
    virtual void sandboxTransferTestClockAdvance(const OAISandboxTransferTestClockAdvanceRequest &oai_sandbox_transfer_test_clock_advance_request);

    /**
    * @param[in]  oai_sandbox_transfer_test_clock_create_request OAISandboxTransferTestClockCreateRequest [required]
    */
    virtual void sandboxTransferTestClockCreate(const OAISandboxTransferTestClockCreateRequest &oai_sandbox_transfer_test_clock_create_request);

    /**
    * @param[in]  oai_sandbox_transfer_test_clock_get_request OAISandboxTransferTestClockGetRequest [required]
    */
    virtual void sandboxTransferTestClockGet(const OAISandboxTransferTestClockGetRequest &oai_sandbox_transfer_test_clock_get_request);

    /**
    * @param[in]  oai_sandbox_transfer_test_clock_list_request OAISandboxTransferTestClockListRequest [required]
    */
    virtual void sandboxTransferTestClockList(const OAISandboxTransferTestClockListRequest &oai_sandbox_transfer_test_clock_list_request);

    /**
    * @param[in]  oai_signal_decision_report_request OAISignalDecisionReportRequest [required]
    */
    virtual void signalDecisionReport(const OAISignalDecisionReportRequest &oai_signal_decision_report_request);

    /**
    * @param[in]  oai_signal_evaluate_request OAISignalEvaluateRequest [required]
    */
    virtual void signalEvaluate(const OAISignalEvaluateRequest &oai_signal_evaluate_request);

    /**
    * @param[in]  oai_signal_prepare_request OAISignalPrepareRequest [required]
    */
    virtual void signalPrepare(const OAISignalPrepareRequest &oai_signal_prepare_request);

    /**
    * @param[in]  oai_signal_return_report_request OAISignalReturnReportRequest [required]
    */
    virtual void signalReturnReport(const OAISignalReturnReportRequest &oai_signal_return_report_request);

    /**
    * @param[in]  oai_transactions_enhance_get_request OAITransactionsEnhanceGetRequest [required]
    */
    virtual void transactionsEnhance(const OAITransactionsEnhanceGetRequest &oai_transactions_enhance_get_request);

    /**
    * @param[in]  oai_transactions_enrich_get_request OAITransactionsEnrichGetRequest [required]
    */
    virtual void transactionsEnrich(const OAITransactionsEnrichGetRequest &oai_transactions_enrich_get_request);

    /**
    * @param[in]  oai_transactions_get_request OAITransactionsGetRequest [required]
    */
    virtual void transactionsGet(const OAITransactionsGetRequest &oai_transactions_get_request);

    /**
    * @param[in]  oai_transactions_recurring_get_request OAITransactionsRecurringGetRequest [required]
    */
    virtual void transactionsRecurringGet(const OAITransactionsRecurringGetRequest &oai_transactions_recurring_get_request);

    /**
    * @param[in]  oai_transactions_refresh_request OAITransactionsRefreshRequest [required]
    */
    virtual void transactionsRefresh(const OAITransactionsRefreshRequest &oai_transactions_refresh_request);

    /**
    * @param[in]  oai_transactions_rules_create_request OAITransactionsRulesCreateRequest [required]
    */
    virtual void transactionsRulesCreate(const OAITransactionsRulesCreateRequest &oai_transactions_rules_create_request);

    /**
    * @param[in]  oai_transactions_rules_list_request OAITransactionsRulesListRequest [required]
    */
    virtual void transactionsRulesList(const OAITransactionsRulesListRequest &oai_transactions_rules_list_request);

    /**
    * @param[in]  oai_transactions_rules_remove_request OAITransactionsRulesRemoveRequest [required]
    */
    virtual void transactionsRulesRemove(const OAITransactionsRulesRemoveRequest &oai_transactions_rules_remove_request);

    /**
    * @param[in]  oai_transactions_sync_request OAITransactionsSyncRequest [required]
    */
    virtual void transactionsSync(const OAITransactionsSyncRequest &oai_transactions_sync_request);

    /**
    * @param[in]  oai_transfer_authorization_create_request OAITransferAuthorizationCreateRequest [required]
    */
    virtual void transferAuthorizationCreate(const OAITransferAuthorizationCreateRequest &oai_transfer_authorization_create_request);

    /**
    * @param[in]  oai_transfer_cancel_request OAITransferCancelRequest [required]
    */
    virtual void transferCancel(const OAITransferCancelRequest &oai_transfer_cancel_request);

    /**
    * @param[in]  oai_transfer_capabilities_get_request OAITransferCapabilitiesGetRequest [required]
    */
    virtual void transferCapabilitiesGet(const OAITransferCapabilitiesGetRequest &oai_transfer_capabilities_get_request);

    /**
    * @param[in]  oai_transfer_configuration_get_request OAITransferConfigurationGetRequest [required]
    */
    virtual void transferConfigurationGet(const OAITransferConfigurationGetRequest &oai_transfer_configuration_get_request);

    /**
    * @param[in]  oai_transfer_create_request OAITransferCreateRequest [required]
    */
    virtual void transferCreate(const OAITransferCreateRequest &oai_transfer_create_request);

    /**
    * @param[in]  oai_transfer_event_list_request OAITransferEventListRequest [required]
    */
    virtual void transferEventList(const OAITransferEventListRequest &oai_transfer_event_list_request);

    /**
    * @param[in]  oai_transfer_event_sync_request OAITransferEventSyncRequest [required]
    */
    virtual void transferEventSync(const OAITransferEventSyncRequest &oai_transfer_event_sync_request);

    /**
    * @param[in]  oai_transfer_get_request OAITransferGetRequest [required]
    */
    virtual void transferGet(const OAITransferGetRequest &oai_transfer_get_request);

    /**
    * @param[in]  oai_transfer_intent_create_request OAITransferIntentCreateRequest [required]
    */
    virtual void transferIntentCreate(const OAITransferIntentCreateRequest &oai_transfer_intent_create_request);

    /**
    * @param[in]  oai_transfer_intent_get_request OAITransferIntentGetRequest [required]
    */
    virtual void transferIntentGet(const OAITransferIntentGetRequest &oai_transfer_intent_get_request);

    /**
    * @param[in]  oai_transfer_list_request OAITransferListRequest [required]
    */
    virtual void transferList(const OAITransferListRequest &oai_transfer_list_request);

    /**
    * @param[in]  oai_transfer_metrics_get_request OAITransferMetricsGetRequest [required]
    */
    virtual void transferMetricsGet(const OAITransferMetricsGetRequest &oai_transfer_metrics_get_request);

    /**
    * @param[in]  oai_transfer_migrate_account_request OAITransferMigrateAccountRequest [required]
    */
    virtual void transferMigrateAccount(const OAITransferMigrateAccountRequest &oai_transfer_migrate_account_request);

    /**
    * @param[in]  oai_transfer_originator_create_request OAITransferOriginatorCreateRequest [required]
    */
    virtual void transferOriginatorCreate(const OAITransferOriginatorCreateRequest &oai_transfer_originator_create_request);

    /**
    * @param[in]  oai_transfer_originator_get_request OAITransferOriginatorGetRequest [required]
    */
    virtual void transferOriginatorGet(const OAITransferOriginatorGetRequest &oai_transfer_originator_get_request);

    /**
    * @param[in]  oai_transfer_originator_list_request OAITransferOriginatorListRequest [required]
    */
    virtual void transferOriginatorList(const OAITransferOriginatorListRequest &oai_transfer_originator_list_request);

    /**
    * @param[in]  oai_transfer_questionnaire_create_request OAITransferQuestionnaireCreateRequest [required]
    */
    virtual void transferQuestionnaireCreate(const OAITransferQuestionnaireCreateRequest &oai_transfer_questionnaire_create_request);

    /**
    * @param[in]  oai_transfer_recurring_cancel_request OAITransferRecurringCancelRequest [required]
    */
    virtual void transferRecurringCancel(const OAITransferRecurringCancelRequest &oai_transfer_recurring_cancel_request);

    /**
    * @param[in]  oai_transfer_recurring_create_request OAITransferRecurringCreateRequest [required]
    */
    virtual void transferRecurringCreate(const OAITransferRecurringCreateRequest &oai_transfer_recurring_create_request);

    /**
    * @param[in]  oai_transfer_recurring_get_request OAITransferRecurringGetRequest [required]
    */
    virtual void transferRecurringGet(const OAITransferRecurringGetRequest &oai_transfer_recurring_get_request);

    /**
    * @param[in]  oai_transfer_recurring_list_request OAITransferRecurringListRequest [required]
    */
    virtual void transferRecurringList(const OAITransferRecurringListRequest &oai_transfer_recurring_list_request);

    /**
    * @param[in]  oai_transfer_refund_cancel_request OAITransferRefundCancelRequest [required]
    */
    virtual void transferRefundCancel(const OAITransferRefundCancelRequest &oai_transfer_refund_cancel_request);

    /**
    * @param[in]  oai_transfer_refund_create_request OAITransferRefundCreateRequest [required]
    */
    virtual void transferRefundCreate(const OAITransferRefundCreateRequest &oai_transfer_refund_create_request);

    /**
    * @param[in]  oai_transfer_refund_get_request OAITransferRefundGetRequest [required]
    */
    virtual void transferRefundGet(const OAITransferRefundGetRequest &oai_transfer_refund_get_request);

    /**
    * @param[in]  oai_transfer_repayment_list_request OAITransferRepaymentListRequest [required]
    */
    virtual void transferRepaymentList(const OAITransferRepaymentListRequest &oai_transfer_repayment_list_request);

    /**
    * @param[in]  oai_transfer_repayment_return_list_request OAITransferRepaymentReturnListRequest [required]
    */
    virtual void transferRepaymentReturnList(const OAITransferRepaymentReturnListRequest &oai_transfer_repayment_return_list_request);

    /**
    * @param[in]  oai_transfer_sweep_get_request OAITransferSweepGetRequest [required]
    */
    virtual void transferSweepGet(const OAITransferSweepGetRequest &oai_transfer_sweep_get_request);

    /**
    * @param[in]  oai_transfer_sweep_list_request OAITransferSweepListRequest [required]
    */
    virtual void transferSweepList(const OAITransferSweepListRequest &oai_transfer_sweep_list_request);

    /**
    * @param[in]  oai_user_create_request OAIUserCreateRequest [required]
    */
    virtual void userCreate(const OAIUserCreateRequest &oai_user_create_request);

    /**
    * @param[in]  oai_wallet_create_request OAIWalletCreateRequest [required]
    */
    virtual void walletCreate(const OAIWalletCreateRequest &oai_wallet_create_request);

    /**
    * @param[in]  oai_wallet_get_request OAIWalletGetRequest [required]
    */
    virtual void walletGet(const OAIWalletGetRequest &oai_wallet_get_request);

    /**
    * @param[in]  oai_wallet_list_request OAIWalletListRequest [required]
    */
    virtual void walletList(const OAIWalletListRequest &oai_wallet_list_request);

    /**
    * @param[in]  oai_wallet_transaction_execute_request OAIWalletTransactionExecuteRequest [required]
    */
    virtual void walletTransactionExecute(const OAIWalletTransactionExecuteRequest &oai_wallet_transaction_execute_request);

    /**
    * @param[in]  oai_wallet_transaction_get_request OAIWalletTransactionGetRequest [required]
    */
    virtual void walletTransactionGet(const OAIWalletTransactionGetRequest &oai_wallet_transaction_get_request);

    /**
    * @param[in]  oai_wallet_transaction_list_request OAIWalletTransactionListRequest [required]
    */
    virtual void walletTransactionList(const OAIWalletTransactionListRequest &oai_wallet_transaction_list_request);

    /**
    * @param[in]  oai_watchlist_screening_entity_create_request OAIWatchlistScreeningEntityCreateRequest [required]
    */
    virtual void watchlistScreeningEntityCreate(const OAIWatchlistScreeningEntityCreateRequest &oai_watchlist_screening_entity_create_request);

    /**
    * @param[in]  oai_watchlist_screening_entity_get_request OAIWatchlistScreeningEntityGetRequest [required]
    */
    virtual void watchlistScreeningEntityGet(const OAIWatchlistScreeningEntityGetRequest &oai_watchlist_screening_entity_get_request);

    /**
    * @param[in]  oai_watchlist_screening_entity_history_list_request OAIWatchlistScreeningEntityHistoryListRequest [required]
    */
    virtual void watchlistScreeningEntityHistoryList(const OAIWatchlistScreeningEntityHistoryListRequest &oai_watchlist_screening_entity_history_list_request);

    /**
    * @param[in]  oai_watchlist_screening_entity_hit_list_request OAIWatchlistScreeningEntityHitListRequest [required]
    */
    virtual void watchlistScreeningEntityHitList(const OAIWatchlistScreeningEntityHitListRequest &oai_watchlist_screening_entity_hit_list_request);

    /**
    * @param[in]  oai_watchlist_screening_entity_list_request OAIWatchlistScreeningEntityListRequest [required]
    */
    virtual void watchlistScreeningEntityList(const OAIWatchlistScreeningEntityListRequest &oai_watchlist_screening_entity_list_request);

    /**
    * @param[in]  oai_watchlist_screening_entity_program_get_request OAIWatchlistScreeningEntityProgramGetRequest [required]
    */
    virtual void watchlistScreeningEntityProgramGet(const OAIWatchlistScreeningEntityProgramGetRequest &oai_watchlist_screening_entity_program_get_request);

    /**
    * @param[in]  oai_watchlist_screening_entity_program_list_request OAIWatchlistScreeningEntityProgramListRequest [required]
    */
    virtual void watchlistScreeningEntityProgramList(const OAIWatchlistScreeningEntityProgramListRequest &oai_watchlist_screening_entity_program_list_request);

    /**
    * @param[in]  oai_watchlist_screening_entity_review_create_request OAIWatchlistScreeningEntityReviewCreateRequest [required]
    */
    virtual void watchlistScreeningEntityReviewCreate(const OAIWatchlistScreeningEntityReviewCreateRequest &oai_watchlist_screening_entity_review_create_request);

    /**
    * @param[in]  oai_watchlist_screening_entity_review_list_request OAIWatchlistScreeningEntityReviewListRequest [required]
    */
    virtual void watchlistScreeningEntityReviewList(const OAIWatchlistScreeningEntityReviewListRequest &oai_watchlist_screening_entity_review_list_request);

    /**
    * @param[in]  oai_watchlist_screening_entity_update_request OAIWatchlistScreeningEntityUpdateRequest [required]
    */
    virtual void watchlistScreeningEntityUpdate(const OAIWatchlistScreeningEntityUpdateRequest &oai_watchlist_screening_entity_update_request);

    /**
    * @param[in]  oai_watchlist_screening_individual_create_request OAIWatchlistScreeningIndividualCreateRequest [required]
    */
    virtual void watchlistScreeningIndividualCreate(const OAIWatchlistScreeningIndividualCreateRequest &oai_watchlist_screening_individual_create_request);

    /**
    * @param[in]  oai_watchlist_screening_individual_get_request OAIWatchlistScreeningIndividualGetRequest [required]
    */
    virtual void watchlistScreeningIndividualGet(const OAIWatchlistScreeningIndividualGetRequest &oai_watchlist_screening_individual_get_request);

    /**
    * @param[in]  oai_watchlist_screening_individual_history_list_request OAIWatchlistScreeningIndividualHistoryListRequest [required]
    */
    virtual void watchlistScreeningIndividualHistoryList(const OAIWatchlistScreeningIndividualHistoryListRequest &oai_watchlist_screening_individual_history_list_request);

    /**
    * @param[in]  oai_watchlist_screening_individual_hit_list_request OAIWatchlistScreeningIndividualHitListRequest [required]
    */
    virtual void watchlistScreeningIndividualHitList(const OAIWatchlistScreeningIndividualHitListRequest &oai_watchlist_screening_individual_hit_list_request);

    /**
    * @param[in]  oai_watchlist_screening_individual_list_request OAIWatchlistScreeningIndividualListRequest [required]
    */
    virtual void watchlistScreeningIndividualList(const OAIWatchlistScreeningIndividualListRequest &oai_watchlist_screening_individual_list_request);

    /**
    * @param[in]  oai_watchlist_screening_individual_program_get_request OAIWatchlistScreeningIndividualProgramGetRequest [required]
    */
    virtual void watchlistScreeningIndividualProgramGet(const OAIWatchlistScreeningIndividualProgramGetRequest &oai_watchlist_screening_individual_program_get_request);

    /**
    * @param[in]  oai_watchlist_screening_individual_program_list_request OAIWatchlistScreeningIndividualProgramListRequest [required]
    */
    virtual void watchlistScreeningIndividualProgramList(const OAIWatchlistScreeningIndividualProgramListRequest &oai_watchlist_screening_individual_program_list_request);

    /**
    * @param[in]  oai_watchlist_screening_individual_review_create_request OAIWatchlistScreeningIndividualReviewCreateRequest [required]
    */
    virtual void watchlistScreeningIndividualReviewCreate(const OAIWatchlistScreeningIndividualReviewCreateRequest &oai_watchlist_screening_individual_review_create_request);

    /**
    * @param[in]  oai_watchlist_screening_individual_review_list_request OAIWatchlistScreeningIndividualReviewListRequest [required]
    */
    virtual void watchlistScreeningIndividualReviewList(const OAIWatchlistScreeningIndividualReviewListRequest &oai_watchlist_screening_individual_review_list_request);

    /**
    * @param[in]  oai_watchlist_screening_individual_update_request OAIWatchlistScreeningIndividualUpdateRequest [required]
    */
    virtual void watchlistScreeningIndividualUpdate(const OAIWatchlistScreeningIndividualUpdateRequest &oai_watchlist_screening_individual_update_request);

    /**
    * @param[in]  oai_webhook_verification_key_get_request OAIWebhookVerificationKeyGetRequest [required]
    */
    virtual void webhookVerificationKeyGet(const OAIWebhookVerificationKeyGetRequest &oai_webhook_verification_key_get_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountsBalanceGetCallback(OAIHttpRequestWorker *worker);
    void accountsGetCallback(OAIHttpRequestWorker *worker);
    void applicationGetCallback(OAIHttpRequestWorker *worker);
    void assetReportAuditCopyCreateCallback(OAIHttpRequestWorker *worker);
    void assetReportAuditCopyGetCallback(OAIHttpRequestWorker *worker);
    void assetReportAuditCopyRemoveCallback(OAIHttpRequestWorker *worker);
    void assetReportCreateCallback(OAIHttpRequestWorker *worker);
    void assetReportFilterCallback(OAIHttpRequestWorker *worker);
    void assetReportGetCallback(OAIHttpRequestWorker *worker);
    void assetReportPdfGetCallback(OAIHttpRequestWorker *worker);
    void assetReportRefreshCallback(OAIHttpRequestWorker *worker);
    void assetReportRemoveCallback(OAIHttpRequestWorker *worker);
    void authGetCallback(OAIHttpRequestWorker *worker);
    void bankTransferBalanceGetCallback(OAIHttpRequestWorker *worker);
    void bankTransferCancelCallback(OAIHttpRequestWorker *worker);
    void bankTransferCreateCallback(OAIHttpRequestWorker *worker);
    void bankTransferEventListCallback(OAIHttpRequestWorker *worker);
    void bankTransferEventSyncCallback(OAIHttpRequestWorker *worker);
    void bankTransferGetCallback(OAIHttpRequestWorker *worker);
    void bankTransferListCallback(OAIHttpRequestWorker *worker);
    void bankTransferMigrateAccountCallback(OAIHttpRequestWorker *worker);
    void bankTransferSweepGetCallback(OAIHttpRequestWorker *worker);
    void bankTransferSweepListCallback(OAIHttpRequestWorker *worker);
    void categoriesGetCallback(OAIHttpRequestWorker *worker);
    void createPaymentTokenCallback(OAIHttpRequestWorker *worker);
    void creditAssetReportFreddieMacGetCallback(OAIHttpRequestWorker *worker);
    void creditAuditCopyTokenCreateCallback(OAIHttpRequestWorker *worker);
    void creditAuditCopyTokenUpdateCallback(OAIHttpRequestWorker *worker);
    void creditBankEmploymentGetCallback(OAIHttpRequestWorker *worker);
    void creditBankIncomeGetCallback(OAIHttpRequestWorker *worker);
    void creditBankIncomePdfGetCallback(OAIHttpRequestWorker *worker);
    void creditBankIncomeRefreshCallback(OAIHttpRequestWorker *worker);
    void creditEmploymentGetCallback(OAIHttpRequestWorker *worker);
    void creditFreddieMacReportsGetCallback(OAIHttpRequestWorker *worker);
    void creditPayrollIncomeGetCallback(OAIHttpRequestWorker *worker);
    void creditPayrollIncomePrecheckCallback(OAIHttpRequestWorker *worker);
    void creditPayrollIncomeRefreshCallback(OAIHttpRequestWorker *worker);
    void creditRelayCreateCallback(OAIHttpRequestWorker *worker);
    void creditRelayGetCallback(OAIHttpRequestWorker *worker);
    void creditRelayRefreshCallback(OAIHttpRequestWorker *worker);
    void creditRelayRemoveCallback(OAIHttpRequestWorker *worker);
    void creditReportAuditCopyRemoveCallback(OAIHttpRequestWorker *worker);
    void creditSessionsGetCallback(OAIHttpRequestWorker *worker);
    void dashboardUserGetCallback(OAIHttpRequestWorker *worker);
    void dashboardUserListCallback(OAIHttpRequestWorker *worker);
    void depositSwitchAltCreateCallback(OAIHttpRequestWorker *worker);
    void depositSwitchCreateCallback(OAIHttpRequestWorker *worker);
    void depositSwitchGetCallback(OAIHttpRequestWorker *worker);
    void depositSwitchTokenCreateCallback(OAIHttpRequestWorker *worker);
    void employersSearchCallback(OAIHttpRequestWorker *worker);
    void employmentVerificationGetCallback(OAIHttpRequestWorker *worker);
    void fdxNotificationsCallback(OAIHttpRequestWorker *worker);
    void identityGetCallback(OAIHttpRequestWorker *worker);
    void identityMatchCallback(OAIHttpRequestWorker *worker);
    void identityVerificationCreateCallback(OAIHttpRequestWorker *worker);
    void identityVerificationGetCallback(OAIHttpRequestWorker *worker);
    void identityVerificationListCallback(OAIHttpRequestWorker *worker);
    void identityVerificationRetryCallback(OAIHttpRequestWorker *worker);
    void incomeVerificationCreateCallback(OAIHttpRequestWorker *worker);
    void incomeVerificationDocumentsDownloadCallback(OAIHttpRequestWorker *worker);
    void incomeVerificationPaystubsGetCallback(OAIHttpRequestWorker *worker);
    void incomeVerificationPrecheckCallback(OAIHttpRequestWorker *worker);
    void incomeVerificationTaxformsGetCallback(OAIHttpRequestWorker *worker);
    void institutionsGetCallback(OAIHttpRequestWorker *worker);
    void institutionsGetByIdCallback(OAIHttpRequestWorker *worker);
    void institutionsSearchCallback(OAIHttpRequestWorker *worker);
    void investmentsHoldingsGetCallback(OAIHttpRequestWorker *worker);
    void investmentsTransactionsGetCallback(OAIHttpRequestWorker *worker);
    void itemAccessTokenInvalidateCallback(OAIHttpRequestWorker *worker);
    void itemActivityListCallback(OAIHttpRequestWorker *worker);
    void itemApplicationListCallback(OAIHttpRequestWorker *worker);
    void itemApplicationScopesUpdateCallback(OAIHttpRequestWorker *worker);
    void itemCreatePublicTokenCallback(OAIHttpRequestWorker *worker);
    void itemGetCallback(OAIHttpRequestWorker *worker);
    void itemImportCallback(OAIHttpRequestWorker *worker);
    void itemPublicTokenExchangeCallback(OAIHttpRequestWorker *worker);
    void itemRemoveCallback(OAIHttpRequestWorker *worker);
    void itemWebhookUpdateCallback(OAIHttpRequestWorker *worker);
    void liabilitiesGetCallback(OAIHttpRequestWorker *worker);
    void linkDeliveryCreateCallback(OAIHttpRequestWorker *worker);
    void linkDeliveryGetCallback(OAIHttpRequestWorker *worker);
    void linkOauthCorrelationIdExchangeCallback(OAIHttpRequestWorker *worker);
    void linkTokenCreateCallback(OAIHttpRequestWorker *worker);
    void linkTokenGetCallback(OAIHttpRequestWorker *worker);
    void partnerCustomerCreateCallback(OAIHttpRequestWorker *worker);
    void partnerCustomerEnableCallback(OAIHttpRequestWorker *worker);
    void partnerCustomerGetCallback(OAIHttpRequestWorker *worker);
    void partnerCustomerOauthInstitutionsGetCallback(OAIHttpRequestWorker *worker);
    void partnerCustomerRemoveCallback(OAIHttpRequestWorker *worker);
    void paymentInitiationConsentCreateCallback(OAIHttpRequestWorker *worker);
    void paymentInitiationConsentGetCallback(OAIHttpRequestWorker *worker);
    void paymentInitiationConsentPaymentExecuteCallback(OAIHttpRequestWorker *worker);
    void paymentInitiationConsentRevokeCallback(OAIHttpRequestWorker *worker);
    void paymentInitiationPaymentCreateCallback(OAIHttpRequestWorker *worker);
    void paymentInitiationPaymentGetCallback(OAIHttpRequestWorker *worker);
    void paymentInitiationPaymentListCallback(OAIHttpRequestWorker *worker);
    void paymentInitiationPaymentReverseCallback(OAIHttpRequestWorker *worker);
    void paymentInitiationRecipientCreateCallback(OAIHttpRequestWorker *worker);
    void paymentInitiationRecipientGetCallback(OAIHttpRequestWorker *worker);
    void paymentInitiationRecipientListCallback(OAIHttpRequestWorker *worker);
    void paymentProfileCreateCallback(OAIHttpRequestWorker *worker);
    void paymentProfileGetCallback(OAIHttpRequestWorker *worker);
    void paymentProfileRemoveCallback(OAIHttpRequestWorker *worker);
    void processorApexProcessorTokenCreateCallback(OAIHttpRequestWorker *worker);
    void processorAuthGetCallback(OAIHttpRequestWorker *worker);
    void processorBalanceGetCallback(OAIHttpRequestWorker *worker);
    void processorBankTransferCreateCallback(OAIHttpRequestWorker *worker);
    void processorIdentityGetCallback(OAIHttpRequestWorker *worker);
    void processorSignalDecisionReportCallback(OAIHttpRequestWorker *worker);
    void processorSignalEvaluateCallback(OAIHttpRequestWorker *worker);
    void processorSignalReturnReportCallback(OAIHttpRequestWorker *worker);
    void processorStripeBankAccountTokenCreateCallback(OAIHttpRequestWorker *worker);
    void processorTokenCreateCallback(OAIHttpRequestWorker *worker);
    void sandboxBankTransferFireWebhookCallback(OAIHttpRequestWorker *worker);
    void sandboxBankTransferSimulateCallback(OAIHttpRequestWorker *worker);
    void sandboxIncomeFireWebhookCallback(OAIHttpRequestWorker *worker);
    void sandboxItemFireWebhookCallback(OAIHttpRequestWorker *worker);
    void sandboxItemResetLoginCallback(OAIHttpRequestWorker *worker);
    void sandboxItemSetVerificationStatusCallback(OAIHttpRequestWorker *worker);
    void sandboxOauthSelectAccountsCallback(OAIHttpRequestWorker *worker);
    void sandboxPaymentProfileResetLoginCallback(OAIHttpRequestWorker *worker);
    void sandboxProcessorTokenCreateCallback(OAIHttpRequestWorker *worker);
    void sandboxPublicTokenCreateCallback(OAIHttpRequestWorker *worker);
    void sandboxTransferFireWebhookCallback(OAIHttpRequestWorker *worker);
    void sandboxTransferRepaymentSimulateCallback(OAIHttpRequestWorker *worker);
    void sandboxTransferSimulateCallback(OAIHttpRequestWorker *worker);
    void sandboxTransferSweepSimulateCallback(OAIHttpRequestWorker *worker);
    void sandboxTransferTestClockAdvanceCallback(OAIHttpRequestWorker *worker);
    void sandboxTransferTestClockCreateCallback(OAIHttpRequestWorker *worker);
    void sandboxTransferTestClockGetCallback(OAIHttpRequestWorker *worker);
    void sandboxTransferTestClockListCallback(OAIHttpRequestWorker *worker);
    void signalDecisionReportCallback(OAIHttpRequestWorker *worker);
    void signalEvaluateCallback(OAIHttpRequestWorker *worker);
    void signalPrepareCallback(OAIHttpRequestWorker *worker);
    void signalReturnReportCallback(OAIHttpRequestWorker *worker);
    void transactionsEnhanceCallback(OAIHttpRequestWorker *worker);
    void transactionsEnrichCallback(OAIHttpRequestWorker *worker);
    void transactionsGetCallback(OAIHttpRequestWorker *worker);
    void transactionsRecurringGetCallback(OAIHttpRequestWorker *worker);
    void transactionsRefreshCallback(OAIHttpRequestWorker *worker);
    void transactionsRulesCreateCallback(OAIHttpRequestWorker *worker);
    void transactionsRulesListCallback(OAIHttpRequestWorker *worker);
    void transactionsRulesRemoveCallback(OAIHttpRequestWorker *worker);
    void transactionsSyncCallback(OAIHttpRequestWorker *worker);
    void transferAuthorizationCreateCallback(OAIHttpRequestWorker *worker);
    void transferCancelCallback(OAIHttpRequestWorker *worker);
    void transferCapabilitiesGetCallback(OAIHttpRequestWorker *worker);
    void transferConfigurationGetCallback(OAIHttpRequestWorker *worker);
    void transferCreateCallback(OAIHttpRequestWorker *worker);
    void transferEventListCallback(OAIHttpRequestWorker *worker);
    void transferEventSyncCallback(OAIHttpRequestWorker *worker);
    void transferGetCallback(OAIHttpRequestWorker *worker);
    void transferIntentCreateCallback(OAIHttpRequestWorker *worker);
    void transferIntentGetCallback(OAIHttpRequestWorker *worker);
    void transferListCallback(OAIHttpRequestWorker *worker);
    void transferMetricsGetCallback(OAIHttpRequestWorker *worker);
    void transferMigrateAccountCallback(OAIHttpRequestWorker *worker);
    void transferOriginatorCreateCallback(OAIHttpRequestWorker *worker);
    void transferOriginatorGetCallback(OAIHttpRequestWorker *worker);
    void transferOriginatorListCallback(OAIHttpRequestWorker *worker);
    void transferQuestionnaireCreateCallback(OAIHttpRequestWorker *worker);
    void transferRecurringCancelCallback(OAIHttpRequestWorker *worker);
    void transferRecurringCreateCallback(OAIHttpRequestWorker *worker);
    void transferRecurringGetCallback(OAIHttpRequestWorker *worker);
    void transferRecurringListCallback(OAIHttpRequestWorker *worker);
    void transferRefundCancelCallback(OAIHttpRequestWorker *worker);
    void transferRefundCreateCallback(OAIHttpRequestWorker *worker);
    void transferRefundGetCallback(OAIHttpRequestWorker *worker);
    void transferRepaymentListCallback(OAIHttpRequestWorker *worker);
    void transferRepaymentReturnListCallback(OAIHttpRequestWorker *worker);
    void transferSweepGetCallback(OAIHttpRequestWorker *worker);
    void transferSweepListCallback(OAIHttpRequestWorker *worker);
    void userCreateCallback(OAIHttpRequestWorker *worker);
    void walletCreateCallback(OAIHttpRequestWorker *worker);
    void walletGetCallback(OAIHttpRequestWorker *worker);
    void walletListCallback(OAIHttpRequestWorker *worker);
    void walletTransactionExecuteCallback(OAIHttpRequestWorker *worker);
    void walletTransactionGetCallback(OAIHttpRequestWorker *worker);
    void walletTransactionListCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningEntityCreateCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningEntityGetCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningEntityHistoryListCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningEntityHitListCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningEntityListCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningEntityProgramGetCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningEntityProgramListCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningEntityReviewCreateCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningEntityReviewListCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningEntityUpdateCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningIndividualCreateCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningIndividualGetCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningIndividualHistoryListCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningIndividualHitListCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningIndividualListCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningIndividualProgramGetCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningIndividualProgramListCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningIndividualReviewCreateCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningIndividualReviewListCallback(OAIHttpRequestWorker *worker);
    void watchlistScreeningIndividualUpdateCallback(OAIHttpRequestWorker *worker);
    void webhookVerificationKeyGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountsBalanceGetSignal(OAIAccountsGetResponse summary);
    void accountsGetSignal(OAIAccountsGetResponse summary);
    void applicationGetSignal(OAIApplicationGetResponse summary);
    void assetReportAuditCopyCreateSignal(OAIAssetReportAuditCopyCreateResponse summary);
    void assetReportAuditCopyGetSignal(OAIAssetReportGetResponse summary);
    void assetReportAuditCopyRemoveSignal(OAIAssetReportAuditCopyRemoveResponse summary);
    void assetReportCreateSignal(OAIAssetReportCreateResponse summary);
    void assetReportFilterSignal(OAIAssetReportFilterResponse summary);
    void assetReportGetSignal(OAIAssetReportGetResponse summary);
    void assetReportPdfGetSignal(OAIHttpFileElement summary);
    void assetReportRefreshSignal(OAIAssetReportRefreshResponse summary);
    void assetReportRemoveSignal(OAIAssetReportRemoveResponse summary);
    void authGetSignal(OAIAuthGetResponse summary);
    void bankTransferBalanceGetSignal(OAIBankTransferBalanceGetResponse summary);
    void bankTransferCancelSignal(OAIBankTransferCancelResponse summary);
    void bankTransferCreateSignal(OAIBankTransferCreateResponse summary);
    void bankTransferEventListSignal(OAIBankTransferEventListResponse summary);
    void bankTransferEventSyncSignal(OAIBankTransferEventSyncResponse summary);
    void bankTransferGetSignal(OAIBankTransferGetResponse summary);
    void bankTransferListSignal(OAIBankTransferListResponse summary);
    void bankTransferMigrateAccountSignal(OAIBankTransferMigrateAccountResponse summary);
    void bankTransferSweepGetSignal(OAIBankTransferSweepGetResponse summary);
    void bankTransferSweepListSignal(OAIBankTransferSweepListResponse summary);
    void categoriesGetSignal(OAICategoriesGetResponse summary);
    void createPaymentTokenSignal(OAIPaymentInitiationPaymentTokenCreateResponse summary);
    void creditAssetReportFreddieMacGetSignal(OAIAssetReportFreddieGetResponse summary);
    void creditAuditCopyTokenCreateSignal(OAICreditAuditCopyTokenCreateResponse summary);
    void creditAuditCopyTokenUpdateSignal(OAICreditAuditCopyTokenUpdateResponse summary);
    void creditBankEmploymentGetSignal(OAICreditBankEmploymentGetResponse summary);
    void creditBankIncomeGetSignal(OAICreditBankIncomeGetResponse summary);
    void creditBankIncomePdfGetSignal(OAIHttpFileElement summary);
    void creditBankIncomeRefreshSignal(OAICreditBankIncomeRefreshResponse summary);
    void creditEmploymentGetSignal(OAICreditEmploymentGetResponse summary);
    void creditFreddieMacReportsGetSignal(OAICreditFreddieMacReportsGetResponse summary);
    void creditPayrollIncomeGetSignal(OAICreditPayrollIncomeGetResponse summary);
    void creditPayrollIncomePrecheckSignal(OAICreditPayrollIncomePrecheckResponse summary);
    void creditPayrollIncomeRefreshSignal(OAICreditPayrollIncomeRefreshResponse summary);
    void creditRelayCreateSignal(OAICreditRelayCreateResponse summary);
    void creditRelayGetSignal(OAIAssetReportGetResponse summary);
    void creditRelayRefreshSignal(OAICreditRelayRefreshResponse summary);
    void creditRelayRemoveSignal(OAICreditRelayRemoveResponse summary);
    void creditReportAuditCopyRemoveSignal(OAICreditAuditCopyTokenRemoveResponse summary);
    void creditSessionsGetSignal(OAICreditSessionsGetResponse summary);
    void dashboardUserGetSignal(OAIDashboardUserGetResponse summary);
    void dashboardUserListSignal(OAIDashboardUserListResponse summary);
    void depositSwitchAltCreateSignal(OAIDepositSwitchAltCreateResponse summary);
    void depositSwitchCreateSignal(OAIDepositSwitchCreateResponse summary);
    void depositSwitchGetSignal(OAIDepositSwitchGetResponse summary);
    void depositSwitchTokenCreateSignal(OAIDepositSwitchTokenCreateResponse summary);
    void employersSearchSignal(OAIEmployersSearchResponse summary);
    void employmentVerificationGetSignal(OAIEmploymentVerificationGetResponse summary);
    void fdxNotificationsSignal();
    void identityGetSignal(OAIIdentityGetResponse summary);
    void identityMatchSignal(OAIIdentityMatchResponse summary);
    void identityVerificationCreateSignal(OAIIdentityVerificationCreateResponse summary);
    void identityVerificationGetSignal(OAIIdentityVerificationGetResponse summary);
    void identityVerificationListSignal(OAIIdentityVerificationListResponse summary);
    void identityVerificationRetrySignal(OAIIdentityVerificationRetryResponse summary);
    void incomeVerificationCreateSignal(OAIIncomeVerificationCreateResponse summary);
    void incomeVerificationDocumentsDownloadSignal(OAIHttpFileElement summary);
    void incomeVerificationPaystubsGetSignal(OAIIncomeVerificationPaystubsGetResponse summary);
    void incomeVerificationPrecheckSignal(OAIIncomeVerificationPrecheckResponse summary);
    void incomeVerificationTaxformsGetSignal(OAIIncomeVerificationTaxformsGetResponse summary);
    void institutionsGetSignal(OAIInstitutionsGetResponse summary);
    void institutionsGetByIdSignal(OAIInstitutionsGetByIdResponse summary);
    void institutionsSearchSignal(OAIInstitutionsSearchResponse summary);
    void investmentsHoldingsGetSignal(OAIInvestmentsHoldingsGetResponse summary);
    void investmentsTransactionsGetSignal(OAIInvestmentsTransactionsGetResponse summary);
    void itemAccessTokenInvalidateSignal(OAIItemAccessTokenInvalidateResponse summary);
    void itemActivityListSignal(OAIItemActivityListResponse summary);
    void itemApplicationListSignal(OAIItemApplicationListResponse summary);
    void itemApplicationScopesUpdateSignal(OAIItemApplicationScopesUpdateResponse summary);
    void itemCreatePublicTokenSignal(OAIItemPublicTokenCreateResponse summary);
    void itemGetSignal(OAIItemGetResponse summary);
    void itemImportSignal(OAIItemImportResponse summary);
    void itemPublicTokenExchangeSignal(OAIItemPublicTokenExchangeResponse summary);
    void itemRemoveSignal(OAIItemRemoveResponse summary);
    void itemWebhookUpdateSignal(OAIItemWebhookUpdateResponse summary);
    void liabilitiesGetSignal(OAILiabilitiesGetResponse summary);
    void linkDeliveryCreateSignal(OAILinkDeliveryCreateResponse summary);
    void linkDeliveryGetSignal(OAILinkDeliveryGetResponse summary);
    void linkOauthCorrelationIdExchangeSignal(OAILinkOAuthCorrelationIdExchangeResponse summary);
    void linkTokenCreateSignal(OAILinkTokenCreateResponse summary);
    void linkTokenGetSignal(OAILinkTokenGetResponse summary);
    void partnerCustomerCreateSignal(OAIPartnerCustomerCreateResponse summary);
    void partnerCustomerEnableSignal(OAIPartnerCustomerEnableResponse summary);
    void partnerCustomerGetSignal(OAIPartnerCustomerGetResponse summary);
    void partnerCustomerOauthInstitutionsGetSignal(OAIPartnerCustomerOAuthInstitutionsGetResponse summary);
    void partnerCustomerRemoveSignal(OAIPartnerCustomerRemoveResponse summary);
    void paymentInitiationConsentCreateSignal(OAIPaymentInitiationConsentCreateResponse summary);
    void paymentInitiationConsentGetSignal(OAIPaymentInitiationConsentGetResponse summary);
    void paymentInitiationConsentPaymentExecuteSignal(OAIPaymentInitiationConsentPaymentExecuteResponse summary);
    void paymentInitiationConsentRevokeSignal(OAIPaymentInitiationConsentRevokeResponse summary);
    void paymentInitiationPaymentCreateSignal(OAIPaymentInitiationPaymentCreateResponse summary);
    void paymentInitiationPaymentGetSignal(OAIPaymentInitiationPaymentGetResponse summary);
    void paymentInitiationPaymentListSignal(OAIPaymentInitiationPaymentListResponse summary);
    void paymentInitiationPaymentReverseSignal(OAIPaymentInitiationPaymentReverseResponse summary);
    void paymentInitiationRecipientCreateSignal(OAIPaymentInitiationRecipientCreateResponse summary);
    void paymentInitiationRecipientGetSignal(OAIPaymentInitiationRecipientGetResponse summary);
    void paymentInitiationRecipientListSignal(OAIPaymentInitiationRecipientListResponse summary);
    void paymentProfileCreateSignal(OAIPaymentProfileCreateResponse summary);
    void paymentProfileGetSignal(OAIPaymentProfileGetResponse summary);
    void paymentProfileRemoveSignal(OAIPaymentProfileRemoveResponse summary);
    void processorApexProcessorTokenCreateSignal(OAIProcessorTokenCreateResponse summary);
    void processorAuthGetSignal(OAIProcessorAuthGetResponse summary);
    void processorBalanceGetSignal(OAIProcessorBalanceGetResponse summary);
    void processorBankTransferCreateSignal(OAIProcessorBankTransferCreateResponse summary);
    void processorIdentityGetSignal(OAIProcessorIdentityGetResponse summary);
    void processorSignalDecisionReportSignal(OAIProcessorSignalDecisionReportResponse summary);
    void processorSignalEvaluateSignal(OAIProcessorSignalEvaluateResponse summary);
    void processorSignalReturnReportSignal(OAIProcessorSignalReturnReportResponse summary);
    void processorStripeBankAccountTokenCreateSignal(OAIProcessorStripeBankAccountTokenCreateResponse summary);
    void processorTokenCreateSignal(OAIProcessorTokenCreateResponse summary);
    void sandboxBankTransferFireWebhookSignal(OAISandboxBankTransferFireWebhookResponse summary);
    void sandboxBankTransferSimulateSignal(OAISandboxBankTransferSimulateResponse summary);
    void sandboxIncomeFireWebhookSignal(OAISandboxIncomeFireWebhookResponse summary);
    void sandboxItemFireWebhookSignal(OAISandboxItemFireWebhookResponse summary);
    void sandboxItemResetLoginSignal(OAISandboxItemResetLoginResponse summary);
    void sandboxItemSetVerificationStatusSignal(OAISandboxItemSetVerificationStatusResponse summary);
    void sandboxOauthSelectAccountsSignal(QMap<QString, QJsonValue> summary);
    void sandboxPaymentProfileResetLoginSignal(OAISandboxPaymentProfileResetLoginResponse summary);
    void sandboxProcessorTokenCreateSignal(OAISandboxProcessorTokenCreateResponse summary);
    void sandboxPublicTokenCreateSignal(OAISandboxPublicTokenCreateResponse summary);
    void sandboxTransferFireWebhookSignal(OAISandboxTransferFireWebhookResponse summary);
    void sandboxTransferRepaymentSimulateSignal(OAISandboxTransferRepaymentSimulateResponse summary);
    void sandboxTransferSimulateSignal(OAISandboxTransferSimulateResponse summary);
    void sandboxTransferSweepSimulateSignal(OAISandboxTransferSweepSimulateResponse summary);
    void sandboxTransferTestClockAdvanceSignal(OAISandboxTransferTestClockAdvanceResponse summary);
    void sandboxTransferTestClockCreateSignal(OAISandboxTransferTestClockCreateResponse summary);
    void sandboxTransferTestClockGetSignal(OAISandboxTransferTestClockGetResponse summary);
    void sandboxTransferTestClockListSignal(OAISandboxTransferTestClockListResponse summary);
    void signalDecisionReportSignal(OAISignalDecisionReportResponse summary);
    void signalEvaluateSignal(OAISignalEvaluateResponse summary);
    void signalPrepareSignal(OAISignalPrepareResponse summary);
    void signalReturnReportSignal(OAISignalReturnReportResponse summary);
    void transactionsEnhanceSignal(OAITransactionsEnhanceGetResponse summary);
    void transactionsEnrichSignal(OAITransactionsEnrichGetResponse summary);
    void transactionsGetSignal(OAITransactionsGetResponse summary);
    void transactionsRecurringGetSignal(OAITransactionsRecurringGetResponse summary);
    void transactionsRefreshSignal(OAITransactionsRefreshResponse summary);
    void transactionsRulesCreateSignal(OAITransactionsRulesCreateResponse summary);
    void transactionsRulesListSignal(OAITransactionsRulesListResponse summary);
    void transactionsRulesRemoveSignal(OAITransactionsRulesRemoveResponse summary);
    void transactionsSyncSignal(OAITransactionsSyncResponse summary);
    void transferAuthorizationCreateSignal(OAITransferAuthorizationCreateResponse summary);
    void transferCancelSignal(OAITransferCancelResponse summary);
    void transferCapabilitiesGetSignal(OAITransferCapabilitiesGetResponse summary);
    void transferConfigurationGetSignal(OAITransferConfigurationGetResponse summary);
    void transferCreateSignal(OAITransferCreateResponse summary);
    void transferEventListSignal(OAITransferEventListResponse summary);
    void transferEventSyncSignal(OAITransferEventSyncResponse summary);
    void transferGetSignal(OAITransferGetResponse summary);
    void transferIntentCreateSignal(OAITransferIntentCreateResponse summary);
    void transferIntentGetSignal(OAITransferIntentGetResponse summary);
    void transferListSignal(OAITransferListResponse summary);
    void transferMetricsGetSignal(OAITransferMetricsGetResponse summary);
    void transferMigrateAccountSignal(OAITransferMigrateAccountResponse summary);
    void transferOriginatorCreateSignal(OAITransferOriginatorCreateResponse summary);
    void transferOriginatorGetSignal(OAITransferOriginatorGetResponse summary);
    void transferOriginatorListSignal(OAITransferOriginatorListResponse summary);
    void transferQuestionnaireCreateSignal(OAITransferQuestionnaireCreateResponse summary);
    void transferRecurringCancelSignal(OAITransferRecurringCancelResponse summary);
    void transferRecurringCreateSignal(OAITransferRecurringCreateResponse summary);
    void transferRecurringGetSignal(OAITransferRecurringGetResponse summary);
    void transferRecurringListSignal(OAITransferRecurringListResponse summary);
    void transferRefundCancelSignal(OAITransferRefundCancelResponse summary);
    void transferRefundCreateSignal(OAITransferRefundCreateResponse summary);
    void transferRefundGetSignal(OAITransferRefundGetResponse summary);
    void transferRepaymentListSignal(OAITransferRepaymentListResponse summary);
    void transferRepaymentReturnListSignal(OAITransferRepaymentReturnListResponse summary);
    void transferSweepGetSignal(OAITransferSweepGetResponse summary);
    void transferSweepListSignal(OAITransferSweepListResponse summary);
    void userCreateSignal(OAIUserCreateResponse summary);
    void walletCreateSignal(OAIWalletCreateResponse summary);
    void walletGetSignal(OAIWalletGetResponse summary);
    void walletListSignal(OAIWalletListResponse summary);
    void walletTransactionExecuteSignal(OAIWalletTransactionExecuteResponse summary);
    void walletTransactionGetSignal(OAIWalletTransactionGetResponse summary);
    void walletTransactionListSignal(OAIWalletTransactionListResponse summary);
    void watchlistScreeningEntityCreateSignal(OAIWatchlistScreeningEntityCreateResponse summary);
    void watchlistScreeningEntityGetSignal(OAIWatchlistScreeningEntityGetResponse summary);
    void watchlistScreeningEntityHistoryListSignal(OAIWatchlistScreeningEntityHistoryListResponse summary);
    void watchlistScreeningEntityHitListSignal(OAIWatchlistScreeningEntityHitListResponse summary);
    void watchlistScreeningEntityListSignal(OAIWatchlistScreeningEntityListResponse summary);
    void watchlistScreeningEntityProgramGetSignal(OAIWatchlistScreeningEntityProgramGetResponse summary);
    void watchlistScreeningEntityProgramListSignal(OAIWatchlistScreeningEntityProgramListResponse summary);
    void watchlistScreeningEntityReviewCreateSignal(OAIWatchlistScreeningEntityReviewCreateResponse summary);
    void watchlistScreeningEntityReviewListSignal(OAIWatchlistScreeningEntityReviewListResponse summary);
    void watchlistScreeningEntityUpdateSignal(OAIWatchlistScreeningEntityUpdateResponse summary);
    void watchlistScreeningIndividualCreateSignal(OAIWatchlistScreeningIndividualCreateResponse summary);
    void watchlistScreeningIndividualGetSignal(OAIWatchlistScreeningIndividualGetResponse summary);
    void watchlistScreeningIndividualHistoryListSignal(OAIWatchlistScreeningIndividualHistoryListResponse summary);
    void watchlistScreeningIndividualHitListSignal(OAIWatchlistScreeningIndividualHitListResponse summary);
    void watchlistScreeningIndividualListSignal(OAIWatchlistScreeningIndividualListResponse summary);
    void watchlistScreeningIndividualProgramGetSignal(OAIWatchlistScreeningIndividualProgramGetResponse summary);
    void watchlistScreeningIndividualProgramListSignal(OAIWatchlistScreeningIndividualProgramListResponse summary);
    void watchlistScreeningIndividualReviewCreateSignal(OAIWatchlistScreeningIndividualReviewCreateResponse summary);
    void watchlistScreeningIndividualReviewListSignal(OAIWatchlistScreeningIndividualReviewListResponse summary);
    void watchlistScreeningIndividualUpdateSignal(OAIWatchlistScreeningIndividualUpdateResponse summary);
    void webhookVerificationKeyGetSignal(OAIWebhookVerificationKeyGetResponse summary);


    void accountsBalanceGetSignalFull(OAIHttpRequestWorker *worker, OAIAccountsGetResponse summary);
    void accountsGetSignalFull(OAIHttpRequestWorker *worker, OAIAccountsGetResponse summary);
    void applicationGetSignalFull(OAIHttpRequestWorker *worker, OAIApplicationGetResponse summary);
    void assetReportAuditCopyCreateSignalFull(OAIHttpRequestWorker *worker, OAIAssetReportAuditCopyCreateResponse summary);
    void assetReportAuditCopyGetSignalFull(OAIHttpRequestWorker *worker, OAIAssetReportGetResponse summary);
    void assetReportAuditCopyRemoveSignalFull(OAIHttpRequestWorker *worker, OAIAssetReportAuditCopyRemoveResponse summary);
    void assetReportCreateSignalFull(OAIHttpRequestWorker *worker, OAIAssetReportCreateResponse summary);
    void assetReportFilterSignalFull(OAIHttpRequestWorker *worker, OAIAssetReportFilterResponse summary);
    void assetReportGetSignalFull(OAIHttpRequestWorker *worker, OAIAssetReportGetResponse summary);
    void assetReportPdfGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void assetReportRefreshSignalFull(OAIHttpRequestWorker *worker, OAIAssetReportRefreshResponse summary);
    void assetReportRemoveSignalFull(OAIHttpRequestWorker *worker, OAIAssetReportRemoveResponse summary);
    void authGetSignalFull(OAIHttpRequestWorker *worker, OAIAuthGetResponse summary);
    void bankTransferBalanceGetSignalFull(OAIHttpRequestWorker *worker, OAIBankTransferBalanceGetResponse summary);
    void bankTransferCancelSignalFull(OAIHttpRequestWorker *worker, OAIBankTransferCancelResponse summary);
    void bankTransferCreateSignalFull(OAIHttpRequestWorker *worker, OAIBankTransferCreateResponse summary);
    void bankTransferEventListSignalFull(OAIHttpRequestWorker *worker, OAIBankTransferEventListResponse summary);
    void bankTransferEventSyncSignalFull(OAIHttpRequestWorker *worker, OAIBankTransferEventSyncResponse summary);
    void bankTransferGetSignalFull(OAIHttpRequestWorker *worker, OAIBankTransferGetResponse summary);
    void bankTransferListSignalFull(OAIHttpRequestWorker *worker, OAIBankTransferListResponse summary);
    void bankTransferMigrateAccountSignalFull(OAIHttpRequestWorker *worker, OAIBankTransferMigrateAccountResponse summary);
    void bankTransferSweepGetSignalFull(OAIHttpRequestWorker *worker, OAIBankTransferSweepGetResponse summary);
    void bankTransferSweepListSignalFull(OAIHttpRequestWorker *worker, OAIBankTransferSweepListResponse summary);
    void categoriesGetSignalFull(OAIHttpRequestWorker *worker, OAICategoriesGetResponse summary);
    void createPaymentTokenSignalFull(OAIHttpRequestWorker *worker, OAIPaymentInitiationPaymentTokenCreateResponse summary);
    void creditAssetReportFreddieMacGetSignalFull(OAIHttpRequestWorker *worker, OAIAssetReportFreddieGetResponse summary);
    void creditAuditCopyTokenCreateSignalFull(OAIHttpRequestWorker *worker, OAICreditAuditCopyTokenCreateResponse summary);
    void creditAuditCopyTokenUpdateSignalFull(OAIHttpRequestWorker *worker, OAICreditAuditCopyTokenUpdateResponse summary);
    void creditBankEmploymentGetSignalFull(OAIHttpRequestWorker *worker, OAICreditBankEmploymentGetResponse summary);
    void creditBankIncomeGetSignalFull(OAIHttpRequestWorker *worker, OAICreditBankIncomeGetResponse summary);
    void creditBankIncomePdfGetSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void creditBankIncomeRefreshSignalFull(OAIHttpRequestWorker *worker, OAICreditBankIncomeRefreshResponse summary);
    void creditEmploymentGetSignalFull(OAIHttpRequestWorker *worker, OAICreditEmploymentGetResponse summary);
    void creditFreddieMacReportsGetSignalFull(OAIHttpRequestWorker *worker, OAICreditFreddieMacReportsGetResponse summary);
    void creditPayrollIncomeGetSignalFull(OAIHttpRequestWorker *worker, OAICreditPayrollIncomeGetResponse summary);
    void creditPayrollIncomePrecheckSignalFull(OAIHttpRequestWorker *worker, OAICreditPayrollIncomePrecheckResponse summary);
    void creditPayrollIncomeRefreshSignalFull(OAIHttpRequestWorker *worker, OAICreditPayrollIncomeRefreshResponse summary);
    void creditRelayCreateSignalFull(OAIHttpRequestWorker *worker, OAICreditRelayCreateResponse summary);
    void creditRelayGetSignalFull(OAIHttpRequestWorker *worker, OAIAssetReportGetResponse summary);
    void creditRelayRefreshSignalFull(OAIHttpRequestWorker *worker, OAICreditRelayRefreshResponse summary);
    void creditRelayRemoveSignalFull(OAIHttpRequestWorker *worker, OAICreditRelayRemoveResponse summary);
    void creditReportAuditCopyRemoveSignalFull(OAIHttpRequestWorker *worker, OAICreditAuditCopyTokenRemoveResponse summary);
    void creditSessionsGetSignalFull(OAIHttpRequestWorker *worker, OAICreditSessionsGetResponse summary);
    void dashboardUserGetSignalFull(OAIHttpRequestWorker *worker, OAIDashboardUserGetResponse summary);
    void dashboardUserListSignalFull(OAIHttpRequestWorker *worker, OAIDashboardUserListResponse summary);
    void depositSwitchAltCreateSignalFull(OAIHttpRequestWorker *worker, OAIDepositSwitchAltCreateResponse summary);
    void depositSwitchCreateSignalFull(OAIHttpRequestWorker *worker, OAIDepositSwitchCreateResponse summary);
    void depositSwitchGetSignalFull(OAIHttpRequestWorker *worker, OAIDepositSwitchGetResponse summary);
    void depositSwitchTokenCreateSignalFull(OAIHttpRequestWorker *worker, OAIDepositSwitchTokenCreateResponse summary);
    void employersSearchSignalFull(OAIHttpRequestWorker *worker, OAIEmployersSearchResponse summary);
    void employmentVerificationGetSignalFull(OAIHttpRequestWorker *worker, OAIEmploymentVerificationGetResponse summary);
    void fdxNotificationsSignalFull(OAIHttpRequestWorker *worker);
    void identityGetSignalFull(OAIHttpRequestWorker *worker, OAIIdentityGetResponse summary);
    void identityMatchSignalFull(OAIHttpRequestWorker *worker, OAIIdentityMatchResponse summary);
    void identityVerificationCreateSignalFull(OAIHttpRequestWorker *worker, OAIIdentityVerificationCreateResponse summary);
    void identityVerificationGetSignalFull(OAIHttpRequestWorker *worker, OAIIdentityVerificationGetResponse summary);
    void identityVerificationListSignalFull(OAIHttpRequestWorker *worker, OAIIdentityVerificationListResponse summary);
    void identityVerificationRetrySignalFull(OAIHttpRequestWorker *worker, OAIIdentityVerificationRetryResponse summary);
    void incomeVerificationCreateSignalFull(OAIHttpRequestWorker *worker, OAIIncomeVerificationCreateResponse summary);
    void incomeVerificationDocumentsDownloadSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void incomeVerificationPaystubsGetSignalFull(OAIHttpRequestWorker *worker, OAIIncomeVerificationPaystubsGetResponse summary);
    void incomeVerificationPrecheckSignalFull(OAIHttpRequestWorker *worker, OAIIncomeVerificationPrecheckResponse summary);
    void incomeVerificationTaxformsGetSignalFull(OAIHttpRequestWorker *worker, OAIIncomeVerificationTaxformsGetResponse summary);
    void institutionsGetSignalFull(OAIHttpRequestWorker *worker, OAIInstitutionsGetResponse summary);
    void institutionsGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIInstitutionsGetByIdResponse summary);
    void institutionsSearchSignalFull(OAIHttpRequestWorker *worker, OAIInstitutionsSearchResponse summary);
    void investmentsHoldingsGetSignalFull(OAIHttpRequestWorker *worker, OAIInvestmentsHoldingsGetResponse summary);
    void investmentsTransactionsGetSignalFull(OAIHttpRequestWorker *worker, OAIInvestmentsTransactionsGetResponse summary);
    void itemAccessTokenInvalidateSignalFull(OAIHttpRequestWorker *worker, OAIItemAccessTokenInvalidateResponse summary);
    void itemActivityListSignalFull(OAIHttpRequestWorker *worker, OAIItemActivityListResponse summary);
    void itemApplicationListSignalFull(OAIHttpRequestWorker *worker, OAIItemApplicationListResponse summary);
    void itemApplicationScopesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIItemApplicationScopesUpdateResponse summary);
    void itemCreatePublicTokenSignalFull(OAIHttpRequestWorker *worker, OAIItemPublicTokenCreateResponse summary);
    void itemGetSignalFull(OAIHttpRequestWorker *worker, OAIItemGetResponse summary);
    void itemImportSignalFull(OAIHttpRequestWorker *worker, OAIItemImportResponse summary);
    void itemPublicTokenExchangeSignalFull(OAIHttpRequestWorker *worker, OAIItemPublicTokenExchangeResponse summary);
    void itemRemoveSignalFull(OAIHttpRequestWorker *worker, OAIItemRemoveResponse summary);
    void itemWebhookUpdateSignalFull(OAIHttpRequestWorker *worker, OAIItemWebhookUpdateResponse summary);
    void liabilitiesGetSignalFull(OAIHttpRequestWorker *worker, OAILiabilitiesGetResponse summary);
    void linkDeliveryCreateSignalFull(OAIHttpRequestWorker *worker, OAILinkDeliveryCreateResponse summary);
    void linkDeliveryGetSignalFull(OAIHttpRequestWorker *worker, OAILinkDeliveryGetResponse summary);
    void linkOauthCorrelationIdExchangeSignalFull(OAIHttpRequestWorker *worker, OAILinkOAuthCorrelationIdExchangeResponse summary);
    void linkTokenCreateSignalFull(OAIHttpRequestWorker *worker, OAILinkTokenCreateResponse summary);
    void linkTokenGetSignalFull(OAIHttpRequestWorker *worker, OAILinkTokenGetResponse summary);
    void partnerCustomerCreateSignalFull(OAIHttpRequestWorker *worker, OAIPartnerCustomerCreateResponse summary);
    void partnerCustomerEnableSignalFull(OAIHttpRequestWorker *worker, OAIPartnerCustomerEnableResponse summary);
    void partnerCustomerGetSignalFull(OAIHttpRequestWorker *worker, OAIPartnerCustomerGetResponse summary);
    void partnerCustomerOauthInstitutionsGetSignalFull(OAIHttpRequestWorker *worker, OAIPartnerCustomerOAuthInstitutionsGetResponse summary);
    void partnerCustomerRemoveSignalFull(OAIHttpRequestWorker *worker, OAIPartnerCustomerRemoveResponse summary);
    void paymentInitiationConsentCreateSignalFull(OAIHttpRequestWorker *worker, OAIPaymentInitiationConsentCreateResponse summary);
    void paymentInitiationConsentGetSignalFull(OAIHttpRequestWorker *worker, OAIPaymentInitiationConsentGetResponse summary);
    void paymentInitiationConsentPaymentExecuteSignalFull(OAIHttpRequestWorker *worker, OAIPaymentInitiationConsentPaymentExecuteResponse summary);
    void paymentInitiationConsentRevokeSignalFull(OAIHttpRequestWorker *worker, OAIPaymentInitiationConsentRevokeResponse summary);
    void paymentInitiationPaymentCreateSignalFull(OAIHttpRequestWorker *worker, OAIPaymentInitiationPaymentCreateResponse summary);
    void paymentInitiationPaymentGetSignalFull(OAIHttpRequestWorker *worker, OAIPaymentInitiationPaymentGetResponse summary);
    void paymentInitiationPaymentListSignalFull(OAIHttpRequestWorker *worker, OAIPaymentInitiationPaymentListResponse summary);
    void paymentInitiationPaymentReverseSignalFull(OAIHttpRequestWorker *worker, OAIPaymentInitiationPaymentReverseResponse summary);
    void paymentInitiationRecipientCreateSignalFull(OAIHttpRequestWorker *worker, OAIPaymentInitiationRecipientCreateResponse summary);
    void paymentInitiationRecipientGetSignalFull(OAIHttpRequestWorker *worker, OAIPaymentInitiationRecipientGetResponse summary);
    void paymentInitiationRecipientListSignalFull(OAIHttpRequestWorker *worker, OAIPaymentInitiationRecipientListResponse summary);
    void paymentProfileCreateSignalFull(OAIHttpRequestWorker *worker, OAIPaymentProfileCreateResponse summary);
    void paymentProfileGetSignalFull(OAIHttpRequestWorker *worker, OAIPaymentProfileGetResponse summary);
    void paymentProfileRemoveSignalFull(OAIHttpRequestWorker *worker, OAIPaymentProfileRemoveResponse summary);
    void processorApexProcessorTokenCreateSignalFull(OAIHttpRequestWorker *worker, OAIProcessorTokenCreateResponse summary);
    void processorAuthGetSignalFull(OAIHttpRequestWorker *worker, OAIProcessorAuthGetResponse summary);
    void processorBalanceGetSignalFull(OAIHttpRequestWorker *worker, OAIProcessorBalanceGetResponse summary);
    void processorBankTransferCreateSignalFull(OAIHttpRequestWorker *worker, OAIProcessorBankTransferCreateResponse summary);
    void processorIdentityGetSignalFull(OAIHttpRequestWorker *worker, OAIProcessorIdentityGetResponse summary);
    void processorSignalDecisionReportSignalFull(OAIHttpRequestWorker *worker, OAIProcessorSignalDecisionReportResponse summary);
    void processorSignalEvaluateSignalFull(OAIHttpRequestWorker *worker, OAIProcessorSignalEvaluateResponse summary);
    void processorSignalReturnReportSignalFull(OAIHttpRequestWorker *worker, OAIProcessorSignalReturnReportResponse summary);
    void processorStripeBankAccountTokenCreateSignalFull(OAIHttpRequestWorker *worker, OAIProcessorStripeBankAccountTokenCreateResponse summary);
    void processorTokenCreateSignalFull(OAIHttpRequestWorker *worker, OAIProcessorTokenCreateResponse summary);
    void sandboxBankTransferFireWebhookSignalFull(OAIHttpRequestWorker *worker, OAISandboxBankTransferFireWebhookResponse summary);
    void sandboxBankTransferSimulateSignalFull(OAIHttpRequestWorker *worker, OAISandboxBankTransferSimulateResponse summary);
    void sandboxIncomeFireWebhookSignalFull(OAIHttpRequestWorker *worker, OAISandboxIncomeFireWebhookResponse summary);
    void sandboxItemFireWebhookSignalFull(OAIHttpRequestWorker *worker, OAISandboxItemFireWebhookResponse summary);
    void sandboxItemResetLoginSignalFull(OAIHttpRequestWorker *worker, OAISandboxItemResetLoginResponse summary);
    void sandboxItemSetVerificationStatusSignalFull(OAIHttpRequestWorker *worker, OAISandboxItemSetVerificationStatusResponse summary);
    void sandboxOauthSelectAccountsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void sandboxPaymentProfileResetLoginSignalFull(OAIHttpRequestWorker *worker, OAISandboxPaymentProfileResetLoginResponse summary);
    void sandboxProcessorTokenCreateSignalFull(OAIHttpRequestWorker *worker, OAISandboxProcessorTokenCreateResponse summary);
    void sandboxPublicTokenCreateSignalFull(OAIHttpRequestWorker *worker, OAISandboxPublicTokenCreateResponse summary);
    void sandboxTransferFireWebhookSignalFull(OAIHttpRequestWorker *worker, OAISandboxTransferFireWebhookResponse summary);
    void sandboxTransferRepaymentSimulateSignalFull(OAIHttpRequestWorker *worker, OAISandboxTransferRepaymentSimulateResponse summary);
    void sandboxTransferSimulateSignalFull(OAIHttpRequestWorker *worker, OAISandboxTransferSimulateResponse summary);
    void sandboxTransferSweepSimulateSignalFull(OAIHttpRequestWorker *worker, OAISandboxTransferSweepSimulateResponse summary);
    void sandboxTransferTestClockAdvanceSignalFull(OAIHttpRequestWorker *worker, OAISandboxTransferTestClockAdvanceResponse summary);
    void sandboxTransferTestClockCreateSignalFull(OAIHttpRequestWorker *worker, OAISandboxTransferTestClockCreateResponse summary);
    void sandboxTransferTestClockGetSignalFull(OAIHttpRequestWorker *worker, OAISandboxTransferTestClockGetResponse summary);
    void sandboxTransferTestClockListSignalFull(OAIHttpRequestWorker *worker, OAISandboxTransferTestClockListResponse summary);
    void signalDecisionReportSignalFull(OAIHttpRequestWorker *worker, OAISignalDecisionReportResponse summary);
    void signalEvaluateSignalFull(OAIHttpRequestWorker *worker, OAISignalEvaluateResponse summary);
    void signalPrepareSignalFull(OAIHttpRequestWorker *worker, OAISignalPrepareResponse summary);
    void signalReturnReportSignalFull(OAIHttpRequestWorker *worker, OAISignalReturnReportResponse summary);
    void transactionsEnhanceSignalFull(OAIHttpRequestWorker *worker, OAITransactionsEnhanceGetResponse summary);
    void transactionsEnrichSignalFull(OAIHttpRequestWorker *worker, OAITransactionsEnrichGetResponse summary);
    void transactionsGetSignalFull(OAIHttpRequestWorker *worker, OAITransactionsGetResponse summary);
    void transactionsRecurringGetSignalFull(OAIHttpRequestWorker *worker, OAITransactionsRecurringGetResponse summary);
    void transactionsRefreshSignalFull(OAIHttpRequestWorker *worker, OAITransactionsRefreshResponse summary);
    void transactionsRulesCreateSignalFull(OAIHttpRequestWorker *worker, OAITransactionsRulesCreateResponse summary);
    void transactionsRulesListSignalFull(OAIHttpRequestWorker *worker, OAITransactionsRulesListResponse summary);
    void transactionsRulesRemoveSignalFull(OAIHttpRequestWorker *worker, OAITransactionsRulesRemoveResponse summary);
    void transactionsSyncSignalFull(OAIHttpRequestWorker *worker, OAITransactionsSyncResponse summary);
    void transferAuthorizationCreateSignalFull(OAIHttpRequestWorker *worker, OAITransferAuthorizationCreateResponse summary);
    void transferCancelSignalFull(OAIHttpRequestWorker *worker, OAITransferCancelResponse summary);
    void transferCapabilitiesGetSignalFull(OAIHttpRequestWorker *worker, OAITransferCapabilitiesGetResponse summary);
    void transferConfigurationGetSignalFull(OAIHttpRequestWorker *worker, OAITransferConfigurationGetResponse summary);
    void transferCreateSignalFull(OAIHttpRequestWorker *worker, OAITransferCreateResponse summary);
    void transferEventListSignalFull(OAIHttpRequestWorker *worker, OAITransferEventListResponse summary);
    void transferEventSyncSignalFull(OAIHttpRequestWorker *worker, OAITransferEventSyncResponse summary);
    void transferGetSignalFull(OAIHttpRequestWorker *worker, OAITransferGetResponse summary);
    void transferIntentCreateSignalFull(OAIHttpRequestWorker *worker, OAITransferIntentCreateResponse summary);
    void transferIntentGetSignalFull(OAIHttpRequestWorker *worker, OAITransferIntentGetResponse summary);
    void transferListSignalFull(OAIHttpRequestWorker *worker, OAITransferListResponse summary);
    void transferMetricsGetSignalFull(OAIHttpRequestWorker *worker, OAITransferMetricsGetResponse summary);
    void transferMigrateAccountSignalFull(OAIHttpRequestWorker *worker, OAITransferMigrateAccountResponse summary);
    void transferOriginatorCreateSignalFull(OAIHttpRequestWorker *worker, OAITransferOriginatorCreateResponse summary);
    void transferOriginatorGetSignalFull(OAIHttpRequestWorker *worker, OAITransferOriginatorGetResponse summary);
    void transferOriginatorListSignalFull(OAIHttpRequestWorker *worker, OAITransferOriginatorListResponse summary);
    void transferQuestionnaireCreateSignalFull(OAIHttpRequestWorker *worker, OAITransferQuestionnaireCreateResponse summary);
    void transferRecurringCancelSignalFull(OAIHttpRequestWorker *worker, OAITransferRecurringCancelResponse summary);
    void transferRecurringCreateSignalFull(OAIHttpRequestWorker *worker, OAITransferRecurringCreateResponse summary);
    void transferRecurringGetSignalFull(OAIHttpRequestWorker *worker, OAITransferRecurringGetResponse summary);
    void transferRecurringListSignalFull(OAIHttpRequestWorker *worker, OAITransferRecurringListResponse summary);
    void transferRefundCancelSignalFull(OAIHttpRequestWorker *worker, OAITransferRefundCancelResponse summary);
    void transferRefundCreateSignalFull(OAIHttpRequestWorker *worker, OAITransferRefundCreateResponse summary);
    void transferRefundGetSignalFull(OAIHttpRequestWorker *worker, OAITransferRefundGetResponse summary);
    void transferRepaymentListSignalFull(OAIHttpRequestWorker *worker, OAITransferRepaymentListResponse summary);
    void transferRepaymentReturnListSignalFull(OAIHttpRequestWorker *worker, OAITransferRepaymentReturnListResponse summary);
    void transferSweepGetSignalFull(OAIHttpRequestWorker *worker, OAITransferSweepGetResponse summary);
    void transferSweepListSignalFull(OAIHttpRequestWorker *worker, OAITransferSweepListResponse summary);
    void userCreateSignalFull(OAIHttpRequestWorker *worker, OAIUserCreateResponse summary);
    void walletCreateSignalFull(OAIHttpRequestWorker *worker, OAIWalletCreateResponse summary);
    void walletGetSignalFull(OAIHttpRequestWorker *worker, OAIWalletGetResponse summary);
    void walletListSignalFull(OAIHttpRequestWorker *worker, OAIWalletListResponse summary);
    void walletTransactionExecuteSignalFull(OAIHttpRequestWorker *worker, OAIWalletTransactionExecuteResponse summary);
    void walletTransactionGetSignalFull(OAIHttpRequestWorker *worker, OAIWalletTransactionGetResponse summary);
    void walletTransactionListSignalFull(OAIHttpRequestWorker *worker, OAIWalletTransactionListResponse summary);
    void watchlistScreeningEntityCreateSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningEntityCreateResponse summary);
    void watchlistScreeningEntityGetSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningEntityGetResponse summary);
    void watchlistScreeningEntityHistoryListSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningEntityHistoryListResponse summary);
    void watchlistScreeningEntityHitListSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningEntityHitListResponse summary);
    void watchlistScreeningEntityListSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningEntityListResponse summary);
    void watchlistScreeningEntityProgramGetSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningEntityProgramGetResponse summary);
    void watchlistScreeningEntityProgramListSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningEntityProgramListResponse summary);
    void watchlistScreeningEntityReviewCreateSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningEntityReviewCreateResponse summary);
    void watchlistScreeningEntityReviewListSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningEntityReviewListResponse summary);
    void watchlistScreeningEntityUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningEntityUpdateResponse summary);
    void watchlistScreeningIndividualCreateSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningIndividualCreateResponse summary);
    void watchlistScreeningIndividualGetSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningIndividualGetResponse summary);
    void watchlistScreeningIndividualHistoryListSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningIndividualHistoryListResponse summary);
    void watchlistScreeningIndividualHitListSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningIndividualHitListResponse summary);
    void watchlistScreeningIndividualListSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningIndividualListResponse summary);
    void watchlistScreeningIndividualProgramGetSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningIndividualProgramGetResponse summary);
    void watchlistScreeningIndividualProgramListSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningIndividualProgramListResponse summary);
    void watchlistScreeningIndividualReviewCreateSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningIndividualReviewCreateResponse summary);
    void watchlistScreeningIndividualReviewListSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningIndividualReviewListResponse summary);
    void watchlistScreeningIndividualUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWatchlistScreeningIndividualUpdateResponse summary);
    void webhookVerificationKeyGetSignalFull(OAIHttpRequestWorker *worker, OAIWebhookVerificationKeyGetResponse summary);

    Q_DECL_DEPRECATED_X("Use accountsBalanceGetSignalError() instead")
    void accountsBalanceGetSignalE(OAIAccountsGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsBalanceGetSignalError(OAIAccountsGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetSignalError() instead")
    void accountsGetSignalE(OAIAccountsGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetSignalError(OAIAccountsGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGetSignalError() instead")
    void applicationGetSignalE(OAIApplicationGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGetSignalError(OAIApplicationGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportAuditCopyCreateSignalError() instead")
    void assetReportAuditCopyCreateSignalE(OAIAssetReportAuditCopyCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportAuditCopyCreateSignalError(OAIAssetReportAuditCopyCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportAuditCopyGetSignalError() instead")
    void assetReportAuditCopyGetSignalE(OAIAssetReportGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportAuditCopyGetSignalError(OAIAssetReportGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportAuditCopyRemoveSignalError() instead")
    void assetReportAuditCopyRemoveSignalE(OAIAssetReportAuditCopyRemoveResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportAuditCopyRemoveSignalError(OAIAssetReportAuditCopyRemoveResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportCreateSignalError() instead")
    void assetReportCreateSignalE(OAIAssetReportCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportCreateSignalError(OAIAssetReportCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportFilterSignalError() instead")
    void assetReportFilterSignalE(OAIAssetReportFilterResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportFilterSignalError(OAIAssetReportFilterResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportGetSignalError() instead")
    void assetReportGetSignalE(OAIAssetReportGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportGetSignalError(OAIAssetReportGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportPdfGetSignalError() instead")
    void assetReportPdfGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportPdfGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportRefreshSignalError() instead")
    void assetReportRefreshSignalE(OAIAssetReportRefreshResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportRefreshSignalError(OAIAssetReportRefreshResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportRemoveSignalError() instead")
    void assetReportRemoveSignalE(OAIAssetReportRemoveResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportRemoveSignalError(OAIAssetReportRemoveResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authGetSignalError() instead")
    void authGetSignalE(OAIAuthGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authGetSignalError(OAIAuthGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferBalanceGetSignalError() instead")
    void bankTransferBalanceGetSignalE(OAIBankTransferBalanceGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferBalanceGetSignalError(OAIBankTransferBalanceGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferCancelSignalError() instead")
    void bankTransferCancelSignalE(OAIBankTransferCancelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferCancelSignalError(OAIBankTransferCancelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferCreateSignalError() instead")
    void bankTransferCreateSignalE(OAIBankTransferCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferCreateSignalError(OAIBankTransferCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferEventListSignalError() instead")
    void bankTransferEventListSignalE(OAIBankTransferEventListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferEventListSignalError(OAIBankTransferEventListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferEventSyncSignalError() instead")
    void bankTransferEventSyncSignalE(OAIBankTransferEventSyncResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferEventSyncSignalError(OAIBankTransferEventSyncResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferGetSignalError() instead")
    void bankTransferGetSignalE(OAIBankTransferGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferGetSignalError(OAIBankTransferGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferListSignalError() instead")
    void bankTransferListSignalE(OAIBankTransferListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferListSignalError(OAIBankTransferListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferMigrateAccountSignalError() instead")
    void bankTransferMigrateAccountSignalE(OAIBankTransferMigrateAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferMigrateAccountSignalError(OAIBankTransferMigrateAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferSweepGetSignalError() instead")
    void bankTransferSweepGetSignalE(OAIBankTransferSweepGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferSweepGetSignalError(OAIBankTransferSweepGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferSweepListSignalError() instead")
    void bankTransferSweepListSignalE(OAIBankTransferSweepListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferSweepListSignalError(OAIBankTransferSweepListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesGetSignalError() instead")
    void categoriesGetSignalE(OAICategoriesGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesGetSignalError(OAICategoriesGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPaymentTokenSignalError() instead")
    void createPaymentTokenSignalE(OAIPaymentInitiationPaymentTokenCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentTokenSignalError(OAIPaymentInitiationPaymentTokenCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditAssetReportFreddieMacGetSignalError() instead")
    void creditAssetReportFreddieMacGetSignalE(OAIAssetReportFreddieGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditAssetReportFreddieMacGetSignalError(OAIAssetReportFreddieGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditAuditCopyTokenCreateSignalError() instead")
    void creditAuditCopyTokenCreateSignalE(OAICreditAuditCopyTokenCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditAuditCopyTokenCreateSignalError(OAICreditAuditCopyTokenCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditAuditCopyTokenUpdateSignalError() instead")
    void creditAuditCopyTokenUpdateSignalE(OAICreditAuditCopyTokenUpdateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditAuditCopyTokenUpdateSignalError(OAICreditAuditCopyTokenUpdateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditBankEmploymentGetSignalError() instead")
    void creditBankEmploymentGetSignalE(OAICreditBankEmploymentGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditBankEmploymentGetSignalError(OAICreditBankEmploymentGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditBankIncomeGetSignalError() instead")
    void creditBankIncomeGetSignalE(OAICreditBankIncomeGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditBankIncomeGetSignalError(OAICreditBankIncomeGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditBankIncomePdfGetSignalError() instead")
    void creditBankIncomePdfGetSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditBankIncomePdfGetSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditBankIncomeRefreshSignalError() instead")
    void creditBankIncomeRefreshSignalE(OAICreditBankIncomeRefreshResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditBankIncomeRefreshSignalError(OAICreditBankIncomeRefreshResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditEmploymentGetSignalError() instead")
    void creditEmploymentGetSignalE(OAICreditEmploymentGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditEmploymentGetSignalError(OAICreditEmploymentGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditFreddieMacReportsGetSignalError() instead")
    void creditFreddieMacReportsGetSignalE(OAICreditFreddieMacReportsGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditFreddieMacReportsGetSignalError(OAICreditFreddieMacReportsGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditPayrollIncomeGetSignalError() instead")
    void creditPayrollIncomeGetSignalE(OAICreditPayrollIncomeGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditPayrollIncomeGetSignalError(OAICreditPayrollIncomeGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditPayrollIncomePrecheckSignalError() instead")
    void creditPayrollIncomePrecheckSignalE(OAICreditPayrollIncomePrecheckResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditPayrollIncomePrecheckSignalError(OAICreditPayrollIncomePrecheckResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditPayrollIncomeRefreshSignalError() instead")
    void creditPayrollIncomeRefreshSignalE(OAICreditPayrollIncomeRefreshResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditPayrollIncomeRefreshSignalError(OAICreditPayrollIncomeRefreshResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditRelayCreateSignalError() instead")
    void creditRelayCreateSignalE(OAICreditRelayCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditRelayCreateSignalError(OAICreditRelayCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditRelayGetSignalError() instead")
    void creditRelayGetSignalE(OAIAssetReportGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditRelayGetSignalError(OAIAssetReportGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditRelayRefreshSignalError() instead")
    void creditRelayRefreshSignalE(OAICreditRelayRefreshResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditRelayRefreshSignalError(OAICreditRelayRefreshResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditRelayRemoveSignalError() instead")
    void creditRelayRemoveSignalE(OAICreditRelayRemoveResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditRelayRemoveSignalError(OAICreditRelayRemoveResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditReportAuditCopyRemoveSignalError() instead")
    void creditReportAuditCopyRemoveSignalE(OAICreditAuditCopyTokenRemoveResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditReportAuditCopyRemoveSignalError(OAICreditAuditCopyTokenRemoveResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditSessionsGetSignalError() instead")
    void creditSessionsGetSignalE(OAICreditSessionsGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditSessionsGetSignalError(OAICreditSessionsGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardUserGetSignalError() instead")
    void dashboardUserGetSignalE(OAIDashboardUserGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardUserGetSignalError(OAIDashboardUserGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardUserListSignalError() instead")
    void dashboardUserListSignalE(OAIDashboardUserListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardUserListSignalError(OAIDashboardUserListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use depositSwitchAltCreateSignalError() instead")
    void depositSwitchAltCreateSignalE(OAIDepositSwitchAltCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void depositSwitchAltCreateSignalError(OAIDepositSwitchAltCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use depositSwitchCreateSignalError() instead")
    void depositSwitchCreateSignalE(OAIDepositSwitchCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void depositSwitchCreateSignalError(OAIDepositSwitchCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use depositSwitchGetSignalError() instead")
    void depositSwitchGetSignalE(OAIDepositSwitchGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void depositSwitchGetSignalError(OAIDepositSwitchGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use depositSwitchTokenCreateSignalError() instead")
    void depositSwitchTokenCreateSignalE(OAIDepositSwitchTokenCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void depositSwitchTokenCreateSignalError(OAIDepositSwitchTokenCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employersSearchSignalError() instead")
    void employersSearchSignalE(OAIEmployersSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void employersSearchSignalError(OAIEmployersSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employmentVerificationGetSignalError() instead")
    void employmentVerificationGetSignalE(OAIEmploymentVerificationGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void employmentVerificationGetSignalError(OAIEmploymentVerificationGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fdxNotificationsSignalError() instead")
    void fdxNotificationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void fdxNotificationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityGetSignalError() instead")
    void identityGetSignalE(OAIIdentityGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identityGetSignalError(OAIIdentityGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityMatchSignalError() instead")
    void identityMatchSignalE(OAIIdentityMatchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identityMatchSignalError(OAIIdentityMatchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityVerificationCreateSignalError() instead")
    void identityVerificationCreateSignalE(OAIIdentityVerificationCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identityVerificationCreateSignalError(OAIIdentityVerificationCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityVerificationGetSignalError() instead")
    void identityVerificationGetSignalE(OAIIdentityVerificationGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identityVerificationGetSignalError(OAIIdentityVerificationGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityVerificationListSignalError() instead")
    void identityVerificationListSignalE(OAIIdentityVerificationListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identityVerificationListSignalError(OAIIdentityVerificationListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityVerificationRetrySignalError() instead")
    void identityVerificationRetrySignalE(OAIIdentityVerificationRetryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identityVerificationRetrySignalError(OAIIdentityVerificationRetryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomeVerificationCreateSignalError() instead")
    void incomeVerificationCreateSignalE(OAIIncomeVerificationCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void incomeVerificationCreateSignalError(OAIIncomeVerificationCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomeVerificationDocumentsDownloadSignalError() instead")
    void incomeVerificationDocumentsDownloadSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void incomeVerificationDocumentsDownloadSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomeVerificationPaystubsGetSignalError() instead")
    void incomeVerificationPaystubsGetSignalE(OAIIncomeVerificationPaystubsGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void incomeVerificationPaystubsGetSignalError(OAIIncomeVerificationPaystubsGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomeVerificationPrecheckSignalError() instead")
    void incomeVerificationPrecheckSignalE(OAIIncomeVerificationPrecheckResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void incomeVerificationPrecheckSignalError(OAIIncomeVerificationPrecheckResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomeVerificationTaxformsGetSignalError() instead")
    void incomeVerificationTaxformsGetSignalE(OAIIncomeVerificationTaxformsGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void incomeVerificationTaxformsGetSignalError(OAIIncomeVerificationTaxformsGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use institutionsGetSignalError() instead")
    void institutionsGetSignalE(OAIInstitutionsGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void institutionsGetSignalError(OAIInstitutionsGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use institutionsGetByIdSignalError() instead")
    void institutionsGetByIdSignalE(OAIInstitutionsGetByIdResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void institutionsGetByIdSignalError(OAIInstitutionsGetByIdResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use institutionsSearchSignalError() instead")
    void institutionsSearchSignalE(OAIInstitutionsSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void institutionsSearchSignalError(OAIInstitutionsSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use investmentsHoldingsGetSignalError() instead")
    void investmentsHoldingsGetSignalE(OAIInvestmentsHoldingsGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void investmentsHoldingsGetSignalError(OAIInvestmentsHoldingsGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use investmentsTransactionsGetSignalError() instead")
    void investmentsTransactionsGetSignalE(OAIInvestmentsTransactionsGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void investmentsTransactionsGetSignalError(OAIInvestmentsTransactionsGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemAccessTokenInvalidateSignalError() instead")
    void itemAccessTokenInvalidateSignalE(OAIItemAccessTokenInvalidateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void itemAccessTokenInvalidateSignalError(OAIItemAccessTokenInvalidateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemActivityListSignalError() instead")
    void itemActivityListSignalE(OAIItemActivityListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void itemActivityListSignalError(OAIItemActivityListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemApplicationListSignalError() instead")
    void itemApplicationListSignalE(OAIItemApplicationListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void itemApplicationListSignalError(OAIItemApplicationListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemApplicationScopesUpdateSignalError() instead")
    void itemApplicationScopesUpdateSignalE(OAIItemApplicationScopesUpdateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void itemApplicationScopesUpdateSignalError(OAIItemApplicationScopesUpdateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemCreatePublicTokenSignalError() instead")
    void itemCreatePublicTokenSignalE(OAIItemPublicTokenCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void itemCreatePublicTokenSignalError(OAIItemPublicTokenCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemGetSignalError() instead")
    void itemGetSignalE(OAIItemGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void itemGetSignalError(OAIItemGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemImportSignalError() instead")
    void itemImportSignalE(OAIItemImportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void itemImportSignalError(OAIItemImportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemPublicTokenExchangeSignalError() instead")
    void itemPublicTokenExchangeSignalE(OAIItemPublicTokenExchangeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void itemPublicTokenExchangeSignalError(OAIItemPublicTokenExchangeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemRemoveSignalError() instead")
    void itemRemoveSignalE(OAIItemRemoveResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void itemRemoveSignalError(OAIItemRemoveResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemWebhookUpdateSignalError() instead")
    void itemWebhookUpdateSignalE(OAIItemWebhookUpdateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void itemWebhookUpdateSignalError(OAIItemWebhookUpdateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liabilitiesGetSignalError() instead")
    void liabilitiesGetSignalE(OAILiabilitiesGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void liabilitiesGetSignalError(OAILiabilitiesGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkDeliveryCreateSignalError() instead")
    void linkDeliveryCreateSignalE(OAILinkDeliveryCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void linkDeliveryCreateSignalError(OAILinkDeliveryCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkDeliveryGetSignalError() instead")
    void linkDeliveryGetSignalE(OAILinkDeliveryGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void linkDeliveryGetSignalError(OAILinkDeliveryGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkOauthCorrelationIdExchangeSignalError() instead")
    void linkOauthCorrelationIdExchangeSignalE(OAILinkOAuthCorrelationIdExchangeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void linkOauthCorrelationIdExchangeSignalError(OAILinkOAuthCorrelationIdExchangeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkTokenCreateSignalError() instead")
    void linkTokenCreateSignalE(OAILinkTokenCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void linkTokenCreateSignalError(OAILinkTokenCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkTokenGetSignalError() instead")
    void linkTokenGetSignalE(OAILinkTokenGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void linkTokenGetSignalError(OAILinkTokenGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnerCustomerCreateSignalError() instead")
    void partnerCustomerCreateSignalE(OAIPartnerCustomerCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerCustomerCreateSignalError(OAIPartnerCustomerCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnerCustomerEnableSignalError() instead")
    void partnerCustomerEnableSignalE(OAIPartnerCustomerEnableResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerCustomerEnableSignalError(OAIPartnerCustomerEnableResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnerCustomerGetSignalError() instead")
    void partnerCustomerGetSignalE(OAIPartnerCustomerGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerCustomerGetSignalError(OAIPartnerCustomerGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnerCustomerOauthInstitutionsGetSignalError() instead")
    void partnerCustomerOauthInstitutionsGetSignalE(OAIPartnerCustomerOAuthInstitutionsGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerCustomerOauthInstitutionsGetSignalError(OAIPartnerCustomerOAuthInstitutionsGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnerCustomerRemoveSignalError() instead")
    void partnerCustomerRemoveSignalE(OAIPartnerCustomerRemoveResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerCustomerRemoveSignalError(OAIPartnerCustomerRemoveResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationConsentCreateSignalError() instead")
    void paymentInitiationConsentCreateSignalE(OAIPaymentInitiationConsentCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationConsentCreateSignalError(OAIPaymentInitiationConsentCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationConsentGetSignalError() instead")
    void paymentInitiationConsentGetSignalE(OAIPaymentInitiationConsentGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationConsentGetSignalError(OAIPaymentInitiationConsentGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationConsentPaymentExecuteSignalError() instead")
    void paymentInitiationConsentPaymentExecuteSignalE(OAIPaymentInitiationConsentPaymentExecuteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationConsentPaymentExecuteSignalError(OAIPaymentInitiationConsentPaymentExecuteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationConsentRevokeSignalError() instead")
    void paymentInitiationConsentRevokeSignalE(OAIPaymentInitiationConsentRevokeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationConsentRevokeSignalError(OAIPaymentInitiationConsentRevokeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationPaymentCreateSignalError() instead")
    void paymentInitiationPaymentCreateSignalE(OAIPaymentInitiationPaymentCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationPaymentCreateSignalError(OAIPaymentInitiationPaymentCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationPaymentGetSignalError() instead")
    void paymentInitiationPaymentGetSignalE(OAIPaymentInitiationPaymentGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationPaymentGetSignalError(OAIPaymentInitiationPaymentGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationPaymentListSignalError() instead")
    void paymentInitiationPaymentListSignalE(OAIPaymentInitiationPaymentListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationPaymentListSignalError(OAIPaymentInitiationPaymentListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationPaymentReverseSignalError() instead")
    void paymentInitiationPaymentReverseSignalE(OAIPaymentInitiationPaymentReverseResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationPaymentReverseSignalError(OAIPaymentInitiationPaymentReverseResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationRecipientCreateSignalError() instead")
    void paymentInitiationRecipientCreateSignalE(OAIPaymentInitiationRecipientCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationRecipientCreateSignalError(OAIPaymentInitiationRecipientCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationRecipientGetSignalError() instead")
    void paymentInitiationRecipientGetSignalE(OAIPaymentInitiationRecipientGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationRecipientGetSignalError(OAIPaymentInitiationRecipientGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationRecipientListSignalError() instead")
    void paymentInitiationRecipientListSignalE(OAIPaymentInitiationRecipientListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationRecipientListSignalError(OAIPaymentInitiationRecipientListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentProfileCreateSignalError() instead")
    void paymentProfileCreateSignalE(OAIPaymentProfileCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentProfileCreateSignalError(OAIPaymentProfileCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentProfileGetSignalError() instead")
    void paymentProfileGetSignalE(OAIPaymentProfileGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentProfileGetSignalError(OAIPaymentProfileGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentProfileRemoveSignalError() instead")
    void paymentProfileRemoveSignalE(OAIPaymentProfileRemoveResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentProfileRemoveSignalError(OAIPaymentProfileRemoveResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorApexProcessorTokenCreateSignalError() instead")
    void processorApexProcessorTokenCreateSignalE(OAIProcessorTokenCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void processorApexProcessorTokenCreateSignalError(OAIProcessorTokenCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorAuthGetSignalError() instead")
    void processorAuthGetSignalE(OAIProcessorAuthGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void processorAuthGetSignalError(OAIProcessorAuthGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorBalanceGetSignalError() instead")
    void processorBalanceGetSignalE(OAIProcessorBalanceGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void processorBalanceGetSignalError(OAIProcessorBalanceGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorBankTransferCreateSignalError() instead")
    void processorBankTransferCreateSignalE(OAIProcessorBankTransferCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void processorBankTransferCreateSignalError(OAIProcessorBankTransferCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorIdentityGetSignalError() instead")
    void processorIdentityGetSignalE(OAIProcessorIdentityGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void processorIdentityGetSignalError(OAIProcessorIdentityGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorSignalDecisionReportSignalError() instead")
    void processorSignalDecisionReportSignalE(OAIProcessorSignalDecisionReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void processorSignalDecisionReportSignalError(OAIProcessorSignalDecisionReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorSignalEvaluateSignalError() instead")
    void processorSignalEvaluateSignalE(OAIProcessorSignalEvaluateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void processorSignalEvaluateSignalError(OAIProcessorSignalEvaluateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorSignalReturnReportSignalError() instead")
    void processorSignalReturnReportSignalE(OAIProcessorSignalReturnReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void processorSignalReturnReportSignalError(OAIProcessorSignalReturnReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorStripeBankAccountTokenCreateSignalError() instead")
    void processorStripeBankAccountTokenCreateSignalE(OAIProcessorStripeBankAccountTokenCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void processorStripeBankAccountTokenCreateSignalError(OAIProcessorStripeBankAccountTokenCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorTokenCreateSignalError() instead")
    void processorTokenCreateSignalE(OAIProcessorTokenCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void processorTokenCreateSignalError(OAIProcessorTokenCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxBankTransferFireWebhookSignalError() instead")
    void sandboxBankTransferFireWebhookSignalE(OAISandboxBankTransferFireWebhookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxBankTransferFireWebhookSignalError(OAISandboxBankTransferFireWebhookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxBankTransferSimulateSignalError() instead")
    void sandboxBankTransferSimulateSignalE(OAISandboxBankTransferSimulateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxBankTransferSimulateSignalError(OAISandboxBankTransferSimulateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxIncomeFireWebhookSignalError() instead")
    void sandboxIncomeFireWebhookSignalE(OAISandboxIncomeFireWebhookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxIncomeFireWebhookSignalError(OAISandboxIncomeFireWebhookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxItemFireWebhookSignalError() instead")
    void sandboxItemFireWebhookSignalE(OAISandboxItemFireWebhookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxItemFireWebhookSignalError(OAISandboxItemFireWebhookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxItemResetLoginSignalError() instead")
    void sandboxItemResetLoginSignalE(OAISandboxItemResetLoginResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxItemResetLoginSignalError(OAISandboxItemResetLoginResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxItemSetVerificationStatusSignalError() instead")
    void sandboxItemSetVerificationStatusSignalE(OAISandboxItemSetVerificationStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxItemSetVerificationStatusSignalError(OAISandboxItemSetVerificationStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxOauthSelectAccountsSignalError() instead")
    void sandboxOauthSelectAccountsSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxOauthSelectAccountsSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxPaymentProfileResetLoginSignalError() instead")
    void sandboxPaymentProfileResetLoginSignalE(OAISandboxPaymentProfileResetLoginResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxPaymentProfileResetLoginSignalError(OAISandboxPaymentProfileResetLoginResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxProcessorTokenCreateSignalError() instead")
    void sandboxProcessorTokenCreateSignalE(OAISandboxProcessorTokenCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxProcessorTokenCreateSignalError(OAISandboxProcessorTokenCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxPublicTokenCreateSignalError() instead")
    void sandboxPublicTokenCreateSignalE(OAISandboxPublicTokenCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxPublicTokenCreateSignalError(OAISandboxPublicTokenCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxTransferFireWebhookSignalError() instead")
    void sandboxTransferFireWebhookSignalE(OAISandboxTransferFireWebhookResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxTransferFireWebhookSignalError(OAISandboxTransferFireWebhookResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxTransferRepaymentSimulateSignalError() instead")
    void sandboxTransferRepaymentSimulateSignalE(OAISandboxTransferRepaymentSimulateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxTransferRepaymentSimulateSignalError(OAISandboxTransferRepaymentSimulateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxTransferSimulateSignalError() instead")
    void sandboxTransferSimulateSignalE(OAISandboxTransferSimulateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxTransferSimulateSignalError(OAISandboxTransferSimulateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxTransferSweepSimulateSignalError() instead")
    void sandboxTransferSweepSimulateSignalE(OAISandboxTransferSweepSimulateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxTransferSweepSimulateSignalError(OAISandboxTransferSweepSimulateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxTransferTestClockAdvanceSignalError() instead")
    void sandboxTransferTestClockAdvanceSignalE(OAISandboxTransferTestClockAdvanceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxTransferTestClockAdvanceSignalError(OAISandboxTransferTestClockAdvanceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxTransferTestClockCreateSignalError() instead")
    void sandboxTransferTestClockCreateSignalE(OAISandboxTransferTestClockCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxTransferTestClockCreateSignalError(OAISandboxTransferTestClockCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxTransferTestClockGetSignalError() instead")
    void sandboxTransferTestClockGetSignalE(OAISandboxTransferTestClockGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxTransferTestClockGetSignalError(OAISandboxTransferTestClockGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxTransferTestClockListSignalError() instead")
    void sandboxTransferTestClockListSignalE(OAISandboxTransferTestClockListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxTransferTestClockListSignalError(OAISandboxTransferTestClockListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalDecisionReportSignalError() instead")
    void signalDecisionReportSignalE(OAISignalDecisionReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signalDecisionReportSignalError(OAISignalDecisionReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalEvaluateSignalError() instead")
    void signalEvaluateSignalE(OAISignalEvaluateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signalEvaluateSignalError(OAISignalEvaluateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalPrepareSignalError() instead")
    void signalPrepareSignalE(OAISignalPrepareResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signalPrepareSignalError(OAISignalPrepareResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalReturnReportSignalError() instead")
    void signalReturnReportSignalE(OAISignalReturnReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signalReturnReportSignalError(OAISignalReturnReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsEnhanceSignalError() instead")
    void transactionsEnhanceSignalE(OAITransactionsEnhanceGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsEnhanceSignalError(OAITransactionsEnhanceGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsEnrichSignalError() instead")
    void transactionsEnrichSignalE(OAITransactionsEnrichGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsEnrichSignalError(OAITransactionsEnrichGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsGetSignalError() instead")
    void transactionsGetSignalE(OAITransactionsGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsGetSignalError(OAITransactionsGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsRecurringGetSignalError() instead")
    void transactionsRecurringGetSignalE(OAITransactionsRecurringGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsRecurringGetSignalError(OAITransactionsRecurringGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsRefreshSignalError() instead")
    void transactionsRefreshSignalE(OAITransactionsRefreshResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsRefreshSignalError(OAITransactionsRefreshResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsRulesCreateSignalError() instead")
    void transactionsRulesCreateSignalE(OAITransactionsRulesCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsRulesCreateSignalError(OAITransactionsRulesCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsRulesListSignalError() instead")
    void transactionsRulesListSignalE(OAITransactionsRulesListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsRulesListSignalError(OAITransactionsRulesListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsRulesRemoveSignalError() instead")
    void transactionsRulesRemoveSignalE(OAITransactionsRulesRemoveResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsRulesRemoveSignalError(OAITransactionsRulesRemoveResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsSyncSignalError() instead")
    void transactionsSyncSignalE(OAITransactionsSyncResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsSyncSignalError(OAITransactionsSyncResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferAuthorizationCreateSignalError() instead")
    void transferAuthorizationCreateSignalE(OAITransferAuthorizationCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferAuthorizationCreateSignalError(OAITransferAuthorizationCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferCancelSignalError() instead")
    void transferCancelSignalE(OAITransferCancelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferCancelSignalError(OAITransferCancelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferCapabilitiesGetSignalError() instead")
    void transferCapabilitiesGetSignalE(OAITransferCapabilitiesGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferCapabilitiesGetSignalError(OAITransferCapabilitiesGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferConfigurationGetSignalError() instead")
    void transferConfigurationGetSignalE(OAITransferConfigurationGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferConfigurationGetSignalError(OAITransferConfigurationGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferCreateSignalError() instead")
    void transferCreateSignalE(OAITransferCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferCreateSignalError(OAITransferCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferEventListSignalError() instead")
    void transferEventListSignalE(OAITransferEventListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferEventListSignalError(OAITransferEventListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferEventSyncSignalError() instead")
    void transferEventSyncSignalE(OAITransferEventSyncResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferEventSyncSignalError(OAITransferEventSyncResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferGetSignalError() instead")
    void transferGetSignalE(OAITransferGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferGetSignalError(OAITransferGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferIntentCreateSignalError() instead")
    void transferIntentCreateSignalE(OAITransferIntentCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferIntentCreateSignalError(OAITransferIntentCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferIntentGetSignalError() instead")
    void transferIntentGetSignalE(OAITransferIntentGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferIntentGetSignalError(OAITransferIntentGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferListSignalError() instead")
    void transferListSignalE(OAITransferListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferListSignalError(OAITransferListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferMetricsGetSignalError() instead")
    void transferMetricsGetSignalE(OAITransferMetricsGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferMetricsGetSignalError(OAITransferMetricsGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferMigrateAccountSignalError() instead")
    void transferMigrateAccountSignalE(OAITransferMigrateAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferMigrateAccountSignalError(OAITransferMigrateAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferOriginatorCreateSignalError() instead")
    void transferOriginatorCreateSignalE(OAITransferOriginatorCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferOriginatorCreateSignalError(OAITransferOriginatorCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferOriginatorGetSignalError() instead")
    void transferOriginatorGetSignalE(OAITransferOriginatorGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferOriginatorGetSignalError(OAITransferOriginatorGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferOriginatorListSignalError() instead")
    void transferOriginatorListSignalE(OAITransferOriginatorListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferOriginatorListSignalError(OAITransferOriginatorListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferQuestionnaireCreateSignalError() instead")
    void transferQuestionnaireCreateSignalE(OAITransferQuestionnaireCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferQuestionnaireCreateSignalError(OAITransferQuestionnaireCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRecurringCancelSignalError() instead")
    void transferRecurringCancelSignalE(OAITransferRecurringCancelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRecurringCancelSignalError(OAITransferRecurringCancelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRecurringCreateSignalError() instead")
    void transferRecurringCreateSignalE(OAITransferRecurringCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRecurringCreateSignalError(OAITransferRecurringCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRecurringGetSignalError() instead")
    void transferRecurringGetSignalE(OAITransferRecurringGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRecurringGetSignalError(OAITransferRecurringGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRecurringListSignalError() instead")
    void transferRecurringListSignalE(OAITransferRecurringListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRecurringListSignalError(OAITransferRecurringListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRefundCancelSignalError() instead")
    void transferRefundCancelSignalE(OAITransferRefundCancelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRefundCancelSignalError(OAITransferRefundCancelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRefundCreateSignalError() instead")
    void transferRefundCreateSignalE(OAITransferRefundCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRefundCreateSignalError(OAITransferRefundCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRefundGetSignalError() instead")
    void transferRefundGetSignalE(OAITransferRefundGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRefundGetSignalError(OAITransferRefundGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRepaymentListSignalError() instead")
    void transferRepaymentListSignalE(OAITransferRepaymentListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRepaymentListSignalError(OAITransferRepaymentListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRepaymentReturnListSignalError() instead")
    void transferRepaymentReturnListSignalE(OAITransferRepaymentReturnListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRepaymentReturnListSignalError(OAITransferRepaymentReturnListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferSweepGetSignalError() instead")
    void transferSweepGetSignalE(OAITransferSweepGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferSweepGetSignalError(OAITransferSweepGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferSweepListSignalError() instead")
    void transferSweepListSignalE(OAITransferSweepListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferSweepListSignalError(OAITransferSweepListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCreateSignalError() instead")
    void userCreateSignalE(OAIUserCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userCreateSignalError(OAIUserCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletCreateSignalError() instead")
    void walletCreateSignalE(OAIWalletCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletCreateSignalError(OAIWalletCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletGetSignalError() instead")
    void walletGetSignalE(OAIWalletGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletGetSignalError(OAIWalletGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletListSignalError() instead")
    void walletListSignalE(OAIWalletListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletListSignalError(OAIWalletListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletTransactionExecuteSignalError() instead")
    void walletTransactionExecuteSignalE(OAIWalletTransactionExecuteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletTransactionExecuteSignalError(OAIWalletTransactionExecuteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletTransactionGetSignalError() instead")
    void walletTransactionGetSignalE(OAIWalletTransactionGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletTransactionGetSignalError(OAIWalletTransactionGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletTransactionListSignalError() instead")
    void walletTransactionListSignalE(OAIWalletTransactionListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void walletTransactionListSignalError(OAIWalletTransactionListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityCreateSignalError() instead")
    void watchlistScreeningEntityCreateSignalE(OAIWatchlistScreeningEntityCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityCreateSignalError(OAIWatchlistScreeningEntityCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityGetSignalError() instead")
    void watchlistScreeningEntityGetSignalE(OAIWatchlistScreeningEntityGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityGetSignalError(OAIWatchlistScreeningEntityGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityHistoryListSignalError() instead")
    void watchlistScreeningEntityHistoryListSignalE(OAIWatchlistScreeningEntityHistoryListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityHistoryListSignalError(OAIWatchlistScreeningEntityHistoryListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityHitListSignalError() instead")
    void watchlistScreeningEntityHitListSignalE(OAIWatchlistScreeningEntityHitListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityHitListSignalError(OAIWatchlistScreeningEntityHitListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityListSignalError() instead")
    void watchlistScreeningEntityListSignalE(OAIWatchlistScreeningEntityListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityListSignalError(OAIWatchlistScreeningEntityListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityProgramGetSignalError() instead")
    void watchlistScreeningEntityProgramGetSignalE(OAIWatchlistScreeningEntityProgramGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityProgramGetSignalError(OAIWatchlistScreeningEntityProgramGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityProgramListSignalError() instead")
    void watchlistScreeningEntityProgramListSignalE(OAIWatchlistScreeningEntityProgramListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityProgramListSignalError(OAIWatchlistScreeningEntityProgramListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityReviewCreateSignalError() instead")
    void watchlistScreeningEntityReviewCreateSignalE(OAIWatchlistScreeningEntityReviewCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityReviewCreateSignalError(OAIWatchlistScreeningEntityReviewCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityReviewListSignalError() instead")
    void watchlistScreeningEntityReviewListSignalE(OAIWatchlistScreeningEntityReviewListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityReviewListSignalError(OAIWatchlistScreeningEntityReviewListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityUpdateSignalError() instead")
    void watchlistScreeningEntityUpdateSignalE(OAIWatchlistScreeningEntityUpdateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityUpdateSignalError(OAIWatchlistScreeningEntityUpdateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualCreateSignalError() instead")
    void watchlistScreeningIndividualCreateSignalE(OAIWatchlistScreeningIndividualCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualCreateSignalError(OAIWatchlistScreeningIndividualCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualGetSignalError() instead")
    void watchlistScreeningIndividualGetSignalE(OAIWatchlistScreeningIndividualGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualGetSignalError(OAIWatchlistScreeningIndividualGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualHistoryListSignalError() instead")
    void watchlistScreeningIndividualHistoryListSignalE(OAIWatchlistScreeningIndividualHistoryListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualHistoryListSignalError(OAIWatchlistScreeningIndividualHistoryListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualHitListSignalError() instead")
    void watchlistScreeningIndividualHitListSignalE(OAIWatchlistScreeningIndividualHitListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualHitListSignalError(OAIWatchlistScreeningIndividualHitListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualListSignalError() instead")
    void watchlistScreeningIndividualListSignalE(OAIWatchlistScreeningIndividualListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualListSignalError(OAIWatchlistScreeningIndividualListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualProgramGetSignalError() instead")
    void watchlistScreeningIndividualProgramGetSignalE(OAIWatchlistScreeningIndividualProgramGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualProgramGetSignalError(OAIWatchlistScreeningIndividualProgramGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualProgramListSignalError() instead")
    void watchlistScreeningIndividualProgramListSignalE(OAIWatchlistScreeningIndividualProgramListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualProgramListSignalError(OAIWatchlistScreeningIndividualProgramListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualReviewCreateSignalError() instead")
    void watchlistScreeningIndividualReviewCreateSignalE(OAIWatchlistScreeningIndividualReviewCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualReviewCreateSignalError(OAIWatchlistScreeningIndividualReviewCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualReviewListSignalError() instead")
    void watchlistScreeningIndividualReviewListSignalE(OAIWatchlistScreeningIndividualReviewListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualReviewListSignalError(OAIWatchlistScreeningIndividualReviewListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualUpdateSignalError() instead")
    void watchlistScreeningIndividualUpdateSignalE(OAIWatchlistScreeningIndividualUpdateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualUpdateSignalError(OAIWatchlistScreeningIndividualUpdateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhookVerificationKeyGetSignalError() instead")
    void webhookVerificationKeyGetSignalE(OAIWebhookVerificationKeyGetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhookVerificationKeyGetSignalError(OAIWebhookVerificationKeyGetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountsBalanceGetSignalErrorFull() instead")
    void accountsBalanceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsBalanceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetSignalErrorFull() instead")
    void accountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationGetSignalErrorFull() instead")
    void applicationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportAuditCopyCreateSignalErrorFull() instead")
    void assetReportAuditCopyCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportAuditCopyCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportAuditCopyGetSignalErrorFull() instead")
    void assetReportAuditCopyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportAuditCopyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportAuditCopyRemoveSignalErrorFull() instead")
    void assetReportAuditCopyRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportAuditCopyRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportCreateSignalErrorFull() instead")
    void assetReportCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportFilterSignalErrorFull() instead")
    void assetReportFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportGetSignalErrorFull() instead")
    void assetReportGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportPdfGetSignalErrorFull() instead")
    void assetReportPdfGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportPdfGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportRefreshSignalErrorFull() instead")
    void assetReportRefreshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportRefreshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetReportRemoveSignalErrorFull() instead")
    void assetReportRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetReportRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authGetSignalErrorFull() instead")
    void authGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferBalanceGetSignalErrorFull() instead")
    void bankTransferBalanceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferBalanceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferCancelSignalErrorFull() instead")
    void bankTransferCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferCreateSignalErrorFull() instead")
    void bankTransferCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferEventListSignalErrorFull() instead")
    void bankTransferEventListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferEventListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferEventSyncSignalErrorFull() instead")
    void bankTransferEventSyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferEventSyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferGetSignalErrorFull() instead")
    void bankTransferGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferListSignalErrorFull() instead")
    void bankTransferListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferMigrateAccountSignalErrorFull() instead")
    void bankTransferMigrateAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferMigrateAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferSweepGetSignalErrorFull() instead")
    void bankTransferSweepGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferSweepGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bankTransferSweepListSignalErrorFull() instead")
    void bankTransferSweepListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bankTransferSweepListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoriesGetSignalErrorFull() instead")
    void categoriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPaymentTokenSignalErrorFull() instead")
    void createPaymentTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPaymentTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditAssetReportFreddieMacGetSignalErrorFull() instead")
    void creditAssetReportFreddieMacGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditAssetReportFreddieMacGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditAuditCopyTokenCreateSignalErrorFull() instead")
    void creditAuditCopyTokenCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditAuditCopyTokenCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditAuditCopyTokenUpdateSignalErrorFull() instead")
    void creditAuditCopyTokenUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditAuditCopyTokenUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditBankEmploymentGetSignalErrorFull() instead")
    void creditBankEmploymentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditBankEmploymentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditBankIncomeGetSignalErrorFull() instead")
    void creditBankIncomeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditBankIncomeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditBankIncomePdfGetSignalErrorFull() instead")
    void creditBankIncomePdfGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditBankIncomePdfGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditBankIncomeRefreshSignalErrorFull() instead")
    void creditBankIncomeRefreshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditBankIncomeRefreshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditEmploymentGetSignalErrorFull() instead")
    void creditEmploymentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditEmploymentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditFreddieMacReportsGetSignalErrorFull() instead")
    void creditFreddieMacReportsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditFreddieMacReportsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditPayrollIncomeGetSignalErrorFull() instead")
    void creditPayrollIncomeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditPayrollIncomeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditPayrollIncomePrecheckSignalErrorFull() instead")
    void creditPayrollIncomePrecheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditPayrollIncomePrecheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditPayrollIncomeRefreshSignalErrorFull() instead")
    void creditPayrollIncomeRefreshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditPayrollIncomeRefreshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditRelayCreateSignalErrorFull() instead")
    void creditRelayCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditRelayCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditRelayGetSignalErrorFull() instead")
    void creditRelayGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditRelayGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditRelayRefreshSignalErrorFull() instead")
    void creditRelayRefreshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditRelayRefreshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditRelayRemoveSignalErrorFull() instead")
    void creditRelayRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditRelayRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditReportAuditCopyRemoveSignalErrorFull() instead")
    void creditReportAuditCopyRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditReportAuditCopyRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditSessionsGetSignalErrorFull() instead")
    void creditSessionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditSessionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardUserGetSignalErrorFull() instead")
    void dashboardUserGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardUserGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dashboardUserListSignalErrorFull() instead")
    void dashboardUserListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dashboardUserListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use depositSwitchAltCreateSignalErrorFull() instead")
    void depositSwitchAltCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void depositSwitchAltCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use depositSwitchCreateSignalErrorFull() instead")
    void depositSwitchCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void depositSwitchCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use depositSwitchGetSignalErrorFull() instead")
    void depositSwitchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void depositSwitchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use depositSwitchTokenCreateSignalErrorFull() instead")
    void depositSwitchTokenCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void depositSwitchTokenCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employersSearchSignalErrorFull() instead")
    void employersSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void employersSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use employmentVerificationGetSignalErrorFull() instead")
    void employmentVerificationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void employmentVerificationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fdxNotificationsSignalErrorFull() instead")
    void fdxNotificationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fdxNotificationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityGetSignalErrorFull() instead")
    void identityGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityMatchSignalErrorFull() instead")
    void identityMatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityMatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityVerificationCreateSignalErrorFull() instead")
    void identityVerificationCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityVerificationCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityVerificationGetSignalErrorFull() instead")
    void identityVerificationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityVerificationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityVerificationListSignalErrorFull() instead")
    void identityVerificationListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityVerificationListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identityVerificationRetrySignalErrorFull() instead")
    void identityVerificationRetrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identityVerificationRetrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomeVerificationCreateSignalErrorFull() instead")
    void incomeVerificationCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incomeVerificationCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomeVerificationDocumentsDownloadSignalErrorFull() instead")
    void incomeVerificationDocumentsDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incomeVerificationDocumentsDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomeVerificationPaystubsGetSignalErrorFull() instead")
    void incomeVerificationPaystubsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incomeVerificationPaystubsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomeVerificationPrecheckSignalErrorFull() instead")
    void incomeVerificationPrecheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incomeVerificationPrecheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomeVerificationTaxformsGetSignalErrorFull() instead")
    void incomeVerificationTaxformsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incomeVerificationTaxformsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use institutionsGetSignalErrorFull() instead")
    void institutionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void institutionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use institutionsGetByIdSignalErrorFull() instead")
    void institutionsGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void institutionsGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use institutionsSearchSignalErrorFull() instead")
    void institutionsSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void institutionsSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use investmentsHoldingsGetSignalErrorFull() instead")
    void investmentsHoldingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void investmentsHoldingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use investmentsTransactionsGetSignalErrorFull() instead")
    void investmentsTransactionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void investmentsTransactionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemAccessTokenInvalidateSignalErrorFull() instead")
    void itemAccessTokenInvalidateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void itemAccessTokenInvalidateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemActivityListSignalErrorFull() instead")
    void itemActivityListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void itemActivityListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemApplicationListSignalErrorFull() instead")
    void itemApplicationListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void itemApplicationListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemApplicationScopesUpdateSignalErrorFull() instead")
    void itemApplicationScopesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void itemApplicationScopesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemCreatePublicTokenSignalErrorFull() instead")
    void itemCreatePublicTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void itemCreatePublicTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemGetSignalErrorFull() instead")
    void itemGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void itemGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemImportSignalErrorFull() instead")
    void itemImportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void itemImportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemPublicTokenExchangeSignalErrorFull() instead")
    void itemPublicTokenExchangeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void itemPublicTokenExchangeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemRemoveSignalErrorFull() instead")
    void itemRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void itemRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use itemWebhookUpdateSignalErrorFull() instead")
    void itemWebhookUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void itemWebhookUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liabilitiesGetSignalErrorFull() instead")
    void liabilitiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void liabilitiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkDeliveryCreateSignalErrorFull() instead")
    void linkDeliveryCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkDeliveryCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkDeliveryGetSignalErrorFull() instead")
    void linkDeliveryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkDeliveryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkOauthCorrelationIdExchangeSignalErrorFull() instead")
    void linkOauthCorrelationIdExchangeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkOauthCorrelationIdExchangeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkTokenCreateSignalErrorFull() instead")
    void linkTokenCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkTokenCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkTokenGetSignalErrorFull() instead")
    void linkTokenGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkTokenGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnerCustomerCreateSignalErrorFull() instead")
    void partnerCustomerCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerCustomerCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnerCustomerEnableSignalErrorFull() instead")
    void partnerCustomerEnableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerCustomerEnableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnerCustomerGetSignalErrorFull() instead")
    void partnerCustomerGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerCustomerGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnerCustomerOauthInstitutionsGetSignalErrorFull() instead")
    void partnerCustomerOauthInstitutionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerCustomerOauthInstitutionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnerCustomerRemoveSignalErrorFull() instead")
    void partnerCustomerRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partnerCustomerRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationConsentCreateSignalErrorFull() instead")
    void paymentInitiationConsentCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationConsentCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationConsentGetSignalErrorFull() instead")
    void paymentInitiationConsentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationConsentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationConsentPaymentExecuteSignalErrorFull() instead")
    void paymentInitiationConsentPaymentExecuteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationConsentPaymentExecuteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationConsentRevokeSignalErrorFull() instead")
    void paymentInitiationConsentRevokeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationConsentRevokeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationPaymentCreateSignalErrorFull() instead")
    void paymentInitiationPaymentCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationPaymentCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationPaymentGetSignalErrorFull() instead")
    void paymentInitiationPaymentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationPaymentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationPaymentListSignalErrorFull() instead")
    void paymentInitiationPaymentListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationPaymentListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationPaymentReverseSignalErrorFull() instead")
    void paymentInitiationPaymentReverseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationPaymentReverseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationRecipientCreateSignalErrorFull() instead")
    void paymentInitiationRecipientCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationRecipientCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationRecipientGetSignalErrorFull() instead")
    void paymentInitiationRecipientGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationRecipientGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentInitiationRecipientListSignalErrorFull() instead")
    void paymentInitiationRecipientListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentInitiationRecipientListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentProfileCreateSignalErrorFull() instead")
    void paymentProfileCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentProfileCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentProfileGetSignalErrorFull() instead")
    void paymentProfileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentProfileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentProfileRemoveSignalErrorFull() instead")
    void paymentProfileRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentProfileRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorApexProcessorTokenCreateSignalErrorFull() instead")
    void processorApexProcessorTokenCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void processorApexProcessorTokenCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorAuthGetSignalErrorFull() instead")
    void processorAuthGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void processorAuthGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorBalanceGetSignalErrorFull() instead")
    void processorBalanceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void processorBalanceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorBankTransferCreateSignalErrorFull() instead")
    void processorBankTransferCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void processorBankTransferCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorIdentityGetSignalErrorFull() instead")
    void processorIdentityGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void processorIdentityGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorSignalDecisionReportSignalErrorFull() instead")
    void processorSignalDecisionReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void processorSignalDecisionReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorSignalEvaluateSignalErrorFull() instead")
    void processorSignalEvaluateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void processorSignalEvaluateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorSignalReturnReportSignalErrorFull() instead")
    void processorSignalReturnReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void processorSignalReturnReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorStripeBankAccountTokenCreateSignalErrorFull() instead")
    void processorStripeBankAccountTokenCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void processorStripeBankAccountTokenCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use processorTokenCreateSignalErrorFull() instead")
    void processorTokenCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void processorTokenCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxBankTransferFireWebhookSignalErrorFull() instead")
    void sandboxBankTransferFireWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxBankTransferFireWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxBankTransferSimulateSignalErrorFull() instead")
    void sandboxBankTransferSimulateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxBankTransferSimulateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxIncomeFireWebhookSignalErrorFull() instead")
    void sandboxIncomeFireWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxIncomeFireWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxItemFireWebhookSignalErrorFull() instead")
    void sandboxItemFireWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxItemFireWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxItemResetLoginSignalErrorFull() instead")
    void sandboxItemResetLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxItemResetLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxItemSetVerificationStatusSignalErrorFull() instead")
    void sandboxItemSetVerificationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxItemSetVerificationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxOauthSelectAccountsSignalErrorFull() instead")
    void sandboxOauthSelectAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxOauthSelectAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxPaymentProfileResetLoginSignalErrorFull() instead")
    void sandboxPaymentProfileResetLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxPaymentProfileResetLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxProcessorTokenCreateSignalErrorFull() instead")
    void sandboxProcessorTokenCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxProcessorTokenCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxPublicTokenCreateSignalErrorFull() instead")
    void sandboxPublicTokenCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxPublicTokenCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxTransferFireWebhookSignalErrorFull() instead")
    void sandboxTransferFireWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxTransferFireWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxTransferRepaymentSimulateSignalErrorFull() instead")
    void sandboxTransferRepaymentSimulateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxTransferRepaymentSimulateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxTransferSimulateSignalErrorFull() instead")
    void sandboxTransferSimulateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxTransferSimulateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxTransferSweepSimulateSignalErrorFull() instead")
    void sandboxTransferSweepSimulateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxTransferSweepSimulateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxTransferTestClockAdvanceSignalErrorFull() instead")
    void sandboxTransferTestClockAdvanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxTransferTestClockAdvanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxTransferTestClockCreateSignalErrorFull() instead")
    void sandboxTransferTestClockCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxTransferTestClockCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxTransferTestClockGetSignalErrorFull() instead")
    void sandboxTransferTestClockGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxTransferTestClockGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sandboxTransferTestClockListSignalErrorFull() instead")
    void sandboxTransferTestClockListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sandboxTransferTestClockListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalDecisionReportSignalErrorFull() instead")
    void signalDecisionReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signalDecisionReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalEvaluateSignalErrorFull() instead")
    void signalEvaluateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signalEvaluateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalPrepareSignalErrorFull() instead")
    void signalPrepareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signalPrepareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalReturnReportSignalErrorFull() instead")
    void signalReturnReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signalReturnReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsEnhanceSignalErrorFull() instead")
    void transactionsEnhanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsEnhanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsEnrichSignalErrorFull() instead")
    void transactionsEnrichSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsEnrichSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsGetSignalErrorFull() instead")
    void transactionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsRecurringGetSignalErrorFull() instead")
    void transactionsRecurringGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsRecurringGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsRefreshSignalErrorFull() instead")
    void transactionsRefreshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsRefreshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsRulesCreateSignalErrorFull() instead")
    void transactionsRulesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsRulesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsRulesListSignalErrorFull() instead")
    void transactionsRulesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsRulesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsRulesRemoveSignalErrorFull() instead")
    void transactionsRulesRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsRulesRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsSyncSignalErrorFull() instead")
    void transactionsSyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsSyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferAuthorizationCreateSignalErrorFull() instead")
    void transferAuthorizationCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferAuthorizationCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferCancelSignalErrorFull() instead")
    void transferCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferCapabilitiesGetSignalErrorFull() instead")
    void transferCapabilitiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferCapabilitiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferConfigurationGetSignalErrorFull() instead")
    void transferConfigurationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferConfigurationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferCreateSignalErrorFull() instead")
    void transferCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferEventListSignalErrorFull() instead")
    void transferEventListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferEventListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferEventSyncSignalErrorFull() instead")
    void transferEventSyncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferEventSyncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferGetSignalErrorFull() instead")
    void transferGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferIntentCreateSignalErrorFull() instead")
    void transferIntentCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferIntentCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferIntentGetSignalErrorFull() instead")
    void transferIntentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferIntentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferListSignalErrorFull() instead")
    void transferListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferMetricsGetSignalErrorFull() instead")
    void transferMetricsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferMetricsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferMigrateAccountSignalErrorFull() instead")
    void transferMigrateAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferMigrateAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferOriginatorCreateSignalErrorFull() instead")
    void transferOriginatorCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferOriginatorCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferOriginatorGetSignalErrorFull() instead")
    void transferOriginatorGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferOriginatorGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferOriginatorListSignalErrorFull() instead")
    void transferOriginatorListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferOriginatorListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferQuestionnaireCreateSignalErrorFull() instead")
    void transferQuestionnaireCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferQuestionnaireCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRecurringCancelSignalErrorFull() instead")
    void transferRecurringCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRecurringCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRecurringCreateSignalErrorFull() instead")
    void transferRecurringCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRecurringCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRecurringGetSignalErrorFull() instead")
    void transferRecurringGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRecurringGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRecurringListSignalErrorFull() instead")
    void transferRecurringListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRecurringListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRefundCancelSignalErrorFull() instead")
    void transferRefundCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRefundCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRefundCreateSignalErrorFull() instead")
    void transferRefundCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRefundCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRefundGetSignalErrorFull() instead")
    void transferRefundGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRefundGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRepaymentListSignalErrorFull() instead")
    void transferRepaymentListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRepaymentListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferRepaymentReturnListSignalErrorFull() instead")
    void transferRepaymentReturnListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferRepaymentReturnListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferSweepGetSignalErrorFull() instead")
    void transferSweepGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferSweepGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferSweepListSignalErrorFull() instead")
    void transferSweepListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferSweepListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userCreateSignalErrorFull() instead")
    void userCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletCreateSignalErrorFull() instead")
    void walletCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletGetSignalErrorFull() instead")
    void walletGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletListSignalErrorFull() instead")
    void walletListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletTransactionExecuteSignalErrorFull() instead")
    void walletTransactionExecuteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletTransactionExecuteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletTransactionGetSignalErrorFull() instead")
    void walletTransactionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletTransactionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use walletTransactionListSignalErrorFull() instead")
    void walletTransactionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void walletTransactionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityCreateSignalErrorFull() instead")
    void watchlistScreeningEntityCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityGetSignalErrorFull() instead")
    void watchlistScreeningEntityGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityHistoryListSignalErrorFull() instead")
    void watchlistScreeningEntityHistoryListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityHistoryListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityHitListSignalErrorFull() instead")
    void watchlistScreeningEntityHitListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityHitListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityListSignalErrorFull() instead")
    void watchlistScreeningEntityListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityProgramGetSignalErrorFull() instead")
    void watchlistScreeningEntityProgramGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityProgramGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityProgramListSignalErrorFull() instead")
    void watchlistScreeningEntityProgramListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityProgramListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityReviewCreateSignalErrorFull() instead")
    void watchlistScreeningEntityReviewCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityReviewCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityReviewListSignalErrorFull() instead")
    void watchlistScreeningEntityReviewListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityReviewListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningEntityUpdateSignalErrorFull() instead")
    void watchlistScreeningEntityUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningEntityUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualCreateSignalErrorFull() instead")
    void watchlistScreeningIndividualCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualGetSignalErrorFull() instead")
    void watchlistScreeningIndividualGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualHistoryListSignalErrorFull() instead")
    void watchlistScreeningIndividualHistoryListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualHistoryListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualHitListSignalErrorFull() instead")
    void watchlistScreeningIndividualHitListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualHitListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualListSignalErrorFull() instead")
    void watchlistScreeningIndividualListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualProgramGetSignalErrorFull() instead")
    void watchlistScreeningIndividualProgramGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualProgramGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualProgramListSignalErrorFull() instead")
    void watchlistScreeningIndividualProgramListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualProgramListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualReviewCreateSignalErrorFull() instead")
    void watchlistScreeningIndividualReviewCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualReviewCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualReviewListSignalErrorFull() instead")
    void watchlistScreeningIndividualReviewListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualReviewListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use watchlistScreeningIndividualUpdateSignalErrorFull() instead")
    void watchlistScreeningIndividualUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void watchlistScreeningIndividualUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhookVerificationKeyGetSignalErrorFull() instead")
    void webhookVerificationKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhookVerificationKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
