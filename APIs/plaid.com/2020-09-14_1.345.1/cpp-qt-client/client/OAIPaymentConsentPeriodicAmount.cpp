/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentConsentPeriodicAmount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentConsentPeriodicAmount::OAIPaymentConsentPeriodicAmount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentConsentPeriodicAmount::OAIPaymentConsentPeriodicAmount() {
    this->initializeModel();
}

OAIPaymentConsentPeriodicAmount::~OAIPaymentConsentPeriodicAmount() {}

void OAIPaymentConsentPeriodicAmount::initializeModel() {

    m_alignment_isSet = false;
    m_alignment_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;
}

void OAIPaymentConsentPeriodicAmount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentConsentPeriodicAmount::fromJsonObject(QJsonObject json) {

    m_alignment_isValid = ::OpenAPI::fromJsonValue(m_alignment, json[QString("alignment")]);
    m_alignment_isSet = !json[QString("alignment")].isNull() && m_alignment_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;
}

QString OAIPaymentConsentPeriodicAmount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentConsentPeriodicAmount::asJsonObject() const {
    QJsonObject obj;
    if (m_alignment.isSet()) {
        obj.insert(QString("alignment"), ::OpenAPI::toJsonValue(m_alignment));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_interval.isSet()) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    return obj;
}

OAIPaymentConsentPeriodicAlignment OAIPaymentConsentPeriodicAmount::getAlignment() const {
    return m_alignment;
}
void OAIPaymentConsentPeriodicAmount::setAlignment(const OAIPaymentConsentPeriodicAlignment &alignment) {
    m_alignment = alignment;
    m_alignment_isSet = true;
}

bool OAIPaymentConsentPeriodicAmount::is_alignment_Set() const{
    return m_alignment_isSet;
}

bool OAIPaymentConsentPeriodicAmount::is_alignment_Valid() const{
    return m_alignment_isValid;
}

OAIPaymentConsentPeriodicAmountAmount OAIPaymentConsentPeriodicAmount::getAmount() const {
    return m_amount;
}
void OAIPaymentConsentPeriodicAmount::setAmount(const OAIPaymentConsentPeriodicAmountAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPaymentConsentPeriodicAmount::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPaymentConsentPeriodicAmount::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIPaymentConsentPeriodicInterval OAIPaymentConsentPeriodicAmount::getInterval() const {
    return m_interval;
}
void OAIPaymentConsentPeriodicAmount::setInterval(const OAIPaymentConsentPeriodicInterval &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIPaymentConsentPeriodicAmount::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIPaymentConsentPeriodicAmount::is_interval_Valid() const{
    return m_interval_isValid;
}

bool OAIPaymentConsentPeriodicAmount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentConsentPeriodicAmount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alignment_isValid && m_amount_isValid && m_interval_isValid && true;
}

} // namespace OpenAPI
