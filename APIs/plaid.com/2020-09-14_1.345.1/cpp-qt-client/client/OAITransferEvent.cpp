/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferEvent::OAITransferEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferEvent::OAITransferEvent() {
    this->initializeModel();
}

OAITransferEvent::~OAITransferEvent() {}

void OAITransferEvent::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_funding_account_id_isSet = false;
    m_funding_account_id_isValid = false;

    m_origination_account_id_isSet = false;
    m_origination_account_id_isValid = false;

    m_originator_client_id_isSet = false;
    m_originator_client_id_isValid = false;

    m_refund_id_isSet = false;
    m_refund_id_isValid = false;

    m_sweep_amount_isSet = false;
    m_sweep_amount_isValid = false;

    m_sweep_id_isSet = false;
    m_sweep_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_transfer_amount_isSet = false;
    m_transfer_amount_isValid = false;

    m_transfer_id_isSet = false;
    m_transfer_id_isValid = false;

    m_transfer_type_isSet = false;
    m_transfer_type_isValid = false;
}

void OAITransferEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferEvent::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("event_id")]);
    m_event_id_isSet = !json[QString("event_id")].isNull() && m_event_id_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("event_type")]);
    m_event_type_isSet = !json[QString("event_type")].isNull() && m_event_type_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failure_reason")]);
    m_failure_reason_isSet = !json[QString("failure_reason")].isNull() && m_failure_reason_isValid;

    m_funding_account_id_isValid = ::OpenAPI::fromJsonValue(m_funding_account_id, json[QString("funding_account_id")]);
    m_funding_account_id_isSet = !json[QString("funding_account_id")].isNull() && m_funding_account_id_isValid;

    m_origination_account_id_isValid = ::OpenAPI::fromJsonValue(m_origination_account_id, json[QString("origination_account_id")]);
    m_origination_account_id_isSet = !json[QString("origination_account_id")].isNull() && m_origination_account_id_isValid;

    m_originator_client_id_isValid = ::OpenAPI::fromJsonValue(m_originator_client_id, json[QString("originator_client_id")]);
    m_originator_client_id_isSet = !json[QString("originator_client_id")].isNull() && m_originator_client_id_isValid;

    m_refund_id_isValid = ::OpenAPI::fromJsonValue(m_refund_id, json[QString("refund_id")]);
    m_refund_id_isSet = !json[QString("refund_id")].isNull() && m_refund_id_isValid;

    m_sweep_amount_isValid = ::OpenAPI::fromJsonValue(m_sweep_amount, json[QString("sweep_amount")]);
    m_sweep_amount_isSet = !json[QString("sweep_amount")].isNull() && m_sweep_amount_isValid;

    m_sweep_id_isValid = ::OpenAPI::fromJsonValue(m_sweep_id, json[QString("sweep_id")]);
    m_sweep_id_isSet = !json[QString("sweep_id")].isNull() && m_sweep_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_transfer_amount_isValid = ::OpenAPI::fromJsonValue(m_transfer_amount, json[QString("transfer_amount")]);
    m_transfer_amount_isSet = !json[QString("transfer_amount")].isNull() && m_transfer_amount_isValid;

    m_transfer_id_isValid = ::OpenAPI::fromJsonValue(m_transfer_id, json[QString("transfer_id")]);
    m_transfer_id_isSet = !json[QString("transfer_id")].isNull() && m_transfer_id_isValid;

    m_transfer_type_isValid = ::OpenAPI::fromJsonValue(m_transfer_type, json[QString("transfer_type")]);
    m_transfer_type_isSet = !json[QString("transfer_type")].isNull() && m_transfer_type_isValid;
}

QString OAITransferEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("event_id"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_type.isSet()) {
        obj.insert(QString("event_type"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_failure_reason.isSet()) {
        obj.insert(QString("failure_reason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_funding_account_id_isSet) {
        obj.insert(QString("funding_account_id"), ::OpenAPI::toJsonValue(m_funding_account_id));
    }
    if (m_origination_account_id_isSet) {
        obj.insert(QString("origination_account_id"), ::OpenAPI::toJsonValue(m_origination_account_id));
    }
    if (m_originator_client_id_isSet) {
        obj.insert(QString("originator_client_id"), ::OpenAPI::toJsonValue(m_originator_client_id));
    }
    if (m_refund_id_isSet) {
        obj.insert(QString("refund_id"), ::OpenAPI::toJsonValue(m_refund_id));
    }
    if (m_sweep_amount_isSet) {
        obj.insert(QString("sweep_amount"), ::OpenAPI::toJsonValue(m_sweep_amount));
    }
    if (m_sweep_id_isSet) {
        obj.insert(QString("sweep_id"), ::OpenAPI::toJsonValue(m_sweep_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_transfer_amount_isSet) {
        obj.insert(QString("transfer_amount"), ::OpenAPI::toJsonValue(m_transfer_amount));
    }
    if (m_transfer_id_isSet) {
        obj.insert(QString("transfer_id"), ::OpenAPI::toJsonValue(m_transfer_id));
    }
    if (m_transfer_type.isSet()) {
        obj.insert(QString("transfer_type"), ::OpenAPI::toJsonValue(m_transfer_type));
    }
    return obj;
}

QString OAITransferEvent::getAccountId() const {
    return m_account_id;
}
void OAITransferEvent::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAITransferEvent::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAITransferEvent::is_account_id_Valid() const{
    return m_account_id_isValid;
}

qint32 OAITransferEvent::getEventId() const {
    return m_event_id;
}
void OAITransferEvent::setEventId(const qint32 &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAITransferEvent::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAITransferEvent::is_event_id_Valid() const{
    return m_event_id_isValid;
}

OAITransferEventType OAITransferEvent::getEventType() const {
    return m_event_type;
}
void OAITransferEvent::setEventType(const OAITransferEventType &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAITransferEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAITransferEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

OAITransferFailure OAITransferEvent::getFailureReason() const {
    return m_failure_reason;
}
void OAITransferEvent::setFailureReason(const OAITransferFailure &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAITransferEvent::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAITransferEvent::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAITransferEvent::getFundingAccountId() const {
    return m_funding_account_id;
}
void OAITransferEvent::setFundingAccountId(const QString &funding_account_id) {
    m_funding_account_id = funding_account_id;
    m_funding_account_id_isSet = true;
}

bool OAITransferEvent::is_funding_account_id_Set() const{
    return m_funding_account_id_isSet;
}

bool OAITransferEvent::is_funding_account_id_Valid() const{
    return m_funding_account_id_isValid;
}

QString OAITransferEvent::getOriginationAccountId() const {
    return m_origination_account_id;
}
void OAITransferEvent::setOriginationAccountId(const QString &origination_account_id) {
    m_origination_account_id = origination_account_id;
    m_origination_account_id_isSet = true;
}

bool OAITransferEvent::is_origination_account_id_Set() const{
    return m_origination_account_id_isSet;
}

bool OAITransferEvent::is_origination_account_id_Valid() const{
    return m_origination_account_id_isValid;
}

QString OAITransferEvent::getOriginatorClientId() const {
    return m_originator_client_id;
}
void OAITransferEvent::setOriginatorClientId(const QString &originator_client_id) {
    m_originator_client_id = originator_client_id;
    m_originator_client_id_isSet = true;
}

bool OAITransferEvent::is_originator_client_id_Set() const{
    return m_originator_client_id_isSet;
}

bool OAITransferEvent::is_originator_client_id_Valid() const{
    return m_originator_client_id_isValid;
}

QString OAITransferEvent::getRefundId() const {
    return m_refund_id;
}
void OAITransferEvent::setRefundId(const QString &refund_id) {
    m_refund_id = refund_id;
    m_refund_id_isSet = true;
}

bool OAITransferEvent::is_refund_id_Set() const{
    return m_refund_id_isSet;
}

bool OAITransferEvent::is_refund_id_Valid() const{
    return m_refund_id_isValid;
}

QString OAITransferEvent::getSweepAmount() const {
    return m_sweep_amount;
}
void OAITransferEvent::setSweepAmount(const QString &sweep_amount) {
    m_sweep_amount = sweep_amount;
    m_sweep_amount_isSet = true;
}

bool OAITransferEvent::is_sweep_amount_Set() const{
    return m_sweep_amount_isSet;
}

bool OAITransferEvent::is_sweep_amount_Valid() const{
    return m_sweep_amount_isValid;
}

QString OAITransferEvent::getSweepId() const {
    return m_sweep_id;
}
void OAITransferEvent::setSweepId(const QString &sweep_id) {
    m_sweep_id = sweep_id;
    m_sweep_id_isSet = true;
}

bool OAITransferEvent::is_sweep_id_Set() const{
    return m_sweep_id_isSet;
}

bool OAITransferEvent::is_sweep_id_Valid() const{
    return m_sweep_id_isValid;
}

QDateTime OAITransferEvent::getTimestamp() const {
    return m_timestamp;
}
void OAITransferEvent::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAITransferEvent::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAITransferEvent::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAITransferEvent::getTransferAmount() const {
    return m_transfer_amount;
}
void OAITransferEvent::setTransferAmount(const QString &transfer_amount) {
    m_transfer_amount = transfer_amount;
    m_transfer_amount_isSet = true;
}

bool OAITransferEvent::is_transfer_amount_Set() const{
    return m_transfer_amount_isSet;
}

bool OAITransferEvent::is_transfer_amount_Valid() const{
    return m_transfer_amount_isValid;
}

QString OAITransferEvent::getTransferId() const {
    return m_transfer_id;
}
void OAITransferEvent::setTransferId(const QString &transfer_id) {
    m_transfer_id = transfer_id;
    m_transfer_id_isSet = true;
}

bool OAITransferEvent::is_transfer_id_Set() const{
    return m_transfer_id_isSet;
}

bool OAITransferEvent::is_transfer_id_Valid() const{
    return m_transfer_id_isValid;
}

OAITransferType OAITransferEvent::getTransferType() const {
    return m_transfer_type;
}
void OAITransferEvent::setTransferType(const OAITransferType &transfer_type) {
    m_transfer_type = transfer_type;
    m_transfer_type_isSet = true;
}

bool OAITransferEvent::is_transfer_type_Set() const{
    return m_transfer_type_isSet;
}

bool OAITransferEvent::is_transfer_type_Valid() const{
    return m_transfer_type_isValid;
}

bool OAITransferEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origination_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sweep_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sweep_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_event_id_isValid && m_event_type_isValid && m_failure_reason_isValid && m_funding_account_id_isValid && m_origination_account_id_isValid && m_originator_client_id_isValid && m_refund_id_isValid && m_sweep_amount_isValid && m_sweep_id_isValid && m_timestamp_isValid && m_transfer_amount_isValid && m_transfer_id_isValid && m_transfer_type_isValid && true;
}

} // namespace OpenAPI
