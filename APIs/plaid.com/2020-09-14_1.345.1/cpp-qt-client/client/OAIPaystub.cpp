/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaystub.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaystub::OAIPaystub(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaystub::OAIPaystub() {
    this->initializeModel();
}

OAIPaystub::~OAIPaystub() {}

void OAIPaystub::initializeModel() {

    m_deductions_isSet = false;
    m_deductions_isValid = false;

    m_doc_id_isSet = false;
    m_doc_id_isValid = false;

    m_earnings_isSet = false;
    m_earnings_isValid = false;

    m_employee_isSet = false;
    m_employee_isValid = false;

    m_employer_isSet = false;
    m_employer_isValid = false;

    m_employment_details_isSet = false;
    m_employment_details_isValid = false;

    m_income_breakdown_isSet = false;
    m_income_breakdown_isValid = false;

    m_net_pay_isSet = false;
    m_net_pay_isValid = false;

    m_pay_period_details_isSet = false;
    m_pay_period_details_isValid = false;

    m_paystub_details_isSet = false;
    m_paystub_details_isValid = false;

    m_ytd_earnings_isSet = false;
    m_ytd_earnings_isValid = false;
}

void OAIPaystub::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaystub::fromJsonObject(QJsonObject json) {

    m_deductions_isValid = ::OpenAPI::fromJsonValue(m_deductions, json[QString("deductions")]);
    m_deductions_isSet = !json[QString("deductions")].isNull() && m_deductions_isValid;

    m_doc_id_isValid = ::OpenAPI::fromJsonValue(m_doc_id, json[QString("doc_id")]);
    m_doc_id_isSet = !json[QString("doc_id")].isNull() && m_doc_id_isValid;

    m_earnings_isValid = ::OpenAPI::fromJsonValue(m_earnings, json[QString("earnings")]);
    m_earnings_isSet = !json[QString("earnings")].isNull() && m_earnings_isValid;

    m_employee_isValid = ::OpenAPI::fromJsonValue(m_employee, json[QString("employee")]);
    m_employee_isSet = !json[QString("employee")].isNull() && m_employee_isValid;

    m_employer_isValid = ::OpenAPI::fromJsonValue(m_employer, json[QString("employer")]);
    m_employer_isSet = !json[QString("employer")].isNull() && m_employer_isValid;

    m_employment_details_isValid = ::OpenAPI::fromJsonValue(m_employment_details, json[QString("employment_details")]);
    m_employment_details_isSet = !json[QString("employment_details")].isNull() && m_employment_details_isValid;

    m_income_breakdown_isValid = ::OpenAPI::fromJsonValue(m_income_breakdown, json[QString("income_breakdown")]);
    m_income_breakdown_isSet = !json[QString("income_breakdown")].isNull() && m_income_breakdown_isValid;

    m_net_pay_isValid = ::OpenAPI::fromJsonValue(m_net_pay, json[QString("net_pay")]);
    m_net_pay_isSet = !json[QString("net_pay")].isNull() && m_net_pay_isValid;

    m_pay_period_details_isValid = ::OpenAPI::fromJsonValue(m_pay_period_details, json[QString("pay_period_details")]);
    m_pay_period_details_isSet = !json[QString("pay_period_details")].isNull() && m_pay_period_details_isValid;

    m_paystub_details_isValid = ::OpenAPI::fromJsonValue(m_paystub_details, json[QString("paystub_details")]);
    m_paystub_details_isSet = !json[QString("paystub_details")].isNull() && m_paystub_details_isValid;

    m_ytd_earnings_isValid = ::OpenAPI::fromJsonValue(m_ytd_earnings, json[QString("ytd_earnings")]);
    m_ytd_earnings_isSet = !json[QString("ytd_earnings")].isNull() && m_ytd_earnings_isValid;
}

QString OAIPaystub::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaystub::asJsonObject() const {
    QJsonObject obj;
    if (m_deductions.isSet()) {
        obj.insert(QString("deductions"), ::OpenAPI::toJsonValue(m_deductions));
    }
    if (m_doc_id_isSet) {
        obj.insert(QString("doc_id"), ::OpenAPI::toJsonValue(m_doc_id));
    }
    if (m_earnings.isSet()) {
        obj.insert(QString("earnings"), ::OpenAPI::toJsonValue(m_earnings));
    }
    if (m_employee.isSet()) {
        obj.insert(QString("employee"), ::OpenAPI::toJsonValue(m_employee));
    }
    if (m_employer.isSet()) {
        obj.insert(QString("employer"), ::OpenAPI::toJsonValue(m_employer));
    }
    if (m_employment_details.isSet()) {
        obj.insert(QString("employment_details"), ::OpenAPI::toJsonValue(m_employment_details));
    }
    if (m_income_breakdown.size() > 0) {
        obj.insert(QString("income_breakdown"), ::OpenAPI::toJsonValue(m_income_breakdown));
    }
    if (m_net_pay.isSet()) {
        obj.insert(QString("net_pay"), ::OpenAPI::toJsonValue(m_net_pay));
    }
    if (m_pay_period_details.isSet()) {
        obj.insert(QString("pay_period_details"), ::OpenAPI::toJsonValue(m_pay_period_details));
    }
    if (m_paystub_details.isSet()) {
        obj.insert(QString("paystub_details"), ::OpenAPI::toJsonValue(m_paystub_details));
    }
    if (m_ytd_earnings.isSet()) {
        obj.insert(QString("ytd_earnings"), ::OpenAPI::toJsonValue(m_ytd_earnings));
    }
    return obj;
}

OAIDeductions OAIPaystub::getDeductions() const {
    return m_deductions;
}
void OAIPaystub::setDeductions(const OAIDeductions &deductions) {
    m_deductions = deductions;
    m_deductions_isSet = true;
}

bool OAIPaystub::is_deductions_Set() const{
    return m_deductions_isSet;
}

bool OAIPaystub::is_deductions_Valid() const{
    return m_deductions_isValid;
}

QString OAIPaystub::getDocId() const {
    return m_doc_id;
}
void OAIPaystub::setDocId(const QString &doc_id) {
    m_doc_id = doc_id;
    m_doc_id_isSet = true;
}

bool OAIPaystub::is_doc_id_Set() const{
    return m_doc_id_isSet;
}

bool OAIPaystub::is_doc_id_Valid() const{
    return m_doc_id_isValid;
}

OAIEarnings OAIPaystub::getEarnings() const {
    return m_earnings;
}
void OAIPaystub::setEarnings(const OAIEarnings &earnings) {
    m_earnings = earnings;
    m_earnings_isSet = true;
}

bool OAIPaystub::is_earnings_Set() const{
    return m_earnings_isSet;
}

bool OAIPaystub::is_earnings_Valid() const{
    return m_earnings_isValid;
}

OAIEmployee OAIPaystub::getEmployee() const {
    return m_employee;
}
void OAIPaystub::setEmployee(const OAIEmployee &employee) {
    m_employee = employee;
    m_employee_isSet = true;
}

bool OAIPaystub::is_employee_Set() const{
    return m_employee_isSet;
}

bool OAIPaystub::is_employee_Valid() const{
    return m_employee_isValid;
}

OAIPaystubEmployer OAIPaystub::getEmployer() const {
    return m_employer;
}
void OAIPaystub::setEmployer(const OAIPaystubEmployer &employer) {
    m_employer = employer;
    m_employer_isSet = true;
}

bool OAIPaystub::is_employer_Set() const{
    return m_employer_isSet;
}

bool OAIPaystub::is_employer_Valid() const{
    return m_employer_isValid;
}

OAIEmploymentDetails OAIPaystub::getEmploymentDetails() const {
    return m_employment_details;
}
void OAIPaystub::setEmploymentDetails(const OAIEmploymentDetails &employment_details) {
    m_employment_details = employment_details;
    m_employment_details_isSet = true;
}

bool OAIPaystub::is_employment_details_Set() const{
    return m_employment_details_isSet;
}

bool OAIPaystub::is_employment_details_Valid() const{
    return m_employment_details_isValid;
}

QList<OAIIncomeBreakdown> OAIPaystub::getIncomeBreakdown() const {
    return m_income_breakdown;
}
void OAIPaystub::setIncomeBreakdown(const QList<OAIIncomeBreakdown> &income_breakdown) {
    m_income_breakdown = income_breakdown;
    m_income_breakdown_isSet = true;
}

bool OAIPaystub::is_income_breakdown_Set() const{
    return m_income_breakdown_isSet;
}

bool OAIPaystub::is_income_breakdown_Valid() const{
    return m_income_breakdown_isValid;
}

OAINetPay OAIPaystub::getNetPay() const {
    return m_net_pay;
}
void OAIPaystub::setNetPay(const OAINetPay &net_pay) {
    m_net_pay = net_pay;
    m_net_pay_isSet = true;
}

bool OAIPaystub::is_net_pay_Set() const{
    return m_net_pay_isSet;
}

bool OAIPaystub::is_net_pay_Valid() const{
    return m_net_pay_isValid;
}

OAIPayPeriodDetails OAIPaystub::getPayPeriodDetails() const {
    return m_pay_period_details;
}
void OAIPaystub::setPayPeriodDetails(const OAIPayPeriodDetails &pay_period_details) {
    m_pay_period_details = pay_period_details;
    m_pay_period_details_isSet = true;
}

bool OAIPaystub::is_pay_period_details_Set() const{
    return m_pay_period_details_isSet;
}

bool OAIPaystub::is_pay_period_details_Valid() const{
    return m_pay_period_details_isValid;
}

OAIPaystubDetails OAIPaystub::getPaystubDetails() const {
    return m_paystub_details;
}
void OAIPaystub::setPaystubDetails(const OAIPaystubDetails &paystub_details) {
    m_paystub_details = paystub_details;
    m_paystub_details_isSet = true;
}

bool OAIPaystub::is_paystub_details_Set() const{
    return m_paystub_details_isSet;
}

bool OAIPaystub::is_paystub_details_Valid() const{
    return m_paystub_details_isValid;
}

OAIPaystubYTDDetails OAIPaystub::getYtdEarnings() const {
    return m_ytd_earnings;
}
void OAIPaystub::setYtdEarnings(const OAIPaystubYTDDetails &ytd_earnings) {
    m_ytd_earnings = ytd_earnings;
    m_ytd_earnings_isSet = true;
}

bool OAIPaystub::is_ytd_earnings_Set() const{
    return m_ytd_earnings_isSet;
}

bool OAIPaystub::is_ytd_earnings_Valid() const{
    return m_ytd_earnings_isValid;
}

bool OAIPaystub::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deductions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earnings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_employment_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_income_breakdown.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_pay.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_period_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paystub_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ytd_earnings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaystub::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deductions_isValid && m_doc_id_isValid && m_earnings_isValid && m_employee_isValid && m_employer_isValid && m_net_pay_isValid && m_pay_period_details_isValid && true;
}

} // namespace OpenAPI
