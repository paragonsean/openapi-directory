/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferIntentGetFailureReason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferIntentGetFailureReason::OAITransferIntentGetFailureReason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferIntentGetFailureReason::OAITransferIntentGetFailureReason() {
    this->initializeModel();
}

OAITransferIntentGetFailureReason::~OAITransferIntentGetFailureReason() {}

void OAITransferIntentGetFailureReason::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;
}

void OAITransferIntentGetFailureReason::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferIntentGetFailureReason::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("error_code")]);
    m_error_code_isSet = !json[QString("error_code")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("error_type")]);
    m_error_type_isSet = !json[QString("error_type")].isNull() && m_error_type_isValid;
}

QString OAITransferIntentGetFailureReason::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferIntentGetFailureReason::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("error_code"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_type_isSet) {
        obj.insert(QString("error_type"), ::OpenAPI::toJsonValue(m_error_type));
    }
    return obj;
}

QString OAITransferIntentGetFailureReason::getErrorCode() const {
    return m_error_code;
}
void OAITransferIntentGetFailureReason::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAITransferIntentGetFailureReason::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAITransferIntentGetFailureReason::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAITransferIntentGetFailureReason::getErrorMessage() const {
    return m_error_message;
}
void OAITransferIntentGetFailureReason::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAITransferIntentGetFailureReason::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAITransferIntentGetFailureReason::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAITransferIntentGetFailureReason::getErrorType() const {
    return m_error_type;
}
void OAITransferIntentGetFailureReason::setErrorType(const QString &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAITransferIntentGetFailureReason::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAITransferIntentGetFailureReason::is_error_type_Valid() const{
    return m_error_type_isValid;
}

bool OAITransferIntentGetFailureReason::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferIntentGetFailureReason::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
