/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SecurityOverride from './SecurityOverride';

/**
 * The InvestmentsTransactionsOverride model module.
 * @module model/InvestmentsTransactionsOverride
 * @version 2020-09-14_1.345.1
 */
class InvestmentsTransactionsOverride {
    /**
     * Constructs a new <code>InvestmentsTransactionsOverride</code>.
     * Specify the list of investments transactions on the account.
     * @alias module:model/InvestmentsTransactionsOverride
     * @param currency {String} Either a valid `iso_currency_code` or `unofficial_currency_code`
     * @param date {Date} Posting date for the transaction. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
     * @param name {String} The institution's description of the transaction.
     * @param price {Number} The price of the security at which this transaction occurred.
     * @param quantity {Number} The number of units of the security involved in this transaction. Must be positive if the type is a buy and negative if the type is a sell.
     * @param type {String} The type of the investment transaction. Possible values are: `buy`: Buying an investment `sell`: Selling an investment `cash`: Activity that modifies a cash position `fee`: A fee on the account `transfer`: Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
     */
    constructor(currency, date, name, price, quantity, type) { 
        
        InvestmentsTransactionsOverride.initialize(this, currency, date, name, price, quantity, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currency, date, name, price, quantity, type) { 
        obj['currency'] = currency;
        obj['date'] = date;
        obj['name'] = name;
        obj['price'] = price;
        obj['quantity'] = quantity;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>InvestmentsTransactionsOverride</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InvestmentsTransactionsOverride} obj Optional instance to populate.
     * @return {module:model/InvestmentsTransactionsOverride} The populated <code>InvestmentsTransactionsOverride</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvestmentsTransactionsOverride();

            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('fees')) {
                obj['fees'] = ApiClient.convertToType(data['fees'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('security')) {
                obj['security'] = SecurityOverride.constructFromObject(data['security']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InvestmentsTransactionsOverride</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InvestmentsTransactionsOverride</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InvestmentsTransactionsOverride.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `security`
        if (data['security']) { // data not null
          SecurityOverride.validateJSON(data['security']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

InvestmentsTransactionsOverride.RequiredProperties = ["currency", "date", "name", "price", "quantity", "type"];

/**
 * Either a valid `iso_currency_code` or `unofficial_currency_code`
 * @member {String} currency
 */
InvestmentsTransactionsOverride.prototype['currency'] = undefined;

/**
 * Posting date for the transaction. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
 * @member {Date} date
 */
InvestmentsTransactionsOverride.prototype['date'] = undefined;

/**
 * The combined value of all fees applied to this transaction.
 * @member {Number} fees
 */
InvestmentsTransactionsOverride.prototype['fees'] = undefined;

/**
 * The institution's description of the transaction.
 * @member {String} name
 */
InvestmentsTransactionsOverride.prototype['name'] = undefined;

/**
 * The price of the security at which this transaction occurred.
 * @member {Number} price
 */
InvestmentsTransactionsOverride.prototype['price'] = undefined;

/**
 * The number of units of the security involved in this transaction. Must be positive if the type is a buy and negative if the type is a sell.
 * @member {Number} quantity
 */
InvestmentsTransactionsOverride.prototype['quantity'] = undefined;

/**
 * @member {module:model/SecurityOverride} security
 */
InvestmentsTransactionsOverride.prototype['security'] = undefined;

/**
 * The type of the investment transaction. Possible values are: `buy`: Buying an investment `sell`: Selling an investment `cash`: Activity that modifies a cash position `fee`: A fee on the account `transfer`: Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
 * @member {String} type
 */
InvestmentsTransactionsOverride.prototype['type'] = undefined;






export default InvestmentsTransactionsOverride;

