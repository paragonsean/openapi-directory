/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ACHClass from './ACHClass';
import BankTransferNetwork from './BankTransferNetwork';
import BankTransferType from './BankTransferType';
import BankTransferUser from './BankTransferUser';

/**
 * The BankTransferCreateRequest model module.
 * @module model/BankTransferCreateRequest
 * @version 2020-09-14_1.345.1
 */
class BankTransferCreateRequest {
    /**
     * Constructs a new <code>BankTransferCreateRequest</code>.
     * Defines the request schema for &#x60;/bank_transfer/create&#x60;
     * @alias module:model/BankTransferCreateRequest
     * @param accessToken {String} The Plaid `access_token` for the account that will be debited or credited.
     * @param accountId {String} The Plaid `account_id` for the account that will be debited or credited.
     * @param amount {String} The amount of the bank transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @param description {String} The transfer description. Maximum of 10 characters.
     * @param idempotencyKey {String} A random key provided by the client, per unique bank transfer. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a bank transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single bank transfer is created.
     * @param isoCurrencyCode {String} The currency of the transfer amount â€“ should be set to \"USD\".
     * @param network {module:model/BankTransferNetwork} 
     * @param type {module:model/BankTransferType} 
     * @param user {module:model/BankTransferUser} 
     */
    constructor(accessToken, accountId, amount, description, idempotencyKey, isoCurrencyCode, network, type, user) { 
        
        BankTransferCreateRequest.initialize(this, accessToken, accountId, amount, description, idempotencyKey, isoCurrencyCode, network, type, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessToken, accountId, amount, description, idempotencyKey, isoCurrencyCode, network, type, user) { 
        obj['access_token'] = accessToken;
        obj['account_id'] = accountId;
        obj['amount'] = amount;
        obj['description'] = description;
        obj['idempotency_key'] = idempotencyKey;
        obj['iso_currency_code'] = isoCurrencyCode;
        obj['network'] = network;
        obj['type'] = type;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>BankTransferCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BankTransferCreateRequest} obj Optional instance to populate.
     * @return {module:model/BankTransferCreateRequest} The populated <code>BankTransferCreateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BankTransferCreateRequest();

            if (data.hasOwnProperty('access_token')) {
                obj['access_token'] = ApiClient.convertToType(data['access_token'], 'String');
            }
            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('ach_class')) {
                obj['ach_class'] = ACHClass.constructFromObject(data['ach_class']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('custom_tag')) {
                obj['custom_tag'] = ApiClient.convertToType(data['custom_tag'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('idempotency_key')) {
                obj['idempotency_key'] = ApiClient.convertToType(data['idempotency_key'], 'String');
            }
            if (data.hasOwnProperty('iso_currency_code')) {
                obj['iso_currency_code'] = ApiClient.convertToType(data['iso_currency_code'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = BankTransferNetwork.constructFromObject(data['network']);
            }
            if (data.hasOwnProperty('origination_account_id')) {
                obj['origination_account_id'] = ApiClient.convertToType(data['origination_account_id'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = BankTransferType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = BankTransferUser.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BankTransferCreateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BankTransferCreateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BankTransferCreateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['access_token'] && !(typeof data['access_token'] === 'string' || data['access_token'] instanceof String)) {
            throw new Error("Expected the field `access_token` to be a primitive type in the JSON string but got " + data['access_token']);
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['custom_tag'] && !(typeof data['custom_tag'] === 'string' || data['custom_tag'] instanceof String)) {
            throw new Error("Expected the field `custom_tag` to be a primitive type in the JSON string but got " + data['custom_tag']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['idempotency_key'] && !(typeof data['idempotency_key'] === 'string' || data['idempotency_key'] instanceof String)) {
            throw new Error("Expected the field `idempotency_key` to be a primitive type in the JSON string but got " + data['idempotency_key']);
        }
        // ensure the json data is a string
        if (data['iso_currency_code'] && !(typeof data['iso_currency_code'] === 'string' || data['iso_currency_code'] instanceof String)) {
            throw new Error("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got " + data['iso_currency_code']);
        }
        // ensure the json data is a string
        if (data['origination_account_id'] && !(typeof data['origination_account_id'] === 'string' || data['origination_account_id'] instanceof String)) {
            throw new Error("Expected the field `origination_account_id` to be a primitive type in the JSON string but got " + data['origination_account_id']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }

        return true;
    }


}

BankTransferCreateRequest.RequiredProperties = ["access_token", "account_id", "amount", "description", "idempotency_key", "iso_currency_code", "network", "type", "user"];

/**
 * The Plaid `access_token` for the account that will be debited or credited.
 * @member {String} access_token
 */
BankTransferCreateRequest.prototype['access_token'] = undefined;

/**
 * The Plaid `account_id` for the account that will be debited or credited.
 * @member {String} account_id
 */
BankTransferCreateRequest.prototype['account_id'] = undefined;

/**
 * @member {module:model/ACHClass} ach_class
 */
BankTransferCreateRequest.prototype['ach_class'] = undefined;

/**
 * The amount of the bank transfer (decimal string with two digits of precision e.g. \"10.00\").
 * @member {String} amount
 */
BankTransferCreateRequest.prototype['amount'] = undefined;

/**
 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
 * @member {String} client_id
 */
BankTransferCreateRequest.prototype['client_id'] = undefined;

/**
 * An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters.
 * @member {String} custom_tag
 */
BankTransferCreateRequest.prototype['custom_tag'] = undefined;

/**
 * The transfer description. Maximum of 10 characters.
 * @member {String} description
 */
BankTransferCreateRequest.prototype['description'] = undefined;

/**
 * A random key provided by the client, per unique bank transfer. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a bank transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single bank transfer is created.
 * @member {String} idempotency_key
 */
BankTransferCreateRequest.prototype['idempotency_key'] = undefined;

/**
 * The currency of the transfer amount â€“ should be set to \"USD\".
 * @member {String} iso_currency_code
 */
BankTransferCreateRequest.prototype['iso_currency_code'] = undefined;

/**
 * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters 
 * @member {Object.<String, String>} metadata
 */
BankTransferCreateRequest.prototype['metadata'] = undefined;

/**
 * @member {module:model/BankTransferNetwork} network
 */
BankTransferCreateRequest.prototype['network'] = undefined;

/**
 * Plaidâ€™s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. Otherwise, this field should be left blank.
 * @member {String} origination_account_id
 */
BankTransferCreateRequest.prototype['origination_account_id'] = undefined;

/**
 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
 * @member {String} secret
 */
BankTransferCreateRequest.prototype['secret'] = undefined;

/**
 * @member {module:model/BankTransferType} type
 */
BankTransferCreateRequest.prototype['type'] = undefined;

/**
 * @member {module:model/BankTransferUser} user
 */
BankTransferCreateRequest.prototype['user'] = undefined;






export default BankTransferCreateRequest;

