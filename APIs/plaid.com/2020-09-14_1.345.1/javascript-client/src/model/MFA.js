/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MFA model module.
 * @module model/MFA
 * @version 2020-09-14_1.345.1
 */
class MFA {
    /**
     * Constructs a new <code>MFA</code>.
     * Specifies the multi-factor authentication settings to use with this test account
     * @alias module:model/MFA
     * @extends Object
     * @param questionRounds {Number} Number of rounds of questions. Required if value of `type` is `questions`. 
     * @param questionsPerRound {Number} Number of questions per round. Required if value of `type` is `questions`. If value of type is `selections`, default value is 2.
     * @param selectionRounds {Number} Number of rounds of selections, used if `type` is `selections`. Defaults to 1.
     * @param selectionsPerQuestion {Number} Number of available answers per question, used if `type` is `selection`. Defaults to 2. 
     * @param type {String} Possible values are `device`, `selections`, or `questions`.  If value is `device`, the MFA answer is `1234`.  If value is `selections`, the MFA answer is always the first option.  If value is `questions`, the MFA answer is  `answer_<i>_<j>` for the j-th question in the i-th round, starting from 0. For example, the answer to the first question in the second round is `answer_1_0`.
     */
    constructor(questionRounds, questionsPerRound, selectionRounds, selectionsPerQuestion, type) { 
        
        MFA.initialize(this, questionRounds, questionsPerRound, selectionRounds, selectionsPerQuestion, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, questionRounds, questionsPerRound, selectionRounds, selectionsPerQuestion, type) { 
        obj['question_rounds'] = questionRounds;
        obj['questions_per_round'] = questionsPerRound;
        obj['selection_rounds'] = selectionRounds;
        obj['selections_per_question'] = selectionsPerQuestion;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>MFA</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MFA} obj Optional instance to populate.
     * @return {module:model/MFA} The populated <code>MFA</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MFA();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('question_rounds')) {
                obj['question_rounds'] = ApiClient.convertToType(data['question_rounds'], 'Number');
            }
            if (data.hasOwnProperty('questions_per_round')) {
                obj['questions_per_round'] = ApiClient.convertToType(data['questions_per_round'], 'Number');
            }
            if (data.hasOwnProperty('selection_rounds')) {
                obj['selection_rounds'] = ApiClient.convertToType(data['selection_rounds'], 'Number');
            }
            if (data.hasOwnProperty('selections_per_question')) {
                obj['selections_per_question'] = ApiClient.convertToType(data['selections_per_question'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MFA</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MFA</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MFA.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

MFA.RequiredProperties = ["question_rounds", "questions_per_round", "selection_rounds", "selections_per_question", "type"];

/**
 * Number of rounds of questions. Required if value of `type` is `questions`. 
 * @member {Number} question_rounds
 */
MFA.prototype['question_rounds'] = undefined;

/**
 * Number of questions per round. Required if value of `type` is `questions`. If value of type is `selections`, default value is 2.
 * @member {Number} questions_per_round
 */
MFA.prototype['questions_per_round'] = undefined;

/**
 * Number of rounds of selections, used if `type` is `selections`. Defaults to 1.
 * @member {Number} selection_rounds
 */
MFA.prototype['selection_rounds'] = undefined;

/**
 * Number of available answers per question, used if `type` is `selection`. Defaults to 2. 
 * @member {Number} selections_per_question
 */
MFA.prototype['selections_per_question'] = undefined;

/**
 * Possible values are `device`, `selections`, or `questions`.  If value is `device`, the MFA answer is `1234`.  If value is `selections`, the MFA answer is always the first option.  If value is `questions`, the MFA answer is  `answer_<i>_<j>` for the j-th question in the i-th round, starting from 0. For example, the answer to the first question in the second round is `answer_1_0`.
 * @member {String} type
 */
MFA.prototype['type'] = undefined;






export default MFA;

