/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransactionData model module.
 * @module model/TransactionData
 * @version 2020-09-14_1.345.1
 */
class TransactionData {
    /**
     * Constructs a new <code>TransactionData</code>.
     * Information about the matched direct deposit transaction used to verify a user&#39;s payroll information.
     * @alias module:model/TransactionData
     * @extends Object
     * @param accountId {String} A unique identifier for the end user's account.
     * @param amount {Number} The amount of the transaction.
     * @param date {Date} The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\"yyyy-mm-dd\").
     * @param description {String} The description of the transaction.
     * @param transactionId {String} A unique identifier for the transaction.
     */
    constructor(accountId, amount, date, description, transactionId) { 
        
        TransactionData.initialize(this, accountId, amount, date, description, transactionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, amount, date, description, transactionId) { 
        obj['account_id'] = accountId;
        obj['amount'] = amount;
        obj['date'] = date;
        obj['description'] = description;
        obj['transaction_id'] = transactionId;
    }

    /**
     * Constructs a <code>TransactionData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionData} obj Optional instance to populate.
     * @return {module:model/TransactionData} The populated <code>TransactionData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionData();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }

        return true;
    }


}

TransactionData.RequiredProperties = ["account_id", "amount", "date", "description", "transaction_id"];

/**
 * A unique identifier for the end user's account.
 * @member {String} account_id
 */
TransactionData.prototype['account_id'] = undefined;

/**
 * The amount of the transaction.
 * @member {Number} amount
 */
TransactionData.prototype['amount'] = undefined;

/**
 * The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (\"yyyy-mm-dd\").
 * @member {Date} date
 */
TransactionData.prototype['date'] = undefined;

/**
 * The description of the transaction.
 * @member {String} description
 */
TransactionData.prototype['description'] = undefined;

/**
 * A unique identifier for the transaction.
 * @member {String} transaction_id
 */
TransactionData.prototype['transaction_id'] = undefined;






export default TransactionData;

