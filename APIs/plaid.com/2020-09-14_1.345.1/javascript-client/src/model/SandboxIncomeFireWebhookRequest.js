/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SandboxIncomeFireWebhookRequest model module.
 * @module model/SandboxIncomeFireWebhookRequest
 * @version 2020-09-14_1.345.1
 */
class SandboxIncomeFireWebhookRequest {
    /**
     * Constructs a new <code>SandboxIncomeFireWebhookRequest</code>.
     * SandboxIncomeFireWebhookRequest defines the request schema for &#x60;/sandbox/income/fire_webhook&#x60;
     * @alias module:model/SandboxIncomeFireWebhookRequest
     * @param itemId {String} The Item ID associated with the verification.
     * @param verificationStatus {module:model/SandboxIncomeFireWebhookRequest.VerificationStatusEnum} `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.  `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.  `VERIFICATION_STATUS_PENDING_APPROVAL`: (deprecated) The income verification has been sent to the user for review.
     * @param webhook {String} The URL to which the webhook should be sent.
     */
    constructor(itemId, verificationStatus, webhook) { 
        
        SandboxIncomeFireWebhookRequest.initialize(this, itemId, verificationStatus, webhook);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, itemId, verificationStatus, webhook) { 
        obj['item_id'] = itemId;
        obj['verification_status'] = verificationStatus;
        obj['webhook'] = webhook;
    }

    /**
     * Constructs a <code>SandboxIncomeFireWebhookRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SandboxIncomeFireWebhookRequest} obj Optional instance to populate.
     * @return {module:model/SandboxIncomeFireWebhookRequest} The populated <code>SandboxIncomeFireWebhookRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SandboxIncomeFireWebhookRequest();

            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('item_id')) {
                obj['item_id'] = ApiClient.convertToType(data['item_id'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('verification_status')) {
                obj['verification_status'] = ApiClient.convertToType(data['verification_status'], 'String');
            }
            if (data.hasOwnProperty('webhook')) {
                obj['webhook'] = ApiClient.convertToType(data['webhook'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SandboxIncomeFireWebhookRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SandboxIncomeFireWebhookRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SandboxIncomeFireWebhookRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['item_id'] && !(typeof data['item_id'] === 'string' || data['item_id'] instanceof String)) {
            throw new Error("Expected the field `item_id` to be a primitive type in the JSON string but got " + data['item_id']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }
        // ensure the json data is a string
        if (data['verification_status'] && !(typeof data['verification_status'] === 'string' || data['verification_status'] instanceof String)) {
            throw new Error("Expected the field `verification_status` to be a primitive type in the JSON string but got " + data['verification_status']);
        }
        // ensure the json data is a string
        if (data['webhook'] && !(typeof data['webhook'] === 'string' || data['webhook'] instanceof String)) {
            throw new Error("Expected the field `webhook` to be a primitive type in the JSON string but got " + data['webhook']);
        }

        return true;
    }


}

SandboxIncomeFireWebhookRequest.RequiredProperties = ["item_id", "verification_status", "webhook"];

/**
 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
 * @member {String} client_id
 */
SandboxIncomeFireWebhookRequest.prototype['client_id'] = undefined;

/**
 * The Item ID associated with the verification.
 * @member {String} item_id
 */
SandboxIncomeFireWebhookRequest.prototype['item_id'] = undefined;

/**
 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
 * @member {String} secret
 */
SandboxIncomeFireWebhookRequest.prototype['secret'] = undefined;

/**
 * The Plaid `user_id` of the User associated with this webhook, warning, or error.
 * @member {String} user_id
 */
SandboxIncomeFireWebhookRequest.prototype['user_id'] = undefined;

/**
 * `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.  `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.  `VERIFICATION_STATUS_PENDING_APPROVAL`: (deprecated) The income verification has been sent to the user for review.
 * @member {module:model/SandboxIncomeFireWebhookRequest.VerificationStatusEnum} verification_status
 */
SandboxIncomeFireWebhookRequest.prototype['verification_status'] = undefined;

/**
 * The URL to which the webhook should be sent.
 * @member {String} webhook
 */
SandboxIncomeFireWebhookRequest.prototype['webhook'] = undefined;





/**
 * Allowed values for the <code>verification_status</code> property.
 * @enum {String}
 * @readonly
 */
SandboxIncomeFireWebhookRequest['VerificationStatusEnum'] = {

    /**
     * value: "VERIFICATION_STATUS_PROCESSING_COMPLETE"
     * @const
     */
    "PROCESSING_COMPLETE": "VERIFICATION_STATUS_PROCESSING_COMPLETE",

    /**
     * value: "VERIFICATION_STATUS_PROCESSING_FAILED"
     * @const
     */
    "PROCESSING_FAILED": "VERIFICATION_STATUS_PROCESSING_FAILED",

    /**
     * value: "VERIFICATION_STATUS_PENDING_APPROVAL"
     * @const
     */
    "PENDING_APPROVAL": "VERIFICATION_STATUS_PENDING_APPROVAL"
};



export default SandboxIncomeFireWebhookRequest;

