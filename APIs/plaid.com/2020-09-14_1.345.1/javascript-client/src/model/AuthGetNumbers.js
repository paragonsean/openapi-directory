/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NumbersACH from './NumbersACH';
import NumbersBACS from './NumbersBACS';
import NumbersEFT from './NumbersEFT';
import NumbersInternational from './NumbersInternational';

/**
 * The AuthGetNumbers model module.
 * @module model/AuthGetNumbers
 * @version 2020-09-14_1.345.1
 */
class AuthGetNumbers {
    /**
     * Constructs a new <code>AuthGetNumbers</code>.
     * An object containing identifying numbers used for making electronic transfers to and from the &#x60;accounts&#x60;. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by any &#x60;accounts&#x60; for which data has been requested, the array for that type will be empty.
     * @alias module:model/AuthGetNumbers
     * @extends Object
     * @param ach {Array.<module:model/NumbersACH>} An array of ACH numbers identifying accounts.
     * @param bacs {Array.<module:model/NumbersBACS>} An array of BACS numbers identifying accounts.
     * @param eft {Array.<module:model/NumbersEFT>} An array of EFT numbers identifying accounts.
     * @param international {Array.<module:model/NumbersInternational>} An array of IBAN numbers identifying accounts.
     */
    constructor(ach, bacs, eft, international) { 
        
        AuthGetNumbers.initialize(this, ach, bacs, eft, international);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ach, bacs, eft, international) { 
        obj['ach'] = ach;
        obj['bacs'] = bacs;
        obj['eft'] = eft;
        obj['international'] = international;
    }

    /**
     * Constructs a <code>AuthGetNumbers</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthGetNumbers} obj Optional instance to populate.
     * @return {module:model/AuthGetNumbers} The populated <code>AuthGetNumbers</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthGetNumbers();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('ach')) {
                obj['ach'] = ApiClient.convertToType(data['ach'], [NumbersACH]);
            }
            if (data.hasOwnProperty('bacs')) {
                obj['bacs'] = ApiClient.convertToType(data['bacs'], [NumbersBACS]);
            }
            if (data.hasOwnProperty('eft')) {
                obj['eft'] = ApiClient.convertToType(data['eft'], [NumbersEFT]);
            }
            if (data.hasOwnProperty('international')) {
                obj['international'] = ApiClient.convertToType(data['international'], [NumbersInternational]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthGetNumbers</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthGetNumbers</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AuthGetNumbers.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ach'])) {
            throw new Error("Expected the field `ach` to be an array in the JSON data but got " + data['ach']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['bacs'])) {
            throw new Error("Expected the field `bacs` to be an array in the JSON data but got " + data['bacs']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['eft'])) {
            throw new Error("Expected the field `eft` to be an array in the JSON data but got " + data['eft']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['international'])) {
            throw new Error("Expected the field `international` to be an array in the JSON data but got " + data['international']);
        }

        return true;
    }


}

AuthGetNumbers.RequiredProperties = ["ach", "bacs", "eft", "international"];

/**
 * An array of ACH numbers identifying accounts.
 * @member {Array.<module:model/NumbersACH>} ach
 */
AuthGetNumbers.prototype['ach'] = undefined;

/**
 * An array of BACS numbers identifying accounts.
 * @member {Array.<module:model/NumbersBACS>} bacs
 */
AuthGetNumbers.prototype['bacs'] = undefined;

/**
 * An array of EFT numbers identifying accounts.
 * @member {Array.<module:model/NumbersEFT>} eft
 */
AuthGetNumbers.prototype['eft'] = undefined;

/**
 * An array of IBAN numbers identifying accounts.
 * @member {Array.<module:model/NumbersInternational>} international
 */
AuthGetNumbers.prototype['international'] = undefined;






export default AuthGetNumbers;

