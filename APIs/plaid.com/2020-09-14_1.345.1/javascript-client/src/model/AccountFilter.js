/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountFilter model module.
 * @module model/AccountFilter
 * @version 2020-09-14_1.345.1
 */
class AccountFilter {
    /**
     * Constructs a new <code>AccountFilter</code>.
     * Enumerates the account subtypes that the application wishes for the user to be able to select from. For more details refer to Plaid documentation on account filters.
     * @alias module:model/AccountFilter
     */
    constructor() { 
        
        AccountFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountFilter} obj Optional instance to populate.
     * @return {module:model/AccountFilter} The populated <code>AccountFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountFilter();

            if (data.hasOwnProperty('credit')) {
                obj['credit'] = ApiClient.convertToType(data['credit'], ['String']);
            }
            if (data.hasOwnProperty('depository')) {
                obj['depository'] = ApiClient.convertToType(data['depository'], ['String']);
            }
            if (data.hasOwnProperty('investment')) {
                obj['investment'] = ApiClient.convertToType(data['investment'], ['String']);
            }
            if (data.hasOwnProperty('loan')) {
                obj['loan'] = ApiClient.convertToType(data['loan'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['credit'])) {
            throw new Error("Expected the field `credit` to be an array in the JSON data but got " + data['credit']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['depository'])) {
            throw new Error("Expected the field `depository` to be an array in the JSON data but got " + data['depository']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['investment'])) {
            throw new Error("Expected the field `investment` to be an array in the JSON data but got " + data['investment']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['loan'])) {
            throw new Error("Expected the field `loan` to be an array in the JSON data but got " + data['loan']);
        }

        return true;
    }


}



/**
 * A list of account subtypes to be filtered.
 * @member {Array.<String>} credit
 */
AccountFilter.prototype['credit'] = undefined;

/**
 * A list of account subtypes to be filtered.
 * @member {Array.<String>} depository
 */
AccountFilter.prototype['depository'] = undefined;

/**
 * A list of account subtypes to be filtered.
 * @member {Array.<String>} investment
 */
AccountFilter.prototype['investment'] = undefined;

/**
 * A list of account subtypes to be filtered.
 * @member {Array.<String>} loan
 */
AccountFilter.prototype['loan'] = undefined;






export default AccountFilter;

