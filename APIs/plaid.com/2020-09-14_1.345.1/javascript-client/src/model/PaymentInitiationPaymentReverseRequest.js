/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentAmountToRefund from './PaymentAmountToRefund';

/**
 * The PaymentInitiationPaymentReverseRequest model module.
 * @module model/PaymentInitiationPaymentReverseRequest
 * @version 2020-09-14_1.345.1
 */
class PaymentInitiationPaymentReverseRequest {
    /**
     * Constructs a new <code>PaymentInitiationPaymentReverseRequest</code>.
     * PaymentInitiationPaymentReverseRequest defines the request schema for &#x60;/payment_initiation/payment/reverse&#x60;
     * @alias module:model/PaymentInitiationPaymentReverseRequest
     * @param idempotencyKey {String} A random key provided by the client, per unique wallet transaction. Maximum of 128 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a wallet transaction fails due to a network connection error, then after a minimum delay of one minute, you can retry the request with the same idempotency key to guarantee that only a single wallet transaction is created. If the request was successfully processed, it will prevent any transaction that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
     * @param paymentId {String} The ID of the payment to reverse
     * @param reference {String} A reference for the refund. This must be an alphanumeric string with 6 to 18 characters and must not contain any special characters or spaces.
     */
    constructor(idempotencyKey, paymentId, reference) { 
        
        PaymentInitiationPaymentReverseRequest.initialize(this, idempotencyKey, paymentId, reference);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, idempotencyKey, paymentId, reference) { 
        obj['idempotency_key'] = idempotencyKey;
        obj['payment_id'] = paymentId;
        obj['reference'] = reference;
    }

    /**
     * Constructs a <code>PaymentInitiationPaymentReverseRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentInitiationPaymentReverseRequest} obj Optional instance to populate.
     * @return {module:model/PaymentInitiationPaymentReverseRequest} The populated <code>PaymentInitiationPaymentReverseRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentInitiationPaymentReverseRequest();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = PaymentAmountToRefund.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('idempotency_key')) {
                obj['idempotency_key'] = ApiClient.convertToType(data['idempotency_key'], 'String');
            }
            if (data.hasOwnProperty('payment_id')) {
                obj['payment_id'] = ApiClient.convertToType(data['payment_id'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentInitiationPaymentReverseRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentInitiationPaymentReverseRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentInitiationPaymentReverseRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          PaymentAmountToRefund.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['idempotency_key'] && !(typeof data['idempotency_key'] === 'string' || data['idempotency_key'] instanceof String)) {
            throw new Error("Expected the field `idempotency_key` to be a primitive type in the JSON string but got " + data['idempotency_key']);
        }
        // ensure the json data is a string
        if (data['payment_id'] && !(typeof data['payment_id'] === 'string' || data['payment_id'] instanceof String)) {
            throw new Error("Expected the field `payment_id` to be a primitive type in the JSON string but got " + data['payment_id']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }

        return true;
    }


}

PaymentInitiationPaymentReverseRequest.RequiredProperties = ["idempotency_key", "payment_id", "reference"];

/**
 * @member {module:model/PaymentAmountToRefund} amount
 */
PaymentInitiationPaymentReverseRequest.prototype['amount'] = undefined;

/**
 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
 * @member {String} client_id
 */
PaymentInitiationPaymentReverseRequest.prototype['client_id'] = undefined;

/**
 * A random key provided by the client, per unique wallet transaction. Maximum of 128 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a wallet transaction fails due to a network connection error, then after a minimum delay of one minute, you can retry the request with the same idempotency key to guarantee that only a single wallet transaction is created. If the request was successfully processed, it will prevent any transaction that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
 * @member {String} idempotency_key
 */
PaymentInitiationPaymentReverseRequest.prototype['idempotency_key'] = undefined;

/**
 * The ID of the payment to reverse
 * @member {String} payment_id
 */
PaymentInitiationPaymentReverseRequest.prototype['payment_id'] = undefined;

/**
 * A reference for the refund. This must be an alphanumeric string with 6 to 18 characters and must not contain any special characters or spaces.
 * @member {String} reference
 */
PaymentInitiationPaymentReverseRequest.prototype['reference'] = undefined;

/**
 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
 * @member {String} secret
 */
PaymentInitiationPaymentReverseRequest.prototype['secret'] = undefined;






export default PaymentInitiationPaymentReverseRequest;

