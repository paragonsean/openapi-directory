/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The W2StateAndLocalWages model module.
 * @module model/W2StateAndLocalWages
 * @version 2020-09-14_1.345.1
 */
class W2StateAndLocalWages {
    /**
     * Constructs a new <code>W2StateAndLocalWages</code>.
     * W2 state and local wages
     * @alias module:model/W2StateAndLocalWages
     * @extends Object
     */
    constructor() { 
        
        W2StateAndLocalWages.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>W2StateAndLocalWages</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/W2StateAndLocalWages} obj Optional instance to populate.
     * @return {module:model/W2StateAndLocalWages} The populated <code>W2StateAndLocalWages</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new W2StateAndLocalWages();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('employer_state_id_number')) {
                obj['employer_state_id_number'] = ApiClient.convertToType(data['employer_state_id_number'], 'String');
            }
            if (data.hasOwnProperty('local_income_tax')) {
                obj['local_income_tax'] = ApiClient.convertToType(data['local_income_tax'], 'String');
            }
            if (data.hasOwnProperty('local_wages_tips')) {
                obj['local_wages_tips'] = ApiClient.convertToType(data['local_wages_tips'], 'String');
            }
            if (data.hasOwnProperty('locality_name')) {
                obj['locality_name'] = ApiClient.convertToType(data['locality_name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('state_income_tax')) {
                obj['state_income_tax'] = ApiClient.convertToType(data['state_income_tax'], 'String');
            }
            if (data.hasOwnProperty('state_wages_tips')) {
                obj['state_wages_tips'] = ApiClient.convertToType(data['state_wages_tips'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>W2StateAndLocalWages</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>W2StateAndLocalWages</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['employer_state_id_number'] && !(typeof data['employer_state_id_number'] === 'string' || data['employer_state_id_number'] instanceof String)) {
            throw new Error("Expected the field `employer_state_id_number` to be a primitive type in the JSON string but got " + data['employer_state_id_number']);
        }
        // ensure the json data is a string
        if (data['local_income_tax'] && !(typeof data['local_income_tax'] === 'string' || data['local_income_tax'] instanceof String)) {
            throw new Error("Expected the field `local_income_tax` to be a primitive type in the JSON string but got " + data['local_income_tax']);
        }
        // ensure the json data is a string
        if (data['local_wages_tips'] && !(typeof data['local_wages_tips'] === 'string' || data['local_wages_tips'] instanceof String)) {
            throw new Error("Expected the field `local_wages_tips` to be a primitive type in the JSON string but got " + data['local_wages_tips']);
        }
        // ensure the json data is a string
        if (data['locality_name'] && !(typeof data['locality_name'] === 'string' || data['locality_name'] instanceof String)) {
            throw new Error("Expected the field `locality_name` to be a primitive type in the JSON string but got " + data['locality_name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['state_income_tax'] && !(typeof data['state_income_tax'] === 'string' || data['state_income_tax'] instanceof String)) {
            throw new Error("Expected the field `state_income_tax` to be a primitive type in the JSON string but got " + data['state_income_tax']);
        }
        // ensure the json data is a string
        if (data['state_wages_tips'] && !(typeof data['state_wages_tips'] === 'string' || data['state_wages_tips'] instanceof String)) {
            throw new Error("Expected the field `state_wages_tips` to be a primitive type in the JSON string but got " + data['state_wages_tips']);
        }

        return true;
    }


}



/**
 * State identification number of the employer.
 * @member {String} employer_state_id_number
 */
W2StateAndLocalWages.prototype['employer_state_id_number'] = undefined;

/**
 * Income tax from the locality.
 * @member {String} local_income_tax
 */
W2StateAndLocalWages.prototype['local_income_tax'] = undefined;

/**
 * Wages and tips from the locality.
 * @member {String} local_wages_tips
 */
W2StateAndLocalWages.prototype['local_wages_tips'] = undefined;

/**
 * Name of the locality.
 * @member {String} locality_name
 */
W2StateAndLocalWages.prototype['locality_name'] = undefined;

/**
 * State associated with the wage.
 * @member {String} state
 */
W2StateAndLocalWages.prototype['state'] = undefined;

/**
 * Income tax from the specified state.
 * @member {String} state_income_tax
 */
W2StateAndLocalWages.prototype['state_income_tax'] = undefined;

/**
 * Wages and tips from the specified state.
 * @member {String} state_wages_tips
 */
W2StateAndLocalWages.prototype['state_wages_tips'] = undefined;






export default W2StateAndLocalWages;

