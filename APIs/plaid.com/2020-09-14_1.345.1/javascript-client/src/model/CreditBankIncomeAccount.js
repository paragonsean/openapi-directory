/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreditBankIncomeAccountType from './CreditBankIncomeAccountType';
import DepositoryAccountSubtype from './DepositoryAccountSubtype';
import Owner from './Owner';

/**
 * The CreditBankIncomeAccount model module.
 * @module model/CreditBankIncomeAccount
 * @version 2020-09-14_1.345.1
 */
class CreditBankIncomeAccount {
    /**
     * Constructs a new <code>CreditBankIncomeAccount</code>.
     * The Item&#39;s bank accounts that have the selected data.
     * @alias module:model/CreditBankIncomeAccount
     * @param accountId {String} Plaid's unique identifier for the account.
     * @param mask {String} The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
     * @param name {String} The name of the bank account.
     * @param officialName {String} The official name of the bank account.
     * @param owners {Array.<module:model/Owner>} Data returned by the financial institution about the account owner or owners. Identity information is optional, so field may return an empty array.
     * @param subtype {module:model/DepositoryAccountSubtype} 
     * @param type {module:model/CreditBankIncomeAccountType} 
     */
    constructor(accountId, mask, name, officialName, owners, subtype, type) { 
        
        CreditBankIncomeAccount.initialize(this, accountId, mask, name, officialName, owners, subtype, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, mask, name, officialName, owners, subtype, type) { 
        obj['account_id'] = accountId;
        obj['mask'] = mask;
        obj['name'] = name;
        obj['official_name'] = officialName;
        obj['owners'] = owners;
        obj['subtype'] = subtype;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>CreditBankIncomeAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreditBankIncomeAccount} obj Optional instance to populate.
     * @return {module:model/CreditBankIncomeAccount} The populated <code>CreditBankIncomeAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreditBankIncomeAccount();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('mask')) {
                obj['mask'] = ApiClient.convertToType(data['mask'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('official_name')) {
                obj['official_name'] = ApiClient.convertToType(data['official_name'], 'String');
            }
            if (data.hasOwnProperty('owners')) {
                obj['owners'] = ApiClient.convertToType(data['owners'], [Owner]);
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = DepositoryAccountSubtype.constructFromObject(data['subtype']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = CreditBankIncomeAccountType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreditBankIncomeAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreditBankIncomeAccount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreditBankIncomeAccount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['mask'] && !(typeof data['mask'] === 'string' || data['mask'] instanceof String)) {
            throw new Error("Expected the field `mask` to be a primitive type in the JSON string but got " + data['mask']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['official_name'] && !(typeof data['official_name'] === 'string' || data['official_name'] instanceof String)) {
            throw new Error("Expected the field `official_name` to be a primitive type in the JSON string but got " + data['official_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['owners'])) {
            throw new Error("Expected the field `owners` to be an array in the JSON data but got " + data['owners']);
        }

        return true;
    }


}

CreditBankIncomeAccount.RequiredProperties = ["account_id", "mask", "name", "official_name", "owners", "subtype", "type"];

/**
 * Plaid's unique identifier for the account.
 * @member {String} account_id
 */
CreditBankIncomeAccount.prototype['account_id'] = undefined;

/**
 * The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
 * @member {String} mask
 */
CreditBankIncomeAccount.prototype['mask'] = undefined;

/**
 * The name of the bank account.
 * @member {String} name
 */
CreditBankIncomeAccount.prototype['name'] = undefined;

/**
 * The official name of the bank account.
 * @member {String} official_name
 */
CreditBankIncomeAccount.prototype['official_name'] = undefined;

/**
 * Data returned by the financial institution about the account owner or owners. Identity information is optional, so field may return an empty array.
 * @member {Array.<module:model/Owner>} owners
 */
CreditBankIncomeAccount.prototype['owners'] = undefined;

/**
 * @member {module:model/DepositoryAccountSubtype} subtype
 */
CreditBankIncomeAccount.prototype['subtype'] = undefined;

/**
 * @member {module:model/CreditBankIncomeAccountType} type
 */
CreditBankIncomeAccount.prototype['type'] = undefined;






export default CreditBankIncomeAccount;

