/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IndividualWatchlistCode from './IndividualWatchlistCode';
import ScreeningHitAnalysis from './ScreeningHitAnalysis';
import ScreeningHitData from './ScreeningHitData';
import WatchlistScreeningHitStatus from './WatchlistScreeningHitStatus';

/**
 * The WatchlistScreeningHit model module.
 * @module model/WatchlistScreeningHit
 * @version 2020-09-14_1.345.1
 */
class WatchlistScreeningHit {
    /**
     * Constructs a new <code>WatchlistScreeningHit</code>.
     * Data from a government watchlist or PEP list that has been attached to the screening.
     * @alias module:model/WatchlistScreeningHit
     * @extends Object
     * @param firstActive {Date} An ISO8601 formatted timestamp.
     * @param historicalSince {Date} An ISO8601 formatted timestamp.
     * @param id {String} ID of the associated screening hit.
     * @param inactiveSince {Date} An ISO8601 formatted timestamp.
     * @param listCode {module:model/IndividualWatchlistCode} 
     * @param plaidUid {String} A universal identifier for a watchlist individual that is stable across searches and updates.
     * @param reviewStatus {module:model/WatchlistScreeningHitStatus} 
     * @param sourceUid {String} The identifier provided by the source sanction or watchlist. When one is not provided by the source, this is `null`.
     */
    constructor(firstActive, historicalSince, id, inactiveSince, listCode, plaidUid, reviewStatus, sourceUid) { 
        
        WatchlistScreeningHit.initialize(this, firstActive, historicalSince, id, inactiveSince, listCode, plaidUid, reviewStatus, sourceUid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, firstActive, historicalSince, id, inactiveSince, listCode, plaidUid, reviewStatus, sourceUid) { 
        obj['first_active'] = firstActive;
        obj['historical_since'] = historicalSince;
        obj['id'] = id;
        obj['inactive_since'] = inactiveSince;
        obj['list_code'] = listCode;
        obj['plaid_uid'] = plaidUid;
        obj['review_status'] = reviewStatus;
        obj['source_uid'] = sourceUid;
    }

    /**
     * Constructs a <code>WatchlistScreeningHit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WatchlistScreeningHit} obj Optional instance to populate.
     * @return {module:model/WatchlistScreeningHit} The populated <code>WatchlistScreeningHit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WatchlistScreeningHit();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('analysis')) {
                obj['analysis'] = ScreeningHitAnalysis.constructFromObject(data['analysis']);
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ScreeningHitData.constructFromObject(data['data']);
            }
            if (data.hasOwnProperty('first_active')) {
                obj['first_active'] = ApiClient.convertToType(data['first_active'], 'Date');
            }
            if (data.hasOwnProperty('historical_since')) {
                obj['historical_since'] = ApiClient.convertToType(data['historical_since'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('inactive_since')) {
                obj['inactive_since'] = ApiClient.convertToType(data['inactive_since'], 'Date');
            }
            if (data.hasOwnProperty('list_code')) {
                obj['list_code'] = IndividualWatchlistCode.constructFromObject(data['list_code']);
            }
            if (data.hasOwnProperty('plaid_uid')) {
                obj['plaid_uid'] = ApiClient.convertToType(data['plaid_uid'], 'String');
            }
            if (data.hasOwnProperty('review_status')) {
                obj['review_status'] = WatchlistScreeningHitStatus.constructFromObject(data['review_status']);
            }
            if (data.hasOwnProperty('source_uid')) {
                obj['source_uid'] = ApiClient.convertToType(data['source_uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WatchlistScreeningHit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WatchlistScreeningHit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WatchlistScreeningHit.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['plaid_uid'] && !(typeof data['plaid_uid'] === 'string' || data['plaid_uid'] instanceof String)) {
            throw new Error("Expected the field `plaid_uid` to be a primitive type in the JSON string but got " + data['plaid_uid']);
        }
        // ensure the json data is a string
        if (data['source_uid'] && !(typeof data['source_uid'] === 'string' || data['source_uid'] instanceof String)) {
            throw new Error("Expected the field `source_uid` to be a primitive type in the JSON string but got " + data['source_uid']);
        }

        return true;
    }


}

WatchlistScreeningHit.RequiredProperties = ["first_active", "historical_since", "id", "inactive_since", "list_code", "plaid_uid", "review_status", "source_uid"];

/**
 * @member {module:model/ScreeningHitAnalysis} analysis
 */
WatchlistScreeningHit.prototype['analysis'] = undefined;

/**
 * @member {module:model/ScreeningHitData} data
 */
WatchlistScreeningHit.prototype['data'] = undefined;

/**
 * An ISO8601 formatted timestamp.
 * @member {Date} first_active
 */
WatchlistScreeningHit.prototype['first_active'] = undefined;

/**
 * An ISO8601 formatted timestamp.
 * @member {Date} historical_since
 */
WatchlistScreeningHit.prototype['historical_since'] = undefined;

/**
 * ID of the associated screening hit.
 * @member {String} id
 */
WatchlistScreeningHit.prototype['id'] = undefined;

/**
 * An ISO8601 formatted timestamp.
 * @member {Date} inactive_since
 */
WatchlistScreeningHit.prototype['inactive_since'] = undefined;

/**
 * @member {module:model/IndividualWatchlistCode} list_code
 */
WatchlistScreeningHit.prototype['list_code'] = undefined;

/**
 * A universal identifier for a watchlist individual that is stable across searches and updates.
 * @member {String} plaid_uid
 */
WatchlistScreeningHit.prototype['plaid_uid'] = undefined;

/**
 * @member {module:model/WatchlistScreeningHitStatus} review_status
 */
WatchlistScreeningHit.prototype['review_status'] = undefined;

/**
 * The identifier provided by the source sanction or watchlist. When one is not provided by the source, this is `null`.
 * @member {String} source_uid
 */
WatchlistScreeningHit.prototype['source_uid'] = undefined;






export default WatchlistScreeningHit;

