/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransferSweep model module.
 * @module model/TransferSweep
 * @version 2020-09-14_1.345.1
 */
class TransferSweep {
    /**
     * Constructs a new <code>TransferSweep</code>.
     * Describes a sweep of funds to / from the sweep account.  A sweep is associated with many sweep events (events of type &#x60;swept&#x60; or &#x60;return_swept&#x60;) which can be retrieved by invoking the &#x60;/transfer/event/list&#x60; endpoint with the corresponding &#x60;sweep_id&#x60;.  &#x60;swept&#x60; events occur when the transfer amount is credited or debited from your sweep account, depending on the &#x60;type&#x60; of the transfer. &#x60;return_swept&#x60; events occur when a transfer is returned and Plaid undoes the credit or debit.  The total sum of the &#x60;swept&#x60; and &#x60;return_swept&#x60; events is equal to the &#x60;amount&#x60; of the sweep Plaid creates and matches the amount of the entry on your sweep account ledger.
     * @alias module:model/TransferSweep
     * @extends Object
     * @param amount {String} Signed decimal amount of the sweep as it appears on your sweep account ledger (e.g. \"-10.00\")  If amount is not present, the sweep was net-settled to zero and outstanding debits and credits between the sweep account and Plaid are balanced.
     * @param created {Date} The datetime when the sweep occurred, in RFC 3339 format.
     * @param fundingAccountId {String} The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
     * @param id {String} Identifier of the sweep.
     * @param isoCurrencyCode {String} The currency of the sweep, e.g. \"USD\".
     * @param settled {Date} The date when the sweep settled, in the YYYY-MM-DD format.
     */
    constructor(amount, created, fundingAccountId, id, isoCurrencyCode, settled) { 
        
        TransferSweep.initialize(this, amount, created, fundingAccountId, id, isoCurrencyCode, settled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, created, fundingAccountId, id, isoCurrencyCode, settled) { 
        obj['amount'] = amount;
        obj['created'] = created;
        obj['funding_account_id'] = fundingAccountId;
        obj['id'] = id;
        obj['iso_currency_code'] = isoCurrencyCode;
        obj['settled'] = settled;
    }

    /**
     * Constructs a <code>TransferSweep</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferSweep} obj Optional instance to populate.
     * @return {module:model/TransferSweep} The populated <code>TransferSweep</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferSweep();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('funding_account_id')) {
                obj['funding_account_id'] = ApiClient.convertToType(data['funding_account_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('iso_currency_code')) {
                obj['iso_currency_code'] = ApiClient.convertToType(data['iso_currency_code'], 'String');
            }
            if (data.hasOwnProperty('settled')) {
                obj['settled'] = ApiClient.convertToType(data['settled'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferSweep</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferSweep</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransferSweep.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['funding_account_id'] && !(typeof data['funding_account_id'] === 'string' || data['funding_account_id'] instanceof String)) {
            throw new Error("Expected the field `funding_account_id` to be a primitive type in the JSON string but got " + data['funding_account_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['iso_currency_code'] && !(typeof data['iso_currency_code'] === 'string' || data['iso_currency_code'] instanceof String)) {
            throw new Error("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got " + data['iso_currency_code']);
        }

        return true;
    }


}

TransferSweep.RequiredProperties = ["amount", "created", "funding_account_id", "id", "iso_currency_code", "settled"];

/**
 * Signed decimal amount of the sweep as it appears on your sweep account ledger (e.g. \"-10.00\")  If amount is not present, the sweep was net-settled to zero and outstanding debits and credits between the sweep account and Plaid are balanced.
 * @member {String} amount
 */
TransferSweep.prototype['amount'] = undefined;

/**
 * The datetime when the sweep occurred, in RFC 3339 format.
 * @member {Date} created
 */
TransferSweep.prototype['created'] = undefined;

/**
 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
 * @member {String} funding_account_id
 */
TransferSweep.prototype['funding_account_id'] = undefined;

/**
 * Identifier of the sweep.
 * @member {String} id
 */
TransferSweep.prototype['id'] = undefined;

/**
 * The currency of the sweep, e.g. \"USD\".
 * @member {String} iso_currency_code
 */
TransferSweep.prototype['iso_currency_code'] = undefined;

/**
 * The date when the sweep settled, in the YYYY-MM-DD format.
 * @member {Date} settled
 */
TransferSweep.prototype['settled'] = undefined;






export default TransferSweep;

