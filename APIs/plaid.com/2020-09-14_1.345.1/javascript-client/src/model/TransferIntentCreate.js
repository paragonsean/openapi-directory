/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ACHClass from './ACHClass';
import TransferIntentCreateMode from './TransferIntentCreateMode';
import TransferIntentCreateNetwork from './TransferIntentCreateNetwork';
import TransferIntentStatus from './TransferIntentStatus';
import TransferUserInResponse from './TransferUserInResponse';

/**
 * The TransferIntentCreate model module.
 * @module model/TransferIntentCreate
 * @version 2020-09-14_1.345.1
 */
class TransferIntentCreate {
    /**
     * Constructs a new <code>TransferIntentCreate</code>.
     * Represents a transfer intent within Transfer UI.
     * @alias module:model/TransferIntentCreate
     * @extends Object
     * @param amount {String} The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @param created {Date} The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`.
     * @param description {String} A description for the underlying transfer. Maximum of 8 characters.
     * @param fundingAccountId {String} The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
     * @param id {String} Plaid's unique identifier for the transfer intent object.
     * @param isoCurrencyCode {String} The currency of the transfer amount, e.g. \"USD\"
     * @param mode {module:model/TransferIntentCreateMode} 
     * @param originationAccountId {String} Plaidâ€™s unique identifier for the origination account for the intent. If not provided, the default account will be used.
     * @param status {module:model/TransferIntentStatus} 
     * @param user {module:model/TransferUserInResponse} 
     */
    constructor(amount, created, description, fundingAccountId, id, isoCurrencyCode, mode, originationAccountId, status, user) { 
        
        TransferIntentCreate.initialize(this, amount, created, description, fundingAccountId, id, isoCurrencyCode, mode, originationAccountId, status, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, created, description, fundingAccountId, id, isoCurrencyCode, mode, originationAccountId, status, user) { 
        obj['amount'] = amount;
        obj['created'] = created;
        obj['description'] = description;
        obj['funding_account_id'] = fundingAccountId;
        obj['id'] = id;
        obj['iso_currency_code'] = isoCurrencyCode;
        obj['mode'] = mode;
        obj['origination_account_id'] = originationAccountId;
        obj['status'] = status;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>TransferIntentCreate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferIntentCreate} obj Optional instance to populate.
     * @return {module:model/TransferIntentCreate} The populated <code>TransferIntentCreate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferIntentCreate();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('ach_class')) {
                obj['ach_class'] = ACHClass.constructFromObject(data['ach_class']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('funding_account_id')) {
                obj['funding_account_id'] = ApiClient.convertToType(data['funding_account_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('iso_currency_code')) {
                obj['iso_currency_code'] = ApiClient.convertToType(data['iso_currency_code'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = TransferIntentCreateMode.constructFromObject(data['mode']);
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = TransferIntentCreateNetwork.constructFromObject(data['network']);
            }
            if (data.hasOwnProperty('origination_account_id')) {
                obj['origination_account_id'] = ApiClient.convertToType(data['origination_account_id'], 'String');
            }
            if (data.hasOwnProperty('require_guarantee')) {
                obj['require_guarantee'] = ApiClient.convertToType(data['require_guarantee'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TransferIntentStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = TransferUserInResponse.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferIntentCreate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferIntentCreate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransferIntentCreate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['funding_account_id'] && !(typeof data['funding_account_id'] === 'string' || data['funding_account_id'] instanceof String)) {
            throw new Error("Expected the field `funding_account_id` to be a primitive type in the JSON string but got " + data['funding_account_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['iso_currency_code'] && !(typeof data['iso_currency_code'] === 'string' || data['iso_currency_code'] instanceof String)) {
            throw new Error("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got " + data['iso_currency_code']);
        }
        // ensure the json data is a string
        if (data['origination_account_id'] && !(typeof data['origination_account_id'] === 'string' || data['origination_account_id'] instanceof String)) {
            throw new Error("Expected the field `origination_account_id` to be a primitive type in the JSON string but got " + data['origination_account_id']);
        }

        return true;
    }


}

TransferIntentCreate.RequiredProperties = ["amount", "created", "description", "funding_account_id", "id", "iso_currency_code", "mode", "origination_account_id", "status", "user"];

/**
 * The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation.
 * @member {String} account_id
 */
TransferIntentCreate.prototype['account_id'] = undefined;

/**
 * @member {module:model/ACHClass} ach_class
 */
TransferIntentCreate.prototype['ach_class'] = undefined;

/**
 * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
 * @member {String} amount
 */
TransferIntentCreate.prototype['amount'] = undefined;

/**
 * The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`.
 * @member {Date} created
 */
TransferIntentCreate.prototype['created'] = undefined;

/**
 * A description for the underlying transfer. Maximum of 8 characters.
 * @member {String} description
 */
TransferIntentCreate.prototype['description'] = undefined;

/**
 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
 * @member {String} funding_account_id
 */
TransferIntentCreate.prototype['funding_account_id'] = undefined;

/**
 * Plaid's unique identifier for the transfer intent object.
 * @member {String} id
 */
TransferIntentCreate.prototype['id'] = undefined;

/**
 * The currency of the transfer amount, e.g. \"USD\"
 * @member {String} iso_currency_code
 */
TransferIntentCreate.prototype['iso_currency_code'] = undefined;

/**
 * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters 
 * @member {Object.<String, String>} metadata
 */
TransferIntentCreate.prototype['metadata'] = undefined;

/**
 * @member {module:model/TransferIntentCreateMode} mode
 */
TransferIntentCreate.prototype['mode'] = undefined;

/**
 * @member {module:model/TransferIntentCreateNetwork} network
 */
TransferIntentCreate.prototype['network'] = undefined;

/**
 * Plaidâ€™s unique identifier for the origination account for the intent. If not provided, the default account will be used.
 * @member {String} origination_account_id
 */
TransferIntentCreate.prototype['origination_account_id'] = undefined;

/**
 * When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guarantee customers only).
 * @member {Boolean} require_guarantee
 */
TransferIntentCreate.prototype['require_guarantee'] = undefined;

/**
 * @member {module:model/TransferIntentStatus} status
 */
TransferIntentCreate.prototype['status'] = undefined;

/**
 * @member {module:model/TransferUserInResponse} user
 */
TransferIntentCreate.prototype['user'] = undefined;






export default TransferIntentCreate;

