/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentRiskSignalInstitutionMetadata from './DocumentRiskSignalInstitutionMetadata';

/**
 * The DocumentRiskSignal model module.
 * @module model/DocumentRiskSignal
 * @version 2020-09-14_1.345.1
 */
class DocumentRiskSignal {
    /**
     * Constructs a new <code>DocumentRiskSignal</code>.
     * Details about a certain reason as to why a document could potentially be fraudulent.
     * @alias module:model/DocumentRiskSignal
     * @extends Object
     * @param actualValue {String} The derived value obtained in the risk signal calculation process for this field
     * @param expectedValue {String} The expected value of the field, as seen on the document
     * @param field {String} The field which the risk signal was computed for
     * @param hasFraudRisk {Boolean} A flag used to quickly identify if the signal indicates that this field is authentic or fraudulent
     * @param institutionMetadata {module:model/DocumentRiskSignalInstitutionMetadata} 
     * @param pageNumber {Number} The relevant page associated with the risk signal
     * @param signalDescription {String} A human-readable explanation providing more detail into the particular risk signal
     * @param type {String} The result from the risk signal check.
     */
    constructor(actualValue, expectedValue, field, hasFraudRisk, institutionMetadata, pageNumber, signalDescription, type) { 
        
        DocumentRiskSignal.initialize(this, actualValue, expectedValue, field, hasFraudRisk, institutionMetadata, pageNumber, signalDescription, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actualValue, expectedValue, field, hasFraudRisk, institutionMetadata, pageNumber, signalDescription, type) { 
        obj['actual_value'] = actualValue;
        obj['expected_value'] = expectedValue;
        obj['field'] = field;
        obj['has_fraud_risk'] = hasFraudRisk;
        obj['institution_metadata'] = institutionMetadata;
        obj['page_number'] = pageNumber;
        obj['signal_description'] = signalDescription;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>DocumentRiskSignal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentRiskSignal} obj Optional instance to populate.
     * @return {module:model/DocumentRiskSignal} The populated <code>DocumentRiskSignal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentRiskSignal();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('actual_value')) {
                obj['actual_value'] = ApiClient.convertToType(data['actual_value'], 'String');
            }
            if (data.hasOwnProperty('expected_value')) {
                obj['expected_value'] = ApiClient.convertToType(data['expected_value'], 'String');
            }
            if (data.hasOwnProperty('field')) {
                obj['field'] = ApiClient.convertToType(data['field'], 'String');
            }
            if (data.hasOwnProperty('has_fraud_risk')) {
                obj['has_fraud_risk'] = ApiClient.convertToType(data['has_fraud_risk'], 'Boolean');
            }
            if (data.hasOwnProperty('institution_metadata')) {
                obj['institution_metadata'] = DocumentRiskSignalInstitutionMetadata.constructFromObject(data['institution_metadata']);
            }
            if (data.hasOwnProperty('page_number')) {
                obj['page_number'] = ApiClient.convertToType(data['page_number'], 'Number');
            }
            if (data.hasOwnProperty('signal_description')) {
                obj['signal_description'] = ApiClient.convertToType(data['signal_description'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentRiskSignal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentRiskSignal</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentRiskSignal.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['actual_value'] && !(typeof data['actual_value'] === 'string' || data['actual_value'] instanceof String)) {
            throw new Error("Expected the field `actual_value` to be a primitive type in the JSON string but got " + data['actual_value']);
        }
        // ensure the json data is a string
        if (data['expected_value'] && !(typeof data['expected_value'] === 'string' || data['expected_value'] instanceof String)) {
            throw new Error("Expected the field `expected_value` to be a primitive type in the JSON string but got " + data['expected_value']);
        }
        // ensure the json data is a string
        if (data['field'] && !(typeof data['field'] === 'string' || data['field'] instanceof String)) {
            throw new Error("Expected the field `field` to be a primitive type in the JSON string but got " + data['field']);
        }
        // ensure the json data is a string
        if (data['signal_description'] && !(typeof data['signal_description'] === 'string' || data['signal_description'] instanceof String)) {
            throw new Error("Expected the field `signal_description` to be a primitive type in the JSON string but got " + data['signal_description']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

DocumentRiskSignal.RequiredProperties = ["actual_value", "expected_value", "field", "has_fraud_risk", "institution_metadata", "page_number", "signal_description", "type"];

/**
 * The derived value obtained in the risk signal calculation process for this field
 * @member {String} actual_value
 */
DocumentRiskSignal.prototype['actual_value'] = undefined;

/**
 * The expected value of the field, as seen on the document
 * @member {String} expected_value
 */
DocumentRiskSignal.prototype['expected_value'] = undefined;

/**
 * The field which the risk signal was computed for
 * @member {String} field
 */
DocumentRiskSignal.prototype['field'] = undefined;

/**
 * A flag used to quickly identify if the signal indicates that this field is authentic or fraudulent
 * @member {Boolean} has_fraud_risk
 */
DocumentRiskSignal.prototype['has_fraud_risk'] = undefined;

/**
 * @member {module:model/DocumentRiskSignalInstitutionMetadata} institution_metadata
 */
DocumentRiskSignal.prototype['institution_metadata'] = undefined;

/**
 * The relevant page associated with the risk signal
 * @member {Number} page_number
 */
DocumentRiskSignal.prototype['page_number'] = undefined;

/**
 * A human-readable explanation providing more detail into the particular risk signal
 * @member {String} signal_description
 */
DocumentRiskSignal.prototype['signal_description'] = undefined;

/**
 * The result from the risk signal check.
 * @member {String} type
 */
DocumentRiskSignal.prototype['type'] = undefined;






export default DocumentRiskSignal;

