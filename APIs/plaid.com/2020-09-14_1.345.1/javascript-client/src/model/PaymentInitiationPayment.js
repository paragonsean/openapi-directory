/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExternalPaymentRefundDetails from './ExternalPaymentRefundDetails';
import ExternalPaymentScheduleGet from './ExternalPaymentScheduleGet';
import PaymentAmount from './PaymentAmount';
import PaymentAmountRefunded from './PaymentAmountRefunded';
import PaymentInitiationPaymentStatus from './PaymentInitiationPaymentStatus';
import PaymentScheme from './PaymentScheme';
import SenderBACSNullable from './SenderBACSNullable';

/**
 * The PaymentInitiationPayment model module.
 * @module model/PaymentInitiationPayment
 * @version 2020-09-14_1.345.1
 */
class PaymentInitiationPayment {
    /**
     * Constructs a new <code>PaymentInitiationPayment</code>.
     * PaymentInitiationPayment defines a payment initiation payment
     * @alias module:model/PaymentInitiationPayment
     * @extends Object
     * @param amount {module:model/PaymentAmount} 
     * @param bacs {module:model/SenderBACSNullable} 
     * @param iban {String} The International Bank Account Number (IBAN) for the sender, if specified in the `/payment_initiation/payment/create` call.
     * @param lastStatusUpdate {Date} The date and time of the last time the `status` was updated, in IS0 8601 format
     * @param paymentId {String} The ID of the payment. Like all Plaid identifiers, the `payment_id` is case sensitive.
     * @param recipientId {String} The ID of the recipient
     * @param reference {String} A reference for the payment.
     * @param status {module:model/PaymentInitiationPaymentStatus} 
     */
    constructor(amount, bacs, iban, lastStatusUpdate, paymentId, recipientId, reference, status) { 
        
        PaymentInitiationPayment.initialize(this, amount, bacs, iban, lastStatusUpdate, paymentId, recipientId, reference, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, bacs, iban, lastStatusUpdate, paymentId, recipientId, reference, status) { 
        obj['amount'] = amount;
        obj['bacs'] = bacs;
        obj['iban'] = iban;
        obj['last_status_update'] = lastStatusUpdate;
        obj['payment_id'] = paymentId;
        obj['recipient_id'] = recipientId;
        obj['reference'] = reference;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>PaymentInitiationPayment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentInitiationPayment} obj Optional instance to populate.
     * @return {module:model/PaymentInitiationPayment} The populated <code>PaymentInitiationPayment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentInitiationPayment();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('adjusted_reference')) {
                obj['adjusted_reference'] = ApiClient.convertToType(data['adjusted_reference'], 'String');
            }
            if (data.hasOwnProperty('adjusted_scheme')) {
                obj['adjusted_scheme'] = PaymentScheme.constructFromObject(data['adjusted_scheme']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = PaymentAmount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('amount_refunded')) {
                obj['amount_refunded'] = PaymentAmountRefunded.constructFromObject(data['amount_refunded']);
            }
            if (data.hasOwnProperty('bacs')) {
                obj['bacs'] = SenderBACSNullable.constructFromObject(data['bacs']);
            }
            if (data.hasOwnProperty('consent_id')) {
                obj['consent_id'] = ApiClient.convertToType(data['consent_id'], 'String');
            }
            if (data.hasOwnProperty('iban')) {
                obj['iban'] = ApiClient.convertToType(data['iban'], 'String');
            }
            if (data.hasOwnProperty('last_status_update')) {
                obj['last_status_update'] = ApiClient.convertToType(data['last_status_update'], 'Date');
            }
            if (data.hasOwnProperty('payment_id')) {
                obj['payment_id'] = ApiClient.convertToType(data['payment_id'], 'String');
            }
            if (data.hasOwnProperty('recipient_id')) {
                obj['recipient_id'] = ApiClient.convertToType(data['recipient_id'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('refund_details')) {
                obj['refund_details'] = ExternalPaymentRefundDetails.constructFromObject(data['refund_details']);
            }
            if (data.hasOwnProperty('refund_ids')) {
                obj['refund_ids'] = ApiClient.convertToType(data['refund_ids'], ['String']);
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ExternalPaymentScheduleGet.constructFromObject(data['schedule']);
            }
            if (data.hasOwnProperty('scheme')) {
                obj['scheme'] = PaymentScheme.constructFromObject(data['scheme']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = PaymentInitiationPaymentStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('wallet_id')) {
                obj['wallet_id'] = ApiClient.convertToType(data['wallet_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentInitiationPayment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentInitiationPayment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentInitiationPayment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['adjusted_reference'] && !(typeof data['adjusted_reference'] === 'string' || data['adjusted_reference'] instanceof String)) {
            throw new Error("Expected the field `adjusted_reference` to be a primitive type in the JSON string but got " + data['adjusted_reference']);
        }
        // validate the optional field `amount_refunded`
        if (data['amount_refunded']) { // data not null
          PaymentAmountRefunded.validateJSON(data['amount_refunded']);
        }
        // validate the optional field `bacs`
        if (data['bacs']) { // data not null
          SenderBACSNullable.validateJSON(data['bacs']);
        }
        // ensure the json data is a string
        if (data['consent_id'] && !(typeof data['consent_id'] === 'string' || data['consent_id'] instanceof String)) {
            throw new Error("Expected the field `consent_id` to be a primitive type in the JSON string but got " + data['consent_id']);
        }
        // ensure the json data is a string
        if (data['iban'] && !(typeof data['iban'] === 'string' || data['iban'] instanceof String)) {
            throw new Error("Expected the field `iban` to be a primitive type in the JSON string but got " + data['iban']);
        }
        // ensure the json data is a string
        if (data['payment_id'] && !(typeof data['payment_id'] === 'string' || data['payment_id'] instanceof String)) {
            throw new Error("Expected the field `payment_id` to be a primitive type in the JSON string but got " + data['payment_id']);
        }
        // ensure the json data is a string
        if (data['recipient_id'] && !(typeof data['recipient_id'] === 'string' || data['recipient_id'] instanceof String)) {
            throw new Error("Expected the field `recipient_id` to be a primitive type in the JSON string but got " + data['recipient_id']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // validate the optional field `refund_details`
        if (data['refund_details']) { // data not null
          ExternalPaymentRefundDetails.validateJSON(data['refund_details']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['refund_ids'])) {
            throw new Error("Expected the field `refund_ids` to be an array in the JSON data but got " + data['refund_ids']);
        }
        // validate the optional field `schedule`
        if (data['schedule']) { // data not null
          ExternalPaymentScheduleGet.validateJSON(data['schedule']);
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['wallet_id'] && !(typeof data['wallet_id'] === 'string' || data['wallet_id'] instanceof String)) {
            throw new Error("Expected the field `wallet_id` to be a primitive type in the JSON string but got " + data['wallet_id']);
        }

        return true;
    }


}

PaymentInitiationPayment.RequiredProperties = ["amount", "bacs", "iban", "last_status_update", "payment_id", "recipient_id", "reference", "status"];

/**
 * The value of the reference sent to the bank after adjustment to pass bank validation rules.
 * @member {String} adjusted_reference
 */
PaymentInitiationPayment.prototype['adjusted_reference'] = undefined;

/**
 * @member {module:model/PaymentScheme} adjusted_scheme
 */
PaymentInitiationPayment.prototype['adjusted_scheme'] = undefined;

/**
 * @member {module:model/PaymentAmount} amount
 */
PaymentInitiationPayment.prototype['amount'] = undefined;

/**
 * @member {module:model/PaymentAmountRefunded} amount_refunded
 */
PaymentInitiationPayment.prototype['amount_refunded'] = undefined;

/**
 * @member {module:model/SenderBACSNullable} bacs
 */
PaymentInitiationPayment.prototype['bacs'] = undefined;

/**
 * The payment consent ID that this payment was initiated with. Is present only when payment was initiated using the payment consent.
 * @member {String} consent_id
 */
PaymentInitiationPayment.prototype['consent_id'] = undefined;

/**
 * The International Bank Account Number (IBAN) for the sender, if specified in the `/payment_initiation/payment/create` call.
 * @member {String} iban
 */
PaymentInitiationPayment.prototype['iban'] = undefined;

/**
 * The date and time of the last time the `status` was updated, in IS0 8601 format
 * @member {Date} last_status_update
 */
PaymentInitiationPayment.prototype['last_status_update'] = undefined;

/**
 * The ID of the payment. Like all Plaid identifiers, the `payment_id` is case sensitive.
 * @member {String} payment_id
 */
PaymentInitiationPayment.prototype['payment_id'] = undefined;

/**
 * The ID of the recipient
 * @member {String} recipient_id
 */
PaymentInitiationPayment.prototype['recipient_id'] = undefined;

/**
 * A reference for the payment.
 * @member {String} reference
 */
PaymentInitiationPayment.prototype['reference'] = undefined;

/**
 * @member {module:model/ExternalPaymentRefundDetails} refund_details
 */
PaymentInitiationPayment.prototype['refund_details'] = undefined;

/**
 * Refund IDs associated with the payment.
 * @member {Array.<String>} refund_ids
 */
PaymentInitiationPayment.prototype['refund_ids'] = undefined;

/**
 * @member {module:model/ExternalPaymentScheduleGet} schedule
 */
PaymentInitiationPayment.prototype['schedule'] = undefined;

/**
 * @member {module:model/PaymentScheme} scheme
 */
PaymentInitiationPayment.prototype['scheme'] = undefined;

/**
 * @member {module:model/PaymentInitiationPaymentStatus} status
 */
PaymentInitiationPayment.prototype['status'] = undefined;

/**
 * The transaction ID that this payment is associated with, if any. This is present only when a payment was initiated using virtual accounts.
 * @member {String} transaction_id
 */
PaymentInitiationPayment.prototype['transaction_id'] = undefined;

/**
 * The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
 * @member {String} wallet_id
 */
PaymentInitiationPayment.prototype['wallet_id'] = undefined;






export default PaymentInitiationPayment;

