/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Wallet from './Wallet';
import WalletBalance from './WalletBalance';
import WalletNumbers from './WalletNumbers';
import WalletStatus from './WalletStatus';

/**
 * The WalletCreateResponse model module.
 * @module model/WalletCreateResponse
 * @version 2020-09-14_1.345.1
 */
class WalletCreateResponse {
    /**
     * Constructs a new <code>WalletCreateResponse</code>.
     * WalletCreateResponse defines the response schema for &#x60;/wallet/create&#x60;
     * @alias module:model/WalletCreateResponse
     * @extends Object
     * @implements module:model/Wallet
     * @param balance {module:model/WalletBalance} 
     * @param numbers {module:model/WalletNumbers} 
     * @param status {module:model/WalletStatus} 
     * @param walletId {String} A unique ID identifying the e-wallet
     * @param requestId {String} A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     */
    constructor(balance, numbers, status, walletId, requestId) { 
        Wallet.initialize(this, balance, numbers, status, walletId);
        WalletCreateResponse.initialize(this, balance, numbers, status, walletId, requestId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, balance, numbers, status, walletId, requestId) { 
        obj['balance'] = balance;
        obj['numbers'] = numbers;
        obj['status'] = status;
        obj['wallet_id'] = walletId;
        obj['request_id'] = requestId;
    }

    /**
     * Constructs a <code>WalletCreateResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WalletCreateResponse} obj Optional instance to populate.
     * @return {module:model/WalletCreateResponse} The populated <code>WalletCreateResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WalletCreateResponse();

            ApiClient.constructFromObject(data, obj, 'Object');
            
            Wallet.constructFromObject(data, obj);

            if (data.hasOwnProperty('balance')) {
                obj['balance'] = WalletBalance.constructFromObject(data['balance']);
            }
            if (data.hasOwnProperty('numbers')) {
                obj['numbers'] = WalletNumbers.constructFromObject(data['numbers']);
            }
            if (data.hasOwnProperty('recipient_id')) {
                obj['recipient_id'] = ApiClient.convertToType(data['recipient_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = WalletStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('wallet_id')) {
                obj['wallet_id'] = ApiClient.convertToType(data['wallet_id'], 'String');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WalletCreateResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WalletCreateResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WalletCreateResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['recipient_id'] && !(typeof data['recipient_id'] === 'string' || data['recipient_id'] instanceof String)) {
            throw new Error("Expected the field `recipient_id` to be a primitive type in the JSON string but got " + data['recipient_id']);
        }
        // ensure the json data is a string
        if (data['wallet_id'] && !(typeof data['wallet_id'] === 'string' || data['wallet_id'] instanceof String)) {
            throw new Error("Expected the field `wallet_id` to be a primitive type in the JSON string but got " + data['wallet_id']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }

        return true;
    }


}

WalletCreateResponse.RequiredProperties = ["balance", "numbers", "status", "wallet_id", "request_id"];

/**
 * @member {module:model/WalletBalance} balance
 */
WalletCreateResponse.prototype['balance'] = undefined;

/**
 * @member {module:model/WalletNumbers} numbers
 */
WalletCreateResponse.prototype['numbers'] = undefined;

/**
 * The ID of the recipient that corresponds to the e-wallet account numbers
 * @member {String} recipient_id
 */
WalletCreateResponse.prototype['recipient_id'] = undefined;

/**
 * @member {module:model/WalletStatus} status
 */
WalletCreateResponse.prototype['status'] = undefined;

/**
 * A unique ID identifying the e-wallet
 * @member {String} wallet_id
 */
WalletCreateResponse.prototype['wallet_id'] = undefined;

/**
 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
 * @member {String} request_id
 */
WalletCreateResponse.prototype['request_id'] = undefined;


// Implement Wallet interface:
/**
 * @member {module:model/WalletBalance} balance
 */
Wallet.prototype['balance'] = undefined;
/**
 * @member {module:model/WalletNumbers} numbers
 */
Wallet.prototype['numbers'] = undefined;
/**
 * The ID of the recipient that corresponds to the e-wallet account numbers
 * @member {String} recipient_id
 */
Wallet.prototype['recipient_id'] = undefined;
/**
 * @member {module:model/WalletStatus} status
 */
Wallet.prototype['status'] = undefined;
/**
 * A unique ID identifying the e-wallet
 * @member {String} wallet_id
 */
Wallet.prototype['wallet_id'] = undefined;




export default WalletCreateResponse;

