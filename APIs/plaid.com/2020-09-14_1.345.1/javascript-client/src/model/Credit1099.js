/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Credit1099Filer from './Credit1099Filer';
import Credit1099Payer from './Credit1099Payer';
import Credit1099Recipient from './Credit1099Recipient';
import CreditDocumentMetadata from './CreditDocumentMetadata';
import Form1099Type from './Form1099Type';

/**
 * The Credit1099 model module.
 * @module model/Credit1099
 * @version 2020-09-14_1.345.1
 */
class Credit1099 {
    /**
     * Constructs a new <code>Credit1099</code>.
     * An object representing an end user&#39;s 1099 tax form
     * @alias module:model/Credit1099
     * @extends Object
     * @param documentId {String} An identifier of the document referenced by the document metadata.
     */
    constructor(documentId) { 
        
        Credit1099.initialize(this, documentId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documentId) { 
        obj['document_id'] = documentId;
    }

    /**
     * Constructs a <code>Credit1099</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Credit1099} obj Optional instance to populate.
     * @return {module:model/Credit1099} The populated <code>Credit1099</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Credit1099();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('april_amount')) {
                obj['april_amount'] = ApiClient.convertToType(data['april_amount'], 'Number');
            }
            if (data.hasOwnProperty('august_amount')) {
                obj['august_amount'] = ApiClient.convertToType(data['august_amount'], 'Number');
            }
            if (data.hasOwnProperty('card_not_present_transaction')) {
                obj['card_not_present_transaction'] = ApiClient.convertToType(data['card_not_present_transaction'], 'Number');
            }
            if (data.hasOwnProperty('crop_insurance_proceeds')) {
                obj['crop_insurance_proceeds'] = ApiClient.convertToType(data['crop_insurance_proceeds'], 'Number');
            }
            if (data.hasOwnProperty('december_amount')) {
                obj['december_amount'] = ApiClient.convertToType(data['december_amount'], 'Number');
            }
            if (data.hasOwnProperty('document_id')) {
                obj['document_id'] = ApiClient.convertToType(data['document_id'], 'String');
            }
            if (data.hasOwnProperty('document_metadata')) {
                obj['document_metadata'] = CreditDocumentMetadata.constructFromObject(data['document_metadata']);
            }
            if (data.hasOwnProperty('excess_golden_parachute_payments')) {
                obj['excess_golden_parachute_payments'] = ApiClient.convertToType(data['excess_golden_parachute_payments'], 'Number');
            }
            if (data.hasOwnProperty('february_amount')) {
                obj['february_amount'] = ApiClient.convertToType(data['february_amount'], 'Number');
            }
            if (data.hasOwnProperty('federal_income_tax_withheld')) {
                obj['federal_income_tax_withheld'] = ApiClient.convertToType(data['federal_income_tax_withheld'], 'Number');
            }
            if (data.hasOwnProperty('filer')) {
                obj['filer'] = Credit1099Filer.constructFromObject(data['filer']);
            }
            if (data.hasOwnProperty('fishing_boat_proceeds')) {
                obj['fishing_boat_proceeds'] = ApiClient.convertToType(data['fishing_boat_proceeds'], 'Number');
            }
            if (data.hasOwnProperty('form_1099_type')) {
                obj['form_1099_type'] = Form1099Type.constructFromObject(data['form_1099_type']);
            }
            if (data.hasOwnProperty('gross_amount')) {
                obj['gross_amount'] = ApiClient.convertToType(data['gross_amount'], 'Number');
            }
            if (data.hasOwnProperty('gross_proceeds_paid_to_an_attorney')) {
                obj['gross_proceeds_paid_to_an_attorney'] = ApiClient.convertToType(data['gross_proceeds_paid_to_an_attorney'], 'Number');
            }
            if (data.hasOwnProperty('january_amount')) {
                obj['january_amount'] = ApiClient.convertToType(data['january_amount'], 'Number');
            }
            if (data.hasOwnProperty('july_amount')) {
                obj['july_amount'] = ApiClient.convertToType(data['july_amount'], 'Number');
            }
            if (data.hasOwnProperty('june_amount')) {
                obj['june_amount'] = ApiClient.convertToType(data['june_amount'], 'Number');
            }
            if (data.hasOwnProperty('march_amount')) {
                obj['march_amount'] = ApiClient.convertToType(data['march_amount'], 'Number');
            }
            if (data.hasOwnProperty('may_amount')) {
                obj['may_amount'] = ApiClient.convertToType(data['may_amount'], 'Number');
            }
            if (data.hasOwnProperty('medical_and_healthcare_payments')) {
                obj['medical_and_healthcare_payments'] = ApiClient.convertToType(data['medical_and_healthcare_payments'], 'Number');
            }
            if (data.hasOwnProperty('merchant_category_code')) {
                obj['merchant_category_code'] = ApiClient.convertToType(data['merchant_category_code'], 'String');
            }
            if (data.hasOwnProperty('nonemployee_compensation')) {
                obj['nonemployee_compensation'] = ApiClient.convertToType(data['nonemployee_compensation'], 'Number');
            }
            if (data.hasOwnProperty('november_amount')) {
                obj['november_amount'] = ApiClient.convertToType(data['november_amount'], 'Number');
            }
            if (data.hasOwnProperty('number_of_payment_transactions')) {
                obj['number_of_payment_transactions'] = ApiClient.convertToType(data['number_of_payment_transactions'], 'String');
            }
            if (data.hasOwnProperty('october_amount')) {
                obj['october_amount'] = ApiClient.convertToType(data['october_amount'], 'Number');
            }
            if (data.hasOwnProperty('other_income')) {
                obj['other_income'] = ApiClient.convertToType(data['other_income'], 'Number');
            }
            if (data.hasOwnProperty('payer')) {
                obj['payer'] = Credit1099Payer.constructFromObject(data['payer']);
            }
            if (data.hasOwnProperty('payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer')) {
                obj['payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer'] = ApiClient.convertToType(data['payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer'], 'String');
            }
            if (data.hasOwnProperty('payer_state_number')) {
                obj['payer_state_number'] = ApiClient.convertToType(data['payer_state_number'], 'String');
            }
            if (data.hasOwnProperty('payer_state_number_lower')) {
                obj['payer_state_number_lower'] = ApiClient.convertToType(data['payer_state_number_lower'], 'String');
            }
            if (data.hasOwnProperty('primary_state')) {
                obj['primary_state'] = ApiClient.convertToType(data['primary_state'], 'String');
            }
            if (data.hasOwnProperty('primary_state_id')) {
                obj['primary_state_id'] = ApiClient.convertToType(data['primary_state_id'], 'String');
            }
            if (data.hasOwnProperty('primary_state_income_tax')) {
                obj['primary_state_income_tax'] = ApiClient.convertToType(data['primary_state_income_tax'], 'Number');
            }
            if (data.hasOwnProperty('pse_name')) {
                obj['pse_name'] = ApiClient.convertToType(data['pse_name'], 'String');
            }
            if (data.hasOwnProperty('pse_telephone_number')) {
                obj['pse_telephone_number'] = ApiClient.convertToType(data['pse_telephone_number'], 'String');
            }
            if (data.hasOwnProperty('recipient')) {
                obj['recipient'] = Credit1099Recipient.constructFromObject(data['recipient']);
            }
            if (data.hasOwnProperty('rents')) {
                obj['rents'] = ApiClient.convertToType(data['rents'], 'Number');
            }
            if (data.hasOwnProperty('royalties')) {
                obj['royalties'] = ApiClient.convertToType(data['royalties'], 'Number');
            }
            if (data.hasOwnProperty('secondary_state')) {
                obj['secondary_state'] = ApiClient.convertToType(data['secondary_state'], 'String');
            }
            if (data.hasOwnProperty('secondary_state_id')) {
                obj['secondary_state_id'] = ApiClient.convertToType(data['secondary_state_id'], 'String');
            }
            if (data.hasOwnProperty('secondary_state_income_tax')) {
                obj['secondary_state_income_tax'] = ApiClient.convertToType(data['secondary_state_income_tax'], 'Number');
            }
            if (data.hasOwnProperty('section_409a_deferrals')) {
                obj['section_409a_deferrals'] = ApiClient.convertToType(data['section_409a_deferrals'], 'Number');
            }
            if (data.hasOwnProperty('section_409a_income')) {
                obj['section_409a_income'] = ApiClient.convertToType(data['section_409a_income'], 'Number');
            }
            if (data.hasOwnProperty('september_amount')) {
                obj['september_amount'] = ApiClient.convertToType(data['september_amount'], 'Number');
            }
            if (data.hasOwnProperty('state_income')) {
                obj['state_income'] = ApiClient.convertToType(data['state_income'], 'Number');
            }
            if (data.hasOwnProperty('state_income_lower')) {
                obj['state_income_lower'] = ApiClient.convertToType(data['state_income_lower'], 'Number');
            }
            if (data.hasOwnProperty('state_tax_withheld')) {
                obj['state_tax_withheld'] = ApiClient.convertToType(data['state_tax_withheld'], 'Number');
            }
            if (data.hasOwnProperty('state_tax_withheld_lower')) {
                obj['state_tax_withheld_lower'] = ApiClient.convertToType(data['state_tax_withheld_lower'], 'Number');
            }
            if (data.hasOwnProperty('substitute_payments_in_lieu_of_dividends_or_interest')) {
                obj['substitute_payments_in_lieu_of_dividends_or_interest'] = ApiClient.convertToType(data['substitute_payments_in_lieu_of_dividends_or_interest'], 'Number');
            }
            if (data.hasOwnProperty('tax_year')) {
                obj['tax_year'] = ApiClient.convertToType(data['tax_year'], 'String');
            }
            if (data.hasOwnProperty('transactions_reported')) {
                obj['transactions_reported'] = ApiClient.convertToType(data['transactions_reported'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Credit1099</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Credit1099</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Credit1099.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['document_id'] && !(typeof data['document_id'] === 'string' || data['document_id'] instanceof String)) {
            throw new Error("Expected the field `document_id` to be a primitive type in the JSON string but got " + data['document_id']);
        }
        // ensure the json data is a string
        if (data['merchant_category_code'] && !(typeof data['merchant_category_code'] === 'string' || data['merchant_category_code'] instanceof String)) {
            throw new Error("Expected the field `merchant_category_code` to be a primitive type in the JSON string but got " + data['merchant_category_code']);
        }
        // ensure the json data is a string
        if (data['number_of_payment_transactions'] && !(typeof data['number_of_payment_transactions'] === 'string' || data['number_of_payment_transactions'] instanceof String)) {
            throw new Error("Expected the field `number_of_payment_transactions` to be a primitive type in the JSON string but got " + data['number_of_payment_transactions']);
        }
        // ensure the json data is a string
        if (data['payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer'] && !(typeof data['payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer'] === 'string' || data['payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer'] instanceof String)) {
            throw new Error("Expected the field `payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer` to be a primitive type in the JSON string but got " + data['payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer']);
        }
        // ensure the json data is a string
        if (data['payer_state_number'] && !(typeof data['payer_state_number'] === 'string' || data['payer_state_number'] instanceof String)) {
            throw new Error("Expected the field `payer_state_number` to be a primitive type in the JSON string but got " + data['payer_state_number']);
        }
        // ensure the json data is a string
        if (data['payer_state_number_lower'] && !(typeof data['payer_state_number_lower'] === 'string' || data['payer_state_number_lower'] instanceof String)) {
            throw new Error("Expected the field `payer_state_number_lower` to be a primitive type in the JSON string but got " + data['payer_state_number_lower']);
        }
        // ensure the json data is a string
        if (data['primary_state'] && !(typeof data['primary_state'] === 'string' || data['primary_state'] instanceof String)) {
            throw new Error("Expected the field `primary_state` to be a primitive type in the JSON string but got " + data['primary_state']);
        }
        // ensure the json data is a string
        if (data['primary_state_id'] && !(typeof data['primary_state_id'] === 'string' || data['primary_state_id'] instanceof String)) {
            throw new Error("Expected the field `primary_state_id` to be a primitive type in the JSON string but got " + data['primary_state_id']);
        }
        // ensure the json data is a string
        if (data['pse_name'] && !(typeof data['pse_name'] === 'string' || data['pse_name'] instanceof String)) {
            throw new Error("Expected the field `pse_name` to be a primitive type in the JSON string but got " + data['pse_name']);
        }
        // ensure the json data is a string
        if (data['pse_telephone_number'] && !(typeof data['pse_telephone_number'] === 'string' || data['pse_telephone_number'] instanceof String)) {
            throw new Error("Expected the field `pse_telephone_number` to be a primitive type in the JSON string but got " + data['pse_telephone_number']);
        }
        // ensure the json data is a string
        if (data['secondary_state'] && !(typeof data['secondary_state'] === 'string' || data['secondary_state'] instanceof String)) {
            throw new Error("Expected the field `secondary_state` to be a primitive type in the JSON string but got " + data['secondary_state']);
        }
        // ensure the json data is a string
        if (data['secondary_state_id'] && !(typeof data['secondary_state_id'] === 'string' || data['secondary_state_id'] instanceof String)) {
            throw new Error("Expected the field `secondary_state_id` to be a primitive type in the JSON string but got " + data['secondary_state_id']);
        }
        // ensure the json data is a string
        if (data['tax_year'] && !(typeof data['tax_year'] === 'string' || data['tax_year'] instanceof String)) {
            throw new Error("Expected the field `tax_year` to be a primitive type in the JSON string but got " + data['tax_year']);
        }
        // ensure the json data is a string
        if (data['transactions_reported'] && !(typeof data['transactions_reported'] === 'string' || data['transactions_reported'] instanceof String)) {
            throw new Error("Expected the field `transactions_reported` to be a primitive type in the JSON string but got " + data['transactions_reported']);
        }

        return true;
    }


}

Credit1099.RequiredProperties = ["document_id"];

/**
 * Amount reported for April.
 * @member {Number} april_amount
 */
Credit1099.prototype['april_amount'] = undefined;

/**
 * Amount reported for August.
 * @member {Number} august_amount
 */
Credit1099.prototype['august_amount'] = undefined;

/**
 * Amount in card not present transactions.
 * @member {Number} card_not_present_transaction
 */
Credit1099.prototype['card_not_present_transaction'] = undefined;

/**
 * Amount of crop insurance proceeds.
 * @member {Number} crop_insurance_proceeds
 */
Credit1099.prototype['crop_insurance_proceeds'] = undefined;

/**
 * Amount reported for December.
 * @member {Number} december_amount
 */
Credit1099.prototype['december_amount'] = undefined;

/**
 * An identifier of the document referenced by the document metadata.
 * @member {String} document_id
 */
Credit1099.prototype['document_id'] = undefined;

/**
 * @member {module:model/CreditDocumentMetadata} document_metadata
 */
Credit1099.prototype['document_metadata'] = undefined;

/**
 * Amount of golden parachute payments made by payer.
 * @member {Number} excess_golden_parachute_payments
 */
Credit1099.prototype['excess_golden_parachute_payments'] = undefined;

/**
 * Amount reported for February.
 * @member {Number} february_amount
 */
Credit1099.prototype['february_amount'] = undefined;

/**
 * Amount of federal income tax withheld from payer.
 * @member {Number} federal_income_tax_withheld
 */
Credit1099.prototype['federal_income_tax_withheld'] = undefined;

/**
 * @member {module:model/Credit1099Filer} filer
 */
Credit1099.prototype['filer'] = undefined;

/**
 * Amount of fishing boat proceeds from payer.
 * @member {Number} fishing_boat_proceeds
 */
Credit1099.prototype['fishing_boat_proceeds'] = undefined;

/**
 * @member {module:model/Form1099Type} form_1099_type
 */
Credit1099.prototype['form_1099_type'] = undefined;

/**
 * Gross amount reported.
 * @member {Number} gross_amount
 */
Credit1099.prototype['gross_amount'] = undefined;

/**
 * Amount of gross proceeds paid to an attorney by payer.
 * @member {Number} gross_proceeds_paid_to_an_attorney
 */
Credit1099.prototype['gross_proceeds_paid_to_an_attorney'] = undefined;

/**
 * Amount reported for January.
 * @member {Number} january_amount
 */
Credit1099.prototype['january_amount'] = undefined;

/**
 * Amount reported for July.
 * @member {Number} july_amount
 */
Credit1099.prototype['july_amount'] = undefined;

/**
 * Amount reported for June.
 * @member {Number} june_amount
 */
Credit1099.prototype['june_amount'] = undefined;

/**
 * Amount reported for March.
 * @member {Number} march_amount
 */
Credit1099.prototype['march_amount'] = undefined;

/**
 * Amount reported for May.
 * @member {Number} may_amount
 */
Credit1099.prototype['may_amount'] = undefined;

/**
 * Amount of medical and healthcare payments from payer.
 * @member {Number} medical_and_healthcare_payments
 */
Credit1099.prototype['medical_and_healthcare_payments'] = undefined;

/**
 * Merchant category of filer.
 * @member {String} merchant_category_code
 */
Credit1099.prototype['merchant_category_code'] = undefined;

/**
 * Amount of nonemployee compensation from payer.
 * @member {Number} nonemployee_compensation
 */
Credit1099.prototype['nonemployee_compensation'] = undefined;

/**
 * Amount reported for November.
 * @member {Number} november_amount
 */
Credit1099.prototype['november_amount'] = undefined;

/**
 * Number of payment transactions made.
 * @member {String} number_of_payment_transactions
 */
Credit1099.prototype['number_of_payment_transactions'] = undefined;

/**
 * Amount reported for October.
 * @member {Number} october_amount
 */
Credit1099.prototype['october_amount'] = undefined;

/**
 * Amount in other income by payer.
 * @member {Number} other_income
 */
Credit1099.prototype['other_income'] = undefined;

/**
 * @member {module:model/Credit1099Payer} payer
 */
Credit1099.prototype['payer'] = undefined;

/**
 * Whether or not payer made direct sales over $5000 of consumer products.
 * @member {String} payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer
 */
Credit1099.prototype['payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer'] = undefined;

/**
 * Primary state ID.
 * @member {String} payer_state_number
 */
Credit1099.prototype['payer_state_number'] = undefined;

/**
 * Secondary state ID.
 * @member {String} payer_state_number_lower
 */
Credit1099.prototype['payer_state_number_lower'] = undefined;

/**
 * Primary state of business.
 * @member {String} primary_state
 */
Credit1099.prototype['primary_state'] = undefined;

/**
 * Primary state ID.
 * @member {String} primary_state_id
 */
Credit1099.prototype['primary_state_id'] = undefined;

/**
 * State income tax reported for primary state.
 * @member {Number} primary_state_income_tax
 */
Credit1099.prototype['primary_state_income_tax'] = undefined;

/**
 * Name of the PSE (Payment Settlement Entity).
 * @member {String} pse_name
 */
Credit1099.prototype['pse_name'] = undefined;

/**
 * Formatted (XXX) XXX-XXXX. Phone number of the PSE (Payment Settlement Entity).
 * @member {String} pse_telephone_number
 */
Credit1099.prototype['pse_telephone_number'] = undefined;

/**
 * @member {module:model/Credit1099Recipient} recipient
 */
Credit1099.prototype['recipient'] = undefined;

/**
 * Amount in rent by payer.
 * @member {Number} rents
 */
Credit1099.prototype['rents'] = undefined;

/**
 * Amount in royalties by payer.
 * @member {Number} royalties
 */
Credit1099.prototype['royalties'] = undefined;

/**
 * Secondary state of business.
 * @member {String} secondary_state
 */
Credit1099.prototype['secondary_state'] = undefined;

/**
 * Secondary state ID.
 * @member {String} secondary_state_id
 */
Credit1099.prototype['secondary_state_id'] = undefined;

/**
 * State income tax reported for secondary state.
 * @member {Number} secondary_state_income_tax
 */
Credit1099.prototype['secondary_state_income_tax'] = undefined;

/**
 * Amount of 409A deferrals earned by payer.
 * @member {Number} section_409a_deferrals
 */
Credit1099.prototype['section_409a_deferrals'] = undefined;

/**
 * Amount of 409A income earned by payer.
 * @member {Number} section_409a_income
 */
Credit1099.prototype['section_409a_income'] = undefined;

/**
 * Amount reported for September.
 * @member {Number} september_amount
 */
Credit1099.prototype['september_amount'] = undefined;

/**
 * State income reported for primary state.
 * @member {Number} state_income
 */
Credit1099.prototype['state_income'] = undefined;

/**
 * State income reported for secondary state.
 * @member {Number} state_income_lower
 */
Credit1099.prototype['state_income_lower'] = undefined;

/**
 * Amount of state tax withheld of payer for primary state.
 * @member {Number} state_tax_withheld
 */
Credit1099.prototype['state_tax_withheld'] = undefined;

/**
 * Amount of state tax withheld of payer for secondary state.
 * @member {Number} state_tax_withheld_lower
 */
Credit1099.prototype['state_tax_withheld_lower'] = undefined;

/**
 * Amount of substitute payments made by payer.
 * @member {Number} substitute_payments_in_lieu_of_dividends_or_interest
 */
Credit1099.prototype['substitute_payments_in_lieu_of_dividends_or_interest'] = undefined;

/**
 * Tax year of the tax form.
 * @member {String} tax_year
 */
Credit1099.prototype['tax_year'] = undefined;

/**
 * One of the values will be provided Payment card Third party network
 * @member {String} transactions_reported
 */
Credit1099.prototype['transactions_reported'] = undefined;






export default Credit1099;

