/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransferScheduleIntervalUnit from './TransferScheduleIntervalUnit';

/**
 * The TransferRecurringSchedule model module.
 * @module model/TransferRecurringSchedule
 * @version 2020-09-14_1.345.1
 */
class TransferRecurringSchedule {
    /**
     * Constructs a new <code>TransferRecurringSchedule</code>.
     * The schedule that the recurring transfer will be executed on.
     * @alias module:model/TransferRecurringSchedule
     * @param intervalCount {Number} The number of recurring `interval_units` between originations. The recurring interval(before holiday adjustment) is calculated by multiplying `interval_unit` and `interval_count`. For instance, to schedule a recurring transfer which originates once every two weeks, set `interval_unit` = `week` and `interval_count` = 2.
     * @param intervalExecutionDay {Number} The day of the interval on which to schedule the transfer.  If the `interval_unit` is `week`, `interval_execution_day` should be an integer from 1 (Monday) to 5 (Friday).  If the `interval_unit` is `month`, `interval_execution_day` should be an integer indicating which day of the month to make the transfer on. Integers from 1 to 28 can be used to make a transfer on that day of the month. Negative integers from -1 to -5 can be used to make a transfer relative to the end of the month. To make a transfer on the last day of the month, use -1; to make the transfer on the second-to-last day, use -2, and so on.  The transfer will be originated on next available banking day if the designated day is a non banking day.
     * @param intervalUnit {module:model/TransferScheduleIntervalUnit} 
     * @param startDate {Date} A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). The recurring transfer will begin on the first `interval_execution_day` on or after the `start_date`.  If the first `interval_execution_day` on or after the start date is also the same day that `/transfer/recurring/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
     */
    constructor(intervalCount, intervalExecutionDay, intervalUnit, startDate) { 
        
        TransferRecurringSchedule.initialize(this, intervalCount, intervalExecutionDay, intervalUnit, startDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, intervalCount, intervalExecutionDay, intervalUnit, startDate) { 
        obj['interval_count'] = intervalCount;
        obj['interval_execution_day'] = intervalExecutionDay;
        obj['interval_unit'] = intervalUnit;
        obj['start_date'] = startDate;
    }

    /**
     * Constructs a <code>TransferRecurringSchedule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferRecurringSchedule} obj Optional instance to populate.
     * @return {module:model/TransferRecurringSchedule} The populated <code>TransferRecurringSchedule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferRecurringSchedule();

            if (data.hasOwnProperty('end_date')) {
                obj['end_date'] = ApiClient.convertToType(data['end_date'], 'Date');
            }
            if (data.hasOwnProperty('interval_count')) {
                obj['interval_count'] = ApiClient.convertToType(data['interval_count'], 'Number');
            }
            if (data.hasOwnProperty('interval_execution_day')) {
                obj['interval_execution_day'] = ApiClient.convertToType(data['interval_execution_day'], 'Number');
            }
            if (data.hasOwnProperty('interval_unit')) {
                obj['interval_unit'] = TransferScheduleIntervalUnit.constructFromObject(data['interval_unit']);
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferRecurringSchedule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferRecurringSchedule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransferRecurringSchedule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

TransferRecurringSchedule.RequiredProperties = ["interval_count", "interval_execution_day", "interval_unit", "start_date"];

/**
 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). The recurring transfer will end on the last `interval_execution_day` on or before the `end_date`. If the `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/transfer/recurring/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
 * @member {Date} end_date
 */
TransferRecurringSchedule.prototype['end_date'] = undefined;

/**
 * The number of recurring `interval_units` between originations. The recurring interval(before holiday adjustment) is calculated by multiplying `interval_unit` and `interval_count`. For instance, to schedule a recurring transfer which originates once every two weeks, set `interval_unit` = `week` and `interval_count` = 2.
 * @member {Number} interval_count
 */
TransferRecurringSchedule.prototype['interval_count'] = undefined;

/**
 * The day of the interval on which to schedule the transfer.  If the `interval_unit` is `week`, `interval_execution_day` should be an integer from 1 (Monday) to 5 (Friday).  If the `interval_unit` is `month`, `interval_execution_day` should be an integer indicating which day of the month to make the transfer on. Integers from 1 to 28 can be used to make a transfer on that day of the month. Negative integers from -1 to -5 can be used to make a transfer relative to the end of the month. To make a transfer on the last day of the month, use -1; to make the transfer on the second-to-last day, use -2, and so on.  The transfer will be originated on next available banking day if the designated day is a non banking day.
 * @member {Number} interval_execution_day
 */
TransferRecurringSchedule.prototype['interval_execution_day'] = undefined;

/**
 * @member {module:model/TransferScheduleIntervalUnit} interval_unit
 */
TransferRecurringSchedule.prototype['interval_unit'] = undefined;

/**
 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). The recurring transfer will begin on the first `interval_execution_day` on or after the `start_date`.  If the first `interval_execution_day` on or after the start date is also the same day that `/transfer/recurring/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
 * @member {Date} start_date
 */
TransferRecurringSchedule.prototype['start_date'] = undefined;






export default TransferRecurringSchedule;

