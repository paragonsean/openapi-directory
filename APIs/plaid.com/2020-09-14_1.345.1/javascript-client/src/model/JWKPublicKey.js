/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JWKPublicKey model module.
 * @module model/JWKPublicKey
 * @version 2020-09-14_1.345.1
 */
class JWKPublicKey {
    /**
     * Constructs a new <code>JWKPublicKey</code>.
     * A JSON Web Key (JWK) that can be used in conjunction with [JWT libraries](https://jwt.io/#libraries-io) to verify Plaid webhooks
     * @alias module:model/JWKPublicKey
     * @extends Object
     * @param alg {String} The alg member identifies the cryptographic algorithm family used with the key.
     * @param createdAt {Number} The timestamp when the key was created, in Unix time.
     * @param crv {String} The crv member identifies the cryptographic curve used with the key.
     * @param expiredAt {Number} The timestamp when the key expired, in Unix time.
     * @param kid {String} The kid (Key ID) member can be used to match a specific key. This can be used, for instance, to choose among a set of keys within the JWK during key rollover.
     * @param kty {String} The kty (key type) parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC.
     * @param use {String} The use (public key use) parameter identifies the intended use of the public key.
     * @param x {String} The x member contains the x coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate's big endian representation.
     * @param y {String} The y member contains the y coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate's big endian representation.
     */
    constructor(alg, createdAt, crv, expiredAt, kid, kty, use, x, y) { 
        
        JWKPublicKey.initialize(this, alg, createdAt, crv, expiredAt, kid, kty, use, x, y);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, alg, createdAt, crv, expiredAt, kid, kty, use, x, y) { 
        obj['alg'] = alg;
        obj['created_at'] = createdAt;
        obj['crv'] = crv;
        obj['expired_at'] = expiredAt;
        obj['kid'] = kid;
        obj['kty'] = kty;
        obj['use'] = use;
        obj['x'] = x;
        obj['y'] = y;
    }

    /**
     * Constructs a <code>JWKPublicKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JWKPublicKey} obj Optional instance to populate.
     * @return {module:model/JWKPublicKey} The populated <code>JWKPublicKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JWKPublicKey();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('alg')) {
                obj['alg'] = ApiClient.convertToType(data['alg'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
            if (data.hasOwnProperty('crv')) {
                obj['crv'] = ApiClient.convertToType(data['crv'], 'String');
            }
            if (data.hasOwnProperty('expired_at')) {
                obj['expired_at'] = ApiClient.convertToType(data['expired_at'], 'Number');
            }
            if (data.hasOwnProperty('kid')) {
                obj['kid'] = ApiClient.convertToType(data['kid'], 'String');
            }
            if (data.hasOwnProperty('kty')) {
                obj['kty'] = ApiClient.convertToType(data['kty'], 'String');
            }
            if (data.hasOwnProperty('use')) {
                obj['use'] = ApiClient.convertToType(data['use'], 'String');
            }
            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'String');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JWKPublicKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JWKPublicKey</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JWKPublicKey.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alg'] && !(typeof data['alg'] === 'string' || data['alg'] instanceof String)) {
            throw new Error("Expected the field `alg` to be a primitive type in the JSON string but got " + data['alg']);
        }
        // ensure the json data is a string
        if (data['crv'] && !(typeof data['crv'] === 'string' || data['crv'] instanceof String)) {
            throw new Error("Expected the field `crv` to be a primitive type in the JSON string but got " + data['crv']);
        }
        // ensure the json data is a string
        if (data['kid'] && !(typeof data['kid'] === 'string' || data['kid'] instanceof String)) {
            throw new Error("Expected the field `kid` to be a primitive type in the JSON string but got " + data['kid']);
        }
        // ensure the json data is a string
        if (data['kty'] && !(typeof data['kty'] === 'string' || data['kty'] instanceof String)) {
            throw new Error("Expected the field `kty` to be a primitive type in the JSON string but got " + data['kty']);
        }
        // ensure the json data is a string
        if (data['use'] && !(typeof data['use'] === 'string' || data['use'] instanceof String)) {
            throw new Error("Expected the field `use` to be a primitive type in the JSON string but got " + data['use']);
        }
        // ensure the json data is a string
        if (data['x'] && !(typeof data['x'] === 'string' || data['x'] instanceof String)) {
            throw new Error("Expected the field `x` to be a primitive type in the JSON string but got " + data['x']);
        }
        // ensure the json data is a string
        if (data['y'] && !(typeof data['y'] === 'string' || data['y'] instanceof String)) {
            throw new Error("Expected the field `y` to be a primitive type in the JSON string but got " + data['y']);
        }

        return true;
    }


}

JWKPublicKey.RequiredProperties = ["alg", "created_at", "crv", "expired_at", "kid", "kty", "use", "x", "y"];

/**
 * The alg member identifies the cryptographic algorithm family used with the key.
 * @member {String} alg
 */
JWKPublicKey.prototype['alg'] = undefined;

/**
 * The timestamp when the key was created, in Unix time.
 * @member {Number} created_at
 */
JWKPublicKey.prototype['created_at'] = undefined;

/**
 * The crv member identifies the cryptographic curve used with the key.
 * @member {String} crv
 */
JWKPublicKey.prototype['crv'] = undefined;

/**
 * The timestamp when the key expired, in Unix time.
 * @member {Number} expired_at
 */
JWKPublicKey.prototype['expired_at'] = undefined;

/**
 * The kid (Key ID) member can be used to match a specific key. This can be used, for instance, to choose among a set of keys within the JWK during key rollover.
 * @member {String} kid
 */
JWKPublicKey.prototype['kid'] = undefined;

/**
 * The kty (key type) parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC.
 * @member {String} kty
 */
JWKPublicKey.prototype['kty'] = undefined;

/**
 * The use (public key use) parameter identifies the intended use of the public key.
 * @member {String} use
 */
JWKPublicKey.prototype['use'] = undefined;

/**
 * The x member contains the x coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate's big endian representation.
 * @member {String} x
 */
JWKPublicKey.prototype['x'] = undefined;

/**
 * The y member contains the y coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate's big endian representation.
 * @member {String} y
 */
JWKPublicKey.prototype['y'] = undefined;






export default JWKPublicKey;

