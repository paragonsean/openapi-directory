/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransferUserAddressInResponse model module.
 * @module model/TransferUserAddressInResponse
 * @version 2020-09-14_1.345.1
 */
class TransferUserAddressInResponse {
    /**
     * Constructs a new <code>TransferUserAddressInResponse</code>.
     * The address associated with the account holder.
     * @alias module:model/TransferUserAddressInResponse
     * @extends Object
     * @param city {String} Ex. \"San Francisco\"
     * @param country {String} A two-letter country code (e.g., \"US\").
     * @param postalCode {String} The postal code (e.g., \"94103\").
     * @param region {String} The state or province (e.g., \"CA\").
     * @param street {String} The street number and name (i.e., \"100 Market St.\").
     */
    constructor(city, country, postalCode, region, street) { 
        
        TransferUserAddressInResponse.initialize(this, city, country, postalCode, region, street);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, city, country, postalCode, region, street) { 
        obj['city'] = city;
        obj['country'] = country;
        obj['postal_code'] = postalCode;
        obj['region'] = region;
        obj['street'] = street;
    }

    /**
     * Constructs a <code>TransferUserAddressInResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferUserAddressInResponse} obj Optional instance to populate.
     * @return {module:model/TransferUserAddressInResponse} The populated <code>TransferUserAddressInResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferUserAddressInResponse();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferUserAddressInResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferUserAddressInResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransferUserAddressInResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }

        return true;
    }


}

TransferUserAddressInResponse.RequiredProperties = ["city", "country", "postal_code", "region", "street"];

/**
 * Ex. \"San Francisco\"
 * @member {String} city
 */
TransferUserAddressInResponse.prototype['city'] = undefined;

/**
 * A two-letter country code (e.g., \"US\").
 * @member {String} country
 */
TransferUserAddressInResponse.prototype['country'] = undefined;

/**
 * The postal code (e.g., \"94103\").
 * @member {String} postal_code
 */
TransferUserAddressInResponse.prototype['postal_code'] = undefined;

/**
 * The state or province (e.g., \"CA\").
 * @member {String} region
 */
TransferUserAddressInResponse.prototype['region'] = undefined;

/**
 * The street number and name (i.e., \"100 Market St.\").
 * @member {String} street
 */
TransferUserAddressInResponse.prototype['street'] = undefined;






export default TransferUserAddressInResponse;

