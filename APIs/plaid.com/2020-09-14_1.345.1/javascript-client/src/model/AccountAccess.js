/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountProductAccessNullable from './AccountProductAccessNullable';

/**
 * The AccountAccess model module.
 * @module model/AccountAccess
 * @version 2020-09-14_1.345.1
 */
class AccountAccess {
    /**
     * Constructs a new <code>AccountAccess</code>.
     * Allow or disallow product access by account. Unlisted (e.g. missing) accounts will be considered &#x60;new_accounts&#x60;.
     * @alias module:model/AccountAccess
     * @param uniqueId {String} The unique account identifier for this account. This value must match that returned by the data access API for this account.
     */
    constructor(uniqueId) { 
        
        AccountAccess.initialize(this, uniqueId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, uniqueId) { 
        obj['authorized'] = true;
        obj['unique_id'] = uniqueId;
    }

    /**
     * Constructs a <code>AccountAccess</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountAccess} obj Optional instance to populate.
     * @return {module:model/AccountAccess} The populated <code>AccountAccess</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountAccess();

            if (data.hasOwnProperty('account_product_access')) {
                obj['account_product_access'] = AccountProductAccessNullable.constructFromObject(data['account_product_access']);
            }
            if (data.hasOwnProperty('authorized')) {
                obj['authorized'] = ApiClient.convertToType(data['authorized'], 'Boolean');
            }
            if (data.hasOwnProperty('unique_id')) {
                obj['unique_id'] = ApiClient.convertToType(data['unique_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountAccess</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountAccess</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountAccess.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `account_product_access`
        if (data['account_product_access']) { // data not null
          AccountProductAccessNullable.validateJSON(data['account_product_access']);
        }
        // ensure the json data is a string
        if (data['unique_id'] && !(typeof data['unique_id'] === 'string' || data['unique_id'] instanceof String)) {
            throw new Error("Expected the field `unique_id` to be a primitive type in the JSON string but got " + data['unique_id']);
        }

        return true;
    }


}

AccountAccess.RequiredProperties = ["unique_id"];

/**
 * @member {module:model/AccountProductAccessNullable} account_product_access
 */
AccountAccess.prototype['account_product_access'] = undefined;

/**
 * Allow the application to see this account (and associated details, including balance) in the list of accounts  If unset, defaults to `true`.
 * @member {Boolean} authorized
 * @default true
 */
AccountAccess.prototype['authorized'] = true;

/**
 * The unique account identifier for this account. This value must match that returned by the data access API for this account.
 * @member {String} unique_id
 */
AccountAccess.prototype['unique_id'] = undefined;






export default AccountAccess;

