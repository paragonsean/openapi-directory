/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CountryCode from './CountryCode';
import InstitutionsSearchRequestOptions from './InstitutionsSearchRequestOptions';
import Products from './Products';

/**
 * The InstitutionsSearchRequest model module.
 * @module model/InstitutionsSearchRequest
 * @version 2020-09-14_1.345.1
 */
class InstitutionsSearchRequest {
    /**
     * Constructs a new <code>InstitutionsSearchRequest</code>.
     * InstitutionsSearchRequest defines the request schema for &#x60;/institutions/search&#x60;
     * @alias module:model/InstitutionsSearchRequest
     * @param countryCodes {Array.<module:model/CountryCode>} Specify an array of Plaid-supported country codes this institution supports, using the ISO-3166-1 alpha-2 country code standard. In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied. 
     * @param products {Array.<module:model/Products>} Filter the Institutions based on whether they support all products listed in `products`. Provide `null` to get institutions regardless of supported products. Note that when `auth` is specified as a product, if you are enabled for Instant Match or Automated Micro-deposits, institutions that support those products will be returned even if `auth` is not present in their product array.
     * @param query {String} The search query. Institutions with names matching the query are returned
     */
    constructor(countryCodes, products, query) { 
        
        InstitutionsSearchRequest.initialize(this, countryCodes, products, query);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, countryCodes, products, query) { 
        obj['country_codes'] = countryCodes;
        obj['products'] = products;
        obj['query'] = query;
    }

    /**
     * Constructs a <code>InstitutionsSearchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InstitutionsSearchRequest} obj Optional instance to populate.
     * @return {module:model/InstitutionsSearchRequest} The populated <code>InstitutionsSearchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InstitutionsSearchRequest();

            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('country_codes')) {
                obj['country_codes'] = ApiClient.convertToType(data['country_codes'], [CountryCode]);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = InstitutionsSearchRequestOptions.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [Products]);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InstitutionsSearchRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InstitutionsSearchRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InstitutionsSearchRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['country_codes'])) {
            throw new Error("Expected the field `country_codes` to be an array in the JSON data but got " + data['country_codes']);
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          InstitutionsSearchRequestOptions.validateJSON(data['options']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['products'])) {
            throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }

        return true;
    }


}

InstitutionsSearchRequest.RequiredProperties = ["country_codes", "products", "query"];

/**
 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
 * @member {String} client_id
 */
InstitutionsSearchRequest.prototype['client_id'] = undefined;

/**
 * Specify an array of Plaid-supported country codes this institution supports, using the ISO-3166-1 alpha-2 country code standard. In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied. 
 * @member {Array.<module:model/CountryCode>} country_codes
 */
InstitutionsSearchRequest.prototype['country_codes'] = undefined;

/**
 * @member {module:model/InstitutionsSearchRequestOptions} options
 */
InstitutionsSearchRequest.prototype['options'] = undefined;

/**
 * Filter the Institutions based on whether they support all products listed in `products`. Provide `null` to get institutions regardless of supported products. Note that when `auth` is specified as a product, if you are enabled for Instant Match or Automated Micro-deposits, institutions that support those products will be returned even if `auth` is not present in their product array.
 * @member {Array.<module:model/Products>} products
 */
InstitutionsSearchRequest.prototype['products'] = undefined;

/**
 * The search query. Institutions with names matching the query are returned
 * @member {String} query
 */
InstitutionsSearchRequest.prototype['query'] = undefined;

/**
 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
 * @member {String} secret
 */
InstitutionsSearchRequest.prototype['secret'] = undefined;






export default InstitutionsSearchRequest;

