/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountBase from './AccountBase';
import Item from './Item';
import Transaction from './Transaction';

/**
 * The TransactionsGetResponse model module.
 * @module model/TransactionsGetResponse
 * @version 2020-09-14_1.345.1
 */
class TransactionsGetResponse {
    /**
     * Constructs a new <code>TransactionsGetResponse</code>.
     * TransactionsGetResponse defines the response schema for &#x60;/transactions/get&#x60;
     * @alias module:model/TransactionsGetResponse
     * @extends Object
     * @param accounts {Array.<module:model/AccountBase>} An array containing the `accounts` associated with the Item for which transactions are being returned. Each transaction can be mapped to its corresponding account via the `account_id` field.
     * @param item {module:model/Item} 
     * @param requestId {String} A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @param totalTransactions {Number} The total number of transactions available within the date range specified. If `total_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter.
     * @param transactions {Array.<module:model/Transaction>} An array containing transactions from the account. Transactions are returned in reverse chronological order, with the most recent at the beginning of the array. The maximum number of transactions returned is determined by the `count` parameter.
     */
    constructor(accounts, item, requestId, totalTransactions, transactions) { 
        
        TransactionsGetResponse.initialize(this, accounts, item, requestId, totalTransactions, transactions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accounts, item, requestId, totalTransactions, transactions) { 
        obj['accounts'] = accounts;
        obj['item'] = item;
        obj['request_id'] = requestId;
        obj['total_transactions'] = totalTransactions;
        obj['transactions'] = transactions;
    }

    /**
     * Constructs a <code>TransactionsGetResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionsGetResponse} obj Optional instance to populate.
     * @return {module:model/TransactionsGetResponse} The populated <code>TransactionsGetResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionsGetResponse();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('accounts')) {
                obj['accounts'] = ApiClient.convertToType(data['accounts'], [AccountBase]);
            }
            if (data.hasOwnProperty('item')) {
                obj['item'] = Item.constructFromObject(data['item']);
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('total_transactions')) {
                obj['total_transactions'] = ApiClient.convertToType(data['total_transactions'], 'Number');
            }
            if (data.hasOwnProperty('transactions')) {
                obj['transactions'] = ApiClient.convertToType(data['transactions'], [Transaction]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionsGetResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionsGetResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionsGetResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['accounts'])) {
            throw new Error("Expected the field `accounts` to be an array in the JSON data but got " + data['accounts']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        if (data['transactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transactions'])) {
                throw new Error("Expected the field `transactions` to be an array in the JSON data but got " + data['transactions']);
            }
            // validate the optional field `transactions` (array)
            for (const item of data['transactions']) {
                Transaction.validateJSON(item);
            };
        }

        return true;
    }


}

TransactionsGetResponse.RequiredProperties = ["accounts", "item", "request_id", "total_transactions", "transactions"];

/**
 * An array containing the `accounts` associated with the Item for which transactions are being returned. Each transaction can be mapped to its corresponding account via the `account_id` field.
 * @member {Array.<module:model/AccountBase>} accounts
 */
TransactionsGetResponse.prototype['accounts'] = undefined;

/**
 * @member {module:model/Item} item
 */
TransactionsGetResponse.prototype['item'] = undefined;

/**
 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
 * @member {String} request_id
 */
TransactionsGetResponse.prototype['request_id'] = undefined;

/**
 * The total number of transactions available within the date range specified. If `total_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter.
 * @member {Number} total_transactions
 */
TransactionsGetResponse.prototype['total_transactions'] = undefined;

/**
 * An array containing transactions from the account. Transactions are returned in reverse chronological order, with the most recent at the beginning of the array. The maximum number of transactions returned is determined by the `count` parameter.
 * @member {Array.<module:model/Transaction>} transactions
 */
TransactionsGetResponse.prototype['transactions'] = undefined;






export default TransactionsGetResponse;

