/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Email model module.
 * @module model/Email
 * @version 2020-09-14_1.345.1
 */
class Email {
    /**
     * Constructs a new <code>Email</code>.
     * An object representing an email address
     * @alias module:model/Email
     * @extends Object
     * @param data {String} The email address.
     * @param primary {Boolean} When `true`, identifies the email address as the primary email on an account.
     * @param type {module:model/Email.TypeEnum} The type of email account as described by the financial institution.
     */
    constructor(data, primary, type) { 
        
        Email.initialize(this, data, primary, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, primary, type) { 
        obj['data'] = data;
        obj['primary'] = primary;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Email</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Email} obj Optional instance to populate.
     * @return {module:model/Email} The populated <code>Email</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Email();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('primary')) {
                obj['primary'] = ApiClient.convertToType(data['primary'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Email</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Email</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Email.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Email.RequiredProperties = ["data", "primary", "type"];

/**
 * The email address.
 * @member {String} data
 */
Email.prototype['data'] = undefined;

/**
 * When `true`, identifies the email address as the primary email on an account.
 * @member {Boolean} primary
 */
Email.prototype['primary'] = undefined;

/**
 * The type of email account as described by the financial institution.
 * @member {module:model/Email.TypeEnum} type
 */
Email.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Email['TypeEnum'] = {

    /**
     * value: "primary"
     * @const
     */
    "primary": "primary",

    /**
     * value: "secondary"
     * @const
     */
    "secondary": "secondary",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default Email;

