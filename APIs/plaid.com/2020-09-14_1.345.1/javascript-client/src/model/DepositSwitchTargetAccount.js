/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DepositSwitchTargetAccount model module.
 * @module model/DepositSwitchTargetAccount
 * @version 2020-09-14_1.345.1
 */
class DepositSwitchTargetAccount {
    /**
     * Constructs a new <code>DepositSwitchTargetAccount</code>.
     * The deposit switch destination account
     * @alias module:model/DepositSwitchTargetAccount
     * @extends Object
     * @param accountName {String} The name of the deposit switch destination account, as it will be displayed to the end user in the Deposit Switch interface. It is not required to match the name used in online banking.
     * @param accountNumber {String} Account number for deposit switch destination
     * @param accountSubtype {module:model/DepositSwitchTargetAccount.AccountSubtypeEnum} The account subtype of the account, either `checking` or `savings`.
     * @param routingNumber {String} Routing number for deposit switch destination
     */
    constructor(accountName, accountNumber, accountSubtype, routingNumber) { 
        
        DepositSwitchTargetAccount.initialize(this, accountName, accountNumber, accountSubtype, routingNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountName, accountNumber, accountSubtype, routingNumber) { 
        obj['account_name'] = accountName;
        obj['account_number'] = accountNumber;
        obj['account_subtype'] = accountSubtype;
        obj['routing_number'] = routingNumber;
    }

    /**
     * Constructs a <code>DepositSwitchTargetAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DepositSwitchTargetAccount} obj Optional instance to populate.
     * @return {module:model/DepositSwitchTargetAccount} The populated <code>DepositSwitchTargetAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DepositSwitchTargetAccount();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_name')) {
                obj['account_name'] = ApiClient.convertToType(data['account_name'], 'String');
            }
            if (data.hasOwnProperty('account_number')) {
                obj['account_number'] = ApiClient.convertToType(data['account_number'], 'String');
            }
            if (data.hasOwnProperty('account_subtype')) {
                obj['account_subtype'] = ApiClient.convertToType(data['account_subtype'], 'String');
            }
            if (data.hasOwnProperty('routing_number')) {
                obj['routing_number'] = ApiClient.convertToType(data['routing_number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DepositSwitchTargetAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DepositSwitchTargetAccount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DepositSwitchTargetAccount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_name'] && !(typeof data['account_name'] === 'string' || data['account_name'] instanceof String)) {
            throw new Error("Expected the field `account_name` to be a primitive type in the JSON string but got " + data['account_name']);
        }
        // ensure the json data is a string
        if (data['account_number'] && !(typeof data['account_number'] === 'string' || data['account_number'] instanceof String)) {
            throw new Error("Expected the field `account_number` to be a primitive type in the JSON string but got " + data['account_number']);
        }
        // ensure the json data is a string
        if (data['account_subtype'] && !(typeof data['account_subtype'] === 'string' || data['account_subtype'] instanceof String)) {
            throw new Error("Expected the field `account_subtype` to be a primitive type in the JSON string but got " + data['account_subtype']);
        }
        // ensure the json data is a string
        if (data['routing_number'] && !(typeof data['routing_number'] === 'string' || data['routing_number'] instanceof String)) {
            throw new Error("Expected the field `routing_number` to be a primitive type in the JSON string but got " + data['routing_number']);
        }

        return true;
    }


}

DepositSwitchTargetAccount.RequiredProperties = ["account_name", "account_number", "account_subtype", "routing_number"];

/**
 * The name of the deposit switch destination account, as it will be displayed to the end user in the Deposit Switch interface. It is not required to match the name used in online banking.
 * @member {String} account_name
 */
DepositSwitchTargetAccount.prototype['account_name'] = undefined;

/**
 * Account number for deposit switch destination
 * @member {String} account_number
 */
DepositSwitchTargetAccount.prototype['account_number'] = undefined;

/**
 * The account subtype of the account, either `checking` or `savings`.
 * @member {module:model/DepositSwitchTargetAccount.AccountSubtypeEnum} account_subtype
 */
DepositSwitchTargetAccount.prototype['account_subtype'] = undefined;

/**
 * Routing number for deposit switch destination
 * @member {String} routing_number
 */
DepositSwitchTargetAccount.prototype['routing_number'] = undefined;





/**
 * Allowed values for the <code>account_subtype</code> property.
 * @enum {String}
 * @readonly
 */
DepositSwitchTargetAccount['AccountSubtypeEnum'] = {

    /**
     * value: "checking"
     * @const
     */
    "checking": "checking",

    /**
     * value: "savings"
     * @const
     */
    "savings": "savings"
};



export default DepositSwitchTargetAccount;

