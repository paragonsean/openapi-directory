/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StandaloneInvestmentTransactionType model module.
 * @module model/StandaloneInvestmentTransactionType
 * @version 2020-09-14_1.345.1
 */
class StandaloneInvestmentTransactionType {
    /**
     * Constructs a new <code>StandaloneInvestmentTransactionType</code>.
     * Valid values for investment transaction types and subtypes. Note that transactions representing inflow of cash will appear as negative amounts, outflow of cash will appear as positive amounts.
     * @alias module:model/StandaloneInvestmentTransactionType
     * @extends Object
     * @param buy {String} Buying an investment
     * @param cancel {String} A cancellation of a pending transaction
     * @param cash {String} Activity that modifies a cash position
     * @param fee {String} Fees on the account, e.g. commission, bookkeeping, options-related.
     * @param sell {String} Selling an investment
     * @param transfer {String} Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
     */
    constructor(buy, cancel, cash, fee, sell, transfer) { 
        
        StandaloneInvestmentTransactionType.initialize(this, buy, cancel, cash, fee, sell, transfer);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, buy, cancel, cash, fee, sell, transfer) { 
        obj['buy'] = buy;
        obj['cancel'] = cancel;
        obj['cash'] = cash;
        obj['fee'] = fee;
        obj['sell'] = sell;
        obj['transfer'] = transfer;
    }

    /**
     * Constructs a <code>StandaloneInvestmentTransactionType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StandaloneInvestmentTransactionType} obj Optional instance to populate.
     * @return {module:model/StandaloneInvestmentTransactionType} The populated <code>StandaloneInvestmentTransactionType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StandaloneInvestmentTransactionType();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('buy')) {
                obj['buy'] = ApiClient.convertToType(data['buy'], 'String');
            }
            if (data.hasOwnProperty('cancel')) {
                obj['cancel'] = ApiClient.convertToType(data['cancel'], 'String');
            }
            if (data.hasOwnProperty('cash')) {
                obj['cash'] = ApiClient.convertToType(data['cash'], 'String');
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = ApiClient.convertToType(data['fee'], 'String');
            }
            if (data.hasOwnProperty('sell')) {
                obj['sell'] = ApiClient.convertToType(data['sell'], 'String');
            }
            if (data.hasOwnProperty('transfer')) {
                obj['transfer'] = ApiClient.convertToType(data['transfer'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StandaloneInvestmentTransactionType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StandaloneInvestmentTransactionType</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StandaloneInvestmentTransactionType.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cancel'] && !(typeof data['cancel'] === 'string' || data['cancel'] instanceof String)) {
            throw new Error("Expected the field `cancel` to be a primitive type in the JSON string but got " + data['cancel']);
        }

        return true;
    }


}

StandaloneInvestmentTransactionType.RequiredProperties = ["buy", "cancel", "cash", "fee", "sell", "transfer"];

/**
 * Buying an investment
 * @member {String} buy
 */
StandaloneInvestmentTransactionType.prototype['buy'] = undefined;

/**
 * A cancellation of a pending transaction
 * @member {String} cancel
 */
StandaloneInvestmentTransactionType.prototype['cancel'] = undefined;

/**
 * Activity that modifies a cash position
 * @member {String} cash
 */
StandaloneInvestmentTransactionType.prototype['cash'] = undefined;

/**
 * Fees on the account, e.g. commission, bookkeeping, options-related.
 * @member {String} fee
 */
StandaloneInvestmentTransactionType.prototype['fee'] = undefined;

/**
 * Selling an investment
 * @member {String} sell
 */
StandaloneInvestmentTransactionType.prototype['sell'] = undefined;

/**
 * Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
 * @member {String} transfer
 */
StandaloneInvestmentTransactionType.prototype['transfer'] = undefined;






export default StandaloneInvestmentTransactionType;

