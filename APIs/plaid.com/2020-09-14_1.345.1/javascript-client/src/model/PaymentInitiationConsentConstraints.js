/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentConsentMaxPaymentAmount from './PaymentConsentMaxPaymentAmount';
import PaymentConsentPeriodicAmount from './PaymentConsentPeriodicAmount';
import PaymentConsentValidDateTime from './PaymentConsentValidDateTime';

/**
 * The PaymentInitiationConsentConstraints model module.
 * @module model/PaymentInitiationConsentConstraints
 * @version 2020-09-14_1.345.1
 */
class PaymentInitiationConsentConstraints {
    /**
     * Constructs a new <code>PaymentInitiationConsentConstraints</code>.
     * Limitations that will be applied to payments initiated using the payment consent.
     * @alias module:model/PaymentInitiationConsentConstraints
     * @extends Object
     * @param maxPaymentAmount {module:model/PaymentConsentMaxPaymentAmount} 
     * @param periodicAmounts {Array.<module:model/PaymentConsentPeriodicAmount>} A list of amount limitations per period of time.
     */
    constructor(maxPaymentAmount, periodicAmounts) { 
        
        PaymentInitiationConsentConstraints.initialize(this, maxPaymentAmount, periodicAmounts);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, maxPaymentAmount, periodicAmounts) { 
        obj['max_payment_amount'] = maxPaymentAmount;
        obj['periodic_amounts'] = periodicAmounts;
    }

    /**
     * Constructs a <code>PaymentInitiationConsentConstraints</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentInitiationConsentConstraints} obj Optional instance to populate.
     * @return {module:model/PaymentInitiationConsentConstraints} The populated <code>PaymentInitiationConsentConstraints</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentInitiationConsentConstraints();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('max_payment_amount')) {
                obj['max_payment_amount'] = PaymentConsentMaxPaymentAmount.constructFromObject(data['max_payment_amount']);
            }
            if (data.hasOwnProperty('periodic_amounts')) {
                obj['periodic_amounts'] = ApiClient.convertToType(data['periodic_amounts'], [PaymentConsentPeriodicAmount]);
            }
            if (data.hasOwnProperty('valid_date_time')) {
                obj['valid_date_time'] = PaymentConsentValidDateTime.constructFromObject(data['valid_date_time']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentInitiationConsentConstraints</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentInitiationConsentConstraints</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentInitiationConsentConstraints.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `max_payment_amount`
        if (data['max_payment_amount']) { // data not null
          PaymentConsentMaxPaymentAmount.validateJSON(data['max_payment_amount']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['periodic_amounts'])) {
            throw new Error("Expected the field `periodic_amounts` to be an array in the JSON data but got " + data['periodic_amounts']);
        }

        return true;
    }


}

PaymentInitiationConsentConstraints.RequiredProperties = ["max_payment_amount", "periodic_amounts"];

/**
 * @member {module:model/PaymentConsentMaxPaymentAmount} max_payment_amount
 */
PaymentInitiationConsentConstraints.prototype['max_payment_amount'] = undefined;

/**
 * A list of amount limitations per period of time.
 * @member {Array.<module:model/PaymentConsentPeriodicAmount>} periodic_amounts
 */
PaymentInitiationConsentConstraints.prototype['periodic_amounts'] = undefined;

/**
 * @member {module:model/PaymentConsentValidDateTime} valid_date_time
 */
PaymentInitiationConsentConstraints.prototype['valid_date_time'] = undefined;






export default PaymentInitiationConsentConstraints;

