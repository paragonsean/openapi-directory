/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Holding model module.
 * @module model/Holding
 * @version 2020-09-14_1.345.1
 */
class Holding {
    /**
     * Constructs a new <code>Holding</code>.
     * A securities holding at an institution.
     * @alias module:model/Holding
     * @extends Object
     * @param accountId {String} The Plaid `account_id` associated with the holding.
     * @param costBasis {Number} The original total value of the holding. This field is calculated by Plaid as the sum of the purchase price of all of the shares in the holding.
     * @param institutionPrice {Number} The last price given by the institution for this security.
     * @param institutionValue {Number} The value of the holding, as reported by the institution.
     * @param isoCurrencyCode {String} The ISO-4217 currency code of the holding. Always `null` if `unofficial_currency_code` is non-`null`.
     * @param quantity {Number} The total quantity of the asset held, as reported by the financial institution. If the security is an option, `quantity` will reflect the total number of options (typically the number of contracts multiplied by 100), not the number of contracts.
     * @param securityId {String} The Plaid `security_id` associated with the holding. Security data is not specific to a user's account; any user who held the same security at the same financial institution at the same time would have identical security data. The `security_id` for the same security will typically be the same across different institutions, but this is not guaranteed. The `security_id` does not typically change, but may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change.
     * @param unofficialCurrencyCode {String} The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s. 
     */
    constructor(accountId, costBasis, institutionPrice, institutionValue, isoCurrencyCode, quantity, securityId, unofficialCurrencyCode) { 
        
        Holding.initialize(this, accountId, costBasis, institutionPrice, institutionValue, isoCurrencyCode, quantity, securityId, unofficialCurrencyCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, costBasis, institutionPrice, institutionValue, isoCurrencyCode, quantity, securityId, unofficialCurrencyCode) { 
        obj['account_id'] = accountId;
        obj['cost_basis'] = costBasis;
        obj['institution_price'] = institutionPrice;
        obj['institution_value'] = institutionValue;
        obj['iso_currency_code'] = isoCurrencyCode;
        obj['quantity'] = quantity;
        obj['security_id'] = securityId;
        obj['unofficial_currency_code'] = unofficialCurrencyCode;
    }

    /**
     * Constructs a <code>Holding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Holding} obj Optional instance to populate.
     * @return {module:model/Holding} The populated <code>Holding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Holding();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('cost_basis')) {
                obj['cost_basis'] = ApiClient.convertToType(data['cost_basis'], 'Number');
            }
            if (data.hasOwnProperty('institution_price')) {
                obj['institution_price'] = ApiClient.convertToType(data['institution_price'], 'Number');
            }
            if (data.hasOwnProperty('institution_price_as_of')) {
                obj['institution_price_as_of'] = ApiClient.convertToType(data['institution_price_as_of'], 'Date');
            }
            if (data.hasOwnProperty('institution_price_datetime')) {
                obj['institution_price_datetime'] = ApiClient.convertToType(data['institution_price_datetime'], 'Date');
            }
            if (data.hasOwnProperty('institution_value')) {
                obj['institution_value'] = ApiClient.convertToType(data['institution_value'], 'Number');
            }
            if (data.hasOwnProperty('iso_currency_code')) {
                obj['iso_currency_code'] = ApiClient.convertToType(data['iso_currency_code'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('security_id')) {
                obj['security_id'] = ApiClient.convertToType(data['security_id'], 'String');
            }
            if (data.hasOwnProperty('unofficial_currency_code')) {
                obj['unofficial_currency_code'] = ApiClient.convertToType(data['unofficial_currency_code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Holding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Holding</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Holding.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['iso_currency_code'] && !(typeof data['iso_currency_code'] === 'string' || data['iso_currency_code'] instanceof String)) {
            throw new Error("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got " + data['iso_currency_code']);
        }
        // ensure the json data is a string
        if (data['security_id'] && !(typeof data['security_id'] === 'string' || data['security_id'] instanceof String)) {
            throw new Error("Expected the field `security_id` to be a primitive type in the JSON string but got " + data['security_id']);
        }
        // ensure the json data is a string
        if (data['unofficial_currency_code'] && !(typeof data['unofficial_currency_code'] === 'string' || data['unofficial_currency_code'] instanceof String)) {
            throw new Error("Expected the field `unofficial_currency_code` to be a primitive type in the JSON string but got " + data['unofficial_currency_code']);
        }

        return true;
    }


}

Holding.RequiredProperties = ["account_id", "cost_basis", "institution_price", "institution_value", "iso_currency_code", "quantity", "security_id", "unofficial_currency_code"];

/**
 * The Plaid `account_id` associated with the holding.
 * @member {String} account_id
 */
Holding.prototype['account_id'] = undefined;

/**
 * The original total value of the holding. This field is calculated by Plaid as the sum of the purchase price of all of the shares in the holding.
 * @member {Number} cost_basis
 */
Holding.prototype['cost_basis'] = undefined;

/**
 * The last price given by the institution for this security.
 * @member {Number} institution_price
 */
Holding.prototype['institution_price'] = undefined;

/**
 * The date at which `institution_price` was current.
 * @member {Date} institution_price_as_of
 */
Holding.prototype['institution_price_as_of'] = undefined;

/**
 * Date and time at which `institution_price` was current, in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). 
 * @member {Date} institution_price_datetime
 */
Holding.prototype['institution_price_datetime'] = undefined;

/**
 * The value of the holding, as reported by the institution.
 * @member {Number} institution_value
 */
Holding.prototype['institution_value'] = undefined;

/**
 * The ISO-4217 currency code of the holding. Always `null` if `unofficial_currency_code` is non-`null`.
 * @member {String} iso_currency_code
 */
Holding.prototype['iso_currency_code'] = undefined;

/**
 * The total quantity of the asset held, as reported by the financial institution. If the security is an option, `quantity` will reflect the total number of options (typically the number of contracts multiplied by 100), not the number of contracts.
 * @member {Number} quantity
 */
Holding.prototype['quantity'] = undefined;

/**
 * The Plaid `security_id` associated with the holding. Security data is not specific to a user's account; any user who held the same security at the same financial institution at the same time would have identical security data. The `security_id` for the same security will typically be the same across different institutions, but this is not guaranteed. The `security_id` does not typically change, but may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change.
 * @member {String} security_id
 */
Holding.prototype['security_id'] = undefined;

/**
 * The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s. 
 * @member {String} unofficial_currency_code
 */
Holding.prototype['unofficial_currency_code'] = undefined;






export default Holding;

