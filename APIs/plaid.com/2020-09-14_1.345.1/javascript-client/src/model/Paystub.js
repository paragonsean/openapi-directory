/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Deductions from './Deductions';
import Earnings from './Earnings';
import Employee from './Employee';
import EmploymentDetails from './EmploymentDetails';
import IncomeBreakdown from './IncomeBreakdown';
import NetPay from './NetPay';
import PayPeriodDetails from './PayPeriodDetails';
import PaystubDetails from './PaystubDetails';
import PaystubEmployer from './PaystubEmployer';
import PaystubYTDDetails from './PaystubYTDDetails';

/**
 * The Paystub model module.
 * @module model/Paystub
 * @version 2020-09-14_1.345.1
 */
class Paystub {
    /**
     * Constructs a new <code>Paystub</code>.
     * An object representing data extracted from the end user&#39;s paystub.
     * @alias module:model/Paystub
     * @extends Object
     * @param deductions {module:model/Deductions} 
     * @param docId {String} An identifier of the document referenced by the document metadata.
     * @param earnings {module:model/Earnings} 
     * @param employee {module:model/Employee} 
     * @param employer {module:model/PaystubEmployer} 
     * @param netPay {module:model/NetPay} 
     * @param payPeriodDetails {module:model/PayPeriodDetails} 
     */
    constructor(deductions, docId, earnings, employee, employer, netPay, payPeriodDetails) { 
        
        Paystub.initialize(this, deductions, docId, earnings, employee, employer, netPay, payPeriodDetails);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deductions, docId, earnings, employee, employer, netPay, payPeriodDetails) { 
        obj['deductions'] = deductions;
        obj['doc_id'] = docId;
        obj['earnings'] = earnings;
        obj['employee'] = employee;
        obj['employer'] = employer;
        obj['net_pay'] = netPay;
        obj['pay_period_details'] = payPeriodDetails;
    }

    /**
     * Constructs a <code>Paystub</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Paystub} obj Optional instance to populate.
     * @return {module:model/Paystub} The populated <code>Paystub</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Paystub();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('deductions')) {
                obj['deductions'] = Deductions.constructFromObject(data['deductions']);
            }
            if (data.hasOwnProperty('doc_id')) {
                obj['doc_id'] = ApiClient.convertToType(data['doc_id'], 'String');
            }
            if (data.hasOwnProperty('earnings')) {
                obj['earnings'] = Earnings.constructFromObject(data['earnings']);
            }
            if (data.hasOwnProperty('employee')) {
                obj['employee'] = Employee.constructFromObject(data['employee']);
            }
            if (data.hasOwnProperty('employer')) {
                obj['employer'] = PaystubEmployer.constructFromObject(data['employer']);
            }
            if (data.hasOwnProperty('employment_details')) {
                obj['employment_details'] = EmploymentDetails.constructFromObject(data['employment_details']);
            }
            if (data.hasOwnProperty('income_breakdown')) {
                obj['income_breakdown'] = ApiClient.convertToType(data['income_breakdown'], [IncomeBreakdown]);
            }
            if (data.hasOwnProperty('net_pay')) {
                obj['net_pay'] = NetPay.constructFromObject(data['net_pay']);
            }
            if (data.hasOwnProperty('pay_period_details')) {
                obj['pay_period_details'] = PayPeriodDetails.constructFromObject(data['pay_period_details']);
            }
            if (data.hasOwnProperty('paystub_details')) {
                obj['paystub_details'] = PaystubDetails.constructFromObject(data['paystub_details']);
            }
            if (data.hasOwnProperty('ytd_earnings')) {
                obj['ytd_earnings'] = PaystubYTDDetails.constructFromObject(data['ytd_earnings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Paystub</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Paystub</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Paystub.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['doc_id'] && !(typeof data['doc_id'] === 'string' || data['doc_id'] instanceof String)) {
            throw new Error("Expected the field `doc_id` to be a primitive type in the JSON string but got " + data['doc_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['income_breakdown'])) {
            throw new Error("Expected the field `income_breakdown` to be an array in the JSON data but got " + data['income_breakdown']);
        }

        return true;
    }


}

Paystub.RequiredProperties = ["deductions", "doc_id", "earnings", "employee", "employer", "net_pay", "pay_period_details"];

/**
 * @member {module:model/Deductions} deductions
 */
Paystub.prototype['deductions'] = undefined;

/**
 * An identifier of the document referenced by the document metadata.
 * @member {String} doc_id
 */
Paystub.prototype['doc_id'] = undefined;

/**
 * @member {module:model/Earnings} earnings
 */
Paystub.prototype['earnings'] = undefined;

/**
 * @member {module:model/Employee} employee
 */
Paystub.prototype['employee'] = undefined;

/**
 * @member {module:model/PaystubEmployer} employer
 */
Paystub.prototype['employer'] = undefined;

/**
 * @member {module:model/EmploymentDetails} employment_details
 */
Paystub.prototype['employment_details'] = undefined;

/**
 * @member {Array.<module:model/IncomeBreakdown>} income_breakdown
 */
Paystub.prototype['income_breakdown'] = undefined;

/**
 * @member {module:model/NetPay} net_pay
 */
Paystub.prototype['net_pay'] = undefined;

/**
 * @member {module:model/PayPeriodDetails} pay_period_details
 */
Paystub.prototype['pay_period_details'] = undefined;

/**
 * @member {module:model/PaystubDetails} paystub_details
 */
Paystub.prototype['paystub_details'] = undefined;

/**
 * @member {module:model/PaystubYTDDetails} ytd_earnings
 */
Paystub.prototype['ytd_earnings'] = undefined;






export default Paystub;

