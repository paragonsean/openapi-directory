/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentInitiationConsentConstraints from './PaymentInitiationConsentConstraints';
import PaymentInitiationConsentScope from './PaymentInitiationConsentScope';
import PaymentInitiationConsentStatus from './PaymentInitiationConsentStatus';

/**
 * The PaymentInitiationConsent model module.
 * @module model/PaymentInitiationConsent
 * @version 2020-09-14_1.345.1
 */
class PaymentInitiationConsent {
    /**
     * Constructs a new <code>PaymentInitiationConsent</code>.
     * PaymentInitiationConsent defines a payment initiation consent.
     * @alias module:model/PaymentInitiationConsent
     * @extends Object
     * @param consentId {String} The consent ID.
     * @param constraints {module:model/PaymentInitiationConsentConstraints} 
     * @param createdAt {Date} Consent creation timestamp, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
     * @param recipientId {String} The ID of the recipient the payment consent is for.
     * @param reference {String} A reference for the payment consent.
     * @param scopes {Array.<module:model/PaymentInitiationConsentScope>} An array of payment consent scopes.
     * @param status {module:model/PaymentInitiationConsentStatus} 
     */
    constructor(consentId, constraints, createdAt, recipientId, reference, scopes, status) { 
        
        PaymentInitiationConsent.initialize(this, consentId, constraints, createdAt, recipientId, reference, scopes, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, consentId, constraints, createdAt, recipientId, reference, scopes, status) { 
        obj['consent_id'] = consentId;
        obj['constraints'] = constraints;
        obj['created_at'] = createdAt;
        obj['recipient_id'] = recipientId;
        obj['reference'] = reference;
        obj['scopes'] = scopes;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>PaymentInitiationConsent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentInitiationConsent} obj Optional instance to populate.
     * @return {module:model/PaymentInitiationConsent} The populated <code>PaymentInitiationConsent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentInitiationConsent();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('consent_id')) {
                obj['consent_id'] = ApiClient.convertToType(data['consent_id'], 'String');
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = PaymentInitiationConsentConstraints.constructFromObject(data['constraints']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('recipient_id')) {
                obj['recipient_id'] = ApiClient.convertToType(data['recipient_id'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], [PaymentInitiationConsentScope]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = PaymentInitiationConsentStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentInitiationConsent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentInitiationConsent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentInitiationConsent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['consent_id'] && !(typeof data['consent_id'] === 'string' || data['consent_id'] instanceof String)) {
            throw new Error("Expected the field `consent_id` to be a primitive type in the JSON string but got " + data['consent_id']);
        }
        // ensure the json data is a string
        if (data['recipient_id'] && !(typeof data['recipient_id'] === 'string' || data['recipient_id'] instanceof String)) {
            throw new Error("Expected the field `recipient_id` to be a primitive type in the JSON string but got " + data['recipient_id']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }

        return true;
    }


}

PaymentInitiationConsent.RequiredProperties = ["consent_id", "constraints", "created_at", "recipient_id", "reference", "scopes", "status"];

/**
 * The consent ID.
 * @member {String} consent_id
 */
PaymentInitiationConsent.prototype['consent_id'] = undefined;

/**
 * @member {module:model/PaymentInitiationConsentConstraints} constraints
 */
PaymentInitiationConsent.prototype['constraints'] = undefined;

/**
 * Consent creation timestamp, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
 * @member {Date} created_at
 */
PaymentInitiationConsent.prototype['created_at'] = undefined;

/**
 * The ID of the recipient the payment consent is for.
 * @member {String} recipient_id
 */
PaymentInitiationConsent.prototype['recipient_id'] = undefined;

/**
 * A reference for the payment consent.
 * @member {String} reference
 */
PaymentInitiationConsent.prototype['reference'] = undefined;

/**
 * An array of payment consent scopes.
 * @member {Array.<module:model/PaymentInitiationConsentScope>} scopes
 */
PaymentInitiationConsent.prototype['scopes'] = undefined;

/**
 * @member {module:model/PaymentInitiationConsentStatus} status
 */
PaymentInitiationConsent.prototype['status'] = undefined;






export default PaymentInitiationConsent;

