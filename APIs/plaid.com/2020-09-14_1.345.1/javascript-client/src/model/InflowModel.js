/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InflowModel model module.
 * @module model/InflowModel
 * @version 2020-09-14_1.345.1
 */
class InflowModel {
    /**
     * Constructs a new <code>InflowModel</code>.
     * The &#x60;inflow_model&#x60; allows you to model a test account that receives regular income or make regular payments on a loan. Any transactions generated by the &#x60;inflow_model&#x60; will appear in addition to randomly generated test data or transactions specified by &#x60;override_accounts&#x60;.
     * @alias module:model/InflowModel
     * @extends Object
     * @param incomeAmount {Number} Amount of income per month. This value is required if `type` is `monthly-income`.
     * @param paymentDayOfMonth {Number} Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the income transaction will appear. The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.
     * @param statementDayOfMonth {String} Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the balance is calculated for the next payment. The name of the income transaction. This field is required if `type` is `monthly-balance-payment` or `monthly-interest-only-payment`.
     * @param transactionName {String} The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.
     * @param type {String} Inflow model. One of the following:  `none`: No income  `monthly-income`: Income occurs once per month `monthly-balance-payment`: Pays off the balance on a liability account at the given statement day of month.  `monthly-interest-only-payment`: Makes an interest-only payment on a liability account at the given statement day of month.  Note that account types supported by Liabilities will accrue interest in the Sandbox. The types impacted are account type `credit` with subtype `credit` or `paypal`, and account type `loan` with subtype `student` or `mortgage`.
     */
    constructor(incomeAmount, paymentDayOfMonth, statementDayOfMonth, transactionName, type) { 
        
        InflowModel.initialize(this, incomeAmount, paymentDayOfMonth, statementDayOfMonth, transactionName, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, incomeAmount, paymentDayOfMonth, statementDayOfMonth, transactionName, type) { 
        obj['income_amount'] = incomeAmount;
        obj['payment_day_of_month'] = paymentDayOfMonth;
        obj['statement_day_of_month'] = statementDayOfMonth;
        obj['transaction_name'] = transactionName;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>InflowModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InflowModel} obj Optional instance to populate.
     * @return {module:model/InflowModel} The populated <code>InflowModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InflowModel();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('income_amount')) {
                obj['income_amount'] = ApiClient.convertToType(data['income_amount'], 'Number');
            }
            if (data.hasOwnProperty('payment_day_of_month')) {
                obj['payment_day_of_month'] = ApiClient.convertToType(data['payment_day_of_month'], 'Number');
            }
            if (data.hasOwnProperty('statement_day_of_month')) {
                obj['statement_day_of_month'] = ApiClient.convertToType(data['statement_day_of_month'], 'String');
            }
            if (data.hasOwnProperty('transaction_name')) {
                obj['transaction_name'] = ApiClient.convertToType(data['transaction_name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InflowModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InflowModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InflowModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['statement_day_of_month'] && !(typeof data['statement_day_of_month'] === 'string' || data['statement_day_of_month'] instanceof String)) {
            throw new Error("Expected the field `statement_day_of_month` to be a primitive type in the JSON string but got " + data['statement_day_of_month']);
        }
        // ensure the json data is a string
        if (data['transaction_name'] && !(typeof data['transaction_name'] === 'string' || data['transaction_name'] instanceof String)) {
            throw new Error("Expected the field `transaction_name` to be a primitive type in the JSON string but got " + data['transaction_name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

InflowModel.RequiredProperties = ["income_amount", "payment_day_of_month", "statement_day_of_month", "transaction_name", "type"];

/**
 * Amount of income per month. This value is required if `type` is `monthly-income`.
 * @member {Number} income_amount
 */
InflowModel.prototype['income_amount'] = undefined;

/**
 * Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the income transaction will appear. The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.
 * @member {Number} payment_day_of_month
 */
InflowModel.prototype['payment_day_of_month'] = undefined;

/**
 * Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the balance is calculated for the next payment. The name of the income transaction. This field is required if `type` is `monthly-balance-payment` or `monthly-interest-only-payment`.
 * @member {String} statement_day_of_month
 */
InflowModel.prototype['statement_day_of_month'] = undefined;

/**
 * The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`.
 * @member {String} transaction_name
 */
InflowModel.prototype['transaction_name'] = undefined;

/**
 * Inflow model. One of the following:  `none`: No income  `monthly-income`: Income occurs once per month `monthly-balance-payment`: Pays off the balance on a liability account at the given statement day of month.  `monthly-interest-only-payment`: Makes an interest-only payment on a liability account at the given statement day of month.  Note that account types supported by Liabilities will accrue interest in the Sandbox. The types impacted are account type `credit` with subtype `credit` or `paypal`, and account type `loan` with subtype `student` or `mortgage`.
 * @member {String} type
 */
InflowModel.prototype['type'] = undefined;






export default InflowModel;

