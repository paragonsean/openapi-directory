/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BankTransferDirection from './BankTransferDirection';
import BankTransferEventType from './BankTransferEventType';
import BankTransferFailure from './BankTransferFailure';
import BankTransferType from './BankTransferType';

/**
 * The BankTransferEvent model module.
 * @module model/BankTransferEvent
 * @version 2020-09-14_1.345.1
 */
class BankTransferEvent {
    /**
     * Constructs a new <code>BankTransferEvent</code>.
     * Represents an event in the Bank Transfers API.
     * @alias module:model/BankTransferEvent
     * @extends Object
     * @param accountId {String} The account ID associated with the bank transfer.
     * @param bankTransferAmount {String} The bank transfer amount.
     * @param bankTransferId {String} Plaid’s unique identifier for a bank transfer.
     * @param bankTransferIsoCurrencyCode {String} The currency of the bank transfer amount.
     * @param bankTransferType {module:model/BankTransferType} 
     * @param direction {module:model/BankTransferDirection} 
     * @param eventId {Number} Plaid’s unique identifier for this event. IDs are sequential unsigned 64-bit integers.
     * @param eventType {module:model/BankTransferEventType} 
     * @param failureReason {module:model/BankTransferFailure} 
     * @param originationAccountId {String} The ID of the origination account that this balance belongs to.
     * @param timestamp {Date} The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.
     */
    constructor(accountId, bankTransferAmount, bankTransferId, bankTransferIsoCurrencyCode, bankTransferType, direction, eventId, eventType, failureReason, originationAccountId, timestamp) { 
        
        BankTransferEvent.initialize(this, accountId, bankTransferAmount, bankTransferId, bankTransferIsoCurrencyCode, bankTransferType, direction, eventId, eventType, failureReason, originationAccountId, timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, bankTransferAmount, bankTransferId, bankTransferIsoCurrencyCode, bankTransferType, direction, eventId, eventType, failureReason, originationAccountId, timestamp) { 
        obj['account_id'] = accountId;
        obj['bank_transfer_amount'] = bankTransferAmount;
        obj['bank_transfer_id'] = bankTransferId;
        obj['bank_transfer_iso_currency_code'] = bankTransferIsoCurrencyCode;
        obj['bank_transfer_type'] = bankTransferType;
        obj['direction'] = direction;
        obj['event_id'] = eventId;
        obj['event_type'] = eventType;
        obj['failure_reason'] = failureReason;
        obj['origination_account_id'] = originationAccountId;
        obj['timestamp'] = timestamp;
    }

    /**
     * Constructs a <code>BankTransferEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BankTransferEvent} obj Optional instance to populate.
     * @return {module:model/BankTransferEvent} The populated <code>BankTransferEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BankTransferEvent();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('bank_transfer_amount')) {
                obj['bank_transfer_amount'] = ApiClient.convertToType(data['bank_transfer_amount'], 'String');
            }
            if (data.hasOwnProperty('bank_transfer_id')) {
                obj['bank_transfer_id'] = ApiClient.convertToType(data['bank_transfer_id'], 'String');
            }
            if (data.hasOwnProperty('bank_transfer_iso_currency_code')) {
                obj['bank_transfer_iso_currency_code'] = ApiClient.convertToType(data['bank_transfer_iso_currency_code'], 'String');
            }
            if (data.hasOwnProperty('bank_transfer_type')) {
                obj['bank_transfer_type'] = BankTransferType.constructFromObject(data['bank_transfer_type']);
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = BankTransferDirection.constructFromObject(data['direction']);
            }
            if (data.hasOwnProperty('event_id')) {
                obj['event_id'] = ApiClient.convertToType(data['event_id'], 'Number');
            }
            if (data.hasOwnProperty('event_type')) {
                obj['event_type'] = BankTransferEventType.constructFromObject(data['event_type']);
            }
            if (data.hasOwnProperty('failure_reason')) {
                obj['failure_reason'] = BankTransferFailure.constructFromObject(data['failure_reason']);
            }
            if (data.hasOwnProperty('origination_account_id')) {
                obj['origination_account_id'] = ApiClient.convertToType(data['origination_account_id'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BankTransferEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BankTransferEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BankTransferEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['bank_transfer_amount'] && !(typeof data['bank_transfer_amount'] === 'string' || data['bank_transfer_amount'] instanceof String)) {
            throw new Error("Expected the field `bank_transfer_amount` to be a primitive type in the JSON string but got " + data['bank_transfer_amount']);
        }
        // ensure the json data is a string
        if (data['bank_transfer_id'] && !(typeof data['bank_transfer_id'] === 'string' || data['bank_transfer_id'] instanceof String)) {
            throw new Error("Expected the field `bank_transfer_id` to be a primitive type in the JSON string but got " + data['bank_transfer_id']);
        }
        // ensure the json data is a string
        if (data['bank_transfer_iso_currency_code'] && !(typeof data['bank_transfer_iso_currency_code'] === 'string' || data['bank_transfer_iso_currency_code'] instanceof String)) {
            throw new Error("Expected the field `bank_transfer_iso_currency_code` to be a primitive type in the JSON string but got " + data['bank_transfer_iso_currency_code']);
        }
        // ensure the json data is a string
        if (data['origination_account_id'] && !(typeof data['origination_account_id'] === 'string' || data['origination_account_id'] instanceof String)) {
            throw new Error("Expected the field `origination_account_id` to be a primitive type in the JSON string but got " + data['origination_account_id']);
        }

        return true;
    }


}

BankTransferEvent.RequiredProperties = ["account_id", "bank_transfer_amount", "bank_transfer_id", "bank_transfer_iso_currency_code", "bank_transfer_type", "direction", "event_id", "event_type", "failure_reason", "origination_account_id", "timestamp"];

/**
 * The account ID associated with the bank transfer.
 * @member {String} account_id
 */
BankTransferEvent.prototype['account_id'] = undefined;

/**
 * The bank transfer amount.
 * @member {String} bank_transfer_amount
 */
BankTransferEvent.prototype['bank_transfer_amount'] = undefined;

/**
 * Plaid’s unique identifier for a bank transfer.
 * @member {String} bank_transfer_id
 */
BankTransferEvent.prototype['bank_transfer_id'] = undefined;

/**
 * The currency of the bank transfer amount.
 * @member {String} bank_transfer_iso_currency_code
 */
BankTransferEvent.prototype['bank_transfer_iso_currency_code'] = undefined;

/**
 * @member {module:model/BankTransferType} bank_transfer_type
 */
BankTransferEvent.prototype['bank_transfer_type'] = undefined;

/**
 * @member {module:model/BankTransferDirection} direction
 */
BankTransferEvent.prototype['direction'] = undefined;

/**
 * Plaid’s unique identifier for this event. IDs are sequential unsigned 64-bit integers.
 * @member {Number} event_id
 */
BankTransferEvent.prototype['event_id'] = undefined;

/**
 * @member {module:model/BankTransferEventType} event_type
 */
BankTransferEvent.prototype['event_type'] = undefined;

/**
 * @member {module:model/BankTransferFailure} failure_reason
 */
BankTransferEvent.prototype['failure_reason'] = undefined;

/**
 * The ID of the origination account that this balance belongs to.
 * @member {String} origination_account_id
 */
BankTransferEvent.prototype['origination_account_id'] = undefined;

/**
 * The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.
 * @member {Date} timestamp
 */
BankTransferEvent.prototype['timestamp'] = undefined;






export default BankTransferEvent;

