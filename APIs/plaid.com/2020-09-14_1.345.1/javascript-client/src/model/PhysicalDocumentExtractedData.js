/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PhysicalDocumentCategory from './PhysicalDocumentCategory';

/**
 * The PhysicalDocumentExtractedData model module.
 * @module model/PhysicalDocumentExtractedData
 * @version 2020-09-14_1.345.1
 */
class PhysicalDocumentExtractedData {
    /**
     * Constructs a new <code>PhysicalDocumentExtractedData</code>.
     * Data extracted from a user-submitted document.
     * @alias module:model/PhysicalDocumentExtractedData
     * @extends Object
     * @param category {module:model/PhysicalDocumentCategory} 
     * @param expirationDate {Date} A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @param idNumber {String} Alpha-numeric ID number extracted via OCR from the user's document image.
     * @param issuingCountry {String} Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * @param issuingRegion {String} An ISO 3166-2 subdivision code. Related terms would be \"state\", \"province\", \"prefecture\", \"zone\", \"subdivision\", etc.
     */
    constructor(category, expirationDate, idNumber, issuingCountry, issuingRegion) { 
        
        PhysicalDocumentExtractedData.initialize(this, category, expirationDate, idNumber, issuingCountry, issuingRegion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, category, expirationDate, idNumber, issuingCountry, issuingRegion) { 
        obj['category'] = category;
        obj['expiration_date'] = expirationDate;
        obj['id_number'] = idNumber;
        obj['issuing_country'] = issuingCountry;
        obj['issuing_region'] = issuingRegion;
    }

    /**
     * Constructs a <code>PhysicalDocumentExtractedData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PhysicalDocumentExtractedData} obj Optional instance to populate.
     * @return {module:model/PhysicalDocumentExtractedData} The populated <code>PhysicalDocumentExtractedData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PhysicalDocumentExtractedData();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('category')) {
                obj['category'] = PhysicalDocumentCategory.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('expiration_date')) {
                obj['expiration_date'] = ApiClient.convertToType(data['expiration_date'], 'Date');
            }
            if (data.hasOwnProperty('id_number')) {
                obj['id_number'] = ApiClient.convertToType(data['id_number'], 'String');
            }
            if (data.hasOwnProperty('issuing_country')) {
                obj['issuing_country'] = ApiClient.convertToType(data['issuing_country'], 'String');
            }
            if (data.hasOwnProperty('issuing_region')) {
                obj['issuing_region'] = ApiClient.convertToType(data['issuing_region'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PhysicalDocumentExtractedData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PhysicalDocumentExtractedData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PhysicalDocumentExtractedData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id_number'] && !(typeof data['id_number'] === 'string' || data['id_number'] instanceof String)) {
            throw new Error("Expected the field `id_number` to be a primitive type in the JSON string but got " + data['id_number']);
        }
        // ensure the json data is a string
        if (data['issuing_country'] && !(typeof data['issuing_country'] === 'string' || data['issuing_country'] instanceof String)) {
            throw new Error("Expected the field `issuing_country` to be a primitive type in the JSON string but got " + data['issuing_country']);
        }
        // ensure the json data is a string
        if (data['issuing_region'] && !(typeof data['issuing_region'] === 'string' || data['issuing_region'] instanceof String)) {
            throw new Error("Expected the field `issuing_region` to be a primitive type in the JSON string but got " + data['issuing_region']);
        }

        return true;
    }


}

PhysicalDocumentExtractedData.RequiredProperties = ["category", "expiration_date", "id_number", "issuing_country", "issuing_region"];

/**
 * @member {module:model/PhysicalDocumentCategory} category
 */
PhysicalDocumentExtractedData.prototype['category'] = undefined;

/**
 * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
 * @member {Date} expiration_date
 */
PhysicalDocumentExtractedData.prototype['expiration_date'] = undefined;

/**
 * Alpha-numeric ID number extracted via OCR from the user's document image.
 * @member {String} id_number
 */
PhysicalDocumentExtractedData.prototype['id_number'] = undefined;

/**
 * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
 * @member {String} issuing_country
 */
PhysicalDocumentExtractedData.prototype['issuing_country'] = undefined;

/**
 * An ISO 3166-2 subdivision code. Related terms would be \"state\", \"province\", \"prefecture\", \"zone\", \"subdivision\", etc.
 * @member {String} issuing_region
 */
PhysicalDocumentExtractedData.prototype['issuing_region'] = undefined;






export default PhysicalDocumentExtractedData;

