/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ACHClass from './ACHClass';
import TransferNetwork from './TransferNetwork';
import TransferRecurringSchedule from './TransferRecurringSchedule';
import TransferRecurringStatus from './TransferRecurringStatus';
import TransferType from './TransferType';
import TransferUserInResponse from './TransferUserInResponse';

/**
 * The RecurringTransfer model module.
 * @module model/RecurringTransfer
 * @version 2020-09-14_1.345.1
 */
class RecurringTransfer {
    /**
     * Constructs a new <code>RecurringTransfer</code>.
     * Represents a recurring transfer within the Transfers API.
     * @alias module:model/RecurringTransfer
     * @extends Object
     * @param accountId {String} The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
     * @param amount {String} The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @param created {Date} The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
     * @param description {String} The description of the recurring transfer.
     * @param fundingAccountId {String} The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
     * @param isoCurrencyCode {String} The currency of the transfer amount, e.g. \"USD\"
     * @param network {module:model/TransferNetwork} 
     * @param nextOriginationDate {Date} A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).  The next transfer origination date after bank holiday adjustment.
     * @param originationAccountId {String} Plaid’s unique identifier for the origination account that was used for this transfer.
     * @param recurringTransferId {String} Plaid’s unique identifier for a recurring transfer.
     * @param schedule {module:model/TransferRecurringSchedule} 
     * @param status {module:model/TransferRecurringStatus} 
     * @param transferIds {Array.<String>} 
     * @param type {module:model/TransferType} 
     * @param user {module:model/TransferUserInResponse} 
     */
    constructor(accountId, amount, created, description, fundingAccountId, isoCurrencyCode, network, nextOriginationDate, originationAccountId, recurringTransferId, schedule, status, transferIds, type, user) { 
        
        RecurringTransfer.initialize(this, accountId, amount, created, description, fundingAccountId, isoCurrencyCode, network, nextOriginationDate, originationAccountId, recurringTransferId, schedule, status, transferIds, type, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, amount, created, description, fundingAccountId, isoCurrencyCode, network, nextOriginationDate, originationAccountId, recurringTransferId, schedule, status, transferIds, type, user) { 
        obj['account_id'] = accountId;
        obj['amount'] = amount;
        obj['created'] = created;
        obj['description'] = description;
        obj['funding_account_id'] = fundingAccountId;
        obj['iso_currency_code'] = isoCurrencyCode;
        obj['network'] = network;
        obj['next_origination_date'] = nextOriginationDate;
        obj['origination_account_id'] = originationAccountId;
        obj['recurring_transfer_id'] = recurringTransferId;
        obj['schedule'] = schedule;
        obj['status'] = status;
        obj['transfer_ids'] = transferIds;
        obj['type'] = type;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>RecurringTransfer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecurringTransfer} obj Optional instance to populate.
     * @return {module:model/RecurringTransfer} The populated <code>RecurringTransfer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecurringTransfer();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('ach_class')) {
                obj['ach_class'] = ACHClass.constructFromObject(data['ach_class']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('funding_account_id')) {
                obj['funding_account_id'] = ApiClient.convertToType(data['funding_account_id'], 'String');
            }
            if (data.hasOwnProperty('iso_currency_code')) {
                obj['iso_currency_code'] = ApiClient.convertToType(data['iso_currency_code'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = TransferNetwork.constructFromObject(data['network']);
            }
            if (data.hasOwnProperty('next_origination_date')) {
                obj['next_origination_date'] = ApiClient.convertToType(data['next_origination_date'], 'Date');
            }
            if (data.hasOwnProperty('origination_account_id')) {
                obj['origination_account_id'] = ApiClient.convertToType(data['origination_account_id'], 'String');
            }
            if (data.hasOwnProperty('recurring_transfer_id')) {
                obj['recurring_transfer_id'] = ApiClient.convertToType(data['recurring_transfer_id'], 'String');
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = TransferRecurringSchedule.constructFromObject(data['schedule']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TransferRecurringStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('test_clock_id')) {
                obj['test_clock_id'] = ApiClient.convertToType(data['test_clock_id'], 'String');
            }
            if (data.hasOwnProperty('transfer_ids')) {
                obj['transfer_ids'] = ApiClient.convertToType(data['transfer_ids'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = TransferType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = TransferUserInResponse.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecurringTransfer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecurringTransfer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RecurringTransfer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['funding_account_id'] && !(typeof data['funding_account_id'] === 'string' || data['funding_account_id'] instanceof String)) {
            throw new Error("Expected the field `funding_account_id` to be a primitive type in the JSON string but got " + data['funding_account_id']);
        }
        // ensure the json data is a string
        if (data['iso_currency_code'] && !(typeof data['iso_currency_code'] === 'string' || data['iso_currency_code'] instanceof String)) {
            throw new Error("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got " + data['iso_currency_code']);
        }
        // ensure the json data is a string
        if (data['origination_account_id'] && !(typeof data['origination_account_id'] === 'string' || data['origination_account_id'] instanceof String)) {
            throw new Error("Expected the field `origination_account_id` to be a primitive type in the JSON string but got " + data['origination_account_id']);
        }
        // ensure the json data is a string
        if (data['recurring_transfer_id'] && !(typeof data['recurring_transfer_id'] === 'string' || data['recurring_transfer_id'] instanceof String)) {
            throw new Error("Expected the field `recurring_transfer_id` to be a primitive type in the JSON string but got " + data['recurring_transfer_id']);
        }
        // validate the optional field `schedule`
        if (data['schedule']) { // data not null
          TransferRecurringSchedule.validateJSON(data['schedule']);
        }
        // ensure the json data is a string
        if (data['test_clock_id'] && !(typeof data['test_clock_id'] === 'string' || data['test_clock_id'] instanceof String)) {
            throw new Error("Expected the field `test_clock_id` to be a primitive type in the JSON string but got " + data['test_clock_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['transfer_ids'])) {
            throw new Error("Expected the field `transfer_ids` to be an array in the JSON data but got " + data['transfer_ids']);
        }

        return true;
    }


}

RecurringTransfer.RequiredProperties = ["account_id", "amount", "created", "description", "funding_account_id", "iso_currency_code", "network", "next_origination_date", "origination_account_id", "recurring_transfer_id", "schedule", "status", "transfer_ids", "type", "user"];

/**
 * The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
 * @member {String} account_id
 */
RecurringTransfer.prototype['account_id'] = undefined;

/**
 * @member {module:model/ACHClass} ach_class
 */
RecurringTransfer.prototype['ach_class'] = undefined;

/**
 * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
 * @member {String} amount
 */
RecurringTransfer.prototype['amount'] = undefined;

/**
 * The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
 * @member {Date} created
 */
RecurringTransfer.prototype['created'] = undefined;

/**
 * The description of the recurring transfer.
 * @member {String} description
 */
RecurringTransfer.prototype['description'] = undefined;

/**
 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
 * @member {String} funding_account_id
 */
RecurringTransfer.prototype['funding_account_id'] = undefined;

/**
 * The currency of the transfer amount, e.g. \"USD\"
 * @member {String} iso_currency_code
 */
RecurringTransfer.prototype['iso_currency_code'] = undefined;

/**
 * @member {module:model/TransferNetwork} network
 */
RecurringTransfer.prototype['network'] = undefined;

/**
 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).  The next transfer origination date after bank holiday adjustment.
 * @member {Date} next_origination_date
 */
RecurringTransfer.prototype['next_origination_date'] = undefined;

/**
 * Plaid’s unique identifier for the origination account that was used for this transfer.
 * @member {String} origination_account_id
 */
RecurringTransfer.prototype['origination_account_id'] = undefined;

/**
 * Plaid’s unique identifier for a recurring transfer.
 * @member {String} recurring_transfer_id
 */
RecurringTransfer.prototype['recurring_transfer_id'] = undefined;

/**
 * @member {module:model/TransferRecurringSchedule} schedule
 */
RecurringTransfer.prototype['schedule'] = undefined;

/**
 * @member {module:model/TransferRecurringStatus} status
 */
RecurringTransfer.prototype['status'] = undefined;

/**
 * Plaid’s unique identifier for a test clock.
 * @member {String} test_clock_id
 */
RecurringTransfer.prototype['test_clock_id'] = undefined;

/**
 * @member {Array.<String>} transfer_ids
 */
RecurringTransfer.prototype['transfer_ids'] = undefined;

/**
 * @member {module:model/TransferType} type
 */
RecurringTransfer.prototype['type'] = undefined;

/**
 * @member {module:model/TransferUserInResponse} user
 */
RecurringTransfer.prototype['user'] = undefined;






export default RecurringTransfer;

