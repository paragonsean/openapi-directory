/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlaidError from './PlaidError';
import Products from './Products';

/**
 * The Item model module.
 * @module model/Item
 * @version 2020-09-14_1.345.1
 */
class Item {
    /**
     * Constructs a new <code>Item</code>.
     * Metadata about the Item.
     * @alias module:model/Item
     * @extends Object
     * @param availableProducts {Array.<module:model/Products>} A list of products available for the Item that have not yet been accessed. The contents of this array will be mutually exclusive with `billed_products`.
     * @param billedProducts {Array.<module:model/Products>} A list of products that have been billed for the Item. The contents of this array will be mutually exclusive with `available_products`. Note - `billed_products` is populated in all environments but only requests in Production are billed. Also note that products that are billed on a pay-per-call basis rather than a pay-per-Item basis, such as `balance`, will not appear here. 
     * @param consentExpirationTime {Date} The RFC 3339 timestamp after which the consent provided by the end user will expire. Upon consent expiration, the item will enter the `ITEM_LOGIN_REQUIRED` error state. To circumvent the `ITEM_LOGIN_REQUIRED` error and maintain continuous consent, the end user can reauthenticate via Link’s update mode in advance of the consent expiration time.  Note - This is only relevant for certain OAuth-based institutions. For all other institutions, this field will be null. 
     * @param error {module:model/PlaidError} 
     * @param itemId {String} The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.
     * @param updateType {module:model/Item.UpdateTypeEnum} Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.  `background` - Item can be updated in the background  `user_present_required` - Item requires user interaction to be updated
     * @param webhook {String} The URL registered to receive webhooks for the Item.
     */
    constructor(availableProducts, billedProducts, consentExpirationTime, error, itemId, updateType, webhook) { 
        
        Item.initialize(this, availableProducts, billedProducts, consentExpirationTime, error, itemId, updateType, webhook);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, availableProducts, billedProducts, consentExpirationTime, error, itemId, updateType, webhook) { 
        obj['available_products'] = availableProducts;
        obj['billed_products'] = billedProducts;
        obj['consent_expiration_time'] = consentExpirationTime;
        obj['error'] = error;
        obj['item_id'] = itemId;
        obj['update_type'] = updateType;
        obj['webhook'] = webhook;
    }

    /**
     * Constructs a <code>Item</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Item} obj Optional instance to populate.
     * @return {module:model/Item} The populated <code>Item</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Item();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('available_products')) {
                obj['available_products'] = ApiClient.convertToType(data['available_products'], [Products]);
            }
            if (data.hasOwnProperty('billed_products')) {
                obj['billed_products'] = ApiClient.convertToType(data['billed_products'], [Products]);
            }
            if (data.hasOwnProperty('consent_expiration_time')) {
                obj['consent_expiration_time'] = ApiClient.convertToType(data['consent_expiration_time'], 'Date');
            }
            if (data.hasOwnProperty('consented_products')) {
                obj['consented_products'] = ApiClient.convertToType(data['consented_products'], [Products]);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = PlaidError.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('institution_id')) {
                obj['institution_id'] = ApiClient.convertToType(data['institution_id'], 'String');
            }
            if (data.hasOwnProperty('item_id')) {
                obj['item_id'] = ApiClient.convertToType(data['item_id'], 'String');
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [Products]);
            }
            if (data.hasOwnProperty('update_type')) {
                obj['update_type'] = ApiClient.convertToType(data['update_type'], 'String');
            }
            if (data.hasOwnProperty('webhook')) {
                obj['webhook'] = ApiClient.convertToType(data['webhook'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Item</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Item</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Item.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['available_products'])) {
            throw new Error("Expected the field `available_products` to be an array in the JSON data but got " + data['available_products']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['billed_products'])) {
            throw new Error("Expected the field `billed_products` to be an array in the JSON data but got " + data['billed_products']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['consented_products'])) {
            throw new Error("Expected the field `consented_products` to be an array in the JSON data but got " + data['consented_products']);
        }
        // ensure the json data is a string
        if (data['institution_id'] && !(typeof data['institution_id'] === 'string' || data['institution_id'] instanceof String)) {
            throw new Error("Expected the field `institution_id` to be a primitive type in the JSON string but got " + data['institution_id']);
        }
        // ensure the json data is a string
        if (data['item_id'] && !(typeof data['item_id'] === 'string' || data['item_id'] instanceof String)) {
            throw new Error("Expected the field `item_id` to be a primitive type in the JSON string but got " + data['item_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['products'])) {
            throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
        }
        // ensure the json data is a string
        if (data['update_type'] && !(typeof data['update_type'] === 'string' || data['update_type'] instanceof String)) {
            throw new Error("Expected the field `update_type` to be a primitive type in the JSON string but got " + data['update_type']);
        }
        // ensure the json data is a string
        if (data['webhook'] && !(typeof data['webhook'] === 'string' || data['webhook'] instanceof String)) {
            throw new Error("Expected the field `webhook` to be a primitive type in the JSON string but got " + data['webhook']);
        }

        return true;
    }


}

Item.RequiredProperties = ["available_products", "billed_products", "consent_expiration_time", "error", "item_id", "update_type", "webhook"];

/**
 * A list of products available for the Item that have not yet been accessed. The contents of this array will be mutually exclusive with `billed_products`.
 * @member {Array.<module:model/Products>} available_products
 */
Item.prototype['available_products'] = undefined;

/**
 * A list of products that have been billed for the Item. The contents of this array will be mutually exclusive with `available_products`. Note - `billed_products` is populated in all environments but only requests in Production are billed. Also note that products that are billed on a pay-per-call basis rather than a pay-per-Item basis, such as `balance`, will not appear here. 
 * @member {Array.<module:model/Products>} billed_products
 */
Item.prototype['billed_products'] = undefined;

/**
 * The RFC 3339 timestamp after which the consent provided by the end user will expire. Upon consent expiration, the item will enter the `ITEM_LOGIN_REQUIRED` error state. To circumvent the `ITEM_LOGIN_REQUIRED` error and maintain continuous consent, the end user can reauthenticate via Link’s update mode in advance of the consent expiration time.  Note - This is only relevant for certain OAuth-based institutions. For all other institutions, this field will be null. 
 * @member {Date} consent_expiration_time
 */
Item.prototype['consent_expiration_time'] = undefined;

/**
 * Beta: A list of products that have gone through consent collection for the Item. Only present for those enabled in the beta. 
 * @member {Array.<module:model/Products>} consented_products
 */
Item.prototype['consented_products'] = undefined;

/**
 * @member {module:model/PlaidError} error
 */
Item.prototype['error'] = undefined;

/**
 * The Plaid Institution ID associated with the Item. Field is `null` for Items created via Same Day Micro-deposits.
 * @member {String} institution_id
 */
Item.prototype['institution_id'] = undefined;

/**
 * The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.
 * @member {String} item_id
 */
Item.prototype['item_id'] = undefined;

/**
 * A list of authorized products for the Item. 
 * @member {Array.<module:model/Products>} products
 */
Item.prototype['products'] = undefined;

/**
 * Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.  `background` - Item can be updated in the background  `user_present_required` - Item requires user interaction to be updated
 * @member {module:model/Item.UpdateTypeEnum} update_type
 */
Item.prototype['update_type'] = undefined;

/**
 * The URL registered to receive webhooks for the Item.
 * @member {String} webhook
 */
Item.prototype['webhook'] = undefined;





/**
 * Allowed values for the <code>update_type</code> property.
 * @enum {String}
 * @readonly
 */
Item['UpdateTypeEnum'] = {

    /**
     * value: "background"
     * @const
     */
    "background": "background",

    /**
     * value: "user_present_required"
     * @const
     */
    "user_present_required": "user_present_required"
};



export default Item;

