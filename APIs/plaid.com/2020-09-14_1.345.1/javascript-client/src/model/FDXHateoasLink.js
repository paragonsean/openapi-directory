/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FDXContentTypes from './FDXContentTypes';
import FDXHateoasLinkAction from './FDXHateoasLinkAction';

/**
 * The FDXHateoasLink model module.
 * @module model/FDXHateoasLink
 * @version 2020-09-14_1.345.1
 */
class FDXHateoasLink {
    /**
     * Constructs a new <code>FDXHateoasLink</code>.
     * REST application constraint (Hypermedia As The Engine Of Application State)
     * @alias module:model/FDXHateoasLink
     * @param href {String} URL to invoke the action on the resource
     */
    constructor(href) { 
        
        FDXHateoasLink.initialize(this, href);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, href) { 
        obj['href'] = href;
    }

    /**
     * Constructs a <code>FDXHateoasLink</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FDXHateoasLink} obj Optional instance to populate.
     * @return {module:model/FDXHateoasLink} The populated <code>FDXHateoasLink</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FDXHateoasLink();

            if (data.hasOwnProperty('action')) {
                obj['action'] = FDXHateoasLinkAction.constructFromObject(data['action']);
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('rel')) {
                obj['rel'] = ApiClient.convertToType(data['rel'], 'String');
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], [FDXContentTypes]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FDXHateoasLink</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FDXHateoasLink</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FDXHateoasLink.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['rel'] && !(typeof data['rel'] === 'string' || data['rel'] instanceof String)) {
            throw new Error("Expected the field `rel` to be a primitive type in the JSON string but got " + data['rel']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['types'])) {
            throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
        }

        return true;
    }


}

FDXHateoasLink.RequiredProperties = ["href"];

/**
 * @member {module:model/FDXHateoasLinkAction} action
 */
FDXHateoasLink.prototype['action'] = undefined;

/**
 * URL to invoke the action on the resource
 * @member {String} href
 */
FDXHateoasLink.prototype['href'] = undefined;

/**
 * Relation of this link to its containing entity, as defined by and with many example relation values at [IETF RFC5988](https://datatracker.ietf.org/doc/html/rfc5988)
 * @member {String} rel
 */
FDXHateoasLink.prototype['rel'] = undefined;

/**
 * Content-types that can be used in the Accept header
 * @member {Array.<module:model/FDXContentTypes>} types
 */
FDXHateoasLink.prototype['types'] = undefined;






export default FDXHateoasLink;

