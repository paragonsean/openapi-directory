/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StandaloneAccountType model module.
 * @module model/StandaloneAccountType
 * @version 2020-09-14_1.345.1
 */
class StandaloneAccountType {
    /**
     * Constructs a new <code>StandaloneAccountType</code>.
     * The schema below describes the various &#x60;types&#x60; and corresponding &#x60;subtypes&#x60; that Plaid recognizes and reports for financial institution accounts.
     * @alias module:model/StandaloneAccountType
     * @extends Object
     * @param credit {String} A credit card type account. Supported products for `credit` accounts are: Balance, Transactions, Identity, and Liabilities.
     * @param depository {String} An account type holding cash, in which funds are deposited. Supported products for `depository` accounts are: Auth (`checking` and `savings` types only), Balance, Transactions, Identity, Payment Initiation, and Assets.
     * @param investment {String} An investment account. Supported products for `investment` accounts are: Balance and Investments. In API versions 2018-05-22 and earlier, this type is called `brokerage`.
     * @param loan {String} A loan type account. Supported products for `loan` accounts are: Balance, Liabilities, and Transactions.
     * @param other {String} Other or unknown account type. Supported products for `other` accounts are: Balance, Transactions, Identity, and Assets.
     */
    constructor(credit, depository, investment, loan, other) { 
        
        StandaloneAccountType.initialize(this, credit, depository, investment, loan, other);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, credit, depository, investment, loan, other) { 
        obj['credit'] = credit;
        obj['depository'] = depository;
        obj['investment'] = investment;
        obj['loan'] = loan;
        obj['other'] = other;
    }

    /**
     * Constructs a <code>StandaloneAccountType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StandaloneAccountType} obj Optional instance to populate.
     * @return {module:model/StandaloneAccountType} The populated <code>StandaloneAccountType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StandaloneAccountType();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('credit')) {
                obj['credit'] = ApiClient.convertToType(data['credit'], 'String');
            }
            if (data.hasOwnProperty('depository')) {
                obj['depository'] = ApiClient.convertToType(data['depository'], 'String');
            }
            if (data.hasOwnProperty('investment')) {
                obj['investment'] = ApiClient.convertToType(data['investment'], 'String');
            }
            if (data.hasOwnProperty('loan')) {
                obj['loan'] = ApiClient.convertToType(data['loan'], 'String');
            }
            if (data.hasOwnProperty('other')) {
                obj['other'] = ApiClient.convertToType(data['other'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StandaloneAccountType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StandaloneAccountType</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StandaloneAccountType.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['other'] && !(typeof data['other'] === 'string' || data['other'] instanceof String)) {
            throw new Error("Expected the field `other` to be a primitive type in the JSON string but got " + data['other']);
        }

        return true;
    }


}

StandaloneAccountType.RequiredProperties = ["credit", "depository", "investment", "loan", "other"];

/**
 * A credit card type account. Supported products for `credit` accounts are: Balance, Transactions, Identity, and Liabilities.
 * @member {String} credit
 */
StandaloneAccountType.prototype['credit'] = undefined;

/**
 * An account type holding cash, in which funds are deposited. Supported products for `depository` accounts are: Auth (`checking` and `savings` types only), Balance, Transactions, Identity, Payment Initiation, and Assets.
 * @member {String} depository
 */
StandaloneAccountType.prototype['depository'] = undefined;

/**
 * An investment account. Supported products for `investment` accounts are: Balance and Investments. In API versions 2018-05-22 and earlier, this type is called `brokerage`.
 * @member {String} investment
 */
StandaloneAccountType.prototype['investment'] = undefined;

/**
 * A loan type account. Supported products for `loan` accounts are: Balance, Liabilities, and Transactions.
 * @member {String} loan
 */
StandaloneAccountType.prototype['loan'] = undefined;

/**
 * Other or unknown account type. Supported products for `other` accounts are: Balance, Transactions, Identity, and Assets.
 * @member {String} other
 */
StandaloneAccountType.prototype['other'] = undefined;






export default StandaloneAccountType;

