/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SignalDevice from './SignalDevice';
import SignalUser from './SignalUser';

/**
 * The SignalEvaluateRequest model module.
 * @module model/SignalEvaluateRequest
 * @version 2020-09-14_1.345.1
 */
class SignalEvaluateRequest {
    /**
     * Constructs a new <code>SignalEvaluateRequest</code>.
     * SignalEvaluateRequest defines the request schema for &#x60;/signal/evaluate&#x60;
     * @alias module:model/SignalEvaluateRequest
     * @param accessToken {String} The access token associated with the Item data is being requested for.
     * @param accountId {String} The Plaid `account_id` of the account that is the funding source for the proposed transaction. The `account_id` is returned in the `/accounts/get` endpoint as well as the [`onSuccess`](/docs/link/ios/#link-ios-onsuccess-linkSuccess-metadata-accounts-id) callback metadata.  This will return an [`INVALID_ACCOUNT_ID`](/docs/errors/invalid-input/#invalid_account_id) error if the account has been removed at the bank or if the `account_id` is no longer valid.
     * @param amount {Number} The transaction amount, in USD (e.g. `102.05`)
     * @param clientTransactionId {String} The unique ID that you would like to use to refer to this transaction. For your convenience mapping your internal data, you could use your internal ID/identifier for this transaction. The max length for this field is 36 characters.
     */
    constructor(accessToken, accountId, amount, clientTransactionId) { 
        
        SignalEvaluateRequest.initialize(this, accessToken, accountId, amount, clientTransactionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessToken, accountId, amount, clientTransactionId) { 
        obj['access_token'] = accessToken;
        obj['account_id'] = accountId;
        obj['amount'] = amount;
        obj['client_transaction_id'] = clientTransactionId;
    }

    /**
     * Constructs a <code>SignalEvaluateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignalEvaluateRequest} obj Optional instance to populate.
     * @return {module:model/SignalEvaluateRequest} The populated <code>SignalEvaluateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SignalEvaluateRequest();

            if (data.hasOwnProperty('access_token')) {
                obj['access_token'] = ApiClient.convertToType(data['access_token'], 'String');
            }
            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('client_transaction_id')) {
                obj['client_transaction_id'] = ApiClient.convertToType(data['client_transaction_id'], 'String');
            }
            if (data.hasOwnProperty('client_user_id')) {
                obj['client_user_id'] = ApiClient.convertToType(data['client_user_id'], 'String');
            }
            if (data.hasOwnProperty('default_payment_method')) {
                obj['default_payment_method'] = ApiClient.convertToType(data['default_payment_method'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = SignalDevice.constructFromObject(data['device']);
            }
            if (data.hasOwnProperty('is_recurring')) {
                obj['is_recurring'] = ApiClient.convertToType(data['is_recurring'], 'Boolean');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = SignalUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_present')) {
                obj['user_present'] = ApiClient.convertToType(data['user_present'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SignalEvaluateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SignalEvaluateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SignalEvaluateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['access_token'] && !(typeof data['access_token'] === 'string' || data['access_token'] instanceof String)) {
            throw new Error("Expected the field `access_token` to be a primitive type in the JSON string but got " + data['access_token']);
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['client_transaction_id'] && !(typeof data['client_transaction_id'] === 'string' || data['client_transaction_id'] instanceof String)) {
            throw new Error("Expected the field `client_transaction_id` to be a primitive type in the JSON string but got " + data['client_transaction_id']);
        }
        // ensure the json data is a string
        if (data['client_user_id'] && !(typeof data['client_user_id'] === 'string' || data['client_user_id'] instanceof String)) {
            throw new Error("Expected the field `client_user_id` to be a primitive type in the JSON string but got " + data['client_user_id']);
        }
        // ensure the json data is a string
        if (data['default_payment_method'] && !(typeof data['default_payment_method'] === 'string' || data['default_payment_method'] instanceof String)) {
            throw new Error("Expected the field `default_payment_method` to be a primitive type in the JSON string but got " + data['default_payment_method']);
        }
        // validate the optional field `device`
        if (data['device']) { // data not null
          SignalDevice.validateJSON(data['device']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          SignalUser.validateJSON(data['user']);
        }

        return true;
    }


}

SignalEvaluateRequest.RequiredProperties = ["access_token", "account_id", "amount", "client_transaction_id"];

/**
 * The access token associated with the Item data is being requested for.
 * @member {String} access_token
 */
SignalEvaluateRequest.prototype['access_token'] = undefined;

/**
 * The Plaid `account_id` of the account that is the funding source for the proposed transaction. The `account_id` is returned in the `/accounts/get` endpoint as well as the [`onSuccess`](/docs/link/ios/#link-ios-onsuccess-linkSuccess-metadata-accounts-id) callback metadata.  This will return an [`INVALID_ACCOUNT_ID`](/docs/errors/invalid-input/#invalid_account_id) error if the account has been removed at the bank or if the `account_id` is no longer valid.
 * @member {String} account_id
 */
SignalEvaluateRequest.prototype['account_id'] = undefined;

/**
 * The transaction amount, in USD (e.g. `102.05`)
 * @member {Number} amount
 */
SignalEvaluateRequest.prototype['amount'] = undefined;

/**
 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
 * @member {String} client_id
 */
SignalEvaluateRequest.prototype['client_id'] = undefined;

/**
 * The unique ID that you would like to use to refer to this transaction. For your convenience mapping your internal data, you could use your internal ID/identifier for this transaction. The max length for this field is 36 characters.
 * @member {String} client_transaction_id
 */
SignalEvaluateRequest.prototype['client_transaction_id'] = undefined;

/**
 * A unique ID that identifies the end user in your system. This ID is used to correlate requests by a user with multiple Items. The max length for this field is 36 characters. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
 * @member {String} client_user_id
 */
SignalEvaluateRequest.prototype['client_user_id'] = undefined;

/**
 * The default ACH or non-ACH payment method to complete the transaction. `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors `STANDARD_ACH`: standard ACH by NACHA `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow `DEBIT_CARD`: if the default payment is over debit card networks `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods Possible values:  `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
 * @member {String} default_payment_method
 */
SignalEvaluateRequest.prototype['default_payment_method'] = undefined;

/**
 * @member {module:model/SignalDevice} device
 */
SignalEvaluateRequest.prototype['device'] = undefined;

/**
 * `true` if the ACH transaction is a recurring transaction; `false` otherwise 
 * @member {Boolean} is_recurring
 */
SignalEvaluateRequest.prototype['is_recurring'] = undefined;

/**
 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
 * @member {String} secret
 */
SignalEvaluateRequest.prototype['secret'] = undefined;

/**
 * @member {module:model/SignalUser} user
 */
SignalEvaluateRequest.prototype['user'] = undefined;

/**
 * `true` if the end user is present while initiating the ACH transfer and the endpoint is being called; `false` otherwise (for example, when the ACH transfer is scheduled and the end user is not present, or you call this endpoint after the ACH transfer but before submitting the Nacha file for ACH processing).
 * @member {Boolean} user_present
 */
SignalEvaluateRequest.prototype['user_present'] = undefined;






export default SignalEvaluateRequest;

