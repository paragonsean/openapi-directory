/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransferRefundStatus from './TransferRefundStatus';

/**
 * The TransferRefund model module.
 * @module model/TransferRefund
 * @version 2020-09-14_1.345.1
 */
class TransferRefund {
    /**
     * Constructs a new <code>TransferRefund</code>.
     * Represents a refund within the Transfers API.
     * @alias module:model/TransferRefund
     * @extends Object
     * @param amount {String} The amount of the refund (decimal string with two digits of precision e.g. \"10.00\").
     * @param created {Date} The datetime when this refund was created. This will be of the form `2006-01-02T15:04:05Z`
     * @param id {String} Plaid’s unique identifier for a refund.
     * @param status {module:model/TransferRefundStatus} 
     * @param transferId {String} The ID of the transfer to refund.
     */
    constructor(amount, created, id, status, transferId) { 
        
        TransferRefund.initialize(this, amount, created, id, status, transferId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, created, id, status, transferId) { 
        obj['amount'] = amount;
        obj['created'] = created;
        obj['id'] = id;
        obj['status'] = status;
        obj['transfer_id'] = transferId;
    }

    /**
     * Constructs a <code>TransferRefund</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferRefund} obj Optional instance to populate.
     * @return {module:model/TransferRefund} The populated <code>TransferRefund</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferRefund();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TransferRefundStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('transfer_id')) {
                obj['transfer_id'] = ApiClient.convertToType(data['transfer_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferRefund</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferRefund</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransferRefund.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['transfer_id'] && !(typeof data['transfer_id'] === 'string' || data['transfer_id'] instanceof String)) {
            throw new Error("Expected the field `transfer_id` to be a primitive type in the JSON string but got " + data['transfer_id']);
        }

        return true;
    }


}

TransferRefund.RequiredProperties = ["amount", "created", "id", "status", "transfer_id"];

/**
 * The amount of the refund (decimal string with two digits of precision e.g. \"10.00\").
 * @member {String} amount
 */
TransferRefund.prototype['amount'] = undefined;

/**
 * The datetime when this refund was created. This will be of the form `2006-01-02T15:04:05Z`
 * @member {Date} created
 */
TransferRefund.prototype['created'] = undefined;

/**
 * Plaid’s unique identifier for a refund.
 * @member {String} id
 */
TransferRefund.prototype['id'] = undefined;

/**
 * @member {module:model/TransferRefundStatus} status
 */
TransferRefund.prototype['status'] = undefined;

/**
 * The ID of the transfer to refund.
 * @member {String} transfer_id
 */
TransferRefund.prototype['transfer_id'] = undefined;






export default TransferRefund;

