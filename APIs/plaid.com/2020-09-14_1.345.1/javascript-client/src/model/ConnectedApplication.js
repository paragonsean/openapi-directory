/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScopesNullable from './ScopesNullable';

/**
 * The ConnectedApplication model module.
 * @module model/ConnectedApplication
 * @version 2020-09-14_1.345.1
 */
class ConnectedApplication {
    /**
     * Constructs a new <code>ConnectedApplication</code>.
     * Describes the connected application for a particular end user.
     * @alias module:model/ConnectedApplication
     * @param applicationId {String} This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
     * @param createdAt {Date} The date this application was linked in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
     * @param name {String} The name of the application
     */
    constructor(applicationId, createdAt, name) { 
        
        ConnectedApplication.initialize(this, applicationId, createdAt, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, applicationId, createdAt, name) { 
        obj['application_id'] = applicationId;
        obj['created_at'] = createdAt;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ConnectedApplication</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectedApplication} obj Optional instance to populate.
     * @return {module:model/ConnectedApplication} The populated <code>ConnectedApplication</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectedApplication();

            if (data.hasOwnProperty('application_id')) {
                obj['application_id'] = ApiClient.convertToType(data['application_id'], 'String');
            }
            if (data.hasOwnProperty('application_url')) {
                obj['application_url'] = ApiClient.convertToType(data['application_url'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('logo_url')) {
                obj['logo_url'] = ApiClient.convertToType(data['logo_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('reason_for_access')) {
                obj['reason_for_access'] = ApiClient.convertToType(data['reason_for_access'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ScopesNullable.constructFromObject(data['scopes']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectedApplication</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectedApplication</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConnectedApplication.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['application_id'] && !(typeof data['application_id'] === 'string' || data['application_id'] instanceof String)) {
            throw new Error("Expected the field `application_id` to be a primitive type in the JSON string but got " + data['application_id']);
        }
        // ensure the json data is a string
        if (data['application_url'] && !(typeof data['application_url'] === 'string' || data['application_url'] instanceof String)) {
            throw new Error("Expected the field `application_url` to be a primitive type in the JSON string but got " + data['application_url']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is a string
        if (data['logo_url'] && !(typeof data['logo_url'] === 'string' || data['logo_url'] instanceof String)) {
            throw new Error("Expected the field `logo_url` to be a primitive type in the JSON string but got " + data['logo_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['reason_for_access'] && !(typeof data['reason_for_access'] === 'string' || data['reason_for_access'] instanceof String)) {
            throw new Error("Expected the field `reason_for_access` to be a primitive type in the JSON string but got " + data['reason_for_access']);
        }
        // validate the optional field `scopes`
        if (data['scopes']) { // data not null
          ScopesNullable.validateJSON(data['scopes']);
        }

        return true;
    }


}

ConnectedApplication.RequiredProperties = ["application_id", "created_at", "name"];

/**
 * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
 * @member {String} application_id
 */
ConnectedApplication.prototype['application_id'] = undefined;

/**
 * The URL for the application's website
 * @member {String} application_url
 */
ConnectedApplication.prototype['application_url'] = undefined;

/**
 * The date this application was linked in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
 * @member {Date} created_at
 */
ConnectedApplication.prototype['created_at'] = undefined;

/**
 * A human-readable name of the application for display purposes
 * @member {String} display_name
 */
ConnectedApplication.prototype['display_name'] = undefined;

/**
 * A URL that links to the application logo image.
 * @member {String} logo_url
 */
ConnectedApplication.prototype['logo_url'] = undefined;

/**
 * The name of the application
 * @member {String} name
 */
ConnectedApplication.prototype['name'] = undefined;

/**
 * A string provided by the connected app stating why they use their respective enabled products.
 * @member {String} reason_for_access
 */
ConnectedApplication.prototype['reason_for_access'] = undefined;

/**
 * @member {module:model/ScopesNullable} scopes
 */
ConnectedApplication.prototype['scopes'] = undefined;






export default ConnectedApplication;

