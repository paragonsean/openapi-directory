/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Application model module.
 * @module model/Application
 * @version 2020-09-14_1.345.1
 */
class Application {
    /**
     * Constructs a new <code>Application</code>.
     * Metadata about the application
     * @alias module:model/Application
     * @param applicationId {String} This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
     * @param applicationUrl {String} The URL for the application's website
     * @param city {String} A string representing the city of the client’s headquarters.
     * @param companyLegalName {String} A string representing the name of client’s legal entity.
     * @param countryCode {String} A string representing the country code of the client’s headquarters.
     * @param displayName {String} A human-readable name of the application for display purposes
     * @param joinDate {Date} The date this application was granted production access at Plaid in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
     * @param logoUrl {String} A URL that links to the application logo image.
     * @param name {String} The name of the application
     * @param postalCode {String} A string representing the postal code of the client’s headquarters.
     * @param reasonForAccess {String} A string provided by the connected app stating why they use their respective enabled products.
     * @param region {String} A string representing the region of the client’s headquarters.
     * @param useCase {String} A string representing client’s broad use case as assessed by Plaid.
     */
    constructor(applicationId, applicationUrl, city, companyLegalName, countryCode, displayName, joinDate, logoUrl, name, postalCode, reasonForAccess, region, useCase) { 
        
        Application.initialize(this, applicationId, applicationUrl, city, companyLegalName, countryCode, displayName, joinDate, logoUrl, name, postalCode, reasonForAccess, region, useCase);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, applicationId, applicationUrl, city, companyLegalName, countryCode, displayName, joinDate, logoUrl, name, postalCode, reasonForAccess, region, useCase) { 
        obj['application_id'] = applicationId;
        obj['application_url'] = applicationUrl;
        obj['city'] = city;
        obj['company_legal_name'] = companyLegalName;
        obj['country_code'] = countryCode;
        obj['display_name'] = displayName;
        obj['join_date'] = joinDate;
        obj['logo_url'] = logoUrl;
        obj['name'] = name;
        obj['postal_code'] = postalCode;
        obj['reason_for_access'] = reasonForAccess;
        obj['region'] = region;
        obj['use_case'] = useCase;
    }

    /**
     * Constructs a <code>Application</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Application} obj Optional instance to populate.
     * @return {module:model/Application} The populated <code>Application</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Application();

            if (data.hasOwnProperty('application_id')) {
                obj['application_id'] = ApiClient.convertToType(data['application_id'], 'String');
            }
            if (data.hasOwnProperty('application_url')) {
                obj['application_url'] = ApiClient.convertToType(data['application_url'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('company_legal_name')) {
                obj['company_legal_name'] = ApiClient.convertToType(data['company_legal_name'], 'String');
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('join_date')) {
                obj['join_date'] = ApiClient.convertToType(data['join_date'], 'Date');
            }
            if (data.hasOwnProperty('logo_url')) {
                obj['logo_url'] = ApiClient.convertToType(data['logo_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('reason_for_access')) {
                obj['reason_for_access'] = ApiClient.convertToType(data['reason_for_access'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('use_case')) {
                obj['use_case'] = ApiClient.convertToType(data['use_case'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Application</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Application</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Application.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['application_id'] && !(typeof data['application_id'] === 'string' || data['application_id'] instanceof String)) {
            throw new Error("Expected the field `application_id` to be a primitive type in the JSON string but got " + data['application_id']);
        }
        // ensure the json data is a string
        if (data['application_url'] && !(typeof data['application_url'] === 'string' || data['application_url'] instanceof String)) {
            throw new Error("Expected the field `application_url` to be a primitive type in the JSON string but got " + data['application_url']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['company_legal_name'] && !(typeof data['company_legal_name'] === 'string' || data['company_legal_name'] instanceof String)) {
            throw new Error("Expected the field `company_legal_name` to be a primitive type in the JSON string but got " + data['company_legal_name']);
        }
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is a string
        if (data['logo_url'] && !(typeof data['logo_url'] === 'string' || data['logo_url'] instanceof String)) {
            throw new Error("Expected the field `logo_url` to be a primitive type in the JSON string but got " + data['logo_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }
        // ensure the json data is a string
        if (data['reason_for_access'] && !(typeof data['reason_for_access'] === 'string' || data['reason_for_access'] instanceof String)) {
            throw new Error("Expected the field `reason_for_access` to be a primitive type in the JSON string but got " + data['reason_for_access']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['use_case'] && !(typeof data['use_case'] === 'string' || data['use_case'] instanceof String)) {
            throw new Error("Expected the field `use_case` to be a primitive type in the JSON string but got " + data['use_case']);
        }

        return true;
    }


}

Application.RequiredProperties = ["application_id", "application_url", "city", "company_legal_name", "country_code", "display_name", "join_date", "logo_url", "name", "postal_code", "reason_for_access", "region", "use_case"];

/**
 * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
 * @member {String} application_id
 */
Application.prototype['application_id'] = undefined;

/**
 * The URL for the application's website
 * @member {String} application_url
 */
Application.prototype['application_url'] = undefined;

/**
 * A string representing the city of the client’s headquarters.
 * @member {String} city
 */
Application.prototype['city'] = undefined;

/**
 * A string representing the name of client’s legal entity.
 * @member {String} company_legal_name
 */
Application.prototype['company_legal_name'] = undefined;

/**
 * A string representing the country code of the client’s headquarters.
 * @member {String} country_code
 */
Application.prototype['country_code'] = undefined;

/**
 * A human-readable name of the application for display purposes
 * @member {String} display_name
 */
Application.prototype['display_name'] = undefined;

/**
 * The date this application was granted production access at Plaid in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
 * @member {Date} join_date
 */
Application.prototype['join_date'] = undefined;

/**
 * A URL that links to the application logo image.
 * @member {String} logo_url
 */
Application.prototype['logo_url'] = undefined;

/**
 * The name of the application
 * @member {String} name
 */
Application.prototype['name'] = undefined;

/**
 * A string representing the postal code of the client’s headquarters.
 * @member {String} postal_code
 */
Application.prototype['postal_code'] = undefined;

/**
 * A string provided by the connected app stating why they use their respective enabled products.
 * @member {String} reason_for_access
 */
Application.prototype['reason_for_access'] = undefined;

/**
 * A string representing the region of the client’s headquarters.
 * @member {String} region
 */
Application.prototype['region'] = undefined;

/**
 * A string representing client’s broad use case as assessed by Plaid.
 * @member {String} use_case
 */
Application.prototype['use_case'] = undefined;






export default Application;

