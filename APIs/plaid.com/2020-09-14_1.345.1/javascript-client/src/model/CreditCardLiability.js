/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import APR from './APR';

/**
 * The CreditCardLiability model module.
 * @module model/CreditCardLiability
 * @version 2020-09-14_1.345.1
 */
class CreditCardLiability {
    /**
     * Constructs a new <code>CreditCardLiability</code>.
     * An object representing a credit card account.
     * @alias module:model/CreditCardLiability
     * @extends Object
     * @param accountId {String} The ID of the account that this liability belongs to.
     * @param aprs {Array.<module:model/APR>} The various interest rates that apply to the account. APR information is not provided by all card issuers; if APR data is not available, this array will be empty.
     * @param isOverdue {Boolean} true if a payment is currently overdue. Availability for this field is limited.
     * @param lastPaymentAmount {Number} The amount of the last payment.
     * @param lastPaymentDate {Date} The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Availability for this field is limited.
     * @param lastStatementBalance {Number} The total amount owed as of the last statement issued
     * @param lastStatementIssueDate {Date} The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @param minimumPaymentAmount {Number} The minimum payment due for the next billing cycle.
     * @param nextPaymentDueDate {Date} The due date for the next payment. The due date is `null` if a payment is not expected. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     */
    constructor(accountId, aprs, isOverdue, lastPaymentAmount, lastPaymentDate, lastStatementBalance, lastStatementIssueDate, minimumPaymentAmount, nextPaymentDueDate) { 
        
        CreditCardLiability.initialize(this, accountId, aprs, isOverdue, lastPaymentAmount, lastPaymentDate, lastStatementBalance, lastStatementIssueDate, minimumPaymentAmount, nextPaymentDueDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, aprs, isOverdue, lastPaymentAmount, lastPaymentDate, lastStatementBalance, lastStatementIssueDate, minimumPaymentAmount, nextPaymentDueDate) { 
        obj['account_id'] = accountId;
        obj['aprs'] = aprs;
        obj['is_overdue'] = isOverdue;
        obj['last_payment_amount'] = lastPaymentAmount;
        obj['last_payment_date'] = lastPaymentDate;
        obj['last_statement_balance'] = lastStatementBalance;
        obj['last_statement_issue_date'] = lastStatementIssueDate;
        obj['minimum_payment_amount'] = minimumPaymentAmount;
        obj['next_payment_due_date'] = nextPaymentDueDate;
    }

    /**
     * Constructs a <code>CreditCardLiability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreditCardLiability} obj Optional instance to populate.
     * @return {module:model/CreditCardLiability} The populated <code>CreditCardLiability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreditCardLiability();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('aprs')) {
                obj['aprs'] = ApiClient.convertToType(data['aprs'], [APR]);
            }
            if (data.hasOwnProperty('is_overdue')) {
                obj['is_overdue'] = ApiClient.convertToType(data['is_overdue'], 'Boolean');
            }
            if (data.hasOwnProperty('last_payment_amount')) {
                obj['last_payment_amount'] = ApiClient.convertToType(data['last_payment_amount'], 'Number');
            }
            if (data.hasOwnProperty('last_payment_date')) {
                obj['last_payment_date'] = ApiClient.convertToType(data['last_payment_date'], 'Date');
            }
            if (data.hasOwnProperty('last_statement_balance')) {
                obj['last_statement_balance'] = ApiClient.convertToType(data['last_statement_balance'], 'Number');
            }
            if (data.hasOwnProperty('last_statement_issue_date')) {
                obj['last_statement_issue_date'] = ApiClient.convertToType(data['last_statement_issue_date'], 'Date');
            }
            if (data.hasOwnProperty('minimum_payment_amount')) {
                obj['minimum_payment_amount'] = ApiClient.convertToType(data['minimum_payment_amount'], 'Number');
            }
            if (data.hasOwnProperty('next_payment_due_date')) {
                obj['next_payment_due_date'] = ApiClient.convertToType(data['next_payment_due_date'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreditCardLiability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreditCardLiability</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreditCardLiability.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['aprs'])) {
            throw new Error("Expected the field `aprs` to be an array in the JSON data but got " + data['aprs']);
        }

        return true;
    }


}

CreditCardLiability.RequiredProperties = ["account_id", "aprs", "is_overdue", "last_payment_amount", "last_payment_date", "last_statement_balance", "last_statement_issue_date", "minimum_payment_amount", "next_payment_due_date"];

/**
 * The ID of the account that this liability belongs to.
 * @member {String} account_id
 */
CreditCardLiability.prototype['account_id'] = undefined;

/**
 * The various interest rates that apply to the account. APR information is not provided by all card issuers; if APR data is not available, this array will be empty.
 * @member {Array.<module:model/APR>} aprs
 */
CreditCardLiability.prototype['aprs'] = undefined;

/**
 * true if a payment is currently overdue. Availability for this field is limited.
 * @member {Boolean} is_overdue
 */
CreditCardLiability.prototype['is_overdue'] = undefined;

/**
 * The amount of the last payment.
 * @member {Number} last_payment_amount
 */
CreditCardLiability.prototype['last_payment_amount'] = undefined;

/**
 * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Availability for this field is limited.
 * @member {Date} last_payment_date
 */
CreditCardLiability.prototype['last_payment_date'] = undefined;

/**
 * The total amount owed as of the last statement issued
 * @member {Number} last_statement_balance
 */
CreditCardLiability.prototype['last_statement_balance'] = undefined;

/**
 * The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
 * @member {Date} last_statement_issue_date
 */
CreditCardLiability.prototype['last_statement_issue_date'] = undefined;

/**
 * The minimum payment due for the next billing cycle.
 * @member {Number} minimum_payment_amount
 */
CreditCardLiability.prototype['minimum_payment_amount'] = undefined;

/**
 * The due date for the next payment. The due date is `null` if a payment is not expected. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
 * @member {Date} next_payment_due_date
 */
CreditCardLiability.prototype['next_payment_due_date'] = undefined;






export default CreditCardLiability;

