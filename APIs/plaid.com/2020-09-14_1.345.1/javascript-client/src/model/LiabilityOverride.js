/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import PSLFStatus from './PSLFStatus';
import StudentLoanRepaymentModel from './StudentLoanRepaymentModel';
import StudentLoanStatus from './StudentLoanStatus';

/**
 * The LiabilityOverride model module.
 * @module model/LiabilityOverride
 * @version 2020-09-14_1.345.1
 */
class LiabilityOverride {
    /**
     * Constructs a new <code>LiabilityOverride</code>.
     * Used to configure Sandbox test data for the Liabilities product
     * @alias module:model/LiabilityOverride
     * @extends Object
     * @param balanceTransferApr {Number} The balance transfer APR percentage value. Can only be set if `type` is `credit`.
     * @param cashApr {Number} The cash APR percentage value. Can only be set if `type` is `credit`.
     * @param expectedPayoffDate {Date} Override the `expected_payoff_date` field. Can only be set if `type` is `student`.
     * @param guarantor {String} Override the `guarantor` field. Can only be set if `type` is `student`.
     * @param interestCapitalizationGracePeriodMonths {Number} If set, interest capitalization begins at the given number of months after loan origination. By default interest is never capitalized. Can only be set if `type` is `student`.
     * @param isFederal {Boolean} Override the `is_federal` field. Can only be set if `type` is `student`.
     * @param isOverdue {Boolean} Override the `is_overdue` field
     * @param lastPaymentAmount {Number} Override the `last_payment_amount` field. Can only be set if `type` is `credit`.
     * @param loanName {String} Override the `loan_name` field. Can only be set if `type` is `student`.
     * @param loanStatus {module:model/StudentLoanStatus} 
     * @param minimumPaymentAmount {Number} Override the `minimum_payment_amount` field. Can only be set if `type` is `credit` or `student`.
     * @param nominalApr {Number} The interest rate on the loan as a percentage. Can only be set if `type` is `student`.
     * @param originationDate {Date} The date on which the loan was initially lent, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Can only be set if `type` is `student`.
     * @param paymentReferenceNumber {String} Override the `payment_reference_number` field. Can only be set if `type` is `student`.
     * @param principal {Number} The original loan principal. Can only be set if `type` is `student`.
     * @param pslfStatus {module:model/PSLFStatus} 
     * @param purchaseApr {Number} The purchase APR percentage value. For simplicity, this is the only interest rate used to calculate interest charges. Can only be set if `type` is `credit`.
     * @param repaymentModel {module:model/StudentLoanRepaymentModel} 
     * @param repaymentPlanDescription {String} Override the `repayment_plan.description` field. Can only be set if `type` is `student`.
     * @param repaymentPlanType {String} Override the `repayment_plan.type` field. Can only be set if `type` is `student`. Possible values are: `\"extended graduated\"`, `\"extended standard\"`, `\"graduated\"`, `\"income-contingent repayment\"`, `\"income-based repayment\"`, `\"interest only\"`, `\"other\"`, `\"pay as you earn\"`, `\"revised pay as you earn\"`, or `\"standard\"`.
     * @param sequenceNumber {String} Override the `sequence_number` field. Can only be set if `type` is `student`.
     * @param servicerAddress {module:model/Address} 
     * @param specialApr {Number} The special APR percentage value. Can only be set if `type` is `credit`.
     * @param type {String} The type of the liability object, either `credit` or `student`. Mortgages are not currently supported in the custom Sandbox.
     */
    constructor(balanceTransferApr, cashApr, expectedPayoffDate, guarantor, interestCapitalizationGracePeriodMonths, isFederal, isOverdue, lastPaymentAmount, loanName, loanStatus, minimumPaymentAmount, nominalApr, originationDate, paymentReferenceNumber, principal, pslfStatus, purchaseApr, repaymentModel, repaymentPlanDescription, repaymentPlanType, sequenceNumber, servicerAddress, specialApr, type) { 
        
        LiabilityOverride.initialize(this, balanceTransferApr, cashApr, expectedPayoffDate, guarantor, interestCapitalizationGracePeriodMonths, isFederal, isOverdue, lastPaymentAmount, loanName, loanStatus, minimumPaymentAmount, nominalApr, originationDate, paymentReferenceNumber, principal, pslfStatus, purchaseApr, repaymentModel, repaymentPlanDescription, repaymentPlanType, sequenceNumber, servicerAddress, specialApr, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, balanceTransferApr, cashApr, expectedPayoffDate, guarantor, interestCapitalizationGracePeriodMonths, isFederal, isOverdue, lastPaymentAmount, loanName, loanStatus, minimumPaymentAmount, nominalApr, originationDate, paymentReferenceNumber, principal, pslfStatus, purchaseApr, repaymentModel, repaymentPlanDescription, repaymentPlanType, sequenceNumber, servicerAddress, specialApr, type) { 
        obj['balance_transfer_apr'] = balanceTransferApr;
        obj['cash_apr'] = cashApr;
        obj['expected_payoff_date'] = expectedPayoffDate;
        obj['guarantor'] = guarantor;
        obj['interest_capitalization_grace_period_months'] = interestCapitalizationGracePeriodMonths;
        obj['is_federal'] = isFederal;
        obj['is_overdue'] = isOverdue;
        obj['last_payment_amount'] = lastPaymentAmount;
        obj['loan_name'] = loanName;
        obj['loan_status'] = loanStatus;
        obj['minimum_payment_amount'] = minimumPaymentAmount;
        obj['nominal_apr'] = nominalApr;
        obj['origination_date'] = originationDate;
        obj['payment_reference_number'] = paymentReferenceNumber;
        obj['principal'] = principal;
        obj['pslf_status'] = pslfStatus;
        obj['purchase_apr'] = purchaseApr;
        obj['repayment_model'] = repaymentModel;
        obj['repayment_plan_description'] = repaymentPlanDescription;
        obj['repayment_plan_type'] = repaymentPlanType;
        obj['sequence_number'] = sequenceNumber;
        obj['servicer_address'] = servicerAddress;
        obj['special_apr'] = specialApr;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>LiabilityOverride</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiabilityOverride} obj Optional instance to populate.
     * @return {module:model/LiabilityOverride} The populated <code>LiabilityOverride</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiabilityOverride();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('balance_transfer_apr')) {
                obj['balance_transfer_apr'] = ApiClient.convertToType(data['balance_transfer_apr'], 'Number');
            }
            if (data.hasOwnProperty('cash_apr')) {
                obj['cash_apr'] = ApiClient.convertToType(data['cash_apr'], 'Number');
            }
            if (data.hasOwnProperty('expected_payoff_date')) {
                obj['expected_payoff_date'] = ApiClient.convertToType(data['expected_payoff_date'], 'Date');
            }
            if (data.hasOwnProperty('guarantor')) {
                obj['guarantor'] = ApiClient.convertToType(data['guarantor'], 'String');
            }
            if (data.hasOwnProperty('interest_capitalization_grace_period_months')) {
                obj['interest_capitalization_grace_period_months'] = ApiClient.convertToType(data['interest_capitalization_grace_period_months'], 'Number');
            }
            if (data.hasOwnProperty('is_federal')) {
                obj['is_federal'] = ApiClient.convertToType(data['is_federal'], 'Boolean');
            }
            if (data.hasOwnProperty('is_overdue')) {
                obj['is_overdue'] = ApiClient.convertToType(data['is_overdue'], 'Boolean');
            }
            if (data.hasOwnProperty('last_payment_amount')) {
                obj['last_payment_amount'] = ApiClient.convertToType(data['last_payment_amount'], 'Number');
            }
            if (data.hasOwnProperty('loan_name')) {
                obj['loan_name'] = ApiClient.convertToType(data['loan_name'], 'String');
            }
            if (data.hasOwnProperty('loan_status')) {
                obj['loan_status'] = StudentLoanStatus.constructFromObject(data['loan_status']);
            }
            if (data.hasOwnProperty('minimum_payment_amount')) {
                obj['minimum_payment_amount'] = ApiClient.convertToType(data['minimum_payment_amount'], 'Number');
            }
            if (data.hasOwnProperty('nominal_apr')) {
                obj['nominal_apr'] = ApiClient.convertToType(data['nominal_apr'], 'Number');
            }
            if (data.hasOwnProperty('origination_date')) {
                obj['origination_date'] = ApiClient.convertToType(data['origination_date'], 'Date');
            }
            if (data.hasOwnProperty('payment_reference_number')) {
                obj['payment_reference_number'] = ApiClient.convertToType(data['payment_reference_number'], 'String');
            }
            if (data.hasOwnProperty('principal')) {
                obj['principal'] = ApiClient.convertToType(data['principal'], 'Number');
            }
            if (data.hasOwnProperty('pslf_status')) {
                obj['pslf_status'] = PSLFStatus.constructFromObject(data['pslf_status']);
            }
            if (data.hasOwnProperty('purchase_apr')) {
                obj['purchase_apr'] = ApiClient.convertToType(data['purchase_apr'], 'Number');
            }
            if (data.hasOwnProperty('repayment_model')) {
                obj['repayment_model'] = StudentLoanRepaymentModel.constructFromObject(data['repayment_model']);
            }
            if (data.hasOwnProperty('repayment_plan_description')) {
                obj['repayment_plan_description'] = ApiClient.convertToType(data['repayment_plan_description'], 'String');
            }
            if (data.hasOwnProperty('repayment_plan_type')) {
                obj['repayment_plan_type'] = ApiClient.convertToType(data['repayment_plan_type'], 'String');
            }
            if (data.hasOwnProperty('sequence_number')) {
                obj['sequence_number'] = ApiClient.convertToType(data['sequence_number'], 'String');
            }
            if (data.hasOwnProperty('servicer_address')) {
                obj['servicer_address'] = Address.constructFromObject(data['servicer_address']);
            }
            if (data.hasOwnProperty('special_apr')) {
                obj['special_apr'] = ApiClient.convertToType(data['special_apr'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiabilityOverride</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiabilityOverride</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LiabilityOverride.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['guarantor'] && !(typeof data['guarantor'] === 'string' || data['guarantor'] instanceof String)) {
            throw new Error("Expected the field `guarantor` to be a primitive type in the JSON string but got " + data['guarantor']);
        }
        // ensure the json data is a string
        if (data['loan_name'] && !(typeof data['loan_name'] === 'string' || data['loan_name'] instanceof String)) {
            throw new Error("Expected the field `loan_name` to be a primitive type in the JSON string but got " + data['loan_name']);
        }
        // ensure the json data is a string
        if (data['payment_reference_number'] && !(typeof data['payment_reference_number'] === 'string' || data['payment_reference_number'] instanceof String)) {
            throw new Error("Expected the field `payment_reference_number` to be a primitive type in the JSON string but got " + data['payment_reference_number']);
        }
        // ensure the json data is a string
        if (data['repayment_plan_description'] && !(typeof data['repayment_plan_description'] === 'string' || data['repayment_plan_description'] instanceof String)) {
            throw new Error("Expected the field `repayment_plan_description` to be a primitive type in the JSON string but got " + data['repayment_plan_description']);
        }
        // ensure the json data is a string
        if (data['repayment_plan_type'] && !(typeof data['repayment_plan_type'] === 'string' || data['repayment_plan_type'] instanceof String)) {
            throw new Error("Expected the field `repayment_plan_type` to be a primitive type in the JSON string but got " + data['repayment_plan_type']);
        }
        // ensure the json data is a string
        if (data['sequence_number'] && !(typeof data['sequence_number'] === 'string' || data['sequence_number'] instanceof String)) {
            throw new Error("Expected the field `sequence_number` to be a primitive type in the JSON string but got " + data['sequence_number']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

LiabilityOverride.RequiredProperties = ["balance_transfer_apr", "cash_apr", "expected_payoff_date", "guarantor", "interest_capitalization_grace_period_months", "is_federal", "is_overdue", "last_payment_amount", "loan_name", "loan_status", "minimum_payment_amount", "nominal_apr", "origination_date", "payment_reference_number", "principal", "pslf_status", "purchase_apr", "repayment_model", "repayment_plan_description", "repayment_plan_type", "sequence_number", "servicer_address", "special_apr", "type"];

/**
 * The balance transfer APR percentage value. Can only be set if `type` is `credit`.
 * @member {Number} balance_transfer_apr
 */
LiabilityOverride.prototype['balance_transfer_apr'] = undefined;

/**
 * The cash APR percentage value. Can only be set if `type` is `credit`.
 * @member {Number} cash_apr
 */
LiabilityOverride.prototype['cash_apr'] = undefined;

/**
 * Override the `expected_payoff_date` field. Can only be set if `type` is `student`.
 * @member {Date} expected_payoff_date
 */
LiabilityOverride.prototype['expected_payoff_date'] = undefined;

/**
 * Override the `guarantor` field. Can only be set if `type` is `student`.
 * @member {String} guarantor
 */
LiabilityOverride.prototype['guarantor'] = undefined;

/**
 * If set, interest capitalization begins at the given number of months after loan origination. By default interest is never capitalized. Can only be set if `type` is `student`.
 * @member {Number} interest_capitalization_grace_period_months
 */
LiabilityOverride.prototype['interest_capitalization_grace_period_months'] = undefined;

/**
 * Override the `is_federal` field. Can only be set if `type` is `student`.
 * @member {Boolean} is_federal
 */
LiabilityOverride.prototype['is_federal'] = undefined;

/**
 * Override the `is_overdue` field
 * @member {Boolean} is_overdue
 */
LiabilityOverride.prototype['is_overdue'] = undefined;

/**
 * Override the `last_payment_amount` field. Can only be set if `type` is `credit`.
 * @member {Number} last_payment_amount
 */
LiabilityOverride.prototype['last_payment_amount'] = undefined;

/**
 * Override the `loan_name` field. Can only be set if `type` is `student`.
 * @member {String} loan_name
 */
LiabilityOverride.prototype['loan_name'] = undefined;

/**
 * @member {module:model/StudentLoanStatus} loan_status
 */
LiabilityOverride.prototype['loan_status'] = undefined;

/**
 * Override the `minimum_payment_amount` field. Can only be set if `type` is `credit` or `student`.
 * @member {Number} minimum_payment_amount
 */
LiabilityOverride.prototype['minimum_payment_amount'] = undefined;

/**
 * The interest rate on the loan as a percentage. Can only be set if `type` is `student`.
 * @member {Number} nominal_apr
 */
LiabilityOverride.prototype['nominal_apr'] = undefined;

/**
 * The date on which the loan was initially lent, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Can only be set if `type` is `student`.
 * @member {Date} origination_date
 */
LiabilityOverride.prototype['origination_date'] = undefined;

/**
 * Override the `payment_reference_number` field. Can only be set if `type` is `student`.
 * @member {String} payment_reference_number
 */
LiabilityOverride.prototype['payment_reference_number'] = undefined;

/**
 * The original loan principal. Can only be set if `type` is `student`.
 * @member {Number} principal
 */
LiabilityOverride.prototype['principal'] = undefined;

/**
 * @member {module:model/PSLFStatus} pslf_status
 */
LiabilityOverride.prototype['pslf_status'] = undefined;

/**
 * The purchase APR percentage value. For simplicity, this is the only interest rate used to calculate interest charges. Can only be set if `type` is `credit`.
 * @member {Number} purchase_apr
 */
LiabilityOverride.prototype['purchase_apr'] = undefined;

/**
 * @member {module:model/StudentLoanRepaymentModel} repayment_model
 */
LiabilityOverride.prototype['repayment_model'] = undefined;

/**
 * Override the `repayment_plan.description` field. Can only be set if `type` is `student`.
 * @member {String} repayment_plan_description
 */
LiabilityOverride.prototype['repayment_plan_description'] = undefined;

/**
 * Override the `repayment_plan.type` field. Can only be set if `type` is `student`. Possible values are: `\"extended graduated\"`, `\"extended standard\"`, `\"graduated\"`, `\"income-contingent repayment\"`, `\"income-based repayment\"`, `\"interest only\"`, `\"other\"`, `\"pay as you earn\"`, `\"revised pay as you earn\"`, or `\"standard\"`.
 * @member {String} repayment_plan_type
 */
LiabilityOverride.prototype['repayment_plan_type'] = undefined;

/**
 * Override the `sequence_number` field. Can only be set if `type` is `student`.
 * @member {String} sequence_number
 */
LiabilityOverride.prototype['sequence_number'] = undefined;

/**
 * @member {module:model/Address} servicer_address
 */
LiabilityOverride.prototype['servicer_address'] = undefined;

/**
 * The special APR percentage value. Can only be set if `type` is `credit`.
 * @member {Number} special_apr
 */
LiabilityOverride.prototype['special_apr'] = undefined;

/**
 * The type of the liability object, either `credit` or `student`. Mortgages are not currently supported in the custom Sandbox.
 * @member {String} type
 */
LiabilityOverride.prototype['type'] = undefined;






export default LiabilityOverride;

