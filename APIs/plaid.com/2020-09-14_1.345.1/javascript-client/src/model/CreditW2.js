/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreditDocumentMetadata from './CreditDocumentMetadata';
import CreditPayStubEmployee from './CreditPayStubEmployee';
import CreditPayStubEmployer from './CreditPayStubEmployer';
import W2Box12 from './W2Box12';
import W2StateAndLocalWages from './W2StateAndLocalWages';

/**
 * The CreditW2 model module.
 * @module model/CreditW2
 * @version 2020-09-14_1.345.1
 */
class CreditW2 {
    /**
     * Constructs a new <code>CreditW2</code>.
     * W2 is an object that represents income data taken from a W2 tax document.
     * @alias module:model/CreditW2
     * @extends Object
     * @param allocatedTips {String} Allocated tips.
     * @param box12 {Array.<module:model/W2Box12>} 
     * @param box9 {String} Contents from box 9 on the W2.
     * @param dependentCareBenefits {String} Dependent care benefits.
     * @param documentId {String} An identifier of the document referenced by the document metadata.
     * @param documentMetadata {module:model/CreditDocumentMetadata} 
     * @param employee {module:model/CreditPayStubEmployee} 
     * @param employer {module:model/CreditPayStubEmployer} 
     * @param employerIdNumber {String} An employee identification number or EIN.
     * @param federalIncomeTaxWithheld {String} Federal income tax withheld for the tax year.
     * @param medicareTaxWithheld {String} Medicare tax withheld for the tax year.
     * @param medicareWagesAndTips {String} Wages and tips from medicare.
     * @param nonqualifiedPlans {String} Nonqualified plans.
     * @param other {String} Other.
     * @param retirementPlan {String} Retirement plan.
     * @param socialSecurityTaxWithheld {String} Social security tax withheld for the tax year.
     * @param socialSecurityTips {String} Tips from social security.
     * @param socialSecurityWages {String} Wages from social security.
     * @param stateAndLocalWages {Array.<module:model/W2StateAndLocalWages>} 
     * @param statutoryEmployee {String} Statutory employee.
     * @param taxYear {String} The tax year of the W2 document.
     * @param thirdPartySickPay {String} Third party sick pay.
     * @param wagesTipsOtherComp {String} Wages from tips and other compensation.
     */
    constructor(allocatedTips, box12, box9, dependentCareBenefits, documentId, documentMetadata, employee, employer, employerIdNumber, federalIncomeTaxWithheld, medicareTaxWithheld, medicareWagesAndTips, nonqualifiedPlans, other, retirementPlan, socialSecurityTaxWithheld, socialSecurityTips, socialSecurityWages, stateAndLocalWages, statutoryEmployee, taxYear, thirdPartySickPay, wagesTipsOtherComp) { 
        
        CreditW2.initialize(this, allocatedTips, box12, box9, dependentCareBenefits, documentId, documentMetadata, employee, employer, employerIdNumber, federalIncomeTaxWithheld, medicareTaxWithheld, medicareWagesAndTips, nonqualifiedPlans, other, retirementPlan, socialSecurityTaxWithheld, socialSecurityTips, socialSecurityWages, stateAndLocalWages, statutoryEmployee, taxYear, thirdPartySickPay, wagesTipsOtherComp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allocatedTips, box12, box9, dependentCareBenefits, documentId, documentMetadata, employee, employer, employerIdNumber, federalIncomeTaxWithheld, medicareTaxWithheld, medicareWagesAndTips, nonqualifiedPlans, other, retirementPlan, socialSecurityTaxWithheld, socialSecurityTips, socialSecurityWages, stateAndLocalWages, statutoryEmployee, taxYear, thirdPartySickPay, wagesTipsOtherComp) { 
        obj['allocated_tips'] = allocatedTips;
        obj['box_12'] = box12;
        obj['box_9'] = box9;
        obj['dependent_care_benefits'] = dependentCareBenefits;
        obj['document_id'] = documentId;
        obj['document_metadata'] = documentMetadata;
        obj['employee'] = employee;
        obj['employer'] = employer;
        obj['employer_id_number'] = employerIdNumber;
        obj['federal_income_tax_withheld'] = federalIncomeTaxWithheld;
        obj['medicare_tax_withheld'] = medicareTaxWithheld;
        obj['medicare_wages_and_tips'] = medicareWagesAndTips;
        obj['nonqualified_plans'] = nonqualifiedPlans;
        obj['other'] = other;
        obj['retirement_plan'] = retirementPlan;
        obj['social_security_tax_withheld'] = socialSecurityTaxWithheld;
        obj['social_security_tips'] = socialSecurityTips;
        obj['social_security_wages'] = socialSecurityWages;
        obj['state_and_local_wages'] = stateAndLocalWages;
        obj['statutory_employee'] = statutoryEmployee;
        obj['tax_year'] = taxYear;
        obj['third_party_sick_pay'] = thirdPartySickPay;
        obj['wages_tips_other_comp'] = wagesTipsOtherComp;
    }

    /**
     * Constructs a <code>CreditW2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreditW2} obj Optional instance to populate.
     * @return {module:model/CreditW2} The populated <code>CreditW2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreditW2();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('allocated_tips')) {
                obj['allocated_tips'] = ApiClient.convertToType(data['allocated_tips'], 'String');
            }
            if (data.hasOwnProperty('box_12')) {
                obj['box_12'] = ApiClient.convertToType(data['box_12'], [W2Box12]);
            }
            if (data.hasOwnProperty('box_9')) {
                obj['box_9'] = ApiClient.convertToType(data['box_9'], 'String');
            }
            if (data.hasOwnProperty('dependent_care_benefits')) {
                obj['dependent_care_benefits'] = ApiClient.convertToType(data['dependent_care_benefits'], 'String');
            }
            if (data.hasOwnProperty('document_id')) {
                obj['document_id'] = ApiClient.convertToType(data['document_id'], 'String');
            }
            if (data.hasOwnProperty('document_metadata')) {
                obj['document_metadata'] = CreditDocumentMetadata.constructFromObject(data['document_metadata']);
            }
            if (data.hasOwnProperty('employee')) {
                obj['employee'] = CreditPayStubEmployee.constructFromObject(data['employee']);
            }
            if (data.hasOwnProperty('employer')) {
                obj['employer'] = CreditPayStubEmployer.constructFromObject(data['employer']);
            }
            if (data.hasOwnProperty('employer_id_number')) {
                obj['employer_id_number'] = ApiClient.convertToType(data['employer_id_number'], 'String');
            }
            if (data.hasOwnProperty('federal_income_tax_withheld')) {
                obj['federal_income_tax_withheld'] = ApiClient.convertToType(data['federal_income_tax_withheld'], 'String');
            }
            if (data.hasOwnProperty('medicare_tax_withheld')) {
                obj['medicare_tax_withheld'] = ApiClient.convertToType(data['medicare_tax_withheld'], 'String');
            }
            if (data.hasOwnProperty('medicare_wages_and_tips')) {
                obj['medicare_wages_and_tips'] = ApiClient.convertToType(data['medicare_wages_and_tips'], 'String');
            }
            if (data.hasOwnProperty('nonqualified_plans')) {
                obj['nonqualified_plans'] = ApiClient.convertToType(data['nonqualified_plans'], 'String');
            }
            if (data.hasOwnProperty('other')) {
                obj['other'] = ApiClient.convertToType(data['other'], 'String');
            }
            if (data.hasOwnProperty('retirement_plan')) {
                obj['retirement_plan'] = ApiClient.convertToType(data['retirement_plan'], 'String');
            }
            if (data.hasOwnProperty('social_security_tax_withheld')) {
                obj['social_security_tax_withheld'] = ApiClient.convertToType(data['social_security_tax_withheld'], 'String');
            }
            if (data.hasOwnProperty('social_security_tips')) {
                obj['social_security_tips'] = ApiClient.convertToType(data['social_security_tips'], 'String');
            }
            if (data.hasOwnProperty('social_security_wages')) {
                obj['social_security_wages'] = ApiClient.convertToType(data['social_security_wages'], 'String');
            }
            if (data.hasOwnProperty('state_and_local_wages')) {
                obj['state_and_local_wages'] = ApiClient.convertToType(data['state_and_local_wages'], [W2StateAndLocalWages]);
            }
            if (data.hasOwnProperty('statutory_employee')) {
                obj['statutory_employee'] = ApiClient.convertToType(data['statutory_employee'], 'String');
            }
            if (data.hasOwnProperty('tax_year')) {
                obj['tax_year'] = ApiClient.convertToType(data['tax_year'], 'String');
            }
            if (data.hasOwnProperty('third_party_sick_pay')) {
                obj['third_party_sick_pay'] = ApiClient.convertToType(data['third_party_sick_pay'], 'String');
            }
            if (data.hasOwnProperty('wages_tips_other_comp')) {
                obj['wages_tips_other_comp'] = ApiClient.convertToType(data['wages_tips_other_comp'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreditW2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreditW2</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreditW2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['allocated_tips'] && !(typeof data['allocated_tips'] === 'string' || data['allocated_tips'] instanceof String)) {
            throw new Error("Expected the field `allocated_tips` to be a primitive type in the JSON string but got " + data['allocated_tips']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['box_12'])) {
            throw new Error("Expected the field `box_12` to be an array in the JSON data but got " + data['box_12']);
        }
        // ensure the json data is a string
        if (data['box_9'] && !(typeof data['box_9'] === 'string' || data['box_9'] instanceof String)) {
            throw new Error("Expected the field `box_9` to be a primitive type in the JSON string but got " + data['box_9']);
        }
        // ensure the json data is a string
        if (data['dependent_care_benefits'] && !(typeof data['dependent_care_benefits'] === 'string' || data['dependent_care_benefits'] instanceof String)) {
            throw new Error("Expected the field `dependent_care_benefits` to be a primitive type in the JSON string but got " + data['dependent_care_benefits']);
        }
        // ensure the json data is a string
        if (data['document_id'] && !(typeof data['document_id'] === 'string' || data['document_id'] instanceof String)) {
            throw new Error("Expected the field `document_id` to be a primitive type in the JSON string but got " + data['document_id']);
        }
        // ensure the json data is a string
        if (data['employer_id_number'] && !(typeof data['employer_id_number'] === 'string' || data['employer_id_number'] instanceof String)) {
            throw new Error("Expected the field `employer_id_number` to be a primitive type in the JSON string but got " + data['employer_id_number']);
        }
        // ensure the json data is a string
        if (data['federal_income_tax_withheld'] && !(typeof data['federal_income_tax_withheld'] === 'string' || data['federal_income_tax_withheld'] instanceof String)) {
            throw new Error("Expected the field `federal_income_tax_withheld` to be a primitive type in the JSON string but got " + data['federal_income_tax_withheld']);
        }
        // ensure the json data is a string
        if (data['medicare_tax_withheld'] && !(typeof data['medicare_tax_withheld'] === 'string' || data['medicare_tax_withheld'] instanceof String)) {
            throw new Error("Expected the field `medicare_tax_withheld` to be a primitive type in the JSON string but got " + data['medicare_tax_withheld']);
        }
        // ensure the json data is a string
        if (data['medicare_wages_and_tips'] && !(typeof data['medicare_wages_and_tips'] === 'string' || data['medicare_wages_and_tips'] instanceof String)) {
            throw new Error("Expected the field `medicare_wages_and_tips` to be a primitive type in the JSON string but got " + data['medicare_wages_and_tips']);
        }
        // ensure the json data is a string
        if (data['nonqualified_plans'] && !(typeof data['nonqualified_plans'] === 'string' || data['nonqualified_plans'] instanceof String)) {
            throw new Error("Expected the field `nonqualified_plans` to be a primitive type in the JSON string but got " + data['nonqualified_plans']);
        }
        // ensure the json data is a string
        if (data['other'] && !(typeof data['other'] === 'string' || data['other'] instanceof String)) {
            throw new Error("Expected the field `other` to be a primitive type in the JSON string but got " + data['other']);
        }
        // ensure the json data is a string
        if (data['retirement_plan'] && !(typeof data['retirement_plan'] === 'string' || data['retirement_plan'] instanceof String)) {
            throw new Error("Expected the field `retirement_plan` to be a primitive type in the JSON string but got " + data['retirement_plan']);
        }
        // ensure the json data is a string
        if (data['social_security_tax_withheld'] && !(typeof data['social_security_tax_withheld'] === 'string' || data['social_security_tax_withheld'] instanceof String)) {
            throw new Error("Expected the field `social_security_tax_withheld` to be a primitive type in the JSON string but got " + data['social_security_tax_withheld']);
        }
        // ensure the json data is a string
        if (data['social_security_tips'] && !(typeof data['social_security_tips'] === 'string' || data['social_security_tips'] instanceof String)) {
            throw new Error("Expected the field `social_security_tips` to be a primitive type in the JSON string but got " + data['social_security_tips']);
        }
        // ensure the json data is a string
        if (data['social_security_wages'] && !(typeof data['social_security_wages'] === 'string' || data['social_security_wages'] instanceof String)) {
            throw new Error("Expected the field `social_security_wages` to be a primitive type in the JSON string but got " + data['social_security_wages']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['state_and_local_wages'])) {
            throw new Error("Expected the field `state_and_local_wages` to be an array in the JSON data but got " + data['state_and_local_wages']);
        }
        // ensure the json data is a string
        if (data['statutory_employee'] && !(typeof data['statutory_employee'] === 'string' || data['statutory_employee'] instanceof String)) {
            throw new Error("Expected the field `statutory_employee` to be a primitive type in the JSON string but got " + data['statutory_employee']);
        }
        // ensure the json data is a string
        if (data['tax_year'] && !(typeof data['tax_year'] === 'string' || data['tax_year'] instanceof String)) {
            throw new Error("Expected the field `tax_year` to be a primitive type in the JSON string but got " + data['tax_year']);
        }
        // ensure the json data is a string
        if (data['third_party_sick_pay'] && !(typeof data['third_party_sick_pay'] === 'string' || data['third_party_sick_pay'] instanceof String)) {
            throw new Error("Expected the field `third_party_sick_pay` to be a primitive type in the JSON string but got " + data['third_party_sick_pay']);
        }
        // ensure the json data is a string
        if (data['wages_tips_other_comp'] && !(typeof data['wages_tips_other_comp'] === 'string' || data['wages_tips_other_comp'] instanceof String)) {
            throw new Error("Expected the field `wages_tips_other_comp` to be a primitive type in the JSON string but got " + data['wages_tips_other_comp']);
        }

        return true;
    }


}

CreditW2.RequiredProperties = ["allocated_tips", "box_12", "box_9", "dependent_care_benefits", "document_id", "document_metadata", "employee", "employer", "employer_id_number", "federal_income_tax_withheld", "medicare_tax_withheld", "medicare_wages_and_tips", "nonqualified_plans", "other", "retirement_plan", "social_security_tax_withheld", "social_security_tips", "social_security_wages", "state_and_local_wages", "statutory_employee", "tax_year", "third_party_sick_pay", "wages_tips_other_comp"];

/**
 * Allocated tips.
 * @member {String} allocated_tips
 */
CreditW2.prototype['allocated_tips'] = undefined;

/**
 * @member {Array.<module:model/W2Box12>} box_12
 */
CreditW2.prototype['box_12'] = undefined;

/**
 * Contents from box 9 on the W2.
 * @member {String} box_9
 */
CreditW2.prototype['box_9'] = undefined;

/**
 * Dependent care benefits.
 * @member {String} dependent_care_benefits
 */
CreditW2.prototype['dependent_care_benefits'] = undefined;

/**
 * An identifier of the document referenced by the document metadata.
 * @member {String} document_id
 */
CreditW2.prototype['document_id'] = undefined;

/**
 * @member {module:model/CreditDocumentMetadata} document_metadata
 */
CreditW2.prototype['document_metadata'] = undefined;

/**
 * @member {module:model/CreditPayStubEmployee} employee
 */
CreditW2.prototype['employee'] = undefined;

/**
 * @member {module:model/CreditPayStubEmployer} employer
 */
CreditW2.prototype['employer'] = undefined;

/**
 * An employee identification number or EIN.
 * @member {String} employer_id_number
 */
CreditW2.prototype['employer_id_number'] = undefined;

/**
 * Federal income tax withheld for the tax year.
 * @member {String} federal_income_tax_withheld
 */
CreditW2.prototype['federal_income_tax_withheld'] = undefined;

/**
 * Medicare tax withheld for the tax year.
 * @member {String} medicare_tax_withheld
 */
CreditW2.prototype['medicare_tax_withheld'] = undefined;

/**
 * Wages and tips from medicare.
 * @member {String} medicare_wages_and_tips
 */
CreditW2.prototype['medicare_wages_and_tips'] = undefined;

/**
 * Nonqualified plans.
 * @member {String} nonqualified_plans
 */
CreditW2.prototype['nonqualified_plans'] = undefined;

/**
 * Other.
 * @member {String} other
 */
CreditW2.prototype['other'] = undefined;

/**
 * Retirement plan.
 * @member {String} retirement_plan
 */
CreditW2.prototype['retirement_plan'] = undefined;

/**
 * Social security tax withheld for the tax year.
 * @member {String} social_security_tax_withheld
 */
CreditW2.prototype['social_security_tax_withheld'] = undefined;

/**
 * Tips from social security.
 * @member {String} social_security_tips
 */
CreditW2.prototype['social_security_tips'] = undefined;

/**
 * Wages from social security.
 * @member {String} social_security_wages
 */
CreditW2.prototype['social_security_wages'] = undefined;

/**
 * @member {Array.<module:model/W2StateAndLocalWages>} state_and_local_wages
 */
CreditW2.prototype['state_and_local_wages'] = undefined;

/**
 * Statutory employee.
 * @member {String} statutory_employee
 */
CreditW2.prototype['statutory_employee'] = undefined;

/**
 * The tax year of the W2 document.
 * @member {String} tax_year
 */
CreditW2.prototype['tax_year'] = undefined;

/**
 * Third party sick pay.
 * @member {String} third_party_sick_pay
 */
CreditW2.prototype['third_party_sick_pay'] = undefined;

/**
 * Wages from tips and other compensation.
 * @member {String} wages_tips_other_comp
 */
CreditW2.prototype['wages_tips_other_comp'] = undefined;






export default CreditW2;

