/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ACHClass from './ACHClass';
import TransferNetwork from './TransferNetwork';
import TransferType from './TransferType';
import TransferUserInRequestDeprecated from './TransferUserInRequestDeprecated';

/**
 * The TransferCreateRequest model module.
 * @module model/TransferCreateRequest
 * @version 2020-09-14_1.345.1
 */
class TransferCreateRequest {
    /**
     * Constructs a new <code>TransferCreateRequest</code>.
     * Defines the request schema for &#x60;/transfer/create&#x60;
     * @alias module:model/TransferCreateRequest
     * @param authorizationId {String} Plaidâ€™s unique identifier for a transfer authorization. This parameter also serves the purpose of acting as an idempotency identifier.
     * @param description {String} The transfer description. Maximum of 10 characters. If reprocessing a returned transfer, please note that the `description` field must be `\"Retry\"` to indicate that it's a retry of a previously returned transfer. You may retry a transfer up to 2 times, within 180 days of creating the original transfer. Only transfers that were returned with code `R01` or `R09` may be retried. For a full listing of ACH return codes, see [Transfer errors](https://plaid.com/docs/errors/transfer/#ach-return-codes).
     */
    constructor(authorizationId, description) { 
        
        TransferCreateRequest.initialize(this, authorizationId, description);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authorizationId, description) { 
        obj['authorization_id'] = authorizationId;
        obj['description'] = description;
    }

    /**
     * Constructs a <code>TransferCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferCreateRequest} obj Optional instance to populate.
     * @return {module:model/TransferCreateRequest} The populated <code>TransferCreateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferCreateRequest();

            if (data.hasOwnProperty('access_token')) {
                obj['access_token'] = ApiClient.convertToType(data['access_token'], 'String');
            }
            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('ach_class')) {
                obj['ach_class'] = ApiClient.convertToType(data['ach_class'], ACHClass);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('authorization_id')) {
                obj['authorization_id'] = ApiClient.convertToType(data['authorization_id'], 'String');
            }
            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('idempotency_key')) {
                obj['idempotency_key'] = ApiClient.convertToType(data['idempotency_key'], 'String');
            }
            if (data.hasOwnProperty('iso_currency_code')) {
                obj['iso_currency_code'] = ApiClient.convertToType(data['iso_currency_code'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], TransferNetwork);
            }
            if (data.hasOwnProperty('origination_account_id')) {
                obj['origination_account_id'] = ApiClient.convertToType(data['origination_account_id'], 'String');
            }
            if (data.hasOwnProperty('payment_profile_token')) {
                obj['payment_profile_token'] = ApiClient.convertToType(data['payment_profile_token'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], TransferType);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = TransferUserInRequestDeprecated.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferCreateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferCreateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransferCreateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['access_token'] && !(typeof data['access_token'] === 'string' || data['access_token'] instanceof String)) {
            throw new Error("Expected the field `access_token` to be a primitive type in the JSON string but got " + data['access_token']);
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['authorization_id'] && !(typeof data['authorization_id'] === 'string' || data['authorization_id'] instanceof String)) {
            throw new Error("Expected the field `authorization_id` to be a primitive type in the JSON string but got " + data['authorization_id']);
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['idempotency_key'] && !(typeof data['idempotency_key'] === 'string' || data['idempotency_key'] instanceof String)) {
            throw new Error("Expected the field `idempotency_key` to be a primitive type in the JSON string but got " + data['idempotency_key']);
        }
        // ensure the json data is a string
        if (data['iso_currency_code'] && !(typeof data['iso_currency_code'] === 'string' || data['iso_currency_code'] instanceof String)) {
            throw new Error("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got " + data['iso_currency_code']);
        }
        // ensure the json data is a string
        if (data['origination_account_id'] && !(typeof data['origination_account_id'] === 'string' || data['origination_account_id'] instanceof String)) {
            throw new Error("Expected the field `origination_account_id` to be a primitive type in the JSON string but got " + data['origination_account_id']);
        }
        // ensure the json data is a string
        if (data['payment_profile_token'] && !(typeof data['payment_profile_token'] === 'string' || data['payment_profile_token'] instanceof String)) {
            throw new Error("Expected the field `payment_profile_token` to be a primitive type in the JSON string but got " + data['payment_profile_token']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }

        return true;
    }


}

TransferCreateRequest.RequiredProperties = ["authorization_id", "description"];

/**
 * The Plaid `access_token` for the account that will be debited or credited. Required if not using `payment_profile_token`.
 * @member {String} access_token
 */
TransferCreateRequest.prototype['access_token'] = undefined;

/**
 * The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation.
 * @member {String} account_id
 */
TransferCreateRequest.prototype['account_id'] = undefined;

/**
 * @member {module:model/ACHClass} ach_class
 */
TransferCreateRequest.prototype['ach_class'] = undefined;

/**
 * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
 * @member {String} amount
 */
TransferCreateRequest.prototype['amount'] = undefined;

/**
 * Plaidâ€™s unique identifier for a transfer authorization. This parameter also serves the purpose of acting as an idempotency identifier.
 * @member {String} authorization_id
 */
TransferCreateRequest.prototype['authorization_id'] = undefined;

/**
 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
 * @member {String} client_id
 */
TransferCreateRequest.prototype['client_id'] = undefined;

/**
 * The transfer description. Maximum of 10 characters. If reprocessing a returned transfer, please note that the `description` field must be `\"Retry\"` to indicate that it's a retry of a previously returned transfer. You may retry a transfer up to 2 times, within 180 days of creating the original transfer. Only transfers that were returned with code `R01` or `R09` may be retried. For a full listing of ACH return codes, see [Transfer errors](https://plaid.com/docs/errors/transfer/#ach-return-codes).
 * @member {String} description
 */
TransferCreateRequest.prototype['description'] = undefined;

/**
 * Deprecated. `authorization_id` is now used as idempotency instead.  A random key provided by the client, per unique transfer. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single transfer is created.
 * @member {String} idempotency_key
 */
TransferCreateRequest.prototype['idempotency_key'] = undefined;

/**
 * The currency of the transfer amount. The default value is \"USD\".
 * @member {String} iso_currency_code
 */
TransferCreateRequest.prototype['iso_currency_code'] = undefined;

/**
 * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters 
 * @member {Object.<String, String>} metadata
 */
TransferCreateRequest.prototype['metadata'] = undefined;

/**
 * @member {module:model/TransferNetwork} network
 */
TransferCreateRequest.prototype['network'] = undefined;

/**
 * Plaidâ€™s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. Otherwise, this field should be left blank.
 * @member {String} origination_account_id
 */
TransferCreateRequest.prototype['origination_account_id'] = undefined;

/**
 * The payment profile token associated with the Payment Profile that will be debited or credited. Required if not using `access_token`.
 * @member {String} payment_profile_token
 */
TransferCreateRequest.prototype['payment_profile_token'] = undefined;

/**
 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
 * @member {String} secret
 */
TransferCreateRequest.prototype['secret'] = undefined;

/**
 * @member {module:model/TransferType} type
 */
TransferCreateRequest.prototype['type'] = undefined;

/**
 * @member {module:model/TransferUserInRequestDeprecated} user
 */
TransferCreateRequest.prototype['user'] = undefined;






export default TransferCreateRequest;

