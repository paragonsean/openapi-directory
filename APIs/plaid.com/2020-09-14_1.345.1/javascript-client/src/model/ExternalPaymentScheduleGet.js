/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExternalPaymentScheduleBase from './ExternalPaymentScheduleBase';
import PaymentScheduleInterval from './PaymentScheduleInterval';

/**
 * The ExternalPaymentScheduleGet model module.
 * @module model/ExternalPaymentScheduleGet
 * @version 2020-09-14_1.345.1
 */
class ExternalPaymentScheduleGet {
    /**
     * Constructs a new <code>ExternalPaymentScheduleGet</code>.
     * The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.
     * @alias module:model/ExternalPaymentScheduleGet
     * @implements module:model/ExternalPaymentScheduleBase
     * @param adjustedStartDate {Date} The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, this field will be `null`.
     * @param endDate {Date} A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will end on the last `interval_execution_day` on or before the `end_date`. If the only `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
     * @param interval {module:model/PaymentScheduleInterval} 
     * @param intervalExecutionDay {Number} The day of the interval on which to schedule the payment.  If the payment interval is weekly, `interval_execution_day` should be an integer from 1 (Monday) to 7 (Sunday).  If the payment interval is monthly, `interval_execution_day` should be an integer indicating which day of the month to make the payment on. Integers from 1 to 28 can be used to make a payment on that day of the month. Negative integers from -1 to -5 can be used to make a payment relative to the end of the month. To make a payment on the last day of the month, use -1; to make the payment on the second-to-last day, use -2, and so on.
     * @param startDate {Date} A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will begin on the first `interval_execution_day` on or after the `start_date`.  If the first `interval_execution_day` on or after the start date is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
     */
    constructor(adjustedStartDate, endDate, interval, intervalExecutionDay, startDate) { 
        ExternalPaymentScheduleBase.initialize(this);
        ExternalPaymentScheduleGet.initialize(this, adjustedStartDate, endDate, interval, intervalExecutionDay, startDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, adjustedStartDate, endDate, interval, intervalExecutionDay, startDate) { 
        obj['adjusted_start_date'] = adjustedStartDate;
        obj['end_date'] = endDate;
        obj['interval'] = interval;
        obj['interval_execution_day'] = intervalExecutionDay;
        obj['start_date'] = startDate;
    }

    /**
     * Constructs a <code>ExternalPaymentScheduleGet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExternalPaymentScheduleGet} obj Optional instance to populate.
     * @return {module:model/ExternalPaymentScheduleGet} The populated <code>ExternalPaymentScheduleGet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExternalPaymentScheduleGet();
            ExternalPaymentScheduleBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('adjusted_start_date')) {
                obj['adjusted_start_date'] = ApiClient.convertToType(data['adjusted_start_date'], 'Date');
            }
            if (data.hasOwnProperty('end_date')) {
                obj['end_date'] = ApiClient.convertToType(data['end_date'], 'Date');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = PaymentScheduleInterval.constructFromObject(data['interval']);
            }
            if (data.hasOwnProperty('interval_execution_day')) {
                obj['interval_execution_day'] = ApiClient.convertToType(data['interval_execution_day'], 'Number');
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExternalPaymentScheduleGet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExternalPaymentScheduleGet</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExternalPaymentScheduleGet.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

ExternalPaymentScheduleGet.RequiredProperties = ["adjusted_start_date", "end_date", "interval", "interval_execution_day", "start_date"];

/**
 * The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, this field will be `null`.
 * @member {Date} adjusted_start_date
 */
ExternalPaymentScheduleGet.prototype['adjusted_start_date'] = undefined;

/**
 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will end on the last `interval_execution_day` on or before the `end_date`. If the only `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
 * @member {Date} end_date
 */
ExternalPaymentScheduleGet.prototype['end_date'] = undefined;

/**
 * @member {module:model/PaymentScheduleInterval} interval
 */
ExternalPaymentScheduleGet.prototype['interval'] = undefined;

/**
 * The day of the interval on which to schedule the payment.  If the payment interval is weekly, `interval_execution_day` should be an integer from 1 (Monday) to 7 (Sunday).  If the payment interval is monthly, `interval_execution_day` should be an integer indicating which day of the month to make the payment on. Integers from 1 to 28 can be used to make a payment on that day of the month. Negative integers from -1 to -5 can be used to make a payment relative to the end of the month. To make a payment on the last day of the month, use -1; to make the payment on the second-to-last day, use -2, and so on.
 * @member {Number} interval_execution_day
 */
ExternalPaymentScheduleGet.prototype['interval_execution_day'] = undefined;

/**
 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will begin on the first `interval_execution_day` on or after the `start_date`.  If the first `interval_execution_day` on or after the start date is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
 * @member {Date} start_date
 */
ExternalPaymentScheduleGet.prototype['start_date'] = undefined;


// Implement ExternalPaymentScheduleBase interface:
/**
 * The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, this field will be `null`.
 * @member {Date} adjusted_start_date
 */
ExternalPaymentScheduleBase.prototype['adjusted_start_date'] = undefined;
/**
 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will end on the last `interval_execution_day` on or before the `end_date`. If the only `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
 * @member {Date} end_date
 */
ExternalPaymentScheduleBase.prototype['end_date'] = undefined;
/**
 * @member {module:model/PaymentScheduleInterval} interval
 */
ExternalPaymentScheduleBase.prototype['interval'] = undefined;
/**
 * The day of the interval on which to schedule the payment.  If the payment interval is weekly, `interval_execution_day` should be an integer from 1 (Monday) to 7 (Sunday).  If the payment interval is monthly, `interval_execution_day` should be an integer indicating which day of the month to make the payment on. Integers from 1 to 28 can be used to make a payment on that day of the month. Negative integers from -1 to -5 can be used to make a payment relative to the end of the month. To make a payment on the last day of the month, use -1; to make the payment on the second-to-last day, use -2, and so on.
 * @member {Number} interval_execution_day
 */
ExternalPaymentScheduleBase.prototype['interval_execution_day'] = undefined;
/**
 * A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will begin on the first `interval_execution_day` on or after the `start_date`.  If the first `interval_execution_day` on or after the start date is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
 * @member {Date} start_date
 */
ExternalPaymentScheduleBase.prototype['start_date'] = undefined;




export default ExternalPaymentScheduleGet;

