/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ACHClass from './ACHClass';
import TransferType from './TransferType';
import TransferUserInResponse from './TransferUserInResponse';

/**
 * The TransferAuthorizationProposedTransfer model module.
 * @module model/TransferAuthorizationProposedTransfer
 * @version 2020-09-14_1.345.1
 */
class TransferAuthorizationProposedTransfer {
    /**
     * Constructs a new <code>TransferAuthorizationProposedTransfer</code>.
     * Details regarding the proposed transfer.
     * @alias module:model/TransferAuthorizationProposedTransfer
     * @extends Object
     * @param amount {String} The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @param fundingAccountId {String} The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
     * @param isoCurrencyCode {String} The currency of the transfer amount. The default value is \"USD\".
     * @param network {String} The network or rails used for the transfer.
     * @param originationAccountId {String} Plaid's unique identifier for the origination account that was used for this transfer.
     * @param originatorClientId {String} The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a third-party sender (TPS).
     * @param type {module:model/TransferType} 
     * @param user {module:model/TransferUserInResponse} 
     */
    constructor(amount, fundingAccountId, isoCurrencyCode, network, originationAccountId, originatorClientId, type, user) { 
        
        TransferAuthorizationProposedTransfer.initialize(this, amount, fundingAccountId, isoCurrencyCode, network, originationAccountId, originatorClientId, type, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, fundingAccountId, isoCurrencyCode, network, originationAccountId, originatorClientId, type, user) { 
        obj['amount'] = amount;
        obj['funding_account_id'] = fundingAccountId;
        obj['iso_currency_code'] = isoCurrencyCode;
        obj['network'] = network;
        obj['origination_account_id'] = originationAccountId;
        obj['originator_client_id'] = originatorClientId;
        obj['type'] = type;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>TransferAuthorizationProposedTransfer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferAuthorizationProposedTransfer} obj Optional instance to populate.
     * @return {module:model/TransferAuthorizationProposedTransfer} The populated <code>TransferAuthorizationProposedTransfer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferAuthorizationProposedTransfer();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('ach_class')) {
                obj['ach_class'] = ACHClass.constructFromObject(data['ach_class']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('funding_account_id')) {
                obj['funding_account_id'] = ApiClient.convertToType(data['funding_account_id'], 'String');
            }
            if (data.hasOwnProperty('iso_currency_code')) {
                obj['iso_currency_code'] = ApiClient.convertToType(data['iso_currency_code'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('origination_account_id')) {
                obj['origination_account_id'] = ApiClient.convertToType(data['origination_account_id'], 'String');
            }
            if (data.hasOwnProperty('originator_client_id')) {
                obj['originator_client_id'] = ApiClient.convertToType(data['originator_client_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = TransferType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = TransferUserInResponse.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferAuthorizationProposedTransfer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferAuthorizationProposedTransfer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransferAuthorizationProposedTransfer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['funding_account_id'] && !(typeof data['funding_account_id'] === 'string' || data['funding_account_id'] instanceof String)) {
            throw new Error("Expected the field `funding_account_id` to be a primitive type in the JSON string but got " + data['funding_account_id']);
        }
        // ensure the json data is a string
        if (data['iso_currency_code'] && !(typeof data['iso_currency_code'] === 'string' || data['iso_currency_code'] instanceof String)) {
            throw new Error("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got " + data['iso_currency_code']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['origination_account_id'] && !(typeof data['origination_account_id'] === 'string' || data['origination_account_id'] instanceof String)) {
            throw new Error("Expected the field `origination_account_id` to be a primitive type in the JSON string but got " + data['origination_account_id']);
        }
        // ensure the json data is a string
        if (data['originator_client_id'] && !(typeof data['originator_client_id'] === 'string' || data['originator_client_id'] instanceof String)) {
            throw new Error("Expected the field `originator_client_id` to be a primitive type in the JSON string but got " + data['originator_client_id']);
        }

        return true;
    }


}

TransferAuthorizationProposedTransfer.RequiredProperties = ["amount", "funding_account_id", "iso_currency_code", "network", "origination_account_id", "originator_client_id", "type", "user"];

/**
 * The Plaid `account_id` for the account that will be debited or credited.
 * @member {String} account_id
 */
TransferAuthorizationProposedTransfer.prototype['account_id'] = undefined;

/**
 * @member {module:model/ACHClass} ach_class
 */
TransferAuthorizationProposedTransfer.prototype['ach_class'] = undefined;

/**
 * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
 * @member {String} amount
 */
TransferAuthorizationProposedTransfer.prototype['amount'] = undefined;

/**
 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
 * @member {String} funding_account_id
 */
TransferAuthorizationProposedTransfer.prototype['funding_account_id'] = undefined;

/**
 * The currency of the transfer amount. The default value is \"USD\".
 * @member {String} iso_currency_code
 */
TransferAuthorizationProposedTransfer.prototype['iso_currency_code'] = undefined;

/**
 * The network or rails used for the transfer.
 * @member {String} network
 */
TransferAuthorizationProposedTransfer.prototype['network'] = undefined;

/**
 * Plaid's unique identifier for the origination account that was used for this transfer.
 * @member {String} origination_account_id
 */
TransferAuthorizationProposedTransfer.prototype['origination_account_id'] = undefined;

/**
 * The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a third-party sender (TPS).
 * @member {String} originator_client_id
 */
TransferAuthorizationProposedTransfer.prototype['originator_client_id'] = undefined;

/**
 * @member {module:model/TransferType} type
 */
TransferAuthorizationProposedTransfer.prototype['type'] = undefined;

/**
 * @member {module:model/TransferUserInResponse} user
 */
TransferAuthorizationProposedTransfer.prototype['user'] = undefined;






export default TransferAuthorizationProposedTransfer;

