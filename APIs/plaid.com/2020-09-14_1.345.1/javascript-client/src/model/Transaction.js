/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Location from './Location';
import PaymentMeta from './PaymentMeta';
import PersonalFinanceCategory from './PersonalFinanceCategory';
import TransactionBase from './TransactionBase';
import TransactionCode from './TransactionCode';
import TransactionCounterparty from './TransactionCounterparty';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 2020-09-14_1.345.1
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * A representation of a transaction
     * @alias module:model/Transaction
     * @implements module:model/TransactionBase
     * @param accountId {String} The ID of the account in which this transaction occurred.
     * @param accountOwner {String} The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.
     * @param amount {Number} The settled value of the transaction, denominated in the transactions's currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
     * @param category {Array.<String>} A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @param categoryId {String} The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @param date {Date} For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
     * @param isoCurrencyCode {String} The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.
     * @param location {module:model/Location} 
     * @param name {String} The merchant name or transaction description.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     * @param paymentMeta {module:model/PaymentMeta} 
     * @param pending {Boolean} When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
     * @param pendingTransactionId {String} The ID of a posted transaction's associated pending transaction, where applicable.
     * @param transactionId {String} The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
     * @param unofficialCurrencyCode {String} The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     * @param authorizedDate {Date} The date that the transaction was authorized. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
     * @param authorizedDatetime {Date} Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
     * @param datetime {Date} Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
     * @param paymentChannel {module:model/Transaction.PaymentChannelEnum} The channel used to make a payment. `online:` transactions that took place online.  `in store:` transactions that were made at a physical location.  `other:` transactions that relate to banks, e.g. fees or deposits.  This field replaces the `transaction_type` field. 
     * @param transactionCode {module:model/TransactionCode} 
     */
    constructor(accountId, accountOwner, amount, category, categoryId, date, isoCurrencyCode, location, name, paymentMeta, pending, pendingTransactionId, transactionId, unofficialCurrencyCode, authorizedDate, authorizedDatetime, datetime, paymentChannel, transactionCode) { 
        TransactionBase.initialize(this, accountId, amount, date, isoCurrencyCode, pending, transactionId, unofficialCurrencyCode);
        Transaction.initialize(this, accountId, accountOwner, amount, category, categoryId, date, isoCurrencyCode, location, name, paymentMeta, pending, pendingTransactionId, transactionId, unofficialCurrencyCode, authorizedDate, authorizedDatetime, datetime, paymentChannel, transactionCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, accountOwner, amount, category, categoryId, date, isoCurrencyCode, location, name, paymentMeta, pending, pendingTransactionId, transactionId, unofficialCurrencyCode, authorizedDate, authorizedDatetime, datetime, paymentChannel, transactionCode) { 
        obj['account_id'] = accountId;
        obj['account_owner'] = accountOwner;
        obj['amount'] = amount;
        obj['category'] = category;
        obj['category_id'] = categoryId;
        obj['date'] = date;
        obj['iso_currency_code'] = isoCurrencyCode;
        obj['location'] = location;
        obj['name'] = name;
        obj['payment_meta'] = paymentMeta;
        obj['pending'] = pending;
        obj['pending_transaction_id'] = pendingTransactionId;
        obj['transaction_id'] = transactionId;
        obj['unofficial_currency_code'] = unofficialCurrencyCode;
        obj['authorized_date'] = authorizedDate;
        obj['authorized_datetime'] = authorizedDatetime;
        obj['datetime'] = datetime;
        obj['payment_channel'] = paymentChannel;
        obj['transaction_code'] = transactionCode;
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction} obj Optional instance to populate.
     * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();
            TransactionBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('account_owner')) {
                obj['account_owner'] = ApiClient.convertToType(data['account_owner'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], ['String']);
            }
            if (data.hasOwnProperty('category_id')) {
                obj['category_id'] = ApiClient.convertToType(data['category_id'], 'String');
            }
            if (data.hasOwnProperty('check_number')) {
                obj['check_number'] = ApiClient.convertToType(data['check_number'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('iso_currency_code')) {
                obj['iso_currency_code'] = ApiClient.convertToType(data['iso_currency_code'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('logo_url')) {
                obj['logo_url'] = ApiClient.convertToType(data['logo_url'], 'String');
            }
            if (data.hasOwnProperty('merchant_name')) {
                obj['merchant_name'] = ApiClient.convertToType(data['merchant_name'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('original_description')) {
                obj['original_description'] = ApiClient.convertToType(data['original_description'], 'String');
            }
            if (data.hasOwnProperty('payment_meta')) {
                obj['payment_meta'] = PaymentMeta.constructFromObject(data['payment_meta']);
            }
            if (data.hasOwnProperty('pending')) {
                obj['pending'] = ApiClient.convertToType(data['pending'], 'Boolean');
            }
            if (data.hasOwnProperty('pending_transaction_id')) {
                obj['pending_transaction_id'] = ApiClient.convertToType(data['pending_transaction_id'], 'String');
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('transaction_type')) {
                obj['transaction_type'] = ApiClient.convertToType(data['transaction_type'], 'String');
            }
            if (data.hasOwnProperty('unofficial_currency_code')) {
                obj['unofficial_currency_code'] = ApiClient.convertToType(data['unofficial_currency_code'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('authorized_date')) {
                obj['authorized_date'] = ApiClient.convertToType(data['authorized_date'], 'Date');
            }
            if (data.hasOwnProperty('authorized_datetime')) {
                obj['authorized_datetime'] = ApiClient.convertToType(data['authorized_datetime'], 'Date');
            }
            if (data.hasOwnProperty('counterparties')) {
                obj['counterparties'] = ApiClient.convertToType(data['counterparties'], [TransactionCounterparty]);
            }
            if (data.hasOwnProperty('datetime')) {
                obj['datetime'] = ApiClient.convertToType(data['datetime'], 'Date');
            }
            if (data.hasOwnProperty('payment_channel')) {
                obj['payment_channel'] = ApiClient.convertToType(data['payment_channel'], 'String');
            }
            if (data.hasOwnProperty('personal_finance_category')) {
                obj['personal_finance_category'] = PersonalFinanceCategory.constructFromObject(data['personal_finance_category']);
            }
            if (data.hasOwnProperty('personal_finance_category_icon_url')) {
                obj['personal_finance_category_icon_url'] = ApiClient.convertToType(data['personal_finance_category_icon_url'], 'String');
            }
            if (data.hasOwnProperty('transaction_code')) {
                obj['transaction_code'] = TransactionCode.constructFromObject(data['transaction_code']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transaction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Transaction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['account_owner'] && !(typeof data['account_owner'] === 'string' || data['account_owner'] instanceof String)) {
            throw new Error("Expected the field `account_owner` to be a primitive type in the JSON string but got " + data['account_owner']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['category'])) {
            throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['category_id'] && !(typeof data['category_id'] === 'string' || data['category_id'] instanceof String)) {
            throw new Error("Expected the field `category_id` to be a primitive type in the JSON string but got " + data['category_id']);
        }
        // ensure the json data is a string
        if (data['check_number'] && !(typeof data['check_number'] === 'string' || data['check_number'] instanceof String)) {
            throw new Error("Expected the field `check_number` to be a primitive type in the JSON string but got " + data['check_number']);
        }
        // ensure the json data is a string
        if (data['iso_currency_code'] && !(typeof data['iso_currency_code'] === 'string' || data['iso_currency_code'] instanceof String)) {
            throw new Error("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got " + data['iso_currency_code']);
        }
        // ensure the json data is a string
        if (data['logo_url'] && !(typeof data['logo_url'] === 'string' || data['logo_url'] instanceof String)) {
            throw new Error("Expected the field `logo_url` to be a primitive type in the JSON string but got " + data['logo_url']);
        }
        // ensure the json data is a string
        if (data['merchant_name'] && !(typeof data['merchant_name'] === 'string' || data['merchant_name'] instanceof String)) {
            throw new Error("Expected the field `merchant_name` to be a primitive type in the JSON string but got " + data['merchant_name']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['original_description'] && !(typeof data['original_description'] === 'string' || data['original_description'] instanceof String)) {
            throw new Error("Expected the field `original_description` to be a primitive type in the JSON string but got " + data['original_description']);
        }
        // ensure the json data is a string
        if (data['pending_transaction_id'] && !(typeof data['pending_transaction_id'] === 'string' || data['pending_transaction_id'] instanceof String)) {
            throw new Error("Expected the field `pending_transaction_id` to be a primitive type in the JSON string but got " + data['pending_transaction_id']);
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['transaction_type'] && !(typeof data['transaction_type'] === 'string' || data['transaction_type'] instanceof String)) {
            throw new Error("Expected the field `transaction_type` to be a primitive type in the JSON string but got " + data['transaction_type']);
        }
        // ensure the json data is a string
        if (data['unofficial_currency_code'] && !(typeof data['unofficial_currency_code'] === 'string' || data['unofficial_currency_code'] instanceof String)) {
            throw new Error("Expected the field `unofficial_currency_code` to be a primitive type in the JSON string but got " + data['unofficial_currency_code']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['counterparties'])) {
            throw new Error("Expected the field `counterparties` to be an array in the JSON data but got " + data['counterparties']);
        }
        // ensure the json data is a string
        if (data['payment_channel'] && !(typeof data['payment_channel'] === 'string' || data['payment_channel'] instanceof String)) {
            throw new Error("Expected the field `payment_channel` to be a primitive type in the JSON string but got " + data['payment_channel']);
        }
        // ensure the json data is a string
        if (data['personal_finance_category_icon_url'] && !(typeof data['personal_finance_category_icon_url'] === 'string' || data['personal_finance_category_icon_url'] instanceof String)) {
            throw new Error("Expected the field `personal_finance_category_icon_url` to be a primitive type in the JSON string but got " + data['personal_finance_category_icon_url']);
        }

        return true;
    }


}

Transaction.RequiredProperties = ["account_id", "account_owner", "amount", "category", "category_id", "date", "iso_currency_code", "location", "name", "payment_meta", "pending", "pending_transaction_id", "transaction_id", "unofficial_currency_code", "authorized_date", "authorized_datetime", "datetime", "payment_channel", "transaction_code"];

/**
 * The ID of the account in which this transaction occurred.
 * @member {String} account_id
 */
Transaction.prototype['account_id'] = undefined;

/**
 * The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.
 * @member {String} account_owner
 */
Transaction.prototype['account_owner'] = undefined;

/**
 * The settled value of the transaction, denominated in the transactions's currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
 * @member {Number} amount
 */
Transaction.prototype['amount'] = undefined;

/**
 * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
 * @member {Array.<String>} category
 */
Transaction.prototype['category'] = undefined;

/**
 * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
 * @member {String} category_id
 */
Transaction.prototype['category_id'] = undefined;

/**
 * The check number of the transaction. This field is only populated for check transactions.
 * @member {String} check_number
 */
Transaction.prototype['check_number'] = undefined;

/**
 * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
 * @member {Date} date
 */
Transaction.prototype['date'] = undefined;

/**
 * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.
 * @member {String} iso_currency_code
 */
Transaction.prototype['iso_currency_code'] = undefined;

/**
 * @member {module:model/Location} location
 */
Transaction.prototype['location'] = undefined;

/**
 * The logo associated with the merchant, if available. Formatted as a 100x100 pixels PNG file path.
 * @member {String} logo_url
 */
Transaction.prototype['logo_url'] = undefined;

/**
 * The merchant name, as enriched by Plaid from the `name` field. This is typically a more human-readable version of the merchant counterparty in the transaction. For some bank transactions (such as checks or account transfers) where there is no meaningful merchant name, this value will be `null`.
 * @member {String} merchant_name
 */
Transaction.prototype['merchant_name'] = undefined;

/**
 * The merchant name or transaction description.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
 * @member {String} name
 */
Transaction.prototype['name'] = undefined;

/**
 * The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/get`, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set `options.include_original_description` to `true`.
 * @member {String} original_description
 */
Transaction.prototype['original_description'] = undefined;

/**
 * @member {module:model/PaymentMeta} payment_meta
 */
Transaction.prototype['payment_meta'] = undefined;

/**
 * When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
 * @member {Boolean} pending
 */
Transaction.prototype['pending'] = undefined;

/**
 * The ID of a posted transaction's associated pending transaction, where applicable.
 * @member {String} pending_transaction_id
 */
Transaction.prototype['pending_transaction_id'] = undefined;

/**
 * The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
 * @member {String} transaction_id
 */
Transaction.prototype['transaction_id'] = undefined;

/**
 * Please use the `payment_channel` field, `transaction_type` will be deprecated in the future.  `digital:` transactions that took place online.  `place:` transactions that were made at a physical location.  `special:` transactions that relate to banks, e.g. fees or deposits.  `unresolved:` transactions that do not fit into the other three types. 
 * @member {module:model/Transaction.TransactionTypeEnum} transaction_type
 */
Transaction.prototype['transaction_type'] = undefined;

/**
 * The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
 * @member {String} unofficial_currency_code
 */
Transaction.prototype['unofficial_currency_code'] = undefined;

/**
 * The website associated with the merchant, if available.
 * @member {String} website
 */
Transaction.prototype['website'] = undefined;

/**
 * The date that the transaction was authorized. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
 * @member {Date} authorized_date
 */
Transaction.prototype['authorized_date'] = undefined;

/**
 * Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
 * @member {Date} authorized_datetime
 */
Transaction.prototype['authorized_datetime'] = undefined;

/**
 * The counterparties present in the transaction. Counterparties, such as the financial institutions, are extracted by Plaid from the raw description.
 * @member {Array.<module:model/TransactionCounterparty>} counterparties
 */
Transaction.prototype['counterparties'] = undefined;

/**
 * Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
 * @member {Date} datetime
 */
Transaction.prototype['datetime'] = undefined;

/**
 * The channel used to make a payment. `online:` transactions that took place online.  `in store:` transactions that were made at a physical location.  `other:` transactions that relate to banks, e.g. fees or deposits.  This field replaces the `transaction_type` field. 
 * @member {module:model/Transaction.PaymentChannelEnum} payment_channel
 */
Transaction.prototype['payment_channel'] = undefined;

/**
 * @member {module:model/PersonalFinanceCategory} personal_finance_category
 */
Transaction.prototype['personal_finance_category'] = undefined;

/**
 * A link to the icon associated with the primary personal finance category. The logo will always be 100x100 pixels.
 * @member {String} personal_finance_category_icon_url
 */
Transaction.prototype['personal_finance_category_icon_url'] = undefined;

/**
 * @member {module:model/TransactionCode} transaction_code
 */
Transaction.prototype['transaction_code'] = undefined;


// Implement TransactionBase interface:
/**
 * The ID of the account in which this transaction occurred.
 * @member {String} account_id
 */
TransactionBase.prototype['account_id'] = undefined;
/**
 * The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.
 * @member {String} account_owner
 */
TransactionBase.prototype['account_owner'] = undefined;
/**
 * The settled value of the transaction, denominated in the transactions's currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
 * @member {Number} amount
 */
TransactionBase.prototype['amount'] = undefined;
/**
 * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
 * @member {Array.<String>} category
 */
TransactionBase.prototype['category'] = undefined;
/**
 * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
 * @member {String} category_id
 */
TransactionBase.prototype['category_id'] = undefined;
/**
 * The check number of the transaction. This field is only populated for check transactions.
 * @member {String} check_number
 */
TransactionBase.prototype['check_number'] = undefined;
/**
 * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
 * @member {Date} date
 */
TransactionBase.prototype['date'] = undefined;
/**
 * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.
 * @member {String} iso_currency_code
 */
TransactionBase.prototype['iso_currency_code'] = undefined;
/**
 * @member {module:model/Location} location
 */
TransactionBase.prototype['location'] = undefined;
/**
 * The logo associated with the merchant, if available. Formatted as a 100x100 pixels PNG file path.
 * @member {String} logo_url
 */
TransactionBase.prototype['logo_url'] = undefined;
/**
 * The merchant name, as enriched by Plaid from the `name` field. This is typically a more human-readable version of the merchant counterparty in the transaction. For some bank transactions (such as checks or account transfers) where there is no meaningful merchant name, this value will be `null`.
 * @member {String} merchant_name
 */
TransactionBase.prototype['merchant_name'] = undefined;
/**
 * The merchant name or transaction description.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
 * @member {String} name
 */
TransactionBase.prototype['name'] = undefined;
/**
 * The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/get`, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set `options.include_original_description` to `true`.
 * @member {String} original_description
 */
TransactionBase.prototype['original_description'] = undefined;
/**
 * @member {module:model/PaymentMeta} payment_meta
 */
TransactionBase.prototype['payment_meta'] = undefined;
/**
 * When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
 * @member {Boolean} pending
 */
TransactionBase.prototype['pending'] = undefined;
/**
 * The ID of a posted transaction's associated pending transaction, where applicable.
 * @member {String} pending_transaction_id
 */
TransactionBase.prototype['pending_transaction_id'] = undefined;
/**
 * The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
 * @member {String} transaction_id
 */
TransactionBase.prototype['transaction_id'] = undefined;
/**
 * Please use the `payment_channel` field, `transaction_type` will be deprecated in the future.  `digital:` transactions that took place online.  `place:` transactions that were made at a physical location.  `special:` transactions that relate to banks, e.g. fees or deposits.  `unresolved:` transactions that do not fit into the other three types. 
 * @member {module:model/TransactionBase.TransactionTypeEnum} transaction_type
 */
TransactionBase.prototype['transaction_type'] = undefined;
/**
 * The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
 * @member {String} unofficial_currency_code
 */
TransactionBase.prototype['unofficial_currency_code'] = undefined;
/**
 * The website associated with the merchant, if available.
 * @member {String} website
 */
TransactionBase.prototype['website'] = undefined;



/**
 * Allowed values for the <code>transaction_type</code> property.
 * @enum {String}
 * @readonly
 */
Transaction['TransactionTypeEnum'] = {

    /**
     * value: "digital"
     * @const
     */
    "digital": "digital",

    /**
     * value: "place"
     * @const
     */
    "place": "place",

    /**
     * value: "special"
     * @const
     */
    "special": "special",

    /**
     * value: "unresolved"
     * @const
     */
    "unresolved": "unresolved"
};


/**
 * Allowed values for the <code>payment_channel</code> property.
 * @enum {String}
 * @readonly
 */
Transaction['PaymentChannelEnum'] = {

    /**
     * value: "online"
     * @const
     */
    "online": "online",

    /**
     * value: "in store"
     * @const
     */
    "in store": "in store",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};



export default Transaction;

