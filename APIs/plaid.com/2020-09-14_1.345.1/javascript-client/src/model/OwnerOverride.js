/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Email from './Email';
import PhoneNumber from './PhoneNumber';

/**
 * The OwnerOverride model module.
 * @module model/OwnerOverride
 * @version 2020-09-14_1.345.1
 */
class OwnerOverride {
    /**
     * Constructs a new <code>OwnerOverride</code>.
     * Data about the owner or owners of an account. Any fields not specified will be filled in with default Sandbox information.
     * @alias module:model/OwnerOverride
     * @extends Object
     * @param addresses {Array.<module:model/Address>} Data about the various addresses associated with the account.
     * @param emails {Array.<module:model/Email>} A list of email addresses associated with the account.
     * @param names {Array.<String>} A list of names associated with the account by the financial institution. These should always be the names of individuals, even for business accounts. Note that the same name data will be used for all accounts associated with an Item.
     * @param phoneNumbers {Array.<module:model/PhoneNumber>} A list of phone numbers associated with the account.
     */
    constructor(addresses, emails, names, phoneNumbers) { 
        
        OwnerOverride.initialize(this, addresses, emails, names, phoneNumbers);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, addresses, emails, names, phoneNumbers) { 
        obj['addresses'] = addresses;
        obj['emails'] = emails;
        obj['names'] = names;
        obj['phone_numbers'] = phoneNumbers;
    }

    /**
     * Constructs a <code>OwnerOverride</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OwnerOverride} obj Optional instance to populate.
     * @return {module:model/OwnerOverride} The populated <code>OwnerOverride</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OwnerOverride();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('addresses')) {
                obj['addresses'] = ApiClient.convertToType(data['addresses'], [Address]);
            }
            if (data.hasOwnProperty('emails')) {
                obj['emails'] = ApiClient.convertToType(data['emails'], [Email]);
            }
            if (data.hasOwnProperty('names')) {
                obj['names'] = ApiClient.convertToType(data['names'], ['String']);
            }
            if (data.hasOwnProperty('phone_numbers')) {
                obj['phone_numbers'] = ApiClient.convertToType(data['phone_numbers'], [PhoneNumber]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OwnerOverride</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OwnerOverride</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OwnerOverride.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['addresses'])) {
            throw new Error("Expected the field `addresses` to be an array in the JSON data but got " + data['addresses']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['emails'])) {
            throw new Error("Expected the field `emails` to be an array in the JSON data but got " + data['emails']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['names'])) {
            throw new Error("Expected the field `names` to be an array in the JSON data but got " + data['names']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['phone_numbers'])) {
            throw new Error("Expected the field `phone_numbers` to be an array in the JSON data but got " + data['phone_numbers']);
        }

        return true;
    }


}

OwnerOverride.RequiredProperties = ["addresses", "emails", "names", "phone_numbers"];

/**
 * Data about the various addresses associated with the account.
 * @member {Array.<module:model/Address>} addresses
 */
OwnerOverride.prototype['addresses'] = undefined;

/**
 * A list of email addresses associated with the account.
 * @member {Array.<module:model/Email>} emails
 */
OwnerOverride.prototype['emails'] = undefined;

/**
 * A list of names associated with the account by the financial institution. These should always be the names of individuals, even for business accounts. Note that the same name data will be used for all accounts associated with an Item.
 * @member {Array.<String>} names
 */
OwnerOverride.prototype['names'] = undefined;

/**
 * A list of phone numbers associated with the account.
 * @member {Array.<module:model/PhoneNumber>} phone_numbers
 */
OwnerOverride.prototype['phone_numbers'] = undefined;






export default OwnerOverride;

