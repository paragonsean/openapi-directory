/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FDXHateoasLink from './FDXHateoasLink';
import FDXNotificationCategory from './FDXNotificationCategory';
import FDXNotificationPayload from './FDXNotificationPayload';
import FDXNotificationPriority from './FDXNotificationPriority';
import FDXNotificationSeverity from './FDXNotificationSeverity';
import FDXNotificationType from './FDXNotificationType';
import FDXParty from './FDXParty';

/**
 * The FDXNotification model module.
 * @module model/FDXNotification
 * @version 2020-09-14_1.345.1
 */
class FDXNotification {
    /**
     * Constructs a new <code>FDXNotification</code>.
     * Provides the base fields of a notification. Clients will read the &#x60;type&#x60; property to determine the expected notification payload
     * @alias module:model/FDXNotification
     * @param category {module:model/FDXNotificationCategory} 
     * @param notificationId {String} Id of notification
     * @param notificationPayload {module:model/FDXNotificationPayload} 
     * @param publisher {module:model/FDXParty} 
     * @param sentOn {Date} ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)
     * @param type {module:model/FDXNotificationType} 
     */
    constructor(category, notificationId, notificationPayload, publisher, sentOn, type) { 
        
        FDXNotification.initialize(this, category, notificationId, notificationPayload, publisher, sentOn, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, category, notificationId, notificationPayload, publisher, sentOn, type) { 
        obj['category'] = category;
        obj['notificationId'] = notificationId;
        obj['notificationPayload'] = notificationPayload;
        obj['publisher'] = publisher;
        obj['sentOn'] = sentOn;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>FDXNotification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FDXNotification} obj Optional instance to populate.
     * @return {module:model/FDXNotification} The populated <code>FDXNotification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FDXNotification();

            if (data.hasOwnProperty('category')) {
                obj['category'] = FDXNotificationCategory.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('notificationId')) {
                obj['notificationId'] = ApiClient.convertToType(data['notificationId'], 'String');
            }
            if (data.hasOwnProperty('notificationPayload')) {
                obj['notificationPayload'] = FDXNotificationPayload.constructFromObject(data['notificationPayload']);
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = FDXNotificationPriority.constructFromObject(data['priority']);
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = FDXParty.constructFromObject(data['publisher']);
            }
            if (data.hasOwnProperty('sentOn')) {
                obj['sentOn'] = ApiClient.convertToType(data['sentOn'], 'Date');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = FDXNotificationSeverity.constructFromObject(data['severity']);
            }
            if (data.hasOwnProperty('subscriber')) {
                obj['subscriber'] = FDXParty.constructFromObject(data['subscriber']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = FDXNotificationType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = FDXHateoasLink.constructFromObject(data['url']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FDXNotification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FDXNotification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FDXNotification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['notificationId'] && !(typeof data['notificationId'] === 'string' || data['notificationId'] instanceof String)) {
            throw new Error("Expected the field `notificationId` to be a primitive type in the JSON string but got " + data['notificationId']);
        }
        // validate the optional field `notificationPayload`
        if (data['notificationPayload']) { // data not null
          FDXNotificationPayload.validateJSON(data['notificationPayload']);
        }
        // validate the optional field `publisher`
        if (data['publisher']) { // data not null
          FDXParty.validateJSON(data['publisher']);
        }
        // validate the optional field `subscriber`
        if (data['subscriber']) { // data not null
          FDXParty.validateJSON(data['subscriber']);
        }
        // validate the optional field `url`
        if (data['url']) { // data not null
          FDXHateoasLink.validateJSON(data['url']);
        }

        return true;
    }


}

FDXNotification.RequiredProperties = ["category", "notificationId", "notificationPayload", "publisher", "sentOn", "type"];

/**
 * @member {module:model/FDXNotificationCategory} category
 */
FDXNotification.prototype['category'] = undefined;

/**
 * Id of notification
 * @member {String} notificationId
 */
FDXNotification.prototype['notificationId'] = undefined;

/**
 * @member {module:model/FDXNotificationPayload} notificationPayload
 */
FDXNotification.prototype['notificationPayload'] = undefined;

/**
 * @member {module:model/FDXNotificationPriority} priority
 */
FDXNotification.prototype['priority'] = undefined;

/**
 * @member {module:model/FDXParty} publisher
 */
FDXNotification.prototype['publisher'] = undefined;

/**
 * ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)
 * @member {Date} sentOn
 */
FDXNotification.prototype['sentOn'] = undefined;

/**
 * @member {module:model/FDXNotificationSeverity} severity
 */
FDXNotification.prototype['severity'] = undefined;

/**
 * @member {module:model/FDXParty} subscriber
 */
FDXNotification.prototype['subscriber'] = undefined;

/**
 * @member {module:model/FDXNotificationType} type
 */
FDXNotification.prototype['type'] = undefined;

/**
 * @member {module:model/FDXHateoasLink} url
 */
FDXNotification.prototype['url'] = undefined;






export default FDXNotification;

