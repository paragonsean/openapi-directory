/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WalletTransactionListRequestOptions from './WalletTransactionListRequestOptions';

/**
 * The WalletTransactionListRequest model module.
 * @module model/WalletTransactionListRequest
 * @version 2020-09-14_1.345.1
 */
class WalletTransactionListRequest {
    /**
     * Constructs a new <code>WalletTransactionListRequest</code>.
     * WalletTransactionListRequest defines the request schema for &#x60;/wallet/transaction/list&#x60;
     * @alias module:model/WalletTransactionListRequest
     * @param walletId {String} The ID of the e-wallet to fetch transactions from
     */
    constructor(walletId) { 
        
        WalletTransactionListRequest.initialize(this, walletId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, walletId) { 
        obj['count'] = 10;
        obj['wallet_id'] = walletId;
    }

    /**
     * Constructs a <code>WalletTransactionListRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WalletTransactionListRequest} obj Optional instance to populate.
     * @return {module:model/WalletTransactionListRequest} The populated <code>WalletTransactionListRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WalletTransactionListRequest();

            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('cursor')) {
                obj['cursor'] = ApiClient.convertToType(data['cursor'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = WalletTransactionListRequestOptions.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('wallet_id')) {
                obj['wallet_id'] = ApiClient.convertToType(data['wallet_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WalletTransactionListRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WalletTransactionListRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WalletTransactionListRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['cursor'] && !(typeof data['cursor'] === 'string' || data['cursor'] instanceof String)) {
            throw new Error("Expected the field `cursor` to be a primitive type in the JSON string but got " + data['cursor']);
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          WalletTransactionListRequestOptions.validateJSON(data['options']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // ensure the json data is a string
        if (data['wallet_id'] && !(typeof data['wallet_id'] === 'string' || data['wallet_id'] instanceof String)) {
            throw new Error("Expected the field `wallet_id` to be a primitive type in the JSON string but got " + data['wallet_id']);
        }

        return true;
    }


}

WalletTransactionListRequest.RequiredProperties = ["wallet_id"];

/**
 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
 * @member {String} client_id
 */
WalletTransactionListRequest.prototype['client_id'] = undefined;

/**
 * The number of transactions to fetch
 * @member {Number} count
 * @default 10
 */
WalletTransactionListRequest.prototype['count'] = 10;

/**
 * A base64 value representing the latest transaction that has already been requested. Set this to `next_cursor` received from the previous `/wallet/transaction/list` request. If provided, the response will only contain transactions created before that transaction. If omitted, the response will contain transactions starting from the most recent, and in descending order by the `created_at` time.
 * @member {String} cursor
 */
WalletTransactionListRequest.prototype['cursor'] = undefined;

/**
 * @member {module:model/WalletTransactionListRequestOptions} options
 */
WalletTransactionListRequest.prototype['options'] = undefined;

/**
 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
 * @member {String} secret
 */
WalletTransactionListRequest.prototype['secret'] = undefined;

/**
 * The ID of the e-wallet to fetch transactions from
 * @member {String} wallet_id
 */
WalletTransactionListRequest.prototype['wallet_id'] = undefined;






export default WalletTransactionListRequest;

