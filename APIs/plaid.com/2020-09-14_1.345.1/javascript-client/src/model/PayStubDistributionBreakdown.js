/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PayStubDistributionBreakdown model module.
 * @module model/PayStubDistributionBreakdown
 * @version 2020-09-14_1.345.1
 */
class PayStubDistributionBreakdown {
    /**
     * Constructs a new <code>PayStubDistributionBreakdown</code>.
     * Information about the accounts that the payment was distributed to.
     * @alias module:model/PayStubDistributionBreakdown
     * @extends Object
     * @param accountName {String} Name of the account for the given distribution.
     * @param bankName {String} The name of the bank that the payment is being deposited to.
     * @param currentAmount {Number} The amount distributed to this account.
     * @param isoCurrencyCode {String} The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.
     * @param mask {String} The last 2-4 alphanumeric characters of an account's official account number.
     * @param type {String} Type of the account that the paystub was sent to (e.g. 'checking').
     * @param unofficialCurrencyCode {String} The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     */
    constructor(accountName, bankName, currentAmount, isoCurrencyCode, mask, type, unofficialCurrencyCode) { 
        
        PayStubDistributionBreakdown.initialize(this, accountName, bankName, currentAmount, isoCurrencyCode, mask, type, unofficialCurrencyCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountName, bankName, currentAmount, isoCurrencyCode, mask, type, unofficialCurrencyCode) { 
        obj['account_name'] = accountName;
        obj['bank_name'] = bankName;
        obj['current_amount'] = currentAmount;
        obj['iso_currency_code'] = isoCurrencyCode;
        obj['mask'] = mask;
        obj['type'] = type;
        obj['unofficial_currency_code'] = unofficialCurrencyCode;
    }

    /**
     * Constructs a <code>PayStubDistributionBreakdown</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayStubDistributionBreakdown} obj Optional instance to populate.
     * @return {module:model/PayStubDistributionBreakdown} The populated <code>PayStubDistributionBreakdown</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayStubDistributionBreakdown();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_name')) {
                obj['account_name'] = ApiClient.convertToType(data['account_name'], 'String');
            }
            if (data.hasOwnProperty('bank_name')) {
                obj['bank_name'] = ApiClient.convertToType(data['bank_name'], 'String');
            }
            if (data.hasOwnProperty('current_amount')) {
                obj['current_amount'] = ApiClient.convertToType(data['current_amount'], 'Number');
            }
            if (data.hasOwnProperty('iso_currency_code')) {
                obj['iso_currency_code'] = ApiClient.convertToType(data['iso_currency_code'], 'String');
            }
            if (data.hasOwnProperty('mask')) {
                obj['mask'] = ApiClient.convertToType(data['mask'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('unofficial_currency_code')) {
                obj['unofficial_currency_code'] = ApiClient.convertToType(data['unofficial_currency_code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayStubDistributionBreakdown</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayStubDistributionBreakdown</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PayStubDistributionBreakdown.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_name'] && !(typeof data['account_name'] === 'string' || data['account_name'] instanceof String)) {
            throw new Error("Expected the field `account_name` to be a primitive type in the JSON string but got " + data['account_name']);
        }
        // ensure the json data is a string
        if (data['bank_name'] && !(typeof data['bank_name'] === 'string' || data['bank_name'] instanceof String)) {
            throw new Error("Expected the field `bank_name` to be a primitive type in the JSON string but got " + data['bank_name']);
        }
        // ensure the json data is a string
        if (data['iso_currency_code'] && !(typeof data['iso_currency_code'] === 'string' || data['iso_currency_code'] instanceof String)) {
            throw new Error("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got " + data['iso_currency_code']);
        }
        // ensure the json data is a string
        if (data['mask'] && !(typeof data['mask'] === 'string' || data['mask'] instanceof String)) {
            throw new Error("Expected the field `mask` to be a primitive type in the JSON string but got " + data['mask']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['unofficial_currency_code'] && !(typeof data['unofficial_currency_code'] === 'string' || data['unofficial_currency_code'] instanceof String)) {
            throw new Error("Expected the field `unofficial_currency_code` to be a primitive type in the JSON string but got " + data['unofficial_currency_code']);
        }

        return true;
    }


}

PayStubDistributionBreakdown.RequiredProperties = ["account_name", "bank_name", "current_amount", "iso_currency_code", "mask", "type", "unofficial_currency_code"];

/**
 * Name of the account for the given distribution.
 * @member {String} account_name
 */
PayStubDistributionBreakdown.prototype['account_name'] = undefined;

/**
 * The name of the bank that the payment is being deposited to.
 * @member {String} bank_name
 */
PayStubDistributionBreakdown.prototype['bank_name'] = undefined;

/**
 * The amount distributed to this account.
 * @member {Number} current_amount
 */
PayStubDistributionBreakdown.prototype['current_amount'] = undefined;

/**
 * The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null.
 * @member {String} iso_currency_code
 */
PayStubDistributionBreakdown.prototype['iso_currency_code'] = undefined;

/**
 * The last 2-4 alphanumeric characters of an account's official account number.
 * @member {String} mask
 */
PayStubDistributionBreakdown.prototype['mask'] = undefined;

/**
 * Type of the account that the paystub was sent to (e.g. 'checking').
 * @member {String} type
 */
PayStubDistributionBreakdown.prototype['type'] = undefined;

/**
 * The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
 * @member {String} unofficial_currency_code
 */
PayStubDistributionBreakdown.prototype['unofficial_currency_code'] = undefined;






export default PayStubDistributionBreakdown;

