/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlaidError from './PlaidError';
import PlaidErrorType from './PlaidErrorType';

/**
 * The Cause model module.
 * @module model/Cause
 * @version 2020-09-14_1.345.1
 */
class Cause {
    /**
     * Constructs a new <code>Cause</code>.
     * An error object and associated &#x60;item_id&#x60; used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items.
     * @alias module:model/Cause
     * @extends Object
     * @implements module:model/PlaidError
     * @param displayMessage {String} A user-friendly representation of the error code. `null` if the error is not related to user action.  This may change over time and is not safe for programmatic use.
     * @param errorCode {String} The particular error code. Safe for programmatic use.
     * @param errorMessage {String} A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
     * @param errorType {module:model/PlaidErrorType} 
     * @param itemId {String} The `item_id` of the Item associated with this webhook, warning, or error
     */
    constructor(displayMessage, errorCode, errorMessage, errorType, itemId) { 
        PlaidError.initialize(this, displayMessage, errorCode, errorMessage, errorType);
        Cause.initialize(this, displayMessage, errorCode, errorMessage, errorType, itemId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, displayMessage, errorCode, errorMessage, errorType, itemId) { 
        obj['display_message'] = displayMessage;
        obj['error_code'] = errorCode;
        obj['error_message'] = errorMessage;
        obj['error_type'] = errorType;
        obj['item_id'] = itemId;
    }

    /**
     * Constructs a <code>Cause</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cause} obj Optional instance to populate.
     * @return {module:model/Cause} The populated <code>Cause</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cause();

            ApiClient.constructFromObject(data, obj, 'Object');
            
            PlaidError.constructFromObject(data, obj);

            if (data.hasOwnProperty('causes')) {
                obj['causes'] = ApiClient.convertToType(data['causes'], [Object]);
            }
            if (data.hasOwnProperty('display_message')) {
                obj['display_message'] = ApiClient.convertToType(data['display_message'], 'String');
            }
            if (data.hasOwnProperty('documentation_url')) {
                obj['documentation_url'] = ApiClient.convertToType(data['documentation_url'], 'String');
            }
            if (data.hasOwnProperty('error_code')) {
                obj['error_code'] = ApiClient.convertToType(data['error_code'], 'String');
            }
            if (data.hasOwnProperty('error_message')) {
                obj['error_message'] = ApiClient.convertToType(data['error_message'], 'String');
            }
            if (data.hasOwnProperty('error_type')) {
                obj['error_type'] = PlaidErrorType.constructFromObject(data['error_type']);
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('suggested_action')) {
                obj['suggested_action'] = ApiClient.convertToType(data['suggested_action'], 'String');
            }
            if (data.hasOwnProperty('item_id')) {
                obj['item_id'] = ApiClient.convertToType(data['item_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cause</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cause</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Cause.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['causes'])) {
            throw new Error("Expected the field `causes` to be an array in the JSON data but got " + data['causes']);
        }
        // ensure the json data is a string
        if (data['display_message'] && !(typeof data['display_message'] === 'string' || data['display_message'] instanceof String)) {
            throw new Error("Expected the field `display_message` to be a primitive type in the JSON string but got " + data['display_message']);
        }
        // ensure the json data is a string
        if (data['documentation_url'] && !(typeof data['documentation_url'] === 'string' || data['documentation_url'] instanceof String)) {
            throw new Error("Expected the field `documentation_url` to be a primitive type in the JSON string but got " + data['documentation_url']);
        }
        // ensure the json data is a string
        if (data['error_code'] && !(typeof data['error_code'] === 'string' || data['error_code'] instanceof String)) {
            throw new Error("Expected the field `error_code` to be a primitive type in the JSON string but got " + data['error_code']);
        }
        // ensure the json data is a string
        if (data['error_message'] && !(typeof data['error_message'] === 'string' || data['error_message'] instanceof String)) {
            throw new Error("Expected the field `error_message` to be a primitive type in the JSON string but got " + data['error_message']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['suggested_action'] && !(typeof data['suggested_action'] === 'string' || data['suggested_action'] instanceof String)) {
            throw new Error("Expected the field `suggested_action` to be a primitive type in the JSON string but got " + data['suggested_action']);
        }
        // ensure the json data is a string
        if (data['item_id'] && !(typeof data['item_id'] === 'string' || data['item_id'] instanceof String)) {
            throw new Error("Expected the field `item_id` to be a primitive type in the JSON string but got " + data['item_id']);
        }

        return true;
    }


}

Cause.RequiredProperties = ["display_message", "error_code", "error_message", "error_type", "item_id"];

/**
 * In the Assets product, a request can pertain to more than one Item. If an error is returned for such a request, `causes` will return an array of errors containing a breakdown of these errors on the individual Item level, if any can be identified.  `causes` will only be provided for the `error_type` `ASSET_REPORT_ERROR`. `causes` will also not be populated inside an error nested within a `warning` object.
 * @member {Array.<Object>} causes
 */
Cause.prototype['causes'] = undefined;

/**
 * A user-friendly representation of the error code. `null` if the error is not related to user action.  This may change over time and is not safe for programmatic use.
 * @member {String} display_message
 */
Cause.prototype['display_message'] = undefined;

/**
 * The URL of a Plaid documentation page with more information about the error
 * @member {String} documentation_url
 */
Cause.prototype['documentation_url'] = undefined;

/**
 * The particular error code. Safe for programmatic use.
 * @member {String} error_code
 */
Cause.prototype['error_code'] = undefined;

/**
 * A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
 * @member {String} error_message
 */
Cause.prototype['error_message'] = undefined;

/**
 * @member {module:model/PlaidErrorType} error_type
 */
Cause.prototype['error_type'] = undefined;

/**
 * A unique ID identifying the request, to be used for troubleshooting purposes. This field will be omitted in errors provided by webhooks.
 * @member {String} request_id
 */
Cause.prototype['request_id'] = undefined;

/**
 * The HTTP status code associated with the error. This will only be returned in the response body when the error information is provided via a webhook.
 * @member {Number} status
 */
Cause.prototype['status'] = undefined;

/**
 * Suggested steps for resolving the error
 * @member {String} suggested_action
 */
Cause.prototype['suggested_action'] = undefined;

/**
 * The `item_id` of the Item associated with this webhook, warning, or error
 * @member {String} item_id
 */
Cause.prototype['item_id'] = undefined;


// Implement PlaidError interface:
/**
 * In the Assets product, a request can pertain to more than one Item. If an error is returned for such a request, `causes` will return an array of errors containing a breakdown of these errors on the individual Item level, if any can be identified.  `causes` will only be provided for the `error_type` `ASSET_REPORT_ERROR`. `causes` will also not be populated inside an error nested within a `warning` object.
 * @member {Array.<Object>} causes
 */
PlaidError.prototype['causes'] = undefined;
/**
 * A user-friendly representation of the error code. `null` if the error is not related to user action.  This may change over time and is not safe for programmatic use.
 * @member {String} display_message
 */
PlaidError.prototype['display_message'] = undefined;
/**
 * The URL of a Plaid documentation page with more information about the error
 * @member {String} documentation_url
 */
PlaidError.prototype['documentation_url'] = undefined;
/**
 * The particular error code. Safe for programmatic use.
 * @member {String} error_code
 */
PlaidError.prototype['error_code'] = undefined;
/**
 * A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
 * @member {String} error_message
 */
PlaidError.prototype['error_message'] = undefined;
/**
 * @member {module:model/PlaidErrorType} error_type
 */
PlaidError.prototype['error_type'] = undefined;
/**
 * A unique ID identifying the request, to be used for troubleshooting purposes. This field will be omitted in errors provided by webhooks.
 * @member {String} request_id
 */
PlaidError.prototype['request_id'] = undefined;
/**
 * The HTTP status code associated with the error. This will only be returned in the response body when the error information is provided via a webhook.
 * @member {Number} status
 */
PlaidError.prototype['status'] = undefined;
/**
 * Suggested steps for resolving the error
 * @member {String} suggested_action
 */
PlaidError.prototype['suggested_action'] = undefined;




export default Cause;

