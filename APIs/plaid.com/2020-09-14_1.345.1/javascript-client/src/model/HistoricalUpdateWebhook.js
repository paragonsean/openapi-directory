/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlaidError from './PlaidError';
import WebhookEnvironmentValues from './WebhookEnvironmentValues';

/**
 * The HistoricalUpdateWebhook model module.
 * @module model/HistoricalUpdateWebhook
 * @version 2020-09-14_1.345.1
 */
class HistoricalUpdateWebhook {
    /**
     * Constructs a new <code>HistoricalUpdateWebhook</code>.
     * Fired when an Item&#39;s historical transaction pull is completed and Plaid has prepared as much historical transaction data as possible for the Item. Once this webhook has been fired, transaction data beyond the most recent 30 days can be fetched for the Item. If [Account Select v2](https://plaid.com/docs/link/customization/#account-select) is enabled, this webhook will also be fired if account selections for the Item are updated, with &#x60;new_transactions&#x60; set to the number of net new transactions pulled after the account selection update.  This webhook is intended for use with &#x60;/transactions/get&#x60;; if you are using the newer &#x60;/transactions/sync&#x60; endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the &#x60;SYNC_UPDATES_AVAILABLE&#x60; webhook instead.
     * @alias module:model/HistoricalUpdateWebhook
     * @extends Object
     * @param environment {module:model/WebhookEnvironmentValues} 
     * @param itemId {String} The `item_id` of the Item associated with this webhook, warning, or error
     * @param newTransactions {Number} The number of new, unfetched transactions available
     * @param webhookCode {String} `HISTORICAL_UPDATE`
     * @param webhookType {String} `TRANSACTIONS`
     */
    constructor(environment, itemId, newTransactions, webhookCode, webhookType) { 
        
        HistoricalUpdateWebhook.initialize(this, environment, itemId, newTransactions, webhookCode, webhookType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, environment, itemId, newTransactions, webhookCode, webhookType) { 
        obj['environment'] = environment;
        obj['item_id'] = itemId;
        obj['new_transactions'] = newTransactions;
        obj['webhook_code'] = webhookCode;
        obj['webhook_type'] = webhookType;
    }

    /**
     * Constructs a <code>HistoricalUpdateWebhook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HistoricalUpdateWebhook} obj Optional instance to populate.
     * @return {module:model/HistoricalUpdateWebhook} The populated <code>HistoricalUpdateWebhook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HistoricalUpdateWebhook();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('environment')) {
                obj['environment'] = WebhookEnvironmentValues.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = PlaidError.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('item_id')) {
                obj['item_id'] = ApiClient.convertToType(data['item_id'], 'String');
            }
            if (data.hasOwnProperty('new_transactions')) {
                obj['new_transactions'] = ApiClient.convertToType(data['new_transactions'], 'Number');
            }
            if (data.hasOwnProperty('webhook_code')) {
                obj['webhook_code'] = ApiClient.convertToType(data['webhook_code'], 'String');
            }
            if (data.hasOwnProperty('webhook_type')) {
                obj['webhook_type'] = ApiClient.convertToType(data['webhook_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HistoricalUpdateWebhook</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HistoricalUpdateWebhook</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HistoricalUpdateWebhook.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['item_id'] && !(typeof data['item_id'] === 'string' || data['item_id'] instanceof String)) {
            throw new Error("Expected the field `item_id` to be a primitive type in the JSON string but got " + data['item_id']);
        }
        // ensure the json data is a string
        if (data['webhook_code'] && !(typeof data['webhook_code'] === 'string' || data['webhook_code'] instanceof String)) {
            throw new Error("Expected the field `webhook_code` to be a primitive type in the JSON string but got " + data['webhook_code']);
        }
        // ensure the json data is a string
        if (data['webhook_type'] && !(typeof data['webhook_type'] === 'string' || data['webhook_type'] instanceof String)) {
            throw new Error("Expected the field `webhook_type` to be a primitive type in the JSON string but got " + data['webhook_type']);
        }

        return true;
    }


}

HistoricalUpdateWebhook.RequiredProperties = ["environment", "item_id", "new_transactions", "webhook_code", "webhook_type"];

/**
 * @member {module:model/WebhookEnvironmentValues} environment
 */
HistoricalUpdateWebhook.prototype['environment'] = undefined;

/**
 * @member {module:model/PlaidError} error
 */
HistoricalUpdateWebhook.prototype['error'] = undefined;

/**
 * The `item_id` of the Item associated with this webhook, warning, or error
 * @member {String} item_id
 */
HistoricalUpdateWebhook.prototype['item_id'] = undefined;

/**
 * The number of new, unfetched transactions available
 * @member {Number} new_transactions
 */
HistoricalUpdateWebhook.prototype['new_transactions'] = undefined;

/**
 * `HISTORICAL_UPDATE`
 * @member {String} webhook_code
 */
HistoricalUpdateWebhook.prototype['webhook_code'] = undefined;

/**
 * `TRANSACTIONS`
 * @member {String} webhook_type
 */
HistoricalUpdateWebhook.prototype['webhook_type'] = undefined;






export default HistoricalUpdateWebhook;

