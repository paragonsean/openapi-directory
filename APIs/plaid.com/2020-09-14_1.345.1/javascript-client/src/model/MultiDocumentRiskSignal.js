/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentRiskSignal from './DocumentRiskSignal';
import RiskSignalDocumentReference from './RiskSignalDocumentReference';

/**
 * The MultiDocumentRiskSignal model module.
 * @module model/MultiDocumentRiskSignal
 * @version 2020-09-14_1.345.1
 */
class MultiDocumentRiskSignal {
    /**
     * Constructs a new <code>MultiDocumentRiskSignal</code>.
     * Object containing risk signals and relevant metadata for a set of uploaded documents
     * @alias module:model/MultiDocumentRiskSignal
     * @extends Object
     * @param documentReferences {Array.<module:model/RiskSignalDocumentReference>} Array of objects containing attributes that could indicate if a document is fraudulent
     * @param riskSignals {Array.<module:model/DocumentRiskSignal>} Array of attributes that indicate whether or not there is fraud risk with a set of documents
     */
    constructor(documentReferences, riskSignals) { 
        
        MultiDocumentRiskSignal.initialize(this, documentReferences, riskSignals);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documentReferences, riskSignals) { 
        obj['document_references'] = documentReferences;
        obj['risk_signals'] = riskSignals;
    }

    /**
     * Constructs a <code>MultiDocumentRiskSignal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MultiDocumentRiskSignal} obj Optional instance to populate.
     * @return {module:model/MultiDocumentRiskSignal} The populated <code>MultiDocumentRiskSignal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MultiDocumentRiskSignal();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('document_references')) {
                obj['document_references'] = ApiClient.convertToType(data['document_references'], [RiskSignalDocumentReference]);
            }
            if (data.hasOwnProperty('risk_signals')) {
                obj['risk_signals'] = ApiClient.convertToType(data['risk_signals'], [DocumentRiskSignal]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MultiDocumentRiskSignal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MultiDocumentRiskSignal</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MultiDocumentRiskSignal.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['document_references'])) {
            throw new Error("Expected the field `document_references` to be an array in the JSON data but got " + data['document_references']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['risk_signals'])) {
            throw new Error("Expected the field `risk_signals` to be an array in the JSON data but got " + data['risk_signals']);
        }

        return true;
    }


}

MultiDocumentRiskSignal.RequiredProperties = ["document_references", "risk_signals"];

/**
 * Array of objects containing attributes that could indicate if a document is fraudulent
 * @member {Array.<module:model/RiskSignalDocumentReference>} document_references
 */
MultiDocumentRiskSignal.prototype['document_references'] = undefined;

/**
 * Array of attributes that indicate whether or not there is fraud risk with a set of documents
 * @member {Array.<module:model/DocumentRiskSignal>} risk_signals
 */
MultiDocumentRiskSignal.prototype['risk_signals'] = undefined;






export default MultiDocumentRiskSignal;

