/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Counterparty from './Counterparty';
import Location from './Location';
import PaymentChannel from './PaymentChannel';
import PersonalFinanceCategory from './PersonalFinanceCategory';

/**
 * The Enhancements model module.
 * @module model/Enhancements
 * @version 2020-09-14_1.345.1
 */
class Enhancements {
    /**
     * Constructs a new <code>Enhancements</code>.
     * A grouping of the Plaid produced transaction enhancement fields.
     * @alias module:model/Enhancements
     * @extends Object
     * @param category {Array.<String>} A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
     * @param categoryId {String} The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
     * @param location {module:model/Location} 
     * @param paymentChannel {module:model/PaymentChannel} 
     */
    constructor(category, categoryId, location, paymentChannel) { 
        
        Enhancements.initialize(this, category, categoryId, location, paymentChannel);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, category, categoryId, location, paymentChannel) { 
        obj['category'] = category;
        obj['category_id'] = categoryId;
        obj['location'] = location;
        obj['payment_channel'] = paymentChannel;
    }

    /**
     * Constructs a <code>Enhancements</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Enhancements} obj Optional instance to populate.
     * @return {module:model/Enhancements} The populated <code>Enhancements</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Enhancements();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], ['String']);
            }
            if (data.hasOwnProperty('category_id')) {
                obj['category_id'] = ApiClient.convertToType(data['category_id'], 'String');
            }
            if (data.hasOwnProperty('check_number')) {
                obj['check_number'] = ApiClient.convertToType(data['check_number'], 'String');
            }
            if (data.hasOwnProperty('counterparties')) {
                obj['counterparties'] = ApiClient.convertToType(data['counterparties'], [Counterparty]);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('logo_url')) {
                obj['logo_url'] = ApiClient.convertToType(data['logo_url'], 'String');
            }
            if (data.hasOwnProperty('merchant_name')) {
                obj['merchant_name'] = ApiClient.convertToType(data['merchant_name'], 'String');
            }
            if (data.hasOwnProperty('payment_channel')) {
                obj['payment_channel'] = PaymentChannel.constructFromObject(data['payment_channel']);
            }
            if (data.hasOwnProperty('personal_finance_category')) {
                obj['personal_finance_category'] = PersonalFinanceCategory.constructFromObject(data['personal_finance_category']);
            }
            if (data.hasOwnProperty('personal_finance_category_icon_url')) {
                obj['personal_finance_category_icon_url'] = ApiClient.convertToType(data['personal_finance_category_icon_url'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Enhancements</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Enhancements</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Enhancements.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['category'])) {
            throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['category_id'] && !(typeof data['category_id'] === 'string' || data['category_id'] instanceof String)) {
            throw new Error("Expected the field `category_id` to be a primitive type in the JSON string but got " + data['category_id']);
        }
        // ensure the json data is a string
        if (data['check_number'] && !(typeof data['check_number'] === 'string' || data['check_number'] instanceof String)) {
            throw new Error("Expected the field `check_number` to be a primitive type in the JSON string but got " + data['check_number']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['counterparties'])) {
            throw new Error("Expected the field `counterparties` to be an array in the JSON data but got " + data['counterparties']);
        }
        // ensure the json data is a string
        if (data['logo_url'] && !(typeof data['logo_url'] === 'string' || data['logo_url'] instanceof String)) {
            throw new Error("Expected the field `logo_url` to be a primitive type in the JSON string but got " + data['logo_url']);
        }
        // ensure the json data is a string
        if (data['merchant_name'] && !(typeof data['merchant_name'] === 'string' || data['merchant_name'] instanceof String)) {
            throw new Error("Expected the field `merchant_name` to be a primitive type in the JSON string but got " + data['merchant_name']);
        }
        // ensure the json data is a string
        if (data['personal_finance_category_icon_url'] && !(typeof data['personal_finance_category_icon_url'] === 'string' || data['personal_finance_category_icon_url'] instanceof String)) {
            throw new Error("Expected the field `personal_finance_category_icon_url` to be a primitive type in the JSON string but got " + data['personal_finance_category_icon_url']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}

Enhancements.RequiredProperties = ["category", "category_id", "location", "payment_channel"];

/**
 * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
 * @member {Array.<String>} category
 */
Enhancements.prototype['category'] = undefined;

/**
 * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
 * @member {String} category_id
 */
Enhancements.prototype['category_id'] = undefined;

/**
 * The check number of the transaction. This field is only populated for check transactions.
 * @member {String} check_number
 */
Enhancements.prototype['check_number'] = undefined;

/**
 * The counterparties present in the transaction. Counterparties, such as the merchant or the financial institution, are extracted by Plaid from the raw description.
 * @member {Array.<module:model/Counterparty>} counterparties
 */
Enhancements.prototype['counterparties'] = undefined;

/**
 * @member {module:model/Location} location
 */
Enhancements.prototype['location'] = undefined;

/**
 * The URL of a logo associated with this transaction, if available. The logo is formatted as a 100x100 pixel PNG file.
 * @member {String} logo_url
 */
Enhancements.prototype['logo_url'] = undefined;

/**
 * The name of the primary counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
 * @member {String} merchant_name
 */
Enhancements.prototype['merchant_name'] = undefined;

/**
 * @member {module:model/PaymentChannel} payment_channel
 */
Enhancements.prototype['payment_channel'] = undefined;

/**
 * @member {module:model/PersonalFinanceCategory} personal_finance_category
 */
Enhancements.prototype['personal_finance_category'] = undefined;

/**
 * A link to the icon associated with the primary personal finance category. The logo will always be 100x100 pixels.
 * @member {String} personal_finance_category_icon_url
 */
Enhancements.prototype['personal_finance_category_icon_url'] = undefined;

/**
 * The website associated with this transaction, if available.
 * @member {String} website
 */
Enhancements.prototype['website'] = undefined;






export default Enhancements;

