/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentRiskSignal from './DocumentRiskSignal';
import DocumentRiskSummary from './DocumentRiskSummary';
import RiskSignalDocumentReference from './RiskSignalDocumentReference';

/**
 * The SingleDocumentRiskSignal model module.
 * @module model/SingleDocumentRiskSignal
 * @version 2020-09-14_1.345.1
 */
class SingleDocumentRiskSignal {
    /**
     * Constructs a new <code>SingleDocumentRiskSignal</code>.
     * Object containing all risk signals and relevant metadata for a single document
     * @alias module:model/SingleDocumentRiskSignal
     * @extends Object
     * @param documentReference {module:model/RiskSignalDocumentReference} 
     * @param riskSignals {Array.<module:model/DocumentRiskSignal>} Array of attributes that indicate whether or not there is fraud risk with a document
     * @param riskSummary {module:model/DocumentRiskSummary} 
     */
    constructor(documentReference, riskSignals, riskSummary) { 
        
        SingleDocumentRiskSignal.initialize(this, documentReference, riskSignals, riskSummary);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documentReference, riskSignals, riskSummary) { 
        obj['document_reference'] = documentReference;
        obj['risk_signals'] = riskSignals;
        obj['risk_summary'] = riskSummary;
    }

    /**
     * Constructs a <code>SingleDocumentRiskSignal</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SingleDocumentRiskSignal} obj Optional instance to populate.
     * @return {module:model/SingleDocumentRiskSignal} The populated <code>SingleDocumentRiskSignal</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SingleDocumentRiskSignal();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('document_reference')) {
                obj['document_reference'] = RiskSignalDocumentReference.constructFromObject(data['document_reference']);
            }
            if (data.hasOwnProperty('risk_signals')) {
                obj['risk_signals'] = ApiClient.convertToType(data['risk_signals'], [DocumentRiskSignal]);
            }
            if (data.hasOwnProperty('risk_summary')) {
                obj['risk_summary'] = DocumentRiskSummary.constructFromObject(data['risk_summary']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SingleDocumentRiskSignal</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SingleDocumentRiskSignal</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SingleDocumentRiskSignal.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['risk_signals'])) {
            throw new Error("Expected the field `risk_signals` to be an array in the JSON data but got " + data['risk_signals']);
        }

        return true;
    }


}

SingleDocumentRiskSignal.RequiredProperties = ["document_reference", "risk_signals", "risk_summary"];

/**
 * @member {module:model/RiskSignalDocumentReference} document_reference
 */
SingleDocumentRiskSignal.prototype['document_reference'] = undefined;

/**
 * Array of attributes that indicate whether or not there is fraud risk with a document
 * @member {Array.<module:model/DocumentRiskSignal>} risk_signals
 */
SingleDocumentRiskSignal.prototype['risk_signals'] = undefined;

/**
 * @member {module:model/DocumentRiskSummary} risk_summary
 */
SingleDocumentRiskSignal.prototype['risk_summary'] = undefined;






export default SingleDocumentRiskSignal;

