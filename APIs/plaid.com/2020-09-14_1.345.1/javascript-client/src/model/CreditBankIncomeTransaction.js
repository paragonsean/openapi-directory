/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreditBankIncomeTransaction model module.
 * @module model/CreditBankIncomeTransaction
 * @version 2020-09-14_1.345.1
 */
class CreditBankIncomeTransaction {
    /**
     * Constructs a new <code>CreditBankIncomeTransaction</code>.
     * The transactions data for the end user&#39;s income source(s).
     * @alias module:model/CreditBankIncomeTransaction
     * @extends Object
     */
    constructor() { 
        
        CreditBankIncomeTransaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreditBankIncomeTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreditBankIncomeTransaction} obj Optional instance to populate.
     * @return {module:model/CreditBankIncomeTransaction} The populated <code>CreditBankIncomeTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreditBankIncomeTransaction();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('check_number')) {
                obj['check_number'] = ApiClient.convertToType(data['check_number'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('iso_currency_code')) {
                obj['iso_currency_code'] = ApiClient.convertToType(data['iso_currency_code'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('original_description')) {
                obj['original_description'] = ApiClient.convertToType(data['original_description'], 'String');
            }
            if (data.hasOwnProperty('pending')) {
                obj['pending'] = ApiClient.convertToType(data['pending'], 'Boolean');
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('unofficial_currency_code')) {
                obj['unofficial_currency_code'] = ApiClient.convertToType(data['unofficial_currency_code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreditBankIncomeTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreditBankIncomeTransaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['check_number'] && !(typeof data['check_number'] === 'string' || data['check_number'] instanceof String)) {
            throw new Error("Expected the field `check_number` to be a primitive type in the JSON string but got " + data['check_number']);
        }
        // ensure the json data is a string
        if (data['iso_currency_code'] && !(typeof data['iso_currency_code'] === 'string' || data['iso_currency_code'] instanceof String)) {
            throw new Error("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got " + data['iso_currency_code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['original_description'] && !(typeof data['original_description'] === 'string' || data['original_description'] instanceof String)) {
            throw new Error("Expected the field `original_description` to be a primitive type in the JSON string but got " + data['original_description']);
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['unofficial_currency_code'] && !(typeof data['unofficial_currency_code'] === 'string' || data['unofficial_currency_code'] instanceof String)) {
            throw new Error("Expected the field `unofficial_currency_code` to be a primitive type in the JSON string but got " + data['unofficial_currency_code']);
        }

        return true;
    }


}



/**
 * The settled value of the transaction, denominated in the transactions's currency as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, credit card purchases are positive; credit card payment, direct deposits, and refunds are negative.
 * @member {Number} amount
 */
CreditBankIncomeTransaction.prototype['amount'] = undefined;

/**
 * The check number of the transaction. This field is only populated for check transactions.
 * @member {String} check_number
 */
CreditBankIncomeTransaction.prototype['check_number'] = undefined;

/**
 * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an ISO 8601 format (YYYY-MM-DD).
 * @member {Date} date
 */
CreditBankIncomeTransaction.prototype['date'] = undefined;

/**
 * The ISO 4217 currency code of the amount or balance.
 * @member {String} iso_currency_code
 */
CreditBankIncomeTransaction.prototype['iso_currency_code'] = undefined;

/**
 * The merchant name or transaction description.
 * @member {String} name
 */
CreditBankIncomeTransaction.prototype['name'] = undefined;

/**
 * The string returned by the financial institution to describe the transaction.
 * @member {String} original_description
 */
CreditBankIncomeTransaction.prototype['original_description'] = undefined;

/**
 * When true, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
 * @member {Boolean} pending
 */
CreditBankIncomeTransaction.prototype['pending'] = undefined;

/**
 * The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
 * @member {String} transaction_id
 */
CreditBankIncomeTransaction.prototype['transaction_id'] = undefined;

/**
 * The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
 * @member {String} unofficial_currency_code
 */
CreditBankIncomeTransaction.prototype['unofficial_currency_code'] = undefined;






export default CreditBankIncomeTransaction;

