/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RecaptchaRequiredError model module.
 * @module model/RecaptchaRequiredError
 * @version 2020-09-14_1.345.1
 */
class RecaptchaRequiredError {
    /**
     * Constructs a new <code>RecaptchaRequiredError</code>.
     * The request was flagged by Plaid&#39;s fraud system, and requires additional verification to ensure they are not a bot.
     * @alias module:model/RecaptchaRequiredError
     * @extends Object
     * @param commonCauses {String} Plaid's fraud system detects abusive traffic and considers a variety of parameters throughout Item creation requests. When a request is considered risky or possibly fraudulent, Link presents a reCAPTCHA for the user to solve.
     * @param displayMessage {String} 
     * @param errorCode {String} RECAPTCHA_REQUIRED
     * @param errorType {String} RECAPTCHA_ERROR
     * @param httpCode {String} 400
     * @param linkUserExperience {String} Your user will be prompted to solve a Google reCAPTCHA challenge in the Link Recaptcha pane. If they solve the challenge successfully, the user's request is resubmitted and they are directed to the next Item creation step.
     * @param troubleshootingSteps {String} Link will automatically guide your user through reCAPTCHA verification. As a general rule, we recommend instrumenting basic fraud monitoring to detect and protect your website from spam and abuse.  If your user cannot verify their session, please submit a Support ticket with the following identifiers: `link_session_id` or `request_id`
     */
    constructor(commonCauses, displayMessage, errorCode, errorType, httpCode, linkUserExperience, troubleshootingSteps) { 
        
        RecaptchaRequiredError.initialize(this, commonCauses, displayMessage, errorCode, errorType, httpCode, linkUserExperience, troubleshootingSteps);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, commonCauses, displayMessage, errorCode, errorType, httpCode, linkUserExperience, troubleshootingSteps) { 
        obj['common_causes'] = commonCauses;
        obj['display_message'] = displayMessage;
        obj['error_code'] = errorCode;
        obj['error_type'] = errorType;
        obj['http_code'] = httpCode;
        obj['link_user_experience'] = linkUserExperience;
        obj['troubleshooting_steps'] = troubleshootingSteps;
    }

    /**
     * Constructs a <code>RecaptchaRequiredError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecaptchaRequiredError} obj Optional instance to populate.
     * @return {module:model/RecaptchaRequiredError} The populated <code>RecaptchaRequiredError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecaptchaRequiredError();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('common_causes')) {
                obj['common_causes'] = ApiClient.convertToType(data['common_causes'], 'String');
            }
            if (data.hasOwnProperty('display_message')) {
                obj['display_message'] = ApiClient.convertToType(data['display_message'], 'String');
            }
            if (data.hasOwnProperty('error_code')) {
                obj['error_code'] = ApiClient.convertToType(data['error_code'], 'String');
            }
            if (data.hasOwnProperty('error_type')) {
                obj['error_type'] = ApiClient.convertToType(data['error_type'], 'String');
            }
            if (data.hasOwnProperty('http_code')) {
                obj['http_code'] = ApiClient.convertToType(data['http_code'], 'String');
            }
            if (data.hasOwnProperty('link_user_experience')) {
                obj['link_user_experience'] = ApiClient.convertToType(data['link_user_experience'], 'String');
            }
            if (data.hasOwnProperty('troubleshooting_steps')) {
                obj['troubleshooting_steps'] = ApiClient.convertToType(data['troubleshooting_steps'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecaptchaRequiredError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecaptchaRequiredError</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RecaptchaRequiredError.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['common_causes'] && !(typeof data['common_causes'] === 'string' || data['common_causes'] instanceof String)) {
            throw new Error("Expected the field `common_causes` to be a primitive type in the JSON string but got " + data['common_causes']);
        }
        // ensure the json data is a string
        if (data['display_message'] && !(typeof data['display_message'] === 'string' || data['display_message'] instanceof String)) {
            throw new Error("Expected the field `display_message` to be a primitive type in the JSON string but got " + data['display_message']);
        }
        // ensure the json data is a string
        if (data['error_code'] && !(typeof data['error_code'] === 'string' || data['error_code'] instanceof String)) {
            throw new Error("Expected the field `error_code` to be a primitive type in the JSON string but got " + data['error_code']);
        }
        // ensure the json data is a string
        if (data['error_type'] && !(typeof data['error_type'] === 'string' || data['error_type'] instanceof String)) {
            throw new Error("Expected the field `error_type` to be a primitive type in the JSON string but got " + data['error_type']);
        }
        // ensure the json data is a string
        if (data['http_code'] && !(typeof data['http_code'] === 'string' || data['http_code'] instanceof String)) {
            throw new Error("Expected the field `http_code` to be a primitive type in the JSON string but got " + data['http_code']);
        }
        // ensure the json data is a string
        if (data['link_user_experience'] && !(typeof data['link_user_experience'] === 'string' || data['link_user_experience'] instanceof String)) {
            throw new Error("Expected the field `link_user_experience` to be a primitive type in the JSON string but got " + data['link_user_experience']);
        }
        // ensure the json data is a string
        if (data['troubleshooting_steps'] && !(typeof data['troubleshooting_steps'] === 'string' || data['troubleshooting_steps'] instanceof String)) {
            throw new Error("Expected the field `troubleshooting_steps` to be a primitive type in the JSON string but got " + data['troubleshooting_steps']);
        }

        return true;
    }


}

RecaptchaRequiredError.RequiredProperties = ["common_causes", "display_message", "error_code", "error_type", "http_code", "link_user_experience", "troubleshooting_steps"];

/**
 * Plaid's fraud system detects abusive traffic and considers a variety of parameters throughout Item creation requests. When a request is considered risky or possibly fraudulent, Link presents a reCAPTCHA for the user to solve.
 * @member {String} common_causes
 */
RecaptchaRequiredError.prototype['common_causes'] = undefined;

/**
 * @member {String} display_message
 */
RecaptchaRequiredError.prototype['display_message'] = undefined;

/**
 * RECAPTCHA_REQUIRED
 * @member {String} error_code
 */
RecaptchaRequiredError.prototype['error_code'] = undefined;

/**
 * RECAPTCHA_ERROR
 * @member {String} error_type
 */
RecaptchaRequiredError.prototype['error_type'] = undefined;

/**
 * 400
 * @member {String} http_code
 */
RecaptchaRequiredError.prototype['http_code'] = undefined;

/**
 * Your user will be prompted to solve a Google reCAPTCHA challenge in the Link Recaptcha pane. If they solve the challenge successfully, the user's request is resubmitted and they are directed to the next Item creation step.
 * @member {String} link_user_experience
 */
RecaptchaRequiredError.prototype['link_user_experience'] = undefined;

/**
 * Link will automatically guide your user through reCAPTCHA verification. As a general rule, we recommend instrumenting basic fraud monitoring to detect and protect your website from spam and abuse.  If your user cannot verify their session, please submit a Support ticket with the following identifiers: `link_session_id` or `request_id`
 * @member {String} troubleshooting_steps
 */
RecaptchaRequiredError.prototype['troubleshooting_steps'] = undefined;






export default RecaptchaRequiredError;

