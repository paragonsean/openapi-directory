/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MFA from './MFA';
import OverrideAccounts from './OverrideAccounts';

/**
 * The UserCustomPassword model module.
 * @module model/UserCustomPassword
 * @version 2020-09-14_1.345.1
 */
class UserCustomPassword {
    /**
     * Constructs a new <code>UserCustomPassword</code>.
     * Custom test accounts are configured with a JSON configuration object formulated according to the schema below. All top level fields are optional. Sending an empty object as a configuration will result in an account configured with random balances and transaction history.
     * @alias module:model/UserCustomPassword
     * @extends Object
     * @param forceError {String} An error code to force on Item creation. Possible values are:  `\"INSTITUTION_NOT_RESPONDING\"` `\"INSTITUTION_NO_LONGER_SUPPORTED\"` `\"INVALID_CREDENTIALS\"` `\"INVALID_MFA\"` `\"ITEM_LOCKED\"` `\"ITEM_LOGIN_REQUIRED\"` `\"ITEM_NOT_SUPPORTED\"` `\"INVALID_LINK_TOKEN\"` `\"MFA_NOT_SUPPORTED\"` `\"NO_ACCOUNTS\"` `\"PLAID_ERROR\"` `\"USER_INPUT_TIMEOUT\"` `\"USER_SETUP_REQUIRED\"`
     * @param mfa {module:model/MFA} 
     * @param overrideAccounts {Array.<module:model/OverrideAccounts>} An array of account overrides to configure the accounts for the Item. By default, if no override is specified, transactions and account data will be randomly generated based on the account type and subtype, and other products will have fixed or empty data.
     * @param recaptcha {String} You may trigger a reCAPTCHA in Plaid Link in the Sandbox environment by using the recaptcha field. Possible values are `good` or `bad`. A value of `good` will result in successful Item creation and `bad` will result in a `RECAPTCHA_BAD` error to simulate a failed reCAPTCHA. Both values require the reCAPTCHA to be manually solved within Plaid Link.
     * @param seed {String} A seed, in the form of a string, that will be used to randomly generate account and transaction data, if this data is not specified using the `override_accounts` argument. If no seed is specified, the randomly generated data will be different each time.  Note that transactions data is generated relative to the Item's creation date. Different Items created on different dates with the same seed for transactions data will have different dates for the transactions. The number of days between each transaction and the Item creation will remain constant. For example, an Item created on December 15 might show a transaction on December 14. An Item created on December 20, using the same seed, would show that same transaction occurring on December 19.
     */
    constructor(forceError, mfa, overrideAccounts, recaptcha, seed) { 
        
        UserCustomPassword.initialize(this, forceError, mfa, overrideAccounts, recaptcha, seed);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, forceError, mfa, overrideAccounts, recaptcha, seed) { 
        obj['force_error'] = forceError;
        obj['mfa'] = mfa;
        obj['override_accounts'] = overrideAccounts;
        obj['recaptcha'] = recaptcha;
        obj['seed'] = seed;
    }

    /**
     * Constructs a <code>UserCustomPassword</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserCustomPassword} obj Optional instance to populate.
     * @return {module:model/UserCustomPassword} The populated <code>UserCustomPassword</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserCustomPassword();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('force_error')) {
                obj['force_error'] = ApiClient.convertToType(data['force_error'], 'String');
            }
            if (data.hasOwnProperty('mfa')) {
                obj['mfa'] = MFA.constructFromObject(data['mfa']);
            }
            if (data.hasOwnProperty('override_accounts')) {
                obj['override_accounts'] = ApiClient.convertToType(data['override_accounts'], [OverrideAccounts]);
            }
            if (data.hasOwnProperty('recaptcha')) {
                obj['recaptcha'] = ApiClient.convertToType(data['recaptcha'], 'String');
            }
            if (data.hasOwnProperty('seed')) {
                obj['seed'] = ApiClient.convertToType(data['seed'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserCustomPassword</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserCustomPassword</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserCustomPassword.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['force_error'] && !(typeof data['force_error'] === 'string' || data['force_error'] instanceof String)) {
            throw new Error("Expected the field `force_error` to be a primitive type in the JSON string but got " + data['force_error']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['override_accounts'])) {
            throw new Error("Expected the field `override_accounts` to be an array in the JSON data but got " + data['override_accounts']);
        }
        // ensure the json data is a string
        if (data['recaptcha'] && !(typeof data['recaptcha'] === 'string' || data['recaptcha'] instanceof String)) {
            throw new Error("Expected the field `recaptcha` to be a primitive type in the JSON string but got " + data['recaptcha']);
        }
        // ensure the json data is a string
        if (data['seed'] && !(typeof data['seed'] === 'string' || data['seed'] instanceof String)) {
            throw new Error("Expected the field `seed` to be a primitive type in the JSON string but got " + data['seed']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

UserCustomPassword.RequiredProperties = ["force_error", "mfa", "override_accounts", "recaptcha", "seed"];

/**
 * An error code to force on Item creation. Possible values are:  `\"INSTITUTION_NOT_RESPONDING\"` `\"INSTITUTION_NO_LONGER_SUPPORTED\"` `\"INVALID_CREDENTIALS\"` `\"INVALID_MFA\"` `\"ITEM_LOCKED\"` `\"ITEM_LOGIN_REQUIRED\"` `\"ITEM_NOT_SUPPORTED\"` `\"INVALID_LINK_TOKEN\"` `\"MFA_NOT_SUPPORTED\"` `\"NO_ACCOUNTS\"` `\"PLAID_ERROR\"` `\"USER_INPUT_TIMEOUT\"` `\"USER_SETUP_REQUIRED\"`
 * @member {String} force_error
 */
UserCustomPassword.prototype['force_error'] = undefined;

/**
 * @member {module:model/MFA} mfa
 */
UserCustomPassword.prototype['mfa'] = undefined;

/**
 * An array of account overrides to configure the accounts for the Item. By default, if no override is specified, transactions and account data will be randomly generated based on the account type and subtype, and other products will have fixed or empty data.
 * @member {Array.<module:model/OverrideAccounts>} override_accounts
 */
UserCustomPassword.prototype['override_accounts'] = undefined;

/**
 * You may trigger a reCAPTCHA in Plaid Link in the Sandbox environment by using the recaptcha field. Possible values are `good` or `bad`. A value of `good` will result in successful Item creation and `bad` will result in a `RECAPTCHA_BAD` error to simulate a failed reCAPTCHA. Both values require the reCAPTCHA to be manually solved within Plaid Link.
 * @member {String} recaptcha
 */
UserCustomPassword.prototype['recaptcha'] = undefined;

/**
 * A seed, in the form of a string, that will be used to randomly generate account and transaction data, if this data is not specified using the `override_accounts` argument. If no seed is specified, the randomly generated data will be different each time.  Note that transactions data is generated relative to the Item's creation date. Different Items created on different dates with the same seed for transactions data will have different dates for the transactions. The number of days between each transaction and the Item creation will remain constant. For example, an Item created on December 15 might show a transaction on December 14. An Item created on December 20, using the same seed, would show that same transaction occurring on December 19.
 * @member {String} seed
 */
UserCustomPassword.prototype['seed'] = undefined;

/**
 * The version of the password schema to use, possible values are 1 or 2. The default value is 2. You should only specify 1 if you know it is necessary for your test suite.
 * @member {String} version
 */
UserCustomPassword.prototype['version'] = undefined;






export default UserCustomPassword;

