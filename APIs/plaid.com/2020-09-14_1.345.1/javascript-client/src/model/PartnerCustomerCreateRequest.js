/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PartnerEndCustomerAddress from './PartnerEndCustomerAddress';
import PartnerEndCustomerAssetsUnderManagement from './PartnerEndCustomerAssetsUnderManagement';
import PartnerEndCustomerBillingContact from './PartnerEndCustomerBillingContact';
import PartnerEndCustomerCustomerSupportInfo from './PartnerEndCustomerCustomerSupportInfo';
import PartnerEndCustomerTechnicalContact from './PartnerEndCustomerTechnicalContact';
import Products from './Products';

/**
 * The PartnerCustomerCreateRequest model module.
 * @module model/PartnerCustomerCreateRequest
 * @version 2020-09-14_1.345.1
 */
class PartnerCustomerCreateRequest {
    /**
     * Constructs a new <code>PartnerCustomerCreateRequest</code>.
     * Request schema for &#x60;/partner/customer/create&#x60;.
     * @alias module:model/PartnerCustomerCreateRequest
     * @param address {module:model/PartnerEndCustomerAddress} 
     * @param applicationName {String} The name of the end customer's application. This will be shown to end users when they go through the Plaid Link flow.
     * @param companyName {String} The company name of the end customer being created. This will be used to display the end customer in the Plaid Dashboard. It will not be shown to end users.
     * @param isBankAddendumCompleted {Boolean} Denotes whether the partner has forwarded the Plaid bank addendum to the end customer.
     * @param isDiligenceAttested {Boolean} Denotes whether or not the partner has completed attestation of diligence for the end customer to be created.
     * @param legalEntityName {String} The end customer's legal name. This will be shared with financial institutions as part of the OAuth registration process. It will not be shown to end users.
     * @param products {Array.<module:model/Products>} The products to be enabled for the end customer.
     * @param website {String} The end customer's website.
     */
    constructor(address, applicationName, companyName, isBankAddendumCompleted, isDiligenceAttested, legalEntityName, products, website) { 
        
        PartnerCustomerCreateRequest.initialize(this, address, applicationName, companyName, isBankAddendumCompleted, isDiligenceAttested, legalEntityName, products, website);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, applicationName, companyName, isBankAddendumCompleted, isDiligenceAttested, legalEntityName, products, website) { 
        obj['address'] = address;
        obj['application_name'] = applicationName;
        obj['company_name'] = companyName;
        obj['is_bank_addendum_completed'] = isBankAddendumCompleted;
        obj['is_diligence_attested'] = isDiligenceAttested;
        obj['legal_entity_name'] = legalEntityName;
        obj['products'] = products;
        obj['website'] = website;
    }

    /**
     * Constructs a <code>PartnerCustomerCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PartnerCustomerCreateRequest} obj Optional instance to populate.
     * @return {module:model/PartnerCustomerCreateRequest} The populated <code>PartnerCustomerCreateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PartnerCustomerCreateRequest();

            if (data.hasOwnProperty('address')) {
                obj['address'] = PartnerEndCustomerAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('application_name')) {
                obj['application_name'] = ApiClient.convertToType(data['application_name'], 'String');
            }
            if (data.hasOwnProperty('assets_under_management')) {
                obj['assets_under_management'] = PartnerEndCustomerAssetsUnderManagement.constructFromObject(data['assets_under_management']);
            }
            if (data.hasOwnProperty('billing_contact')) {
                obj['billing_contact'] = PartnerEndCustomerBillingContact.constructFromObject(data['billing_contact']);
            }
            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('company_name')) {
                obj['company_name'] = ApiClient.convertToType(data['company_name'], 'String');
            }
            if (data.hasOwnProperty('create_link_customization')) {
                obj['create_link_customization'] = ApiClient.convertToType(data['create_link_customization'], 'Boolean');
            }
            if (data.hasOwnProperty('customer_support_info')) {
                obj['customer_support_info'] = PartnerEndCustomerCustomerSupportInfo.constructFromObject(data['customer_support_info']);
            }
            if (data.hasOwnProperty('is_bank_addendum_completed')) {
                obj['is_bank_addendum_completed'] = ApiClient.convertToType(data['is_bank_addendum_completed'], 'Boolean');
            }
            if (data.hasOwnProperty('is_diligence_attested')) {
                obj['is_diligence_attested'] = ApiClient.convertToType(data['is_diligence_attested'], 'Boolean');
            }
            if (data.hasOwnProperty('legal_entity_name')) {
                obj['legal_entity_name'] = ApiClient.convertToType(data['legal_entity_name'], 'String');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [Products]);
            }
            if (data.hasOwnProperty('redirect_uris')) {
                obj['redirect_uris'] = ApiClient.convertToType(data['redirect_uris'], ['String']);
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('technical_contact')) {
                obj['technical_contact'] = PartnerEndCustomerTechnicalContact.constructFromObject(data['technical_contact']);
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PartnerCustomerCreateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PartnerCustomerCreateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PartnerCustomerCreateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['application_name'] && !(typeof data['application_name'] === 'string' || data['application_name'] instanceof String)) {
            throw new Error("Expected the field `application_name` to be a primitive type in the JSON string but got " + data['application_name']);
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['company_name'] && !(typeof data['company_name'] === 'string' || data['company_name'] instanceof String)) {
            throw new Error("Expected the field `company_name` to be a primitive type in the JSON string but got " + data['company_name']);
        }
        // ensure the json data is a string
        if (data['legal_entity_name'] && !(typeof data['legal_entity_name'] === 'string' || data['legal_entity_name'] instanceof String)) {
            throw new Error("Expected the field `legal_entity_name` to be a primitive type in the JSON string but got " + data['legal_entity_name']);
        }
        // ensure the json data is a string
        if (data['logo'] && !(typeof data['logo'] === 'string' || data['logo'] instanceof String)) {
            throw new Error("Expected the field `logo` to be a primitive type in the JSON string but got " + data['logo']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['products'])) {
            throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['redirect_uris'])) {
            throw new Error("Expected the field `redirect_uris` to be an array in the JSON data but got " + data['redirect_uris']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}

PartnerCustomerCreateRequest.RequiredProperties = ["address", "application_name", "company_name", "is_bank_addendum_completed", "is_diligence_attested", "legal_entity_name", "products", "website"];

/**
 * @member {module:model/PartnerEndCustomerAddress} address
 */
PartnerCustomerCreateRequest.prototype['address'] = undefined;

/**
 * The name of the end customer's application. This will be shown to end users when they go through the Plaid Link flow.
 * @member {String} application_name
 */
PartnerCustomerCreateRequest.prototype['application_name'] = undefined;

/**
 * @member {module:model/PartnerEndCustomerAssetsUnderManagement} assets_under_management
 */
PartnerCustomerCreateRequest.prototype['assets_under_management'] = undefined;

/**
 * @member {module:model/PartnerEndCustomerBillingContact} billing_contact
 */
PartnerCustomerCreateRequest.prototype['billing_contact'] = undefined;

/**
 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
 * @member {String} client_id
 */
PartnerCustomerCreateRequest.prototype['client_id'] = undefined;

/**
 * The company name of the end customer being created. This will be used to display the end customer in the Plaid Dashboard. It will not be shown to end users.
 * @member {String} company_name
 */
PartnerCustomerCreateRequest.prototype['company_name'] = undefined;

/**
 * If `true`, the end customer's default Link customization will be set to match the partner's. You can always change the end customer's Link customization in the Plaid Dashboard. See the [Link Customization docs](https://plaid.com/docs/link/customization/) for more information.
 * @member {Boolean} create_link_customization
 */
PartnerCustomerCreateRequest.prototype['create_link_customization'] = undefined;

/**
 * @member {module:model/PartnerEndCustomerCustomerSupportInfo} customer_support_info
 */
PartnerCustomerCreateRequest.prototype['customer_support_info'] = undefined;

/**
 * Denotes whether the partner has forwarded the Plaid bank addendum to the end customer.
 * @member {Boolean} is_bank_addendum_completed
 */
PartnerCustomerCreateRequest.prototype['is_bank_addendum_completed'] = undefined;

/**
 * Denotes whether or not the partner has completed attestation of diligence for the end customer to be created.
 * @member {Boolean} is_diligence_attested
 */
PartnerCustomerCreateRequest.prototype['is_diligence_attested'] = undefined;

/**
 * The end customer's legal name. This will be shared with financial institutions as part of the OAuth registration process. It will not be shown to end users.
 * @member {String} legal_entity_name
 */
PartnerCustomerCreateRequest.prototype['legal_entity_name'] = undefined;

/**
 * Base64-encoded representation of the end customer's logo. Must be a PNG of size 1024x1024 under 4MB. The logo will be shared with financial institutions and shown to the end user during Link flows. A logo is required if `create_link_customization` is `true`. If `create_link_customization` is `false` and the logo is omitted, a stock logo will be used.
 * @member {String} logo
 */
PartnerCustomerCreateRequest.prototype['logo'] = undefined;

/**
 * The products to be enabled for the end customer.
 * @member {Array.<module:model/Products>} products
 */
PartnerCustomerCreateRequest.prototype['products'] = undefined;

/**
 * A list of URIs indicating the destination(s) where a user can be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. URIs should not contain any query parameters. When used in Production or Development, URIs must use https. To specify any subdomain, use `*` as a wildcard character, e.g. `https://_*.example.com/oauth.html`. To modify redirect URIs for an end customer after creating them, go to the end customer's [API page](https://dashboard.plaid.com/team/api) in the Dashboard.
 * @member {Array.<String>} redirect_uris
 */
PartnerCustomerCreateRequest.prototype['redirect_uris'] = undefined;

/**
 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
 * @member {String} secret
 */
PartnerCustomerCreateRequest.prototype['secret'] = undefined;

/**
 * @member {module:model/PartnerEndCustomerTechnicalContact} technical_contact
 */
PartnerCustomerCreateRequest.prototype['technical_contact'] = undefined;

/**
 * The end customer's website.
 * @member {String} website
 */
PartnerCustomerCreateRequest.prototype['website'] = undefined;






export default PartnerCustomerCreateRequest;

