/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExternalPaymentInitiationConsentOptions from './ExternalPaymentInitiationConsentOptions';
import PaymentInitiationConsentConstraints from './PaymentInitiationConsentConstraints';
import PaymentInitiationConsentScope from './PaymentInitiationConsentScope';

/**
 * The PaymentInitiationConsentCreateRequest model module.
 * @module model/PaymentInitiationConsentCreateRequest
 * @version 2020-09-14_1.345.1
 */
class PaymentInitiationConsentCreateRequest {
    /**
     * Constructs a new <code>PaymentInitiationConsentCreateRequest</code>.
     * PaymentInitiationConsentCreateRequest defines the request schema for &#x60;/payment_initiation/consent/create&#x60;
     * @alias module:model/PaymentInitiationConsentCreateRequest
     * @param constraints {module:model/PaymentInitiationConsentConstraints} 
     * @param recipientId {String} The ID of the recipient the payment consent is for. The created consent can be used to transfer funds to this recipient only.
     * @param reference {String} A reference for the payment consent. This must be an alphanumeric string with at most 18 characters and must not contain any special characters.
     * @param scopes {Array.<module:model/PaymentInitiationConsentScope>} An array of payment consent scopes.
     */
    constructor(constraints, recipientId, reference, scopes) { 
        
        PaymentInitiationConsentCreateRequest.initialize(this, constraints, recipientId, reference, scopes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, constraints, recipientId, reference, scopes) { 
        obj['constraints'] = constraints;
        obj['recipient_id'] = recipientId;
        obj['reference'] = reference;
        obj['scopes'] = scopes;
    }

    /**
     * Constructs a <code>PaymentInitiationConsentCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentInitiationConsentCreateRequest} obj Optional instance to populate.
     * @return {module:model/PaymentInitiationConsentCreateRequest} The populated <code>PaymentInitiationConsentCreateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentInitiationConsentCreateRequest();

            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = PaymentInitiationConsentConstraints.constructFromObject(data['constraints']);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ExternalPaymentInitiationConsentOptions.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('recipient_id')) {
                obj['recipient_id'] = ApiClient.convertToType(data['recipient_id'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], [PaymentInitiationConsentScope]);
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentInitiationConsentCreateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentInitiationConsentCreateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentInitiationConsentCreateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['recipient_id'] && !(typeof data['recipient_id'] === 'string' || data['recipient_id'] instanceof String)) {
            throw new Error("Expected the field `recipient_id` to be a primitive type in the JSON string but got " + data['recipient_id']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }

        return true;
    }


}

PaymentInitiationConsentCreateRequest.RequiredProperties = ["constraints", "recipient_id", "reference", "scopes"];

/**
 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
 * @member {String} client_id
 */
PaymentInitiationConsentCreateRequest.prototype['client_id'] = undefined;

/**
 * @member {module:model/PaymentInitiationConsentConstraints} constraints
 */
PaymentInitiationConsentCreateRequest.prototype['constraints'] = undefined;

/**
 * @member {module:model/ExternalPaymentInitiationConsentOptions} options
 */
PaymentInitiationConsentCreateRequest.prototype['options'] = undefined;

/**
 * The ID of the recipient the payment consent is for. The created consent can be used to transfer funds to this recipient only.
 * @member {String} recipient_id
 */
PaymentInitiationConsentCreateRequest.prototype['recipient_id'] = undefined;

/**
 * A reference for the payment consent. This must be an alphanumeric string with at most 18 characters and must not contain any special characters.
 * @member {String} reference
 */
PaymentInitiationConsentCreateRequest.prototype['reference'] = undefined;

/**
 * An array of payment consent scopes.
 * @member {Array.<module:model/PaymentInitiationConsentScope>} scopes
 */
PaymentInitiationConsentCreateRequest.prototype['scopes'] = undefined;

/**
 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
 * @member {String} secret
 */
PaymentInitiationConsentCreateRequest.prototype['secret'] = undefined;






export default PaymentInitiationConsentCreateRequest;

