/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ACHClass from './ACHClass';
import TransferAuthorizationGuaranteeDecision from './TransferAuthorizationGuaranteeDecision';
import TransferAuthorizationGuaranteeDecisionRationale from './TransferAuthorizationGuaranteeDecisionRationale';
import TransferExpectedSettlementScheduleItem from './TransferExpectedSettlementScheduleItem';
import TransferFailure from './TransferFailure';
import TransferNetwork from './TransferNetwork';
import TransferRefund from './TransferRefund';
import TransferStatus from './TransferStatus';
import TransferSweepStatus from './TransferSweepStatus';
import TransferType from './TransferType';
import TransferUserInResponse from './TransferUserInResponse';

/**
 * The Transfer model module.
 * @module model/Transfer
 * @version 2020-09-14_1.345.1
 */
class Transfer {
    /**
     * Constructs a new <code>Transfer</code>.
     * Represents a transfer within the Transfers API.
     * @alias module:model/Transfer
     * @extends Object
     * @param amount {String} The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @param cancellable {Boolean} When `true`, you can still cancel this transfer.
     * @param created {Date} The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
     * @param description {String} The description of the transfer.
     * @param expectedSettlementDate {Date} The expected date when the full amount of the transfer settles at the consumers’ account, if the transfer is credit; or at the customer's business checking account, if the transfer is debit. Only set for ACH transfers and is null for non-ACH transfers. Only set for ACH transfers. This will be of the form YYYY-MM-DD.
     * @param failureReason {module:model/TransferFailure} 
     * @param fundingAccountId {String} The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
     * @param guaranteeDecision {module:model/TransferAuthorizationGuaranteeDecision} 
     * @param guaranteeDecisionRationale {module:model/TransferAuthorizationGuaranteeDecisionRationale} 
     * @param id {String} Plaid’s unique identifier for a transfer.
     * @param isoCurrencyCode {String} The currency of the transfer amount, e.g. \"USD\"
     * @param metadata {Object.<String, String>} The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters 
     * @param network {module:model/TransferNetwork} 
     * @param originationAccountId {String} Plaid’s unique identifier for the origination account that was used for this transfer.
     * @param originatorClientId {String} The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a third-party sender (TPS).
     * @param recurringTransferId {String} The id of the recurring transfer if this transfer belongs to a recurring transfer.
     * @param refunds {Array.<module:model/TransferRefund>} A list of refunds associated with this transfer.
     * @param standardReturnWindow {Date} The date 3 business days from settlement date indicating the following ACH returns can no longer happen: R01, R02, R03, R29. This will be of the form YYYY-MM-DD.
     * @param status {module:model/TransferStatus} 
     * @param type {module:model/TransferType} 
     * @param unauthorizedReturnWindow {Date} The date 61 business days from settlement date indicating the following ACH returns can no longer happen: R05, R07, R10, R11, R51, R33, R37, R38, R51, R52, R53. This will be of the form YYYY-MM-DD.
     * @param user {module:model/TransferUserInResponse} 
     */
    constructor(amount, cancellable, created, description, expectedSettlementDate, failureReason, fundingAccountId, guaranteeDecision, guaranteeDecisionRationale, id, isoCurrencyCode, metadata, network, originationAccountId, originatorClientId, recurringTransferId, refunds, standardReturnWindow, status, type, unauthorizedReturnWindow, user) { 
        
        Transfer.initialize(this, amount, cancellable, created, description, expectedSettlementDate, failureReason, fundingAccountId, guaranteeDecision, guaranteeDecisionRationale, id, isoCurrencyCode, metadata, network, originationAccountId, originatorClientId, recurringTransferId, refunds, standardReturnWindow, status, type, unauthorizedReturnWindow, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, cancellable, created, description, expectedSettlementDate, failureReason, fundingAccountId, guaranteeDecision, guaranteeDecisionRationale, id, isoCurrencyCode, metadata, network, originationAccountId, originatorClientId, recurringTransferId, refunds, standardReturnWindow, status, type, unauthorizedReturnWindow, user) { 
        obj['amount'] = amount;
        obj['cancellable'] = cancellable;
        obj['created'] = created;
        obj['description'] = description;
        obj['expected_settlement_date'] = expectedSettlementDate;
        obj['failure_reason'] = failureReason;
        obj['funding_account_id'] = fundingAccountId;
        obj['guarantee_decision'] = guaranteeDecision;
        obj['guarantee_decision_rationale'] = guaranteeDecisionRationale;
        obj['id'] = id;
        obj['iso_currency_code'] = isoCurrencyCode;
        obj['metadata'] = metadata;
        obj['network'] = network;
        obj['origination_account_id'] = originationAccountId;
        obj['originator_client_id'] = originatorClientId;
        obj['recurring_transfer_id'] = recurringTransferId;
        obj['refunds'] = refunds;
        obj['standard_return_window'] = standardReturnWindow;
        obj['status'] = status;
        obj['type'] = type;
        obj['unauthorized_return_window'] = unauthorizedReturnWindow;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>Transfer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transfer} obj Optional instance to populate.
     * @return {module:model/Transfer} The populated <code>Transfer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transfer();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('ach_class')) {
                obj['ach_class'] = ACHClass.constructFromObject(data['ach_class']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('cancellable')) {
                obj['cancellable'] = ApiClient.convertToType(data['cancellable'], 'Boolean');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expected_settlement_date')) {
                obj['expected_settlement_date'] = ApiClient.convertToType(data['expected_settlement_date'], 'Date');
            }
            if (data.hasOwnProperty('expected_settlement_schedule')) {
                obj['expected_settlement_schedule'] = ApiClient.convertToType(data['expected_settlement_schedule'], [TransferExpectedSettlementScheduleItem]);
            }
            if (data.hasOwnProperty('failure_reason')) {
                obj['failure_reason'] = TransferFailure.constructFromObject(data['failure_reason']);
            }
            if (data.hasOwnProperty('funding_account_id')) {
                obj['funding_account_id'] = ApiClient.convertToType(data['funding_account_id'], 'String');
            }
            if (data.hasOwnProperty('guarantee_decision')) {
                obj['guarantee_decision'] = TransferAuthorizationGuaranteeDecision.constructFromObject(data['guarantee_decision']);
            }
            if (data.hasOwnProperty('guarantee_decision_rationale')) {
                obj['guarantee_decision_rationale'] = TransferAuthorizationGuaranteeDecisionRationale.constructFromObject(data['guarantee_decision_rationale']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('iso_currency_code')) {
                obj['iso_currency_code'] = ApiClient.convertToType(data['iso_currency_code'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = TransferNetwork.constructFromObject(data['network']);
            }
            if (data.hasOwnProperty('origination_account_id')) {
                obj['origination_account_id'] = ApiClient.convertToType(data['origination_account_id'], 'String');
            }
            if (data.hasOwnProperty('originator_client_id')) {
                obj['originator_client_id'] = ApiClient.convertToType(data['originator_client_id'], 'String');
            }
            if (data.hasOwnProperty('recurring_transfer_id')) {
                obj['recurring_transfer_id'] = ApiClient.convertToType(data['recurring_transfer_id'], 'String');
            }
            if (data.hasOwnProperty('refunds')) {
                obj['refunds'] = ApiClient.convertToType(data['refunds'], [TransferRefund]);
            }
            if (data.hasOwnProperty('settled_amount')) {
                obj['settled_amount'] = ApiClient.convertToType(data['settled_amount'], 'String');
            }
            if (data.hasOwnProperty('standard_return_window')) {
                obj['standard_return_window'] = ApiClient.convertToType(data['standard_return_window'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TransferStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('sweep_status')) {
                obj['sweep_status'] = TransferSweepStatus.constructFromObject(data['sweep_status']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = TransferType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('unauthorized_return_window')) {
                obj['unauthorized_return_window'] = ApiClient.convertToType(data['unauthorized_return_window'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = TransferUserInResponse.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transfer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transfer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Transfer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['expected_settlement_schedule'])) {
            throw new Error("Expected the field `expected_settlement_schedule` to be an array in the JSON data but got " + data['expected_settlement_schedule']);
        }
        // ensure the json data is a string
        if (data['funding_account_id'] && !(typeof data['funding_account_id'] === 'string' || data['funding_account_id'] instanceof String)) {
            throw new Error("Expected the field `funding_account_id` to be a primitive type in the JSON string but got " + data['funding_account_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['iso_currency_code'] && !(typeof data['iso_currency_code'] === 'string' || data['iso_currency_code'] instanceof String)) {
            throw new Error("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got " + data['iso_currency_code']);
        }
        // ensure the json data is a string
        if (data['origination_account_id'] && !(typeof data['origination_account_id'] === 'string' || data['origination_account_id'] instanceof String)) {
            throw new Error("Expected the field `origination_account_id` to be a primitive type in the JSON string but got " + data['origination_account_id']);
        }
        // ensure the json data is a string
        if (data['originator_client_id'] && !(typeof data['originator_client_id'] === 'string' || data['originator_client_id'] instanceof String)) {
            throw new Error("Expected the field `originator_client_id` to be a primitive type in the JSON string but got " + data['originator_client_id']);
        }
        // ensure the json data is a string
        if (data['recurring_transfer_id'] && !(typeof data['recurring_transfer_id'] === 'string' || data['recurring_transfer_id'] instanceof String)) {
            throw new Error("Expected the field `recurring_transfer_id` to be a primitive type in the JSON string but got " + data['recurring_transfer_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['refunds'])) {
            throw new Error("Expected the field `refunds` to be an array in the JSON data but got " + data['refunds']);
        }
        // ensure the json data is a string
        if (data['settled_amount'] && !(typeof data['settled_amount'] === 'string' || data['settled_amount'] instanceof String)) {
            throw new Error("Expected the field `settled_amount` to be a primitive type in the JSON string but got " + data['settled_amount']);
        }

        return true;
    }


}

Transfer.RequiredProperties = ["amount", "cancellable", "created", "description", "expected_settlement_date", "failure_reason", "funding_account_id", "guarantee_decision", "guarantee_decision_rationale", "id", "iso_currency_code", "metadata", "network", "origination_account_id", "originator_client_id", "recurring_transfer_id", "refunds", "standard_return_window", "status", "type", "unauthorized_return_window", "user"];

/**
 * The Plaid `account_id` corresponding to the end-user account that will be debited or credited.
 * @member {String} account_id
 */
Transfer.prototype['account_id'] = undefined;

/**
 * @member {module:model/ACHClass} ach_class
 */
Transfer.prototype['ach_class'] = undefined;

/**
 * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
 * @member {String} amount
 */
Transfer.prototype['amount'] = undefined;

/**
 * When `true`, you can still cancel this transfer.
 * @member {Boolean} cancellable
 */
Transfer.prototype['cancellable'] = undefined;

/**
 * The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
 * @member {Date} created
 */
Transfer.prototype['created'] = undefined;

/**
 * The description of the transfer.
 * @member {String} description
 */
Transfer.prototype['description'] = undefined;

/**
 * The expected date when the full amount of the transfer settles at the consumers’ account, if the transfer is credit; or at the customer's business checking account, if the transfer is debit. Only set for ACH transfers and is null for non-ACH transfers. Only set for ACH transfers. This will be of the form YYYY-MM-DD.
 * @member {Date} expected_settlement_date
 */
Transfer.prototype['expected_settlement_date'] = undefined;

/**
 * The expected settlement schedule of this transfer, if posted. Only applies to ACH debit transfers.
 * @member {Array.<module:model/TransferExpectedSettlementScheduleItem>} expected_settlement_schedule
 */
Transfer.prototype['expected_settlement_schedule'] = undefined;

/**
 * @member {module:model/TransferFailure} failure_reason
 */
Transfer.prototype['failure_reason'] = undefined;

/**
 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
 * @member {String} funding_account_id
 */
Transfer.prototype['funding_account_id'] = undefined;

/**
 * @member {module:model/TransferAuthorizationGuaranteeDecision} guarantee_decision
 */
Transfer.prototype['guarantee_decision'] = undefined;

/**
 * @member {module:model/TransferAuthorizationGuaranteeDecisionRationale} guarantee_decision_rationale
 */
Transfer.prototype['guarantee_decision_rationale'] = undefined;

/**
 * Plaid’s unique identifier for a transfer.
 * @member {String} id
 */
Transfer.prototype['id'] = undefined;

/**
 * The currency of the transfer amount, e.g. \"USD\"
 * @member {String} iso_currency_code
 */
Transfer.prototype['iso_currency_code'] = undefined;

/**
 * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: The JSON values must be Strings (no nested JSON objects allowed) Only ASCII characters may be used Maximum of 50 key/value pairs Maximum key length of 40 characters Maximum value length of 500 characters 
 * @member {Object.<String, String>} metadata
 */
Transfer.prototype['metadata'] = undefined;

/**
 * @member {module:model/TransferNetwork} network
 */
Transfer.prototype['network'] = undefined;

/**
 * Plaid’s unique identifier for the origination account that was used for this transfer.
 * @member {String} origination_account_id
 */
Transfer.prototype['origination_account_id'] = undefined;

/**
 * The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a third-party sender (TPS).
 * @member {String} originator_client_id
 */
Transfer.prototype['originator_client_id'] = undefined;

/**
 * The id of the recurring transfer if this transfer belongs to a recurring transfer.
 * @member {String} recurring_transfer_id
 */
Transfer.prototype['recurring_transfer_id'] = undefined;

/**
 * A list of refunds associated with this transfer.
 * @member {Array.<module:model/TransferRefund>} refunds
 */
Transfer.prototype['refunds'] = undefined;

/**
 * The accumulated amount that have been swept to date. This number does not reflect `return_swept` amount if the transfer is returned. Only applies to ACH debit transfers.
 * @member {String} settled_amount
 */
Transfer.prototype['settled_amount'] = undefined;

/**
 * The date 3 business days from settlement date indicating the following ACH returns can no longer happen: R01, R02, R03, R29. This will be of the form YYYY-MM-DD.
 * @member {Date} standard_return_window
 */
Transfer.prototype['standard_return_window'] = undefined;

/**
 * @member {module:model/TransferStatus} status
 */
Transfer.prototype['status'] = undefined;

/**
 * @member {module:model/TransferSweepStatus} sweep_status
 */
Transfer.prototype['sweep_status'] = undefined;

/**
 * @member {module:model/TransferType} type
 */
Transfer.prototype['type'] = undefined;

/**
 * The date 61 business days from settlement date indicating the following ACH returns can no longer happen: R05, R07, R10, R11, R51, R33, R37, R38, R51, R52, R53. This will be of the form YYYY-MM-DD.
 * @member {Date} unauthorized_return_window
 */
Transfer.prototype['unauthorized_return_window'] = undefined;

/**
 * @member {module:model/TransferUserInResponse} user
 */
Transfer.prototype['user'] = undefined;






export default Transfer;

