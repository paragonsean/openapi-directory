/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CountryCode from './CountryCode';
import LinkTokenAccountFilters from './LinkTokenAccountFilters';
import LinkTokenCreateInstitutionData from './LinkTokenCreateInstitutionData';
import LinkTokenCreateRequestAuth from './LinkTokenCreateRequestAuth';
import LinkTokenCreateRequestDepositSwitch from './LinkTokenCreateRequestDepositSwitch';
import LinkTokenCreateRequestEmployment from './LinkTokenCreateRequestEmployment';
import LinkTokenCreateRequestIdentityVerification from './LinkTokenCreateRequestIdentityVerification';
import LinkTokenCreateRequestIncomeVerification from './LinkTokenCreateRequestIncomeVerification';
import LinkTokenCreateRequestPaymentInitiation from './LinkTokenCreateRequestPaymentInitiation';
import LinkTokenCreateRequestTransfer from './LinkTokenCreateRequestTransfer';
import LinkTokenCreateRequestUpdate from './LinkTokenCreateRequestUpdate';
import LinkTokenCreateRequestUser from './LinkTokenCreateRequestUser';
import LinkTokenEUConfig from './LinkTokenEUConfig';
import LinkTokenInvestments from './LinkTokenInvestments';
import Products from './Products';

/**
 * The LinkTokenCreateRequest model module.
 * @module model/LinkTokenCreateRequest
 * @version 2020-09-14_1.345.1
 */
class LinkTokenCreateRequest {
    /**
     * Constructs a new <code>LinkTokenCreateRequest</code>.
     * LinkTokenCreateRequest defines the request schema for &#x60;/link/token/create&#x60;
     * @alias module:model/LinkTokenCreateRequest
     * @param clientName {String} The name of your application, as it should be displayed in Link. Maximum length of 30 characters. If a value longer than 30 characters is provided, Link will display \"This Application\" instead.
     * @param countryCodes {Array.<module:model/CountryCode>} Specify an array of Plaid-supported country codes using the ISO-3166-1 alpha-2 country code standard. Institutions from all listed countries will be shown. For a complete mapping of supported products by country, see https://plaid.com/global/.  If Link is launched with multiple country codes, only products that you are enabled for in all countries will be used by Link. Note that while all countries are enabled by default in Sandbox and Development, in Production only US and Canada are enabled by default. Access to European institutions requires additional compliance steps. To request access to European institutions in the Production environment, [file a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access) via the Plaid dashboard. If you initialize with a European country code, your users will see the European consent panel during the Link flow.  If using a Link customization, make sure the country codes in the customization match those specified in `country_codes`, or the customization may not be applied.  If using the Auth features Instant Match, Same-day Micro-deposits, or Automated Micro-deposits, `country_codes` must be set to `['US']`.
     * @param language {String} The language that Link should be displayed in. When initializing with Identity Verification, this field is not used; for more details, see [Identity Verification supported languages](https://www.plaid.com/docs/identity-verification/#supported-languages).  Supported languages are: - Danish (`'da'`) - Dutch (`'nl'`) - English (`'en'`) - Estonian (`'et'`) - French (`'fr'`) - German (`'de'`) - Italian (`'it'`) - Latvian (`'lv'`) - Lithuanian (`'lt'`) - Norwegian (`'no'`) - Polish (`'pl'`) - Portuguese (`'pt'`) - Romanian (`'ro'`) - Spanish (`'es'`) - Swedish (`'se'`)  When using a Link customization, the language configured here must match the setting in the customization, or the customization will not be applied.
     * @param user {module:model/LinkTokenCreateRequestUser} 
     */
    constructor(clientName, countryCodes, language, user) { 
        
        LinkTokenCreateRequest.initialize(this, clientName, countryCodes, language, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clientName, countryCodes, language, user) { 
        obj['client_name'] = clientName;
        obj['country_codes'] = countryCodes;
        obj['language'] = language;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>LinkTokenCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinkTokenCreateRequest} obj Optional instance to populate.
     * @return {module:model/LinkTokenCreateRequest} The populated <code>LinkTokenCreateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinkTokenCreateRequest();

            if (data.hasOwnProperty('access_token')) {
                obj['access_token'] = ApiClient.convertToType(data['access_token'], 'String');
            }
            if (data.hasOwnProperty('account_filters')) {
                obj['account_filters'] = LinkTokenAccountFilters.constructFromObject(data['account_filters']);
            }
            if (data.hasOwnProperty('additional_consented_products')) {
                obj['additional_consented_products'] = ApiClient.convertToType(data['additional_consented_products'], [Products]);
            }
            if (data.hasOwnProperty('android_package_name')) {
                obj['android_package_name'] = ApiClient.convertToType(data['android_package_name'], 'String');
            }
            if (data.hasOwnProperty('auth')) {
                obj['auth'] = LinkTokenCreateRequestAuth.constructFromObject(data['auth']);
            }
            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('client_name')) {
                obj['client_name'] = ApiClient.convertToType(data['client_name'], 'String');
            }
            if (data.hasOwnProperty('country_codes')) {
                obj['country_codes'] = ApiClient.convertToType(data['country_codes'], [CountryCode]);
            }
            if (data.hasOwnProperty('deposit_switch')) {
                obj['deposit_switch'] = LinkTokenCreateRequestDepositSwitch.constructFromObject(data['deposit_switch']);
            }
            if (data.hasOwnProperty('employment')) {
                obj['employment'] = LinkTokenCreateRequestEmployment.constructFromObject(data['employment']);
            }
            if (data.hasOwnProperty('eu_config')) {
                obj['eu_config'] = LinkTokenEUConfig.constructFromObject(data['eu_config']);
            }
            if (data.hasOwnProperty('identity_verification')) {
                obj['identity_verification'] = LinkTokenCreateRequestIdentityVerification.constructFromObject(data['identity_verification']);
            }
            if (data.hasOwnProperty('income_verification')) {
                obj['income_verification'] = LinkTokenCreateRequestIncomeVerification.constructFromObject(data['income_verification']);
            }
            if (data.hasOwnProperty('institution_data')) {
                obj['institution_data'] = LinkTokenCreateInstitutionData.constructFromObject(data['institution_data']);
            }
            if (data.hasOwnProperty('institution_id')) {
                obj['institution_id'] = ApiClient.convertToType(data['institution_id'], 'String');
            }
            if (data.hasOwnProperty('investments')) {
                obj['investments'] = LinkTokenInvestments.constructFromObject(data['investments']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('link_customization_name')) {
                obj['link_customization_name'] = ApiClient.convertToType(data['link_customization_name'], 'String');
            }
            if (data.hasOwnProperty('payment_initiation')) {
                obj['payment_initiation'] = LinkTokenCreateRequestPaymentInitiation.constructFromObject(data['payment_initiation']);
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [Products]);
            }
            if (data.hasOwnProperty('redirect_uri')) {
                obj['redirect_uri'] = ApiClient.convertToType(data['redirect_uri'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('transfer')) {
                obj['transfer'] = LinkTokenCreateRequestTransfer.constructFromObject(data['transfer']);
            }
            if (data.hasOwnProperty('update')) {
                obj['update'] = LinkTokenCreateRequestUpdate.constructFromObject(data['update']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = LinkTokenCreateRequestUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_token')) {
                obj['user_token'] = ApiClient.convertToType(data['user_token'], 'String');
            }
            if (data.hasOwnProperty('webhook')) {
                obj['webhook'] = ApiClient.convertToType(data['webhook'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinkTokenCreateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinkTokenCreateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LinkTokenCreateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['access_token'] && !(typeof data['access_token'] === 'string' || data['access_token'] instanceof String)) {
            throw new Error("Expected the field `access_token` to be a primitive type in the JSON string but got " + data['access_token']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['additional_consented_products'])) {
            throw new Error("Expected the field `additional_consented_products` to be an array in the JSON data but got " + data['additional_consented_products']);
        }
        // ensure the json data is a string
        if (data['android_package_name'] && !(typeof data['android_package_name'] === 'string' || data['android_package_name'] instanceof String)) {
            throw new Error("Expected the field `android_package_name` to be a primitive type in the JSON string but got " + data['android_package_name']);
        }
        // validate the optional field `auth`
        if (data['auth']) { // data not null
          LinkTokenCreateRequestAuth.validateJSON(data['auth']);
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['client_name'] && !(typeof data['client_name'] === 'string' || data['client_name'] instanceof String)) {
            throw new Error("Expected the field `client_name` to be a primitive type in the JSON string but got " + data['client_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['country_codes'])) {
            throw new Error("Expected the field `country_codes` to be an array in the JSON data but got " + data['country_codes']);
        }
        // validate the optional field `deposit_switch`
        if (data['deposit_switch']) { // data not null
          LinkTokenCreateRequestDepositSwitch.validateJSON(data['deposit_switch']);
        }
        // validate the optional field `employment`
        if (data['employment']) { // data not null
          LinkTokenCreateRequestEmployment.validateJSON(data['employment']);
        }
        // validate the optional field `eu_config`
        if (data['eu_config']) { // data not null
          LinkTokenEUConfig.validateJSON(data['eu_config']);
        }
        // validate the optional field `identity_verification`
        if (data['identity_verification']) { // data not null
          LinkTokenCreateRequestIdentityVerification.validateJSON(data['identity_verification']);
        }
        // validate the optional field `income_verification`
        if (data['income_verification']) { // data not null
          LinkTokenCreateRequestIncomeVerification.validateJSON(data['income_verification']);
        }
        // validate the optional field `institution_data`
        if (data['institution_data']) { // data not null
          LinkTokenCreateInstitutionData.validateJSON(data['institution_data']);
        }
        // ensure the json data is a string
        if (data['institution_id'] && !(typeof data['institution_id'] === 'string' || data['institution_id'] instanceof String)) {
            throw new Error("Expected the field `institution_id` to be a primitive type in the JSON string but got " + data['institution_id']);
        }
        // validate the optional field `investments`
        if (data['investments']) { // data not null
          LinkTokenInvestments.validateJSON(data['investments']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['link_customization_name'] && !(typeof data['link_customization_name'] === 'string' || data['link_customization_name'] instanceof String)) {
            throw new Error("Expected the field `link_customization_name` to be a primitive type in the JSON string but got " + data['link_customization_name']);
        }
        // validate the optional field `payment_initiation`
        if (data['payment_initiation']) { // data not null
          LinkTokenCreateRequestPaymentInitiation.validateJSON(data['payment_initiation']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['products'])) {
            throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
        }
        // ensure the json data is a string
        if (data['redirect_uri'] && !(typeof data['redirect_uri'] === 'string' || data['redirect_uri'] instanceof String)) {
            throw new Error("Expected the field `redirect_uri` to be a primitive type in the JSON string but got " + data['redirect_uri']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // validate the optional field `transfer`
        if (data['transfer']) { // data not null
          LinkTokenCreateRequestTransfer.validateJSON(data['transfer']);
        }
        // validate the optional field `update`
        if (data['update']) { // data not null
          LinkTokenCreateRequestUpdate.validateJSON(data['update']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          LinkTokenCreateRequestUser.validateJSON(data['user']);
        }
        // ensure the json data is a string
        if (data['user_token'] && !(typeof data['user_token'] === 'string' || data['user_token'] instanceof String)) {
            throw new Error("Expected the field `user_token` to be a primitive type in the JSON string but got " + data['user_token']);
        }
        // ensure the json data is a string
        if (data['webhook'] && !(typeof data['webhook'] === 'string' || data['webhook'] instanceof String)) {
            throw new Error("Expected the field `webhook` to be a primitive type in the JSON string but got " + data['webhook']);
        }

        return true;
    }


}

LinkTokenCreateRequest.RequiredProperties = ["client_name", "country_codes", "language", "user"];

/**
 * The `access_token` associated with the Item to update or reference, used when updating, modifying, or accessing an existing `access_token`. Used when launching Link in update mode, when completing the Same-day (manual) Micro-deposit flow, or (optionally) when initializing Link for a returning user as part of the Transfer UI flow.
 * @member {String} access_token
 */
LinkTokenCreateRequest.prototype['access_token'] = undefined;

/**
 * @member {module:model/LinkTokenAccountFilters} account_filters
 */
LinkTokenCreateRequest.prototype['account_filters'] = undefined;

/**
 * (Beta) This field has no effect unless you are participating in the Product Scope Transparency beta program. List of additional Plaid product(s) you wish to collect consent for. These products will not be billed until you start using them by calling the relevant endpoints.  `balance` is *not* a valid value, the Balance product does not require explicit initialization and will automatically have consent collected.  Institutions that do not support these products will still be shown in Link
 * @member {Array.<module:model/Products>} additional_consented_products
 */
LinkTokenCreateRequest.prototype['additional_consented_products'] = undefined;

/**
 * The name of your app's Android package. Required if using the `link_token` to initialize Link on Android. Any package name specified here must also be added to the Allowed Android package names setting on the [developer dashboard](https://dashboard.plaid.com/team/api). When creating a `link_token` for initializing Link on other platforms, `android_package_name` must be left blank and `redirect_uri` should be used instead.
 * @member {String} android_package_name
 */
LinkTokenCreateRequest.prototype['android_package_name'] = undefined;

/**
 * @member {module:model/LinkTokenCreateRequestAuth} auth
 */
LinkTokenCreateRequest.prototype['auth'] = undefined;

/**
 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
 * @member {String} client_id
 */
LinkTokenCreateRequest.prototype['client_id'] = undefined;

/**
 * The name of your application, as it should be displayed in Link. Maximum length of 30 characters. If a value longer than 30 characters is provided, Link will display \"This Application\" instead.
 * @member {String} client_name
 */
LinkTokenCreateRequest.prototype['client_name'] = undefined;

/**
 * Specify an array of Plaid-supported country codes using the ISO-3166-1 alpha-2 country code standard. Institutions from all listed countries will be shown. For a complete mapping of supported products by country, see https://plaid.com/global/.  If Link is launched with multiple country codes, only products that you are enabled for in all countries will be used by Link. Note that while all countries are enabled by default in Sandbox and Development, in Production only US and Canada are enabled by default. Access to European institutions requires additional compliance steps. To request access to European institutions in the Production environment, [file a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access) via the Plaid dashboard. If you initialize with a European country code, your users will see the European consent panel during the Link flow.  If using a Link customization, make sure the country codes in the customization match those specified in `country_codes`, or the customization may not be applied.  If using the Auth features Instant Match, Same-day Micro-deposits, or Automated Micro-deposits, `country_codes` must be set to `['US']`.
 * @member {Array.<module:model/CountryCode>} country_codes
 */
LinkTokenCreateRequest.prototype['country_codes'] = undefined;

/**
 * @member {module:model/LinkTokenCreateRequestDepositSwitch} deposit_switch
 */
LinkTokenCreateRequest.prototype['deposit_switch'] = undefined;

/**
 * @member {module:model/LinkTokenCreateRequestEmployment} employment
 */
LinkTokenCreateRequest.prototype['employment'] = undefined;

/**
 * @member {module:model/LinkTokenEUConfig} eu_config
 */
LinkTokenCreateRequest.prototype['eu_config'] = undefined;

/**
 * @member {module:model/LinkTokenCreateRequestIdentityVerification} identity_verification
 */
LinkTokenCreateRequest.prototype['identity_verification'] = undefined;

/**
 * @member {module:model/LinkTokenCreateRequestIncomeVerification} income_verification
 */
LinkTokenCreateRequest.prototype['income_verification'] = undefined;

/**
 * @member {module:model/LinkTokenCreateInstitutionData} institution_data
 */
LinkTokenCreateRequest.prototype['institution_data'] = undefined;

/**
 * Used for certain Europe-only configurations, as well as certain legacy use cases in other regions.
 * @member {String} institution_id
 */
LinkTokenCreateRequest.prototype['institution_id'] = undefined;

/**
 * @member {module:model/LinkTokenInvestments} investments
 */
LinkTokenCreateRequest.prototype['investments'] = undefined;

/**
 * The language that Link should be displayed in. When initializing with Identity Verification, this field is not used; for more details, see [Identity Verification supported languages](https://www.plaid.com/docs/identity-verification/#supported-languages).  Supported languages are: - Danish (`'da'`) - Dutch (`'nl'`) - English (`'en'`) - Estonian (`'et'`) - French (`'fr'`) - German (`'de'`) - Italian (`'it'`) - Latvian (`'lv'`) - Lithuanian (`'lt'`) - Norwegian (`'no'`) - Polish (`'pl'`) - Portuguese (`'pt'`) - Romanian (`'ro'`) - Spanish (`'es'`) - Swedish (`'se'`)  When using a Link customization, the language configured here must match the setting in the customization, or the customization will not be applied.
 * @member {String} language
 */
LinkTokenCreateRequest.prototype['language'] = undefined;

/**
 * The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the `default` customization will be used. When using a Link customization, the language in the customization must match the language selected via the `language` parameter, and the countries in the customization should match the country codes selected via `country_codes`.
 * @member {String} link_customization_name
 */
LinkTokenCreateRequest.prototype['link_customization_name'] = undefined;

/**
 * @member {module:model/LinkTokenCreateRequestPaymentInitiation} payment_initiation
 */
LinkTokenCreateRequest.prototype['payment_initiation'] = undefined;

/**
 * List of Plaid product(s) you wish to use. If launching Link in update mode, should be omitted (unless you are using update mode to add Income or Assets to an Item); required otherwise.  `balance` is *not* a valid value, the Balance product does not require explicit initialization and will automatically be initialized when any other product is initialized.  The products specified here will determine which institutions will be available to your users in Link. Only institutions that support *all* requested products can be selected; a if a user attempts to select an institution that does not support a listed product, a \"Connectivity not supported\" error message will appear in Link. To maximize the number of institutions available, initialize Link with the minimal product set required for your use case. Additional products can be added after Link initialization by calling the relevant endpoints. For details and exceptions, see [Choosing when to initialize products](https://plaid.com/docs/link/initializing-products/).  Note that, unless you have opted to disable Instant Match support, institutions that support Instant Match will also be shown in Link if `auth` is specified as a product, even though these institutions do not contain `auth` in their product array.  In Production, you will be billed for each product that you specify when initializing Link. Note that a product cannot be removed from an Item once the Item has been initialized with that product. To stop billing on an Item for subscription-based products, such as Liabilities, Investments, and Transactions, remove the Item via `/item/remove`.
 * @member {Array.<module:model/Products>} products
 */
LinkTokenCreateRequest.prototype['products'] = undefined;

/**
 * A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. The `redirect_uri` should not contain any query parameters. When used in Production or Development, must be an https URI. To specify any subdomain, use `*` as a wildcard character, e.g. `https://_*.example.com/oauth.html`. Note that any redirect URI must also be added to the Allowed redirect URIs list in the [developer dashboard](https://dashboard.plaid.com/team/api). If initializing on Android, `android_package_name` must be specified instead and `redirect_uri` should be left blank.
 * @member {String} redirect_uri
 */
LinkTokenCreateRequest.prototype['redirect_uri'] = undefined;

/**
 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
 * @member {String} secret
 */
LinkTokenCreateRequest.prototype['secret'] = undefined;

/**
 * @member {module:model/LinkTokenCreateRequestTransfer} transfer
 */
LinkTokenCreateRequest.prototype['transfer'] = undefined;

/**
 * @member {module:model/LinkTokenCreateRequestUpdate} update
 */
LinkTokenCreateRequest.prototype['update'] = undefined;

/**
 * @member {module:model/LinkTokenCreateRequestUser} user
 */
LinkTokenCreateRequest.prototype['user'] = undefined;

/**
 * A user token generated using `/user/create`. Any Item created during the Link session will be associated with the user.
 * @member {String} user_token
 */
LinkTokenCreateRequest.prototype['user_token'] = undefined;

/**
 * The destination URL to which any webhooks should be sent. Note that webhooks for Payment Initiation (e-wallet transactions only), Transfer, Bank Transfer (including Auth micro-deposit notification webhooks) and Identity Verification are configured via the Dashboard instead.
 * @member {String} webhook
 */
LinkTokenCreateRequest.prototype['webhook'] = undefined;






export default LinkTokenCreateRequest;

