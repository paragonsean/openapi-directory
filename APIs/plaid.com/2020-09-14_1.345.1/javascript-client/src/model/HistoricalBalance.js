/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HistoricalBalance model module.
 * @module model/HistoricalBalance
 * @version 2020-09-14_1.345.1
 */
class HistoricalBalance {
    /**
     * Constructs a new <code>HistoricalBalance</code>.
     * An object representing a balance held by an account in the past
     * @alias module:model/HistoricalBalance
     * @extends Object
     * @param current {Number} The total amount of funds in the account, calculated from the `current` balance in the `balance` object by subtracting inflows and adding back outflows according to the posted date of each transaction.  If the account has any pending transactions, historical balance amounts on or after the date of the earliest pending transaction may differ if retrieved in subsequent Asset Reports as a result of those pending transactions posting.
     * @param date {Date} The date of the calculated historical balance, in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD)
     * @param isoCurrencyCode {String} The ISO-4217 currency code of the balance. Always `null` if `unofficial_currency_code` is non-`null`.
     * @param unofficialCurrencyCode {String} The unofficial currency code associated with the balance. Always `null` if `iso_currency_code` is non-`null`.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     */
    constructor(current, date, isoCurrencyCode, unofficialCurrencyCode) { 
        
        HistoricalBalance.initialize(this, current, date, isoCurrencyCode, unofficialCurrencyCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, current, date, isoCurrencyCode, unofficialCurrencyCode) { 
        obj['current'] = current;
        obj['date'] = date;
        obj['iso_currency_code'] = isoCurrencyCode;
        obj['unofficial_currency_code'] = unofficialCurrencyCode;
    }

    /**
     * Constructs a <code>HistoricalBalance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HistoricalBalance} obj Optional instance to populate.
     * @return {module:model/HistoricalBalance} The populated <code>HistoricalBalance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HistoricalBalance();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('current')) {
                obj['current'] = ApiClient.convertToType(data['current'], 'Number');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('iso_currency_code')) {
                obj['iso_currency_code'] = ApiClient.convertToType(data['iso_currency_code'], 'String');
            }
            if (data.hasOwnProperty('unofficial_currency_code')) {
                obj['unofficial_currency_code'] = ApiClient.convertToType(data['unofficial_currency_code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HistoricalBalance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HistoricalBalance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HistoricalBalance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['iso_currency_code'] && !(typeof data['iso_currency_code'] === 'string' || data['iso_currency_code'] instanceof String)) {
            throw new Error("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got " + data['iso_currency_code']);
        }
        // ensure the json data is a string
        if (data['unofficial_currency_code'] && !(typeof data['unofficial_currency_code'] === 'string' || data['unofficial_currency_code'] instanceof String)) {
            throw new Error("Expected the field `unofficial_currency_code` to be a primitive type in the JSON string but got " + data['unofficial_currency_code']);
        }

        return true;
    }


}

HistoricalBalance.RequiredProperties = ["current", "date", "iso_currency_code", "unofficial_currency_code"];

/**
 * The total amount of funds in the account, calculated from the `current` balance in the `balance` object by subtracting inflows and adding back outflows according to the posted date of each transaction.  If the account has any pending transactions, historical balance amounts on or after the date of the earliest pending transaction may differ if retrieved in subsequent Asset Reports as a result of those pending transactions posting.
 * @member {Number} current
 */
HistoricalBalance.prototype['current'] = undefined;

/**
 * The date of the calculated historical balance, in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD)
 * @member {Date} date
 */
HistoricalBalance.prototype['date'] = undefined;

/**
 * The ISO-4217 currency code of the balance. Always `null` if `unofficial_currency_code` is non-`null`.
 * @member {String} iso_currency_code
 */
HistoricalBalance.prototype['iso_currency_code'] = undefined;

/**
 * The unofficial currency code associated with the balance. Always `null` if `iso_currency_code` is non-`null`.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
 * @member {String} unofficial_currency_code
 */
HistoricalBalance.prototype['unofficial_currency_code'] = undefined;






export default HistoricalBalance;

