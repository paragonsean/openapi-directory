/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountBalance from './AccountBalance';
import AccountBase from './AccountBase';
import AccountSubtype from './AccountSubtype';
import AccountType from './AccountType';
import AssetReportTransaction from './AssetReportTransaction';
import HistoricalBalance from './HistoricalBalance';
import Owner from './Owner';
import OwnershipType from './OwnershipType';

/**
 * The AccountAssets model module.
 * @module model/AccountAssets
 * @version 2020-09-14_1.345.1
 */
class AccountAssets {
    /**
     * Constructs a new <code>AccountAssets</code>.
     * Asset information about an account
     * @alias module:model/AccountAssets
     * @implements module:model/AccountBase
     * @param accountId {String} Plaidâ€™s unique identifier for the account. This value will not change unless Plaid can't reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.  The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.  If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the `account_id` is case sensitive.
     * @param balances {module:model/AccountBalance} 
     * @param mask {String} The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
     * @param name {String} The name of the account, either assigned by the user or by the financial institution itself
     * @param officialName {String} The official name of the account as given by the financial institution
     * @param subtype {module:model/AccountSubtype} 
     * @param type {module:model/AccountType} 
     * @param daysAvailable {Number} The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Assets endpoints.
     * @param historicalBalances {Array.<module:model/HistoricalBalance>} Calculated data about the historical balances on the account. Only returned by Assets endpoints and currently not supported by `brokerage` or `investment` accounts.
     * @param owners {Array.<module:model/Owner>} Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29)
     * @param transactions {Array.<module:model/AssetReportTransaction>} Transaction history associated with the account. Only returned by Assets endpoints. Transaction history returned by endpoints such as `/transactions/get` or `/investments/transactions/get` will be returned in the top-level `transactions` field instead.
     */
    constructor(accountId, balances, mask, name, officialName, subtype, type, daysAvailable, historicalBalances, owners, transactions) { 
        AccountBase.initialize(this, accountId, balances, mask, name, officialName, subtype, type);
        AccountAssets.initialize(this, accountId, balances, mask, name, officialName, subtype, type, daysAvailable, historicalBalances, owners, transactions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, balances, mask, name, officialName, subtype, type, daysAvailable, historicalBalances, owners, transactions) { 
        obj['account_id'] = accountId;
        obj['balances'] = balances;
        obj['mask'] = mask;
        obj['name'] = name;
        obj['official_name'] = officialName;
        obj['subtype'] = subtype;
        obj['type'] = type;
        obj['days_available'] = daysAvailable;
        obj['historical_balances'] = historicalBalances;
        obj['owners'] = owners;
        obj['transactions'] = transactions;
    }

    /**
     * Constructs a <code>AccountAssets</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountAssets} obj Optional instance to populate.
     * @return {module:model/AccountAssets} The populated <code>AccountAssets</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountAssets();
            AccountBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('balances')) {
                obj['balances'] = AccountBalance.constructFromObject(data['balances']);
            }
            if (data.hasOwnProperty('mask')) {
                obj['mask'] = ApiClient.convertToType(data['mask'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('official_name')) {
                obj['official_name'] = ApiClient.convertToType(data['official_name'], 'String');
            }
            if (data.hasOwnProperty('persistent_account_id')) {
                obj['persistent_account_id'] = ApiClient.convertToType(data['persistent_account_id'], 'String');
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = AccountSubtype.constructFromObject(data['subtype']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = AccountType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('verification_status')) {
                obj['verification_status'] = ApiClient.convertToType(data['verification_status'], 'String');
            }
            if (data.hasOwnProperty('days_available')) {
                obj['days_available'] = ApiClient.convertToType(data['days_available'], 'Number');
            }
            if (data.hasOwnProperty('historical_balances')) {
                obj['historical_balances'] = ApiClient.convertToType(data['historical_balances'], [HistoricalBalance]);
            }
            if (data.hasOwnProperty('owners')) {
                obj['owners'] = ApiClient.convertToType(data['owners'], [Owner]);
            }
            if (data.hasOwnProperty('ownership_type')) {
                obj['ownership_type'] = OwnershipType.constructFromObject(data['ownership_type']);
            }
            if (data.hasOwnProperty('transactions')) {
                obj['transactions'] = ApiClient.convertToType(data['transactions'], [AssetReportTransaction]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountAssets</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountAssets</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountAssets.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['mask'] && !(typeof data['mask'] === 'string' || data['mask'] instanceof String)) {
            throw new Error("Expected the field `mask` to be a primitive type in the JSON string but got " + data['mask']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['official_name'] && !(typeof data['official_name'] === 'string' || data['official_name'] instanceof String)) {
            throw new Error("Expected the field `official_name` to be a primitive type in the JSON string but got " + data['official_name']);
        }
        // ensure the json data is a string
        if (data['persistent_account_id'] && !(typeof data['persistent_account_id'] === 'string' || data['persistent_account_id'] instanceof String)) {
            throw new Error("Expected the field `persistent_account_id` to be a primitive type in the JSON string but got " + data['persistent_account_id']);
        }
        // ensure the json data is a string
        if (data['verification_status'] && !(typeof data['verification_status'] === 'string' || data['verification_status'] instanceof String)) {
            throw new Error("Expected the field `verification_status` to be a primitive type in the JSON string but got " + data['verification_status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['historical_balances'])) {
            throw new Error("Expected the field `historical_balances` to be an array in the JSON data but got " + data['historical_balances']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['owners'])) {
            throw new Error("Expected the field `owners` to be an array in the JSON data but got " + data['owners']);
        }
        if (data['transactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transactions'])) {
                throw new Error("Expected the field `transactions` to be an array in the JSON data but got " + data['transactions']);
            }
            // validate the optional field `transactions` (array)
            for (const item of data['transactions']) {
                AssetReportTransaction.validateJSON(item);
            };
        }

        return true;
    }


}

AccountAssets.RequiredProperties = ["account_id", "balances", "mask", "name", "official_name", "subtype", "type", "days_available", "historical_balances", "owners", "transactions"];

/**
 * Plaidâ€™s unique identifier for the account. This value will not change unless Plaid can't reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.  The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.  If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the `account_id` is case sensitive.
 * @member {String} account_id
 */
AccountAssets.prototype['account_id'] = undefined;

/**
 * @member {module:model/AccountBalance} balances
 */
AccountAssets.prototype['balances'] = undefined;

/**
 * The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
 * @member {String} mask
 */
AccountAssets.prototype['mask'] = undefined;

/**
 * The name of the account, either assigned by the user or by the financial institution itself
 * @member {String} name
 */
AccountAssets.prototype['name'] = undefined;

/**
 * The official name of the account as given by the financial institution
 * @member {String} official_name
 */
AccountAssets.prototype['official_name'] = undefined;

/**
 * A unique and persistent identifier for accounts that can be used to trace multiple instances of the same account across different Items for depository accounts. This is currently an opt-in field and only supported for Chase Items.
 * @member {String} persistent_account_id
 */
AccountAssets.prototype['persistent_account_id'] = undefined;

/**
 * @member {module:model/AccountSubtype} subtype
 */
AccountAssets.prototype['subtype'] = undefined;

/**
 * @member {module:model/AccountType} type
 */
AccountAssets.prototype['type'] = undefined;

/**
 * The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.  `pending_automatic_verification`: The Item is pending automatic verification  `pending_manual_verification`: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.  `automatically_verified`: The Item has successfully been automatically verified   `manually_verified`: The Item has successfully been manually verified  `verification_expired`: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.  `verification_failed`: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.   
 * @member {module:model/AccountAssets.VerificationStatusEnum} verification_status
 */
AccountAssets.prototype['verification_status'] = undefined;

/**
 * The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Assets endpoints.
 * @member {Number} days_available
 */
AccountAssets.prototype['days_available'] = undefined;

/**
 * Calculated data about the historical balances on the account. Only returned by Assets endpoints and currently not supported by `brokerage` or `investment` accounts.
 * @member {Array.<module:model/HistoricalBalance>} historical_balances
 */
AccountAssets.prototype['historical_balances'] = undefined;

/**
 * Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29)
 * @member {Array.<module:model/Owner>} owners
 */
AccountAssets.prototype['owners'] = undefined;

/**
 * @member {module:model/OwnershipType} ownership_type
 */
AccountAssets.prototype['ownership_type'] = undefined;

/**
 * Transaction history associated with the account. Only returned by Assets endpoints. Transaction history returned by endpoints such as `/transactions/get` or `/investments/transactions/get` will be returned in the top-level `transactions` field instead.
 * @member {Array.<module:model/AssetReportTransaction>} transactions
 */
AccountAssets.prototype['transactions'] = undefined;


// Implement AccountBase interface:
/**
 * Plaidâ€™s unique identifier for the account. This value will not change unless Plaid can't reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.  The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.  If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the `account_id` is case sensitive.
 * @member {String} account_id
 */
AccountBase.prototype['account_id'] = undefined;
/**
 * @member {module:model/AccountBalance} balances
 */
AccountBase.prototype['balances'] = undefined;
/**
 * The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
 * @member {String} mask
 */
AccountBase.prototype['mask'] = undefined;
/**
 * The name of the account, either assigned by the user or by the financial institution itself
 * @member {String} name
 */
AccountBase.prototype['name'] = undefined;
/**
 * The official name of the account as given by the financial institution
 * @member {String} official_name
 */
AccountBase.prototype['official_name'] = undefined;
/**
 * A unique and persistent identifier for accounts that can be used to trace multiple instances of the same account across different Items for depository accounts. This is currently an opt-in field and only supported for Chase Items.
 * @member {String} persistent_account_id
 */
AccountBase.prototype['persistent_account_id'] = undefined;
/**
 * @member {module:model/AccountSubtype} subtype
 */
AccountBase.prototype['subtype'] = undefined;
/**
 * @member {module:model/AccountType} type
 */
AccountBase.prototype['type'] = undefined;
/**
 * The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.  `pending_automatic_verification`: The Item is pending automatic verification  `pending_manual_verification`: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.  `automatically_verified`: The Item has successfully been automatically verified   `manually_verified`: The Item has successfully been manually verified  `verification_expired`: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.  `verification_failed`: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.   
 * @member {module:model/AccountBase.VerificationStatusEnum} verification_status
 */
AccountBase.prototype['verification_status'] = undefined;



/**
 * Allowed values for the <code>verification_status</code> property.
 * @enum {String}
 * @readonly
 */
AccountAssets['VerificationStatusEnum'] = {

    /**
     * value: "automatically_verified"
     * @const
     */
    "automatically_verified": "automatically_verified",

    /**
     * value: "pending_automatic_verification"
     * @const
     */
    "pending_automatic_verification": "pending_automatic_verification",

    /**
     * value: "pending_manual_verification"
     * @const
     */
    "pending_manual_verification": "pending_manual_verification",

    /**
     * value: "manually_verified"
     * @const
     */
    "manually_verified": "manually_verified",

    /**
     * value: "verification_expired"
     * @const
     */
    "verification_expired": "verification_expired",

    /**
     * value: "verification_failed"
     * @const
     */
    "verification_failed": "verification_failed"
};



export default AccountAssets;

