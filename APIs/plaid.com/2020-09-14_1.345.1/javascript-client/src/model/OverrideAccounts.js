/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountSubtype from './AccountSubtype';
import HoldingsOverride from './HoldingsOverride';
import IncomeOverride from './IncomeOverride';
import InflowModel from './InflowModel';
import InvestmentsTransactionsOverride from './InvestmentsTransactionsOverride';
import LiabilityOverride from './LiabilityOverride';
import Meta from './Meta';
import Numbers from './Numbers';
import OverrideAccountType from './OverrideAccountType';
import OwnerOverride from './OwnerOverride';
import TransactionOverride from './TransactionOverride';

/**
 * The OverrideAccounts model module.
 * @module model/OverrideAccounts
 * @version 2020-09-14_1.345.1
 */
class OverrideAccounts {
    /**
     * Constructs a new <code>OverrideAccounts</code>.
     * Data to use to set values of test accounts. Some values cannot be specified in the schema and will instead will be calculated from other test data in order to achieve more consistent, realistic test data.
     * @alias module:model/OverrideAccounts
     * @extends Object
     * @param currency {String} ISO-4217 currency code. If provided, the account will be denominated in the given currency. Transactions will also be in this currency by default.
     * @param forceAvailableBalance {Number} If provided, the account will always have this amount as its  available balance, regardless of current balance or changes in transactions over time.
     * @param identity {module:model/OwnerOverride} 
     * @param inflowModel {module:model/InflowModel} 
     * @param liability {module:model/LiabilityOverride} 
     * @param meta {module:model/Meta} 
     * @param numbers {module:model/Numbers} 
     * @param startingBalance {Number} If provided, the account will start with this amount as the current balance. 
     * @param subtype {module:model/AccountSubtype} 
     * @param transactions {Array.<module:model/TransactionOverride>} Specify the list of transactions on the account.
     * @param type {module:model/OverrideAccountType} 
     */
    constructor(currency, forceAvailableBalance, identity, inflowModel, liability, meta, numbers, startingBalance, subtype, transactions, type) { 
        
        OverrideAccounts.initialize(this, currency, forceAvailableBalance, identity, inflowModel, liability, meta, numbers, startingBalance, subtype, transactions, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currency, forceAvailableBalance, identity, inflowModel, liability, meta, numbers, startingBalance, subtype, transactions, type) { 
        obj['currency'] = currency;
        obj['force_available_balance'] = forceAvailableBalance;
        obj['identity'] = identity;
        obj['inflow_model'] = inflowModel;
        obj['liability'] = liability;
        obj['meta'] = meta;
        obj['numbers'] = numbers;
        obj['starting_balance'] = startingBalance;
        obj['subtype'] = subtype;
        obj['transactions'] = transactions;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>OverrideAccounts</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OverrideAccounts} obj Optional instance to populate.
     * @return {module:model/OverrideAccounts} The populated <code>OverrideAccounts</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OverrideAccounts();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('force_available_balance')) {
                obj['force_available_balance'] = ApiClient.convertToType(data['force_available_balance'], 'Number');
            }
            if (data.hasOwnProperty('holdings')) {
                obj['holdings'] = HoldingsOverride.constructFromObject(data['holdings']);
            }
            if (data.hasOwnProperty('identity')) {
                obj['identity'] = OwnerOverride.constructFromObject(data['identity']);
            }
            if (data.hasOwnProperty('income')) {
                obj['income'] = IncomeOverride.constructFromObject(data['income']);
            }
            if (data.hasOwnProperty('inflow_model')) {
                obj['inflow_model'] = InflowModel.constructFromObject(data['inflow_model']);
            }
            if (data.hasOwnProperty('investment_transactions')) {
                obj['investment_transactions'] = InvestmentsTransactionsOverride.constructFromObject(data['investment_transactions']);
            }
            if (data.hasOwnProperty('liability')) {
                obj['liability'] = LiabilityOverride.constructFromObject(data['liability']);
            }
            if (data.hasOwnProperty('meta')) {
                obj['meta'] = Meta.constructFromObject(data['meta']);
            }
            if (data.hasOwnProperty('numbers')) {
                obj['numbers'] = Numbers.constructFromObject(data['numbers']);
            }
            if (data.hasOwnProperty('starting_balance')) {
                obj['starting_balance'] = ApiClient.convertToType(data['starting_balance'], 'Number');
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = AccountSubtype.constructFromObject(data['subtype']);
            }
            if (data.hasOwnProperty('transactions')) {
                obj['transactions'] = ApiClient.convertToType(data['transactions'], [TransactionOverride]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = OverrideAccountType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OverrideAccounts</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OverrideAccounts</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OverrideAccounts.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // validate the optional field `holdings`
        if (data['holdings']) { // data not null
          HoldingsOverride.validateJSON(data['holdings']);
        }
        // validate the optional field `income`
        if (data['income']) { // data not null
          IncomeOverride.validateJSON(data['income']);
        }
        // validate the optional field `investment_transactions`
        if (data['investment_transactions']) { // data not null
          InvestmentsTransactionsOverride.validateJSON(data['investment_transactions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['transactions'])) {
            throw new Error("Expected the field `transactions` to be an array in the JSON data but got " + data['transactions']);
        }

        return true;
    }


}

OverrideAccounts.RequiredProperties = ["currency", "force_available_balance", "identity", "inflow_model", "liability", "meta", "numbers", "starting_balance", "subtype", "transactions", "type"];

/**
 * ISO-4217 currency code. If provided, the account will be denominated in the given currency. Transactions will also be in this currency by default.
 * @member {String} currency
 */
OverrideAccounts.prototype['currency'] = undefined;

/**
 * If provided, the account will always have this amount as its  available balance, regardless of current balance or changes in transactions over time.
 * @member {Number} force_available_balance
 */
OverrideAccounts.prototype['force_available_balance'] = undefined;

/**
 * @member {module:model/HoldingsOverride} holdings
 */
OverrideAccounts.prototype['holdings'] = undefined;

/**
 * @member {module:model/OwnerOverride} identity
 */
OverrideAccounts.prototype['identity'] = undefined;

/**
 * @member {module:model/IncomeOverride} income
 */
OverrideAccounts.prototype['income'] = undefined;

/**
 * @member {module:model/InflowModel} inflow_model
 */
OverrideAccounts.prototype['inflow_model'] = undefined;

/**
 * @member {module:model/InvestmentsTransactionsOverride} investment_transactions
 */
OverrideAccounts.prototype['investment_transactions'] = undefined;

/**
 * @member {module:model/LiabilityOverride} liability
 */
OverrideAccounts.prototype['liability'] = undefined;

/**
 * @member {module:model/Meta} meta
 */
OverrideAccounts.prototype['meta'] = undefined;

/**
 * @member {module:model/Numbers} numbers
 */
OverrideAccounts.prototype['numbers'] = undefined;

/**
 * If provided, the account will start with this amount as the current balance. 
 * @member {Number} starting_balance
 */
OverrideAccounts.prototype['starting_balance'] = undefined;

/**
 * @member {module:model/AccountSubtype} subtype
 */
OverrideAccounts.prototype['subtype'] = undefined;

/**
 * Specify the list of transactions on the account.
 * @member {Array.<module:model/TransactionOverride>} transactions
 */
OverrideAccounts.prototype['transactions'] = undefined;

/**
 * @member {module:model/OverrideAccountType} type
 */
OverrideAccounts.prototype['type'] = undefined;






export default OverrideAccounts;

