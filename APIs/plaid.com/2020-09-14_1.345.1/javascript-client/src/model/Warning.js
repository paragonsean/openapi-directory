/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Cause from './Cause';

/**
 * The Warning model module.
 * @module model/Warning
 * @version 2020-09-14_1.345.1
 */
class Warning {
    /**
     * Constructs a new <code>Warning</code>.
     * It is possible for an Asset Report to be returned with missing account owner information. In such cases, the Asset Report will contain warning data in the response, indicating why obtaining the owner information failed.
     * @alias module:model/Warning
     * @extends Object
     * @param cause {module:model/Cause} 
     * @param warningCode {module:model/Warning.WarningCodeEnum} The warning code identifies a specific kind of warning. `OWNERS_UNAVAILABLE` indicates that account-owner information is not available.`INVESTMENTS_UNAVAILABLE` indicates that Investments specific information is not available. `TRANSACTIONS_UNAVAILABLE` indicates that transactions information associated with Credit and Depository accounts are unavailable.
     * @param warningType {String} The warning type, which will always be `ASSET_REPORT_WARNING`
     */
    constructor(cause, warningCode, warningType) { 
        
        Warning.initialize(this, cause, warningCode, warningType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cause, warningCode, warningType) { 
        obj['cause'] = cause;
        obj['warning_code'] = warningCode;
        obj['warning_type'] = warningType;
    }

    /**
     * Constructs a <code>Warning</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Warning} obj Optional instance to populate.
     * @return {module:model/Warning} The populated <code>Warning</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Warning();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('cause')) {
                obj['cause'] = Cause.constructFromObject(data['cause']);
            }
            if (data.hasOwnProperty('warning_code')) {
                obj['warning_code'] = ApiClient.convertToType(data['warning_code'], 'String');
            }
            if (data.hasOwnProperty('warning_type')) {
                obj['warning_type'] = ApiClient.convertToType(data['warning_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Warning</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Warning</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Warning.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `cause`
        if (data['cause']) { // data not null
          Cause.validateJSON(data['cause']);
        }
        // ensure the json data is a string
        if (data['warning_code'] && !(typeof data['warning_code'] === 'string' || data['warning_code'] instanceof String)) {
            throw new Error("Expected the field `warning_code` to be a primitive type in the JSON string but got " + data['warning_code']);
        }
        // ensure the json data is a string
        if (data['warning_type'] && !(typeof data['warning_type'] === 'string' || data['warning_type'] instanceof String)) {
            throw new Error("Expected the field `warning_type` to be a primitive type in the JSON string but got " + data['warning_type']);
        }

        return true;
    }


}

Warning.RequiredProperties = ["cause", "warning_code", "warning_type"];

/**
 * @member {module:model/Cause} cause
 */
Warning.prototype['cause'] = undefined;

/**
 * The warning code identifies a specific kind of warning. `OWNERS_UNAVAILABLE` indicates that account-owner information is not available.`INVESTMENTS_UNAVAILABLE` indicates that Investments specific information is not available. `TRANSACTIONS_UNAVAILABLE` indicates that transactions information associated with Credit and Depository accounts are unavailable.
 * @member {module:model/Warning.WarningCodeEnum} warning_code
 */
Warning.prototype['warning_code'] = undefined;

/**
 * The warning type, which will always be `ASSET_REPORT_WARNING`
 * @member {String} warning_type
 */
Warning.prototype['warning_type'] = undefined;





/**
 * Allowed values for the <code>warning_code</code> property.
 * @enum {String}
 * @readonly
 */
Warning['WarningCodeEnum'] = {

    /**
     * value: "OWNERS_UNAVAILABLE"
     * @const
     */
    "OWNERS_UNAVAILABLE": "OWNERS_UNAVAILABLE",

    /**
     * value: "INVESTMENTS_UNAVAILABLE"
     * @const
     */
    "INVESTMENTS_UNAVAILABLE": "INVESTMENTS_UNAVAILABLE",

    /**
     * value: "TRANSACTIONS_UNAVAILABLE"
     * @const
     */
    "TRANSACTIONS_UNAVAILABLE": "TRANSACTIONS_UNAVAILABLE"
};



export default Warning;

