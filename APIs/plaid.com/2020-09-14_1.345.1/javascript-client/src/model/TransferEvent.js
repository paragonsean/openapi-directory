/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransferEventType from './TransferEventType';
import TransferFailure from './TransferFailure';
import TransferType from './TransferType';

/**
 * The TransferEvent model module.
 * @module model/TransferEvent
 * @version 2020-09-14_1.345.1
 */
class TransferEvent {
    /**
     * Constructs a new <code>TransferEvent</code>.
     * Represents an event in the Transfers API.
     * @alias module:model/TransferEvent
     * @extends Object
     * @param accountId {String} The account ID associated with the transfer.
     * @param eventId {Number} Plaid’s unique identifier for this event. IDs are sequential unsigned 64-bit integers.
     * @param eventType {module:model/TransferEventType} 
     * @param failureReason {module:model/TransferFailure} 
     * @param fundingAccountId {String} The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
     * @param originationAccountId {String} The ID of the origination account that this balance belongs to.
     * @param originatorClientId {String} The Plaid client ID that is the originator of the transfer that this event applies to. Only present if the transfer was created on behalf of another client as a third-party sender (TPS).
     * @param refundId {String} Plaid’s unique identifier for a refund. A non-null value indicates the event is for the associated refund of the transfer.
     * @param sweepAmount {String} A signed amount of how much was `swept` or `return_swept` for this transfer (decimal string with two digits of precision e.g. \"-5.50\").
     * @param sweepId {String} Plaid’s unique identifier for a sweep.
     * @param timestamp {Date} The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.
     * @param transferAmount {String} The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @param transferId {String} Plaid’s unique identifier for a transfer.
     * @param transferType {module:model/TransferType} 
     */
    constructor(accountId, eventId, eventType, failureReason, fundingAccountId, originationAccountId, originatorClientId, refundId, sweepAmount, sweepId, timestamp, transferAmount, transferId, transferType) { 
        
        TransferEvent.initialize(this, accountId, eventId, eventType, failureReason, fundingAccountId, originationAccountId, originatorClientId, refundId, sweepAmount, sweepId, timestamp, transferAmount, transferId, transferType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, eventId, eventType, failureReason, fundingAccountId, originationAccountId, originatorClientId, refundId, sweepAmount, sweepId, timestamp, transferAmount, transferId, transferType) { 
        obj['account_id'] = accountId;
        obj['event_id'] = eventId;
        obj['event_type'] = eventType;
        obj['failure_reason'] = failureReason;
        obj['funding_account_id'] = fundingAccountId;
        obj['origination_account_id'] = originationAccountId;
        obj['originator_client_id'] = originatorClientId;
        obj['refund_id'] = refundId;
        obj['sweep_amount'] = sweepAmount;
        obj['sweep_id'] = sweepId;
        obj['timestamp'] = timestamp;
        obj['transfer_amount'] = transferAmount;
        obj['transfer_id'] = transferId;
        obj['transfer_type'] = transferType;
    }

    /**
     * Constructs a <code>TransferEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferEvent} obj Optional instance to populate.
     * @return {module:model/TransferEvent} The populated <code>TransferEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferEvent();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('event_id')) {
                obj['event_id'] = ApiClient.convertToType(data['event_id'], 'Number');
            }
            if (data.hasOwnProperty('event_type')) {
                obj['event_type'] = TransferEventType.constructFromObject(data['event_type']);
            }
            if (data.hasOwnProperty('failure_reason')) {
                obj['failure_reason'] = TransferFailure.constructFromObject(data['failure_reason']);
            }
            if (data.hasOwnProperty('funding_account_id')) {
                obj['funding_account_id'] = ApiClient.convertToType(data['funding_account_id'], 'String');
            }
            if (data.hasOwnProperty('origination_account_id')) {
                obj['origination_account_id'] = ApiClient.convertToType(data['origination_account_id'], 'String');
            }
            if (data.hasOwnProperty('originator_client_id')) {
                obj['originator_client_id'] = ApiClient.convertToType(data['originator_client_id'], 'String');
            }
            if (data.hasOwnProperty('refund_id')) {
                obj['refund_id'] = ApiClient.convertToType(data['refund_id'], 'String');
            }
            if (data.hasOwnProperty('sweep_amount')) {
                obj['sweep_amount'] = ApiClient.convertToType(data['sweep_amount'], 'String');
            }
            if (data.hasOwnProperty('sweep_id')) {
                obj['sweep_id'] = ApiClient.convertToType(data['sweep_id'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('transfer_amount')) {
                obj['transfer_amount'] = ApiClient.convertToType(data['transfer_amount'], 'String');
            }
            if (data.hasOwnProperty('transfer_id')) {
                obj['transfer_id'] = ApiClient.convertToType(data['transfer_id'], 'String');
            }
            if (data.hasOwnProperty('transfer_type')) {
                obj['transfer_type'] = TransferType.constructFromObject(data['transfer_type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransferEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['funding_account_id'] && !(typeof data['funding_account_id'] === 'string' || data['funding_account_id'] instanceof String)) {
            throw new Error("Expected the field `funding_account_id` to be a primitive type in the JSON string but got " + data['funding_account_id']);
        }
        // ensure the json data is a string
        if (data['origination_account_id'] && !(typeof data['origination_account_id'] === 'string' || data['origination_account_id'] instanceof String)) {
            throw new Error("Expected the field `origination_account_id` to be a primitive type in the JSON string but got " + data['origination_account_id']);
        }
        // ensure the json data is a string
        if (data['originator_client_id'] && !(typeof data['originator_client_id'] === 'string' || data['originator_client_id'] instanceof String)) {
            throw new Error("Expected the field `originator_client_id` to be a primitive type in the JSON string but got " + data['originator_client_id']);
        }
        // ensure the json data is a string
        if (data['refund_id'] && !(typeof data['refund_id'] === 'string' || data['refund_id'] instanceof String)) {
            throw new Error("Expected the field `refund_id` to be a primitive type in the JSON string but got " + data['refund_id']);
        }
        // ensure the json data is a string
        if (data['sweep_amount'] && !(typeof data['sweep_amount'] === 'string' || data['sweep_amount'] instanceof String)) {
            throw new Error("Expected the field `sweep_amount` to be a primitive type in the JSON string but got " + data['sweep_amount']);
        }
        // ensure the json data is a string
        if (data['sweep_id'] && !(typeof data['sweep_id'] === 'string' || data['sweep_id'] instanceof String)) {
            throw new Error("Expected the field `sweep_id` to be a primitive type in the JSON string but got " + data['sweep_id']);
        }
        // ensure the json data is a string
        if (data['transfer_amount'] && !(typeof data['transfer_amount'] === 'string' || data['transfer_amount'] instanceof String)) {
            throw new Error("Expected the field `transfer_amount` to be a primitive type in the JSON string but got " + data['transfer_amount']);
        }
        // ensure the json data is a string
        if (data['transfer_id'] && !(typeof data['transfer_id'] === 'string' || data['transfer_id'] instanceof String)) {
            throw new Error("Expected the field `transfer_id` to be a primitive type in the JSON string but got " + data['transfer_id']);
        }

        return true;
    }


}

TransferEvent.RequiredProperties = ["account_id", "event_id", "event_type", "failure_reason", "funding_account_id", "origination_account_id", "originator_client_id", "refund_id", "sweep_amount", "sweep_id", "timestamp", "transfer_amount", "transfer_id", "transfer_type"];

/**
 * The account ID associated with the transfer.
 * @member {String} account_id
 */
TransferEvent.prototype['account_id'] = undefined;

/**
 * Plaid’s unique identifier for this event. IDs are sequential unsigned 64-bit integers.
 * @member {Number} event_id
 */
TransferEvent.prototype['event_id'] = undefined;

/**
 * @member {module:model/TransferEventType} event_type
 */
TransferEvent.prototype['event_type'] = undefined;

/**
 * @member {module:model/TransferFailure} failure_reason
 */
TransferEvent.prototype['failure_reason'] = undefined;

/**
 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited.
 * @member {String} funding_account_id
 */
TransferEvent.prototype['funding_account_id'] = undefined;

/**
 * The ID of the origination account that this balance belongs to.
 * @member {String} origination_account_id
 */
TransferEvent.prototype['origination_account_id'] = undefined;

/**
 * The Plaid client ID that is the originator of the transfer that this event applies to. Only present if the transfer was created on behalf of another client as a third-party sender (TPS).
 * @member {String} originator_client_id
 */
TransferEvent.prototype['originator_client_id'] = undefined;

/**
 * Plaid’s unique identifier for a refund. A non-null value indicates the event is for the associated refund of the transfer.
 * @member {String} refund_id
 */
TransferEvent.prototype['refund_id'] = undefined;

/**
 * A signed amount of how much was `swept` or `return_swept` for this transfer (decimal string with two digits of precision e.g. \"-5.50\").
 * @member {String} sweep_amount
 */
TransferEvent.prototype['sweep_amount'] = undefined;

/**
 * Plaid’s unique identifier for a sweep.
 * @member {String} sweep_id
 */
TransferEvent.prototype['sweep_id'] = undefined;

/**
 * The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.
 * @member {Date} timestamp
 */
TransferEvent.prototype['timestamp'] = undefined;

/**
 * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
 * @member {String} transfer_amount
 */
TransferEvent.prototype['transfer_amount'] = undefined;

/**
 * Plaid’s unique identifier for a transfer.
 * @member {String} transfer_id
 */
TransferEvent.prototype['transfer_id'] = undefined;

/**
 * @member {module:model/TransferType} transfer_type
 */
TransferEvent.prototype['transfer_type'] = undefined;






export default TransferEvent;

