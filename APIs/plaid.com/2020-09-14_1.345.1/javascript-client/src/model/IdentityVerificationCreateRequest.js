/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IdentityVerificationRequestUser from './IdentityVerificationRequestUser';

/**
 * The IdentityVerificationCreateRequest model module.
 * @module model/IdentityVerificationCreateRequest
 * @version 2020-09-14_1.345.1
 */
class IdentityVerificationCreateRequest {
    /**
     * Constructs a new <code>IdentityVerificationCreateRequest</code>.
     * Request schema for &#39;/identity_verification/create&#39;
     * @alias module:model/IdentityVerificationCreateRequest
     * @param gaveConsent {Boolean} A flag specifying whether the end user has already agreed to a privacy policy specifying that their data will be shared with Plaid for verification purposes.  If `gave_consent` is set to `true`, the `accept_tos` step will be marked as `skipped` and the end user's session will start at the next step requirement.
     * @param isShareable {Boolean} A flag specifying whether you would like Plaid to expose a shareable URL for the verification being created.
     * @param templateId {String} ID of the associated Identity Verification template.
     * @param user {module:model/IdentityVerificationRequestUser} 
     */
    constructor(gaveConsent, isShareable, templateId, user) { 
        
        IdentityVerificationCreateRequest.initialize(this, gaveConsent, isShareable, templateId, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, gaveConsent, isShareable, templateId, user) { 
        obj['gave_consent'] = gaveConsent || false;
        obj['is_shareable'] = isShareable;
        obj['template_id'] = templateId;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>IdentityVerificationCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IdentityVerificationCreateRequest} obj Optional instance to populate.
     * @return {module:model/IdentityVerificationCreateRequest} The populated <code>IdentityVerificationCreateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IdentityVerificationCreateRequest();

            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('gave_consent')) {
                obj['gave_consent'] = ApiClient.convertToType(data['gave_consent'], 'Boolean');
            }
            if (data.hasOwnProperty('is_idempotent')) {
                obj['is_idempotent'] = ApiClient.convertToType(data['is_idempotent'], 'Boolean');
            }
            if (data.hasOwnProperty('is_shareable')) {
                obj['is_shareable'] = ApiClient.convertToType(data['is_shareable'], 'Boolean');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('template_id')) {
                obj['template_id'] = ApiClient.convertToType(data['template_id'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = IdentityVerificationRequestUser.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IdentityVerificationCreateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdentityVerificationCreateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IdentityVerificationCreateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // ensure the json data is a string
        if (data['template_id'] && !(typeof data['template_id'] === 'string' || data['template_id'] instanceof String)) {
            throw new Error("Expected the field `template_id` to be a primitive type in the JSON string but got " + data['template_id']);
        }

        return true;
    }


}

IdentityVerificationCreateRequest.RequiredProperties = ["gave_consent", "is_shareable", "template_id", "user"];

/**
 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
 * @member {String} client_id
 */
IdentityVerificationCreateRequest.prototype['client_id'] = undefined;

/**
 * A flag specifying whether the end user has already agreed to a privacy policy specifying that their data will be shared with Plaid for verification purposes.  If `gave_consent` is set to `true`, the `accept_tos` step will be marked as `skipped` and the end user's session will start at the next step requirement.
 * @member {Boolean} gave_consent
 * @default false
 */
IdentityVerificationCreateRequest.prototype['gave_consent'] = false;

/**
 * An optional flag specifying how you would like Plaid to handle attempts to create an Identity Verification when an Identity Verification already exists for the provided `client_user_id` and `template_id`. If idempotency is enabled, Plaid will return the existing Identity Verification. If idempotency is disabled, Plaid will reject the request with a `400 Bad Request` status code if an Identity Verification already exists for the supplied `client_user_id` and `template_id`.
 * @member {Boolean} is_idempotent
 */
IdentityVerificationCreateRequest.prototype['is_idempotent'] = undefined;

/**
 * A flag specifying whether you would like Plaid to expose a shareable URL for the verification being created.
 * @member {Boolean} is_shareable
 */
IdentityVerificationCreateRequest.prototype['is_shareable'] = undefined;

/**
 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
 * @member {String} secret
 */
IdentityVerificationCreateRequest.prototype['secret'] = undefined;

/**
 * ID of the associated Identity Verification template.
 * @member {String} template_id
 */
IdentityVerificationCreateRequest.prototype['template_id'] = undefined;

/**
 * @member {module:model/IdentityVerificationRequestUser} user
 */
IdentityVerificationCreateRequest.prototype['user'] = undefined;






export default IdentityVerificationCreateRequest;

