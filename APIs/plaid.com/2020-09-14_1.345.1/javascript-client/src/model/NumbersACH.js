/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NumbersACH model module.
 * @module model/NumbersACH
 * @version 2020-09-14_1.345.1
 */
class NumbersACH {
    /**
     * Constructs a new <code>NumbersACH</code>.
     * Identifying information for transferring money to or from a US account via ACH or wire transfer.
     * @alias module:model/NumbersACH
     * @extends Object
     * @param account {String} The ACH account number for the account.  Note that when using OAuth with Chase Bank (`ins_56`), Chase will issue \"tokenized\" routing and account numbers, which are not the user's actual account and routing numbers. These tokenized numbers should work identically to normal account and routing numbers. The digits returned in the `mask` field will continue to reflect the actual account number, rather than the tokenized account number; for this reason, when displaying account numbers to the user to help them identify their account in your UI, always use the `mask` rather than truncating the `account` number. If a user revokes their permissions to your app, the tokenized numbers will continue to work for ACH deposits, but not withdrawals.
     * @param accountId {String} The Plaid account ID associated with the account numbers
     * @param routing {String} The ACH routing number for the account. If the institution is `ins_56`, this may be a tokenized routing number. For more information, see the description of the `account` field.
     * @param wireRouting {String} The wire transfer routing number for the account, if available
     */
    constructor(account, accountId, routing, wireRouting) { 
        
        NumbersACH.initialize(this, account, accountId, routing, wireRouting);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, account, accountId, routing, wireRouting) { 
        obj['account'] = account;
        obj['account_id'] = accountId;
        obj['routing'] = routing;
        obj['wire_routing'] = wireRouting;
    }

    /**
     * Constructs a <code>NumbersACH</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NumbersACH} obj Optional instance to populate.
     * @return {module:model/NumbersACH} The populated <code>NumbersACH</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NumbersACH();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('can_transfer_in')) {
                obj['can_transfer_in'] = ApiClient.convertToType(data['can_transfer_in'], 'Boolean');
            }
            if (data.hasOwnProperty('can_transfer_out')) {
                obj['can_transfer_out'] = ApiClient.convertToType(data['can_transfer_out'], 'Boolean');
            }
            if (data.hasOwnProperty('routing')) {
                obj['routing'] = ApiClient.convertToType(data['routing'], 'String');
            }
            if (data.hasOwnProperty('wire_routing')) {
                obj['wire_routing'] = ApiClient.convertToType(data['wire_routing'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NumbersACH</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NumbersACH</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NumbersACH.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['routing'] && !(typeof data['routing'] === 'string' || data['routing'] instanceof String)) {
            throw new Error("Expected the field `routing` to be a primitive type in the JSON string but got " + data['routing']);
        }
        // ensure the json data is a string
        if (data['wire_routing'] && !(typeof data['wire_routing'] === 'string' || data['wire_routing'] instanceof String)) {
            throw new Error("Expected the field `wire_routing` to be a primitive type in the JSON string but got " + data['wire_routing']);
        }

        return true;
    }


}

NumbersACH.RequiredProperties = ["account", "account_id", "routing", "wire_routing"];

/**
 * The ACH account number for the account.  Note that when using OAuth with Chase Bank (`ins_56`), Chase will issue \"tokenized\" routing and account numbers, which are not the user's actual account and routing numbers. These tokenized numbers should work identically to normal account and routing numbers. The digits returned in the `mask` field will continue to reflect the actual account number, rather than the tokenized account number; for this reason, when displaying account numbers to the user to help them identify their account in your UI, always use the `mask` rather than truncating the `account` number. If a user revokes their permissions to your app, the tokenized numbers will continue to work for ACH deposits, but not withdrawals.
 * @member {String} account
 */
NumbersACH.prototype['account'] = undefined;

/**
 * The Plaid account ID associated with the account numbers
 * @member {String} account_id
 */
NumbersACH.prototype['account_id'] = undefined;

/**
 * Whether the account supports ACH transfers into the account
 * @member {Boolean} can_transfer_in
 */
NumbersACH.prototype['can_transfer_in'] = undefined;

/**
 * Whether the account supports ACH transfers out of the account
 * @member {Boolean} can_transfer_out
 */
NumbersACH.prototype['can_transfer_out'] = undefined;

/**
 * The ACH routing number for the account. If the institution is `ins_56`, this may be a tokenized routing number. For more information, see the description of the `account` field.
 * @member {String} routing
 */
NumbersACH.prototype['routing'] = undefined;

/**
 * The wire transfer routing number for the account, if available
 * @member {String} wire_routing
 */
NumbersACH.prototype['wire_routing'] = undefined;






export default NumbersACH;

