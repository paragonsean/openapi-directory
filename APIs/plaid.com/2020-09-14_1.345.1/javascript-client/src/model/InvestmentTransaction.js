/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InvestmentTransactionSubtype from './InvestmentTransactionSubtype';
import InvestmentTransactionType from './InvestmentTransactionType';

/**
 * The InvestmentTransaction model module.
 * @module model/InvestmentTransaction
 * @version 2020-09-14_1.345.1
 */
class InvestmentTransaction {
    /**
     * Constructs a new <code>InvestmentTransaction</code>.
     * A transaction within an investment account.
     * @alias module:model/InvestmentTransaction
     * @extends Object
     * @param accountId {String} The `account_id` of the account against which this transaction posted.
     * @param amount {Number} The complete value of the transaction. Positive values when cash is debited, e.g. purchases of stock; negative values when cash is credited, e.g. sales of stock. Treatment remains the same for cash-only movements unassociated with securities.
     * @param date {Date} The [ISO 8601](https://wikipedia.org/wiki/ISO_8601) posting date for the transaction.
     * @param fees {Number} The combined value of all fees applied to this transaction
     * @param investmentTransactionId {String} The ID of the Investment transaction, unique across all Plaid transactions. Like all Plaid identifiers, the `investment_transaction_id` is case sensitive.
     * @param isoCurrencyCode {String} The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-`null`.
     * @param name {String} The institutionâ€™s description of the transaction.
     * @param price {Number} The price of the security at which this transaction occurred.
     * @param quantity {Number} The number of units of the security involved in this transaction. Positive for buy transactions; negative for sell transactions.
     * @param securityId {String} The `security_id` to which this transaction is related.
     * @param subtype {module:model/InvestmentTransactionSubtype} 
     * @param type {module:model/InvestmentTransactionType} 
     * @param unofficialCurrencyCode {String} The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
     */
    constructor(accountId, amount, date, fees, investmentTransactionId, isoCurrencyCode, name, price, quantity, securityId, subtype, type, unofficialCurrencyCode) { 
        
        InvestmentTransaction.initialize(this, accountId, amount, date, fees, investmentTransactionId, isoCurrencyCode, name, price, quantity, securityId, subtype, type, unofficialCurrencyCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, amount, date, fees, investmentTransactionId, isoCurrencyCode, name, price, quantity, securityId, subtype, type, unofficialCurrencyCode) { 
        obj['account_id'] = accountId;
        obj['amount'] = amount;
        obj['date'] = date;
        obj['fees'] = fees;
        obj['investment_transaction_id'] = investmentTransactionId;
        obj['iso_currency_code'] = isoCurrencyCode;
        obj['name'] = name;
        obj['price'] = price;
        obj['quantity'] = quantity;
        obj['security_id'] = securityId;
        obj['subtype'] = subtype;
        obj['type'] = type;
        obj['unofficial_currency_code'] = unofficialCurrencyCode;
    }

    /**
     * Constructs a <code>InvestmentTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InvestmentTransaction} obj Optional instance to populate.
     * @return {module:model/InvestmentTransaction} The populated <code>InvestmentTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvestmentTransaction();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('cancel_transaction_id')) {
                obj['cancel_transaction_id'] = ApiClient.convertToType(data['cancel_transaction_id'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('fees')) {
                obj['fees'] = ApiClient.convertToType(data['fees'], 'Number');
            }
            if (data.hasOwnProperty('investment_transaction_id')) {
                obj['investment_transaction_id'] = ApiClient.convertToType(data['investment_transaction_id'], 'String');
            }
            if (data.hasOwnProperty('iso_currency_code')) {
                obj['iso_currency_code'] = ApiClient.convertToType(data['iso_currency_code'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('security_id')) {
                obj['security_id'] = ApiClient.convertToType(data['security_id'], 'String');
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = InvestmentTransactionSubtype.constructFromObject(data['subtype']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = InvestmentTransactionType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('unofficial_currency_code')) {
                obj['unofficial_currency_code'] = ApiClient.convertToType(data['unofficial_currency_code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InvestmentTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InvestmentTransaction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InvestmentTransaction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['cancel_transaction_id'] && !(typeof data['cancel_transaction_id'] === 'string' || data['cancel_transaction_id'] instanceof String)) {
            throw new Error("Expected the field `cancel_transaction_id` to be a primitive type in the JSON string but got " + data['cancel_transaction_id']);
        }
        // ensure the json data is a string
        if (data['investment_transaction_id'] && !(typeof data['investment_transaction_id'] === 'string' || data['investment_transaction_id'] instanceof String)) {
            throw new Error("Expected the field `investment_transaction_id` to be a primitive type in the JSON string but got " + data['investment_transaction_id']);
        }
        // ensure the json data is a string
        if (data['iso_currency_code'] && !(typeof data['iso_currency_code'] === 'string' || data['iso_currency_code'] instanceof String)) {
            throw new Error("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got " + data['iso_currency_code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['security_id'] && !(typeof data['security_id'] === 'string' || data['security_id'] instanceof String)) {
            throw new Error("Expected the field `security_id` to be a primitive type in the JSON string but got " + data['security_id']);
        }
        // ensure the json data is a string
        if (data['unofficial_currency_code'] && !(typeof data['unofficial_currency_code'] === 'string' || data['unofficial_currency_code'] instanceof String)) {
            throw new Error("Expected the field `unofficial_currency_code` to be a primitive type in the JSON string but got " + data['unofficial_currency_code']);
        }

        return true;
    }


}

InvestmentTransaction.RequiredProperties = ["account_id", "amount", "date", "fees", "investment_transaction_id", "iso_currency_code", "name", "price", "quantity", "security_id", "subtype", "type", "unofficial_currency_code"];

/**
 * The `account_id` of the account against which this transaction posted.
 * @member {String} account_id
 */
InvestmentTransaction.prototype['account_id'] = undefined;

/**
 * The complete value of the transaction. Positive values when cash is debited, e.g. purchases of stock; negative values when cash is credited, e.g. sales of stock. Treatment remains the same for cash-only movements unassociated with securities.
 * @member {Number} amount
 */
InvestmentTransaction.prototype['amount'] = undefined;

/**
 * A legacy field formerly used internally by Plaid to identify certain canceled transactions.
 * @member {String} cancel_transaction_id
 */
InvestmentTransaction.prototype['cancel_transaction_id'] = undefined;

/**
 * The [ISO 8601](https://wikipedia.org/wiki/ISO_8601) posting date for the transaction.
 * @member {Date} date
 */
InvestmentTransaction.prototype['date'] = undefined;

/**
 * The combined value of all fees applied to this transaction
 * @member {Number} fees
 */
InvestmentTransaction.prototype['fees'] = undefined;

/**
 * The ID of the Investment transaction, unique across all Plaid transactions. Like all Plaid identifiers, the `investment_transaction_id` is case sensitive.
 * @member {String} investment_transaction_id
 */
InvestmentTransaction.prototype['investment_transaction_id'] = undefined;

/**
 * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-`null`.
 * @member {String} iso_currency_code
 */
InvestmentTransaction.prototype['iso_currency_code'] = undefined;

/**
 * The institutionâ€™s description of the transaction.
 * @member {String} name
 */
InvestmentTransaction.prototype['name'] = undefined;

/**
 * The price of the security at which this transaction occurred.
 * @member {Number} price
 */
InvestmentTransaction.prototype['price'] = undefined;

/**
 * The number of units of the security involved in this transaction. Positive for buy transactions; negative for sell transactions.
 * @member {Number} quantity
 */
InvestmentTransaction.prototype['quantity'] = undefined;

/**
 * The `security_id` to which this transaction is related.
 * @member {String} security_id
 */
InvestmentTransaction.prototype['security_id'] = undefined;

/**
 * @member {module:model/InvestmentTransactionSubtype} subtype
 */
InvestmentTransaction.prototype['subtype'] = undefined;

/**
 * @member {module:model/InvestmentTransactionType} type
 */
InvestmentTransaction.prototype['type'] = undefined;

/**
 * The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
 * @member {String} unofficial_currency_code
 */
InvestmentTransaction.prototype['unofficial_currency_code'] = undefined;






export default InvestmentTransaction;

