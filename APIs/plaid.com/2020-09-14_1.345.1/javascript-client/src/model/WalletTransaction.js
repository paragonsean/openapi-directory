/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WalletTransactionAmount from './WalletTransactionAmount';
import WalletTransactionCounterparty from './WalletTransactionCounterparty';
import WalletTransactionStatus from './WalletTransactionStatus';

/**
 * The WalletTransaction model module.
 * @module model/WalletTransaction
 * @version 2020-09-14_1.345.1
 */
class WalletTransaction {
    /**
     * Constructs a new <code>WalletTransaction</code>.
     * The transaction details
     * @alias module:model/WalletTransaction
     * @extends Object
     * @param amount {module:model/WalletTransactionAmount} 
     * @param counterparty {module:model/WalletTransactionCounterparty} 
     * @param createdAt {Date} Timestamp when the transaction was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
     * @param lastStatusUpdate {Date} The date and time of the last time the `status` was updated, in IS0 8601 format
     * @param reference {String} A reference for the transaction
     * @param status {module:model/WalletTransactionStatus} 
     * @param transactionId {String} A unique ID identifying the transaction
     * @param type {module:model/WalletTransaction.TypeEnum} The type of the transaction. The supported transaction types that are returned are: `BANK_TRANSFER:` a transaction which credits an e-wallet through an external bank transfer.  `PAYOUT:` a transaction which debits an e-wallet by disbursing funds to a counterparty.  `PIS_PAY_IN:` a payment which credits an e-wallet through Plaid's Payment Initiation Services (PIS) APIs. For more information see the [Payment Initiation endpoints](https://plaid.com/docs/api/products/payment-initiation/).  `REFUND:` a transaction which debits an e-wallet by refunding a previously initiated payment made through Plaid's [PIS APIs](https://plaid.com/docs/api/products/payment-initiation/).  `FUNDS_SWEEP`: an automated transaction which debits funds from an e-wallet to a designated client-owned account.
     * @param walletId {String} The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
     */
    constructor(amount, counterparty, createdAt, lastStatusUpdate, reference, status, transactionId, type, walletId) { 
        
        WalletTransaction.initialize(this, amount, counterparty, createdAt, lastStatusUpdate, reference, status, transactionId, type, walletId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, counterparty, createdAt, lastStatusUpdate, reference, status, transactionId, type, walletId) { 
        obj['amount'] = amount;
        obj['counterparty'] = counterparty;
        obj['created_at'] = createdAt;
        obj['last_status_update'] = lastStatusUpdate;
        obj['reference'] = reference;
        obj['status'] = status;
        obj['transaction_id'] = transactionId;
        obj['type'] = type;
        obj['wallet_id'] = walletId;
    }

    /**
     * Constructs a <code>WalletTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WalletTransaction} obj Optional instance to populate.
     * @return {module:model/WalletTransaction} The populated <code>WalletTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WalletTransaction();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = WalletTransactionAmount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('counterparty')) {
                obj['counterparty'] = WalletTransactionCounterparty.constructFromObject(data['counterparty']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('last_status_update')) {
                obj['last_status_update'] = ApiClient.convertToType(data['last_status_update'], 'Date');
            }
            if (data.hasOwnProperty('payment_id')) {
                obj['payment_id'] = ApiClient.convertToType(data['payment_id'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = WalletTransactionStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('wallet_id')) {
                obj['wallet_id'] = ApiClient.convertToType(data['wallet_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WalletTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WalletTransaction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WalletTransaction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['payment_id'] && !(typeof data['payment_id'] === 'string' || data['payment_id'] instanceof String)) {
            throw new Error("Expected the field `payment_id` to be a primitive type in the JSON string but got " + data['payment_id']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['wallet_id'] && !(typeof data['wallet_id'] === 'string' || data['wallet_id'] instanceof String)) {
            throw new Error("Expected the field `wallet_id` to be a primitive type in the JSON string but got " + data['wallet_id']);
        }

        return true;
    }


}

WalletTransaction.RequiredProperties = ["amount", "counterparty", "created_at", "last_status_update", "reference", "status", "transaction_id", "type", "wallet_id"];

/**
 * @member {module:model/WalletTransactionAmount} amount
 */
WalletTransaction.prototype['amount'] = undefined;

/**
 * @member {module:model/WalletTransactionCounterparty} counterparty
 */
WalletTransaction.prototype['counterparty'] = undefined;

/**
 * Timestamp when the transaction was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
 * @member {Date} created_at
 */
WalletTransaction.prototype['created_at'] = undefined;

/**
 * The date and time of the last time the `status` was updated, in IS0 8601 format
 * @member {Date} last_status_update
 */
WalletTransaction.prototype['last_status_update'] = undefined;

/**
 * The payment id that this transaction is associated with, if any. This is present only for transaction types `PIS_PAY_IN` and `REFUND`.
 * @member {String} payment_id
 */
WalletTransaction.prototype['payment_id'] = undefined;

/**
 * A reference for the transaction
 * @member {String} reference
 */
WalletTransaction.prototype['reference'] = undefined;

/**
 * @member {module:model/WalletTransactionStatus} status
 */
WalletTransaction.prototype['status'] = undefined;

/**
 * A unique ID identifying the transaction
 * @member {String} transaction_id
 */
WalletTransaction.prototype['transaction_id'] = undefined;

/**
 * The type of the transaction. The supported transaction types that are returned are: `BANK_TRANSFER:` a transaction which credits an e-wallet through an external bank transfer.  `PAYOUT:` a transaction which debits an e-wallet by disbursing funds to a counterparty.  `PIS_PAY_IN:` a payment which credits an e-wallet through Plaid's Payment Initiation Services (PIS) APIs. For more information see the [Payment Initiation endpoints](https://plaid.com/docs/api/products/payment-initiation/).  `REFUND:` a transaction which debits an e-wallet by refunding a previously initiated payment made through Plaid's [PIS APIs](https://plaid.com/docs/api/products/payment-initiation/).  `FUNDS_SWEEP`: an automated transaction which debits funds from an e-wallet to a designated client-owned account.
 * @member {module:model/WalletTransaction.TypeEnum} type
 */
WalletTransaction.prototype['type'] = undefined;

/**
 * The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests.
 * @member {String} wallet_id
 */
WalletTransaction.prototype['wallet_id'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
WalletTransaction['TypeEnum'] = {

    /**
     * value: "BANK_TRANSFER"
     * @const
     */
    "BANK_TRANSFER": "BANK_TRANSFER",

    /**
     * value: "PAYOUT"
     * @const
     */
    "PAYOUT": "PAYOUT",

    /**
     * value: "PIS_PAY_IN"
     * @const
     */
    "PIS_PAY_IN": "PIS_PAY_IN",

    /**
     * value: "REFUND"
     * @const
     */
    "REFUND": "REFUND",

    /**
     * value: "FUNDS_SWEEP"
     * @const
     */
    "FUNDS_SWEEP": "FUNDS_SWEEP"
};



export default WalletTransaction;

