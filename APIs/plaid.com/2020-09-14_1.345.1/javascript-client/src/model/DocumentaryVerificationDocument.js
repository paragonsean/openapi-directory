/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentAnalysis from './DocumentAnalysis';
import DocumentStatus from './DocumentStatus';
import PhysicalDocumentExtractedData from './PhysicalDocumentExtractedData';
import PhysicalDocumentImages from './PhysicalDocumentImages';

/**
 * The DocumentaryVerificationDocument model module.
 * @module model/DocumentaryVerificationDocument
 * @version 2020-09-14_1.345.1
 */
class DocumentaryVerificationDocument {
    /**
     * Constructs a new <code>DocumentaryVerificationDocument</code>.
     * Images, extracted data, and analysis from a user&#39;s identity document
     * @alias module:model/DocumentaryVerificationDocument
     * @extends Object
     * @param analysis {module:model/DocumentAnalysis} 
     * @param attempt {Number} The `attempt` field begins with 1 and increments with each subsequent document upload.
     * @param extractedData {module:model/PhysicalDocumentExtractedData} 
     * @param images {module:model/PhysicalDocumentImages} 
     * @param redactedAt {Date} An ISO8601 formatted timestamp.
     * @param status {module:model/DocumentStatus} 
     */
    constructor(analysis, attempt, extractedData, images, redactedAt, status) { 
        
        DocumentaryVerificationDocument.initialize(this, analysis, attempt, extractedData, images, redactedAt, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, analysis, attempt, extractedData, images, redactedAt, status) { 
        obj['analysis'] = analysis;
        obj['attempt'] = attempt;
        obj['extracted_data'] = extractedData;
        obj['images'] = images;
        obj['redacted_at'] = redactedAt;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>DocumentaryVerificationDocument</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentaryVerificationDocument} obj Optional instance to populate.
     * @return {module:model/DocumentaryVerificationDocument} The populated <code>DocumentaryVerificationDocument</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentaryVerificationDocument();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('analysis')) {
                obj['analysis'] = DocumentAnalysis.constructFromObject(data['analysis']);
            }
            if (data.hasOwnProperty('attempt')) {
                obj['attempt'] = ApiClient.convertToType(data['attempt'], 'Number');
            }
            if (data.hasOwnProperty('extracted_data')) {
                obj['extracted_data'] = PhysicalDocumentExtractedData.constructFromObject(data['extracted_data']);
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = PhysicalDocumentImages.constructFromObject(data['images']);
            }
            if (data.hasOwnProperty('redacted_at')) {
                obj['redacted_at'] = ApiClient.convertToType(data['redacted_at'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = DocumentStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentaryVerificationDocument</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentaryVerificationDocument</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentaryVerificationDocument.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

DocumentaryVerificationDocument.RequiredProperties = ["analysis", "attempt", "extracted_data", "images", "redacted_at", "status"];

/**
 * @member {module:model/DocumentAnalysis} analysis
 */
DocumentaryVerificationDocument.prototype['analysis'] = undefined;

/**
 * The `attempt` field begins with 1 and increments with each subsequent document upload.
 * @member {Number} attempt
 */
DocumentaryVerificationDocument.prototype['attempt'] = undefined;

/**
 * @member {module:model/PhysicalDocumentExtractedData} extracted_data
 */
DocumentaryVerificationDocument.prototype['extracted_data'] = undefined;

/**
 * @member {module:model/PhysicalDocumentImages} images
 */
DocumentaryVerificationDocument.prototype['images'] = undefined;

/**
 * An ISO8601 formatted timestamp.
 * @member {Date} redacted_at
 */
DocumentaryVerificationDocument.prototype['redacted_at'] = undefined;

/**
 * @member {module:model/DocumentStatus} status
 */
DocumentaryVerificationDocument.prototype['status'] = undefined;






export default DocumentaryVerificationDocument;

