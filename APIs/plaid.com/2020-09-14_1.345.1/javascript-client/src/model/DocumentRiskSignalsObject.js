/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MultiDocumentRiskSignal from './MultiDocumentRiskSignal';
import SingleDocumentRiskSignal from './SingleDocumentRiskSignal';

/**
 * The DocumentRiskSignalsObject model module.
 * @module model/DocumentRiskSignalsObject
 * @version 2020-09-14_1.345.1
 */
class DocumentRiskSignalsObject {
    /**
     * Constructs a new <code>DocumentRiskSignalsObject</code>.
     * Object containing fraud risk data for a set of income documents.
     * @alias module:model/DocumentRiskSignalsObject
     * @extends Object
     * @param accountId {String} ID of the payroll provider account.
     * @param multiDocumentRiskSignals {Array.<module:model/MultiDocumentRiskSignal>} Array of risk signals computed from a set of uploaded documents and the associated documents' metadata
     * @param singleDocumentRiskSignals {Array.<module:model/SingleDocumentRiskSignal>} Array of document metadata and associated risk signals per document
     */
    constructor(accountId, multiDocumentRiskSignals, singleDocumentRiskSignals) { 
        
        DocumentRiskSignalsObject.initialize(this, accountId, multiDocumentRiskSignals, singleDocumentRiskSignals);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, multiDocumentRiskSignals, singleDocumentRiskSignals) { 
        obj['account_id'] = accountId;
        obj['multi_document_risk_signals'] = multiDocumentRiskSignals;
        obj['single_document_risk_signals'] = singleDocumentRiskSignals;
    }

    /**
     * Constructs a <code>DocumentRiskSignalsObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentRiskSignalsObject} obj Optional instance to populate.
     * @return {module:model/DocumentRiskSignalsObject} The populated <code>DocumentRiskSignalsObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentRiskSignalsObject();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('multi_document_risk_signals')) {
                obj['multi_document_risk_signals'] = ApiClient.convertToType(data['multi_document_risk_signals'], [MultiDocumentRiskSignal]);
            }
            if (data.hasOwnProperty('single_document_risk_signals')) {
                obj['single_document_risk_signals'] = ApiClient.convertToType(data['single_document_risk_signals'], [SingleDocumentRiskSignal]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentRiskSignalsObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentRiskSignalsObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentRiskSignalsObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['multi_document_risk_signals'])) {
            throw new Error("Expected the field `multi_document_risk_signals` to be an array in the JSON data but got " + data['multi_document_risk_signals']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['single_document_risk_signals'])) {
            throw new Error("Expected the field `single_document_risk_signals` to be an array in the JSON data but got " + data['single_document_risk_signals']);
        }

        return true;
    }


}

DocumentRiskSignalsObject.RequiredProperties = ["account_id", "multi_document_risk_signals", "single_document_risk_signals"];

/**
 * ID of the payroll provider account.
 * @member {String} account_id
 */
DocumentRiskSignalsObject.prototype['account_id'] = undefined;

/**
 * Array of risk signals computed from a set of uploaded documents and the associated documents' metadata
 * @member {Array.<module:model/MultiDocumentRiskSignal>} multi_document_risk_signals
 */
DocumentRiskSignalsObject.prototype['multi_document_risk_signals'] = undefined;

/**
 * Array of document metadata and associated risk signals per document
 * @member {Array.<module:model/SingleDocumentRiskSignal>} single_document_risk_signals
 */
DocumentRiskSignalsObject.prototype['single_document_risk_signals'] = undefined;






export default DocumentRiskSignalsObject;

