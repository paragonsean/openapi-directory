/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransactionOverride model module.
 * @module model/TransactionOverride
 * @version 2020-09-14_1.345.1
 */
class TransactionOverride {
    /**
     * Constructs a new <code>TransactionOverride</code>.
     * Data to populate as test transaction data. If not specified, random transactions will be generated instead.
     * @alias module:model/TransactionOverride
     * @extends Object
     * @param amount {Number} The transaction amount. Can be negative.
     * @param datePosted {Date} The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Posted dates in the past or present will result in posted transactions; posted dates in the future will result in pending transactions.
     * @param dateTransacted {Date} The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Transactions in Sandbox will move from pending to posted once their transaction date has been reached. If a `date_transacted` is not provided by the institution, a transaction date may be available in the [`authorized_date`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-authorized-date) field.
     * @param description {String} The transaction description.
     */
    constructor(amount, datePosted, dateTransacted, description) { 
        
        TransactionOverride.initialize(this, amount, datePosted, dateTransacted, description);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, datePosted, dateTransacted, description) { 
        obj['amount'] = amount;
        obj['date_posted'] = datePosted;
        obj['date_transacted'] = dateTransacted;
        obj['description'] = description;
    }

    /**
     * Constructs a <code>TransactionOverride</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionOverride} obj Optional instance to populate.
     * @return {module:model/TransactionOverride} The populated <code>TransactionOverride</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionOverride();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('date_posted')) {
                obj['date_posted'] = ApiClient.convertToType(data['date_posted'], 'Date');
            }
            if (data.hasOwnProperty('date_transacted')) {
                obj['date_transacted'] = ApiClient.convertToType(data['date_transacted'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionOverride</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionOverride</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionOverride.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

TransactionOverride.RequiredProperties = ["amount", "date_posted", "date_transacted", "description"];

/**
 * The transaction amount. Can be negative.
 * @member {Number} amount
 */
TransactionOverride.prototype['amount'] = undefined;

/**
 * The ISO-4217 format currency code for the transaction.
 * @member {String} currency
 */
TransactionOverride.prototype['currency'] = undefined;

/**
 * The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Posted dates in the past or present will result in posted transactions; posted dates in the future will result in pending transactions.
 * @member {Date} date_posted
 */
TransactionOverride.prototype['date_posted'] = undefined;

/**
 * The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Transactions in Sandbox will move from pending to posted once their transaction date has been reached. If a `date_transacted` is not provided by the institution, a transaction date may be available in the [`authorized_date`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-authorized-date) field.
 * @member {Date} date_transacted
 */
TransactionOverride.prototype['date_transacted'] = undefined;

/**
 * The transaction description.
 * @member {String} description
 */
TransactionOverride.prototype['description'] = undefined;






export default TransactionOverride;

