/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentaryVerificationDocument from './DocumentaryVerificationDocument';

/**
 * The DocumentaryVerification model module.
 * @module model/DocumentaryVerification
 * @version 2020-09-14_1.345.1
 */
class DocumentaryVerification {
    /**
     * Constructs a new <code>DocumentaryVerification</code>.
     * Data, images, analysis, and results from the &#x60;documentary_verification&#x60; step. This field will be &#x60;null&#x60; unless &#x60;steps.documentary_verification&#x60; has reached a terminal state of either &#x60;success&#x60; or &#x60;failed&#x60;.
     * @alias module:model/DocumentaryVerification
     * @extends Object
     * @param documents {Array.<module:model/DocumentaryVerificationDocument>} An array of documents submitted to the `documentary_verification` step. Each entry represents one user submission, where each submission will contain both a front and back image, or just a front image, depending on the document type.  Note: Plaid will automatically let a user submit a new set of document images up to three times if we detect that a previous attempt might have failed due to user error. For example, if the first set of document images are blurry or obscured by glare, the user will be asked to capture their documents again, resulting in at least two separate entries within `documents`. If the overall `documentary_verification` is `failed`, the user has exhausted their retry attempts.
     * @param status {String} The outcome status for the associated Identity Verification attempt's `documentary_verification` step. This field will always have the same value as `steps.documentary_verification`.
     */
    constructor(documents, status) { 
        
        DocumentaryVerification.initialize(this, documents, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documents, status) { 
        obj['documents'] = documents;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>DocumentaryVerification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentaryVerification} obj Optional instance to populate.
     * @return {module:model/DocumentaryVerification} The populated <code>DocumentaryVerification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentaryVerification();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], [DocumentaryVerificationDocument]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentaryVerification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentaryVerification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentaryVerification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['documents'])) {
            throw new Error("Expected the field `documents` to be an array in the JSON data but got " + data['documents']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

DocumentaryVerification.RequiredProperties = ["documents", "status"];

/**
 * An array of documents submitted to the `documentary_verification` step. Each entry represents one user submission, where each submission will contain both a front and back image, or just a front image, depending on the document type.  Note: Plaid will automatically let a user submit a new set of document images up to three times if we detect that a previous attempt might have failed due to user error. For example, if the first set of document images are blurry or obscured by glare, the user will be asked to capture their documents again, resulting in at least two separate entries within `documents`. If the overall `documentary_verification` is `failed`, the user has exhausted their retry attempts.
 * @member {Array.<module:model/DocumentaryVerificationDocument>} documents
 */
DocumentaryVerification.prototype['documents'] = undefined;

/**
 * The outcome status for the associated Identity Verification attempt's `documentary_verification` step. This field will always have the same value as `steps.documentary_verification`.
 * @member {String} status
 */
DocumentaryVerification.prototype['status'] = undefined;






export default DocumentaryVerification;

