/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransferAuthorizationDecision from './TransferAuthorizationDecision';
import TransferAuthorizationDecisionRationale from './TransferAuthorizationDecisionRationale';
import TransferAuthorizationGuaranteeDecision from './TransferAuthorizationGuaranteeDecision';
import TransferAuthorizationGuaranteeDecisionRationale from './TransferAuthorizationGuaranteeDecisionRationale';
import TransferAuthorizationProposedTransfer from './TransferAuthorizationProposedTransfer';

/**
 * The TransferAuthorization model module.
 * @module model/TransferAuthorization
 * @version 2020-09-14_1.345.1
 */
class TransferAuthorization {
    /**
     * Constructs a new <code>TransferAuthorization</code>.
     * Contains the authorization decision for a proposed transfer.
     * @alias module:model/TransferAuthorization
     * @extends Object
     * @param created {Date} The datetime representing when the authorization was created, in the format `2006-01-02T15:04:05Z`.
     * @param decision {module:model/TransferAuthorizationDecision} 
     * @param decisionRationale {module:model/TransferAuthorizationDecisionRationale} 
     * @param guaranteeDecision {module:model/TransferAuthorizationGuaranteeDecision} 
     * @param guaranteeDecisionRationale {module:model/TransferAuthorizationGuaranteeDecisionRationale} 
     * @param id {String} Plaid’s unique identifier for a transfer authorization.
     * @param proposedTransfer {module:model/TransferAuthorizationProposedTransfer} 
     */
    constructor(created, decision, decisionRationale, guaranteeDecision, guaranteeDecisionRationale, id, proposedTransfer) { 
        
        TransferAuthorization.initialize(this, created, decision, decisionRationale, guaranteeDecision, guaranteeDecisionRationale, id, proposedTransfer);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, created, decision, decisionRationale, guaranteeDecision, guaranteeDecisionRationale, id, proposedTransfer) { 
        obj['created'] = created;
        obj['decision'] = decision;
        obj['decision_rationale'] = decisionRationale;
        obj['guarantee_decision'] = guaranteeDecision;
        obj['guarantee_decision_rationale'] = guaranteeDecisionRationale;
        obj['id'] = id;
        obj['proposed_transfer'] = proposedTransfer;
    }

    /**
     * Constructs a <code>TransferAuthorization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferAuthorization} obj Optional instance to populate.
     * @return {module:model/TransferAuthorization} The populated <code>TransferAuthorization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferAuthorization();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('decision')) {
                obj['decision'] = TransferAuthorizationDecision.constructFromObject(data['decision']);
            }
            if (data.hasOwnProperty('decision_rationale')) {
                obj['decision_rationale'] = TransferAuthorizationDecisionRationale.constructFromObject(data['decision_rationale']);
            }
            if (data.hasOwnProperty('guarantee_decision')) {
                obj['guarantee_decision'] = TransferAuthorizationGuaranteeDecision.constructFromObject(data['guarantee_decision']);
            }
            if (data.hasOwnProperty('guarantee_decision_rationale')) {
                obj['guarantee_decision_rationale'] = TransferAuthorizationGuaranteeDecisionRationale.constructFromObject(data['guarantee_decision_rationale']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('proposed_transfer')) {
                obj['proposed_transfer'] = TransferAuthorizationProposedTransfer.constructFromObject(data['proposed_transfer']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferAuthorization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferAuthorization</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransferAuthorization.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

TransferAuthorization.RequiredProperties = ["created", "decision", "decision_rationale", "guarantee_decision", "guarantee_decision_rationale", "id", "proposed_transfer"];

/**
 * The datetime representing when the authorization was created, in the format `2006-01-02T15:04:05Z`.
 * @member {Date} created
 */
TransferAuthorization.prototype['created'] = undefined;

/**
 * @member {module:model/TransferAuthorizationDecision} decision
 */
TransferAuthorization.prototype['decision'] = undefined;

/**
 * @member {module:model/TransferAuthorizationDecisionRationale} decision_rationale
 */
TransferAuthorization.prototype['decision_rationale'] = undefined;

/**
 * @member {module:model/TransferAuthorizationGuaranteeDecision} guarantee_decision
 */
TransferAuthorization.prototype['guarantee_decision'] = undefined;

/**
 * @member {module:model/TransferAuthorizationGuaranteeDecisionRationale} guarantee_decision_rationale
 */
TransferAuthorization.prototype['guarantee_decision_rationale'] = undefined;

/**
 * Plaid’s unique identifier for a transfer authorization.
 * @member {String} id
 */
TransferAuthorization.prototype['id'] = undefined;

/**
 * @member {module:model/TransferAuthorizationProposedTransfer} proposed_transfer
 */
TransferAuthorization.prototype['proposed_transfer'] = undefined;






export default TransferAuthorization;

