/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WebhookEnvironmentValues from './WebhookEnvironmentValues';

/**
 * The AssetsProductReadyWebhook model module.
 * @module model/AssetsProductReadyWebhook
 * @version 2020-09-14_1.345.1
 */
class AssetsProductReadyWebhook {
    /**
     * Constructs a new <code>AssetsProductReadyWebhook</code>.
     * Fired when the Asset Report has been generated and &#x60;/asset_report/get&#x60; is ready to be called.  If you attempt to retrieve an Asset Report before this webhook has fired, youâ€™ll receive a response with the HTTP status code 400 and a Plaid error code of &#x60;PRODUCT_NOT_READY&#x60;.
     * @alias module:model/AssetsProductReadyWebhook
     * @extends Object
     * @param assetReportId {String} The `asset_report_id` corresponding to the Asset Report the webhook has fired for.
     * @param environment {module:model/WebhookEnvironmentValues} 
     * @param webhookCode {String} `PRODUCT_READY`
     * @param webhookType {String} `ASSETS`
     */
    constructor(assetReportId, environment, webhookCode, webhookType) { 
        
        AssetsProductReadyWebhook.initialize(this, assetReportId, environment, webhookCode, webhookType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, assetReportId, environment, webhookCode, webhookType) { 
        obj['asset_report_id'] = assetReportId;
        obj['environment'] = environment;
        obj['webhook_code'] = webhookCode;
        obj['webhook_type'] = webhookType;
    }

    /**
     * Constructs a <code>AssetsProductReadyWebhook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetsProductReadyWebhook} obj Optional instance to populate.
     * @return {module:model/AssetsProductReadyWebhook} The populated <code>AssetsProductReadyWebhook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssetsProductReadyWebhook();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('asset_report_id')) {
                obj['asset_report_id'] = ApiClient.convertToType(data['asset_report_id'], 'String');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = WebhookEnvironmentValues.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('report_type')) {
                obj['report_type'] = ApiClient.convertToType(data['report_type'], 'String');
            }
            if (data.hasOwnProperty('webhook_code')) {
                obj['webhook_code'] = ApiClient.convertToType(data['webhook_code'], 'String');
            }
            if (data.hasOwnProperty('webhook_type')) {
                obj['webhook_type'] = ApiClient.convertToType(data['webhook_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssetsProductReadyWebhook</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssetsProductReadyWebhook</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssetsProductReadyWebhook.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['asset_report_id'] && !(typeof data['asset_report_id'] === 'string' || data['asset_report_id'] instanceof String)) {
            throw new Error("Expected the field `asset_report_id` to be a primitive type in the JSON string but got " + data['asset_report_id']);
        }
        // ensure the json data is a string
        if (data['report_type'] && !(typeof data['report_type'] === 'string' || data['report_type'] instanceof String)) {
            throw new Error("Expected the field `report_type` to be a primitive type in the JSON string but got " + data['report_type']);
        }
        // ensure the json data is a string
        if (data['webhook_code'] && !(typeof data['webhook_code'] === 'string' || data['webhook_code'] instanceof String)) {
            throw new Error("Expected the field `webhook_code` to be a primitive type in the JSON string but got " + data['webhook_code']);
        }
        // ensure the json data is a string
        if (data['webhook_type'] && !(typeof data['webhook_type'] === 'string' || data['webhook_type'] instanceof String)) {
            throw new Error("Expected the field `webhook_type` to be a primitive type in the JSON string but got " + data['webhook_type']);
        }

        return true;
    }


}

AssetsProductReadyWebhook.RequiredProperties = ["asset_report_id", "environment", "webhook_code", "webhook_type"];

/**
 * The `asset_report_id` corresponding to the Asset Report the webhook has fired for.
 * @member {String} asset_report_id
 */
AssetsProductReadyWebhook.prototype['asset_report_id'] = undefined;

/**
 * @member {module:model/WebhookEnvironmentValues} environment
 */
AssetsProductReadyWebhook.prototype['environment'] = undefined;

/**
 * The report type, indicating whether the Asset Report is a `full` or `fast` report.
 * @member {String} report_type
 */
AssetsProductReadyWebhook.prototype['report_type'] = undefined;

/**
 * `PRODUCT_READY`
 * @member {String} webhook_code
 */
AssetsProductReadyWebhook.prototype['webhook_code'] = undefined;

/**
 * `ASSETS`
 * @member {String} webhook_type
 */
AssetsProductReadyWebhook.prototype['webhook_type'] = undefined;






export default AssetsProductReadyWebhook;

