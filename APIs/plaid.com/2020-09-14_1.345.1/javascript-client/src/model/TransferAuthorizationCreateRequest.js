/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ACHClass from './ACHClass';
import TransferAuthorizationDevice from './TransferAuthorizationDevice';
import TransferAuthorizationUserInRequest from './TransferAuthorizationUserInRequest';
import TransferNetwork from './TransferNetwork';
import TransferType from './TransferType';

/**
 * The TransferAuthorizationCreateRequest model module.
 * @module model/TransferAuthorizationCreateRequest
 * @version 2020-09-14_1.345.1
 */
class TransferAuthorizationCreateRequest {
    /**
     * Constructs a new <code>TransferAuthorizationCreateRequest</code>.
     * Defines the request schema for &#x60;/transfer/authorization/create&#x60;
     * @alias module:model/TransferAuthorizationCreateRequest
     * @param amount {String} The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
     * @param network {module:model/TransferNetwork} 
     * @param type {module:model/TransferType} 
     * @param user {module:model/TransferAuthorizationUserInRequest} 
     */
    constructor(amount, network, type, user) { 
        
        TransferAuthorizationCreateRequest.initialize(this, amount, network, type, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, network, type, user) { 
        obj['amount'] = amount;
        obj['network'] = network;
        obj['type'] = type;
        obj['user'] = user;
        obj['with_guarantee'] = true;
    }

    /**
     * Constructs a <code>TransferAuthorizationCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferAuthorizationCreateRequest} obj Optional instance to populate.
     * @return {module:model/TransferAuthorizationCreateRequest} The populated <code>TransferAuthorizationCreateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferAuthorizationCreateRequest();

            if (data.hasOwnProperty('access_token')) {
                obj['access_token'] = ApiClient.convertToType(data['access_token'], 'String');
            }
            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('ach_class')) {
                obj['ach_class'] = ACHClass.constructFromObject(data['ach_class']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('beacon_session_id')) {
                obj['beacon_session_id'] = ApiClient.convertToType(data['beacon_session_id'], 'String');
            }
            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = TransferAuthorizationDevice.constructFromObject(data['device']);
            }
            if (data.hasOwnProperty('funding_account_id')) {
                obj['funding_account_id'] = ApiClient.convertToType(data['funding_account_id'], 'String');
            }
            if (data.hasOwnProperty('idempotency_key')) {
                obj['idempotency_key'] = ApiClient.convertToType(data['idempotency_key'], 'String');
            }
            if (data.hasOwnProperty('iso_currency_code')) {
                obj['iso_currency_code'] = ApiClient.convertToType(data['iso_currency_code'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = TransferNetwork.constructFromObject(data['network']);
            }
            if (data.hasOwnProperty('origination_account_id')) {
                obj['origination_account_id'] = ApiClient.convertToType(data['origination_account_id'], 'String');
            }
            if (data.hasOwnProperty('originator_client_id')) {
                obj['originator_client_id'] = ApiClient.convertToType(data['originator_client_id'], 'String');
            }
            if (data.hasOwnProperty('payment_profile_token')) {
                obj['payment_profile_token'] = ApiClient.convertToType(data['payment_profile_token'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = TransferType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = TransferAuthorizationUserInRequest.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_present')) {
                obj['user_present'] = ApiClient.convertToType(data['user_present'], 'Boolean');
            }
            if (data.hasOwnProperty('with_guarantee')) {
                obj['with_guarantee'] = ApiClient.convertToType(data['with_guarantee'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferAuthorizationCreateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferAuthorizationCreateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransferAuthorizationCreateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['access_token'] && !(typeof data['access_token'] === 'string' || data['access_token'] instanceof String)) {
            throw new Error("Expected the field `access_token` to be a primitive type in the JSON string but got " + data['access_token']);
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['beacon_session_id'] && !(typeof data['beacon_session_id'] === 'string' || data['beacon_session_id'] instanceof String)) {
            throw new Error("Expected the field `beacon_session_id` to be a primitive type in the JSON string but got " + data['beacon_session_id']);
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['funding_account_id'] && !(typeof data['funding_account_id'] === 'string' || data['funding_account_id'] instanceof String)) {
            throw new Error("Expected the field `funding_account_id` to be a primitive type in the JSON string but got " + data['funding_account_id']);
        }
        // ensure the json data is a string
        if (data['idempotency_key'] && !(typeof data['idempotency_key'] === 'string' || data['idempotency_key'] instanceof String)) {
            throw new Error("Expected the field `idempotency_key` to be a primitive type in the JSON string but got " + data['idempotency_key']);
        }
        // ensure the json data is a string
        if (data['iso_currency_code'] && !(typeof data['iso_currency_code'] === 'string' || data['iso_currency_code'] instanceof String)) {
            throw new Error("Expected the field `iso_currency_code` to be a primitive type in the JSON string but got " + data['iso_currency_code']);
        }
        // ensure the json data is a string
        if (data['origination_account_id'] && !(typeof data['origination_account_id'] === 'string' || data['origination_account_id'] instanceof String)) {
            throw new Error("Expected the field `origination_account_id` to be a primitive type in the JSON string but got " + data['origination_account_id']);
        }
        // ensure the json data is a string
        if (data['originator_client_id'] && !(typeof data['originator_client_id'] === 'string' || data['originator_client_id'] instanceof String)) {
            throw new Error("Expected the field `originator_client_id` to be a primitive type in the JSON string but got " + data['originator_client_id']);
        }
        // ensure the json data is a string
        if (data['payment_profile_token'] && !(typeof data['payment_profile_token'] === 'string' || data['payment_profile_token'] instanceof String)) {
            throw new Error("Expected the field `payment_profile_token` to be a primitive type in the JSON string but got " + data['payment_profile_token']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }

        return true;
    }


}

TransferAuthorizationCreateRequest.RequiredProperties = ["amount", "network", "type", "user"];

/**
 * The Plaid `access_token` for the account that will be debited or credited. Required if not using `payment_profile_token`.
 * @member {String} access_token
 */
TransferAuthorizationCreateRequest.prototype['access_token'] = undefined;

/**
 * The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation.
 * @member {String} account_id
 */
TransferAuthorizationCreateRequest.prototype['account_id'] = undefined;

/**
 * @member {module:model/ACHClass} ach_class
 */
TransferAuthorizationCreateRequest.prototype['ach_class'] = undefined;

/**
 * The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
 * @member {String} amount
 */
TransferAuthorizationCreateRequest.prototype['amount'] = undefined;

/**
 * The unique identifier returned by Plaid's [beacon](https://plaid.com/docs/transfer/guarantee/#using-a-beacon) when it is run on your webpage. Required for Guarantee customers who are not using [Transfer UI](https://plaid.com/docs/transfer/using-transfer-ui/) and have a web checkout experience.
 * @member {String} beacon_session_id
 */
TransferAuthorizationCreateRequest.prototype['beacon_session_id'] = undefined;

/**
 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
 * @member {String} client_id
 */
TransferAuthorizationCreateRequest.prototype['client_id'] = undefined;

/**
 * @member {module:model/TransferAuthorizationDevice} device
 */
TransferAuthorizationCreateRequest.prototype['device'] = undefined;

/**
 * The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited. Defaults to the account configured during onboarding.
 * @member {String} funding_account_id
 */
TransferAuthorizationCreateRequest.prototype['funding_account_id'] = undefined;

/**
 * A random key provided by the client, per unique authorization. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create an authorization fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single authorization is created.  Failure to provide this key may result in duplicate charges.  Required for guaranteed ACH customers.
 * @member {String} idempotency_key
 */
TransferAuthorizationCreateRequest.prototype['idempotency_key'] = undefined;

/**
 * The currency of the transfer amount. The default value is \"USD\".
 * @member {String} iso_currency_code
 */
TransferAuthorizationCreateRequest.prototype['iso_currency_code'] = undefined;

/**
 * @member {module:model/TransferNetwork} network
 */
TransferAuthorizationCreateRequest.prototype['network'] = undefined;

/**
 * Plaid's unique identifier for the origination account for this authorization. If not specified, the default account will be used.
 * @member {String} origination_account_id
 */
TransferAuthorizationCreateRequest.prototype['origination_account_id'] = undefined;

/**
 * The Plaid client ID that is the originator of this transfer. Only needed if creating transfers on behalf of another client as a third-party sender (TPS).
 * @member {String} originator_client_id
 */
TransferAuthorizationCreateRequest.prototype['originator_client_id'] = undefined;

/**
 * The payment profile token associated with the Payment Profile that will be debited or credited. Required if not using `access_token`.
 * @member {String} payment_profile_token
 */
TransferAuthorizationCreateRequest.prototype['payment_profile_token'] = undefined;

/**
 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
 * @member {String} secret
 */
TransferAuthorizationCreateRequest.prototype['secret'] = undefined;

/**
 * @member {module:model/TransferType} type
 */
TransferAuthorizationCreateRequest.prototype['type'] = undefined;

/**
 * @member {module:model/TransferAuthorizationUserInRequest} user
 */
TransferAuthorizationCreateRequest.prototype['user'] = undefined;

/**
 * Required for Guarantee. If the end user is initiating the specific transfer themselves via an interactive UI, this should be `true`; for automatic recurring payments where the end user is not actually initiating each individual transfer, it should be `false`.
 * @member {Boolean} user_present
 */
TransferAuthorizationCreateRequest.prototype['user_present'] = undefined;

/**
 * If set to `false`, Plaid will not offer a `guarantee_decision` for this request(Guarantee customers only).
 * @member {Boolean} with_guarantee
 * @default true
 */
TransferAuthorizationCreateRequest.prototype['with_guarantee'] = true;






export default TransferAuthorizationCreateRequest;

