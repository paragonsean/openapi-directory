/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MortgageInterestRate from './MortgageInterestRate';
import MortgagePropertyAddress from './MortgagePropertyAddress';

/**
 * The MortgageLiability model module.
 * @module model/MortgageLiability
 * @version 2020-09-14_1.345.1
 */
class MortgageLiability {
    /**
     * Constructs a new <code>MortgageLiability</code>.
     * Contains details about a mortgage account.
     * @alias module:model/MortgageLiability
     * @extends Object
     * @param accountId {String} The ID of the account that this liability belongs to.
     * @param accountNumber {String} The account number of the loan.
     * @param currentLateFee {Number} The current outstanding amount charged for late payment.
     * @param escrowBalance {Number} Total amount held in escrow to pay taxes and insurance on behalf of the borrower.
     * @param hasPmi {Boolean} Indicates whether the borrower has private mortgage insurance in effect.
     * @param hasPrepaymentPenalty {Boolean} Indicates whether the borrower will pay a penalty for early payoff of mortgage.
     * @param interestRate {module:model/MortgageInterestRate} 
     * @param lastPaymentAmount {Number} The amount of the last payment.
     * @param lastPaymentDate {Date} The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @param loanTerm {String} Full duration of mortgage as at origination (e.g. `10 year`).
     * @param loanTypeDescription {String} Description of the type of loan, for example `conventional`, `fixed`, or `variable`. This field is provided directly from the loan servicer and does not have an enumerated set of possible values.
     * @param maturityDate {Date} Original date on which mortgage is due in full. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @param nextMonthlyPayment {Number} The amount of the next payment.
     * @param nextPaymentDueDate {Date} The due date for the next payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @param originationDate {Date} The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @param originationPrincipalAmount {Number} The original principal balance of the mortgage.
     * @param pastDueAmount {Number} Amount of loan (principal + interest) past due for payment.
     * @param propertyAddress {module:model/MortgagePropertyAddress} 
     * @param ytdInterestPaid {Number} The year to date (YTD) interest paid.
     * @param ytdPrincipalPaid {Number} The YTD principal paid.
     */
    constructor(accountId, accountNumber, currentLateFee, escrowBalance, hasPmi, hasPrepaymentPenalty, interestRate, lastPaymentAmount, lastPaymentDate, loanTerm, loanTypeDescription, maturityDate, nextMonthlyPayment, nextPaymentDueDate, originationDate, originationPrincipalAmount, pastDueAmount, propertyAddress, ytdInterestPaid, ytdPrincipalPaid) { 
        
        MortgageLiability.initialize(this, accountId, accountNumber, currentLateFee, escrowBalance, hasPmi, hasPrepaymentPenalty, interestRate, lastPaymentAmount, lastPaymentDate, loanTerm, loanTypeDescription, maturityDate, nextMonthlyPayment, nextPaymentDueDate, originationDate, originationPrincipalAmount, pastDueAmount, propertyAddress, ytdInterestPaid, ytdPrincipalPaid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, accountNumber, currentLateFee, escrowBalance, hasPmi, hasPrepaymentPenalty, interestRate, lastPaymentAmount, lastPaymentDate, loanTerm, loanTypeDescription, maturityDate, nextMonthlyPayment, nextPaymentDueDate, originationDate, originationPrincipalAmount, pastDueAmount, propertyAddress, ytdInterestPaid, ytdPrincipalPaid) { 
        obj['account_id'] = accountId;
        obj['account_number'] = accountNumber;
        obj['current_late_fee'] = currentLateFee;
        obj['escrow_balance'] = escrowBalance;
        obj['has_pmi'] = hasPmi;
        obj['has_prepayment_penalty'] = hasPrepaymentPenalty;
        obj['interest_rate'] = interestRate;
        obj['last_payment_amount'] = lastPaymentAmount;
        obj['last_payment_date'] = lastPaymentDate;
        obj['loan_term'] = loanTerm;
        obj['loan_type_description'] = loanTypeDescription;
        obj['maturity_date'] = maturityDate;
        obj['next_monthly_payment'] = nextMonthlyPayment;
        obj['next_payment_due_date'] = nextPaymentDueDate;
        obj['origination_date'] = originationDate;
        obj['origination_principal_amount'] = originationPrincipalAmount;
        obj['past_due_amount'] = pastDueAmount;
        obj['property_address'] = propertyAddress;
        obj['ytd_interest_paid'] = ytdInterestPaid;
        obj['ytd_principal_paid'] = ytdPrincipalPaid;
    }

    /**
     * Constructs a <code>MortgageLiability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MortgageLiability} obj Optional instance to populate.
     * @return {module:model/MortgageLiability} The populated <code>MortgageLiability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MortgageLiability();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('account_number')) {
                obj['account_number'] = ApiClient.convertToType(data['account_number'], 'String');
            }
            if (data.hasOwnProperty('current_late_fee')) {
                obj['current_late_fee'] = ApiClient.convertToType(data['current_late_fee'], 'Number');
            }
            if (data.hasOwnProperty('escrow_balance')) {
                obj['escrow_balance'] = ApiClient.convertToType(data['escrow_balance'], 'Number');
            }
            if (data.hasOwnProperty('has_pmi')) {
                obj['has_pmi'] = ApiClient.convertToType(data['has_pmi'], 'Boolean');
            }
            if (data.hasOwnProperty('has_prepayment_penalty')) {
                obj['has_prepayment_penalty'] = ApiClient.convertToType(data['has_prepayment_penalty'], 'Boolean');
            }
            if (data.hasOwnProperty('interest_rate')) {
                obj['interest_rate'] = MortgageInterestRate.constructFromObject(data['interest_rate']);
            }
            if (data.hasOwnProperty('last_payment_amount')) {
                obj['last_payment_amount'] = ApiClient.convertToType(data['last_payment_amount'], 'Number');
            }
            if (data.hasOwnProperty('last_payment_date')) {
                obj['last_payment_date'] = ApiClient.convertToType(data['last_payment_date'], 'Date');
            }
            if (data.hasOwnProperty('loan_term')) {
                obj['loan_term'] = ApiClient.convertToType(data['loan_term'], 'String');
            }
            if (data.hasOwnProperty('loan_type_description')) {
                obj['loan_type_description'] = ApiClient.convertToType(data['loan_type_description'], 'String');
            }
            if (data.hasOwnProperty('maturity_date')) {
                obj['maturity_date'] = ApiClient.convertToType(data['maturity_date'], 'Date');
            }
            if (data.hasOwnProperty('next_monthly_payment')) {
                obj['next_monthly_payment'] = ApiClient.convertToType(data['next_monthly_payment'], 'Number');
            }
            if (data.hasOwnProperty('next_payment_due_date')) {
                obj['next_payment_due_date'] = ApiClient.convertToType(data['next_payment_due_date'], 'Date');
            }
            if (data.hasOwnProperty('origination_date')) {
                obj['origination_date'] = ApiClient.convertToType(data['origination_date'], 'Date');
            }
            if (data.hasOwnProperty('origination_principal_amount')) {
                obj['origination_principal_amount'] = ApiClient.convertToType(data['origination_principal_amount'], 'Number');
            }
            if (data.hasOwnProperty('past_due_amount')) {
                obj['past_due_amount'] = ApiClient.convertToType(data['past_due_amount'], 'Number');
            }
            if (data.hasOwnProperty('property_address')) {
                obj['property_address'] = MortgagePropertyAddress.constructFromObject(data['property_address']);
            }
            if (data.hasOwnProperty('ytd_interest_paid')) {
                obj['ytd_interest_paid'] = ApiClient.convertToType(data['ytd_interest_paid'], 'Number');
            }
            if (data.hasOwnProperty('ytd_principal_paid')) {
                obj['ytd_principal_paid'] = ApiClient.convertToType(data['ytd_principal_paid'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MortgageLiability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MortgageLiability</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MortgageLiability.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['account_number'] && !(typeof data['account_number'] === 'string' || data['account_number'] instanceof String)) {
            throw new Error("Expected the field `account_number` to be a primitive type in the JSON string but got " + data['account_number']);
        }
        // ensure the json data is a string
        if (data['loan_term'] && !(typeof data['loan_term'] === 'string' || data['loan_term'] instanceof String)) {
            throw new Error("Expected the field `loan_term` to be a primitive type in the JSON string but got " + data['loan_term']);
        }
        // ensure the json data is a string
        if (data['loan_type_description'] && !(typeof data['loan_type_description'] === 'string' || data['loan_type_description'] instanceof String)) {
            throw new Error("Expected the field `loan_type_description` to be a primitive type in the JSON string but got " + data['loan_type_description']);
        }

        return true;
    }


}

MortgageLiability.RequiredProperties = ["account_id", "account_number", "current_late_fee", "escrow_balance", "has_pmi", "has_prepayment_penalty", "interest_rate", "last_payment_amount", "last_payment_date", "loan_term", "loan_type_description", "maturity_date", "next_monthly_payment", "next_payment_due_date", "origination_date", "origination_principal_amount", "past_due_amount", "property_address", "ytd_interest_paid", "ytd_principal_paid"];

/**
 * The ID of the account that this liability belongs to.
 * @member {String} account_id
 */
MortgageLiability.prototype['account_id'] = undefined;

/**
 * The account number of the loan.
 * @member {String} account_number
 */
MortgageLiability.prototype['account_number'] = undefined;

/**
 * The current outstanding amount charged for late payment.
 * @member {Number} current_late_fee
 */
MortgageLiability.prototype['current_late_fee'] = undefined;

/**
 * Total amount held in escrow to pay taxes and insurance on behalf of the borrower.
 * @member {Number} escrow_balance
 */
MortgageLiability.prototype['escrow_balance'] = undefined;

/**
 * Indicates whether the borrower has private mortgage insurance in effect.
 * @member {Boolean} has_pmi
 */
MortgageLiability.prototype['has_pmi'] = undefined;

/**
 * Indicates whether the borrower will pay a penalty for early payoff of mortgage.
 * @member {Boolean} has_prepayment_penalty
 */
MortgageLiability.prototype['has_prepayment_penalty'] = undefined;

/**
 * @member {module:model/MortgageInterestRate} interest_rate
 */
MortgageLiability.prototype['interest_rate'] = undefined;

/**
 * The amount of the last payment.
 * @member {Number} last_payment_amount
 */
MortgageLiability.prototype['last_payment_amount'] = undefined;

/**
 * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
 * @member {Date} last_payment_date
 */
MortgageLiability.prototype['last_payment_date'] = undefined;

/**
 * Full duration of mortgage as at origination (e.g. `10 year`).
 * @member {String} loan_term
 */
MortgageLiability.prototype['loan_term'] = undefined;

/**
 * Description of the type of loan, for example `conventional`, `fixed`, or `variable`. This field is provided directly from the loan servicer and does not have an enumerated set of possible values.
 * @member {String} loan_type_description
 */
MortgageLiability.prototype['loan_type_description'] = undefined;

/**
 * Original date on which mortgage is due in full. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
 * @member {Date} maturity_date
 */
MortgageLiability.prototype['maturity_date'] = undefined;

/**
 * The amount of the next payment.
 * @member {Number} next_monthly_payment
 */
MortgageLiability.prototype['next_monthly_payment'] = undefined;

/**
 * The due date for the next payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
 * @member {Date} next_payment_due_date
 */
MortgageLiability.prototype['next_payment_due_date'] = undefined;

/**
 * The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
 * @member {Date} origination_date
 */
MortgageLiability.prototype['origination_date'] = undefined;

/**
 * The original principal balance of the mortgage.
 * @member {Number} origination_principal_amount
 */
MortgageLiability.prototype['origination_principal_amount'] = undefined;

/**
 * Amount of loan (principal + interest) past due for payment.
 * @member {Number} past_due_amount
 */
MortgageLiability.prototype['past_due_amount'] = undefined;

/**
 * @member {module:model/MortgagePropertyAddress} property_address
 */
MortgageLiability.prototype['property_address'] = undefined;

/**
 * The year to date (YTD) interest paid.
 * @member {Number} ytd_interest_paid
 */
MortgageLiability.prototype['ytd_interest_paid'] = undefined;

/**
 * The YTD principal paid.
 * @member {Number} ytd_principal_paid
 */
MortgageLiability.prototype['ytd_principal_paid'] = undefined;






export default MortgageLiability;

