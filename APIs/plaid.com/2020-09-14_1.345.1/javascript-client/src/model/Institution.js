/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthMetadata from './AuthMetadata';
import CountryCode from './CountryCode';
import InstitutionStatus from './InstitutionStatus';
import PaymentInitiationMetadata from './PaymentInitiationMetadata';
import Products from './Products';

/**
 * The Institution model module.
 * @module model/Institution
 * @version 2020-09-14_1.345.1
 */
class Institution {
    /**
     * Constructs a new <code>Institution</code>.
     * Details relating to a specific financial institution
     * @alias module:model/Institution
     * @extends Object
     * @param countryCodes {Array.<module:model/CountryCode>} A list of the country codes supported by the institution.
     * @param institutionId {String} Unique identifier for the institution
     * @param name {String} The official name of the institution
     * @param oauth {Boolean} Indicates that the institution has a mandatory OAuth login flow. Note that `oauth` may be `false` even for institutions that support OAuth, if the institution is in the process of migrating to OAuth and some active Items still exist that do not use OAuth.
     * @param products {Array.<module:model/Products>} A list of the Plaid products supported by the institution. Note that only institutions that support Instant Auth will return `auth` in the product array; institutions that do not list `auth` may still support other Auth methods such as Instant Match or Automated Micro-deposit Verification. To identify institutions that support those methods, use the `auth_metadata` object. For more details, see [Full Auth coverage](https://plaid.com/docs/auth/coverage/).
     * @param routingNumbers {Array.<String>} A partial list of routing numbers associated with the institution. This list is provided for the purpose of looking up institutions by routing number. It is not comprehensive and should never be used as a complete list of routing numbers for an institution.
     */
    constructor(countryCodes, institutionId, name, oauth, products, routingNumbers) { 
        
        Institution.initialize(this, countryCodes, institutionId, name, oauth, products, routingNumbers);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, countryCodes, institutionId, name, oauth, products, routingNumbers) { 
        obj['country_codes'] = countryCodes;
        obj['institution_id'] = institutionId;
        obj['name'] = name;
        obj['oauth'] = oauth;
        obj['products'] = products;
        obj['routing_numbers'] = routingNumbers;
    }

    /**
     * Constructs a <code>Institution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Institution} obj Optional instance to populate.
     * @return {module:model/Institution} The populated <code>Institution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Institution();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('auth_metadata')) {
                obj['auth_metadata'] = AuthMetadata.constructFromObject(data['auth_metadata']);
            }
            if (data.hasOwnProperty('country_codes')) {
                obj['country_codes'] = ApiClient.convertToType(data['country_codes'], [CountryCode]);
            }
            if (data.hasOwnProperty('dtc_numbers')) {
                obj['dtc_numbers'] = ApiClient.convertToType(data['dtc_numbers'], ['String']);
            }
            if (data.hasOwnProperty('institution_id')) {
                obj['institution_id'] = ApiClient.convertToType(data['institution_id'], 'String');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('oauth')) {
                obj['oauth'] = ApiClient.convertToType(data['oauth'], 'Boolean');
            }
            if (data.hasOwnProperty('payment_initiation_metadata')) {
                obj['payment_initiation_metadata'] = PaymentInitiationMetadata.constructFromObject(data['payment_initiation_metadata']);
            }
            if (data.hasOwnProperty('primary_color')) {
                obj['primary_color'] = ApiClient.convertToType(data['primary_color'], 'String');
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [Products]);
            }
            if (data.hasOwnProperty('routing_numbers')) {
                obj['routing_numbers'] = ApiClient.convertToType(data['routing_numbers'], ['String']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = InstitutionStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Institution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Institution</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Institution.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['country_codes'])) {
            throw new Error("Expected the field `country_codes` to be an array in the JSON data but got " + data['country_codes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dtc_numbers'])) {
            throw new Error("Expected the field `dtc_numbers` to be an array in the JSON data but got " + data['dtc_numbers']);
        }
        // ensure the json data is a string
        if (data['institution_id'] && !(typeof data['institution_id'] === 'string' || data['institution_id'] instanceof String)) {
            throw new Error("Expected the field `institution_id` to be a primitive type in the JSON string but got " + data['institution_id']);
        }
        // ensure the json data is a string
        if (data['logo'] && !(typeof data['logo'] === 'string' || data['logo'] instanceof String)) {
            throw new Error("Expected the field `logo` to be a primitive type in the JSON string but got " + data['logo']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['primary_color'] && !(typeof data['primary_color'] === 'string' || data['primary_color'] instanceof String)) {
            throw new Error("Expected the field `primary_color` to be a primitive type in the JSON string but got " + data['primary_color']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['products'])) {
            throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['routing_numbers'])) {
            throw new Error("Expected the field `routing_numbers` to be an array in the JSON data but got " + data['routing_numbers']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Institution.RequiredProperties = ["country_codes", "institution_id", "name", "oauth", "products", "routing_numbers"];

/**
 * @member {module:model/AuthMetadata} auth_metadata
 */
Institution.prototype['auth_metadata'] = undefined;

/**
 * A list of the country codes supported by the institution.
 * @member {Array.<module:model/CountryCode>} country_codes
 */
Institution.prototype['country_codes'] = undefined;

/**
 * A partial list of DTC numbers associated with the institution.
 * @member {Array.<String>} dtc_numbers
 */
Institution.prototype['dtc_numbers'] = undefined;

/**
 * Unique identifier for the institution
 * @member {String} institution_id
 */
Institution.prototype['institution_id'] = undefined;

/**
 * Base64 encoded representation of the institution's logo, returned as a base64 encoded 152x152 PNG. Not all institutions' logos are available.
 * @member {String} logo
 */
Institution.prototype['logo'] = undefined;

/**
 * The official name of the institution
 * @member {String} name
 */
Institution.prototype['name'] = undefined;

/**
 * Indicates that the institution has a mandatory OAuth login flow. Note that `oauth` may be `false` even for institutions that support OAuth, if the institution is in the process of migrating to OAuth and some active Items still exist that do not use OAuth.
 * @member {Boolean} oauth
 */
Institution.prototype['oauth'] = undefined;

/**
 * @member {module:model/PaymentInitiationMetadata} payment_initiation_metadata
 */
Institution.prototype['payment_initiation_metadata'] = undefined;

/**
 * Hexadecimal representation of the primary color used by the institution
 * @member {String} primary_color
 */
Institution.prototype['primary_color'] = undefined;

/**
 * A list of the Plaid products supported by the institution. Note that only institutions that support Instant Auth will return `auth` in the product array; institutions that do not list `auth` may still support other Auth methods such as Instant Match or Automated Micro-deposit Verification. To identify institutions that support those methods, use the `auth_metadata` object. For more details, see [Full Auth coverage](https://plaid.com/docs/auth/coverage/).
 * @member {Array.<module:model/Products>} products
 */
Institution.prototype['products'] = undefined;

/**
 * A partial list of routing numbers associated with the institution. This list is provided for the purpose of looking up institutions by routing number. It is not comprehensive and should never be used as a complete list of routing numbers for an institution.
 * @member {Array.<String>} routing_numbers
 */
Institution.prototype['routing_numbers'] = undefined;

/**
 * @member {module:model/InstitutionStatus} status
 */
Institution.prototype['status'] = undefined;

/**
 * The URL for the institution's website
 * @member {String} url
 */
Institution.prototype['url'] = undefined;






export default Institution;

