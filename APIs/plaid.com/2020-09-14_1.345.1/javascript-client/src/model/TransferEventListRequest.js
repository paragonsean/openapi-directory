/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransferEventListTransferType from './TransferEventListTransferType';
import TransferEventType from './TransferEventType';

/**
 * The TransferEventListRequest model module.
 * @module model/TransferEventListRequest
 * @version 2020-09-14_1.345.1
 */
class TransferEventListRequest {
    /**
     * Constructs a new <code>TransferEventListRequest</code>.
     * Defines the request schema for &#x60;/transfer/event/list&#x60;
     * @alias module:model/TransferEventListRequest
     */
    constructor() { 
        
        TransferEventListRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['count'] = 25;
        obj['offset'] = 0;
    }

    /**
     * Constructs a <code>TransferEventListRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferEventListRequest} obj Optional instance to populate.
     * @return {module:model/TransferEventListRequest} The populated <code>TransferEventListRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferEventListRequest();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('end_date')) {
                obj['end_date'] = ApiClient.convertToType(data['end_date'], 'Date');
            }
            if (data.hasOwnProperty('event_types')) {
                obj['event_types'] = ApiClient.convertToType(data['event_types'], [TransferEventType]);
            }
            if (data.hasOwnProperty('funding_account_id')) {
                obj['funding_account_id'] = ApiClient.convertToType(data['funding_account_id'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('origination_account_id')) {
                obj['origination_account_id'] = ApiClient.convertToType(data['origination_account_id'], 'String');
            }
            if (data.hasOwnProperty('originator_client_id')) {
                obj['originator_client_id'] = ApiClient.convertToType(data['originator_client_id'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
            }
            if (data.hasOwnProperty('sweep_id')) {
                obj['sweep_id'] = ApiClient.convertToType(data['sweep_id'], 'String');
            }
            if (data.hasOwnProperty('transfer_id')) {
                obj['transfer_id'] = ApiClient.convertToType(data['transfer_id'], 'String');
            }
            if (data.hasOwnProperty('transfer_type')) {
                obj['transfer_type'] = TransferEventListTransferType.constructFromObject(data['transfer_type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferEventListRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferEventListRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['event_types'])) {
            throw new Error("Expected the field `event_types` to be an array in the JSON data but got " + data['event_types']);
        }
        // ensure the json data is a string
        if (data['funding_account_id'] && !(typeof data['funding_account_id'] === 'string' || data['funding_account_id'] instanceof String)) {
            throw new Error("Expected the field `funding_account_id` to be a primitive type in the JSON string but got " + data['funding_account_id']);
        }
        // ensure the json data is a string
        if (data['origination_account_id'] && !(typeof data['origination_account_id'] === 'string' || data['origination_account_id'] instanceof String)) {
            throw new Error("Expected the field `origination_account_id` to be a primitive type in the JSON string but got " + data['origination_account_id']);
        }
        // ensure the json data is a string
        if (data['originator_client_id'] && !(typeof data['originator_client_id'] === 'string' || data['originator_client_id'] instanceof String)) {
            throw new Error("Expected the field `originator_client_id` to be a primitive type in the JSON string but got " + data['originator_client_id']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // ensure the json data is a string
        if (data['sweep_id'] && !(typeof data['sweep_id'] === 'string' || data['sweep_id'] instanceof String)) {
            throw new Error("Expected the field `sweep_id` to be a primitive type in the JSON string but got " + data['sweep_id']);
        }
        // ensure the json data is a string
        if (data['transfer_id'] && !(typeof data['transfer_id'] === 'string' || data['transfer_id'] instanceof String)) {
            throw new Error("Expected the field `transfer_id` to be a primitive type in the JSON string but got " + data['transfer_id']);
        }

        return true;
    }


}



/**
 * The account ID to get events for all transactions to/from an account.
 * @member {String} account_id
 */
TransferEventListRequest.prototype['account_id'] = undefined;

/**
 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
 * @member {String} client_id
 */
TransferEventListRequest.prototype['client_id'] = undefined;

/**
 * The maximum number of transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.
 * @member {Number} count
 * @default 25
 */
TransferEventListRequest.prototype['count'] = 25;

/**
 * The end datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
 * @member {Date} end_date
 */
TransferEventListRequest.prototype['end_date'] = undefined;

/**
 * Filter events by event type.
 * @member {Array.<module:model/TransferEventType>} event_types
 */
TransferEventListRequest.prototype['event_types'] = undefined;

/**
 * Filter transfer events to only those with the specified `funding_account_id`.
 * @member {String} funding_account_id
 */
TransferEventListRequest.prototype['funding_account_id'] = undefined;

/**
 * The offset into the list of transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 events will be returned.
 * @member {Number} offset
 * @default 0
 */
TransferEventListRequest.prototype['offset'] = 0;

/**
 * The origination account ID to get events for transfers from a specific origination account.
 * @member {String} origination_account_id
 */
TransferEventListRequest.prototype['origination_account_id'] = undefined;

/**
 * Filter transfer events to only those with the specified originator client.
 * @member {String} originator_client_id
 */
TransferEventListRequest.prototype['originator_client_id'] = undefined;

/**
 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
 * @member {String} secret
 */
TransferEventListRequest.prototype['secret'] = undefined;

/**
 * The start datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
 * @member {Date} start_date
 */
TransferEventListRequest.prototype['start_date'] = undefined;

/**
 * Plaidâ€™s unique identifier for a sweep.
 * @member {String} sweep_id
 */
TransferEventListRequest.prototype['sweep_id'] = undefined;

/**
 * Plaidâ€™s unique identifier for a transfer.
 * @member {String} transfer_id
 */
TransferEventListRequest.prototype['transfer_id'] = undefined;

/**
 * @member {module:model/TransferEventListTransferType} transfer_type
 */
TransferEventListRequest.prototype['transfer_type'] = undefined;






export default TransferEventListRequest;

