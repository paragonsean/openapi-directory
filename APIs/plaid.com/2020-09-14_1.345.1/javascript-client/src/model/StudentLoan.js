/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PSLFStatus from './PSLFStatus';
import ServicerAddressData from './ServicerAddressData';
import StudentLoanStatus from './StudentLoanStatus';
import StudentRepaymentPlan from './StudentRepaymentPlan';

/**
 * The StudentLoan model module.
 * @module model/StudentLoan
 * @version 2020-09-14_1.345.1
 */
class StudentLoan {
    /**
     * Constructs a new <code>StudentLoan</code>.
     * Contains details about a student loan account
     * @alias module:model/StudentLoan
     * @extends Object
     * @param accountId {String} The ID of the account that this liability belongs to.
     * @param accountNumber {String} The account number of the loan. For some institutions, this may be a masked version of the number (e.g., the last 4 digits instead of the entire number).
     * @param disbursementDates {Array.<Date>} The dates on which loaned funds were disbursed or will be disbursed. These are often in the past. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @param expectedPayoffDate {Date} The date when the student loan is expected to be paid off. Availability for this field is limited. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @param guarantor {String} The guarantor of the student loan.
     * @param interestRatePercentage {Number} The interest rate on the loan as a percentage.
     * @param isOverdue {Boolean} `true` if a payment is currently overdue. Availability for this field is limited.
     * @param lastPaymentAmount {Number} The amount of the last payment.
     * @param lastPaymentDate {Date} The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @param lastStatementIssueDate {Date} The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @param loanName {String} The type of loan, e.g., \"Consolidation Loans\".
     * @param loanStatus {module:model/StudentLoanStatus} 
     * @param minimumPaymentAmount {Number} The minimum payment due for the next billing cycle. There are some exceptions: Some institutions require a minimum payment across all loans associated with an account number. Our API presents that same minimum payment amount on each loan. The institutions that do this are: Great Lakes ( `ins_116861`), Firstmark (`ins_116295`), Commonbond Firstmark Services (`ins_116950`), Nelnet (`ins_116528`), EdFinancial Services (`ins_116304`), Granite State (`ins_116308`), and Oklahoma Student Loan Authority (`ins_116945`). Firstmark (`ins_116295` ) and Navient (`ins_116248`) will display as $0 if there is an autopay program in effect.
     * @param nextPaymentDueDate {Date} The due date for the next payment. The due date is `null` if a payment is not expected. A payment is not expected if `loan_status.type` is `deferment`, `in_school`, `consolidated`, `paid in full`, or `transferred`. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
     * @param originationDate {Date} The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). 
     * @param originationPrincipalAmount {Number} The original principal balance of the loan.
     * @param outstandingInterestAmount {Number} The total dollar amount of the accrued interest balance. For Sallie Mae ( `ins_116944`), this amount is included in the current balance of the loan, so this field will return as `null`.
     * @param paymentReferenceNumber {String} The relevant account number that should be used to reference this loan for payments. In the majority of cases, `payment_reference_number` will match `account_number,` but in some institutions, such as Great Lakes (`ins_116861`), it will be different.
     * @param pslfStatus {module:model/PSLFStatus} 
     * @param repaymentPlan {module:model/StudentRepaymentPlan} 
     * @param sequenceNumber {String} The sequence number of the student loan. Heartland ECSI (`ins_116948`) does not make this field available.
     * @param servicerAddress {module:model/ServicerAddressData} 
     * @param ytdInterestPaid {Number} The year to date (YTD) interest paid. Availability for this field is limited.
     * @param ytdPrincipalPaid {Number} The year to date (YTD) principal paid. Availability for this field is limited.
     */
    constructor(accountId, accountNumber, disbursementDates, expectedPayoffDate, guarantor, interestRatePercentage, isOverdue, lastPaymentAmount, lastPaymentDate, lastStatementIssueDate, loanName, loanStatus, minimumPaymentAmount, nextPaymentDueDate, originationDate, originationPrincipalAmount, outstandingInterestAmount, paymentReferenceNumber, pslfStatus, repaymentPlan, sequenceNumber, servicerAddress, ytdInterestPaid, ytdPrincipalPaid) { 
        
        StudentLoan.initialize(this, accountId, accountNumber, disbursementDates, expectedPayoffDate, guarantor, interestRatePercentage, isOverdue, lastPaymentAmount, lastPaymentDate, lastStatementIssueDate, loanName, loanStatus, minimumPaymentAmount, nextPaymentDueDate, originationDate, originationPrincipalAmount, outstandingInterestAmount, paymentReferenceNumber, pslfStatus, repaymentPlan, sequenceNumber, servicerAddress, ytdInterestPaid, ytdPrincipalPaid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, accountNumber, disbursementDates, expectedPayoffDate, guarantor, interestRatePercentage, isOverdue, lastPaymentAmount, lastPaymentDate, lastStatementIssueDate, loanName, loanStatus, minimumPaymentAmount, nextPaymentDueDate, originationDate, originationPrincipalAmount, outstandingInterestAmount, paymentReferenceNumber, pslfStatus, repaymentPlan, sequenceNumber, servicerAddress, ytdInterestPaid, ytdPrincipalPaid) { 
        obj['account_id'] = accountId;
        obj['account_number'] = accountNumber;
        obj['disbursement_dates'] = disbursementDates;
        obj['expected_payoff_date'] = expectedPayoffDate;
        obj['guarantor'] = guarantor;
        obj['interest_rate_percentage'] = interestRatePercentage;
        obj['is_overdue'] = isOverdue;
        obj['last_payment_amount'] = lastPaymentAmount;
        obj['last_payment_date'] = lastPaymentDate;
        obj['last_statement_issue_date'] = lastStatementIssueDate;
        obj['loan_name'] = loanName;
        obj['loan_status'] = loanStatus;
        obj['minimum_payment_amount'] = minimumPaymentAmount;
        obj['next_payment_due_date'] = nextPaymentDueDate;
        obj['origination_date'] = originationDate;
        obj['origination_principal_amount'] = originationPrincipalAmount;
        obj['outstanding_interest_amount'] = outstandingInterestAmount;
        obj['payment_reference_number'] = paymentReferenceNumber;
        obj['pslf_status'] = pslfStatus;
        obj['repayment_plan'] = repaymentPlan;
        obj['sequence_number'] = sequenceNumber;
        obj['servicer_address'] = servicerAddress;
        obj['ytd_interest_paid'] = ytdInterestPaid;
        obj['ytd_principal_paid'] = ytdPrincipalPaid;
    }

    /**
     * Constructs a <code>StudentLoan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StudentLoan} obj Optional instance to populate.
     * @return {module:model/StudentLoan} The populated <code>StudentLoan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StudentLoan();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('account_number')) {
                obj['account_number'] = ApiClient.convertToType(data['account_number'], 'String');
            }
            if (data.hasOwnProperty('disbursement_dates')) {
                obj['disbursement_dates'] = ApiClient.convertToType(data['disbursement_dates'], ['Date']);
            }
            if (data.hasOwnProperty('expected_payoff_date')) {
                obj['expected_payoff_date'] = ApiClient.convertToType(data['expected_payoff_date'], 'Date');
            }
            if (data.hasOwnProperty('guarantor')) {
                obj['guarantor'] = ApiClient.convertToType(data['guarantor'], 'String');
            }
            if (data.hasOwnProperty('interest_rate_percentage')) {
                obj['interest_rate_percentage'] = ApiClient.convertToType(data['interest_rate_percentage'], 'Number');
            }
            if (data.hasOwnProperty('is_overdue')) {
                obj['is_overdue'] = ApiClient.convertToType(data['is_overdue'], 'Boolean');
            }
            if (data.hasOwnProperty('last_payment_amount')) {
                obj['last_payment_amount'] = ApiClient.convertToType(data['last_payment_amount'], 'Number');
            }
            if (data.hasOwnProperty('last_payment_date')) {
                obj['last_payment_date'] = ApiClient.convertToType(data['last_payment_date'], 'Date');
            }
            if (data.hasOwnProperty('last_statement_issue_date')) {
                obj['last_statement_issue_date'] = ApiClient.convertToType(data['last_statement_issue_date'], 'Date');
            }
            if (data.hasOwnProperty('loan_name')) {
                obj['loan_name'] = ApiClient.convertToType(data['loan_name'], 'String');
            }
            if (data.hasOwnProperty('loan_status')) {
                obj['loan_status'] = StudentLoanStatus.constructFromObject(data['loan_status']);
            }
            if (data.hasOwnProperty('minimum_payment_amount')) {
                obj['minimum_payment_amount'] = ApiClient.convertToType(data['minimum_payment_amount'], 'Number');
            }
            if (data.hasOwnProperty('next_payment_due_date')) {
                obj['next_payment_due_date'] = ApiClient.convertToType(data['next_payment_due_date'], 'Date');
            }
            if (data.hasOwnProperty('origination_date')) {
                obj['origination_date'] = ApiClient.convertToType(data['origination_date'], 'Date');
            }
            if (data.hasOwnProperty('origination_principal_amount')) {
                obj['origination_principal_amount'] = ApiClient.convertToType(data['origination_principal_amount'], 'Number');
            }
            if (data.hasOwnProperty('outstanding_interest_amount')) {
                obj['outstanding_interest_amount'] = ApiClient.convertToType(data['outstanding_interest_amount'], 'Number');
            }
            if (data.hasOwnProperty('payment_reference_number')) {
                obj['payment_reference_number'] = ApiClient.convertToType(data['payment_reference_number'], 'String');
            }
            if (data.hasOwnProperty('pslf_status')) {
                obj['pslf_status'] = PSLFStatus.constructFromObject(data['pslf_status']);
            }
            if (data.hasOwnProperty('repayment_plan')) {
                obj['repayment_plan'] = StudentRepaymentPlan.constructFromObject(data['repayment_plan']);
            }
            if (data.hasOwnProperty('sequence_number')) {
                obj['sequence_number'] = ApiClient.convertToType(data['sequence_number'], 'String');
            }
            if (data.hasOwnProperty('servicer_address')) {
                obj['servicer_address'] = ServicerAddressData.constructFromObject(data['servicer_address']);
            }
            if (data.hasOwnProperty('ytd_interest_paid')) {
                obj['ytd_interest_paid'] = ApiClient.convertToType(data['ytd_interest_paid'], 'Number');
            }
            if (data.hasOwnProperty('ytd_principal_paid')) {
                obj['ytd_principal_paid'] = ApiClient.convertToType(data['ytd_principal_paid'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StudentLoan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StudentLoan</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StudentLoan.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['account_number'] && !(typeof data['account_number'] === 'string' || data['account_number'] instanceof String)) {
            throw new Error("Expected the field `account_number` to be a primitive type in the JSON string but got " + data['account_number']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['disbursement_dates'])) {
            throw new Error("Expected the field `disbursement_dates` to be an array in the JSON data but got " + data['disbursement_dates']);
        }
        // ensure the json data is a string
        if (data['guarantor'] && !(typeof data['guarantor'] === 'string' || data['guarantor'] instanceof String)) {
            throw new Error("Expected the field `guarantor` to be a primitive type in the JSON string but got " + data['guarantor']);
        }
        // ensure the json data is a string
        if (data['loan_name'] && !(typeof data['loan_name'] === 'string' || data['loan_name'] instanceof String)) {
            throw new Error("Expected the field `loan_name` to be a primitive type in the JSON string but got " + data['loan_name']);
        }
        // ensure the json data is a string
        if (data['payment_reference_number'] && !(typeof data['payment_reference_number'] === 'string' || data['payment_reference_number'] instanceof String)) {
            throw new Error("Expected the field `payment_reference_number` to be a primitive type in the JSON string but got " + data['payment_reference_number']);
        }
        // ensure the json data is a string
        if (data['sequence_number'] && !(typeof data['sequence_number'] === 'string' || data['sequence_number'] instanceof String)) {
            throw new Error("Expected the field `sequence_number` to be a primitive type in the JSON string but got " + data['sequence_number']);
        }

        return true;
    }


}

StudentLoan.RequiredProperties = ["account_id", "account_number", "disbursement_dates", "expected_payoff_date", "guarantor", "interest_rate_percentage", "is_overdue", "last_payment_amount", "last_payment_date", "last_statement_issue_date", "loan_name", "loan_status", "minimum_payment_amount", "next_payment_due_date", "origination_date", "origination_principal_amount", "outstanding_interest_amount", "payment_reference_number", "pslf_status", "repayment_plan", "sequence_number", "servicer_address", "ytd_interest_paid", "ytd_principal_paid"];

/**
 * The ID of the account that this liability belongs to.
 * @member {String} account_id
 */
StudentLoan.prototype['account_id'] = undefined;

/**
 * The account number of the loan. For some institutions, this may be a masked version of the number (e.g., the last 4 digits instead of the entire number).
 * @member {String} account_number
 */
StudentLoan.prototype['account_number'] = undefined;

/**
 * The dates on which loaned funds were disbursed or will be disbursed. These are often in the past. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
 * @member {Array.<Date>} disbursement_dates
 */
StudentLoan.prototype['disbursement_dates'] = undefined;

/**
 * The date when the student loan is expected to be paid off. Availability for this field is limited. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
 * @member {Date} expected_payoff_date
 */
StudentLoan.prototype['expected_payoff_date'] = undefined;

/**
 * The guarantor of the student loan.
 * @member {String} guarantor
 */
StudentLoan.prototype['guarantor'] = undefined;

/**
 * The interest rate on the loan as a percentage.
 * @member {Number} interest_rate_percentage
 */
StudentLoan.prototype['interest_rate_percentage'] = undefined;

/**
 * `true` if a payment is currently overdue. Availability for this field is limited.
 * @member {Boolean} is_overdue
 */
StudentLoan.prototype['is_overdue'] = undefined;

/**
 * The amount of the last payment.
 * @member {Number} last_payment_amount
 */
StudentLoan.prototype['last_payment_amount'] = undefined;

/**
 * The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
 * @member {Date} last_payment_date
 */
StudentLoan.prototype['last_payment_date'] = undefined;

/**
 * The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
 * @member {Date} last_statement_issue_date
 */
StudentLoan.prototype['last_statement_issue_date'] = undefined;

/**
 * The type of loan, e.g., \"Consolidation Loans\".
 * @member {String} loan_name
 */
StudentLoan.prototype['loan_name'] = undefined;

/**
 * @member {module:model/StudentLoanStatus} loan_status
 */
StudentLoan.prototype['loan_status'] = undefined;

/**
 * The minimum payment due for the next billing cycle. There are some exceptions: Some institutions require a minimum payment across all loans associated with an account number. Our API presents that same minimum payment amount on each loan. The institutions that do this are: Great Lakes ( `ins_116861`), Firstmark (`ins_116295`), Commonbond Firstmark Services (`ins_116950`), Nelnet (`ins_116528`), EdFinancial Services (`ins_116304`), Granite State (`ins_116308`), and Oklahoma Student Loan Authority (`ins_116945`). Firstmark (`ins_116295` ) and Navient (`ins_116248`) will display as $0 if there is an autopay program in effect.
 * @member {Number} minimum_payment_amount
 */
StudentLoan.prototype['minimum_payment_amount'] = undefined;

/**
 * The due date for the next payment. The due date is `null` if a payment is not expected. A payment is not expected if `loan_status.type` is `deferment`, `in_school`, `consolidated`, `paid in full`, or `transferred`. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
 * @member {Date} next_payment_due_date
 */
StudentLoan.prototype['next_payment_due_date'] = undefined;

/**
 * The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). 
 * @member {Date} origination_date
 */
StudentLoan.prototype['origination_date'] = undefined;

/**
 * The original principal balance of the loan.
 * @member {Number} origination_principal_amount
 */
StudentLoan.prototype['origination_principal_amount'] = undefined;

/**
 * The total dollar amount of the accrued interest balance. For Sallie Mae ( `ins_116944`), this amount is included in the current balance of the loan, so this field will return as `null`.
 * @member {Number} outstanding_interest_amount
 */
StudentLoan.prototype['outstanding_interest_amount'] = undefined;

/**
 * The relevant account number that should be used to reference this loan for payments. In the majority of cases, `payment_reference_number` will match `account_number,` but in some institutions, such as Great Lakes (`ins_116861`), it will be different.
 * @member {String} payment_reference_number
 */
StudentLoan.prototype['payment_reference_number'] = undefined;

/**
 * @member {module:model/PSLFStatus} pslf_status
 */
StudentLoan.prototype['pslf_status'] = undefined;

/**
 * @member {module:model/StudentRepaymentPlan} repayment_plan
 */
StudentLoan.prototype['repayment_plan'] = undefined;

/**
 * The sequence number of the student loan. Heartland ECSI (`ins_116948`) does not make this field available.
 * @member {String} sequence_number
 */
StudentLoan.prototype['sequence_number'] = undefined;

/**
 * @member {module:model/ServicerAddressData} servicer_address
 */
StudentLoan.prototype['servicer_address'] = undefined;

/**
 * The year to date (YTD) interest paid. Availability for this field is limited.
 * @member {Number} ytd_interest_paid
 */
StudentLoan.prototype['ytd_interest_paid'] = undefined;

/**
 * The year to date (YTD) principal paid. Availability for this field is limited.
 * @member {Number} ytd_principal_paid
 */
StudentLoan.prototype['ytd_principal_paid'] = undefined;






export default StudentLoan;

