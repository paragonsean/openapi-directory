/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductStatusBreakdown model module.
 * @module model/ProductStatusBreakdown
 * @version 2020-09-14_1.345.1
 */
class ProductStatusBreakdown {
    /**
     * Constructs a new <code>ProductStatusBreakdown</code>.
     * A detailed breakdown of the institution&#39;s performance for a request type. The values for &#x60;success&#x60;, &#x60;error_plaid&#x60;, and &#x60;error_institution&#x60; sum to 1. The time range used for calculating the breakdown may range from the most recent few minutes to the past six hours. In general, smaller institutions will show status that was calculated over a longer period of time. For Investment updates, which are refreshed less frequently, the period assessed may be 24 hours or more. For more details, see [Institution status details](https://plaid.com/docs/account/activity/#institution-status-details).
     * @alias module:model/ProductStatusBreakdown
     * @extends Object
     * @param errorInstitution {Number} The percentage of logins that are failing due to an issue in the institution's system, expressed as a decimal.
     * @param errorPlaid {Number} The percentage of logins that are failing due to an internal Plaid issue, expressed as a decimal. 
     * @param success {Number} The percentage of login attempts that are successful, expressed as a decimal.
     */
    constructor(errorInstitution, errorPlaid, success) { 
        
        ProductStatusBreakdown.initialize(this, errorInstitution, errorPlaid, success);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, errorInstitution, errorPlaid, success) { 
        obj['error_institution'] = errorInstitution;
        obj['error_plaid'] = errorPlaid;
        obj['success'] = success;
    }

    /**
     * Constructs a <code>ProductStatusBreakdown</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductStatusBreakdown} obj Optional instance to populate.
     * @return {module:model/ProductStatusBreakdown} The populated <code>ProductStatusBreakdown</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductStatusBreakdown();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('error_institution')) {
                obj['error_institution'] = ApiClient.convertToType(data['error_institution'], 'Number');
            }
            if (data.hasOwnProperty('error_plaid')) {
                obj['error_plaid'] = ApiClient.convertToType(data['error_plaid'], 'Number');
            }
            if (data.hasOwnProperty('refresh_interval')) {
                obj['refresh_interval'] = ApiClient.convertToType(data['refresh_interval'], 'String');
            }
            if (data.hasOwnProperty('success')) {
                obj['success'] = ApiClient.convertToType(data['success'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductStatusBreakdown</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductStatusBreakdown</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProductStatusBreakdown.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['refresh_interval'] && !(typeof data['refresh_interval'] === 'string' || data['refresh_interval'] instanceof String)) {
            throw new Error("Expected the field `refresh_interval` to be a primitive type in the JSON string but got " + data['refresh_interval']);
        }

        return true;
    }


}

ProductStatusBreakdown.RequiredProperties = ["error_institution", "error_plaid", "success"];

/**
 * The percentage of logins that are failing due to an issue in the institution's system, expressed as a decimal.
 * @member {Number} error_institution
 */
ProductStatusBreakdown.prototype['error_institution'] = undefined;

/**
 * The percentage of logins that are failing due to an internal Plaid issue, expressed as a decimal. 
 * @member {Number} error_plaid
 */
ProductStatusBreakdown.prototype['error_plaid'] = undefined;

/**
 * The `refresh_interval` may be `DELAYED` or `STOPPED` even when the success rate is high. This value is only returned for Transactions status breakdowns.
 * @member {module:model/ProductStatusBreakdown.RefreshIntervalEnum} refresh_interval
 */
ProductStatusBreakdown.prototype['refresh_interval'] = undefined;

/**
 * The percentage of login attempts that are successful, expressed as a decimal.
 * @member {Number} success
 */
ProductStatusBreakdown.prototype['success'] = undefined;





/**
 * Allowed values for the <code>refresh_interval</code> property.
 * @enum {String}
 * @readonly
 */
ProductStatusBreakdown['RefreshIntervalEnum'] = {

    /**
     * value: "NORMAL"
     * @const
     */
    "NORMAL": "NORMAL",

    /**
     * value: "DELAYED"
     * @const
     */
    "DELAYED": "DELAYED",

    /**
     * value: "STOPPED"
     * @const
     */
    "STOPPED": "STOPPED"
};



export default ProductStatusBreakdown;

