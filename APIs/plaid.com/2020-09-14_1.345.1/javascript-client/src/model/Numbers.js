/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Numbers model module.
 * @module model/Numbers
 * @version 2020-09-14_1.345.1
 */
class Numbers {
    /**
     * Constructs a new <code>Numbers</code>.
     * Account and bank identifier number data used to configure the test account. All values are optional.
     * @alias module:model/Numbers
     * @extends Object
     */
    constructor() { 
        
        Numbers.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Numbers</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Numbers} obj Optional instance to populate.
     * @return {module:model/Numbers} The populated <code>Numbers</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Numbers();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('ach_routing')) {
                obj['ach_routing'] = ApiClient.convertToType(data['ach_routing'], 'String');
            }
            if (data.hasOwnProperty('ach_wire_routing')) {
                obj['ach_wire_routing'] = ApiClient.convertToType(data['ach_wire_routing'], 'String');
            }
            if (data.hasOwnProperty('bacs_sort_code')) {
                obj['bacs_sort_code'] = ApiClient.convertToType(data['bacs_sort_code'], 'String');
            }
            if (data.hasOwnProperty('eft_branch')) {
                obj['eft_branch'] = ApiClient.convertToType(data['eft_branch'], 'String');
            }
            if (data.hasOwnProperty('eft_institution')) {
                obj['eft_institution'] = ApiClient.convertToType(data['eft_institution'], 'String');
            }
            if (data.hasOwnProperty('international_bic')) {
                obj['international_bic'] = ApiClient.convertToType(data['international_bic'], 'String');
            }
            if (data.hasOwnProperty('international_iban')) {
                obj['international_iban'] = ApiClient.convertToType(data['international_iban'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Numbers</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Numbers</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        // ensure the json data is a string
        if (data['ach_routing'] && !(typeof data['ach_routing'] === 'string' || data['ach_routing'] instanceof String)) {
            throw new Error("Expected the field `ach_routing` to be a primitive type in the JSON string but got " + data['ach_routing']);
        }
        // ensure the json data is a string
        if (data['ach_wire_routing'] && !(typeof data['ach_wire_routing'] === 'string' || data['ach_wire_routing'] instanceof String)) {
            throw new Error("Expected the field `ach_wire_routing` to be a primitive type in the JSON string but got " + data['ach_wire_routing']);
        }
        // ensure the json data is a string
        if (data['bacs_sort_code'] && !(typeof data['bacs_sort_code'] === 'string' || data['bacs_sort_code'] instanceof String)) {
            throw new Error("Expected the field `bacs_sort_code` to be a primitive type in the JSON string but got " + data['bacs_sort_code']);
        }
        // ensure the json data is a string
        if (data['eft_branch'] && !(typeof data['eft_branch'] === 'string' || data['eft_branch'] instanceof String)) {
            throw new Error("Expected the field `eft_branch` to be a primitive type in the JSON string but got " + data['eft_branch']);
        }
        // ensure the json data is a string
        if (data['eft_institution'] && !(typeof data['eft_institution'] === 'string' || data['eft_institution'] instanceof String)) {
            throw new Error("Expected the field `eft_institution` to be a primitive type in the JSON string but got " + data['eft_institution']);
        }
        // ensure the json data is a string
        if (data['international_bic'] && !(typeof data['international_bic'] === 'string' || data['international_bic'] instanceof String)) {
            throw new Error("Expected the field `international_bic` to be a primitive type in the JSON string but got " + data['international_bic']);
        }
        // ensure the json data is a string
        if (data['international_iban'] && !(typeof data['international_iban'] === 'string' || data['international_iban'] instanceof String)) {
            throw new Error("Expected the field `international_iban` to be a primitive type in the JSON string but got " + data['international_iban']);
        }

        return true;
    }


}



/**
 * Will be used for the account number.
 * @member {String} account
 */
Numbers.prototype['account'] = undefined;

/**
 * Must be a valid ACH routing number.
 * @member {String} ach_routing
 */
Numbers.prototype['ach_routing'] = undefined;

/**
 * Must be a valid wire transfer routing number.
 * @member {String} ach_wire_routing
 */
Numbers.prototype['ach_wire_routing'] = undefined;

/**
 * BACS sort code
 * @member {String} bacs_sort_code
 */
Numbers.prototype['bacs_sort_code'] = undefined;

/**
 * EFT branch number. Must be specified alongside `eft_institution`.
 * @member {String} eft_branch
 */
Numbers.prototype['eft_branch'] = undefined;

/**
 * EFT institution number. Must be specified alongside `eft_branch`.
 * @member {String} eft_institution
 */
Numbers.prototype['eft_institution'] = undefined;

/**
 * Bank identifier code (BIC). Must be specified alongside `international_iban`.
 * @member {String} international_bic
 */
Numbers.prototype['international_bic'] = undefined;

/**
 * International bank account number (IBAN). If no account number is specified via `account`, will also be used as the account number by default. Must be specified alongside `international_bic`.
 * @member {String} international_iban
 */
Numbers.prototype['international_iban'] = undefined;






export default Numbers;

