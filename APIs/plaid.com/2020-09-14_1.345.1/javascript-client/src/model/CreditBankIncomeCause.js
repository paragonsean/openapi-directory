/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreditBankIncomeErrorType from './CreditBankIncomeErrorType';

/**
 * The CreditBankIncomeCause model module.
 * @module model/CreditBankIncomeCause
 * @version 2020-09-14_1.345.1
 */
class CreditBankIncomeCause {
    /**
     * Constructs a new <code>CreditBankIncomeCause</code>.
     * An error object and associated &#x60;item_id&#x60; used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items.
     * @alias module:model/CreditBankIncomeCause
     * @param displayMessage {String} A user-friendly representation of the error code. null if the error is not related to user action. This may change over time and is not safe for programmatic use.
     * @param errorCode {String} We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. Error fields will be `null` if no error has occurred.
     * @param errorMessage {String} A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
     * @param errorType {module:model/CreditBankIncomeErrorType} 
     * @param itemId {String} The `item_id` of the Item associated with this warning.
     */
    constructor(displayMessage, errorCode, errorMessage, errorType, itemId) { 
        
        CreditBankIncomeCause.initialize(this, displayMessage, errorCode, errorMessage, errorType, itemId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, displayMessage, errorCode, errorMessage, errorType, itemId) { 
        obj['display_message'] = displayMessage;
        obj['error_code'] = errorCode;
        obj['error_message'] = errorMessage;
        obj['error_type'] = errorType;
        obj['item_id'] = itemId;
    }

    /**
     * Constructs a <code>CreditBankIncomeCause</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreditBankIncomeCause} obj Optional instance to populate.
     * @return {module:model/CreditBankIncomeCause} The populated <code>CreditBankIncomeCause</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreditBankIncomeCause();

            if (data.hasOwnProperty('display_message')) {
                obj['display_message'] = ApiClient.convertToType(data['display_message'], 'String');
            }
            if (data.hasOwnProperty('error_code')) {
                obj['error_code'] = ApiClient.convertToType(data['error_code'], 'String');
            }
            if (data.hasOwnProperty('error_message')) {
                obj['error_message'] = ApiClient.convertToType(data['error_message'], 'String');
            }
            if (data.hasOwnProperty('error_type')) {
                obj['error_type'] = CreditBankIncomeErrorType.constructFromObject(data['error_type']);
            }
            if (data.hasOwnProperty('item_id')) {
                obj['item_id'] = ApiClient.convertToType(data['item_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreditBankIncomeCause</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreditBankIncomeCause</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreditBankIncomeCause.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['display_message'] && !(typeof data['display_message'] === 'string' || data['display_message'] instanceof String)) {
            throw new Error("Expected the field `display_message` to be a primitive type in the JSON string but got " + data['display_message']);
        }
        // ensure the json data is a string
        if (data['error_code'] && !(typeof data['error_code'] === 'string' || data['error_code'] instanceof String)) {
            throw new Error("Expected the field `error_code` to be a primitive type in the JSON string but got " + data['error_code']);
        }
        // ensure the json data is a string
        if (data['error_message'] && !(typeof data['error_message'] === 'string' || data['error_message'] instanceof String)) {
            throw new Error("Expected the field `error_message` to be a primitive type in the JSON string but got " + data['error_message']);
        }
        // ensure the json data is a string
        if (data['item_id'] && !(typeof data['item_id'] === 'string' || data['item_id'] instanceof String)) {
            throw new Error("Expected the field `item_id` to be a primitive type in the JSON string but got " + data['item_id']);
        }

        return true;
    }


}

CreditBankIncomeCause.RequiredProperties = ["display_message", "error_code", "error_message", "error_type", "item_id"];

/**
 * A user-friendly representation of the error code. null if the error is not related to user action. This may change over time and is not safe for programmatic use.
 * @member {String} display_message
 */
CreditBankIncomeCause.prototype['display_message'] = undefined;

/**
 * We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. Error fields will be `null` if no error has occurred.
 * @member {String} error_code
 */
CreditBankIncomeCause.prototype['error_code'] = undefined;

/**
 * A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
 * @member {String} error_message
 */
CreditBankIncomeCause.prototype['error_message'] = undefined;

/**
 * @member {module:model/CreditBankIncomeErrorType} error_type
 */
CreditBankIncomeCause.prototype['error_type'] = undefined;

/**
 * The `item_id` of the Item associated with this warning.
 * @member {String} item_id
 */
CreditBankIncomeCause.prototype['item_id'] = undefined;






export default CreditBankIncomeCause;

