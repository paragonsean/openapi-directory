/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PersonalFinanceCategory from './PersonalFinanceCategory';
import RecurringTransactionFrequency from './RecurringTransactionFrequency';
import TransactionStreamAmount from './TransactionStreamAmount';
import TransactionStreamStatus from './TransactionStreamStatus';

/**
 * The TransactionStream model module.
 * @module model/TransactionStream
 * @version 2020-09-14_1.345.1
 */
class TransactionStream {
    /**
     * Constructs a new <code>TransactionStream</code>.
     * A grouping of related transactions
     * @alias module:model/TransactionStream
     * @extends Object
     * @param accountId {String} The ID of the account to which the stream belongs
     * @param averageAmount {module:model/TransactionStreamAmount} 
     * @param category {Array.<String>} A hierarchical array of the categories to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).
     * @param categoryId {String} The ID of the category to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).
     * @param description {String} A description of the transaction stream.
     * @param firstDate {Date} The posted date of the earliest transaction in the stream.
     * @param frequency {module:model/RecurringTransactionFrequency} 
     * @param isActive {Boolean} Indicates whether the transaction stream is still live.
     * @param lastAmount {module:model/TransactionStreamAmount} 
     * @param lastDate {Date} The posted date of the latest transaction in the stream.
     * @param merchantName {String} The merchant associated with the transaction stream.
     * @param status {module:model/TransactionStreamStatus} 
     * @param streamId {String} A unique id for the stream
     * @param transactionIds {Array.<String>} An array of Plaid transaction IDs belonging to the stream, sorted by posted date.
     */
    constructor(accountId, averageAmount, category, categoryId, description, firstDate, frequency, isActive, lastAmount, lastDate, merchantName, status, streamId, transactionIds) { 
        
        TransactionStream.initialize(this, accountId, averageAmount, category, categoryId, description, firstDate, frequency, isActive, lastAmount, lastDate, merchantName, status, streamId, transactionIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, averageAmount, category, categoryId, description, firstDate, frequency, isActive, lastAmount, lastDate, merchantName, status, streamId, transactionIds) { 
        obj['account_id'] = accountId;
        obj['average_amount'] = averageAmount;
        obj['category'] = category;
        obj['category_id'] = categoryId;
        obj['description'] = description;
        obj['first_date'] = firstDate;
        obj['frequency'] = frequency;
        obj['is_active'] = isActive;
        obj['last_amount'] = lastAmount;
        obj['last_date'] = lastDate;
        obj['merchant_name'] = merchantName;
        obj['status'] = status;
        obj['stream_id'] = streamId;
        obj['transaction_ids'] = transactionIds;
    }

    /**
     * Constructs a <code>TransactionStream</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionStream} obj Optional instance to populate.
     * @return {module:model/TransactionStream} The populated <code>TransactionStream</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionStream();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('average_amount')) {
                obj['average_amount'] = TransactionStreamAmount.constructFromObject(data['average_amount']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], ['String']);
            }
            if (data.hasOwnProperty('category_id')) {
                obj['category_id'] = ApiClient.convertToType(data['category_id'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('first_date')) {
                obj['first_date'] = ApiClient.convertToType(data['first_date'], 'Date');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = RecurringTransactionFrequency.constructFromObject(data['frequency']);
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
            if (data.hasOwnProperty('last_amount')) {
                obj['last_amount'] = TransactionStreamAmount.constructFromObject(data['last_amount']);
            }
            if (data.hasOwnProperty('last_date')) {
                obj['last_date'] = ApiClient.convertToType(data['last_date'], 'Date');
            }
            if (data.hasOwnProperty('merchant_name')) {
                obj['merchant_name'] = ApiClient.convertToType(data['merchant_name'], 'String');
            }
            if (data.hasOwnProperty('personal_finance_category')) {
                obj['personal_finance_category'] = PersonalFinanceCategory.constructFromObject(data['personal_finance_category']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TransactionStreamStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('stream_id')) {
                obj['stream_id'] = ApiClient.convertToType(data['stream_id'], 'String');
            }
            if (data.hasOwnProperty('transaction_ids')) {
                obj['transaction_ids'] = ApiClient.convertToType(data['transaction_ids'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionStream</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionStream</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionStream.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['category'])) {
            throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['category_id'] && !(typeof data['category_id'] === 'string' || data['category_id'] instanceof String)) {
            throw new Error("Expected the field `category_id` to be a primitive type in the JSON string but got " + data['category_id']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['merchant_name'] && !(typeof data['merchant_name'] === 'string' || data['merchant_name'] instanceof String)) {
            throw new Error("Expected the field `merchant_name` to be a primitive type in the JSON string but got " + data['merchant_name']);
        }
        // ensure the json data is a string
        if (data['stream_id'] && !(typeof data['stream_id'] === 'string' || data['stream_id'] instanceof String)) {
            throw new Error("Expected the field `stream_id` to be a primitive type in the JSON string but got " + data['stream_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['transaction_ids'])) {
            throw new Error("Expected the field `transaction_ids` to be an array in the JSON data but got " + data['transaction_ids']);
        }

        return true;
    }


}

TransactionStream.RequiredProperties = ["account_id", "average_amount", "category", "category_id", "description", "first_date", "frequency", "is_active", "last_amount", "last_date", "merchant_name", "status", "stream_id", "transaction_ids"];

/**
 * The ID of the account to which the stream belongs
 * @member {String} account_id
 */
TransactionStream.prototype['account_id'] = undefined;

/**
 * @member {module:model/TransactionStreamAmount} average_amount
 */
TransactionStream.prototype['average_amount'] = undefined;

/**
 * A hierarchical array of the categories to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).
 * @member {Array.<String>} category
 */
TransactionStream.prototype['category'] = undefined;

/**
 * The ID of the category to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).
 * @member {String} category_id
 */
TransactionStream.prototype['category_id'] = undefined;

/**
 * A description of the transaction stream.
 * @member {String} description
 */
TransactionStream.prototype['description'] = undefined;

/**
 * The posted date of the earliest transaction in the stream.
 * @member {Date} first_date
 */
TransactionStream.prototype['first_date'] = undefined;

/**
 * @member {module:model/RecurringTransactionFrequency} frequency
 */
TransactionStream.prototype['frequency'] = undefined;

/**
 * Indicates whether the transaction stream is still live.
 * @member {Boolean} is_active
 */
TransactionStream.prototype['is_active'] = undefined;

/**
 * @member {module:model/TransactionStreamAmount} last_amount
 */
TransactionStream.prototype['last_amount'] = undefined;

/**
 * The posted date of the latest transaction in the stream.
 * @member {Date} last_date
 */
TransactionStream.prototype['last_date'] = undefined;

/**
 * The merchant associated with the transaction stream.
 * @member {String} merchant_name
 */
TransactionStream.prototype['merchant_name'] = undefined;

/**
 * @member {module:model/PersonalFinanceCategory} personal_finance_category
 */
TransactionStream.prototype['personal_finance_category'] = undefined;

/**
 * @member {module:model/TransactionStreamStatus} status
 */
TransactionStream.prototype['status'] = undefined;

/**
 * A unique id for the stream
 * @member {String} stream_id
 */
TransactionStream.prototype['stream_id'] = undefined;

/**
 * An array of Plaid transaction IDs belonging to the stream, sorted by posted date.
 * @member {Array.<String>} transaction_ids
 */
TransactionStream.prototype['transaction_ids'] = undefined;






export default TransactionStream;

