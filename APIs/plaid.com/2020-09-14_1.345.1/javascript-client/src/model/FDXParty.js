/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FDXPartyRegistry from './FDXPartyRegistry';
import FDXPartyType from './FDXPartyType';

/**
 * The FDXParty model module.
 * @module model/FDXParty
 * @version 2020-09-14_1.345.1
 */
class FDXParty {
    /**
     * Constructs a new <code>FDXParty</code>.
     * FDX Participant - an entity or person that is a part of a FDX API transaction
     * @alias module:model/FDXParty
     * @param name {String} Human recognizable common name
     * @param type {module:model/FDXPartyType} 
     */
    constructor(name, type) { 
        
        FDXParty.initialize(this, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type) { 
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>FDXParty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FDXParty} obj Optional instance to populate.
     * @return {module:model/FDXParty} The populated <code>FDXParty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FDXParty();

            if (data.hasOwnProperty('homeUri')) {
                obj['homeUri'] = ApiClient.convertToType(data['homeUri'], 'String');
            }
            if (data.hasOwnProperty('logoUri')) {
                obj['logoUri'] = ApiClient.convertToType(data['logoUri'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('registeredEntityId')) {
                obj['registeredEntityId'] = ApiClient.convertToType(data['registeredEntityId'], 'String');
            }
            if (data.hasOwnProperty('registeredEntityName')) {
                obj['registeredEntityName'] = ApiClient.convertToType(data['registeredEntityName'], 'String');
            }
            if (data.hasOwnProperty('registry')) {
                obj['registry'] = FDXPartyRegistry.constructFromObject(data['registry']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = FDXPartyType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FDXParty</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FDXParty</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FDXParty.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['homeUri'] && !(typeof data['homeUri'] === 'string' || data['homeUri'] instanceof String)) {
            throw new Error("Expected the field `homeUri` to be a primitive type in the JSON string but got " + data['homeUri']);
        }
        // ensure the json data is a string
        if (data['logoUri'] && !(typeof data['logoUri'] === 'string' || data['logoUri'] instanceof String)) {
            throw new Error("Expected the field `logoUri` to be a primitive type in the JSON string but got " + data['logoUri']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['registeredEntityId'] && !(typeof data['registeredEntityId'] === 'string' || data['registeredEntityId'] instanceof String)) {
            throw new Error("Expected the field `registeredEntityId` to be a primitive type in the JSON string but got " + data['registeredEntityId']);
        }
        // ensure the json data is a string
        if (data['registeredEntityName'] && !(typeof data['registeredEntityName'] === 'string' || data['registeredEntityName'] instanceof String)) {
            throw new Error("Expected the field `registeredEntityName` to be a primitive type in the JSON string but got " + data['registeredEntityName']);
        }

        return true;
    }


}

FDXParty.RequiredProperties = ["name", "type"];

/**
 * URI for party, where an end user could learn more about the company or application involved in the data sharing chain
 * @member {String} homeUri
 */
FDXParty.prototype['homeUri'] = undefined;

/**
 * URI for a logo asset to be displayed to the end user
 * @member {String} logoUri
 */
FDXParty.prototype['logoUri'] = undefined;

/**
 * Human recognizable common name
 * @member {String} name
 */
FDXParty.prototype['name'] = undefined;

/**
 * Registered id of party
 * @member {String} registeredEntityId
 */
FDXParty.prototype['registeredEntityId'] = undefined;

/**
 * Registered name of party
 * @member {String} registeredEntityName
 */
FDXParty.prototype['registeredEntityName'] = undefined;

/**
 * @member {module:model/FDXPartyRegistry} registry
 */
FDXParty.prototype['registry'] = undefined;

/**
 * @member {module:model/FDXPartyType} type
 */
FDXParty.prototype['type'] = undefined;






export default FDXParty;

