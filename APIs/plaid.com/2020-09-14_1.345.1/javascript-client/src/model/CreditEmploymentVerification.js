/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreditEmployerVerification from './CreditEmployerVerification';
import CreditPlatformIds from './CreditPlatformIds';

/**
 * The CreditEmploymentVerification model module.
 * @module model/CreditEmploymentVerification
 * @version 2020-09-14_1.345.1
 */
class CreditEmploymentVerification {
    /**
     * Constructs a new <code>CreditEmploymentVerification</code>.
     * The object containing proof of employment data for an individual.
     * @alias module:model/CreditEmploymentVerification
     * @extends Object
     * @param accountId {String} ID of the payroll provider account.
     * @param employeeType {String} The type of employment for the individual. `\"FULL_TIME\"`: A full-time employee. `\"PART_TIME\"`: A part-time employee. `\"CONTRACTOR\"`: An employee typically hired externally through a contracting group. `\"TEMPORARY\"`: A temporary employee. `\"OTHER\"`: The employee type is not one of the above defined types.
     * @param employer {module:model/CreditEmployerVerification} 
     * @param endDate {Date} End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD).
     * @param lastPaystubDate {Date} The date of the employee's most recent paystub in ISO 8601 format (YYYY-MM-DD).
     * @param platformIds {module:model/CreditPlatformIds} 
     * @param startDate {Date} Start of employment in ISO 8601 format (YYYY-MM-DD).
     * @param status {String} Current employment status.
     * @param title {String} Current title of employee.
     */
    constructor(accountId, employeeType, employer, endDate, lastPaystubDate, platformIds, startDate, status, title) { 
        
        CreditEmploymentVerification.initialize(this, accountId, employeeType, employer, endDate, lastPaystubDate, platformIds, startDate, status, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, employeeType, employer, endDate, lastPaystubDate, platformIds, startDate, status, title) { 
        obj['account_id'] = accountId;
        obj['employee_type'] = employeeType;
        obj['employer'] = employer;
        obj['end_date'] = endDate;
        obj['last_paystub_date'] = lastPaystubDate;
        obj['platform_ids'] = platformIds;
        obj['start_date'] = startDate;
        obj['status'] = status;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>CreditEmploymentVerification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreditEmploymentVerification} obj Optional instance to populate.
     * @return {module:model/CreditEmploymentVerification} The populated <code>CreditEmploymentVerification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreditEmploymentVerification();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('employee_type')) {
                obj['employee_type'] = ApiClient.convertToType(data['employee_type'], 'String');
            }
            if (data.hasOwnProperty('employer')) {
                obj['employer'] = CreditEmployerVerification.constructFromObject(data['employer']);
            }
            if (data.hasOwnProperty('end_date')) {
                obj['end_date'] = ApiClient.convertToType(data['end_date'], 'Date');
            }
            if (data.hasOwnProperty('last_paystub_date')) {
                obj['last_paystub_date'] = ApiClient.convertToType(data['last_paystub_date'], 'Date');
            }
            if (data.hasOwnProperty('platform_ids')) {
                obj['platform_ids'] = CreditPlatformIds.constructFromObject(data['platform_ids']);
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreditEmploymentVerification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreditEmploymentVerification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreditEmploymentVerification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['employee_type'] && !(typeof data['employee_type'] === 'string' || data['employee_type'] instanceof String)) {
            throw new Error("Expected the field `employee_type` to be a primitive type in the JSON string but got " + data['employee_type']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

CreditEmploymentVerification.RequiredProperties = ["account_id", "employee_type", "employer", "end_date", "last_paystub_date", "platform_ids", "start_date", "status", "title"];

/**
 * ID of the payroll provider account.
 * @member {String} account_id
 */
CreditEmploymentVerification.prototype['account_id'] = undefined;

/**
 * The type of employment for the individual. `\"FULL_TIME\"`: A full-time employee. `\"PART_TIME\"`: A part-time employee. `\"CONTRACTOR\"`: An employee typically hired externally through a contracting group. `\"TEMPORARY\"`: A temporary employee. `\"OTHER\"`: The employee type is not one of the above defined types.
 * @member {String} employee_type
 */
CreditEmploymentVerification.prototype['employee_type'] = undefined;

/**
 * @member {module:model/CreditEmployerVerification} employer
 */
CreditEmploymentVerification.prototype['employer'] = undefined;

/**
 * End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD).
 * @member {Date} end_date
 */
CreditEmploymentVerification.prototype['end_date'] = undefined;

/**
 * The date of the employee's most recent paystub in ISO 8601 format (YYYY-MM-DD).
 * @member {Date} last_paystub_date
 */
CreditEmploymentVerification.prototype['last_paystub_date'] = undefined;

/**
 * @member {module:model/CreditPlatformIds} platform_ids
 */
CreditEmploymentVerification.prototype['platform_ids'] = undefined;

/**
 * Start of employment in ISO 8601 format (YYYY-MM-DD).
 * @member {Date} start_date
 */
CreditEmploymentVerification.prototype['start_date'] = undefined;

/**
 * Current employment status.
 * @member {String} status
 */
CreditEmploymentVerification.prototype['status'] = undefined;

/**
 * Current title of employee.
 * @member {String} title
 */
CreditEmploymentVerification.prototype['title'] = undefined;






export default CreditEmploymentVerification;

