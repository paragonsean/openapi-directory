/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CounterpartyType from './CounterpartyType';

/**
 * The Counterparty model module.
 * @module model/Counterparty
 * @version 2020-09-14_1.345.1
 */
class Counterparty {
    /**
     * Constructs a new <code>Counterparty</code>.
     * The counterparty, such as the merchant or financial institution, is extracted by Plaid from the raw description.
     * @alias module:model/Counterparty
     * @extends Object
     * @param logoUrl {String} The URL of a logo associated with the counterparty, if available. The logo is formatted as a 100x100 pixel PNG file.
     * @param name {String} The name of the counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
     * @param type {module:model/CounterpartyType} 
     * @param website {String} The website associated with the counterparty.
     */
    constructor(logoUrl, name, type, website) { 
        
        Counterparty.initialize(this, logoUrl, name, type, website);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, logoUrl, name, type, website) { 
        obj['logo_url'] = logoUrl;
        obj['name'] = name;
        obj['type'] = type;
        obj['website'] = website;
    }

    /**
     * Constructs a <code>Counterparty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Counterparty} obj Optional instance to populate.
     * @return {module:model/Counterparty} The populated <code>Counterparty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Counterparty();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('entity_id')) {
                obj['entity_id'] = ApiClient.convertToType(data['entity_id'], 'String');
            }
            if (data.hasOwnProperty('logo_url')) {
                obj['logo_url'] = ApiClient.convertToType(data['logo_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = CounterpartyType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Counterparty</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Counterparty</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Counterparty.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['entity_id'] && !(typeof data['entity_id'] === 'string' || data['entity_id'] instanceof String)) {
            throw new Error("Expected the field `entity_id` to be a primitive type in the JSON string but got " + data['entity_id']);
        }
        // ensure the json data is a string
        if (data['logo_url'] && !(typeof data['logo_url'] === 'string' || data['logo_url'] instanceof String)) {
            throw new Error("Expected the field `logo_url` to be a primitive type in the JSON string but got " + data['logo_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}

Counterparty.RequiredProperties = ["logo_url", "name", "type", "website"];

/**
 * A unique, stable, Plaid-generated id that maps to the counterparty.
 * @member {String} entity_id
 */
Counterparty.prototype['entity_id'] = undefined;

/**
 * The URL of a logo associated with the counterparty, if available. The logo is formatted as a 100x100 pixel PNG file.
 * @member {String} logo_url
 */
Counterparty.prototype['logo_url'] = undefined;

/**
 * The name of the counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description.
 * @member {String} name
 */
Counterparty.prototype['name'] = undefined;

/**
 * @member {module:model/CounterpartyType} type
 */
Counterparty.prototype['type'] = undefined;

/**
 * The website associated with the counterparty.
 * @member {String} website
 */
Counterparty.prototype['website'] = undefined;






export default Counterparty;

