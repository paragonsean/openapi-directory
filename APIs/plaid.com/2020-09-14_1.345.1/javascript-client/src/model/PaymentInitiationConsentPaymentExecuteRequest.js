/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentAmount from './PaymentAmount';

/**
 * The PaymentInitiationConsentPaymentExecuteRequest model module.
 * @module model/PaymentInitiationConsentPaymentExecuteRequest
 * @version 2020-09-14_1.345.1
 */
class PaymentInitiationConsentPaymentExecuteRequest {
    /**
     * Constructs a new <code>PaymentInitiationConsentPaymentExecuteRequest</code>.
     * PaymentInitiationConsentPaymentExecuteRequest defines the request schema for &#x60;/payment_initiation/consent/payment/execute&#x60;
     * @alias module:model/PaymentInitiationConsentPaymentExecuteRequest
     * @param amount {module:model/PaymentAmount} 
     * @param consentId {String} The consent ID.
     * @param idempotencyKey {String} A random key provided by the client, per unique consent payment. Maximum of 128 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a consent payment fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single payment is created. If the request was successfully processed, it will prevent any payment that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
     */
    constructor(amount, consentId, idempotencyKey) { 
        
        PaymentInitiationConsentPaymentExecuteRequest.initialize(this, amount, consentId, idempotencyKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, consentId, idempotencyKey) { 
        obj['amount'] = amount;
        obj['consent_id'] = consentId;
        obj['idempotency_key'] = idempotencyKey;
    }

    /**
     * Constructs a <code>PaymentInitiationConsentPaymentExecuteRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentInitiationConsentPaymentExecuteRequest} obj Optional instance to populate.
     * @return {module:model/PaymentInitiationConsentPaymentExecuteRequest} The populated <code>PaymentInitiationConsentPaymentExecuteRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentInitiationConsentPaymentExecuteRequest();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = PaymentAmount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('consent_id')) {
                obj['consent_id'] = ApiClient.convertToType(data['consent_id'], 'String');
            }
            if (data.hasOwnProperty('idempotency_key')) {
                obj['idempotency_key'] = ApiClient.convertToType(data['idempotency_key'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentInitiationConsentPaymentExecuteRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentInitiationConsentPaymentExecuteRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentInitiationConsentPaymentExecuteRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['consent_id'] && !(typeof data['consent_id'] === 'string' || data['consent_id'] instanceof String)) {
            throw new Error("Expected the field `consent_id` to be a primitive type in the JSON string but got " + data['consent_id']);
        }
        // ensure the json data is a string
        if (data['idempotency_key'] && !(typeof data['idempotency_key'] === 'string' || data['idempotency_key'] instanceof String)) {
            throw new Error("Expected the field `idempotency_key` to be a primitive type in the JSON string but got " + data['idempotency_key']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }

        return true;
    }


}

PaymentInitiationConsentPaymentExecuteRequest.RequiredProperties = ["amount", "consent_id", "idempotency_key"];

/**
 * @member {module:model/PaymentAmount} amount
 */
PaymentInitiationConsentPaymentExecuteRequest.prototype['amount'] = undefined;

/**
 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
 * @member {String} client_id
 */
PaymentInitiationConsentPaymentExecuteRequest.prototype['client_id'] = undefined;

/**
 * The consent ID.
 * @member {String} consent_id
 */
PaymentInitiationConsentPaymentExecuteRequest.prototype['consent_id'] = undefined;

/**
 * A random key provided by the client, per unique consent payment. Maximum of 128 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a consent payment fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single payment is created. If the request was successfully processed, it will prevent any payment that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
 * @member {String} idempotency_key
 */
PaymentInitiationConsentPaymentExecuteRequest.prototype['idempotency_key'] = undefined;

/**
 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
 * @member {String} secret
 */
PaymentInitiationConsentPaymentExecuteRequest.prototype['secret'] = undefined;






export default PaymentInitiationConsentPaymentExecuteRequest;

