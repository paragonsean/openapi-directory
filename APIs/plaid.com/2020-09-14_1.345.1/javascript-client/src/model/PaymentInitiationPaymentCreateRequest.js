/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExternalPaymentOptions from './ExternalPaymentOptions';
import ExternalPaymentScheduleRequest from './ExternalPaymentScheduleRequest';
import PaymentAmount from './PaymentAmount';

/**
 * The PaymentInitiationPaymentCreateRequest model module.
 * @module model/PaymentInitiationPaymentCreateRequest
 * @version 2020-09-14_1.345.1
 */
class PaymentInitiationPaymentCreateRequest {
    /**
     * Constructs a new <code>PaymentInitiationPaymentCreateRequest</code>.
     * PaymentInitiationPaymentCreateRequest defines the request schema for &#x60;/payment_initiation/payment/create&#x60;
     * @alias module:model/PaymentInitiationPaymentCreateRequest
     * @param amount {module:model/PaymentAmount} 
     * @param recipientId {String} The ID of the recipient the payment is for.
     * @param reference {String} A reference for the payment. This must be an alphanumeric string with at most 18 characters and must not contain any special characters (since not all institutions support them). In order to track settlement via Payment Confirmation, each payment must have a unique reference. If the reference provided through the API is not unique, Plaid will adjust it. Both the originally provided and automatically adjusted references (if any) can be found in the `reference` and `adjusted_reference` fields, respectively.
     */
    constructor(amount, recipientId, reference) { 
        
        PaymentInitiationPaymentCreateRequest.initialize(this, amount, recipientId, reference);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, recipientId, reference) { 
        obj['amount'] = amount;
        obj['recipient_id'] = recipientId;
        obj['reference'] = reference;
    }

    /**
     * Constructs a <code>PaymentInitiationPaymentCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentInitiationPaymentCreateRequest} obj Optional instance to populate.
     * @return {module:model/PaymentInitiationPaymentCreateRequest} The populated <code>PaymentInitiationPaymentCreateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentInitiationPaymentCreateRequest();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = PaymentAmount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ExternalPaymentOptions.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('recipient_id')) {
                obj['recipient_id'] = ApiClient.convertToType(data['recipient_id'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ExternalPaymentScheduleRequest.constructFromObject(data['schedule']);
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentInitiationPaymentCreateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentInitiationPaymentCreateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentInitiationPaymentCreateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['recipient_id'] && !(typeof data['recipient_id'] === 'string' || data['recipient_id'] instanceof String)) {
            throw new Error("Expected the field `recipient_id` to be a primitive type in the JSON string but got " + data['recipient_id']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // validate the optional field `schedule`
        if (data['schedule']) { // data not null
          ExternalPaymentScheduleRequest.validateJSON(data['schedule']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }

        return true;
    }


}

PaymentInitiationPaymentCreateRequest.RequiredProperties = ["amount", "recipient_id", "reference"];

/**
 * @member {module:model/PaymentAmount} amount
 */
PaymentInitiationPaymentCreateRequest.prototype['amount'] = undefined;

/**
 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
 * @member {String} client_id
 */
PaymentInitiationPaymentCreateRequest.prototype['client_id'] = undefined;

/**
 * @member {module:model/ExternalPaymentOptions} options
 */
PaymentInitiationPaymentCreateRequest.prototype['options'] = undefined;

/**
 * The ID of the recipient the payment is for.
 * @member {String} recipient_id
 */
PaymentInitiationPaymentCreateRequest.prototype['recipient_id'] = undefined;

/**
 * A reference for the payment. This must be an alphanumeric string with at most 18 characters and must not contain any special characters (since not all institutions support them). In order to track settlement via Payment Confirmation, each payment must have a unique reference. If the reference provided through the API is not unique, Plaid will adjust it. Both the originally provided and automatically adjusted references (if any) can be found in the `reference` and `adjusted_reference` fields, respectively.
 * @member {String} reference
 */
PaymentInitiationPaymentCreateRequest.prototype['reference'] = undefined;

/**
 * @member {module:model/ExternalPaymentScheduleRequest} schedule
 */
PaymentInitiationPaymentCreateRequest.prototype['schedule'] = undefined;

/**
 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
 * @member {String} secret
 */
PaymentInitiationPaymentCreateRequest.prototype['secret'] = undefined;






export default PaymentInitiationPaymentCreateRequest;

