/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionState from './ActionState';
import ActivityType from './ActivityType';
import ScopesNullable from './ScopesNullable';

/**
 * The Activity model module.
 * @module model/Activity
 * @version 2020-09-14_1.345.1
 */
class Activity {
    /**
     * Constructs a new <code>Activity</code>.
     * Describes a consent activity.
     * @alias module:model/Activity
     * @param activity {module:model/ActivityType} 
     * @param id {String} A unique identifier for the activity
     * @param initiatedDate {String} The date and time this activity was initiated [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
     * @param initiator {String} Application ID of the client who initiated the activity.
     * @param state {module:model/ActionState} 
     */
    constructor(activity, id, initiatedDate, initiator, state) { 
        
        Activity.initialize(this, activity, id, initiatedDate, initiator, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, activity, id, initiatedDate, initiator, state) { 
        obj['activity'] = activity;
        obj['id'] = id;
        obj['initiated_date'] = initiatedDate;
        obj['initiator'] = initiator;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>Activity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Activity} obj Optional instance to populate.
     * @return {module:model/Activity} The populated <code>Activity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Activity();

            if (data.hasOwnProperty('activity')) {
                obj['activity'] = ActivityType.constructFromObject(data['activity']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('initiated_date')) {
                obj['initiated_date'] = ApiClient.convertToType(data['initiated_date'], 'String');
            }
            if (data.hasOwnProperty('initiator')) {
                obj['initiator'] = ApiClient.convertToType(data['initiator'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ScopesNullable.constructFromObject(data['scopes']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ActionState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('target_application_id')) {
                obj['target_application_id'] = ApiClient.convertToType(data['target_application_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Activity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Activity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Activity.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['initiated_date'] && !(typeof data['initiated_date'] === 'string' || data['initiated_date'] instanceof String)) {
            throw new Error("Expected the field `initiated_date` to be a primitive type in the JSON string but got " + data['initiated_date']);
        }
        // ensure the json data is a string
        if (data['initiator'] && !(typeof data['initiator'] === 'string' || data['initiator'] instanceof String)) {
            throw new Error("Expected the field `initiator` to be a primitive type in the JSON string but got " + data['initiator']);
        }
        // validate the optional field `scopes`
        if (data['scopes']) { // data not null
          ScopesNullable.validateJSON(data['scopes']);
        }
        // ensure the json data is a string
        if (data['target_application_id'] && !(typeof data['target_application_id'] === 'string' || data['target_application_id'] instanceof String)) {
            throw new Error("Expected the field `target_application_id` to be a primitive type in the JSON string but got " + data['target_application_id']);
        }

        return true;
    }


}

Activity.RequiredProperties = ["activity", "id", "initiated_date", "initiator", "state"];

/**
 * @member {module:model/ActivityType} activity
 */
Activity.prototype['activity'] = undefined;

/**
 * A unique identifier for the activity
 * @member {String} id
 */
Activity.prototype['id'] = undefined;

/**
 * The date and time this activity was initiated [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
 * @member {String} initiated_date
 */
Activity.prototype['initiated_date'] = undefined;

/**
 * Application ID of the client who initiated the activity.
 * @member {String} initiator
 */
Activity.prototype['initiator'] = undefined;

/**
 * @member {module:model/ScopesNullable} scopes
 */
Activity.prototype['scopes'] = undefined;

/**
 * @member {module:model/ActionState} state
 */
Activity.prototype['state'] = undefined;

/**
 * This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
 * @member {String} target_application_id
 */
Activity.prototype['target_application_id'] = undefined;






export default Activity;

