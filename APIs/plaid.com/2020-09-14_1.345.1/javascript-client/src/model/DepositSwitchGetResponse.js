/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DepositSwitchGetResponse model module.
 * @module model/DepositSwitchGetResponse
 * @version 2020-09-14_1.345.1
 */
class DepositSwitchGetResponse {
    /**
     * Constructs a new <code>DepositSwitchGetResponse</code>.
     * DepositSwitchGetResponse defines the response schema for &#x60;/deposit_switch/get&#x60;
     * @alias module:model/DepositSwitchGetResponse
     * @extends Object
     * @param accountHasMultipleAllocations {Boolean} When `true`, user’s direct deposit goes to multiple banks. When false, user’s direct deposit only goes to the target account. Always `null` if the deposit switch has not been completed.
     * @param amountAllocated {Number} The dollar amount of direct deposit allocated to the target account. Always `null` if the target account is not allocated an amount or if the deposit switch has not been completed.
     * @param dateCompleted {Date} [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was completed. Always `null` if the deposit switch has not been completed. 
     * @param dateCreated {Date} [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was created. 
     * @param depositSwitchId {String} The ID of the deposit switch.
     * @param isAllocatedRemainder {Boolean} When `true`, the target account is allocated the remainder of direct deposit after all other allocations have been deducted. When `false`, user’s direct deposit is allocated as a percent or amount. Always `null` if the deposit switch has not been completed.
     * @param percentAllocated {Number} The percentage of direct deposit allocated to the target account. Always `null` if the target account is not allocated a percentage or if the deposit switch has not been completed or if `is_allocated_remainder` is true.
     * @param requestId {String} A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     * @param state {module:model/DepositSwitchGetResponse.StateEnum}  The state, or status, of the deposit switch.  - `initialized` – The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.  - `processing` – The deposit switch request has been submitted and is being processed.  - `completed` – The user's employer has fulfilled the deposit switch request.  - `error` – There was an error processing the deposit switch request.
     * @param targetAccountId {String} The ID of the bank account the direct deposit was switched to.
     * @param targetItemId {String} The ID of the Item the direct deposit was switched to.
     */
    constructor(accountHasMultipleAllocations, amountAllocated, dateCompleted, dateCreated, depositSwitchId, isAllocatedRemainder, percentAllocated, requestId, state, targetAccountId, targetItemId) { 
        
        DepositSwitchGetResponse.initialize(this, accountHasMultipleAllocations, amountAllocated, dateCompleted, dateCreated, depositSwitchId, isAllocatedRemainder, percentAllocated, requestId, state, targetAccountId, targetItemId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountHasMultipleAllocations, amountAllocated, dateCompleted, dateCreated, depositSwitchId, isAllocatedRemainder, percentAllocated, requestId, state, targetAccountId, targetItemId) { 
        obj['account_has_multiple_allocations'] = accountHasMultipleAllocations;
        obj['amount_allocated'] = amountAllocated;
        obj['date_completed'] = dateCompleted;
        obj['date_created'] = dateCreated;
        obj['deposit_switch_id'] = depositSwitchId;
        obj['is_allocated_remainder'] = isAllocatedRemainder;
        obj['percent_allocated'] = percentAllocated;
        obj['request_id'] = requestId;
        obj['state'] = state;
        obj['target_account_id'] = targetAccountId;
        obj['target_item_id'] = targetItemId;
    }

    /**
     * Constructs a <code>DepositSwitchGetResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DepositSwitchGetResponse} obj Optional instance to populate.
     * @return {module:model/DepositSwitchGetResponse} The populated <code>DepositSwitchGetResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DepositSwitchGetResponse();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('account_has_multiple_allocations')) {
                obj['account_has_multiple_allocations'] = ApiClient.convertToType(data['account_has_multiple_allocations'], 'Boolean');
            }
            if (data.hasOwnProperty('amount_allocated')) {
                obj['amount_allocated'] = ApiClient.convertToType(data['amount_allocated'], 'Number');
            }
            if (data.hasOwnProperty('date_completed')) {
                obj['date_completed'] = ApiClient.convertToType(data['date_completed'], 'Date');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('deposit_switch_id')) {
                obj['deposit_switch_id'] = ApiClient.convertToType(data['deposit_switch_id'], 'String');
            }
            if (data.hasOwnProperty('employer_id')) {
                obj['employer_id'] = ApiClient.convertToType(data['employer_id'], 'String');
            }
            if (data.hasOwnProperty('employer_name')) {
                obj['employer_name'] = ApiClient.convertToType(data['employer_name'], 'String');
            }
            if (data.hasOwnProperty('institution_id')) {
                obj['institution_id'] = ApiClient.convertToType(data['institution_id'], 'String');
            }
            if (data.hasOwnProperty('institution_name')) {
                obj['institution_name'] = ApiClient.convertToType(data['institution_name'], 'String');
            }
            if (data.hasOwnProperty('is_allocated_remainder')) {
                obj['is_allocated_remainder'] = ApiClient.convertToType(data['is_allocated_remainder'], 'Boolean');
            }
            if (data.hasOwnProperty('percent_allocated')) {
                obj['percent_allocated'] = ApiClient.convertToType(data['percent_allocated'], 'Number');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('switch_method')) {
                obj['switch_method'] = ApiClient.convertToType(data['switch_method'], 'String');
            }
            if (data.hasOwnProperty('target_account_id')) {
                obj['target_account_id'] = ApiClient.convertToType(data['target_account_id'], 'String');
            }
            if (data.hasOwnProperty('target_item_id')) {
                obj['target_item_id'] = ApiClient.convertToType(data['target_item_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DepositSwitchGetResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DepositSwitchGetResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DepositSwitchGetResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['deposit_switch_id'] && !(typeof data['deposit_switch_id'] === 'string' || data['deposit_switch_id'] instanceof String)) {
            throw new Error("Expected the field `deposit_switch_id` to be a primitive type in the JSON string but got " + data['deposit_switch_id']);
        }
        // ensure the json data is a string
        if (data['employer_id'] && !(typeof data['employer_id'] === 'string' || data['employer_id'] instanceof String)) {
            throw new Error("Expected the field `employer_id` to be a primitive type in the JSON string but got " + data['employer_id']);
        }
        // ensure the json data is a string
        if (data['employer_name'] && !(typeof data['employer_name'] === 'string' || data['employer_name'] instanceof String)) {
            throw new Error("Expected the field `employer_name` to be a primitive type in the JSON string but got " + data['employer_name']);
        }
        // ensure the json data is a string
        if (data['institution_id'] && !(typeof data['institution_id'] === 'string' || data['institution_id'] instanceof String)) {
            throw new Error("Expected the field `institution_id` to be a primitive type in the JSON string but got " + data['institution_id']);
        }
        // ensure the json data is a string
        if (data['institution_name'] && !(typeof data['institution_name'] === 'string' || data['institution_name'] instanceof String)) {
            throw new Error("Expected the field `institution_name` to be a primitive type in the JSON string but got " + data['institution_name']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['switch_method'] && !(typeof data['switch_method'] === 'string' || data['switch_method'] instanceof String)) {
            throw new Error("Expected the field `switch_method` to be a primitive type in the JSON string but got " + data['switch_method']);
        }
        // ensure the json data is a string
        if (data['target_account_id'] && !(typeof data['target_account_id'] === 'string' || data['target_account_id'] instanceof String)) {
            throw new Error("Expected the field `target_account_id` to be a primitive type in the JSON string but got " + data['target_account_id']);
        }
        // ensure the json data is a string
        if (data['target_item_id'] && !(typeof data['target_item_id'] === 'string' || data['target_item_id'] instanceof String)) {
            throw new Error("Expected the field `target_item_id` to be a primitive type in the JSON string but got " + data['target_item_id']);
        }

        return true;
    }


}

DepositSwitchGetResponse.RequiredProperties = ["account_has_multiple_allocations", "amount_allocated", "date_completed", "date_created", "deposit_switch_id", "is_allocated_remainder", "percent_allocated", "request_id", "state", "target_account_id", "target_item_id"];

/**
 * When `true`, user’s direct deposit goes to multiple banks. When false, user’s direct deposit only goes to the target account. Always `null` if the deposit switch has not been completed.
 * @member {Boolean} account_has_multiple_allocations
 */
DepositSwitchGetResponse.prototype['account_has_multiple_allocations'] = undefined;

/**
 * The dollar amount of direct deposit allocated to the target account. Always `null` if the target account is not allocated an amount or if the deposit switch has not been completed.
 * @member {Number} amount_allocated
 */
DepositSwitchGetResponse.prototype['amount_allocated'] = undefined;

/**
 * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was completed. Always `null` if the deposit switch has not been completed. 
 * @member {Date} date_completed
 */
DepositSwitchGetResponse.prototype['date_completed'] = undefined;

/**
 * [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was created. 
 * @member {Date} date_created
 */
DepositSwitchGetResponse.prototype['date_created'] = undefined;

/**
 * The ID of the deposit switch.
 * @member {String} deposit_switch_id
 */
DepositSwitchGetResponse.prototype['deposit_switch_id'] = undefined;

/**
 * The ID of the employer selected by the user. If the user did not select an employer, the value returned is `null`.
 * @member {String} employer_id
 */
DepositSwitchGetResponse.prototype['employer_id'] = undefined;

/**
 * The name of the employer selected by the user. If the user did not select an employer, the value returned is `null`.
 * @member {String} employer_name
 */
DepositSwitchGetResponse.prototype['employer_name'] = undefined;

/**
 * The ID of the institution selected by the user. If the user did not select an institution, the value returned is `null`.
 * @member {String} institution_id
 */
DepositSwitchGetResponse.prototype['institution_id'] = undefined;

/**
 * The name of the institution selected by the user. If the user did not select an institution, the value returned is `null`.
 * @member {String} institution_name
 */
DepositSwitchGetResponse.prototype['institution_name'] = undefined;

/**
 * When `true`, the target account is allocated the remainder of direct deposit after all other allocations have been deducted. When `false`, user’s direct deposit is allocated as a percent or amount. Always `null` if the deposit switch has not been completed.
 * @member {Boolean} is_allocated_remainder
 */
DepositSwitchGetResponse.prototype['is_allocated_remainder'] = undefined;

/**
 * The percentage of direct deposit allocated to the target account. Always `null` if the target account is not allocated a percentage or if the deposit switch has not been completed or if `is_allocated_remainder` is true.
 * @member {Number} percent_allocated
 */
DepositSwitchGetResponse.prototype['percent_allocated'] = undefined;

/**
 * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
 * @member {String} request_id
 */
DepositSwitchGetResponse.prototype['request_id'] = undefined;

/**
 *  The state, or status, of the deposit switch.  - `initialized` – The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.  - `processing` – The deposit switch request has been submitted and is being processed.  - `completed` – The user's employer has fulfilled the deposit switch request.  - `error` – There was an error processing the deposit switch request.
 * @member {module:model/DepositSwitchGetResponse.StateEnum} state
 */
DepositSwitchGetResponse.prototype['state'] = undefined;

/**
 * The method used to make the deposit switch.  - `instant` – User instantly switched their direct deposit to a new or existing bank account by connecting their payroll or employer account.  - `mail` – User requested that Plaid contact their employer by mail to make the direct deposit switch.  - `pdf` – User generated a PDF or email to be sent to their employer with the information necessary to make the deposit switch.'
 * @member {module:model/DepositSwitchGetResponse.SwitchMethodEnum} switch_method
 */
DepositSwitchGetResponse.prototype['switch_method'] = undefined;

/**
 * The ID of the bank account the direct deposit was switched to.
 * @member {String} target_account_id
 */
DepositSwitchGetResponse.prototype['target_account_id'] = undefined;

/**
 * The ID of the Item the direct deposit was switched to.
 * @member {String} target_item_id
 */
DepositSwitchGetResponse.prototype['target_item_id'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
DepositSwitchGetResponse['StateEnum'] = {

    /**
     * value: "initialized"
     * @const
     */
    "initialized": "initialized",

    /**
     * value: "processing"
     * @const
     */
    "processing": "processing",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "error"
     * @const
     */
    "error": "error"
};


/**
 * Allowed values for the <code>switch_method</code> property.
 * @enum {String}
 * @readonly
 */
DepositSwitchGetResponse['SwitchMethodEnum'] = {

    /**
     * value: "instant"
     * @const
     */
    "instant": "instant",

    /**
     * value: "mail"
     * @const
     */
    "mail": "mail",

    /**
     * value: "pdf"
     * @const
     */
    "pdf": "pdf"
};



export default DepositSwitchGetResponse;

