/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PhysicalDocumentImages model module.
 * @module model/PhysicalDocumentImages
 * @version 2020-09-14_1.345.1
 */
class PhysicalDocumentImages {
    /**
     * Constructs a new <code>PhysicalDocumentImages</code>.
     * URLs for downloading original and cropped images for this document submission. The URLs are designed to only allow downloading, not hot linking, so the URL will only serve the document image for 60 seconds before expiring. The expiration time is 60 seconds after the &#x60;GET&#x60; request for the associated Identity Verification attempt. A new expiring URL is generated with each request, so you can always rerequest the Identity Verification attempt if one of your URLs expires.
     * @alias module:model/PhysicalDocumentImages
     * @extends Object
     * @param croppedBack {String} Temporary URL that expires after 60 seconds for downloading a cropped image containing just the back of the document. Might be null if the back of the document was not collected.
     * @param croppedFront {String} Temporary URL that expires after 60 seconds for downloading a cropped image containing just the front of the document.
     * @param face {String} Temporary URL that expires after 60 seconds for downloading a crop of just the user's face from the document image. Might be null if the document does not contain a face photo.
     * @param originalBack {String} Temporary URL that expires after 60 seconds for downloading the original image of the back of the document. Might be null if the back of the document was not collected.
     * @param originalFront {String} Temporary URL that expires after 60 seconds for downloading the uncropped original image of the front of the document.
     */
    constructor(croppedBack, croppedFront, face, originalBack, originalFront) { 
        
        PhysicalDocumentImages.initialize(this, croppedBack, croppedFront, face, originalBack, originalFront);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, croppedBack, croppedFront, face, originalBack, originalFront) { 
        obj['cropped_back'] = croppedBack;
        obj['cropped_front'] = croppedFront;
        obj['face'] = face;
        obj['original_back'] = originalBack;
        obj['original_front'] = originalFront;
    }

    /**
     * Constructs a <code>PhysicalDocumentImages</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PhysicalDocumentImages} obj Optional instance to populate.
     * @return {module:model/PhysicalDocumentImages} The populated <code>PhysicalDocumentImages</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PhysicalDocumentImages();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('cropped_back')) {
                obj['cropped_back'] = ApiClient.convertToType(data['cropped_back'], 'String');
            }
            if (data.hasOwnProperty('cropped_front')) {
                obj['cropped_front'] = ApiClient.convertToType(data['cropped_front'], 'String');
            }
            if (data.hasOwnProperty('face')) {
                obj['face'] = ApiClient.convertToType(data['face'], 'String');
            }
            if (data.hasOwnProperty('original_back')) {
                obj['original_back'] = ApiClient.convertToType(data['original_back'], 'String');
            }
            if (data.hasOwnProperty('original_front')) {
                obj['original_front'] = ApiClient.convertToType(data['original_front'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PhysicalDocumentImages</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PhysicalDocumentImages</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PhysicalDocumentImages.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cropped_back'] && !(typeof data['cropped_back'] === 'string' || data['cropped_back'] instanceof String)) {
            throw new Error("Expected the field `cropped_back` to be a primitive type in the JSON string but got " + data['cropped_back']);
        }
        // ensure the json data is a string
        if (data['cropped_front'] && !(typeof data['cropped_front'] === 'string' || data['cropped_front'] instanceof String)) {
            throw new Error("Expected the field `cropped_front` to be a primitive type in the JSON string but got " + data['cropped_front']);
        }
        // ensure the json data is a string
        if (data['face'] && !(typeof data['face'] === 'string' || data['face'] instanceof String)) {
            throw new Error("Expected the field `face` to be a primitive type in the JSON string but got " + data['face']);
        }
        // ensure the json data is a string
        if (data['original_back'] && !(typeof data['original_back'] === 'string' || data['original_back'] instanceof String)) {
            throw new Error("Expected the field `original_back` to be a primitive type in the JSON string but got " + data['original_back']);
        }
        // ensure the json data is a string
        if (data['original_front'] && !(typeof data['original_front'] === 'string' || data['original_front'] instanceof String)) {
            throw new Error("Expected the field `original_front` to be a primitive type in the JSON string but got " + data['original_front']);
        }

        return true;
    }


}

PhysicalDocumentImages.RequiredProperties = ["cropped_back", "cropped_front", "face", "original_back", "original_front"];

/**
 * Temporary URL that expires after 60 seconds for downloading a cropped image containing just the back of the document. Might be null if the back of the document was not collected.
 * @member {String} cropped_back
 */
PhysicalDocumentImages.prototype['cropped_back'] = undefined;

/**
 * Temporary URL that expires after 60 seconds for downloading a cropped image containing just the front of the document.
 * @member {String} cropped_front
 */
PhysicalDocumentImages.prototype['cropped_front'] = undefined;

/**
 * Temporary URL that expires after 60 seconds for downloading a crop of just the user's face from the document image. Might be null if the document does not contain a face photo.
 * @member {String} face
 */
PhysicalDocumentImages.prototype['face'] = undefined;

/**
 * Temporary URL that expires after 60 seconds for downloading the original image of the back of the document. Might be null if the back of the document was not collected.
 * @member {String} original_back
 */
PhysicalDocumentImages.prototype['original_back'] = undefined;

/**
 * Temporary URL that expires after 60 seconds for downloading the uncropped original image of the front of the document.
 * @member {String} original_front
 */
PhysicalDocumentImages.prototype['original_front'] = undefined;






export default PhysicalDocumentImages;

