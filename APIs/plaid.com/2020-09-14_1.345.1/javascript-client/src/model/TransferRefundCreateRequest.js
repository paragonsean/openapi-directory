/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransferRefundCreateRequest model module.
 * @module model/TransferRefundCreateRequest
 * @version 2020-09-14_1.345.1
 */
class TransferRefundCreateRequest {
    /**
     * Constructs a new <code>TransferRefundCreateRequest</code>.
     * Defines the request schema for &#x60;/transfer/refund/create&#x60;
     * @alias module:model/TransferRefundCreateRequest
     * @param amount {String} The amount of the refund (decimal string with two digits of precision e.g. \"10.00\").
     * @param idempotencyKey {String} A random key provided by the client, per unique refund. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a refund fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single refund is created.
     * @param transferId {String} The ID of the transfer to refund.
     */
    constructor(amount, idempotencyKey, transferId) { 
        
        TransferRefundCreateRequest.initialize(this, amount, idempotencyKey, transferId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, idempotencyKey, transferId) { 
        obj['amount'] = amount;
        obj['idempotency_key'] = idempotencyKey;
        obj['transfer_id'] = transferId;
    }

    /**
     * Constructs a <code>TransferRefundCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferRefundCreateRequest} obj Optional instance to populate.
     * @return {module:model/TransferRefundCreateRequest} The populated <code>TransferRefundCreateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferRefundCreateRequest();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('idempotency_key')) {
                obj['idempotency_key'] = ApiClient.convertToType(data['idempotency_key'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('transfer_id')) {
                obj['transfer_id'] = ApiClient.convertToType(data['transfer_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferRefundCreateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferRefundCreateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransferRefundCreateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['idempotency_key'] && !(typeof data['idempotency_key'] === 'string' || data['idempotency_key'] instanceof String)) {
            throw new Error("Expected the field `idempotency_key` to be a primitive type in the JSON string but got " + data['idempotency_key']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // ensure the json data is a string
        if (data['transfer_id'] && !(typeof data['transfer_id'] === 'string' || data['transfer_id'] instanceof String)) {
            throw new Error("Expected the field `transfer_id` to be a primitive type in the JSON string but got " + data['transfer_id']);
        }

        return true;
    }


}

TransferRefundCreateRequest.RequiredProperties = ["amount", "idempotency_key", "transfer_id"];

/**
 * The amount of the refund (decimal string with two digits of precision e.g. \"10.00\").
 * @member {String} amount
 */
TransferRefundCreateRequest.prototype['amount'] = undefined;

/**
 * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
 * @member {String} client_id
 */
TransferRefundCreateRequest.prototype['client_id'] = undefined;

/**
 * A random key provided by the client, per unique refund. Maximum of 50 characters.  The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a refund fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single refund is created.
 * @member {String} idempotency_key
 */
TransferRefundCreateRequest.prototype['idempotency_key'] = undefined;

/**
 * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
 * @member {String} secret
 */
TransferRefundCreateRequest.prototype['secret'] = undefined;

/**
 * The ID of the transfer to refund.
 * @member {String} transfer_id
 */
TransferRefundCreateRequest.prototype['transfer_id'] = undefined;






export default TransferRefundCreateRequest;

