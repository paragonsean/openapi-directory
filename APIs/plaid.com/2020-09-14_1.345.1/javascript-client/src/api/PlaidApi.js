/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountsBalanceGetRequest from '../model/AccountsBalanceGetRequest';
import AccountsGetRequest from '../model/AccountsGetRequest';
import AccountsGetResponse from '../model/AccountsGetResponse';
import ApplicationGetRequest from '../model/ApplicationGetRequest';
import ApplicationGetResponse from '../model/ApplicationGetResponse';
import AssetReportAuditCopyCreateRequest from '../model/AssetReportAuditCopyCreateRequest';
import AssetReportAuditCopyCreateResponse from '../model/AssetReportAuditCopyCreateResponse';
import AssetReportAuditCopyGetRequest from '../model/AssetReportAuditCopyGetRequest';
import AssetReportAuditCopyRemoveRequest from '../model/AssetReportAuditCopyRemoveRequest';
import AssetReportAuditCopyRemoveResponse from '../model/AssetReportAuditCopyRemoveResponse';
import AssetReportCreateRequest from '../model/AssetReportCreateRequest';
import AssetReportCreateResponse from '../model/AssetReportCreateResponse';
import AssetReportFilterRequest from '../model/AssetReportFilterRequest';
import AssetReportFilterResponse from '../model/AssetReportFilterResponse';
import AssetReportFreddieGetRequest from '../model/AssetReportFreddieGetRequest';
import AssetReportFreddieGetResponse from '../model/AssetReportFreddieGetResponse';
import AssetReportGetRequest from '../model/AssetReportGetRequest';
import AssetReportGetResponse from '../model/AssetReportGetResponse';
import AssetReportPDFGetRequest from '../model/AssetReportPDFGetRequest';
import AssetReportRefreshRequest from '../model/AssetReportRefreshRequest';
import AssetReportRefreshResponse from '../model/AssetReportRefreshResponse';
import AssetReportRemoveRequest from '../model/AssetReportRemoveRequest';
import AssetReportRemoveResponse from '../model/AssetReportRemoveResponse';
import AuthGetRequest from '../model/AuthGetRequest';
import AuthGetResponse from '../model/AuthGetResponse';
import BankTransferBalanceGetRequest from '../model/BankTransferBalanceGetRequest';
import BankTransferBalanceGetResponse from '../model/BankTransferBalanceGetResponse';
import BankTransferCancelRequest from '../model/BankTransferCancelRequest';
import BankTransferCancelResponse from '../model/BankTransferCancelResponse';
import BankTransferCreateRequest from '../model/BankTransferCreateRequest';
import BankTransferCreateResponse from '../model/BankTransferCreateResponse';
import BankTransferEventListRequest from '../model/BankTransferEventListRequest';
import BankTransferEventListResponse from '../model/BankTransferEventListResponse';
import BankTransferEventSyncRequest from '../model/BankTransferEventSyncRequest';
import BankTransferEventSyncResponse from '../model/BankTransferEventSyncResponse';
import BankTransferGetRequest from '../model/BankTransferGetRequest';
import BankTransferGetResponse from '../model/BankTransferGetResponse';
import BankTransferListRequest from '../model/BankTransferListRequest';
import BankTransferListResponse from '../model/BankTransferListResponse';
import BankTransferMigrateAccountRequest from '../model/BankTransferMigrateAccountRequest';
import BankTransferMigrateAccountResponse from '../model/BankTransferMigrateAccountResponse';
import BankTransferSweepGetRequest from '../model/BankTransferSweepGetRequest';
import BankTransferSweepGetResponse from '../model/BankTransferSweepGetResponse';
import BankTransferSweepListRequest from '../model/BankTransferSweepListRequest';
import BankTransferSweepListResponse from '../model/BankTransferSweepListResponse';
import CategoriesGetResponse from '../model/CategoriesGetResponse';
import CreditAuditCopyTokenCreateRequest from '../model/CreditAuditCopyTokenCreateRequest';
import CreditAuditCopyTokenCreateResponse from '../model/CreditAuditCopyTokenCreateResponse';
import CreditAuditCopyTokenRemoveRequest from '../model/CreditAuditCopyTokenRemoveRequest';
import CreditAuditCopyTokenRemoveResponse from '../model/CreditAuditCopyTokenRemoveResponse';
import CreditAuditCopyTokenUpdateRequest from '../model/CreditAuditCopyTokenUpdateRequest';
import CreditAuditCopyTokenUpdateResponse from '../model/CreditAuditCopyTokenUpdateResponse';
import CreditBankEmploymentGetRequest from '../model/CreditBankEmploymentGetRequest';
import CreditBankEmploymentGetResponse from '../model/CreditBankEmploymentGetResponse';
import CreditBankIncomeGetRequest from '../model/CreditBankIncomeGetRequest';
import CreditBankIncomeGetResponse from '../model/CreditBankIncomeGetResponse';
import CreditBankIncomePDFGetRequest from '../model/CreditBankIncomePDFGetRequest';
import CreditBankIncomeRefreshRequest from '../model/CreditBankIncomeRefreshRequest';
import CreditBankIncomeRefreshResponse from '../model/CreditBankIncomeRefreshResponse';
import CreditEmploymentGetRequest from '../model/CreditEmploymentGetRequest';
import CreditEmploymentGetResponse from '../model/CreditEmploymentGetResponse';
import CreditFreddieMacReportsGetRequest from '../model/CreditFreddieMacReportsGetRequest';
import CreditFreddieMacReportsGetResponse from '../model/CreditFreddieMacReportsGetResponse';
import CreditPayrollIncomeGetRequest from '../model/CreditPayrollIncomeGetRequest';
import CreditPayrollIncomeGetResponse from '../model/CreditPayrollIncomeGetResponse';
import CreditPayrollIncomePrecheckRequest from '../model/CreditPayrollIncomePrecheckRequest';
import CreditPayrollIncomePrecheckResponse from '../model/CreditPayrollIncomePrecheckResponse';
import CreditPayrollIncomeRefreshRequest from '../model/CreditPayrollIncomeRefreshRequest';
import CreditPayrollIncomeRefreshResponse from '../model/CreditPayrollIncomeRefreshResponse';
import CreditRelayCreateRequest from '../model/CreditRelayCreateRequest';
import CreditRelayCreateResponse from '../model/CreditRelayCreateResponse';
import CreditRelayGetRequest from '../model/CreditRelayGetRequest';
import CreditRelayRefreshRequest from '../model/CreditRelayRefreshRequest';
import CreditRelayRefreshResponse from '../model/CreditRelayRefreshResponse';
import CreditRelayRemoveRequest from '../model/CreditRelayRemoveRequest';
import CreditRelayRemoveResponse from '../model/CreditRelayRemoveResponse';
import CreditSessionsGetRequest from '../model/CreditSessionsGetRequest';
import CreditSessionsGetResponse from '../model/CreditSessionsGetResponse';
import DashboardUserGetRequest from '../model/DashboardUserGetRequest';
import DashboardUserGetResponse from '../model/DashboardUserGetResponse';
import DashboardUserListRequest from '../model/DashboardUserListRequest';
import DashboardUserListResponse from '../model/DashboardUserListResponse';
import DepositSwitchAltCreateRequest from '../model/DepositSwitchAltCreateRequest';
import DepositSwitchAltCreateResponse from '../model/DepositSwitchAltCreateResponse';
import DepositSwitchCreateRequest from '../model/DepositSwitchCreateRequest';
import DepositSwitchCreateResponse from '../model/DepositSwitchCreateResponse';
import DepositSwitchGetRequest from '../model/DepositSwitchGetRequest';
import DepositSwitchGetResponse from '../model/DepositSwitchGetResponse';
import DepositSwitchTokenCreateRequest from '../model/DepositSwitchTokenCreateRequest';
import DepositSwitchTokenCreateResponse from '../model/DepositSwitchTokenCreateResponse';
import EmployersSearchRequest from '../model/EmployersSearchRequest';
import EmployersSearchResponse from '../model/EmployersSearchResponse';
import EmploymentVerificationGetRequest from '../model/EmploymentVerificationGetRequest';
import EmploymentVerificationGetResponse from '../model/EmploymentVerificationGetResponse';
import FDXNotification from '../model/FDXNotification';
import IdentityGetRequest from '../model/IdentityGetRequest';
import IdentityGetResponse from '../model/IdentityGetResponse';
import IdentityMatchRequest from '../model/IdentityMatchRequest';
import IdentityMatchResponse from '../model/IdentityMatchResponse';
import IdentityVerificationCreateRequest from '../model/IdentityVerificationCreateRequest';
import IdentityVerificationCreateResponse from '../model/IdentityVerificationCreateResponse';
import IdentityVerificationGetRequest from '../model/IdentityVerificationGetRequest';
import IdentityVerificationGetResponse from '../model/IdentityVerificationGetResponse';
import IdentityVerificationListRequest from '../model/IdentityVerificationListRequest';
import IdentityVerificationListResponse from '../model/IdentityVerificationListResponse';
import IdentityVerificationRetryRequest from '../model/IdentityVerificationRetryRequest';
import IdentityVerificationRetryResponse from '../model/IdentityVerificationRetryResponse';
import IncomeVerificationCreateRequest from '../model/IncomeVerificationCreateRequest';
import IncomeVerificationCreateResponse from '../model/IncomeVerificationCreateResponse';
import IncomeVerificationDocumentsDownloadRequest from '../model/IncomeVerificationDocumentsDownloadRequest';
import IncomeVerificationPaystubsGetRequest from '../model/IncomeVerificationPaystubsGetRequest';
import IncomeVerificationPaystubsGetResponse from '../model/IncomeVerificationPaystubsGetResponse';
import IncomeVerificationPrecheckRequest from '../model/IncomeVerificationPrecheckRequest';
import IncomeVerificationPrecheckResponse from '../model/IncomeVerificationPrecheckResponse';
import IncomeVerificationTaxformsGetRequest from '../model/IncomeVerificationTaxformsGetRequest';
import IncomeVerificationTaxformsGetResponse from '../model/IncomeVerificationTaxformsGetResponse';
import InstitutionsGetByIdRequest from '../model/InstitutionsGetByIdRequest';
import InstitutionsGetByIdResponse from '../model/InstitutionsGetByIdResponse';
import InstitutionsGetRequest from '../model/InstitutionsGetRequest';
import InstitutionsGetResponse from '../model/InstitutionsGetResponse';
import InstitutionsSearchRequest from '../model/InstitutionsSearchRequest';
import InstitutionsSearchResponse from '../model/InstitutionsSearchResponse';
import InvestmentsHoldingsGetRequest from '../model/InvestmentsHoldingsGetRequest';
import InvestmentsHoldingsGetResponse from '../model/InvestmentsHoldingsGetResponse';
import InvestmentsTransactionsGetRequest from '../model/InvestmentsTransactionsGetRequest';
import InvestmentsTransactionsGetResponse from '../model/InvestmentsTransactionsGetResponse';
import ItemAccessTokenInvalidateRequest from '../model/ItemAccessTokenInvalidateRequest';
import ItemAccessTokenInvalidateResponse from '../model/ItemAccessTokenInvalidateResponse';
import ItemActivityListRequest from '../model/ItemActivityListRequest';
import ItemActivityListResponse from '../model/ItemActivityListResponse';
import ItemApplicationListRequest from '../model/ItemApplicationListRequest';
import ItemApplicationListResponse from '../model/ItemApplicationListResponse';
import ItemApplicationScopesUpdateRequest from '../model/ItemApplicationScopesUpdateRequest';
import ItemApplicationScopesUpdateResponse from '../model/ItemApplicationScopesUpdateResponse';
import ItemGetRequest from '../model/ItemGetRequest';
import ItemGetResponse from '../model/ItemGetResponse';
import ItemImportRequest from '../model/ItemImportRequest';
import ItemImportResponse from '../model/ItemImportResponse';
import ItemPublicTokenCreateRequest from '../model/ItemPublicTokenCreateRequest';
import ItemPublicTokenCreateResponse from '../model/ItemPublicTokenCreateResponse';
import ItemPublicTokenExchangeRequest from '../model/ItemPublicTokenExchangeRequest';
import ItemPublicTokenExchangeResponse from '../model/ItemPublicTokenExchangeResponse';
import ItemRemoveRequest from '../model/ItemRemoveRequest';
import ItemRemoveResponse from '../model/ItemRemoveResponse';
import ItemWebhookUpdateRequest from '../model/ItemWebhookUpdateRequest';
import ItemWebhookUpdateResponse from '../model/ItemWebhookUpdateResponse';
import LiabilitiesGetRequest from '../model/LiabilitiesGetRequest';
import LiabilitiesGetResponse from '../model/LiabilitiesGetResponse';
import LinkDeliveryCreateRequest from '../model/LinkDeliveryCreateRequest';
import LinkDeliveryCreateResponse from '../model/LinkDeliveryCreateResponse';
import LinkDeliveryGetRequest from '../model/LinkDeliveryGetRequest';
import LinkDeliveryGetResponse from '../model/LinkDeliveryGetResponse';
import LinkOAuthCorrelationIdExchangeRequest from '../model/LinkOAuthCorrelationIdExchangeRequest';
import LinkOAuthCorrelationIdExchangeResponse from '../model/LinkOAuthCorrelationIdExchangeResponse';
import LinkTokenCreateRequest from '../model/LinkTokenCreateRequest';
import LinkTokenCreateResponse from '../model/LinkTokenCreateResponse';
import LinkTokenGetRequest from '../model/LinkTokenGetRequest';
import LinkTokenGetResponse from '../model/LinkTokenGetResponse';
import PartnerCustomerCreateRequest from '../model/PartnerCustomerCreateRequest';
import PartnerCustomerCreateResponse from '../model/PartnerCustomerCreateResponse';
import PartnerCustomerEnableRequest from '../model/PartnerCustomerEnableRequest';
import PartnerCustomerEnableResponse from '../model/PartnerCustomerEnableResponse';
import PartnerCustomerGetRequest from '../model/PartnerCustomerGetRequest';
import PartnerCustomerGetResponse from '../model/PartnerCustomerGetResponse';
import PartnerCustomerOAuthInstitutionsGetRequest from '../model/PartnerCustomerOAuthInstitutionsGetRequest';
import PartnerCustomerOAuthInstitutionsGetResponse from '../model/PartnerCustomerOAuthInstitutionsGetResponse';
import PartnerCustomerRemoveRequest from '../model/PartnerCustomerRemoveRequest';
import PartnerCustomerRemoveResponse from '../model/PartnerCustomerRemoveResponse';
import PaymentInitiationConsentCreateRequest from '../model/PaymentInitiationConsentCreateRequest';
import PaymentInitiationConsentCreateResponse from '../model/PaymentInitiationConsentCreateResponse';
import PaymentInitiationConsentGetRequest from '../model/PaymentInitiationConsentGetRequest';
import PaymentInitiationConsentGetResponse from '../model/PaymentInitiationConsentGetResponse';
import PaymentInitiationConsentPaymentExecuteRequest from '../model/PaymentInitiationConsentPaymentExecuteRequest';
import PaymentInitiationConsentPaymentExecuteResponse from '../model/PaymentInitiationConsentPaymentExecuteResponse';
import PaymentInitiationConsentRevokeRequest from '../model/PaymentInitiationConsentRevokeRequest';
import PaymentInitiationConsentRevokeResponse from '../model/PaymentInitiationConsentRevokeResponse';
import PaymentInitiationPaymentCreateRequest from '../model/PaymentInitiationPaymentCreateRequest';
import PaymentInitiationPaymentCreateResponse from '../model/PaymentInitiationPaymentCreateResponse';
import PaymentInitiationPaymentGetRequest from '../model/PaymentInitiationPaymentGetRequest';
import PaymentInitiationPaymentGetResponse from '../model/PaymentInitiationPaymentGetResponse';
import PaymentInitiationPaymentListRequest from '../model/PaymentInitiationPaymentListRequest';
import PaymentInitiationPaymentListResponse from '../model/PaymentInitiationPaymentListResponse';
import PaymentInitiationPaymentReverseRequest from '../model/PaymentInitiationPaymentReverseRequest';
import PaymentInitiationPaymentReverseResponse from '../model/PaymentInitiationPaymentReverseResponse';
import PaymentInitiationPaymentTokenCreateRequest from '../model/PaymentInitiationPaymentTokenCreateRequest';
import PaymentInitiationPaymentTokenCreateResponse from '../model/PaymentInitiationPaymentTokenCreateResponse';
import PaymentInitiationRecipientCreateRequest from '../model/PaymentInitiationRecipientCreateRequest';
import PaymentInitiationRecipientCreateResponse from '../model/PaymentInitiationRecipientCreateResponse';
import PaymentInitiationRecipientGetRequest from '../model/PaymentInitiationRecipientGetRequest';
import PaymentInitiationRecipientGetResponse from '../model/PaymentInitiationRecipientGetResponse';
import PaymentInitiationRecipientListRequest from '../model/PaymentInitiationRecipientListRequest';
import PaymentInitiationRecipientListResponse from '../model/PaymentInitiationRecipientListResponse';
import PaymentProfileCreateRequest from '../model/PaymentProfileCreateRequest';
import PaymentProfileCreateResponse from '../model/PaymentProfileCreateResponse';
import PaymentProfileGetRequest from '../model/PaymentProfileGetRequest';
import PaymentProfileGetResponse from '../model/PaymentProfileGetResponse';
import PaymentProfileRemoveRequest from '../model/PaymentProfileRemoveRequest';
import PaymentProfileRemoveResponse from '../model/PaymentProfileRemoveResponse';
import PlaidError from '../model/PlaidError';
import ProcessorApexProcessorTokenCreateRequest from '../model/ProcessorApexProcessorTokenCreateRequest';
import ProcessorAuthGetRequest from '../model/ProcessorAuthGetRequest';
import ProcessorAuthGetResponse from '../model/ProcessorAuthGetResponse';
import ProcessorBalanceGetRequest from '../model/ProcessorBalanceGetRequest';
import ProcessorBalanceGetResponse from '../model/ProcessorBalanceGetResponse';
import ProcessorBankTransferCreateRequest from '../model/ProcessorBankTransferCreateRequest';
import ProcessorBankTransferCreateResponse from '../model/ProcessorBankTransferCreateResponse';
import ProcessorIdentityGetRequest from '../model/ProcessorIdentityGetRequest';
import ProcessorIdentityGetResponse from '../model/ProcessorIdentityGetResponse';
import ProcessorSignalDecisionReportRequest from '../model/ProcessorSignalDecisionReportRequest';
import ProcessorSignalDecisionReportResponse from '../model/ProcessorSignalDecisionReportResponse';
import ProcessorSignalEvaluateRequest from '../model/ProcessorSignalEvaluateRequest';
import ProcessorSignalEvaluateResponse from '../model/ProcessorSignalEvaluateResponse';
import ProcessorSignalReturnReportRequest from '../model/ProcessorSignalReturnReportRequest';
import ProcessorSignalReturnReportResponse from '../model/ProcessorSignalReturnReportResponse';
import ProcessorStripeBankAccountTokenCreateRequest from '../model/ProcessorStripeBankAccountTokenCreateRequest';
import ProcessorStripeBankAccountTokenCreateResponse from '../model/ProcessorStripeBankAccountTokenCreateResponse';
import ProcessorTokenCreateRequest from '../model/ProcessorTokenCreateRequest';
import ProcessorTokenCreateResponse from '../model/ProcessorTokenCreateResponse';
import SandboxBankTransferFireWebhookRequest from '../model/SandboxBankTransferFireWebhookRequest';
import SandboxBankTransferFireWebhookResponse from '../model/SandboxBankTransferFireWebhookResponse';
import SandboxBankTransferSimulateRequest from '../model/SandboxBankTransferSimulateRequest';
import SandboxBankTransferSimulateResponse from '../model/SandboxBankTransferSimulateResponse';
import SandboxIncomeFireWebhookRequest from '../model/SandboxIncomeFireWebhookRequest';
import SandboxIncomeFireWebhookResponse from '../model/SandboxIncomeFireWebhookResponse';
import SandboxItemFireWebhookRequest from '../model/SandboxItemFireWebhookRequest';
import SandboxItemFireWebhookResponse from '../model/SandboxItemFireWebhookResponse';
import SandboxItemResetLoginRequest from '../model/SandboxItemResetLoginRequest';
import SandboxItemResetLoginResponse from '../model/SandboxItemResetLoginResponse';
import SandboxItemSetVerificationStatusRequest from '../model/SandboxItemSetVerificationStatusRequest';
import SandboxItemSetVerificationStatusResponse from '../model/SandboxItemSetVerificationStatusResponse';
import SandboxOauthSelectAccountsRequest from '../model/SandboxOauthSelectAccountsRequest';
import SandboxPaymentProfileResetLoginRequest from '../model/SandboxPaymentProfileResetLoginRequest';
import SandboxPaymentProfileResetLoginResponse from '../model/SandboxPaymentProfileResetLoginResponse';
import SandboxProcessorTokenCreateRequest from '../model/SandboxProcessorTokenCreateRequest';
import SandboxProcessorTokenCreateResponse from '../model/SandboxProcessorTokenCreateResponse';
import SandboxPublicTokenCreateRequest from '../model/SandboxPublicTokenCreateRequest';
import SandboxPublicTokenCreateResponse from '../model/SandboxPublicTokenCreateResponse';
import SandboxTransferFireWebhookRequest from '../model/SandboxTransferFireWebhookRequest';
import SandboxTransferFireWebhookResponse from '../model/SandboxTransferFireWebhookResponse';
import SandboxTransferRepaymentSimulateRequest from '../model/SandboxTransferRepaymentSimulateRequest';
import SandboxTransferRepaymentSimulateResponse from '../model/SandboxTransferRepaymentSimulateResponse';
import SandboxTransferSimulateRequest from '../model/SandboxTransferSimulateRequest';
import SandboxTransferSimulateResponse from '../model/SandboxTransferSimulateResponse';
import SandboxTransferSweepSimulateRequest from '../model/SandboxTransferSweepSimulateRequest';
import SandboxTransferSweepSimulateResponse from '../model/SandboxTransferSweepSimulateResponse';
import SandboxTransferTestClockAdvanceRequest from '../model/SandboxTransferTestClockAdvanceRequest';
import SandboxTransferTestClockAdvanceResponse from '../model/SandboxTransferTestClockAdvanceResponse';
import SandboxTransferTestClockCreateRequest from '../model/SandboxTransferTestClockCreateRequest';
import SandboxTransferTestClockCreateResponse from '../model/SandboxTransferTestClockCreateResponse';
import SandboxTransferTestClockGetRequest from '../model/SandboxTransferTestClockGetRequest';
import SandboxTransferTestClockGetResponse from '../model/SandboxTransferTestClockGetResponse';
import SandboxTransferTestClockListRequest from '../model/SandboxTransferTestClockListRequest';
import SandboxTransferTestClockListResponse from '../model/SandboxTransferTestClockListResponse';
import SignalDecisionReportRequest from '../model/SignalDecisionReportRequest';
import SignalDecisionReportResponse from '../model/SignalDecisionReportResponse';
import SignalEvaluateRequest from '../model/SignalEvaluateRequest';
import SignalEvaluateResponse from '../model/SignalEvaluateResponse';
import SignalPrepareRequest from '../model/SignalPrepareRequest';
import SignalPrepareResponse from '../model/SignalPrepareResponse';
import SignalReturnReportRequest from '../model/SignalReturnReportRequest';
import SignalReturnReportResponse from '../model/SignalReturnReportResponse';
import TransactionsEnhanceGetRequest from '../model/TransactionsEnhanceGetRequest';
import TransactionsEnhanceGetResponse from '../model/TransactionsEnhanceGetResponse';
import TransactionsEnrichGetRequest from '../model/TransactionsEnrichGetRequest';
import TransactionsEnrichGetResponse from '../model/TransactionsEnrichGetResponse';
import TransactionsGetRequest from '../model/TransactionsGetRequest';
import TransactionsGetResponse from '../model/TransactionsGetResponse';
import TransactionsRecurringGetRequest from '../model/TransactionsRecurringGetRequest';
import TransactionsRecurringGetResponse from '../model/TransactionsRecurringGetResponse';
import TransactionsRefreshRequest from '../model/TransactionsRefreshRequest';
import TransactionsRefreshResponse from '../model/TransactionsRefreshResponse';
import TransactionsRulesCreateRequest from '../model/TransactionsRulesCreateRequest';
import TransactionsRulesCreateResponse from '../model/TransactionsRulesCreateResponse';
import TransactionsRulesListRequest from '../model/TransactionsRulesListRequest';
import TransactionsRulesListResponse from '../model/TransactionsRulesListResponse';
import TransactionsRulesRemoveRequest from '../model/TransactionsRulesRemoveRequest';
import TransactionsRulesRemoveResponse from '../model/TransactionsRulesRemoveResponse';
import TransactionsSyncRequest from '../model/TransactionsSyncRequest';
import TransactionsSyncResponse from '../model/TransactionsSyncResponse';
import TransferAuthorizationCreateRequest from '../model/TransferAuthorizationCreateRequest';
import TransferAuthorizationCreateResponse from '../model/TransferAuthorizationCreateResponse';
import TransferCancelRequest from '../model/TransferCancelRequest';
import TransferCancelResponse from '../model/TransferCancelResponse';
import TransferCapabilitiesGetRequest from '../model/TransferCapabilitiesGetRequest';
import TransferCapabilitiesGetResponse from '../model/TransferCapabilitiesGetResponse';
import TransferConfigurationGetRequest from '../model/TransferConfigurationGetRequest';
import TransferConfigurationGetResponse from '../model/TransferConfigurationGetResponse';
import TransferCreateRequest from '../model/TransferCreateRequest';
import TransferCreateResponse from '../model/TransferCreateResponse';
import TransferEventListRequest from '../model/TransferEventListRequest';
import TransferEventListResponse from '../model/TransferEventListResponse';
import TransferEventSyncRequest from '../model/TransferEventSyncRequest';
import TransferEventSyncResponse from '../model/TransferEventSyncResponse';
import TransferGetRequest from '../model/TransferGetRequest';
import TransferGetResponse from '../model/TransferGetResponse';
import TransferIntentCreateRequest from '../model/TransferIntentCreateRequest';
import TransferIntentCreateResponse from '../model/TransferIntentCreateResponse';
import TransferIntentGetRequest from '../model/TransferIntentGetRequest';
import TransferIntentGetResponse from '../model/TransferIntentGetResponse';
import TransferListRequest from '../model/TransferListRequest';
import TransferListResponse from '../model/TransferListResponse';
import TransferMetricsGetRequest from '../model/TransferMetricsGetRequest';
import TransferMetricsGetResponse from '../model/TransferMetricsGetResponse';
import TransferMigrateAccountRequest from '../model/TransferMigrateAccountRequest';
import TransferMigrateAccountResponse from '../model/TransferMigrateAccountResponse';
import TransferOriginatorCreateRequest from '../model/TransferOriginatorCreateRequest';
import TransferOriginatorCreateResponse from '../model/TransferOriginatorCreateResponse';
import TransferOriginatorGetRequest from '../model/TransferOriginatorGetRequest';
import TransferOriginatorGetResponse from '../model/TransferOriginatorGetResponse';
import TransferOriginatorListRequest from '../model/TransferOriginatorListRequest';
import TransferOriginatorListResponse from '../model/TransferOriginatorListResponse';
import TransferQuestionnaireCreateRequest from '../model/TransferQuestionnaireCreateRequest';
import TransferQuestionnaireCreateResponse from '../model/TransferQuestionnaireCreateResponse';
import TransferRecurringCancelRequest from '../model/TransferRecurringCancelRequest';
import TransferRecurringCancelResponse from '../model/TransferRecurringCancelResponse';
import TransferRecurringCreateRequest from '../model/TransferRecurringCreateRequest';
import TransferRecurringCreateResponse from '../model/TransferRecurringCreateResponse';
import TransferRecurringGetRequest from '../model/TransferRecurringGetRequest';
import TransferRecurringGetResponse from '../model/TransferRecurringGetResponse';
import TransferRecurringListRequest from '../model/TransferRecurringListRequest';
import TransferRecurringListResponse from '../model/TransferRecurringListResponse';
import TransferRefundCancelRequest from '../model/TransferRefundCancelRequest';
import TransferRefundCancelResponse from '../model/TransferRefundCancelResponse';
import TransferRefundCreateRequest from '../model/TransferRefundCreateRequest';
import TransferRefundCreateResponse from '../model/TransferRefundCreateResponse';
import TransferRefundGetRequest from '../model/TransferRefundGetRequest';
import TransferRefundGetResponse from '../model/TransferRefundGetResponse';
import TransferRepaymentListRequest from '../model/TransferRepaymentListRequest';
import TransferRepaymentListResponse from '../model/TransferRepaymentListResponse';
import TransferRepaymentReturnListRequest from '../model/TransferRepaymentReturnListRequest';
import TransferRepaymentReturnListResponse from '../model/TransferRepaymentReturnListResponse';
import TransferSweepGetRequest from '../model/TransferSweepGetRequest';
import TransferSweepGetResponse from '../model/TransferSweepGetResponse';
import TransferSweepListRequest from '../model/TransferSweepListRequest';
import TransferSweepListResponse from '../model/TransferSweepListResponse';
import UserCreateRequest from '../model/UserCreateRequest';
import UserCreateResponse from '../model/UserCreateResponse';
import WalletCreateRequest from '../model/WalletCreateRequest';
import WalletCreateResponse from '../model/WalletCreateResponse';
import WalletGetRequest from '../model/WalletGetRequest';
import WalletGetResponse from '../model/WalletGetResponse';
import WalletListRequest from '../model/WalletListRequest';
import WalletListResponse from '../model/WalletListResponse';
import WalletTransactionExecuteRequest from '../model/WalletTransactionExecuteRequest';
import WalletTransactionExecuteResponse from '../model/WalletTransactionExecuteResponse';
import WalletTransactionGetRequest from '../model/WalletTransactionGetRequest';
import WalletTransactionGetResponse from '../model/WalletTransactionGetResponse';
import WalletTransactionListRequest from '../model/WalletTransactionListRequest';
import WalletTransactionListResponse from '../model/WalletTransactionListResponse';
import WatchlistScreeningEntityCreateRequest from '../model/WatchlistScreeningEntityCreateRequest';
import WatchlistScreeningEntityCreateResponse from '../model/WatchlistScreeningEntityCreateResponse';
import WatchlistScreeningEntityGetRequest from '../model/WatchlistScreeningEntityGetRequest';
import WatchlistScreeningEntityGetResponse from '../model/WatchlistScreeningEntityGetResponse';
import WatchlistScreeningEntityHistoryListRequest from '../model/WatchlistScreeningEntityHistoryListRequest';
import WatchlistScreeningEntityHistoryListResponse from '../model/WatchlistScreeningEntityHistoryListResponse';
import WatchlistScreeningEntityHitListRequest from '../model/WatchlistScreeningEntityHitListRequest';
import WatchlistScreeningEntityHitListResponse from '../model/WatchlistScreeningEntityHitListResponse';
import WatchlistScreeningEntityListRequest from '../model/WatchlistScreeningEntityListRequest';
import WatchlistScreeningEntityListResponse from '../model/WatchlistScreeningEntityListResponse';
import WatchlistScreeningEntityProgramGetRequest from '../model/WatchlistScreeningEntityProgramGetRequest';
import WatchlistScreeningEntityProgramGetResponse from '../model/WatchlistScreeningEntityProgramGetResponse';
import WatchlistScreeningEntityProgramListRequest from '../model/WatchlistScreeningEntityProgramListRequest';
import WatchlistScreeningEntityProgramListResponse from '../model/WatchlistScreeningEntityProgramListResponse';
import WatchlistScreeningEntityReviewCreateRequest from '../model/WatchlistScreeningEntityReviewCreateRequest';
import WatchlistScreeningEntityReviewCreateResponse from '../model/WatchlistScreeningEntityReviewCreateResponse';
import WatchlistScreeningEntityReviewListRequest from '../model/WatchlistScreeningEntityReviewListRequest';
import WatchlistScreeningEntityReviewListResponse from '../model/WatchlistScreeningEntityReviewListResponse';
import WatchlistScreeningEntityUpdateRequest from '../model/WatchlistScreeningEntityUpdateRequest';
import WatchlistScreeningEntityUpdateResponse from '../model/WatchlistScreeningEntityUpdateResponse';
import WatchlistScreeningIndividualCreateRequest from '../model/WatchlistScreeningIndividualCreateRequest';
import WatchlistScreeningIndividualCreateResponse from '../model/WatchlistScreeningIndividualCreateResponse';
import WatchlistScreeningIndividualGetRequest from '../model/WatchlistScreeningIndividualGetRequest';
import WatchlistScreeningIndividualGetResponse from '../model/WatchlistScreeningIndividualGetResponse';
import WatchlistScreeningIndividualHistoryListRequest from '../model/WatchlistScreeningIndividualHistoryListRequest';
import WatchlistScreeningIndividualHistoryListResponse from '../model/WatchlistScreeningIndividualHistoryListResponse';
import WatchlistScreeningIndividualHitListRequest from '../model/WatchlistScreeningIndividualHitListRequest';
import WatchlistScreeningIndividualHitListResponse from '../model/WatchlistScreeningIndividualHitListResponse';
import WatchlistScreeningIndividualListRequest from '../model/WatchlistScreeningIndividualListRequest';
import WatchlistScreeningIndividualListResponse from '../model/WatchlistScreeningIndividualListResponse';
import WatchlistScreeningIndividualProgramGetRequest from '../model/WatchlistScreeningIndividualProgramGetRequest';
import WatchlistScreeningIndividualProgramGetResponse from '../model/WatchlistScreeningIndividualProgramGetResponse';
import WatchlistScreeningIndividualProgramListRequest from '../model/WatchlistScreeningIndividualProgramListRequest';
import WatchlistScreeningIndividualProgramListResponse from '../model/WatchlistScreeningIndividualProgramListResponse';
import WatchlistScreeningIndividualReviewCreateRequest from '../model/WatchlistScreeningIndividualReviewCreateRequest';
import WatchlistScreeningIndividualReviewCreateResponse from '../model/WatchlistScreeningIndividualReviewCreateResponse';
import WatchlistScreeningIndividualReviewListRequest from '../model/WatchlistScreeningIndividualReviewListRequest';
import WatchlistScreeningIndividualReviewListResponse from '../model/WatchlistScreeningIndividualReviewListResponse';
import WatchlistScreeningIndividualUpdateRequest from '../model/WatchlistScreeningIndividualUpdateRequest';
import WatchlistScreeningIndividualUpdateResponse from '../model/WatchlistScreeningIndividualUpdateResponse';
import WebhookVerificationKeyGetRequest from '../model/WebhookVerificationKeyGetRequest';
import WebhookVerificationKeyGetResponse from '../model/WebhookVerificationKeyGetResponse';

/**
* Plaid service.
* @module api/PlaidApi
* @version 2020-09-14_1.345.1
*/
export default class PlaidApi {

    /**
    * Constructs a new PlaidApi. 
    * @alias module:api/PlaidApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountsBalanceGet operation.
     * @callback module:api/PlaidApi~accountsBalanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountsGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve real-time balance data
     * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints; if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
     * @param {module:model/AccountsBalanceGetRequest} accountsBalanceGetRequest 
     * @param {module:api/PlaidApi~accountsBalanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountsGetResponse}
     */
    accountsBalanceGet(accountsBalanceGetRequest, callback) {
      let postBody = accountsBalanceGetRequest;
      // verify the required parameter 'accountsBalanceGetRequest' is set
      if (accountsBalanceGetRequest === undefined || accountsBalanceGetRequest === null) {
        throw new Error("Missing the required parameter 'accountsBalanceGetRequest' when calling accountsBalanceGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountsGetResponse;
      return this.apiClient.callApi(
        '/accounts/balance/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountsGet operation.
     * @callback module:api/PlaidApi~accountsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountsGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve accounts
     * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link's [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
     * @param {module:model/AccountsGetRequest} accountsGetRequest 
     * @param {module:api/PlaidApi~accountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountsGetResponse}
     */
    accountsGet(accountsGetRequest, callback) {
      let postBody = accountsGetRequest;
      // verify the required parameter 'accountsGetRequest' is set
      if (accountsGetRequest === undefined || accountsGetRequest === null) {
        throw new Error("Missing the required parameter 'accountsGetRequest' when calling accountsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountsGetResponse;
      return this.apiClient.callApi(
        '/accounts/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationGet operation.
     * @callback module:api/PlaidApi~applicationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information about a Plaid application
     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
     * @param {module:model/ApplicationGetRequest} applicationGetRequest 
     * @param {module:api/PlaidApi~applicationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationGetResponse}
     */
    applicationGet(applicationGetRequest, callback) {
      let postBody = applicationGetRequest;
      // verify the required parameter 'applicationGetRequest' is set
      if (applicationGetRequest === undefined || applicationGetRequest === null) {
        throw new Error("Missing the required parameter 'applicationGetRequest' when calling applicationGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApplicationGetResponse;
      return this.apiClient.callApi(
        '/application/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetReportAuditCopyCreate operation.
     * @callback module:api/PlaidApi~assetReportAuditCopyCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetReportAuditCopyCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Asset Report Audit Copy
     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     * @param {module:model/AssetReportAuditCopyCreateRequest} assetReportAuditCopyCreateRequest 
     * @param {module:api/PlaidApi~assetReportAuditCopyCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetReportAuditCopyCreateResponse}
     */
    assetReportAuditCopyCreate(assetReportAuditCopyCreateRequest, callback) {
      let postBody = assetReportAuditCopyCreateRequest;
      // verify the required parameter 'assetReportAuditCopyCreateRequest' is set
      if (assetReportAuditCopyCreateRequest === undefined || assetReportAuditCopyCreateRequest === null) {
        throw new Error("Missing the required parameter 'assetReportAuditCopyCreateRequest' when calling assetReportAuditCopyCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetReportAuditCopyCreateResponse;
      return this.apiClient.callApi(
        '/asset_report/audit_copy/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetReportAuditCopyGet operation.
     * @callback module:api/PlaidApi~assetReportAuditCopyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetReportGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Asset Report Audit Copy
     * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
     * @param {module:model/AssetReportAuditCopyGetRequest} assetReportAuditCopyGetRequest 
     * @param {module:api/PlaidApi~assetReportAuditCopyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetReportGetResponse}
     */
    assetReportAuditCopyGet(assetReportAuditCopyGetRequest, callback) {
      let postBody = assetReportAuditCopyGetRequest;
      // verify the required parameter 'assetReportAuditCopyGetRequest' is set
      if (assetReportAuditCopyGetRequest === undefined || assetReportAuditCopyGetRequest === null) {
        throw new Error("Missing the required parameter 'assetReportAuditCopyGetRequest' when calling assetReportAuditCopyGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetReportGetResponse;
      return this.apiClient.callApi(
        '/asset_report/audit_copy/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetReportAuditCopyRemove operation.
     * @callback module:api/PlaidApi~assetReportAuditCopyRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetReportAuditCopyRemoveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Asset Report Audit Copy
     * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @param {module:model/AssetReportAuditCopyRemoveRequest} assetReportAuditCopyRemoveRequest 
     * @param {module:api/PlaidApi~assetReportAuditCopyRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetReportAuditCopyRemoveResponse}
     */
    assetReportAuditCopyRemove(assetReportAuditCopyRemoveRequest, callback) {
      let postBody = assetReportAuditCopyRemoveRequest;
      // verify the required parameter 'assetReportAuditCopyRemoveRequest' is set
      if (assetReportAuditCopyRemoveRequest === undefined || assetReportAuditCopyRemoveRequest === null) {
        throw new Error("Missing the required parameter 'assetReportAuditCopyRemoveRequest' when calling assetReportAuditCopyRemove");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetReportAuditCopyRemoveResponse;
      return this.apiClient.callApi(
        '/asset_report/audit_copy/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetReportCreate operation.
     * @callback module:api/PlaidApi~assetReportCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetReportCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Asset Report
     * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
     * @param {module:model/AssetReportCreateRequest} assetReportCreateRequest 
     * @param {module:api/PlaidApi~assetReportCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetReportCreateResponse}
     */
    assetReportCreate(assetReportCreateRequest, callback) {
      let postBody = assetReportCreateRequest;
      // verify the required parameter 'assetReportCreateRequest' is set
      if (assetReportCreateRequest === undefined || assetReportCreateRequest === null) {
        throw new Error("Missing the required parameter 'assetReportCreateRequest' when calling assetReportCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetReportCreateResponse;
      return this.apiClient.callApi(
        '/asset_report/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetReportFilter operation.
     * @callback module:api/PlaidApi~assetReportFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetReportFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Filter Asset Report
     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report's data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
     * @param {module:model/AssetReportFilterRequest} assetReportFilterRequest 
     * @param {module:api/PlaidApi~assetReportFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetReportFilterResponse}
     */
    assetReportFilter(assetReportFilterRequest, callback) {
      let postBody = assetReportFilterRequest;
      // verify the required parameter 'assetReportFilterRequest' is set
      if (assetReportFilterRequest === undefined || assetReportFilterRequest === null) {
        throw new Error("Missing the required parameter 'assetReportFilterRequest' when calling assetReportFilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetReportFilterResponse;
      return this.apiClient.callApi(
        '/asset_report/filter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetReportGet operation.
     * @callback module:api/PlaidApi~assetReportGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetReportGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Asset Report
     * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  If report_type was set to `VERIFICATION_OF_EMPLOYMENT` when the Asset Report was created in asset_report/create, debit transactions and transaction amounts won’t be included in the report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.
     * @param {module:model/AssetReportGetRequest} assetReportGetRequest 
     * @param {module:api/PlaidApi~assetReportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetReportGetResponse}
     */
    assetReportGet(assetReportGetRequest, callback) {
      let postBody = assetReportGetRequest;
      // verify the required parameter 'assetReportGetRequest' is set
      if (assetReportGetRequest === undefined || assetReportGetRequest === null) {
        throw new Error("Missing the required parameter 'assetReportGetRequest' when calling assetReportGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetReportGetResponse;
      return this.apiClient.callApi(
        '/asset_report/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetReportPdfGet operation.
     * @callback module:api/PlaidApi~assetReportPdfGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a PDF Asset Report
     * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  If report_type was set to `VERIFICATION_OF_EMPLOYMENT` when the Asset Report was created in asset_report/create, debit transactions and transaction amounts won’t be included in the report.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     * @param {module:model/AssetReportPDFGetRequest} assetReportPDFGetRequest 
     * @param {module:api/PlaidApi~assetReportPdfGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    assetReportPdfGet(assetReportPDFGetRequest, callback) {
      let postBody = assetReportPDFGetRequest;
      // verify the required parameter 'assetReportPDFGetRequest' is set
      if (assetReportPDFGetRequest === undefined || assetReportPDFGetRequest === null) {
        throw new Error("Missing the required parameter 'assetReportPDFGetRequest' when calling assetReportPdfGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf'];
      let returnType = File;
      return this.apiClient.callApi(
        '/asset_report/pdf/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetReportRefresh operation.
     * @callback module:api/PlaidApi~assetReportRefreshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetReportRefreshResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh an Asset Report
     * An Asset Report is an immutable snapshot of a user's assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
     * @param {module:model/AssetReportRefreshRequest} assetReportRefreshRequest 
     * @param {module:api/PlaidApi~assetReportRefreshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetReportRefreshResponse}
     */
    assetReportRefresh(assetReportRefreshRequest, callback) {
      let postBody = assetReportRefreshRequest;
      // verify the required parameter 'assetReportRefreshRequest' is set
      if (assetReportRefreshRequest === undefined || assetReportRefreshRequest === null) {
        throw new Error("Missing the required parameter 'assetReportRefreshRequest' when calling assetReportRefresh");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetReportRefreshResponse;
      return this.apiClient.callApi(
        '/asset_report/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetReportRemove operation.
     * @callback module:api/PlaidApi~assetReportRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetReportRemoveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Asset Report
     * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
     * @param {module:model/AssetReportRemoveRequest} assetReportRemoveRequest 
     * @param {module:api/PlaidApi~assetReportRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetReportRemoveResponse}
     */
    assetReportRemove(assetReportRemoveRequest, callback) {
      let postBody = assetReportRemoveRequest;
      // verify the required parameter 'assetReportRemoveRequest' is set
      if (assetReportRemoveRequest === undefined || assetReportRemoveRequest === null) {
        throw new Error("Missing the required parameter 'assetReportRemoveRequest' when calling assetReportRemove");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetReportRemoveResponse;
      return this.apiClient.callApi(
        '/asset_report/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authGet operation.
     * @callback module:api/PlaidApi~authGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve auth data
     * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item's checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     * @param {module:model/AuthGetRequest} authGetRequest 
     * @param {module:api/PlaidApi~authGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthGetResponse}
     */
    authGet(authGetRequest, callback) {
      let postBody = authGetRequest;
      // verify the required parameter 'authGetRequest' is set
      if (authGetRequest === undefined || authGetRequest === null) {
        throw new Error("Missing the required parameter 'authGetRequest' when calling authGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthGetResponse;
      return this.apiClient.callApi(
        '/auth/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bankTransferBalanceGet operation.
     * @callback module:api/PlaidApi~bankTransferBalanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransferBalanceGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get balance of your Bank Transfer account
     * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
     * @param {module:model/BankTransferBalanceGetRequest} bankTransferBalanceGetRequest 
     * @param {module:api/PlaidApi~bankTransferBalanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransferBalanceGetResponse}
     */
    bankTransferBalanceGet(bankTransferBalanceGetRequest, callback) {
      let postBody = bankTransferBalanceGetRequest;
      // verify the required parameter 'bankTransferBalanceGetRequest' is set
      if (bankTransferBalanceGetRequest === undefined || bankTransferBalanceGetRequest === null) {
        throw new Error("Missing the required parameter 'bankTransferBalanceGetRequest' when calling bankTransferBalanceGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankTransferBalanceGetResponse;
      return this.apiClient.callApi(
        '/bank_transfer/balance/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bankTransferCancel operation.
     * @callback module:api/PlaidApi~bankTransferCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransferCancelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a bank transfer
     * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
     * @param {module:model/BankTransferCancelRequest} bankTransferCancelRequest 
     * @param {module:api/PlaidApi~bankTransferCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransferCancelResponse}
     */
    bankTransferCancel(bankTransferCancelRequest, callback) {
      let postBody = bankTransferCancelRequest;
      // verify the required parameter 'bankTransferCancelRequest' is set
      if (bankTransferCancelRequest === undefined || bankTransferCancelRequest === null) {
        throw new Error("Missing the required parameter 'bankTransferCancelRequest' when calling bankTransferCancel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankTransferCancelResponse;
      return this.apiClient.callApi(
        '/bank_transfer/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bankTransferCreate operation.
     * @callback module:api/PlaidApi~bankTransferCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransferCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a bank transfer
     * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
     * @param {module:model/BankTransferCreateRequest} bankTransferCreateRequest 
     * @param {module:api/PlaidApi~bankTransferCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransferCreateResponse}
     */
    bankTransferCreate(bankTransferCreateRequest, callback) {
      let postBody = bankTransferCreateRequest;
      // verify the required parameter 'bankTransferCreateRequest' is set
      if (bankTransferCreateRequest === undefined || bankTransferCreateRequest === null) {
        throw new Error("Missing the required parameter 'bankTransferCreateRequest' when calling bankTransferCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankTransferCreateResponse;
      return this.apiClient.callApi(
        '/bank_transfer/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bankTransferEventList operation.
     * @callback module:api/PlaidApi~bankTransferEventListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransferEventListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List bank transfer events
     * Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
     * @param {module:model/BankTransferEventListRequest} bankTransferEventListRequest 
     * @param {module:api/PlaidApi~bankTransferEventListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransferEventListResponse}
     */
    bankTransferEventList(bankTransferEventListRequest, callback) {
      let postBody = bankTransferEventListRequest;
      // verify the required parameter 'bankTransferEventListRequest' is set
      if (bankTransferEventListRequest === undefined || bankTransferEventListRequest === null) {
        throw new Error("Missing the required parameter 'bankTransferEventListRequest' when calling bankTransferEventList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankTransferEventListResponse;
      return this.apiClient.callApi(
        '/bank_transfer/event/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bankTransferEventSync operation.
     * @callback module:api/PlaidApi~bankTransferEventSyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransferEventSyncResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sync bank transfer events
     * `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
     * @param {module:model/BankTransferEventSyncRequest} bankTransferEventSyncRequest 
     * @param {module:api/PlaidApi~bankTransferEventSyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransferEventSyncResponse}
     */
    bankTransferEventSync(bankTransferEventSyncRequest, callback) {
      let postBody = bankTransferEventSyncRequest;
      // verify the required parameter 'bankTransferEventSyncRequest' is set
      if (bankTransferEventSyncRequest === undefined || bankTransferEventSyncRequest === null) {
        throw new Error("Missing the required parameter 'bankTransferEventSyncRequest' when calling bankTransferEventSync");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankTransferEventSyncResponse;
      return this.apiClient.callApi(
        '/bank_transfer/event/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bankTransferGet operation.
     * @callback module:api/PlaidApi~bankTransferGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransferGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a bank transfer
     * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
     * @param {module:model/BankTransferGetRequest} bankTransferGetRequest 
     * @param {module:api/PlaidApi~bankTransferGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransferGetResponse}
     */
    bankTransferGet(bankTransferGetRequest, callback) {
      let postBody = bankTransferGetRequest;
      // verify the required parameter 'bankTransferGetRequest' is set
      if (bankTransferGetRequest === undefined || bankTransferGetRequest === null) {
        throw new Error("Missing the required parameter 'bankTransferGetRequest' when calling bankTransferGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankTransferGetResponse;
      return this.apiClient.callApi(
        '/bank_transfer/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bankTransferList operation.
     * @callback module:api/PlaidApi~bankTransferListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransferListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List bank transfers
     * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers. 
     * @param {module:model/BankTransferListRequest} bankTransferListRequest 
     * @param {module:api/PlaidApi~bankTransferListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransferListResponse}
     */
    bankTransferList(bankTransferListRequest, callback) {
      let postBody = bankTransferListRequest;
      // verify the required parameter 'bankTransferListRequest' is set
      if (bankTransferListRequest === undefined || bankTransferListRequest === null) {
        throw new Error("Missing the required parameter 'bankTransferListRequest' when calling bankTransferList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankTransferListResponse;
      return this.apiClient.callApi(
        '/bank_transfer/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bankTransferMigrateAccount operation.
     * @callback module:api/PlaidApi~bankTransferMigrateAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransferMigrateAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Migrate account into Bank Transfers
     * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @param {module:model/BankTransferMigrateAccountRequest} bankTransferMigrateAccountRequest 
     * @param {module:api/PlaidApi~bankTransferMigrateAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransferMigrateAccountResponse}
     */
    bankTransferMigrateAccount(bankTransferMigrateAccountRequest, callback) {
      let postBody = bankTransferMigrateAccountRequest;
      // verify the required parameter 'bankTransferMigrateAccountRequest' is set
      if (bankTransferMigrateAccountRequest === undefined || bankTransferMigrateAccountRequest === null) {
        throw new Error("Missing the required parameter 'bankTransferMigrateAccountRequest' when calling bankTransferMigrateAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankTransferMigrateAccountResponse;
      return this.apiClient.callApi(
        '/bank_transfer/migrate_account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bankTransferSweepGet operation.
     * @callback module:api/PlaidApi~bankTransferSweepGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransferSweepGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a sweep
     * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
     * @param {module:model/BankTransferSweepGetRequest} bankTransferSweepGetRequest 
     * @param {module:api/PlaidApi~bankTransferSweepGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransferSweepGetResponse}
     */
    bankTransferSweepGet(bankTransferSweepGetRequest, callback) {
      let postBody = bankTransferSweepGetRequest;
      // verify the required parameter 'bankTransferSweepGetRequest' is set
      if (bankTransferSweepGetRequest === undefined || bankTransferSweepGetRequest === null) {
        throw new Error("Missing the required parameter 'bankTransferSweepGetRequest' when calling bankTransferSweepGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankTransferSweepGetResponse;
      return this.apiClient.callApi(
        '/bank_transfer/sweep/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bankTransferSweepList operation.
     * @callback module:api/PlaidApi~bankTransferSweepListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankTransferSweepListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List sweeps
     * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
     * @param {module:model/BankTransferSweepListRequest} bankTransferSweepListRequest 
     * @param {module:api/PlaidApi~bankTransferSweepListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankTransferSweepListResponse}
     */
    bankTransferSweepList(bankTransferSweepListRequest, callback) {
      let postBody = bankTransferSweepListRequest;
      // verify the required parameter 'bankTransferSweepListRequest' is set
      if (bankTransferSweepListRequest === undefined || bankTransferSweepListRequest === null) {
        throw new Error("Missing the required parameter 'bankTransferSweepListRequest' when calling bankTransferSweepList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankTransferSweepListResponse;
      return this.apiClient.callApi(
        '/bank_transfer/sweep/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesGet operation.
     * @callback module:api/PlaidApi~categoriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoriesGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Categories
     * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
     * @param {Object.<String, Object>} body 
     * @param {module:api/PlaidApi~categoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoriesGetResponse}
     */
    categoriesGet(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling categoriesGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoriesGetResponse;
      return this.apiClient.callApi(
        '/categories/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPaymentToken operation.
     * @callback module:api/PlaidApi~createPaymentTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentInitiationPaymentTokenCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create payment token
     * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
     * @param {module:model/PaymentInitiationPaymentTokenCreateRequest} paymentInitiationPaymentTokenCreateRequest 
     * @param {module:api/PlaidApi~createPaymentTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentInitiationPaymentTokenCreateResponse}
     */
    createPaymentToken(paymentInitiationPaymentTokenCreateRequest, callback) {
      let postBody = paymentInitiationPaymentTokenCreateRequest;
      // verify the required parameter 'paymentInitiationPaymentTokenCreateRequest' is set
      if (paymentInitiationPaymentTokenCreateRequest === undefined || paymentInitiationPaymentTokenCreateRequest === null) {
        throw new Error("Missing the required parameter 'paymentInitiationPaymentTokenCreateRequest' when calling createPaymentToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentInitiationPaymentTokenCreateResponse;
      return this.apiClient.callApi(
        '/payment_initiation/payment/token/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditAssetReportFreddieMacGet operation.
     * @callback module:api/PlaidApi~creditAssetReportFreddieMacGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetReportFreddieGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
     * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac's JSON format.
     * @param {module:model/AssetReportFreddieGetRequest} assetReportFreddieGetRequest 
     * @param {module:api/PlaidApi~creditAssetReportFreddieMacGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetReportFreddieGetResponse}
     */
    creditAssetReportFreddieMacGet(assetReportFreddieGetRequest, callback) {
      let postBody = assetReportFreddieGetRequest;
      // verify the required parameter 'assetReportFreddieGetRequest' is set
      if (assetReportFreddieGetRequest === undefined || assetReportFreddieGetRequest === null) {
        throw new Error("Missing the required parameter 'assetReportFreddieGetRequest' when calling creditAssetReportFreddieMacGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetReportFreddieGetResponse;
      return this.apiClient.callApi(
        '/credit/asset_report/freddie_mac/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditAuditCopyTokenCreate operation.
     * @callback module:api/PlaidApi~creditAuditCopyTokenCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditAuditCopyTokenCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Asset or Income Report Audit Copy Token
     * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
     * @param {module:model/CreditAuditCopyTokenCreateRequest} creditAuditCopyTokenCreateRequest 
     * @param {module:api/PlaidApi~creditAuditCopyTokenCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditAuditCopyTokenCreateResponse}
     */
    creditAuditCopyTokenCreate(creditAuditCopyTokenCreateRequest, callback) {
      let postBody = creditAuditCopyTokenCreateRequest;
      // verify the required parameter 'creditAuditCopyTokenCreateRequest' is set
      if (creditAuditCopyTokenCreateRequest === undefined || creditAuditCopyTokenCreateRequest === null) {
        throw new Error("Missing the required parameter 'creditAuditCopyTokenCreateRequest' when calling creditAuditCopyTokenCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditAuditCopyTokenCreateResponse;
      return this.apiClient.callApi(
        '/credit/audit_copy_token/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditAuditCopyTokenUpdate operation.
     * @callback module:api/PlaidApi~creditAuditCopyTokenUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditAuditCopyTokenUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Audit Copy Token
     * The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
     * @param {module:model/CreditAuditCopyTokenUpdateRequest} creditAuditCopyTokenUpdateRequest 
     * @param {module:api/PlaidApi~creditAuditCopyTokenUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditAuditCopyTokenUpdateResponse}
     */
    creditAuditCopyTokenUpdate(creditAuditCopyTokenUpdateRequest, callback) {
      let postBody = creditAuditCopyTokenUpdateRequest;
      // verify the required parameter 'creditAuditCopyTokenUpdateRequest' is set
      if (creditAuditCopyTokenUpdateRequest === undefined || creditAuditCopyTokenUpdateRequest === null) {
        throw new Error("Missing the required parameter 'creditAuditCopyTokenUpdateRequest' when calling creditAuditCopyTokenUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditAuditCopyTokenUpdateResponse;
      return this.apiClient.callApi(
        '/credit/audit_copy_token/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditBankEmploymentGet operation.
     * @callback module:api/PlaidApi~creditBankEmploymentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditBankEmploymentGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information from the bank accounts used for employment verification
     * `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
     * @param {module:model/CreditBankEmploymentGetRequest} creditBankEmploymentGetRequest 
     * @param {module:api/PlaidApi~creditBankEmploymentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditBankEmploymentGetResponse}
     */
    creditBankEmploymentGet(creditBankEmploymentGetRequest, callback) {
      let postBody = creditBankEmploymentGetRequest;
      // verify the required parameter 'creditBankEmploymentGetRequest' is set
      if (creditBankEmploymentGetRequest === undefined || creditBankEmploymentGetRequest === null) {
        throw new Error("Missing the required parameter 'creditBankEmploymentGetRequest' when calling creditBankEmploymentGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditBankEmploymentGetResponse;
      return this.apiClient.callApi(
        '/beta/credit/v1/bank_employment/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditBankIncomeGet operation.
     * @callback module:api/PlaidApi~creditBankIncomeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditBankIncomeGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information from the bank accounts used for income verification
     * `/credit/bank_income/get` returns the bank income report(s) for a specified user.
     * @param {module:model/CreditBankIncomeGetRequest} creditBankIncomeGetRequest 
     * @param {module:api/PlaidApi~creditBankIncomeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditBankIncomeGetResponse}
     */
    creditBankIncomeGet(creditBankIncomeGetRequest, callback) {
      let postBody = creditBankIncomeGetRequest;
      // verify the required parameter 'creditBankIncomeGetRequest' is set
      if (creditBankIncomeGetRequest === undefined || creditBankIncomeGetRequest === null) {
        throw new Error("Missing the required parameter 'creditBankIncomeGetRequest' when calling creditBankIncomeGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditBankIncomeGetResponse;
      return this.apiClient.callApi(
        '/credit/bank_income/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditBankIncomePdfGet operation.
     * @callback module:api/PlaidApi~creditBankIncomePdfGetCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information from the bank accounts used for income verification in PDF format
     * `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.
     * @param {module:model/CreditBankIncomePDFGetRequest} creditBankIncomePDFGetRequest 
     * @param {module:api/PlaidApi~creditBankIncomePdfGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    creditBankIncomePdfGet(creditBankIncomePDFGetRequest, callback) {
      let postBody = creditBankIncomePDFGetRequest;
      // verify the required parameter 'creditBankIncomePDFGetRequest' is set
      if (creditBankIncomePDFGetRequest === undefined || creditBankIncomePDFGetRequest === null) {
        throw new Error("Missing the required parameter 'creditBankIncomePDFGetRequest' when calling creditBankIncomePdfGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf'];
      let returnType = File;
      return this.apiClient.callApi(
        '/credit/bank_income/pdf/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditBankIncomeRefresh operation.
     * @callback module:api/PlaidApi~creditBankIncomeRefreshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditBankIncomeRefreshResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh a user's bank income information
     * `/credit/bank_income/refresh` refreshes the bank income report data for a specific user.
     * @param {module:model/CreditBankIncomeRefreshRequest} creditBankIncomeRefreshRequest 
     * @param {module:api/PlaidApi~creditBankIncomeRefreshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditBankIncomeRefreshResponse}
     */
    creditBankIncomeRefresh(creditBankIncomeRefreshRequest, callback) {
      let postBody = creditBankIncomeRefreshRequest;
      // verify the required parameter 'creditBankIncomeRefreshRequest' is set
      if (creditBankIncomeRefreshRequest === undefined || creditBankIncomeRefreshRequest === null) {
        throw new Error("Missing the required parameter 'creditBankIncomeRefreshRequest' when calling creditBankIncomeRefresh");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditBankIncomeRefreshResponse;
      return this.apiClient.callApi(
        '/credit/bank_income/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditEmploymentGet operation.
     * @callback module:api/PlaidApi~creditEmploymentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditEmploymentGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a summary of an individual's employment information
     * `/credit/employment/get` returns a list of items with employment information from a user's payroll provider that was verified by an end user.
     * @param {module:model/CreditEmploymentGetRequest} creditEmploymentGetRequest 
     * @param {module:api/PlaidApi~creditEmploymentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditEmploymentGetResponse}
     */
    creditEmploymentGet(creditEmploymentGetRequest, callback) {
      let postBody = creditEmploymentGetRequest;
      // verify the required parameter 'creditEmploymentGetRequest' is set
      if (creditEmploymentGetRequest === undefined || creditEmploymentGetRequest === null) {
        throw new Error("Missing the required parameter 'creditEmploymentGetRequest' when calling creditEmploymentGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditEmploymentGetResponse;
      return this.apiClient.callApi(
        '/credit/employment/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditFreddieMacReportsGet operation.
     * @callback module:api/PlaidApi~creditFreddieMacReportsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditFreddieMacReportsGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
     * The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
     * @param {module:model/CreditFreddieMacReportsGetRequest} creditFreddieMacReportsGetRequest 
     * @param {module:api/PlaidApi~creditFreddieMacReportsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditFreddieMacReportsGetResponse}
     */
    creditFreddieMacReportsGet(creditFreddieMacReportsGetRequest, callback) {
      let postBody = creditFreddieMacReportsGetRequest;
      // verify the required parameter 'creditFreddieMacReportsGetRequest' is set
      if (creditFreddieMacReportsGetRequest === undefined || creditFreddieMacReportsGetRequest === null) {
        throw new Error("Missing the required parameter 'creditFreddieMacReportsGetRequest' when calling creditFreddieMacReportsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditFreddieMacReportsGetResponse;
      return this.apiClient.callApi(
        '/credit/freddie_mac/reports/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditPayrollIncomeGet operation.
     * @callback module:api/PlaidApi~creditPayrollIncomeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditPayrollIncomeGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a user's payroll information
     * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
     * @param {module:model/CreditPayrollIncomeGetRequest} creditPayrollIncomeGetRequest 
     * @param {module:api/PlaidApi~creditPayrollIncomeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditPayrollIncomeGetResponse}
     */
    creditPayrollIncomeGet(creditPayrollIncomeGetRequest, callback) {
      let postBody = creditPayrollIncomeGetRequest;
      // verify the required parameter 'creditPayrollIncomeGetRequest' is set
      if (creditPayrollIncomeGetRequest === undefined || creditPayrollIncomeGetRequest === null) {
        throw new Error("Missing the required parameter 'creditPayrollIncomeGetRequest' when calling creditPayrollIncomeGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditPayrollIncomeGetResponse;
      return this.apiClient.callApi(
        '/credit/payroll_income/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditPayrollIncomePrecheck operation.
     * @callback module:api/PlaidApi~creditPayrollIncomePrecheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditPayrollIncomePrecheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check income verification eligibility and optimize conversion
     * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
     * @param {module:model/CreditPayrollIncomePrecheckRequest} creditPayrollIncomePrecheckRequest 
     * @param {module:api/PlaidApi~creditPayrollIncomePrecheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditPayrollIncomePrecheckResponse}
     */
    creditPayrollIncomePrecheck(creditPayrollIncomePrecheckRequest, callback) {
      let postBody = creditPayrollIncomePrecheckRequest;
      // verify the required parameter 'creditPayrollIncomePrecheckRequest' is set
      if (creditPayrollIncomePrecheckRequest === undefined || creditPayrollIncomePrecheckRequest === null) {
        throw new Error("Missing the required parameter 'creditPayrollIncomePrecheckRequest' when calling creditPayrollIncomePrecheck");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditPayrollIncomePrecheckResponse;
      return this.apiClient.callApi(
        '/credit/payroll_income/precheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditPayrollIncomeRefresh operation.
     * @callback module:api/PlaidApi~creditPayrollIncomeRefreshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditPayrollIncomeRefreshResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh a digital payroll income verification
     * `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
     * @param {module:model/CreditPayrollIncomeRefreshRequest} creditPayrollIncomeRefreshRequest 
     * @param {module:api/PlaidApi~creditPayrollIncomeRefreshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditPayrollIncomeRefreshResponse}
     */
    creditPayrollIncomeRefresh(creditPayrollIncomeRefreshRequest, callback) {
      let postBody = creditPayrollIncomeRefreshRequest;
      // verify the required parameter 'creditPayrollIncomeRefreshRequest' is set
      if (creditPayrollIncomeRefreshRequest === undefined || creditPayrollIncomeRefreshRequest === null) {
        throw new Error("Missing the required parameter 'creditPayrollIncomeRefreshRequest' when calling creditPayrollIncomeRefresh");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditPayrollIncomeRefreshResponse;
      return this.apiClient.callApi(
        '/credit/payroll_income/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditRelayCreate operation.
     * @callback module:api/PlaidApi~creditRelayCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditRelayCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a relay token to share an Asset Report with a partner client (beta)
     * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.  To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You'll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
     * @param {module:model/CreditRelayCreateRequest} creditRelayCreateRequest 
     * @param {module:api/PlaidApi~creditRelayCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditRelayCreateResponse}
     */
    creditRelayCreate(creditRelayCreateRequest, callback) {
      let postBody = creditRelayCreateRequest;
      // verify the required parameter 'creditRelayCreateRequest' is set
      if (creditRelayCreateRequest === undefined || creditRelayCreateRequest === null) {
        throw new Error("Missing the required parameter 'creditRelayCreateRequest' when calling creditRelayCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditRelayCreateResponse;
      return this.apiClient.callApi(
        '/credit/relay/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditRelayGet operation.
     * @callback module:api/PlaidApi~creditRelayGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetReportGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the reports associated with a relay token that was shared with you (beta)
     * `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
     * @param {module:model/CreditRelayGetRequest} creditRelayGetRequest 
     * @param {module:api/PlaidApi~creditRelayGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetReportGetResponse}
     */
    creditRelayGet(creditRelayGetRequest, callback) {
      let postBody = creditRelayGetRequest;
      // verify the required parameter 'creditRelayGetRequest' is set
      if (creditRelayGetRequest === undefined || creditRelayGetRequest === null) {
        throw new Error("Missing the required parameter 'creditRelayGetRequest' when calling creditRelayGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetReportGetResponse;
      return this.apiClient.callApi(
        '/credit/relay/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditRelayRefresh operation.
     * @callback module:api/PlaidApi~creditRelayRefreshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditRelayRefreshResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh a report of a relay token (beta)
     * The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
     * @param {module:model/CreditRelayRefreshRequest} creditRelayRefreshRequest 
     * @param {module:api/PlaidApi~creditRelayRefreshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditRelayRefreshResponse}
     */
    creditRelayRefresh(creditRelayRefreshRequest, callback) {
      let postBody = creditRelayRefreshRequest;
      // verify the required parameter 'creditRelayRefreshRequest' is set
      if (creditRelayRefreshRequest === undefined || creditRelayRefreshRequest === null) {
        throw new Error("Missing the required parameter 'creditRelayRefreshRequest' when calling creditRelayRefresh");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditRelayRefreshResponse;
      return this.apiClient.callApi(
        '/credit/relay/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditRelayRemove operation.
     * @callback module:api/PlaidApi~creditRelayRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditRelayRemoveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove relay token (beta)
     * The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
     * @param {module:model/CreditRelayRemoveRequest} creditRelayRemoveRequest 
     * @param {module:api/PlaidApi~creditRelayRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditRelayRemoveResponse}
     */
    creditRelayRemove(creditRelayRemoveRequest, callback) {
      let postBody = creditRelayRemoveRequest;
      // verify the required parameter 'creditRelayRemoveRequest' is set
      if (creditRelayRemoveRequest === undefined || creditRelayRemoveRequest === null) {
        throw new Error("Missing the required parameter 'creditRelayRemoveRequest' when calling creditRelayRemove");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditRelayRemoveResponse;
      return this.apiClient.callApi(
        '/credit/relay/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditReportAuditCopyRemove operation.
     * @callback module:api/PlaidApi~creditReportAuditCopyRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditAuditCopyTokenRemoveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an Audit Copy token
     * The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @param {module:model/CreditAuditCopyTokenRemoveRequest} creditAuditCopyTokenRemoveRequest 
     * @param {module:api/PlaidApi~creditReportAuditCopyRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditAuditCopyTokenRemoveResponse}
     */
    creditReportAuditCopyRemove(creditAuditCopyTokenRemoveRequest, callback) {
      let postBody = creditAuditCopyTokenRemoveRequest;
      // verify the required parameter 'creditAuditCopyTokenRemoveRequest' is set
      if (creditAuditCopyTokenRemoveRequest === undefined || creditAuditCopyTokenRemoveRequest === null) {
        throw new Error("Missing the required parameter 'creditAuditCopyTokenRemoveRequest' when calling creditReportAuditCopyRemove");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditAuditCopyTokenRemoveResponse;
      return this.apiClient.callApi(
        '/credit/audit_copy_token/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the creditSessionsGet operation.
     * @callback module:api/PlaidApi~creditSessionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditSessionsGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Link sessions for your user
     * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
     * @param {module:model/CreditSessionsGetRequest} creditSessionsGetRequest 
     * @param {module:api/PlaidApi~creditSessionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditSessionsGetResponse}
     */
    creditSessionsGet(creditSessionsGetRequest, callback) {
      let postBody = creditSessionsGetRequest;
      // verify the required parameter 'creditSessionsGetRequest' is set
      if (creditSessionsGetRequest === undefined || creditSessionsGetRequest === null) {
        throw new Error("Missing the required parameter 'creditSessionsGetRequest' when calling creditSessionsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreditSessionsGetResponse;
      return this.apiClient.callApi(
        '/credit/sessions/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardUserGet operation.
     * @callback module:api/PlaidApi~dashboardUserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardUserGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a dashboard user
     * Retrieve information about a dashboard user.
     * @param {module:model/DashboardUserGetRequest} dashboardUserGetRequest 
     * @param {module:api/PlaidApi~dashboardUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardUserGetResponse}
     */
    dashboardUserGet(dashboardUserGetRequest, callback) {
      let postBody = dashboardUserGetRequest;
      // verify the required parameter 'dashboardUserGetRequest' is set
      if (dashboardUserGetRequest === undefined || dashboardUserGetRequest === null) {
        throw new Error("Missing the required parameter 'dashboardUserGetRequest' when calling dashboardUserGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DashboardUserGetResponse;
      return this.apiClient.callApi(
        '/dashboard_user/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardUserList operation.
     * @callback module:api/PlaidApi~dashboardUserListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardUserListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List dashboard users
     * List all dashboard users associated with your account.
     * @param {module:model/DashboardUserListRequest} dashboardUserListRequest 
     * @param {module:api/PlaidApi~dashboardUserListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardUserListResponse}
     */
    dashboardUserList(dashboardUserListRequest, callback) {
      let postBody = dashboardUserListRequest;
      // verify the required parameter 'dashboardUserListRequest' is set
      if (dashboardUserListRequest === undefined || dashboardUserListRequest === null) {
        throw new Error("Missing the required parameter 'dashboardUserListRequest' when calling dashboardUserList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DashboardUserListResponse;
      return this.apiClient.callApi(
        '/dashboard_user/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the depositSwitchAltCreate operation.
     * @callback module:api/PlaidApi~depositSwitchAltCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DepositSwitchAltCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a deposit switch without using Plaid Exchange
     * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @param {module:model/DepositSwitchAltCreateRequest} depositSwitchAltCreateRequest 
     * @param {module:api/PlaidApi~depositSwitchAltCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DepositSwitchAltCreateResponse}
     */
    depositSwitchAltCreate(depositSwitchAltCreateRequest, callback) {
      let postBody = depositSwitchAltCreateRequest;
      // verify the required parameter 'depositSwitchAltCreateRequest' is set
      if (depositSwitchAltCreateRequest === undefined || depositSwitchAltCreateRequest === null) {
        throw new Error("Missing the required parameter 'depositSwitchAltCreateRequest' when calling depositSwitchAltCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DepositSwitchAltCreateResponse;
      return this.apiClient.callApi(
        '/deposit_switch/alt/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the depositSwitchCreate operation.
     * @callback module:api/PlaidApi~depositSwitchCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DepositSwitchCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a deposit switch
     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @param {module:model/DepositSwitchCreateRequest} depositSwitchCreateRequest 
     * @param {module:api/PlaidApi~depositSwitchCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DepositSwitchCreateResponse}
     */
    depositSwitchCreate(depositSwitchCreateRequest, callback) {
      let postBody = depositSwitchCreateRequest;
      // verify the required parameter 'depositSwitchCreateRequest' is set
      if (depositSwitchCreateRequest === undefined || depositSwitchCreateRequest === null) {
        throw new Error("Missing the required parameter 'depositSwitchCreateRequest' when calling depositSwitchCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DepositSwitchCreateResponse;
      return this.apiClient.callApi(
        '/deposit_switch/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the depositSwitchGet operation.
     * @callback module:api/PlaidApi~depositSwitchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DepositSwitchGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a deposit switch
     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user's direct deposit allocation preferences.
     * @param {module:model/DepositSwitchGetRequest} depositSwitchGetRequest 
     * @param {module:api/PlaidApi~depositSwitchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DepositSwitchGetResponse}
     */
    depositSwitchGet(depositSwitchGetRequest, callback) {
      let postBody = depositSwitchGetRequest;
      // verify the required parameter 'depositSwitchGetRequest' is set
      if (depositSwitchGetRequest === undefined || depositSwitchGetRequest === null) {
        throw new Error("Missing the required parameter 'depositSwitchGetRequest' when calling depositSwitchGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DepositSwitchGetResponse;
      return this.apiClient.callApi(
        '/deposit_switch/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the depositSwitchTokenCreate operation.
     * @callback module:api/PlaidApi~depositSwitchTokenCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DepositSwitchTokenCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a deposit switch token
     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
     * @param {module:model/DepositSwitchTokenCreateRequest} depositSwitchTokenCreateRequest 
     * @param {module:api/PlaidApi~depositSwitchTokenCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DepositSwitchTokenCreateResponse}
     */
    depositSwitchTokenCreate(depositSwitchTokenCreateRequest, callback) {
      let postBody = depositSwitchTokenCreateRequest;
      // verify the required parameter 'depositSwitchTokenCreateRequest' is set
      if (depositSwitchTokenCreateRequest === undefined || depositSwitchTokenCreateRequest === null) {
        throw new Error("Missing the required parameter 'depositSwitchTokenCreateRequest' when calling depositSwitchTokenCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DepositSwitchTokenCreateResponse;
      return this.apiClient.callApi(
        '/deposit_switch/token/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the employersSearch operation.
     * @callback module:api/PlaidApi~employersSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmployersSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search employer database
     * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user's employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
     * @param {module:model/EmployersSearchRequest} employersSearchRequest 
     * @param {module:api/PlaidApi~employersSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmployersSearchResponse}
     */
    employersSearch(employersSearchRequest, callback) {
      let postBody = employersSearchRequest;
      // verify the required parameter 'employersSearchRequest' is set
      if (employersSearchRequest === undefined || employersSearchRequest === null) {
        throw new Error("Missing the required parameter 'employersSearchRequest' when calling employersSearch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmployersSearchResponse;
      return this.apiClient.callApi(
        '/employers/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the employmentVerificationGet operation.
     * @callback module:api/PlaidApi~employmentVerificationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmploymentVerificationGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Deprecated) Retrieve a summary of an individual's employment information
     * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
     * @param {module:model/EmploymentVerificationGetRequest} employmentVerificationGetRequest 
     * @param {module:api/PlaidApi~employmentVerificationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmploymentVerificationGetResponse}
     */
    employmentVerificationGet(employmentVerificationGetRequest, callback) {
      let postBody = employmentVerificationGetRequest;
      // verify the required parameter 'employmentVerificationGetRequest' is set
      if (employmentVerificationGetRequest === undefined || employmentVerificationGetRequest === null) {
        throw new Error("Missing the required parameter 'employmentVerificationGetRequest' when calling employmentVerificationGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmploymentVerificationGetResponse;
      return this.apiClient.callApi(
        '/employment/verification/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fdxNotifications operation.
     * @callback module:api/PlaidApi~fdxNotificationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Webhook receiver for fdx notifications
     * A generic webhook receiver endpoint for FDX Event Notifications
     * @param {module:model/FDXNotification} fDXNotification 
     * @param {module:api/PlaidApi~fdxNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fdxNotifications(fDXNotification, callback) {
      let postBody = fDXNotification;
      // verify the required parameter 'fDXNotification' is set
      if (fDXNotification === undefined || fDXNotification === null) {
        throw new Error("Missing the required parameter 'fDXNotification' when calling fdxNotifications");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/fdx/notifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identityGet operation.
     * @callback module:api/PlaidApi~identityGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve identity data
     * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
     * @param {module:model/IdentityGetRequest} identityGetRequest 
     * @param {module:api/PlaidApi~identityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityGetResponse}
     */
    identityGet(identityGetRequest, callback) {
      let postBody = identityGetRequest;
      // verify the required parameter 'identityGetRequest' is set
      if (identityGetRequest === undefined || identityGetRequest === null) {
        throw new Error("Missing the required parameter 'identityGetRequest' when calling identityGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentityGetResponse;
      return this.apiClient.callApi(
        '/identity/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identityMatch operation.
     * @callback module:api/PlaidApi~identityMatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityMatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve identity match score
     * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder's financial institution.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     * @param {module:model/IdentityMatchRequest} identityMatchRequest 
     * @param {module:api/PlaidApi~identityMatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityMatchResponse}
     */
    identityMatch(identityMatchRequest, callback) {
      let postBody = identityMatchRequest;
      // verify the required parameter 'identityMatchRequest' is set
      if (identityMatchRequest === undefined || identityMatchRequest === null) {
        throw new Error("Missing the required parameter 'identityMatchRequest' when calling identityMatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentityMatchResponse;
      return this.apiClient.callApi(
        '/identity/match', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identityVerificationCreate operation.
     * @callback module:api/PlaidApi~identityVerificationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityVerificationCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new identity verification
     * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided. If you don't know whether the associated user already has an active Identity Verification, you can specify `\"is_idempotent\": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code. 
     * @param {module:model/IdentityVerificationCreateRequest} identityVerificationCreateRequest 
     * @param {module:api/PlaidApi~identityVerificationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityVerificationCreateResponse}
     */
    identityVerificationCreate(identityVerificationCreateRequest, callback) {
      let postBody = identityVerificationCreateRequest;
      // verify the required parameter 'identityVerificationCreateRequest' is set
      if (identityVerificationCreateRequest === undefined || identityVerificationCreateRequest === null) {
        throw new Error("Missing the required parameter 'identityVerificationCreateRequest' when calling identityVerificationCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentityVerificationCreateResponse;
      return this.apiClient.callApi(
        '/identity_verification/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identityVerificationGet operation.
     * @callback module:api/PlaidApi~identityVerificationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityVerificationGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Identity Verification
     * Retrieve a previously created identity verification.
     * @param {module:model/IdentityVerificationGetRequest} identityVerificationGetRequest 
     * @param {module:api/PlaidApi~identityVerificationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityVerificationGetResponse}
     */
    identityVerificationGet(identityVerificationGetRequest, callback) {
      let postBody = identityVerificationGetRequest;
      // verify the required parameter 'identityVerificationGetRequest' is set
      if (identityVerificationGetRequest === undefined || identityVerificationGetRequest === null) {
        throw new Error("Missing the required parameter 'identityVerificationGetRequest' when calling identityVerificationGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentityVerificationGetResponse;
      return this.apiClient.callApi(
        '/identity_verification/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identityVerificationList operation.
     * @callback module:api/PlaidApi~identityVerificationListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityVerificationListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Identity Verifications
     * Filter and list Identity Verifications created by your account
     * @param {module:model/IdentityVerificationListRequest} identityVerificationListRequest 
     * @param {module:api/PlaidApi~identityVerificationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityVerificationListResponse}
     */
    identityVerificationList(identityVerificationListRequest, callback) {
      let postBody = identityVerificationListRequest;
      // verify the required parameter 'identityVerificationListRequest' is set
      if (identityVerificationListRequest === undefined || identityVerificationListRequest === null) {
        throw new Error("Missing the required parameter 'identityVerificationListRequest' when calling identityVerificationList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentityVerificationListResponse;
      return this.apiClient.callApi(
        '/identity_verification/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identityVerificationRetry operation.
     * @callback module:api/PlaidApi~identityVerificationRetryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityVerificationRetryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retry an Identity Verification
     * Allow a customer to retry their identity verification
     * @param {module:model/IdentityVerificationRetryRequest} identityVerificationRetryRequest 
     * @param {module:api/PlaidApi~identityVerificationRetryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityVerificationRetryResponse}
     */
    identityVerificationRetry(identityVerificationRetryRequest, callback) {
      let postBody = identityVerificationRetryRequest;
      // verify the required parameter 'identityVerificationRetryRequest' is set
      if (identityVerificationRetryRequest === undefined || identityVerificationRetryRequest === null) {
        throw new Error("Missing the required parameter 'identityVerificationRetryRequest' when calling identityVerificationRetry");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentityVerificationRetryResponse;
      return this.apiClient.callApi(
        '/identity_verification/retry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incomeVerificationCreate operation.
     * @callback module:api/PlaidApi~incomeVerificationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IncomeVerificationCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Deprecated) Create an income verification instance
     * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
     * @param {module:model/IncomeVerificationCreateRequest} incomeVerificationCreateRequest 
     * @param {module:api/PlaidApi~incomeVerificationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IncomeVerificationCreateResponse}
     */
    incomeVerificationCreate(incomeVerificationCreateRequest, callback) {
      let postBody = incomeVerificationCreateRequest;
      // verify the required parameter 'incomeVerificationCreateRequest' is set
      if (incomeVerificationCreateRequest === undefined || incomeVerificationCreateRequest === null) {
        throw new Error("Missing the required parameter 'incomeVerificationCreateRequest' when calling incomeVerificationCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IncomeVerificationCreateResponse;
      return this.apiClient.callApi(
        '/income/verification/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incomeVerificationDocumentsDownload operation.
     * @callback module:api/PlaidApi~incomeVerificationDocumentsDownloadCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Deprecated) Download the original documents used for income verification
     * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
     * @param {module:model/IncomeVerificationDocumentsDownloadRequest} incomeVerificationDocumentsDownloadRequest 
     * @param {module:api/PlaidApi~incomeVerificationDocumentsDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    incomeVerificationDocumentsDownload(incomeVerificationDocumentsDownloadRequest, callback) {
      let postBody = incomeVerificationDocumentsDownloadRequest;
      // verify the required parameter 'incomeVerificationDocumentsDownloadRequest' is set
      if (incomeVerificationDocumentsDownloadRequest === undefined || incomeVerificationDocumentsDownloadRequest === null) {
        throw new Error("Missing the required parameter 'incomeVerificationDocumentsDownloadRequest' when calling incomeVerificationDocumentsDownload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/zip'];
      let returnType = File;
      return this.apiClient.callApi(
        '/income/verification/documents/download', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incomeVerificationPaystubsGet operation.
     * @callback module:api/PlaidApi~incomeVerificationPaystubsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IncomeVerificationPaystubsGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Deprecated) Retrieve information from the paystubs used for income verification
     * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user's income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
     * @param {module:model/IncomeVerificationPaystubsGetRequest} incomeVerificationPaystubsGetRequest 
     * @param {module:api/PlaidApi~incomeVerificationPaystubsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IncomeVerificationPaystubsGetResponse}
     */
    incomeVerificationPaystubsGet(incomeVerificationPaystubsGetRequest, callback) {
      let postBody = incomeVerificationPaystubsGetRequest;
      // verify the required parameter 'incomeVerificationPaystubsGetRequest' is set
      if (incomeVerificationPaystubsGetRequest === undefined || incomeVerificationPaystubsGetRequest === null) {
        throw new Error("Missing the required parameter 'incomeVerificationPaystubsGetRequest' when calling incomeVerificationPaystubsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IncomeVerificationPaystubsGetResponse;
      return this.apiClient.callApi(
        '/income/verification/paystubs/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incomeVerificationPrecheck operation.
     * @callback module:api/PlaidApi~incomeVerificationPrecheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IncomeVerificationPrecheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Deprecated) Check digital income verification eligibility and optimize conversion
     * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
     * @param {module:model/IncomeVerificationPrecheckRequest} incomeVerificationPrecheckRequest 
     * @param {module:api/PlaidApi~incomeVerificationPrecheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IncomeVerificationPrecheckResponse}
     */
    incomeVerificationPrecheck(incomeVerificationPrecheckRequest, callback) {
      let postBody = incomeVerificationPrecheckRequest;
      // verify the required parameter 'incomeVerificationPrecheckRequest' is set
      if (incomeVerificationPrecheckRequest === undefined || incomeVerificationPrecheckRequest === null) {
        throw new Error("Missing the required parameter 'incomeVerificationPrecheckRequest' when calling incomeVerificationPrecheck");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IncomeVerificationPrecheckResponse;
      return this.apiClient.callApi(
        '/income/verification/precheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incomeVerificationTaxformsGet operation.
     * @callback module:api/PlaidApi~incomeVerificationTaxformsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IncomeVerificationTaxformsGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Deprecated) Retrieve information from the tax documents used for income verification
     * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user''s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
     * @param {module:model/IncomeVerificationTaxformsGetRequest} incomeVerificationTaxformsGetRequest 
     * @param {module:api/PlaidApi~incomeVerificationTaxformsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IncomeVerificationTaxformsGetResponse}
     */
    incomeVerificationTaxformsGet(incomeVerificationTaxformsGetRequest, callback) {
      let postBody = incomeVerificationTaxformsGetRequest;
      // verify the required parameter 'incomeVerificationTaxformsGetRequest' is set
      if (incomeVerificationTaxformsGetRequest === undefined || incomeVerificationTaxformsGetRequest === null) {
        throw new Error("Missing the required parameter 'incomeVerificationTaxformsGetRequest' when calling incomeVerificationTaxformsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IncomeVerificationTaxformsGetResponse;
      return this.apiClient.callApi(
        '/income/verification/taxforms/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the institutionsGet operation.
     * @callback module:api/PlaidApi~institutionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstitutionsGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of all supported institutions
     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
     * @param {module:model/InstitutionsGetRequest} institutionsGetRequest 
     * @param {module:api/PlaidApi~institutionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstitutionsGetResponse}
     */
    institutionsGet(institutionsGetRequest, callback) {
      let postBody = institutionsGetRequest;
      // verify the required parameter 'institutionsGetRequest' is set
      if (institutionsGetRequest === undefined || institutionsGetRequest === null) {
        throw new Error("Missing the required parameter 'institutionsGetRequest' when calling institutionsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstitutionsGetResponse;
      return this.apiClient.callApi(
        '/institutions/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the institutionsGetById operation.
     * @callback module:api/PlaidApi~institutionsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstitutionsGetByIdResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of an institution
     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
     * @param {module:model/InstitutionsGetByIdRequest} institutionsGetByIdRequest 
     * @param {module:api/PlaidApi~institutionsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstitutionsGetByIdResponse}
     */
    institutionsGetById(institutionsGetByIdRequest, callback) {
      let postBody = institutionsGetByIdRequest;
      // verify the required parameter 'institutionsGetByIdRequest' is set
      if (institutionsGetByIdRequest === undefined || institutionsGetByIdRequest === null) {
        throw new Error("Missing the required parameter 'institutionsGetByIdRequest' when calling institutionsGetById");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstitutionsGetByIdResponse;
      return this.apiClient.callApi(
        '/institutions/get_by_id', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the institutionsSearch operation.
     * @callback module:api/PlaidApi~institutionsSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstitutionsSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search institutions
     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
     * @param {module:model/InstitutionsSearchRequest} institutionsSearchRequest 
     * @param {module:api/PlaidApi~institutionsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstitutionsSearchResponse}
     */
    institutionsSearch(institutionsSearchRequest, callback) {
      let postBody = institutionsSearchRequest;
      // verify the required parameter 'institutionsSearchRequest' is set
      if (institutionsSearchRequest === undefined || institutionsSearchRequest === null) {
        throw new Error("Missing the required parameter 'institutionsSearchRequest' when calling institutionsSearch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstitutionsSearchResponse;
      return this.apiClient.callApi(
        '/institutions/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the investmentsHoldingsGet operation.
     * @callback module:api/PlaidApi~investmentsHoldingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentsHoldingsGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Investment holdings
     * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
     * @param {module:model/InvestmentsHoldingsGetRequest} investmentsHoldingsGetRequest 
     * @param {module:api/PlaidApi~investmentsHoldingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentsHoldingsGetResponse}
     */
    investmentsHoldingsGet(investmentsHoldingsGetRequest, callback) {
      let postBody = investmentsHoldingsGetRequest;
      // verify the required parameter 'investmentsHoldingsGetRequest' is set
      if (investmentsHoldingsGetRequest === undefined || investmentsHoldingsGetRequest === null) {
        throw new Error("Missing the required parameter 'investmentsHoldingsGetRequest' when calling investmentsHoldingsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvestmentsHoldingsGetResponse;
      return this.apiClient.callApi(
        '/investments/holdings/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the investmentsTransactionsGet operation.
     * @callback module:api/PlaidApi~investmentsTransactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestmentsTransactionsGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get investment transactions
     * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded. Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.
     * @param {module:model/InvestmentsTransactionsGetRequest} investmentsTransactionsGetRequest 
     * @param {module:api/PlaidApi~investmentsTransactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestmentsTransactionsGetResponse}
     */
    investmentsTransactionsGet(investmentsTransactionsGetRequest, callback) {
      let postBody = investmentsTransactionsGetRequest;
      // verify the required parameter 'investmentsTransactionsGetRequest' is set
      if (investmentsTransactionsGetRequest === undefined || investmentsTransactionsGetRequest === null) {
        throw new Error("Missing the required parameter 'investmentsTransactionsGetRequest' when calling investmentsTransactionsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InvestmentsTransactionsGetResponse;
      return this.apiClient.callApi(
        '/investments/transactions/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itemAccessTokenInvalidate operation.
     * @callback module:api/PlaidApi~itemAccessTokenInvalidateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemAccessTokenInvalidateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invalidate access_token
     * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`. 
     * @param {module:model/ItemAccessTokenInvalidateRequest} itemAccessTokenInvalidateRequest 
     * @param {module:api/PlaidApi~itemAccessTokenInvalidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemAccessTokenInvalidateResponse}
     */
    itemAccessTokenInvalidate(itemAccessTokenInvalidateRequest, callback) {
      let postBody = itemAccessTokenInvalidateRequest;
      // verify the required parameter 'itemAccessTokenInvalidateRequest' is set
      if (itemAccessTokenInvalidateRequest === undefined || itemAccessTokenInvalidateRequest === null) {
        throw new Error("Missing the required parameter 'itemAccessTokenInvalidateRequest' when calling itemAccessTokenInvalidate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItemAccessTokenInvalidateResponse;
      return this.apiClient.callApi(
        '/item/access_token/invalidate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itemActivityList operation.
     * @callback module:api/PlaidApi~itemActivityListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemActivityListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a historical log of user consent events
     * List a historical log of user consent events
     * @param {module:model/ItemActivityListRequest} itemActivityListRequest 
     * @param {module:api/PlaidApi~itemActivityListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemActivityListResponse}
     */
    itemActivityList(itemActivityListRequest, callback) {
      let postBody = itemActivityListRequest;
      // verify the required parameter 'itemActivityListRequest' is set
      if (itemActivityListRequest === undefined || itemActivityListRequest === null) {
        throw new Error("Missing the required parameter 'itemActivityListRequest' when calling itemActivityList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItemActivityListResponse;
      return this.apiClient.callApi(
        '/item/activity/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itemApplicationList operation.
     * @callback module:api/PlaidApi~itemApplicationListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemApplicationListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a user’s connected applications
     * List a user’s connected applications
     * @param {module:model/ItemApplicationListRequest} itemApplicationListRequest 
     * @param {module:api/PlaidApi~itemApplicationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemApplicationListResponse}
     */
    itemApplicationList(itemApplicationListRequest, callback) {
      let postBody = itemApplicationListRequest;
      // verify the required parameter 'itemApplicationListRequest' is set
      if (itemApplicationListRequest === undefined || itemApplicationListRequest === null) {
        throw new Error("Missing the required parameter 'itemApplicationListRequest' when calling itemApplicationList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItemApplicationListResponse;
      return this.apiClient.callApi(
        '/item/application/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itemApplicationScopesUpdate operation.
     * @callback module:api/PlaidApi~itemApplicationScopesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemApplicationScopesUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the scopes of access for a particular application
     * Enable consumers to update product access on selected accounts for an application.
     * @param {module:model/ItemApplicationScopesUpdateRequest} itemApplicationScopesUpdateRequest 
     * @param {module:api/PlaidApi~itemApplicationScopesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemApplicationScopesUpdateResponse}
     */
    itemApplicationScopesUpdate(itemApplicationScopesUpdateRequest, callback) {
      let postBody = itemApplicationScopesUpdateRequest;
      // verify the required parameter 'itemApplicationScopesUpdateRequest' is set
      if (itemApplicationScopesUpdateRequest === undefined || itemApplicationScopesUpdateRequest === null) {
        throw new Error("Missing the required parameter 'itemApplicationScopesUpdateRequest' when calling itemApplicationScopesUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItemApplicationScopesUpdateResponse;
      return this.apiClient.callApi(
        '/item/application/scopes/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itemCreatePublicToken operation.
     * @callback module:api/PlaidApi~itemCreatePublicTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemPublicTokenCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create public token
     * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
     * @param {module:model/ItemPublicTokenCreateRequest} itemPublicTokenCreateRequest 
     * @param {module:api/PlaidApi~itemCreatePublicTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemPublicTokenCreateResponse}
     */
    itemCreatePublicToken(itemPublicTokenCreateRequest, callback) {
      let postBody = itemPublicTokenCreateRequest;
      // verify the required parameter 'itemPublicTokenCreateRequest' is set
      if (itemPublicTokenCreateRequest === undefined || itemPublicTokenCreateRequest === null) {
        throw new Error("Missing the required parameter 'itemPublicTokenCreateRequest' when calling itemCreatePublicToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItemPublicTokenCreateResponse;
      return this.apiClient.callApi(
        '/item/public_token/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itemGet operation.
     * @callback module:api/PlaidApi~itemGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Item
     * Returns information about the status of an Item.
     * @param {module:model/ItemGetRequest} itemGetRequest 
     * @param {module:api/PlaidApi~itemGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemGetResponse}
     */
    itemGet(itemGetRequest, callback) {
      let postBody = itemGetRequest;
      // verify the required parameter 'itemGetRequest' is set
      if (itemGetRequest === undefined || itemGetRequest === null) {
        throw new Error("Missing the required parameter 'itemGetRequest' when calling itemGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItemGetResponse;
      return this.apiClient.callApi(
        '/item/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itemImport operation.
     * @callback module:api/PlaidApi~itemImportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemImportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import Item
     * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).
     * @param {module:model/ItemImportRequest} itemImportRequest 
     * @param {module:api/PlaidApi~itemImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemImportResponse}
     */
    itemImport(itemImportRequest, callback) {
      let postBody = itemImportRequest;
      // verify the required parameter 'itemImportRequest' is set
      if (itemImportRequest === undefined || itemImportRequest === null) {
        throw new Error("Missing the required parameter 'itemImportRequest' when calling itemImport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItemImportResponse;
      return this.apiClient.callApi(
        '/item/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itemPublicTokenExchange operation.
     * @callback module:api/PlaidApi~itemPublicTokenExchangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemPublicTokenExchangeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchange public token for an access token
     * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
     * @param {module:model/ItemPublicTokenExchangeRequest} itemPublicTokenExchangeRequest 
     * @param {module:api/PlaidApi~itemPublicTokenExchangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemPublicTokenExchangeResponse}
     */
    itemPublicTokenExchange(itemPublicTokenExchangeRequest, callback) {
      let postBody = itemPublicTokenExchangeRequest;
      // verify the required parameter 'itemPublicTokenExchangeRequest' is set
      if (itemPublicTokenExchangeRequest === undefined || itemPublicTokenExchangeRequest === null) {
        throw new Error("Missing the required parameter 'itemPublicTokenExchangeRequest' when calling itemPublicTokenExchange");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItemPublicTokenExchangeResponse;
      return this.apiClient.callApi(
        '/item/public_token/exchange', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itemRemove operation.
     * @callback module:api/PlaidApi~itemRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemRemoveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an Item
     * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution's OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
     * @param {module:model/ItemRemoveRequest} itemRemoveRequest 
     * @param {module:api/PlaidApi~itemRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemRemoveResponse}
     */
    itemRemove(itemRemoveRequest, callback) {
      let postBody = itemRemoveRequest;
      // verify the required parameter 'itemRemoveRequest' is set
      if (itemRemoveRequest === undefined || itemRemoveRequest === null) {
        throw new Error("Missing the required parameter 'itemRemoveRequest' when calling itemRemove");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItemRemoveResponse;
      return this.apiClient.callApi(
        '/item/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itemWebhookUpdate operation.
     * @callback module:api/PlaidApi~itemWebhookUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemWebhookUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Webhook URL
     * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
     * @param {module:model/ItemWebhookUpdateRequest} itemWebhookUpdateRequest 
     * @param {module:api/PlaidApi~itemWebhookUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemWebhookUpdateResponse}
     */
    itemWebhookUpdate(itemWebhookUpdateRequest, callback) {
      let postBody = itemWebhookUpdateRequest;
      // verify the required parameter 'itemWebhookUpdateRequest' is set
      if (itemWebhookUpdateRequest === undefined || itemWebhookUpdateRequest === null) {
        throw new Error("Missing the required parameter 'itemWebhookUpdateRequest' when calling itemWebhookUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItemWebhookUpdateResponse;
      return this.apiClient.callApi(
        '/item/webhook/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liabilitiesGet operation.
     * @callback module:api/PlaidApi~liabilitiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiabilitiesGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Liabilities data
     * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     * @param {module:model/LiabilitiesGetRequest} liabilitiesGetRequest 
     * @param {module:api/PlaidApi~liabilitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiabilitiesGetResponse}
     */
    liabilitiesGet(liabilitiesGetRequest, callback) {
      let postBody = liabilitiesGetRequest;
      // verify the required parameter 'liabilitiesGetRequest' is set
      if (liabilitiesGetRequest === undefined || liabilitiesGetRequest === null) {
        throw new Error("Missing the required parameter 'liabilitiesGetRequest' when calling liabilitiesGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LiabilitiesGetResponse;
      return this.apiClient.callApi(
        '/liabilities/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkDeliveryCreate operation.
     * @callback module:api/PlaidApi~linkDeliveryCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkDeliveryCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Link Delivery session
     * Use the `/link_delivery/create` endpoint to create a Link Delivery session.
     * @param {module:model/LinkDeliveryCreateRequest} linkDeliveryCreateRequest 
     * @param {module:api/PlaidApi~linkDeliveryCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkDeliveryCreateResponse}
     */
    linkDeliveryCreate(linkDeliveryCreateRequest, callback) {
      let postBody = linkDeliveryCreateRequest;
      // verify the required parameter 'linkDeliveryCreateRequest' is set
      if (linkDeliveryCreateRequest === undefined || linkDeliveryCreateRequest === null) {
        throw new Error("Missing the required parameter 'linkDeliveryCreateRequest' when calling linkDeliveryCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LinkDeliveryCreateResponse;
      return this.apiClient.callApi(
        '/link_delivery/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkDeliveryGet operation.
     * @callback module:api/PlaidApi~linkDeliveryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkDeliveryGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Link Delivery session
     * Use the `/link_delivery/get` endpoint to get the status of a Link Delivery session.
     * @param {module:model/LinkDeliveryGetRequest} linkDeliveryGetRequest 
     * @param {module:api/PlaidApi~linkDeliveryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkDeliveryGetResponse}
     */
    linkDeliveryGet(linkDeliveryGetRequest, callback) {
      let postBody = linkDeliveryGetRequest;
      // verify the required parameter 'linkDeliveryGetRequest' is set
      if (linkDeliveryGetRequest === undefined || linkDeliveryGetRequest === null) {
        throw new Error("Missing the required parameter 'linkDeliveryGetRequest' when calling linkDeliveryGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LinkDeliveryGetResponse;
      return this.apiClient.callApi(
        '/link_delivery/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkOauthCorrelationIdExchange operation.
     * @callback module:api/PlaidApi~linkOauthCorrelationIdExchangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkOAuthCorrelationIdExchangeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchange the Link Correlation Id for a Link Token
     * Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for 'payment_initiation' products and is provided to the client via the OAuth `redirect_uri` as a query parameter. The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the 'link_token'.
     * @param {module:model/LinkOAuthCorrelationIdExchangeRequest} linkOAuthCorrelationIdExchangeRequest 
     * @param {module:api/PlaidApi~linkOauthCorrelationIdExchangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkOAuthCorrelationIdExchangeResponse}
     */
    linkOauthCorrelationIdExchange(linkOAuthCorrelationIdExchangeRequest, callback) {
      let postBody = linkOAuthCorrelationIdExchangeRequest;
      // verify the required parameter 'linkOAuthCorrelationIdExchangeRequest' is set
      if (linkOAuthCorrelationIdExchangeRequest === undefined || linkOAuthCorrelationIdExchangeRequest === null) {
        throw new Error("Missing the required parameter 'linkOAuthCorrelationIdExchangeRequest' when calling linkOauthCorrelationIdExchange");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LinkOAuthCorrelationIdExchangeResponse;
      return this.apiClient.callApi(
        '/link/oauth/correlation_id/exchange', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkTokenCreate operation.
     * @callback module:api/PlaidApi~linkTokenCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkTokenCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Link Token
     * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     * @param {module:model/LinkTokenCreateRequest} linkTokenCreateRequest 
     * @param {module:api/PlaidApi~linkTokenCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkTokenCreateResponse}
     */
    linkTokenCreate(linkTokenCreateRequest, callback) {
      let postBody = linkTokenCreateRequest;
      // verify the required parameter 'linkTokenCreateRequest' is set
      if (linkTokenCreateRequest === undefined || linkTokenCreateRequest === null) {
        throw new Error("Missing the required parameter 'linkTokenCreateRequest' when calling linkTokenCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LinkTokenCreateResponse;
      return this.apiClient.callApi(
        '/link/token/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linkTokenGet operation.
     * @callback module:api/PlaidApi~linkTokenGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinkTokenGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Link Token
     * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.
     * @param {module:model/LinkTokenGetRequest} linkTokenGetRequest 
     * @param {module:api/PlaidApi~linkTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinkTokenGetResponse}
     */
    linkTokenGet(linkTokenGetRequest, callback) {
      let postBody = linkTokenGetRequest;
      // verify the required parameter 'linkTokenGetRequest' is set
      if (linkTokenGetRequest === undefined || linkTokenGetRequest === null) {
        throw new Error("Missing the required parameter 'linkTokenGetRequest' when calling linkTokenGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LinkTokenGetResponse;
      return this.apiClient.callApi(
        '/link/token/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partnerCustomerCreate operation.
     * @callback module:api/PlaidApi~partnerCustomerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartnerCustomerCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new end customer for a Plaid reseller.
     * The `/partner/customer/create` endpoint is used by reseller partners to create end customers.
     * @param {module:model/PartnerCustomerCreateRequest} partnerCustomerCreateRequest 
     * @param {module:api/PlaidApi~partnerCustomerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartnerCustomerCreateResponse}
     */
    partnerCustomerCreate(partnerCustomerCreateRequest, callback) {
      let postBody = partnerCustomerCreateRequest;
      // verify the required parameter 'partnerCustomerCreateRequest' is set
      if (partnerCustomerCreateRequest === undefined || partnerCustomerCreateRequest === null) {
        throw new Error("Missing the required parameter 'partnerCustomerCreateRequest' when calling partnerCustomerCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PartnerCustomerCreateResponse;
      return this.apiClient.callApi(
        '/partner/customer/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partnerCustomerEnable operation.
     * @callback module:api/PlaidApi~partnerCustomerEnableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartnerCustomerEnableResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables a Plaid reseller's end customer in the Production environment.
     * The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the Production environment.
     * @param {module:model/PartnerCustomerEnableRequest} partnerCustomerEnableRequest 
     * @param {module:api/PlaidApi~partnerCustomerEnableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartnerCustomerEnableResponse}
     */
    partnerCustomerEnable(partnerCustomerEnableRequest, callback) {
      let postBody = partnerCustomerEnableRequest;
      // verify the required parameter 'partnerCustomerEnableRequest' is set
      if (partnerCustomerEnableRequest === undefined || partnerCustomerEnableRequest === null) {
        throw new Error("Missing the required parameter 'partnerCustomerEnableRequest' when calling partnerCustomerEnable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PartnerCustomerEnableResponse;
      return this.apiClient.callApi(
        '/partner/customer/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partnerCustomerGet operation.
     * @callback module:api/PlaidApi~partnerCustomerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartnerCustomerGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a Plaid reseller's end customer.
     * The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
     * @param {module:model/PartnerCustomerGetRequest} partnerCustomerGetRequest 
     * @param {module:api/PlaidApi~partnerCustomerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartnerCustomerGetResponse}
     */
    partnerCustomerGet(partnerCustomerGetRequest, callback) {
      let postBody = partnerCustomerGetRequest;
      // verify the required parameter 'partnerCustomerGetRequest' is set
      if (partnerCustomerGetRequest === undefined || partnerCustomerGetRequest === null) {
        throw new Error("Missing the required parameter 'partnerCustomerGetRequest' when calling partnerCustomerGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PartnerCustomerGetResponse;
      return this.apiClient.callApi(
        '/partner/customer/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partnerCustomerOauthInstitutionsGet operation.
     * @callback module:api/PlaidApi~partnerCustomerOauthInstitutionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartnerCustomerOAuthInstitutionsGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns OAuth-institution registration information for a given end customer.
     * The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
     * @param {module:model/PartnerCustomerOAuthInstitutionsGetRequest} partnerCustomerOAuthInstitutionsGetRequest 
     * @param {module:api/PlaidApi~partnerCustomerOauthInstitutionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartnerCustomerOAuthInstitutionsGetResponse}
     */
    partnerCustomerOauthInstitutionsGet(partnerCustomerOAuthInstitutionsGetRequest, callback) {
      let postBody = partnerCustomerOAuthInstitutionsGetRequest;
      // verify the required parameter 'partnerCustomerOAuthInstitutionsGetRequest' is set
      if (partnerCustomerOAuthInstitutionsGetRequest === undefined || partnerCustomerOAuthInstitutionsGetRequest === null) {
        throw new Error("Missing the required parameter 'partnerCustomerOAuthInstitutionsGetRequest' when calling partnerCustomerOauthInstitutionsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PartnerCustomerOAuthInstitutionsGetResponse;
      return this.apiClient.callApi(
        '/partner/customer/oauth_institutions/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the partnerCustomerRemove operation.
     * @callback module:api/PlaidApi~partnerCustomerRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartnerCustomerRemoveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a Plaid reseller's end customer.
     * The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
     * @param {module:model/PartnerCustomerRemoveRequest} partnerCustomerRemoveRequest 
     * @param {module:api/PlaidApi~partnerCustomerRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartnerCustomerRemoveResponse}
     */
    partnerCustomerRemove(partnerCustomerRemoveRequest, callback) {
      let postBody = partnerCustomerRemoveRequest;
      // verify the required parameter 'partnerCustomerRemoveRequest' is set
      if (partnerCustomerRemoveRequest === undefined || partnerCustomerRemoveRequest === null) {
        throw new Error("Missing the required parameter 'partnerCustomerRemoveRequest' when calling partnerCustomerRemove");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PartnerCustomerRemoveResponse;
      return this.apiClient.callApi(
        '/partner/customer/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentInitiationConsentCreate operation.
     * @callback module:api/PlaidApi~paymentInitiationConsentCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentInitiationConsentCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create payment consent
     * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
     * @param {module:model/PaymentInitiationConsentCreateRequest} paymentInitiationConsentCreateRequest 
     * @param {module:api/PlaidApi~paymentInitiationConsentCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentInitiationConsentCreateResponse}
     */
    paymentInitiationConsentCreate(paymentInitiationConsentCreateRequest, callback) {
      let postBody = paymentInitiationConsentCreateRequest;
      // verify the required parameter 'paymentInitiationConsentCreateRequest' is set
      if (paymentInitiationConsentCreateRequest === undefined || paymentInitiationConsentCreateRequest === null) {
        throw new Error("Missing the required parameter 'paymentInitiationConsentCreateRequest' when calling paymentInitiationConsentCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentInitiationConsentCreateResponse;
      return this.apiClient.callApi(
        '/payment_initiation/consent/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentInitiationConsentGet operation.
     * @callback module:api/PlaidApi~paymentInitiationConsentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentInitiationConsentGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payment consent
     * The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
     * @param {module:model/PaymentInitiationConsentGetRequest} paymentInitiationConsentGetRequest 
     * @param {module:api/PlaidApi~paymentInitiationConsentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentInitiationConsentGetResponse}
     */
    paymentInitiationConsentGet(paymentInitiationConsentGetRequest, callback) {
      let postBody = paymentInitiationConsentGetRequest;
      // verify the required parameter 'paymentInitiationConsentGetRequest' is set
      if (paymentInitiationConsentGetRequest === undefined || paymentInitiationConsentGetRequest === null) {
        throw new Error("Missing the required parameter 'paymentInitiationConsentGetRequest' when calling paymentInitiationConsentGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentInitiationConsentGetResponse;
      return this.apiClient.callApi(
        '/payment_initiation/consent/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentInitiationConsentPaymentExecute operation.
     * @callback module:api/PlaidApi~paymentInitiationConsentPaymentExecuteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentInitiationConsentPaymentExecuteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a single payment using consent
     * The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
     * @param {module:model/PaymentInitiationConsentPaymentExecuteRequest} paymentInitiationConsentPaymentExecuteRequest 
     * @param {module:api/PlaidApi~paymentInitiationConsentPaymentExecuteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentInitiationConsentPaymentExecuteResponse}
     */
    paymentInitiationConsentPaymentExecute(paymentInitiationConsentPaymentExecuteRequest, callback) {
      let postBody = paymentInitiationConsentPaymentExecuteRequest;
      // verify the required parameter 'paymentInitiationConsentPaymentExecuteRequest' is set
      if (paymentInitiationConsentPaymentExecuteRequest === undefined || paymentInitiationConsentPaymentExecuteRequest === null) {
        throw new Error("Missing the required parameter 'paymentInitiationConsentPaymentExecuteRequest' when calling paymentInitiationConsentPaymentExecute");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentInitiationConsentPaymentExecuteResponse;
      return this.apiClient.callApi(
        '/payment_initiation/consent/payment/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentInitiationConsentRevoke operation.
     * @callback module:api/PlaidApi~paymentInitiationConsentRevokeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentInitiationConsentRevokeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke payment consent
     * The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
     * @param {module:model/PaymentInitiationConsentRevokeRequest} paymentInitiationConsentRevokeRequest 
     * @param {module:api/PlaidApi~paymentInitiationConsentRevokeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentInitiationConsentRevokeResponse}
     */
    paymentInitiationConsentRevoke(paymentInitiationConsentRevokeRequest, callback) {
      let postBody = paymentInitiationConsentRevokeRequest;
      // verify the required parameter 'paymentInitiationConsentRevokeRequest' is set
      if (paymentInitiationConsentRevokeRequest === undefined || paymentInitiationConsentRevokeRequest === null) {
        throw new Error("Missing the required parameter 'paymentInitiationConsentRevokeRequest' when calling paymentInitiationConsentRevoke");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentInitiationConsentRevokeResponse;
      return this.apiClient.callApi(
        '/payment_initiation/consent/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentInitiationPaymentCreate operation.
     * @callback module:api/PlaidApi~paymentInitiationPaymentCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentInitiationPaymentCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a payment
     * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
     * @param {module:model/PaymentInitiationPaymentCreateRequest} paymentInitiationPaymentCreateRequest 
     * @param {module:api/PlaidApi~paymentInitiationPaymentCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentInitiationPaymentCreateResponse}
     */
    paymentInitiationPaymentCreate(paymentInitiationPaymentCreateRequest, callback) {
      let postBody = paymentInitiationPaymentCreateRequest;
      // verify the required parameter 'paymentInitiationPaymentCreateRequest' is set
      if (paymentInitiationPaymentCreateRequest === undefined || paymentInitiationPaymentCreateRequest === null) {
        throw new Error("Missing the required parameter 'paymentInitiationPaymentCreateRequest' when calling paymentInitiationPaymentCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentInitiationPaymentCreateResponse;
      return this.apiClient.callApi(
        '/payment_initiation/payment/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentInitiationPaymentGet operation.
     * @callback module:api/PlaidApi~paymentInitiationPaymentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentInitiationPaymentGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payment details
     * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
     * @param {module:model/PaymentInitiationPaymentGetRequest} paymentInitiationPaymentGetRequest 
     * @param {module:api/PlaidApi~paymentInitiationPaymentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentInitiationPaymentGetResponse}
     */
    paymentInitiationPaymentGet(paymentInitiationPaymentGetRequest, callback) {
      let postBody = paymentInitiationPaymentGetRequest;
      // verify the required parameter 'paymentInitiationPaymentGetRequest' is set
      if (paymentInitiationPaymentGetRequest === undefined || paymentInitiationPaymentGetRequest === null) {
        throw new Error("Missing the required parameter 'paymentInitiationPaymentGetRequest' when calling paymentInitiationPaymentGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentInitiationPaymentGetResponse;
      return this.apiClient.callApi(
        '/payment_initiation/payment/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentInitiationPaymentList operation.
     * @callback module:api/PlaidApi~paymentInitiationPaymentListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentInitiationPaymentListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List payments
     * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
     * @param {module:model/PaymentInitiationPaymentListRequest} paymentInitiationPaymentListRequest 
     * @param {module:api/PlaidApi~paymentInitiationPaymentListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentInitiationPaymentListResponse}
     */
    paymentInitiationPaymentList(paymentInitiationPaymentListRequest, callback) {
      let postBody = paymentInitiationPaymentListRequest;
      // verify the required parameter 'paymentInitiationPaymentListRequest' is set
      if (paymentInitiationPaymentListRequest === undefined || paymentInitiationPaymentListRequest === null) {
        throw new Error("Missing the required parameter 'paymentInitiationPaymentListRequest' when calling paymentInitiationPaymentList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentInitiationPaymentListResponse;
      return this.apiClient.callApi(
        '/payment_initiation/payment/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentInitiationPaymentReverse operation.
     * @callback module:api/PlaidApi~paymentInitiationPaymentReverseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentInitiationPaymentReverseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reverse an existing payment
     * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund. 
     * @param {module:model/PaymentInitiationPaymentReverseRequest} paymentInitiationPaymentReverseRequest 
     * @param {module:api/PlaidApi~paymentInitiationPaymentReverseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentInitiationPaymentReverseResponse}
     */
    paymentInitiationPaymentReverse(paymentInitiationPaymentReverseRequest, callback) {
      let postBody = paymentInitiationPaymentReverseRequest;
      // verify the required parameter 'paymentInitiationPaymentReverseRequest' is set
      if (paymentInitiationPaymentReverseRequest === undefined || paymentInitiationPaymentReverseRequest === null) {
        throw new Error("Missing the required parameter 'paymentInitiationPaymentReverseRequest' when calling paymentInitiationPaymentReverse");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentInitiationPaymentReverseResponse;
      return this.apiClient.callApi(
        '/payment_initiation/payment/reverse', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentInitiationRecipientCreate operation.
     * @callback module:api/PlaidApi~paymentInitiationRecipientCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentInitiationRecipientCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create payment recipient
     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use `bacs` in the UK and `iban` in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`. 
     * @param {module:model/PaymentInitiationRecipientCreateRequest} paymentInitiationRecipientCreateRequest 
     * @param {module:api/PlaidApi~paymentInitiationRecipientCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentInitiationRecipientCreateResponse}
     */
    paymentInitiationRecipientCreate(paymentInitiationRecipientCreateRequest, callback) {
      let postBody = paymentInitiationRecipientCreateRequest;
      // verify the required parameter 'paymentInitiationRecipientCreateRequest' is set
      if (paymentInitiationRecipientCreateRequest === undefined || paymentInitiationRecipientCreateRequest === null) {
        throw new Error("Missing the required parameter 'paymentInitiationRecipientCreateRequest' when calling paymentInitiationRecipientCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentInitiationRecipientCreateResponse;
      return this.apiClient.callApi(
        '/payment_initiation/recipient/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentInitiationRecipientGet operation.
     * @callback module:api/PlaidApi~paymentInitiationRecipientGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentInitiationRecipientGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payment recipient
     * Get details about a payment recipient you have previously created.
     * @param {module:model/PaymentInitiationRecipientGetRequest} paymentInitiationRecipientGetRequest 
     * @param {module:api/PlaidApi~paymentInitiationRecipientGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentInitiationRecipientGetResponse}
     */
    paymentInitiationRecipientGet(paymentInitiationRecipientGetRequest, callback) {
      let postBody = paymentInitiationRecipientGetRequest;
      // verify the required parameter 'paymentInitiationRecipientGetRequest' is set
      if (paymentInitiationRecipientGetRequest === undefined || paymentInitiationRecipientGetRequest === null) {
        throw new Error("Missing the required parameter 'paymentInitiationRecipientGetRequest' when calling paymentInitiationRecipientGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentInitiationRecipientGetResponse;
      return this.apiClient.callApi(
        '/payment_initiation/recipient/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentInitiationRecipientList operation.
     * @callback module:api/PlaidApi~paymentInitiationRecipientListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentInitiationRecipientListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List payment recipients
     * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
     * @param {module:model/PaymentInitiationRecipientListRequest} paymentInitiationRecipientListRequest 
     * @param {module:api/PlaidApi~paymentInitiationRecipientListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentInitiationRecipientListResponse}
     */
    paymentInitiationRecipientList(paymentInitiationRecipientListRequest, callback) {
      let postBody = paymentInitiationRecipientListRequest;
      // verify the required parameter 'paymentInitiationRecipientListRequest' is set
      if (paymentInitiationRecipientListRequest === undefined || paymentInitiationRecipientListRequest === null) {
        throw new Error("Missing the required parameter 'paymentInitiationRecipientListRequest' when calling paymentInitiationRecipientList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentInitiationRecipientListResponse;
      return this.apiClient.callApi(
        '/payment_initiation/recipient/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentProfileCreate operation.
     * @callback module:api/PlaidApi~paymentProfileCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentProfileCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create payment profile
     * Use `/payment_profile/create` endpoint to create a new payment profile. To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field. You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
     * @param {module:model/PaymentProfileCreateRequest} paymentProfileCreateRequest 
     * @param {module:api/PlaidApi~paymentProfileCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentProfileCreateResponse}
     */
    paymentProfileCreate(paymentProfileCreateRequest, callback) {
      let postBody = paymentProfileCreateRequest;
      // verify the required parameter 'paymentProfileCreateRequest' is set
      if (paymentProfileCreateRequest === undefined || paymentProfileCreateRequest === null) {
        throw new Error("Missing the required parameter 'paymentProfileCreateRequest' when calling paymentProfileCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentProfileCreateResponse;
      return this.apiClient.callApi(
        '/payment_profile/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentProfileGet operation.
     * @callback module:api/PlaidApi~paymentProfileGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentProfileGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payment profile
     * Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
     * @param {module:model/PaymentProfileGetRequest} paymentProfileGetRequest 
     * @param {module:api/PlaidApi~paymentProfileGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentProfileGetResponse}
     */
    paymentProfileGet(paymentProfileGetRequest, callback) {
      let postBody = paymentProfileGetRequest;
      // verify the required parameter 'paymentProfileGetRequest' is set
      if (paymentProfileGetRequest === undefined || paymentProfileGetRequest === null) {
        throw new Error("Missing the required parameter 'paymentProfileGetRequest' when calling paymentProfileGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentProfileGetResponse;
      return this.apiClient.callApi(
        '/payment_profile/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentProfileRemove operation.
     * @callback module:api/PlaidApi~paymentProfileRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentProfileRemoveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove payment profile
     * Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
     * @param {module:model/PaymentProfileRemoveRequest} paymentProfileRemoveRequest 
     * @param {module:api/PlaidApi~paymentProfileRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentProfileRemoveResponse}
     */
    paymentProfileRemove(paymentProfileRemoveRequest, callback) {
      let postBody = paymentProfileRemoveRequest;
      // verify the required parameter 'paymentProfileRemoveRequest' is set
      if (paymentProfileRemoveRequest === undefined || paymentProfileRemoveRequest === null) {
        throw new Error("Missing the required parameter 'paymentProfileRemoveRequest' when calling paymentProfileRemove");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentProfileRemoveResponse;
      return this.apiClient.callApi(
        '/payment_profile/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processorApexProcessorTokenCreate operation.
     * @callback module:api/PlaidApi~processorApexProcessorTokenCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorTokenCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Apex bank account token
     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
     * @param {module:model/ProcessorApexProcessorTokenCreateRequest} processorApexProcessorTokenCreateRequest 
     * @param {module:api/PlaidApi~processorApexProcessorTokenCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorTokenCreateResponse}
     */
    processorApexProcessorTokenCreate(processorApexProcessorTokenCreateRequest, callback) {
      let postBody = processorApexProcessorTokenCreateRequest;
      // verify the required parameter 'processorApexProcessorTokenCreateRequest' is set
      if (processorApexProcessorTokenCreateRequest === undefined || processorApexProcessorTokenCreateRequest === null) {
        throw new Error("Missing the required parameter 'processorApexProcessorTokenCreateRequest' when calling processorApexProcessorTokenCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessorTokenCreateResponse;
      return this.apiClient.callApi(
        '/processor/apex/processor_token/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processorAuthGet operation.
     * @callback module:api/PlaidApi~processorAuthGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorAuthGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Auth data
     * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that''s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
     * @param {module:model/ProcessorAuthGetRequest} processorAuthGetRequest 
     * @param {module:api/PlaidApi~processorAuthGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorAuthGetResponse}
     */
    processorAuthGet(processorAuthGetRequest, callback) {
      let postBody = processorAuthGetRequest;
      // verify the required parameter 'processorAuthGetRequest' is set
      if (processorAuthGetRequest === undefined || processorAuthGetRequest === null) {
        throw new Error("Missing the required parameter 'processorAuthGetRequest' when calling processorAuthGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessorAuthGetResponse;
      return this.apiClient.callApi(
        '/processor/auth/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processorBalanceGet operation.
     * @callback module:api/PlaidApi~processorBalanceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorBalanceGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Balance data
     * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached. 
     * @param {module:model/ProcessorBalanceGetRequest} processorBalanceGetRequest The `/processor/balance/get` endpoint returns the real-time balance for the account associated with a given `processor_token`.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of `null`.
     * @param {module:api/PlaidApi~processorBalanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorBalanceGetResponse}
     */
    processorBalanceGet(processorBalanceGetRequest, callback) {
      let postBody = processorBalanceGetRequest;
      // verify the required parameter 'processorBalanceGetRequest' is set
      if (processorBalanceGetRequest === undefined || processorBalanceGetRequest === null) {
        throw new Error("Missing the required parameter 'processorBalanceGetRequest' when calling processorBalanceGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessorBalanceGetResponse;
      return this.apiClient.callApi(
        '/processor/balance/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processorBankTransferCreate operation.
     * @callback module:api/PlaidApi~processorBankTransferCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorBankTransferCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a bank transfer as a processor
     * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
     * @param {module:model/ProcessorBankTransferCreateRequest} processorBankTransferCreateRequest 
     * @param {module:api/PlaidApi~processorBankTransferCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorBankTransferCreateResponse}
     */
    processorBankTransferCreate(processorBankTransferCreateRequest, callback) {
      let postBody = processorBankTransferCreateRequest;
      // verify the required parameter 'processorBankTransferCreateRequest' is set
      if (processorBankTransferCreateRequest === undefined || processorBankTransferCreateRequest === null) {
        throw new Error("Missing the required parameter 'processorBankTransferCreateRequest' when calling processorBankTransferCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessorBankTransferCreateResponse;
      return this.apiClient.callApi(
        '/processor/bank_transfer/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processorIdentityGet operation.
     * @callback module:api/PlaidApi~processorIdentityGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorIdentityGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Identity data
     * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
     * @param {module:model/ProcessorIdentityGetRequest} processorIdentityGetRequest 
     * @param {module:api/PlaidApi~processorIdentityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorIdentityGetResponse}
     */
    processorIdentityGet(processorIdentityGetRequest, callback) {
      let postBody = processorIdentityGetRequest;
      // verify the required parameter 'processorIdentityGetRequest' is set
      if (processorIdentityGetRequest === undefined || processorIdentityGetRequest === null) {
        throw new Error("Missing the required parameter 'processorIdentityGetRequest' when calling processorIdentityGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessorIdentityGetResponse;
      return this.apiClient.callApi(
        '/processor/identity/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processorSignalDecisionReport operation.
     * @callback module:api/PlaidApi~processorSignalDecisionReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorSignalDecisionReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report whether you initiated an ACH transaction
     * After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for `initiated`.
     * @param {module:model/ProcessorSignalDecisionReportRequest} processorSignalDecisionReportRequest 
     * @param {module:api/PlaidApi~processorSignalDecisionReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorSignalDecisionReportResponse}
     */
    processorSignalDecisionReport(processorSignalDecisionReportRequest, callback) {
      let postBody = processorSignalDecisionReportRequest;
      // verify the required parameter 'processorSignalDecisionReportRequest' is set
      if (processorSignalDecisionReportRequest === undefined || processorSignalDecisionReportRequest === null) {
        throw new Error("Missing the required parameter 'processorSignalDecisionReportRequest' when calling processorSignalDecisionReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessorSignalDecisionReportResponse;
      return this.apiClient.callApi(
        '/processor/signal/decision/report', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processorSignalEvaluate operation.
     * @callback module:api/PlaidApi~processorSignalEvaluateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorSignalEvaluateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Evaluate a planned ACH transaction
     * Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
     * @param {module:model/ProcessorSignalEvaluateRequest} processorSignalEvaluateRequest 
     * @param {module:api/PlaidApi~processorSignalEvaluateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorSignalEvaluateResponse}
     */
    processorSignalEvaluate(processorSignalEvaluateRequest, callback) {
      let postBody = processorSignalEvaluateRequest;
      // verify the required parameter 'processorSignalEvaluateRequest' is set
      if (processorSignalEvaluateRequest === undefined || processorSignalEvaluateRequest === null) {
        throw new Error("Missing the required parameter 'processorSignalEvaluateRequest' when calling processorSignalEvaluate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessorSignalEvaluateResponse;
      return this.apiClient.callApi(
        '/processor/signal/evaluate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processorSignalReturnReport operation.
     * @callback module:api/PlaidApi~processorSignalReturnReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorSignalReturnReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report a return for an ACH transaction
     * Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     * @param {module:model/ProcessorSignalReturnReportRequest} processorSignalReturnReportRequest 
     * @param {module:api/PlaidApi~processorSignalReturnReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorSignalReturnReportResponse}
     */
    processorSignalReturnReport(processorSignalReturnReportRequest, callback) {
      let postBody = processorSignalReturnReportRequest;
      // verify the required parameter 'processorSignalReturnReportRequest' is set
      if (processorSignalReturnReportRequest === undefined || processorSignalReturnReportRequest === null) {
        throw new Error("Missing the required parameter 'processorSignalReturnReportRequest' when calling processorSignalReturnReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessorSignalReturnReportResponse;
      return this.apiClient.callApi(
        '/processor/signal/return/report', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processorStripeBankAccountTokenCreate operation.
     * @callback module:api/PlaidApi~processorStripeBankAccountTokenCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorStripeBankAccountTokenCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Stripe bank account token
     *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user's bank account information changes or they revoke Plaid's permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.  Bank account tokens can also be revoked, using `/item/remove`.'
     * @param {module:model/ProcessorStripeBankAccountTokenCreateRequest} processorStripeBankAccountTokenCreateRequest 
     * @param {module:api/PlaidApi~processorStripeBankAccountTokenCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorStripeBankAccountTokenCreateResponse}
     */
    processorStripeBankAccountTokenCreate(processorStripeBankAccountTokenCreateRequest, callback) {
      let postBody = processorStripeBankAccountTokenCreateRequest;
      // verify the required parameter 'processorStripeBankAccountTokenCreateRequest' is set
      if (processorStripeBankAccountTokenCreateRequest === undefined || processorStripeBankAccountTokenCreateRequest === null) {
        throw new Error("Missing the required parameter 'processorStripeBankAccountTokenCreateRequest' when calling processorStripeBankAccountTokenCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessorStripeBankAccountTokenCreateResponse;
      return this.apiClient.callApi(
        '/processor/stripe/bank_account_token/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processorTokenCreate operation.
     * @callback module:api/PlaidApi~processorTokenCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessorTokenCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create processor token
     * Used to create a token suitable for sending to one of Plaid's partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.
     * @param {module:model/ProcessorTokenCreateRequest} processorTokenCreateRequest 
     * @param {module:api/PlaidApi~processorTokenCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessorTokenCreateResponse}
     */
    processorTokenCreate(processorTokenCreateRequest, callback) {
      let postBody = processorTokenCreateRequest;
      // verify the required parameter 'processorTokenCreateRequest' is set
      if (processorTokenCreateRequest === undefined || processorTokenCreateRequest === null) {
        throw new Error("Missing the required parameter 'processorTokenCreateRequest' when calling processorTokenCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProcessorTokenCreateResponse;
      return this.apiClient.callApi(
        '/processor/token/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxBankTransferFireWebhook operation.
     * @callback module:api/PlaidApi~sandboxBankTransferFireWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxBankTransferFireWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manually fire a Bank Transfer webhook
     * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
     * @param {module:model/SandboxBankTransferFireWebhookRequest} sandboxBankTransferFireWebhookRequest 
     * @param {module:api/PlaidApi~sandboxBankTransferFireWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxBankTransferFireWebhookResponse}
     */
    sandboxBankTransferFireWebhook(sandboxBankTransferFireWebhookRequest, callback) {
      let postBody = sandboxBankTransferFireWebhookRequest;
      // verify the required parameter 'sandboxBankTransferFireWebhookRequest' is set
      if (sandboxBankTransferFireWebhookRequest === undefined || sandboxBankTransferFireWebhookRequest === null) {
        throw new Error("Missing the required parameter 'sandboxBankTransferFireWebhookRequest' when calling sandboxBankTransferFireWebhook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxBankTransferFireWebhookResponse;
      return this.apiClient.callApi(
        '/sandbox/bank_transfer/fire_webhook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxBankTransferSimulate operation.
     * @callback module:api/PlaidApi~sandboxBankTransferSimulateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxBankTransferSimulateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulate a bank transfer event in Sandbox
     * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @param {module:model/SandboxBankTransferSimulateRequest} sandboxBankTransferSimulateRequest 
     * @param {module:api/PlaidApi~sandboxBankTransferSimulateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxBankTransferSimulateResponse}
     */
    sandboxBankTransferSimulate(sandboxBankTransferSimulateRequest, callback) {
      let postBody = sandboxBankTransferSimulateRequest;
      // verify the required parameter 'sandboxBankTransferSimulateRequest' is set
      if (sandboxBankTransferSimulateRequest === undefined || sandboxBankTransferSimulateRequest === null) {
        throw new Error("Missing the required parameter 'sandboxBankTransferSimulateRequest' when calling sandboxBankTransferSimulate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxBankTransferSimulateResponse;
      return this.apiClient.callApi(
        '/sandbox/bank_transfer/simulate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxIncomeFireWebhook operation.
     * @callback module:api/PlaidApi~sandboxIncomeFireWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxIncomeFireWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manually fire an Income webhook
     * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment.
     * @param {module:model/SandboxIncomeFireWebhookRequest} sandboxIncomeFireWebhookRequest 
     * @param {module:api/PlaidApi~sandboxIncomeFireWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxIncomeFireWebhookResponse}
     */
    sandboxIncomeFireWebhook(sandboxIncomeFireWebhookRequest, callback) {
      let postBody = sandboxIncomeFireWebhookRequest;
      // verify the required parameter 'sandboxIncomeFireWebhookRequest' is set
      if (sandboxIncomeFireWebhookRequest === undefined || sandboxIncomeFireWebhookRequest === null) {
        throw new Error("Missing the required parameter 'sandboxIncomeFireWebhookRequest' when calling sandboxIncomeFireWebhook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxIncomeFireWebhookResponse;
      return this.apiClient.callApi(
        '/sandbox/income/fire_webhook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxItemFireWebhook operation.
     * @callback module:api/PlaidApi~sandboxItemFireWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxItemFireWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fire a test webhook
     * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.  `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
     * @param {module:model/SandboxItemFireWebhookRequest} sandboxItemFireWebhookRequest 
     * @param {module:api/PlaidApi~sandboxItemFireWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxItemFireWebhookResponse}
     */
    sandboxItemFireWebhook(sandboxItemFireWebhookRequest, callback) {
      let postBody = sandboxItemFireWebhookRequest;
      // verify the required parameter 'sandboxItemFireWebhookRequest' is set
      if (sandboxItemFireWebhookRequest === undefined || sandboxItemFireWebhookRequest === null) {
        throw new Error("Missing the required parameter 'sandboxItemFireWebhookRequest' when calling sandboxItemFireWebhook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxItemFireWebhookResponse;
      return this.apiClient.callApi(
        '/sandbox/item/fire_webhook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxItemResetLogin operation.
     * @callback module:api/PlaidApi~sandboxItemResetLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxItemResetLoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Force a Sandbox Item into an error state
     * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link's [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
     * @param {module:model/SandboxItemResetLoginRequest} sandboxItemResetLoginRequest 
     * @param {module:api/PlaidApi~sandboxItemResetLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxItemResetLoginResponse}
     */
    sandboxItemResetLogin(sandboxItemResetLoginRequest, callback) {
      let postBody = sandboxItemResetLoginRequest;
      // verify the required parameter 'sandboxItemResetLoginRequest' is set
      if (sandboxItemResetLoginRequest === undefined || sandboxItemResetLoginRequest === null) {
        throw new Error("Missing the required parameter 'sandboxItemResetLoginRequest' when calling sandboxItemResetLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxItemResetLoginResponse;
      return this.apiClient.callApi(
        '/sandbox/item/reset_login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxItemSetVerificationStatus operation.
     * @callback module:api/PlaidApi~sandboxItemSetVerificationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxItemSetVerificationStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set verification status for Sandbox account
     * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
     * @param {module:model/SandboxItemSetVerificationStatusRequest} sandboxItemSetVerificationStatusRequest 
     * @param {module:api/PlaidApi~sandboxItemSetVerificationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxItemSetVerificationStatusResponse}
     */
    sandboxItemSetVerificationStatus(sandboxItemSetVerificationStatusRequest, callback) {
      let postBody = sandboxItemSetVerificationStatusRequest;
      // verify the required parameter 'sandboxItemSetVerificationStatusRequest' is set
      if (sandboxItemSetVerificationStatusRequest === undefined || sandboxItemSetVerificationStatusRequest === null) {
        throw new Error("Missing the required parameter 'sandboxItemSetVerificationStatusRequest' when calling sandboxItemSetVerificationStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxItemSetVerificationStatusResponse;
      return this.apiClient.callApi(
        '/sandbox/item/set_verification_status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxOauthSelectAccounts operation.
     * @callback module:api/PlaidApi~sandboxOauthSelectAccountsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * @param {module:model/SandboxOauthSelectAccountsRequest} sandboxOauthSelectAccountsRequest 
     * @param {module:api/PlaidApi~sandboxOauthSelectAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    sandboxOauthSelectAccounts(sandboxOauthSelectAccountsRequest, callback) {
      let postBody = sandboxOauthSelectAccountsRequest;
      // verify the required parameter 'sandboxOauthSelectAccountsRequest' is set
      if (sandboxOauthSelectAccountsRequest === undefined || sandboxOauthSelectAccountsRequest === null) {
        throw new Error("Missing the required parameter 'sandboxOauthSelectAccountsRequest' when calling sandboxOauthSelectAccounts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/sandbox/oauth/select_accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxPaymentProfileResetLogin operation.
     * @callback module:api/PlaidApi~sandboxPaymentProfileResetLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxPaymentProfileResetLoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset the login of a Payment Profile
     * `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
     * @param {module:model/SandboxPaymentProfileResetLoginRequest} sandboxPaymentProfileResetLoginRequest 
     * @param {module:api/PlaidApi~sandboxPaymentProfileResetLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxPaymentProfileResetLoginResponse}
     */
    sandboxPaymentProfileResetLogin(sandboxPaymentProfileResetLoginRequest, callback) {
      let postBody = sandboxPaymentProfileResetLoginRequest;
      // verify the required parameter 'sandboxPaymentProfileResetLoginRequest' is set
      if (sandboxPaymentProfileResetLoginRequest === undefined || sandboxPaymentProfileResetLoginRequest === null) {
        throw new Error("Missing the required parameter 'sandboxPaymentProfileResetLoginRequest' when calling sandboxPaymentProfileResetLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxPaymentProfileResetLoginResponse;
      return this.apiClient.callApi(
        '/sandbox/payment_profile/reset_login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxProcessorTokenCreate operation.
     * @callback module:api/PlaidApi~sandboxProcessorTokenCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxProcessorTokenCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a test Item and processor token
     * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
     * @param {module:model/SandboxProcessorTokenCreateRequest} sandboxProcessorTokenCreateRequest 
     * @param {module:api/PlaidApi~sandboxProcessorTokenCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxProcessorTokenCreateResponse}
     */
    sandboxProcessorTokenCreate(sandboxProcessorTokenCreateRequest, callback) {
      let postBody = sandboxProcessorTokenCreateRequest;
      // verify the required parameter 'sandboxProcessorTokenCreateRequest' is set
      if (sandboxProcessorTokenCreateRequest === undefined || sandboxProcessorTokenCreateRequest === null) {
        throw new Error("Missing the required parameter 'sandboxProcessorTokenCreateRequest' when calling sandboxProcessorTokenCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxProcessorTokenCreateResponse;
      return this.apiClient.callApi(
        '/sandbox/processor_token/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxPublicTokenCreate operation.
     * @callback module:api/PlaidApi~sandboxPublicTokenCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxPublicTokenCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a test Item
     * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
     * @param {module:model/SandboxPublicTokenCreateRequest} sandboxPublicTokenCreateRequest 
     * @param {module:api/PlaidApi~sandboxPublicTokenCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxPublicTokenCreateResponse}
     */
    sandboxPublicTokenCreate(sandboxPublicTokenCreateRequest, callback) {
      let postBody = sandboxPublicTokenCreateRequest;
      // verify the required parameter 'sandboxPublicTokenCreateRequest' is set
      if (sandboxPublicTokenCreateRequest === undefined || sandboxPublicTokenCreateRequest === null) {
        throw new Error("Missing the required parameter 'sandboxPublicTokenCreateRequest' when calling sandboxPublicTokenCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxPublicTokenCreateResponse;
      return this.apiClient.callApi(
        '/sandbox/public_token/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxTransferFireWebhook operation.
     * @callback module:api/PlaidApi~sandboxTransferFireWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxTransferFireWebhookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Manually fire a Transfer webhook
     * Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a Transfer webhook in the Sandbox environment.
     * @param {module:model/SandboxTransferFireWebhookRequest} sandboxTransferFireWebhookRequest 
     * @param {module:api/PlaidApi~sandboxTransferFireWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxTransferFireWebhookResponse}
     */
    sandboxTransferFireWebhook(sandboxTransferFireWebhookRequest, callback) {
      let postBody = sandboxTransferFireWebhookRequest;
      // verify the required parameter 'sandboxTransferFireWebhookRequest' is set
      if (sandboxTransferFireWebhookRequest === undefined || sandboxTransferFireWebhookRequest === null) {
        throw new Error("Missing the required parameter 'sandboxTransferFireWebhookRequest' when calling sandboxTransferFireWebhook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxTransferFireWebhookResponse;
      return this.apiClient.callApi(
        '/sandbox/transfer/fire_webhook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxTransferRepaymentSimulate operation.
     * @callback module:api/PlaidApi~sandboxTransferRepaymentSimulateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxTransferRepaymentSimulateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger the creation of a repayment
     * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
     * @param {module:model/SandboxTransferRepaymentSimulateRequest} sandboxTransferRepaymentSimulateRequest 
     * @param {module:api/PlaidApi~sandboxTransferRepaymentSimulateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxTransferRepaymentSimulateResponse}
     */
    sandboxTransferRepaymentSimulate(sandboxTransferRepaymentSimulateRequest, callback) {
      let postBody = sandboxTransferRepaymentSimulateRequest;
      // verify the required parameter 'sandboxTransferRepaymentSimulateRequest' is set
      if (sandboxTransferRepaymentSimulateRequest === undefined || sandboxTransferRepaymentSimulateRequest === null) {
        throw new Error("Missing the required parameter 'sandboxTransferRepaymentSimulateRequest' when calling sandboxTransferRepaymentSimulate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxTransferRepaymentSimulateResponse;
      return this.apiClient.callApi(
        '/sandbox/transfer/repayment/simulate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxTransferSimulate operation.
     * @callback module:api/PlaidApi~sandboxTransferSimulateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxTransferSimulateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulate a transfer event in Sandbox
     * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @param {module:model/SandboxTransferSimulateRequest} sandboxTransferSimulateRequest 
     * @param {module:api/PlaidApi~sandboxTransferSimulateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxTransferSimulateResponse}
     */
    sandboxTransferSimulate(sandboxTransferSimulateRequest, callback) {
      let postBody = sandboxTransferSimulateRequest;
      // verify the required parameter 'sandboxTransferSimulateRequest' is set
      if (sandboxTransferSimulateRequest === undefined || sandboxTransferSimulateRequest === null) {
        throw new Error("Missing the required parameter 'sandboxTransferSimulateRequest' when calling sandboxTransferSimulate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxTransferSimulateResponse;
      return this.apiClient.callApi(
        '/sandbox/transfer/simulate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxTransferSweepSimulate operation.
     * @callback module:api/PlaidApi~sandboxTransferSweepSimulateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxTransferSweepSimulateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simulate creating a sweep
     * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
     * @param {module:model/SandboxTransferSweepSimulateRequest} sandboxTransferSweepSimulateRequest 
     * @param {module:api/PlaidApi~sandboxTransferSweepSimulateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxTransferSweepSimulateResponse}
     */
    sandboxTransferSweepSimulate(sandboxTransferSweepSimulateRequest, callback) {
      let postBody = sandboxTransferSweepSimulateRequest;
      // verify the required parameter 'sandboxTransferSweepSimulateRequest' is set
      if (sandboxTransferSweepSimulateRequest === undefined || sandboxTransferSweepSimulateRequest === null) {
        throw new Error("Missing the required parameter 'sandboxTransferSweepSimulateRequest' when calling sandboxTransferSweepSimulate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxTransferSweepSimulateResponse;
      return this.apiClient.callApi(
        '/sandbox/transfer/sweep/simulate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxTransferTestClockAdvance operation.
     * @callback module:api/PlaidApi~sandboxTransferTestClockAdvanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxTransferTestClockAdvanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Advance a test clock
     * Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed. For instance, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`. For instance, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
     * @param {module:model/SandboxTransferTestClockAdvanceRequest} sandboxTransferTestClockAdvanceRequest 
     * @param {module:api/PlaidApi~sandboxTransferTestClockAdvanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxTransferTestClockAdvanceResponse}
     */
    sandboxTransferTestClockAdvance(sandboxTransferTestClockAdvanceRequest, callback) {
      let postBody = sandboxTransferTestClockAdvanceRequest;
      // verify the required parameter 'sandboxTransferTestClockAdvanceRequest' is set
      if (sandboxTransferTestClockAdvanceRequest === undefined || sandboxTransferTestClockAdvanceRequest === null) {
        throw new Error("Missing the required parameter 'sandboxTransferTestClockAdvanceRequest' when calling sandboxTransferTestClockAdvance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxTransferTestClockAdvanceResponse;
      return this.apiClient.callApi(
        '/sandbox/transfer/test_clock/advance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxTransferTestClockCreate operation.
     * @callback module:api/PlaidApi~sandboxTransferTestClockCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxTransferTestClockCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a test clock
     * Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.  A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
     * @param {module:model/SandboxTransferTestClockCreateRequest} sandboxTransferTestClockCreateRequest 
     * @param {module:api/PlaidApi~sandboxTransferTestClockCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxTransferTestClockCreateResponse}
     */
    sandboxTransferTestClockCreate(sandboxTransferTestClockCreateRequest, callback) {
      let postBody = sandboxTransferTestClockCreateRequest;
      // verify the required parameter 'sandboxTransferTestClockCreateRequest' is set
      if (sandboxTransferTestClockCreateRequest === undefined || sandboxTransferTestClockCreateRequest === null) {
        throw new Error("Missing the required parameter 'sandboxTransferTestClockCreateRequest' when calling sandboxTransferTestClockCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxTransferTestClockCreateResponse;
      return this.apiClient.callApi(
        '/sandbox/transfer/test_clock/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxTransferTestClockGet operation.
     * @callback module:api/PlaidApi~sandboxTransferTestClockGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxTransferTestClockGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a test clock
     * Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
     * @param {module:model/SandboxTransferTestClockGetRequest} sandboxTransferTestClockGetRequest 
     * @param {module:api/PlaidApi~sandboxTransferTestClockGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxTransferTestClockGetResponse}
     */
    sandboxTransferTestClockGet(sandboxTransferTestClockGetRequest, callback) {
      let postBody = sandboxTransferTestClockGetRequest;
      // verify the required parameter 'sandboxTransferTestClockGetRequest' is set
      if (sandboxTransferTestClockGetRequest === undefined || sandboxTransferTestClockGetRequest === null) {
        throw new Error("Missing the required parameter 'sandboxTransferTestClockGetRequest' when calling sandboxTransferTestClockGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxTransferTestClockGetResponse;
      return this.apiClient.callApi(
        '/sandbox/transfer/test_clock/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sandboxTransferTestClockList operation.
     * @callback module:api/PlaidApi~sandboxTransferTestClockListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SandboxTransferTestClockListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List test clocks
     * Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
     * @param {module:model/SandboxTransferTestClockListRequest} sandboxTransferTestClockListRequest 
     * @param {module:api/PlaidApi~sandboxTransferTestClockListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SandboxTransferTestClockListResponse}
     */
    sandboxTransferTestClockList(sandboxTransferTestClockListRequest, callback) {
      let postBody = sandboxTransferTestClockListRequest;
      // verify the required parameter 'sandboxTransferTestClockListRequest' is set
      if (sandboxTransferTestClockListRequest === undefined || sandboxTransferTestClockListRequest === null) {
        throw new Error("Missing the required parameter 'sandboxTransferTestClockListRequest' when calling sandboxTransferTestClockList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SandboxTransferTestClockListResponse;
      return this.apiClient.callApi(
        '/sandbox/transfer/test_clock/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signalDecisionReport operation.
     * @callback module:api/PlaidApi~signalDecisionReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignalDecisionReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report whether you initiated an ACH transaction
     * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for `initiated`.
     * @param {module:model/SignalDecisionReportRequest} signalDecisionReportRequest 
     * @param {module:api/PlaidApi~signalDecisionReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignalDecisionReportResponse}
     */
    signalDecisionReport(signalDecisionReportRequest, callback) {
      let postBody = signalDecisionReportRequest;
      // verify the required parameter 'signalDecisionReportRequest' is set
      if (signalDecisionReportRequest === undefined || signalDecisionReportRequest === null) {
        throw new Error("Missing the required parameter 'signalDecisionReportRequest' when calling signalDecisionReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignalDecisionReportResponse;
      return this.apiClient.callApi(
        '/signal/decision/report', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signalEvaluate operation.
     * @callback module:api/PlaidApi~signalEvaluateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignalEvaluateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Evaluate a planned ACH transaction
     * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
     * @param {module:model/SignalEvaluateRequest} signalEvaluateRequest 
     * @param {module:api/PlaidApi~signalEvaluateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignalEvaluateResponse}
     */
    signalEvaluate(signalEvaluateRequest, callback) {
      let postBody = signalEvaluateRequest;
      // verify the required parameter 'signalEvaluateRequest' is set
      if (signalEvaluateRequest === undefined || signalEvaluateRequest === null) {
        throw new Error("Missing the required parameter 'signalEvaluateRequest' when calling signalEvaluate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignalEvaluateResponse;
      return this.apiClient.callApi(
        '/signal/evaluate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signalPrepare operation.
     * @callback module:api/PlaidApi~signalPrepareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignalPrepareResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Opt-in an Item to Signal
     * When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.  If you are using other Plaid products after Link, e.g. Identity or Assets, call `/signal/prepare` after those product calls are complete.  Example flow: Link is initialized with Auth, call `/auth/get` for the account and routing number, call `/identity/get` to retrieve bank ownership details, then call `/signal/prepare` to begin Signal data collection. Later, once you have obtained details about the proposed transaction from the user, call `/signal/evaluate` for a Signal score. For more information please see [Recommendations for initializing Link with specific product combinations](https://www.plaid.com/docs/link/initializing-products/#recommendations-for-initializing-link-with-specific-product-combinations).
     * @param {module:model/SignalPrepareRequest} signalPrepareRequest 
     * @param {module:api/PlaidApi~signalPrepareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignalPrepareResponse}
     */
    signalPrepare(signalPrepareRequest, callback) {
      let postBody = signalPrepareRequest;
      // verify the required parameter 'signalPrepareRequest' is set
      if (signalPrepareRequest === undefined || signalPrepareRequest === null) {
        throw new Error("Missing the required parameter 'signalPrepareRequest' when calling signalPrepare");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignalPrepareResponse;
      return this.apiClient.callApi(
        '/signal/prepare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signalReturnReport operation.
     * @callback module:api/PlaidApi~signalReturnReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignalReturnReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Report a return for an ACH transaction
     * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     * @param {module:model/SignalReturnReportRequest} signalReturnReportRequest 
     * @param {module:api/PlaidApi~signalReturnReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignalReturnReportResponse}
     */
    signalReturnReport(signalReturnReportRequest, callback) {
      let postBody = signalReturnReportRequest;
      // verify the required parameter 'signalReturnReportRequest' is set
      if (signalReturnReportRequest === undefined || signalReturnReportRequest === null) {
        throw new Error("Missing the required parameter 'signalReturnReportRequest' when calling signalReturnReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignalReturnReportResponse;
      return this.apiClient.callApi(
        '/signal/return/report', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsEnhance operation.
     * @callback module:api/PlaidApi~transactionsEnhanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionsEnhanceGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * enhance locally-held transaction data
     * The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
     * @param {module:model/TransactionsEnhanceGetRequest} transactionsEnhanceGetRequest 
     * @param {module:api/PlaidApi~transactionsEnhanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionsEnhanceGetResponse}
     */
    transactionsEnhance(transactionsEnhanceGetRequest, callback) {
      let postBody = transactionsEnhanceGetRequest;
      // verify the required parameter 'transactionsEnhanceGetRequest' is set
      if (transactionsEnhanceGetRequest === undefined || transactionsEnhanceGetRequest === null) {
        throw new Error("Missing the required parameter 'transactionsEnhanceGetRequest' when calling transactionsEnhance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionsEnhanceGetResponse;
      return this.apiClient.callApi(
        '/beta/transactions/v1/enhance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsEnrich operation.
     * @callback module:api/PlaidApi~transactionsEnrichCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionsEnrichGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enrich locally-held transaction data
     * The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.  To request access to Enrich, reach out to your Plaid point of contact or send a note to enrich-feedback@plaid.com
     * @param {module:model/TransactionsEnrichGetRequest} transactionsEnrichGetRequest 
     * @param {module:api/PlaidApi~transactionsEnrichCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionsEnrichGetResponse}
     */
    transactionsEnrich(transactionsEnrichGetRequest, callback) {
      let postBody = transactionsEnrichGetRequest;
      // verify the required parameter 'transactionsEnrichGetRequest' is set
      if (transactionsEnrichGetRequest === undefined || transactionsEnrichGetRequest === null) {
        throw new Error("Missing the required parameter 'transactionsEnrichGetRequest' when calling transactionsEnrich");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionsEnrichGetResponse;
      return this.apiClient.callApi(
        '/transactions/enrich', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsGet operation.
     * @callback module:api/PlaidApi~transactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionsGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction data
     * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item's `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn't. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
     * @param {module:model/TransactionsGetRequest} transactionsGetRequest 
     * @param {module:api/PlaidApi~transactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionsGetResponse}
     */
    transactionsGet(transactionsGetRequest, callback) {
      let postBody = transactionsGetRequest;
      // verify the required parameter 'transactionsGetRequest' is set
      if (transactionsGetRequest === undefined || transactionsGetRequest === null) {
        throw new Error("Missing the required parameter 'transactionsGetRequest' when calling transactionsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionsGetResponse;
      return this.apiClient.callApi(
        '/transactions/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsRecurringGet operation.
     * @callback module:api/PlaidApi~transactionsRecurringGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionsRecurringGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch recurring transaction streams
     * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`). Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
     * @param {module:model/TransactionsRecurringGetRequest} transactionsRecurringGetRequest 
     * @param {module:api/PlaidApi~transactionsRecurringGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionsRecurringGetResponse}
     */
    transactionsRecurringGet(transactionsRecurringGetRequest, callback) {
      let postBody = transactionsRecurringGetRequest;
      // verify the required parameter 'transactionsRecurringGetRequest' is set
      if (transactionsRecurringGetRequest === undefined || transactionsRecurringGetRequest === null) {
        throw new Error("Missing the required parameter 'transactionsRecurringGetRequest' when calling transactionsRecurringGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionsRecurringGetResponse;
      return this.apiClient.callApi(
        '/transactions/recurring/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsRefresh operation.
     * @callback module:api/PlaidApi~transactionsRefreshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionsRefreshResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh transaction data
     * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCT_NOT_SUPPORTED` error if called on an Item from that institution.  `/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     * @param {module:model/TransactionsRefreshRequest} transactionsRefreshRequest 
     * @param {module:api/PlaidApi~transactionsRefreshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionsRefreshResponse}
     */
    transactionsRefresh(transactionsRefreshRequest, callback) {
      let postBody = transactionsRefreshRequest;
      // verify the required parameter 'transactionsRefreshRequest' is set
      if (transactionsRefreshRequest === undefined || transactionsRefreshRequest === null) {
        throw new Error("Missing the required parameter 'transactionsRefreshRequest' when calling transactionsRefresh");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionsRefreshResponse;
      return this.apiClient.callApi(
        '/transactions/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsRulesCreate operation.
     * @callback module:api/PlaidApi~transactionsRulesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionsRulesCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create transaction category rule
     * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.  Rules will be applied on the Item's transactions returned in `/transactions/get` response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @param {module:model/TransactionsRulesCreateRequest} transactionsRulesCreateRequest 
     * @param {module:api/PlaidApi~transactionsRulesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionsRulesCreateResponse}
     */
    transactionsRulesCreate(transactionsRulesCreateRequest, callback) {
      let postBody = transactionsRulesCreateRequest;
      // verify the required parameter 'transactionsRulesCreateRequest' is set
      if (transactionsRulesCreateRequest === undefined || transactionsRulesCreateRequest === null) {
        throw new Error("Missing the required parameter 'transactionsRulesCreateRequest' when calling transactionsRulesCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionsRulesCreateResponse;
      return this.apiClient.callApi(
        '/beta/transactions/rules/v1/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsRulesList operation.
     * @callback module:api/PlaidApi~transactionsRulesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionsRulesListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of rules created for the Item associated with the access token.
     * The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
     * @param {module:model/TransactionsRulesListRequest} transactionsRulesListRequest 
     * @param {module:api/PlaidApi~transactionsRulesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionsRulesListResponse}
     */
    transactionsRulesList(transactionsRulesListRequest, callback) {
      let postBody = transactionsRulesListRequest;
      // verify the required parameter 'transactionsRulesListRequest' is set
      if (transactionsRulesListRequest === undefined || transactionsRulesListRequest === null) {
        throw new Error("Missing the required parameter 'transactionsRulesListRequest' when calling transactionsRulesList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionsRulesListResponse;
      return this.apiClient.callApi(
        '/beta/transactions/rules/v1/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsRulesRemove operation.
     * @callback module:api/PlaidApi~transactionsRulesRemoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionsRulesRemoveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove transaction rule
     * The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
     * @param {module:model/TransactionsRulesRemoveRequest} transactionsRulesRemoveRequest 
     * @param {module:api/PlaidApi~transactionsRulesRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionsRulesRemoveResponse}
     */
    transactionsRulesRemove(transactionsRulesRemoveRequest, callback) {
      let postBody = transactionsRulesRemoveRequest;
      // verify the required parameter 'transactionsRulesRemoveRequest' is set
      if (transactionsRulesRemoveRequest === undefined || transactionsRulesRemoveRequest === null) {
        throw new Error("Missing the required parameter 'transactionsRulesRemoveRequest' when calling transactionsRulesRemove");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionsRulesRemoveResponse;
      return this.apiClient.callApi(
        '/beta/transactions/rules/v1/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsSync operation.
     * @callback module:api/PlaidApi~transactionsSyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionsSyncResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get incremental transaction updates on an Item
     * This endpoint replaces `/transactions/get` and its associated webhooks for most common use-cases.  The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \"adds\"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.  When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item's `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.  Note that for newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
     * @param {module:model/TransactionsSyncRequest} transactionsSyncRequest 
     * @param {module:api/PlaidApi~transactionsSyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionsSyncResponse}
     */
    transactionsSync(transactionsSyncRequest, callback) {
      let postBody = transactionsSyncRequest;
      // verify the required parameter 'transactionsSyncRequest' is set
      if (transactionsSyncRequest === undefined || transactionsSyncRequest === null) {
        throw new Error("Missing the required parameter 'transactionsSyncRequest' when calling transactionsSync");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionsSyncResponse;
      return this.apiClient.callApi(
        '/transactions/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferAuthorizationCreate operation.
     * @callback module:api/PlaidApi~transferAuthorizationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferAuthorizationCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a transfer authorization
     * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid's Sandbox environment the decisions will be returned as follows:    - To approve a transfer with null rationale code, make an authorization request with an `amount` less than the available balance in the account.    - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code `ITEM_LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.  `device.ip_address`, `device.user_agent` are required fields.  For [Guarantee](https://www.plaid.com/docs//transfer/guarantee/), the following fields are required : `idempotency_key`, `user.phone_number` (optional if `email_address` provided), `user.email_address` (optional if `phone_number` provided), `device.ip_address`, `device.user_agent`, and `user_present`.
     * @param {module:model/TransferAuthorizationCreateRequest} transferAuthorizationCreateRequest 
     * @param {module:api/PlaidApi~transferAuthorizationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferAuthorizationCreateResponse}
     */
    transferAuthorizationCreate(transferAuthorizationCreateRequest, callback) {
      let postBody = transferAuthorizationCreateRequest;
      // verify the required parameter 'transferAuthorizationCreateRequest' is set
      if (transferAuthorizationCreateRequest === undefined || transferAuthorizationCreateRequest === null) {
        throw new Error("Missing the required parameter 'transferAuthorizationCreateRequest' when calling transferAuthorizationCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferAuthorizationCreateResponse;
      return this.apiClient.callApi(
        '/transfer/authorization/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferCancel operation.
     * @callback module:api/PlaidApi~transferCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferCancelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a transfer
     * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
     * @param {module:model/TransferCancelRequest} transferCancelRequest 
     * @param {module:api/PlaidApi~transferCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferCancelResponse}
     */
    transferCancel(transferCancelRequest, callback) {
      let postBody = transferCancelRequest;
      // verify the required parameter 'transferCancelRequest' is set
      if (transferCancelRequest === undefined || transferCancelRequest === null) {
        throw new Error("Missing the required parameter 'transferCancelRequest' when calling transferCancel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferCancelResponse;
      return this.apiClient.callApi(
        '/transfer/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferCapabilitiesGet operation.
     * @callback module:api/PlaidApi~transferCapabilitiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferCapabilitiesGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get RTP eligibility information of a transfer
     * Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer.
     * @param {module:model/TransferCapabilitiesGetRequest} transferCapabilitiesGetRequest 
     * @param {module:api/PlaidApi~transferCapabilitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferCapabilitiesGetResponse}
     */
    transferCapabilitiesGet(transferCapabilitiesGetRequest, callback) {
      let postBody = transferCapabilitiesGetRequest;
      // verify the required parameter 'transferCapabilitiesGetRequest' is set
      if (transferCapabilitiesGetRequest === undefined || transferCapabilitiesGetRequest === null) {
        throw new Error("Missing the required parameter 'transferCapabilitiesGetRequest' when calling transferCapabilitiesGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferCapabilitiesGetResponse;
      return this.apiClient.callApi(
        '/transfer/capabilities/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferConfigurationGet operation.
     * @callback module:api/PlaidApi~transferConfigurationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferConfigurationGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transfer product configuration
     * Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
     * @param {module:model/TransferConfigurationGetRequest} transferConfigurationGetRequest 
     * @param {module:api/PlaidApi~transferConfigurationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferConfigurationGetResponse}
     */
    transferConfigurationGet(transferConfigurationGetRequest, callback) {
      let postBody = transferConfigurationGetRequest;
      // verify the required parameter 'transferConfigurationGetRequest' is set
      if (transferConfigurationGetRequest === undefined || transferConfigurationGetRequest === null) {
        throw new Error("Missing the required parameter 'transferConfigurationGetRequest' when calling transferConfigurationGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferConfigurationGetResponse;
      return this.apiClient.callApi(
        '/transfer/configuration/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferCreate operation.
     * @callback module:api/PlaidApi~transferCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a transfer
     * Use the `/transfer/create` endpoint to initiate a new transfer.
     * @param {module:model/TransferCreateRequest} transferCreateRequest 
     * @param {module:api/PlaidApi~transferCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferCreateResponse}
     */
    transferCreate(transferCreateRequest, callback) {
      let postBody = transferCreateRequest;
      // verify the required parameter 'transferCreateRequest' is set
      if (transferCreateRequest === undefined || transferCreateRequest === null) {
        throw new Error("Missing the required parameter 'transferCreateRequest' when calling transferCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferCreateResponse;
      return this.apiClient.callApi(
        '/transfer/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferEventList operation.
     * @callback module:api/PlaidApi~transferEventListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferEventListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transfer events
     * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
     * @param {module:model/TransferEventListRequest} transferEventListRequest 
     * @param {module:api/PlaidApi~transferEventListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferEventListResponse}
     */
    transferEventList(transferEventListRequest, callback) {
      let postBody = transferEventListRequest;
      // verify the required parameter 'transferEventListRequest' is set
      if (transferEventListRequest === undefined || transferEventListRequest === null) {
        throw new Error("Missing the required parameter 'transferEventListRequest' when calling transferEventList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferEventListResponse;
      return this.apiClient.callApi(
        '/transfer/event/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferEventSync operation.
     * @callback module:api/PlaidApi~transferEventSyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferEventSyncResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sync transfer events
     * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
     * @param {module:model/TransferEventSyncRequest} transferEventSyncRequest 
     * @param {module:api/PlaidApi~transferEventSyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferEventSyncResponse}
     */
    transferEventSync(transferEventSyncRequest, callback) {
      let postBody = transferEventSyncRequest;
      // verify the required parameter 'transferEventSyncRequest' is set
      if (transferEventSyncRequest === undefined || transferEventSyncRequest === null) {
        throw new Error("Missing the required parameter 'transferEventSyncRequest' when calling transferEventSync");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferEventSyncResponse;
      return this.apiClient.callApi(
        '/transfer/event/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferGet operation.
     * @callback module:api/PlaidApi~transferGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a transfer
     * The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.
     * @param {module:model/TransferGetRequest} transferGetRequest 
     * @param {module:api/PlaidApi~transferGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferGetResponse}
     */
    transferGet(transferGetRequest, callback) {
      let postBody = transferGetRequest;
      // verify the required parameter 'transferGetRequest' is set
      if (transferGetRequest === undefined || transferGetRequest === null) {
        throw new Error("Missing the required parameter 'transferGetRequest' when calling transferGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferGetResponse;
      return this.apiClient.callApi(
        '/transfer/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferIntentCreate operation.
     * @callback module:api/PlaidApi~transferIntentCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferIntentCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a transfer intent object to invoke the Transfer UI
     * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
     * @param {module:model/TransferIntentCreateRequest} transferIntentCreateRequest 
     * @param {module:api/PlaidApi~transferIntentCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferIntentCreateResponse}
     */
    transferIntentCreate(transferIntentCreateRequest, callback) {
      let postBody = transferIntentCreateRequest;
      // verify the required parameter 'transferIntentCreateRequest' is set
      if (transferIntentCreateRequest === undefined || transferIntentCreateRequest === null) {
        throw new Error("Missing the required parameter 'transferIntentCreateRequest' when calling transferIntentCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferIntentCreateResponse;
      return this.apiClient.callApi(
        '/transfer/intent/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferIntentGet operation.
     * @callback module:api/PlaidApi~transferIntentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferIntentGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve more information about a transfer intent
     * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
     * @param {module:model/TransferIntentGetRequest} transferIntentGetRequest 
     * @param {module:api/PlaidApi~transferIntentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferIntentGetResponse}
     */
    transferIntentGet(transferIntentGetRequest, callback) {
      let postBody = transferIntentGetRequest;
      // verify the required parameter 'transferIntentGetRequest' is set
      if (transferIntentGetRequest === undefined || transferIntentGetRequest === null) {
        throw new Error("Missing the required parameter 'transferIntentGetRequest' when calling transferIntentGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferIntentGetResponse;
      return this.apiClient.callApi(
        '/transfer/intent/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferList operation.
     * @callback module:api/PlaidApi~transferListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transfers
     * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers. 
     * @param {module:model/TransferListRequest} transferListRequest 
     * @param {module:api/PlaidApi~transferListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferListResponse}
     */
    transferList(transferListRequest, callback) {
      let postBody = transferListRequest;
      // verify the required parameter 'transferListRequest' is set
      if (transferListRequest === undefined || transferListRequest === null) {
        throw new Error("Missing the required parameter 'transferListRequest' when calling transferList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferListResponse;
      return this.apiClient.callApi(
        '/transfer/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferMetricsGet operation.
     * @callback module:api/PlaidApi~transferMetricsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferMetricsGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transfer product usage metrics
     * Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
     * @param {module:model/TransferMetricsGetRequest} transferMetricsGetRequest 
     * @param {module:api/PlaidApi~transferMetricsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferMetricsGetResponse}
     */
    transferMetricsGet(transferMetricsGetRequest, callback) {
      let postBody = transferMetricsGetRequest;
      // verify the required parameter 'transferMetricsGetRequest' is set
      if (transferMetricsGetRequest === undefined || transferMetricsGetRequest === null) {
        throw new Error("Missing the required parameter 'transferMetricsGetRequest' when calling transferMetricsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferMetricsGetResponse;
      return this.apiClient.callApi(
        '/transfer/metrics/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferMigrateAccount operation.
     * @callback module:api/PlaidApi~transferMigrateAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferMigrateAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Migrate account into Transfers
     * As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @param {module:model/TransferMigrateAccountRequest} transferMigrateAccountRequest 
     * @param {module:api/PlaidApi~transferMigrateAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferMigrateAccountResponse}
     */
    transferMigrateAccount(transferMigrateAccountRequest, callback) {
      let postBody = transferMigrateAccountRequest;
      // verify the required parameter 'transferMigrateAccountRequest' is set
      if (transferMigrateAccountRequest === undefined || transferMigrateAccountRequest === null) {
        throw new Error("Missing the required parameter 'transferMigrateAccountRequest' when calling transferMigrateAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferMigrateAccountResponse;
      return this.apiClient.callApi(
        '/transfer/migrate_account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferOriginatorCreate operation.
     * @callback module:api/PlaidApi~transferOriginatorCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferOriginatorCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new originator
     * Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
     * @param {module:model/TransferOriginatorCreateRequest} transferOriginatorCreateRequest 
     * @param {module:api/PlaidApi~transferOriginatorCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferOriginatorCreateResponse}
     */
    transferOriginatorCreate(transferOriginatorCreateRequest, callback) {
      let postBody = transferOriginatorCreateRequest;
      // verify the required parameter 'transferOriginatorCreateRequest' is set
      if (transferOriginatorCreateRequest === undefined || transferOriginatorCreateRequest === null) {
        throw new Error("Missing the required parameter 'transferOriginatorCreateRequest' when calling transferOriginatorCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferOriginatorCreateResponse;
      return this.apiClient.callApi(
        '/transfer/originator/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferOriginatorGet operation.
     * @callback module:api/PlaidApi~transferOriginatorGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferOriginatorGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get status of an originator's onboarding
     * The `/transfer/originator/get` endpoint gets status updates for an originator's onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
     * @param {module:model/TransferOriginatorGetRequest} transferOriginatorGetRequest 
     * @param {module:api/PlaidApi~transferOriginatorGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferOriginatorGetResponse}
     */
    transferOriginatorGet(transferOriginatorGetRequest, callback) {
      let postBody = transferOriginatorGetRequest;
      // verify the required parameter 'transferOriginatorGetRequest' is set
      if (transferOriginatorGetRequest === undefined || transferOriginatorGetRequest === null) {
        throw new Error("Missing the required parameter 'transferOriginatorGetRequest' when calling transferOriginatorGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json', 'examples'];
      let accepts = ['application/json'];
      let returnType = TransferOriginatorGetResponse;
      return this.apiClient.callApi(
        '/transfer/originator/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferOriginatorList operation.
     * @callback module:api/PlaidApi~transferOriginatorListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferOriginatorListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get status of all originators' onboarding
     * The `/transfer/originator/list` endpoint gets status updates for all of your originators' onboarding. This information is also available via the Plaid dashboard.
     * @param {module:model/TransferOriginatorListRequest} transferOriginatorListRequest 
     * @param {module:api/PlaidApi~transferOriginatorListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferOriginatorListResponse}
     */
    transferOriginatorList(transferOriginatorListRequest, callback) {
      let postBody = transferOriginatorListRequest;
      // verify the required parameter 'transferOriginatorListRequest' is set
      if (transferOriginatorListRequest === undefined || transferOriginatorListRequest === null) {
        throw new Error("Missing the required parameter 'transferOriginatorListRequest' when calling transferOriginatorList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferOriginatorListResponse;
      return this.apiClient.callApi(
        '/transfer/originator/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferQuestionnaireCreate operation.
     * @callback module:api/PlaidApi~transferQuestionnaireCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferQuestionnaireCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a Plaid-hosted onboarding UI URL.
     * The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
     * @param {module:model/TransferQuestionnaireCreateRequest} transferQuestionnaireCreateRequest 
     * @param {module:api/PlaidApi~transferQuestionnaireCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferQuestionnaireCreateResponse}
     */
    transferQuestionnaireCreate(transferQuestionnaireCreateRequest, callback) {
      let postBody = transferQuestionnaireCreateRequest;
      // verify the required parameter 'transferQuestionnaireCreateRequest' is set
      if (transferQuestionnaireCreateRequest === undefined || transferQuestionnaireCreateRequest === null) {
        throw new Error("Missing the required parameter 'transferQuestionnaireCreateRequest' when calling transferQuestionnaireCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferQuestionnaireCreateResponse;
      return this.apiClient.callApi(
        '/transfer/questionnaire/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferRecurringCancel operation.
     * @callback module:api/PlaidApi~transferRecurringCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferRecurringCancelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a recurring transfer.
     * Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn't been submitted to bank will be cancelled.
     * @param {module:model/TransferRecurringCancelRequest} transferRecurringCancelRequest 
     * @param {module:api/PlaidApi~transferRecurringCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferRecurringCancelResponse}
     */
    transferRecurringCancel(transferRecurringCancelRequest, callback) {
      let postBody = transferRecurringCancelRequest;
      // verify the required parameter 'transferRecurringCancelRequest' is set
      if (transferRecurringCancelRequest === undefined || transferRecurringCancelRequest === null) {
        throw new Error("Missing the required parameter 'transferRecurringCancelRequest' when calling transferRecurringCancel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferRecurringCancelResponse;
      return this.apiClient.callApi(
        '/transfer/recurring/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferRecurringCreate operation.
     * @callback module:api/PlaidApi~transferRecurringCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferRecurringCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a recurring transfer
     * Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer.
     * @param {module:model/TransferRecurringCreateRequest} transferRecurringCreateRequest 
     * @param {module:api/PlaidApi~transferRecurringCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferRecurringCreateResponse}
     */
    transferRecurringCreate(transferRecurringCreateRequest, callback) {
      let postBody = transferRecurringCreateRequest;
      // verify the required parameter 'transferRecurringCreateRequest' is set
      if (transferRecurringCreateRequest === undefined || transferRecurringCreateRequest === null) {
        throw new Error("Missing the required parameter 'transferRecurringCreateRequest' when calling transferRecurringCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferRecurringCreateResponse;
      return this.apiClient.callApi(
        '/transfer/recurring/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferRecurringGet operation.
     * @callback module:api/PlaidApi~transferRecurringGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferRecurringGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a recurring transfer
     * The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
     * @param {module:model/TransferRecurringGetRequest} transferRecurringGetRequest 
     * @param {module:api/PlaidApi~transferRecurringGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferRecurringGetResponse}
     */
    transferRecurringGet(transferRecurringGetRequest, callback) {
      let postBody = transferRecurringGetRequest;
      // verify the required parameter 'transferRecurringGetRequest' is set
      if (transferRecurringGetRequest === undefined || transferRecurringGetRequest === null) {
        throw new Error("Missing the required parameter 'transferRecurringGetRequest' when calling transferRecurringGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferRecurringGetResponse;
      return this.apiClient.callApi(
        '/transfer/recurring/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferRecurringList operation.
     * @callback module:api/PlaidApi~transferRecurringListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferRecurringListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List recurring transfers
     * Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers. 
     * @param {module:model/TransferRecurringListRequest} transferRecurringListRequest 
     * @param {module:api/PlaidApi~transferRecurringListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferRecurringListResponse}
     */
    transferRecurringList(transferRecurringListRequest, callback) {
      let postBody = transferRecurringListRequest;
      // verify the required parameter 'transferRecurringListRequest' is set
      if (transferRecurringListRequest === undefined || transferRecurringListRequest === null) {
        throw new Error("Missing the required parameter 'transferRecurringListRequest' when calling transferRecurringList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferRecurringListResponse;
      return this.apiClient.callApi(
        '/transfer/recurring/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferRefundCancel operation.
     * @callback module:api/PlaidApi~transferRefundCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferRefundCancelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a refund
     * Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
     * @param {module:model/TransferRefundCancelRequest} transferRefundCancelRequest 
     * @param {module:api/PlaidApi~transferRefundCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferRefundCancelResponse}
     */
    transferRefundCancel(transferRefundCancelRequest, callback) {
      let postBody = transferRefundCancelRequest;
      // verify the required parameter 'transferRefundCancelRequest' is set
      if (transferRefundCancelRequest === undefined || transferRefundCancelRequest === null) {
        throw new Error("Missing the required parameter 'transferRefundCancelRequest' when calling transferRefundCancel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferRefundCancelResponse;
      return this.apiClient.callApi(
        '/transfer/refund/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferRefundCreate operation.
     * @callback module:api/PlaidApi~transferRefundCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferRefundCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a refund
     * Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 3 business days following the transfer's settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
     * @param {module:model/TransferRefundCreateRequest} transferRefundCreateRequest 
     * @param {module:api/PlaidApi~transferRefundCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferRefundCreateResponse}
     */
    transferRefundCreate(transferRefundCreateRequest, callback) {
      let postBody = transferRefundCreateRequest;
      // verify the required parameter 'transferRefundCreateRequest' is set
      if (transferRefundCreateRequest === undefined || transferRefundCreateRequest === null) {
        throw new Error("Missing the required parameter 'transferRefundCreateRequest' when calling transferRefundCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferRefundCreateResponse;
      return this.apiClient.callApi(
        '/transfer/refund/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferRefundGet operation.
     * @callback module:api/PlaidApi~transferRefundGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferRefundGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a refund
     * The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
     * @param {module:model/TransferRefundGetRequest} transferRefundGetRequest 
     * @param {module:api/PlaidApi~transferRefundGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferRefundGetResponse}
     */
    transferRefundGet(transferRefundGetRequest, callback) {
      let postBody = transferRefundGetRequest;
      // verify the required parameter 'transferRefundGetRequest' is set
      if (transferRefundGetRequest === undefined || transferRefundGetRequest === null) {
        throw new Error("Missing the required parameter 'transferRefundGetRequest' when calling transferRefundGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferRefundGetResponse;
      return this.apiClient.callApi(
        '/transfer/refund/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferRepaymentList operation.
     * @callback module:api/PlaidApi~transferRepaymentListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferRepaymentListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists historical repayments
     * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
     * @param {module:model/TransferRepaymentListRequest} transferRepaymentListRequest 
     * @param {module:api/PlaidApi~transferRepaymentListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferRepaymentListResponse}
     */
    transferRepaymentList(transferRepaymentListRequest, callback) {
      let postBody = transferRepaymentListRequest;
      // verify the required parameter 'transferRepaymentListRequest' is set
      if (transferRepaymentListRequest === undefined || transferRepaymentListRequest === null) {
        throw new Error("Missing the required parameter 'transferRepaymentListRequest' when calling transferRepaymentList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferRepaymentListResponse;
      return this.apiClient.callApi(
        '/transfer/repayment/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferRepaymentReturnList operation.
     * @callback module:api/PlaidApi~transferRepaymentReturnListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferRepaymentReturnListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the returns included in a repayment
     * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
     * @param {module:model/TransferRepaymentReturnListRequest} transferRepaymentReturnListRequest 
     * @param {module:api/PlaidApi~transferRepaymentReturnListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferRepaymentReturnListResponse}
     */
    transferRepaymentReturnList(transferRepaymentReturnListRequest, callback) {
      let postBody = transferRepaymentReturnListRequest;
      // verify the required parameter 'transferRepaymentReturnListRequest' is set
      if (transferRepaymentReturnListRequest === undefined || transferRepaymentReturnListRequest === null) {
        throw new Error("Missing the required parameter 'transferRepaymentReturnListRequest' when calling transferRepaymentReturnList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferRepaymentReturnListResponse;
      return this.apiClient.callApi(
        '/transfer/repayment/return/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferSweepGet operation.
     * @callback module:api/PlaidApi~transferSweepGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferSweepGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a sweep
     * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
     * @param {module:model/TransferSweepGetRequest} transferSweepGetRequest 
     * @param {module:api/PlaidApi~transferSweepGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferSweepGetResponse}
     */
    transferSweepGet(transferSweepGetRequest, callback) {
      let postBody = transferSweepGetRequest;
      // verify the required parameter 'transferSweepGetRequest' is set
      if (transferSweepGetRequest === undefined || transferSweepGetRequest === null) {
        throw new Error("Missing the required parameter 'transferSweepGetRequest' when calling transferSweepGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferSweepGetResponse;
      return this.apiClient.callApi(
        '/transfer/sweep/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferSweepList operation.
     * @callback module:api/PlaidApi~transferSweepListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferSweepListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List sweeps
     * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
     * @param {module:model/TransferSweepListRequest} transferSweepListRequest 
     * @param {module:api/PlaidApi~transferSweepListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferSweepListResponse}
     */
    transferSweepList(transferSweepListRequest, callback) {
      let postBody = transferSweepListRequest;
      // verify the required parameter 'transferSweepListRequest' is set
      if (transferSweepListRequest === undefined || transferSweepListRequest === null) {
        throw new Error("Missing the required parameter 'transferSweepListRequest' when calling transferSweepList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferSweepListResponse;
      return this.apiClient.callApi(
        '/transfer/sweep/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userCreate operation.
     * @callback module:api/PlaidApi~userCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user
     * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.  If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.  Ensure that you store the `user_token` along with your user's identifier in your database, as it is not possible to retrieve a previously created `user_token`.
     * @param {module:model/UserCreateRequest} userCreateRequest 
     * @param {module:api/PlaidApi~userCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserCreateResponse}
     */
    userCreate(userCreateRequest, callback) {
      let postBody = userCreateRequest;
      // verify the required parameter 'userCreateRequest' is set
      if (userCreateRequest === undefined || userCreateRequest === null) {
        throw new Error("Missing the required parameter 'userCreateRequest' when calling userCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserCreateResponse;
      return this.apiClient.callApi(
        '/user/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletCreate operation.
     * @callback module:api/PlaidApi~walletCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an e-wallet
     * Create an e-wallet. The response is the newly created e-wallet object.
     * @param {module:model/WalletCreateRequest} walletCreateRequest 
     * @param {module:api/PlaidApi~walletCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletCreateResponse}
     */
    walletCreate(walletCreateRequest, callback) {
      let postBody = walletCreateRequest;
      // verify the required parameter 'walletCreateRequest' is set
      if (walletCreateRequest === undefined || walletCreateRequest === null) {
        throw new Error("Missing the required parameter 'walletCreateRequest' when calling walletCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WalletCreateResponse;
      return this.apiClient.callApi(
        '/wallet/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletGet operation.
     * @callback module:api/PlaidApi~walletGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an e-wallet
     * Fetch an e-wallet. The response includes the current balance.
     * @param {module:model/WalletGetRequest} walletGetRequest 
     * @param {module:api/PlaidApi~walletGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletGetResponse}
     */
    walletGet(walletGetRequest, callback) {
      let postBody = walletGetRequest;
      // verify the required parameter 'walletGetRequest' is set
      if (walletGetRequest === undefined || walletGetRequest === null) {
        throw new Error("Missing the required parameter 'walletGetRequest' when calling walletGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WalletGetResponse;
      return this.apiClient.callApi(
        '/wallet/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletList operation.
     * @callback module:api/PlaidApi~walletListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of e-wallets
     * This endpoint lists all e-wallets in descending order of creation.
     * @param {module:model/WalletListRequest} walletListRequest 
     * @param {module:api/PlaidApi~walletListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletListResponse}
     */
    walletList(walletListRequest, callback) {
      let postBody = walletListRequest;
      // verify the required parameter 'walletListRequest' is set
      if (walletListRequest === undefined || walletListRequest === null) {
        throw new Error("Missing the required parameter 'walletListRequest' when calling walletList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WalletListResponse;
      return this.apiClient.callApi(
        '/wallet/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletTransactionExecute operation.
     * @callback module:api/PlaidApi~walletTransactionExecuteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletTransactionExecuteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a transaction using an e-wallet
     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
     * @param {module:model/WalletTransactionExecuteRequest} walletTransactionExecuteRequest 
     * @param {module:api/PlaidApi~walletTransactionExecuteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletTransactionExecuteResponse}
     */
    walletTransactionExecute(walletTransactionExecuteRequest, callback) {
      let postBody = walletTransactionExecuteRequest;
      // verify the required parameter 'walletTransactionExecuteRequest' is set
      if (walletTransactionExecuteRequest === undefined || walletTransactionExecuteRequest === null) {
        throw new Error("Missing the required parameter 'walletTransactionExecuteRequest' when calling walletTransactionExecute");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WalletTransactionExecuteResponse;
      return this.apiClient.callApi(
        '/wallet/transaction/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletTransactionGet operation.
     * @callback module:api/PlaidApi~walletTransactionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletTransactionGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an e-wallet transaction
     * Fetch a specific e-wallet transaction
     * @param {module:model/WalletTransactionGetRequest} walletTransactionGetRequest 
     * @param {module:api/PlaidApi~walletTransactionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletTransactionGetResponse}
     */
    walletTransactionGet(walletTransactionGetRequest, callback) {
      let postBody = walletTransactionGetRequest;
      // verify the required parameter 'walletTransactionGetRequest' is set
      if (walletTransactionGetRequest === undefined || walletTransactionGetRequest === null) {
        throw new Error("Missing the required parameter 'walletTransactionGetRequest' when calling walletTransactionGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WalletTransactionGetResponse;
      return this.apiClient.callApi(
        '/wallet/transaction/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the walletTransactionList operation.
     * @callback module:api/PlaidApi~walletTransactionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WalletTransactionListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List e-wallet transactions
     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
     * @param {module:model/WalletTransactionListRequest} walletTransactionListRequest 
     * @param {module:api/PlaidApi~walletTransactionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WalletTransactionListResponse}
     */
    walletTransactionList(walletTransactionListRequest, callback) {
      let postBody = walletTransactionListRequest;
      // verify the required parameter 'walletTransactionListRequest' is set
      if (walletTransactionListRequest === undefined || walletTransactionListRequest === null) {
        throw new Error("Missing the required parameter 'walletTransactionListRequest' when calling walletTransactionList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WalletTransactionListResponse;
      return this.apiClient.callApi(
        '/wallet/transaction/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningEntityCreate operation.
     * @callback module:api/PlaidApi~watchlistScreeningEntityCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningEntityCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a watchlist screening for an entity
     * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     * @param {module:model/WatchlistScreeningEntityCreateRequest} watchlistScreeningEntityCreateRequest 
     * @param {module:api/PlaidApi~watchlistScreeningEntityCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningEntityCreateResponse}
     */
    watchlistScreeningEntityCreate(watchlistScreeningEntityCreateRequest, callback) {
      let postBody = watchlistScreeningEntityCreateRequest;
      // verify the required parameter 'watchlistScreeningEntityCreateRequest' is set
      if (watchlistScreeningEntityCreateRequest === undefined || watchlistScreeningEntityCreateRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningEntityCreateRequest' when calling watchlistScreeningEntityCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningEntityCreateResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/entity/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningEntityGet operation.
     * @callback module:api/PlaidApi~watchlistScreeningEntityGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningEntityGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an entity screening
     * Retrieve an entity watchlist screening.
     * @param {module:model/WatchlistScreeningEntityGetRequest} watchlistScreeningEntityGetRequest 
     * @param {module:api/PlaidApi~watchlistScreeningEntityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningEntityGetResponse}
     */
    watchlistScreeningEntityGet(watchlistScreeningEntityGetRequest, callback) {
      let postBody = watchlistScreeningEntityGetRequest;
      // verify the required parameter 'watchlistScreeningEntityGetRequest' is set
      if (watchlistScreeningEntityGetRequest === undefined || watchlistScreeningEntityGetRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningEntityGetRequest' when calling watchlistScreeningEntityGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningEntityGetResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/entity/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningEntityHistoryList operation.
     * @callback module:api/PlaidApi~watchlistScreeningEntityHistoryListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningEntityHistoryListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List history for entity watchlist screenings
     * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     * @param {module:model/WatchlistScreeningEntityHistoryListRequest} watchlistScreeningEntityHistoryListRequest 
     * @param {module:api/PlaidApi~watchlistScreeningEntityHistoryListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningEntityHistoryListResponse}
     */
    watchlistScreeningEntityHistoryList(watchlistScreeningEntityHistoryListRequest, callback) {
      let postBody = watchlistScreeningEntityHistoryListRequest;
      // verify the required parameter 'watchlistScreeningEntityHistoryListRequest' is set
      if (watchlistScreeningEntityHistoryListRequest === undefined || watchlistScreeningEntityHistoryListRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningEntityHistoryListRequest' when calling watchlistScreeningEntityHistoryList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningEntityHistoryListResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/entity/history/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningEntityHitList operation.
     * @callback module:api/PlaidApi~watchlistScreeningEntityHitListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningEntityHitListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List hits for entity watchlist screenings
     * List all hits for the entity watchlist screening.
     * @param {module:model/WatchlistScreeningEntityHitListRequest} watchlistScreeningEntityHitListRequest 
     * @param {module:api/PlaidApi~watchlistScreeningEntityHitListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningEntityHitListResponse}
     */
    watchlistScreeningEntityHitList(watchlistScreeningEntityHitListRequest, callback) {
      let postBody = watchlistScreeningEntityHitListRequest;
      // verify the required parameter 'watchlistScreeningEntityHitListRequest' is set
      if (watchlistScreeningEntityHitListRequest === undefined || watchlistScreeningEntityHitListRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningEntityHitListRequest' when calling watchlistScreeningEntityHitList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningEntityHitListResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/entity/hit/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningEntityList operation.
     * @callback module:api/PlaidApi~watchlistScreeningEntityListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningEntityListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List entity watchlist screenings
     * List all entity screenings.
     * @param {module:model/WatchlistScreeningEntityListRequest} watchlistScreeningEntityListRequest 
     * @param {module:api/PlaidApi~watchlistScreeningEntityListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningEntityListResponse}
     */
    watchlistScreeningEntityList(watchlistScreeningEntityListRequest, callback) {
      let postBody = watchlistScreeningEntityListRequest;
      // verify the required parameter 'watchlistScreeningEntityListRequest' is set
      if (watchlistScreeningEntityListRequest === undefined || watchlistScreeningEntityListRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningEntityListRequest' when calling watchlistScreeningEntityList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningEntityListResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/entity/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningEntityProgramGet operation.
     * @callback module:api/PlaidApi~watchlistScreeningEntityProgramGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningEntityProgramGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get entity watchlist screening program
     * Get an entity watchlist screening program
     * @param {module:model/WatchlistScreeningEntityProgramGetRequest} watchlistScreeningEntityProgramGetRequest 
     * @param {module:api/PlaidApi~watchlistScreeningEntityProgramGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningEntityProgramGetResponse}
     */
    watchlistScreeningEntityProgramGet(watchlistScreeningEntityProgramGetRequest, callback) {
      let postBody = watchlistScreeningEntityProgramGetRequest;
      // verify the required parameter 'watchlistScreeningEntityProgramGetRequest' is set
      if (watchlistScreeningEntityProgramGetRequest === undefined || watchlistScreeningEntityProgramGetRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningEntityProgramGetRequest' when calling watchlistScreeningEntityProgramGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningEntityProgramGetResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/entity/program/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningEntityProgramList operation.
     * @callback module:api/PlaidApi~watchlistScreeningEntityProgramListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningEntityProgramListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List entity watchlist screening programs
     * List all entity watchlist screening programs
     * @param {module:model/WatchlistScreeningEntityProgramListRequest} watchlistScreeningEntityProgramListRequest 
     * @param {module:api/PlaidApi~watchlistScreeningEntityProgramListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningEntityProgramListResponse}
     */
    watchlistScreeningEntityProgramList(watchlistScreeningEntityProgramListRequest, callback) {
      let postBody = watchlistScreeningEntityProgramListRequest;
      // verify the required parameter 'watchlistScreeningEntityProgramListRequest' is set
      if (watchlistScreeningEntityProgramListRequest === undefined || watchlistScreeningEntityProgramListRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningEntityProgramListRequest' when calling watchlistScreeningEntityProgramList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningEntityProgramListResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/entity/program/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningEntityReviewCreate operation.
     * @callback module:api/PlaidApi~watchlistScreeningEntityReviewCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningEntityReviewCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a review for an entity watchlist screening
     * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @param {module:model/WatchlistScreeningEntityReviewCreateRequest} watchlistScreeningEntityReviewCreateRequest 
     * @param {module:api/PlaidApi~watchlistScreeningEntityReviewCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningEntityReviewCreateResponse}
     */
    watchlistScreeningEntityReviewCreate(watchlistScreeningEntityReviewCreateRequest, callback) {
      let postBody = watchlistScreeningEntityReviewCreateRequest;
      // verify the required parameter 'watchlistScreeningEntityReviewCreateRequest' is set
      if (watchlistScreeningEntityReviewCreateRequest === undefined || watchlistScreeningEntityReviewCreateRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningEntityReviewCreateRequest' when calling watchlistScreeningEntityReviewCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningEntityReviewCreateResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/entity/review/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningEntityReviewList operation.
     * @callback module:api/PlaidApi~watchlistScreeningEntityReviewListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningEntityReviewListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reviews for entity watchlist screenings
     * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @param {module:model/WatchlistScreeningEntityReviewListRequest} watchlistScreeningEntityReviewListRequest 
     * @param {module:api/PlaidApi~watchlistScreeningEntityReviewListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningEntityReviewListResponse}
     */
    watchlistScreeningEntityReviewList(watchlistScreeningEntityReviewListRequest, callback) {
      let postBody = watchlistScreeningEntityReviewListRequest;
      // verify the required parameter 'watchlistScreeningEntityReviewListRequest' is set
      if (watchlistScreeningEntityReviewListRequest === undefined || watchlistScreeningEntityReviewListRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningEntityReviewListRequest' when calling watchlistScreeningEntityReviewList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningEntityReviewListResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/entity/review/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningEntityUpdate operation.
     * @callback module:api/PlaidApi~watchlistScreeningEntityUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningEntityUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an entity screening
     * Update an entity watchlist screening.
     * @param {module:model/WatchlistScreeningEntityUpdateRequest} watchlistScreeningEntityUpdateRequest The entity screening was successfully updated.
     * @param {module:api/PlaidApi~watchlistScreeningEntityUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningEntityUpdateResponse}
     */
    watchlistScreeningEntityUpdate(watchlistScreeningEntityUpdateRequest, callback) {
      let postBody = watchlistScreeningEntityUpdateRequest;
      // verify the required parameter 'watchlistScreeningEntityUpdateRequest' is set
      if (watchlistScreeningEntityUpdateRequest === undefined || watchlistScreeningEntityUpdateRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningEntityUpdateRequest' when calling watchlistScreeningEntityUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningEntityUpdateResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/entity/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningIndividualCreate operation.
     * @callback module:api/PlaidApi~watchlistScreeningIndividualCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningIndividualCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a watchlist screening for a person
     * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     * @param {module:model/WatchlistScreeningIndividualCreateRequest} watchlistScreeningIndividualCreateRequest 
     * @param {module:api/PlaidApi~watchlistScreeningIndividualCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningIndividualCreateResponse}
     */
    watchlistScreeningIndividualCreate(watchlistScreeningIndividualCreateRequest, callback) {
      let postBody = watchlistScreeningIndividualCreateRequest;
      // verify the required parameter 'watchlistScreeningIndividualCreateRequest' is set
      if (watchlistScreeningIndividualCreateRequest === undefined || watchlistScreeningIndividualCreateRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningIndividualCreateRequest' when calling watchlistScreeningIndividualCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningIndividualCreateResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/individual/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningIndividualGet operation.
     * @callback module:api/PlaidApi~watchlistScreeningIndividualGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningIndividualGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an individual watchlist screening
     * Retrieve a previously created individual watchlist screening
     * @param {module:model/WatchlistScreeningIndividualGetRequest} watchlistScreeningIndividualGetRequest 
     * @param {module:api/PlaidApi~watchlistScreeningIndividualGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningIndividualGetResponse}
     */
    watchlistScreeningIndividualGet(watchlistScreeningIndividualGetRequest, callback) {
      let postBody = watchlistScreeningIndividualGetRequest;
      // verify the required parameter 'watchlistScreeningIndividualGetRequest' is set
      if (watchlistScreeningIndividualGetRequest === undefined || watchlistScreeningIndividualGetRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningIndividualGetRequest' when calling watchlistScreeningIndividualGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningIndividualGetResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/individual/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningIndividualHistoryList operation.
     * @callback module:api/PlaidApi~watchlistScreeningIndividualHistoryListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningIndividualHistoryListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List history for individual watchlist screenings
     * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     * @param {module:model/WatchlistScreeningIndividualHistoryListRequest} watchlistScreeningIndividualHistoryListRequest 
     * @param {module:api/PlaidApi~watchlistScreeningIndividualHistoryListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningIndividualHistoryListResponse}
     */
    watchlistScreeningIndividualHistoryList(watchlistScreeningIndividualHistoryListRequest, callback) {
      let postBody = watchlistScreeningIndividualHistoryListRequest;
      // verify the required parameter 'watchlistScreeningIndividualHistoryListRequest' is set
      if (watchlistScreeningIndividualHistoryListRequest === undefined || watchlistScreeningIndividualHistoryListRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningIndividualHistoryListRequest' when calling watchlistScreeningIndividualHistoryList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningIndividualHistoryListResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/individual/history/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningIndividualHitList operation.
     * @callback module:api/PlaidApi~watchlistScreeningIndividualHitListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningIndividualHitListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List hits for individual watchlist screening
     * List all hits found by Plaid for a particular individual watchlist screening.
     * @param {module:model/WatchlistScreeningIndividualHitListRequest} watchlistScreeningIndividualHitListRequest 
     * @param {module:api/PlaidApi~watchlistScreeningIndividualHitListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningIndividualHitListResponse}
     */
    watchlistScreeningIndividualHitList(watchlistScreeningIndividualHitListRequest, callback) {
      let postBody = watchlistScreeningIndividualHitListRequest;
      // verify the required parameter 'watchlistScreeningIndividualHitListRequest' is set
      if (watchlistScreeningIndividualHitListRequest === undefined || watchlistScreeningIndividualHitListRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningIndividualHitListRequest' when calling watchlistScreeningIndividualHitList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningIndividualHitListResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/individual/hit/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningIndividualList operation.
     * @callback module:api/PlaidApi~watchlistScreeningIndividualListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningIndividualListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Individual Watchlist Screenings
     * List previously created watchlist screenings for individuals
     * @param {module:model/WatchlistScreeningIndividualListRequest} watchlistScreeningIndividualListRequest 
     * @param {module:api/PlaidApi~watchlistScreeningIndividualListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningIndividualListResponse}
     */
    watchlistScreeningIndividualList(watchlistScreeningIndividualListRequest, callback) {
      let postBody = watchlistScreeningIndividualListRequest;
      // verify the required parameter 'watchlistScreeningIndividualListRequest' is set
      if (watchlistScreeningIndividualListRequest === undefined || watchlistScreeningIndividualListRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningIndividualListRequest' when calling watchlistScreeningIndividualList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningIndividualListResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/individual/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningIndividualProgramGet operation.
     * @callback module:api/PlaidApi~watchlistScreeningIndividualProgramGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningIndividualProgramGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get individual watchlist screening program
     * Get an individual watchlist screening program
     * @param {module:model/WatchlistScreeningIndividualProgramGetRequest} watchlistScreeningIndividualProgramGetRequest 
     * @param {module:api/PlaidApi~watchlistScreeningIndividualProgramGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningIndividualProgramGetResponse}
     */
    watchlistScreeningIndividualProgramGet(watchlistScreeningIndividualProgramGetRequest, callback) {
      let postBody = watchlistScreeningIndividualProgramGetRequest;
      // verify the required parameter 'watchlistScreeningIndividualProgramGetRequest' is set
      if (watchlistScreeningIndividualProgramGetRequest === undefined || watchlistScreeningIndividualProgramGetRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningIndividualProgramGetRequest' when calling watchlistScreeningIndividualProgramGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningIndividualProgramGetResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/individual/program/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningIndividualProgramList operation.
     * @callback module:api/PlaidApi~watchlistScreeningIndividualProgramListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningIndividualProgramListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List individual watchlist screening programs
     * List all individual watchlist screening programs
     * @param {module:model/WatchlistScreeningIndividualProgramListRequest} watchlistScreeningIndividualProgramListRequest 
     * @param {module:api/PlaidApi~watchlistScreeningIndividualProgramListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningIndividualProgramListResponse}
     */
    watchlistScreeningIndividualProgramList(watchlistScreeningIndividualProgramListRequest, callback) {
      let postBody = watchlistScreeningIndividualProgramListRequest;
      // verify the required parameter 'watchlistScreeningIndividualProgramListRequest' is set
      if (watchlistScreeningIndividualProgramListRequest === undefined || watchlistScreeningIndividualProgramListRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningIndividualProgramListRequest' when calling watchlistScreeningIndividualProgramList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningIndividualProgramListResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/individual/program/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningIndividualReviewCreate operation.
     * @callback module:api/PlaidApi~watchlistScreeningIndividualReviewCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningIndividualReviewCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a review for an individual watchlist screening
     * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @param {module:model/WatchlistScreeningIndividualReviewCreateRequest} watchlistScreeningIndividualReviewCreateRequest 
     * @param {module:api/PlaidApi~watchlistScreeningIndividualReviewCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningIndividualReviewCreateResponse}
     */
    watchlistScreeningIndividualReviewCreate(watchlistScreeningIndividualReviewCreateRequest, callback) {
      let postBody = watchlistScreeningIndividualReviewCreateRequest;
      // verify the required parameter 'watchlistScreeningIndividualReviewCreateRequest' is set
      if (watchlistScreeningIndividualReviewCreateRequest === undefined || watchlistScreeningIndividualReviewCreateRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningIndividualReviewCreateRequest' when calling watchlistScreeningIndividualReviewCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningIndividualReviewCreateResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/individual/review/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningIndividualReviewList operation.
     * @callback module:api/PlaidApi~watchlistScreeningIndividualReviewListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningIndividualReviewListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reviews for individual watchlist screenings
     * List all reviews for the individual watchlist screening.
     * @param {module:model/WatchlistScreeningIndividualReviewListRequest} watchlistScreeningIndividualReviewListRequest 
     * @param {module:api/PlaidApi~watchlistScreeningIndividualReviewListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningIndividualReviewListResponse}
     */
    watchlistScreeningIndividualReviewList(watchlistScreeningIndividualReviewListRequest, callback) {
      let postBody = watchlistScreeningIndividualReviewListRequest;
      // verify the required parameter 'watchlistScreeningIndividualReviewListRequest' is set
      if (watchlistScreeningIndividualReviewListRequest === undefined || watchlistScreeningIndividualReviewListRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningIndividualReviewListRequest' when calling watchlistScreeningIndividualReviewList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningIndividualReviewListResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/individual/review/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watchlistScreeningIndividualUpdate operation.
     * @callback module:api/PlaidApi~watchlistScreeningIndividualUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchlistScreeningIndividualUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update individual watchlist screening
     * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
     * @param {module:model/WatchlistScreeningIndividualUpdateRequest} watchlistScreeningIndividualUpdateRequest 
     * @param {module:api/PlaidApi~watchlistScreeningIndividualUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchlistScreeningIndividualUpdateResponse}
     */
    watchlistScreeningIndividualUpdate(watchlistScreeningIndividualUpdateRequest, callback) {
      let postBody = watchlistScreeningIndividualUpdateRequest;
      // verify the required parameter 'watchlistScreeningIndividualUpdateRequest' is set
      if (watchlistScreeningIndividualUpdateRequest === undefined || watchlistScreeningIndividualUpdateRequest === null) {
        throw new Error("Missing the required parameter 'watchlistScreeningIndividualUpdateRequest' when calling watchlistScreeningIndividualUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchlistScreeningIndividualUpdateResponse;
      return this.apiClient.callApi(
        '/watchlist_screening/individual/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookVerificationKeyGet operation.
     * @callback module:api/PlaidApi~webhookVerificationKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookVerificationKeyGetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get webhook verification key
     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
     * @param {module:model/WebhookVerificationKeyGetRequest} webhookVerificationKeyGetRequest 
     * @param {module:api/PlaidApi~webhookVerificationKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookVerificationKeyGetResponse}
     */
    webhookVerificationKeyGet(webhookVerificationKeyGetRequest, callback) {
      let postBody = webhookVerificationKeyGetRequest;
      // verify the required parameter 'webhookVerificationKeyGetRequest' is set
      if (webhookVerificationKeyGetRequest === undefined || webhookVerificationKeyGetRequest === null) {
        throw new Error("Missing the required parameter 'webhookVerificationKeyGetRequest' when calling webhookVerificationKeyGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'plaidVersion', 'secret'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebhookVerificationKeyGetResponse;
      return this.apiClient.callApi(
        '/webhook_verification_key/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
