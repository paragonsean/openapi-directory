/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountsBalanceGetRequest;
import org.openapitools.client.model.AccountsGetRequest;
import org.openapitools.client.model.AccountsGetResponse;
import org.openapitools.client.model.ApplicationGetRequest;
import org.openapitools.client.model.ApplicationGetResponse;
import org.openapitools.client.model.AssetReportAuditCopyCreateRequest;
import org.openapitools.client.model.AssetReportAuditCopyCreateResponse;
import org.openapitools.client.model.AssetReportAuditCopyGetRequest;
import org.openapitools.client.model.AssetReportAuditCopyRemoveRequest;
import org.openapitools.client.model.AssetReportAuditCopyRemoveResponse;
import org.openapitools.client.model.AssetReportCreateRequest;
import org.openapitools.client.model.AssetReportCreateResponse;
import org.openapitools.client.model.AssetReportFilterRequest;
import org.openapitools.client.model.AssetReportFilterResponse;
import org.openapitools.client.model.AssetReportFreddieGetRequest;
import org.openapitools.client.model.AssetReportFreddieGetResponse;
import org.openapitools.client.model.AssetReportGetRequest;
import org.openapitools.client.model.AssetReportGetResponse;
import org.openapitools.client.model.AssetReportPDFGetRequest;
import org.openapitools.client.model.AssetReportRefreshRequest;
import org.openapitools.client.model.AssetReportRefreshResponse;
import org.openapitools.client.model.AssetReportRemoveRequest;
import org.openapitools.client.model.AssetReportRemoveResponse;
import org.openapitools.client.model.AuthGetRequest;
import org.openapitools.client.model.AuthGetResponse;
import org.openapitools.client.model.BankTransferBalanceGetRequest;
import org.openapitools.client.model.BankTransferBalanceGetResponse;
import org.openapitools.client.model.BankTransferCancelRequest;
import org.openapitools.client.model.BankTransferCancelResponse;
import org.openapitools.client.model.BankTransferCreateRequest;
import org.openapitools.client.model.BankTransferCreateResponse;
import org.openapitools.client.model.BankTransferEventListRequest;
import org.openapitools.client.model.BankTransferEventListResponse;
import org.openapitools.client.model.BankTransferEventSyncRequest;
import org.openapitools.client.model.BankTransferEventSyncResponse;
import org.openapitools.client.model.BankTransferGetRequest;
import org.openapitools.client.model.BankTransferGetResponse;
import org.openapitools.client.model.BankTransferListRequest;
import org.openapitools.client.model.BankTransferListResponse;
import org.openapitools.client.model.BankTransferMigrateAccountRequest;
import org.openapitools.client.model.BankTransferMigrateAccountResponse;
import org.openapitools.client.model.BankTransferSweepGetRequest;
import org.openapitools.client.model.BankTransferSweepGetResponse;
import org.openapitools.client.model.BankTransferSweepListRequest;
import org.openapitools.client.model.BankTransferSweepListResponse;
import org.openapitools.client.model.CategoriesGetResponse;
import org.openapitools.client.model.CreditAuditCopyTokenCreateRequest;
import org.openapitools.client.model.CreditAuditCopyTokenCreateResponse;
import org.openapitools.client.model.CreditAuditCopyTokenRemoveRequest;
import org.openapitools.client.model.CreditAuditCopyTokenRemoveResponse;
import org.openapitools.client.model.CreditAuditCopyTokenUpdateRequest;
import org.openapitools.client.model.CreditAuditCopyTokenUpdateResponse;
import org.openapitools.client.model.CreditBankEmploymentGetRequest;
import org.openapitools.client.model.CreditBankEmploymentGetResponse;
import org.openapitools.client.model.CreditBankIncomeGetRequest;
import org.openapitools.client.model.CreditBankIncomeGetResponse;
import org.openapitools.client.model.CreditBankIncomePDFGetRequest;
import org.openapitools.client.model.CreditBankIncomeRefreshRequest;
import org.openapitools.client.model.CreditBankIncomeRefreshResponse;
import org.openapitools.client.model.CreditEmploymentGetRequest;
import org.openapitools.client.model.CreditEmploymentGetResponse;
import org.openapitools.client.model.CreditFreddieMacReportsGetRequest;
import org.openapitools.client.model.CreditFreddieMacReportsGetResponse;
import org.openapitools.client.model.CreditPayrollIncomeGetRequest;
import org.openapitools.client.model.CreditPayrollIncomeGetResponse;
import org.openapitools.client.model.CreditPayrollIncomePrecheckRequest;
import org.openapitools.client.model.CreditPayrollIncomePrecheckResponse;
import org.openapitools.client.model.CreditPayrollIncomeRefreshRequest;
import org.openapitools.client.model.CreditPayrollIncomeRefreshResponse;
import org.openapitools.client.model.CreditRelayCreateRequest;
import org.openapitools.client.model.CreditRelayCreateResponse;
import org.openapitools.client.model.CreditRelayGetRequest;
import org.openapitools.client.model.CreditRelayRefreshRequest;
import org.openapitools.client.model.CreditRelayRefreshResponse;
import org.openapitools.client.model.CreditRelayRemoveRequest;
import org.openapitools.client.model.CreditRelayRemoveResponse;
import org.openapitools.client.model.CreditSessionsGetRequest;
import org.openapitools.client.model.CreditSessionsGetResponse;
import org.openapitools.client.model.DashboardUserGetRequest;
import org.openapitools.client.model.DashboardUserGetResponse;
import org.openapitools.client.model.DashboardUserListRequest;
import org.openapitools.client.model.DashboardUserListResponse;
import org.openapitools.client.model.DepositSwitchAltCreateRequest;
import org.openapitools.client.model.DepositSwitchAltCreateResponse;
import org.openapitools.client.model.DepositSwitchCreateRequest;
import org.openapitools.client.model.DepositSwitchCreateResponse;
import org.openapitools.client.model.DepositSwitchGetRequest;
import org.openapitools.client.model.DepositSwitchGetResponse;
import org.openapitools.client.model.DepositSwitchTokenCreateRequest;
import org.openapitools.client.model.DepositSwitchTokenCreateResponse;
import org.openapitools.client.model.EmployersSearchRequest;
import org.openapitools.client.model.EmployersSearchResponse;
import org.openapitools.client.model.EmploymentVerificationGetRequest;
import org.openapitools.client.model.EmploymentVerificationGetResponse;
import org.openapitools.client.model.FDXNotification;
import java.io.File;
import org.openapitools.client.model.IdentityGetRequest;
import org.openapitools.client.model.IdentityGetResponse;
import org.openapitools.client.model.IdentityMatchRequest;
import org.openapitools.client.model.IdentityMatchResponse;
import org.openapitools.client.model.IdentityVerificationCreateRequest;
import org.openapitools.client.model.IdentityVerificationCreateResponse;
import org.openapitools.client.model.IdentityVerificationGetRequest;
import org.openapitools.client.model.IdentityVerificationGetResponse;
import org.openapitools.client.model.IdentityVerificationListRequest;
import org.openapitools.client.model.IdentityVerificationListResponse;
import org.openapitools.client.model.IdentityVerificationRetryRequest;
import org.openapitools.client.model.IdentityVerificationRetryResponse;
import org.openapitools.client.model.IncomeVerificationCreateRequest;
import org.openapitools.client.model.IncomeVerificationCreateResponse;
import org.openapitools.client.model.IncomeVerificationDocumentsDownloadRequest;
import org.openapitools.client.model.IncomeVerificationPaystubsGetRequest;
import org.openapitools.client.model.IncomeVerificationPaystubsGetResponse;
import org.openapitools.client.model.IncomeVerificationPrecheckRequest;
import org.openapitools.client.model.IncomeVerificationPrecheckResponse;
import org.openapitools.client.model.IncomeVerificationTaxformsGetRequest;
import org.openapitools.client.model.IncomeVerificationTaxformsGetResponse;
import org.openapitools.client.model.InstitutionsGetByIdRequest;
import org.openapitools.client.model.InstitutionsGetByIdResponse;
import org.openapitools.client.model.InstitutionsGetRequest;
import org.openapitools.client.model.InstitutionsGetResponse;
import org.openapitools.client.model.InstitutionsSearchRequest;
import org.openapitools.client.model.InstitutionsSearchResponse;
import org.openapitools.client.model.InvestmentsHoldingsGetRequest;
import org.openapitools.client.model.InvestmentsHoldingsGetResponse;
import org.openapitools.client.model.InvestmentsTransactionsGetRequest;
import org.openapitools.client.model.InvestmentsTransactionsGetResponse;
import org.openapitools.client.model.ItemAccessTokenInvalidateRequest;
import org.openapitools.client.model.ItemAccessTokenInvalidateResponse;
import org.openapitools.client.model.ItemActivityListRequest;
import org.openapitools.client.model.ItemActivityListResponse;
import org.openapitools.client.model.ItemApplicationListRequest;
import org.openapitools.client.model.ItemApplicationListResponse;
import org.openapitools.client.model.ItemApplicationScopesUpdateRequest;
import org.openapitools.client.model.ItemApplicationScopesUpdateResponse;
import org.openapitools.client.model.ItemGetRequest;
import org.openapitools.client.model.ItemGetResponse;
import org.openapitools.client.model.ItemImportRequest;
import org.openapitools.client.model.ItemImportResponse;
import org.openapitools.client.model.ItemPublicTokenCreateRequest;
import org.openapitools.client.model.ItemPublicTokenCreateResponse;
import org.openapitools.client.model.ItemPublicTokenExchangeRequest;
import org.openapitools.client.model.ItemPublicTokenExchangeResponse;
import org.openapitools.client.model.ItemRemoveRequest;
import org.openapitools.client.model.ItemRemoveResponse;
import org.openapitools.client.model.ItemWebhookUpdateRequest;
import org.openapitools.client.model.ItemWebhookUpdateResponse;
import org.openapitools.client.model.LiabilitiesGetRequest;
import org.openapitools.client.model.LiabilitiesGetResponse;
import org.openapitools.client.model.LinkDeliveryCreateRequest;
import org.openapitools.client.model.LinkDeliveryCreateResponse;
import org.openapitools.client.model.LinkDeliveryGetRequest;
import org.openapitools.client.model.LinkDeliveryGetResponse;
import org.openapitools.client.model.LinkOAuthCorrelationIdExchangeRequest;
import org.openapitools.client.model.LinkOAuthCorrelationIdExchangeResponse;
import org.openapitools.client.model.LinkTokenCreateRequest;
import org.openapitools.client.model.LinkTokenCreateResponse;
import org.openapitools.client.model.LinkTokenGetRequest;
import org.openapitools.client.model.LinkTokenGetResponse;
import org.openapitools.client.model.PartnerCustomerCreateRequest;
import org.openapitools.client.model.PartnerCustomerCreateResponse;
import org.openapitools.client.model.PartnerCustomerEnableRequest;
import org.openapitools.client.model.PartnerCustomerEnableResponse;
import org.openapitools.client.model.PartnerCustomerGetRequest;
import org.openapitools.client.model.PartnerCustomerGetResponse;
import org.openapitools.client.model.PartnerCustomerOAuthInstitutionsGetRequest;
import org.openapitools.client.model.PartnerCustomerOAuthInstitutionsGetResponse;
import org.openapitools.client.model.PartnerCustomerRemoveRequest;
import org.openapitools.client.model.PartnerCustomerRemoveResponse;
import org.openapitools.client.model.PaymentInitiationConsentCreateRequest;
import org.openapitools.client.model.PaymentInitiationConsentCreateResponse;
import org.openapitools.client.model.PaymentInitiationConsentGetRequest;
import org.openapitools.client.model.PaymentInitiationConsentGetResponse;
import org.openapitools.client.model.PaymentInitiationConsentPaymentExecuteRequest;
import org.openapitools.client.model.PaymentInitiationConsentPaymentExecuteResponse;
import org.openapitools.client.model.PaymentInitiationConsentRevokeRequest;
import org.openapitools.client.model.PaymentInitiationConsentRevokeResponse;
import org.openapitools.client.model.PaymentInitiationPaymentCreateRequest;
import org.openapitools.client.model.PaymentInitiationPaymentCreateResponse;
import org.openapitools.client.model.PaymentInitiationPaymentGetRequest;
import org.openapitools.client.model.PaymentInitiationPaymentGetResponse;
import org.openapitools.client.model.PaymentInitiationPaymentListRequest;
import org.openapitools.client.model.PaymentInitiationPaymentListResponse;
import org.openapitools.client.model.PaymentInitiationPaymentReverseRequest;
import org.openapitools.client.model.PaymentInitiationPaymentReverseResponse;
import org.openapitools.client.model.PaymentInitiationPaymentTokenCreateRequest;
import org.openapitools.client.model.PaymentInitiationPaymentTokenCreateResponse;
import org.openapitools.client.model.PaymentInitiationRecipientCreateRequest;
import org.openapitools.client.model.PaymentInitiationRecipientCreateResponse;
import org.openapitools.client.model.PaymentInitiationRecipientGetRequest;
import org.openapitools.client.model.PaymentInitiationRecipientGetResponse;
import org.openapitools.client.model.PaymentInitiationRecipientListRequest;
import org.openapitools.client.model.PaymentInitiationRecipientListResponse;
import org.openapitools.client.model.PaymentProfileCreateRequest;
import org.openapitools.client.model.PaymentProfileCreateResponse;
import org.openapitools.client.model.PaymentProfileGetRequest;
import org.openapitools.client.model.PaymentProfileGetResponse;
import org.openapitools.client.model.PaymentProfileRemoveRequest;
import org.openapitools.client.model.PaymentProfileRemoveResponse;
import org.openapitools.client.model.PlaidError;
import org.openapitools.client.model.ProcessorApexProcessorTokenCreateRequest;
import org.openapitools.client.model.ProcessorAuthGetRequest;
import org.openapitools.client.model.ProcessorAuthGetResponse;
import org.openapitools.client.model.ProcessorBalanceGetRequest;
import org.openapitools.client.model.ProcessorBalanceGetResponse;
import org.openapitools.client.model.ProcessorBankTransferCreateRequest;
import org.openapitools.client.model.ProcessorBankTransferCreateResponse;
import org.openapitools.client.model.ProcessorIdentityGetRequest;
import org.openapitools.client.model.ProcessorIdentityGetResponse;
import org.openapitools.client.model.ProcessorSignalDecisionReportRequest;
import org.openapitools.client.model.ProcessorSignalDecisionReportResponse;
import org.openapitools.client.model.ProcessorSignalEvaluateRequest;
import org.openapitools.client.model.ProcessorSignalEvaluateResponse;
import org.openapitools.client.model.ProcessorSignalReturnReportRequest;
import org.openapitools.client.model.ProcessorSignalReturnReportResponse;
import org.openapitools.client.model.ProcessorStripeBankAccountTokenCreateRequest;
import org.openapitools.client.model.ProcessorStripeBankAccountTokenCreateResponse;
import org.openapitools.client.model.ProcessorTokenCreateRequest;
import org.openapitools.client.model.ProcessorTokenCreateResponse;
import org.openapitools.client.model.SandboxBankTransferFireWebhookRequest;
import org.openapitools.client.model.SandboxBankTransferFireWebhookResponse;
import org.openapitools.client.model.SandboxBankTransferSimulateRequest;
import org.openapitools.client.model.SandboxBankTransferSimulateResponse;
import org.openapitools.client.model.SandboxIncomeFireWebhookRequest;
import org.openapitools.client.model.SandboxIncomeFireWebhookResponse;
import org.openapitools.client.model.SandboxItemFireWebhookRequest;
import org.openapitools.client.model.SandboxItemFireWebhookResponse;
import org.openapitools.client.model.SandboxItemResetLoginRequest;
import org.openapitools.client.model.SandboxItemResetLoginResponse;
import org.openapitools.client.model.SandboxItemSetVerificationStatusRequest;
import org.openapitools.client.model.SandboxItemSetVerificationStatusResponse;
import org.openapitools.client.model.SandboxOauthSelectAccountsRequest;
import org.openapitools.client.model.SandboxPaymentProfileResetLoginRequest;
import org.openapitools.client.model.SandboxPaymentProfileResetLoginResponse;
import org.openapitools.client.model.SandboxProcessorTokenCreateRequest;
import org.openapitools.client.model.SandboxProcessorTokenCreateResponse;
import org.openapitools.client.model.SandboxPublicTokenCreateRequest;
import org.openapitools.client.model.SandboxPublicTokenCreateResponse;
import org.openapitools.client.model.SandboxTransferFireWebhookRequest;
import org.openapitools.client.model.SandboxTransferFireWebhookResponse;
import org.openapitools.client.model.SandboxTransferRepaymentSimulateRequest;
import org.openapitools.client.model.SandboxTransferRepaymentSimulateResponse;
import org.openapitools.client.model.SandboxTransferSimulateRequest;
import org.openapitools.client.model.SandboxTransferSimulateResponse;
import org.openapitools.client.model.SandboxTransferSweepSimulateRequest;
import org.openapitools.client.model.SandboxTransferSweepSimulateResponse;
import org.openapitools.client.model.SandboxTransferTestClockAdvanceRequest;
import org.openapitools.client.model.SandboxTransferTestClockAdvanceResponse;
import org.openapitools.client.model.SandboxTransferTestClockCreateRequest;
import org.openapitools.client.model.SandboxTransferTestClockCreateResponse;
import org.openapitools.client.model.SandboxTransferTestClockGetRequest;
import org.openapitools.client.model.SandboxTransferTestClockGetResponse;
import org.openapitools.client.model.SandboxTransferTestClockListRequest;
import org.openapitools.client.model.SandboxTransferTestClockListResponse;
import org.openapitools.client.model.SignalDecisionReportRequest;
import org.openapitools.client.model.SignalDecisionReportResponse;
import org.openapitools.client.model.SignalEvaluateRequest;
import org.openapitools.client.model.SignalEvaluateResponse;
import org.openapitools.client.model.SignalPrepareRequest;
import org.openapitools.client.model.SignalPrepareResponse;
import org.openapitools.client.model.SignalReturnReportRequest;
import org.openapitools.client.model.SignalReturnReportResponse;
import org.openapitools.client.model.TransactionsEnhanceGetRequest;
import org.openapitools.client.model.TransactionsEnhanceGetResponse;
import org.openapitools.client.model.TransactionsEnrichGetRequest;
import org.openapitools.client.model.TransactionsEnrichGetResponse;
import org.openapitools.client.model.TransactionsGetRequest;
import org.openapitools.client.model.TransactionsGetResponse;
import org.openapitools.client.model.TransactionsRecurringGetRequest;
import org.openapitools.client.model.TransactionsRecurringGetResponse;
import org.openapitools.client.model.TransactionsRefreshRequest;
import org.openapitools.client.model.TransactionsRefreshResponse;
import org.openapitools.client.model.TransactionsRulesCreateRequest;
import org.openapitools.client.model.TransactionsRulesCreateResponse;
import org.openapitools.client.model.TransactionsRulesListRequest;
import org.openapitools.client.model.TransactionsRulesListResponse;
import org.openapitools.client.model.TransactionsRulesRemoveRequest;
import org.openapitools.client.model.TransactionsRulesRemoveResponse;
import org.openapitools.client.model.TransactionsSyncRequest;
import org.openapitools.client.model.TransactionsSyncResponse;
import org.openapitools.client.model.TransferAuthorizationCreateRequest;
import org.openapitools.client.model.TransferAuthorizationCreateResponse;
import org.openapitools.client.model.TransferCancelRequest;
import org.openapitools.client.model.TransferCancelResponse;
import org.openapitools.client.model.TransferCapabilitiesGetRequest;
import org.openapitools.client.model.TransferCapabilitiesGetResponse;
import org.openapitools.client.model.TransferConfigurationGetRequest;
import org.openapitools.client.model.TransferConfigurationGetResponse;
import org.openapitools.client.model.TransferCreateRequest;
import org.openapitools.client.model.TransferCreateResponse;
import org.openapitools.client.model.TransferEventListRequest;
import org.openapitools.client.model.TransferEventListResponse;
import org.openapitools.client.model.TransferEventSyncRequest;
import org.openapitools.client.model.TransferEventSyncResponse;
import org.openapitools.client.model.TransferGetRequest;
import org.openapitools.client.model.TransferGetResponse;
import org.openapitools.client.model.TransferIntentCreateRequest;
import org.openapitools.client.model.TransferIntentCreateResponse;
import org.openapitools.client.model.TransferIntentGetRequest;
import org.openapitools.client.model.TransferIntentGetResponse;
import org.openapitools.client.model.TransferListRequest;
import org.openapitools.client.model.TransferListResponse;
import org.openapitools.client.model.TransferMetricsGetRequest;
import org.openapitools.client.model.TransferMetricsGetResponse;
import org.openapitools.client.model.TransferMigrateAccountRequest;
import org.openapitools.client.model.TransferMigrateAccountResponse;
import org.openapitools.client.model.TransferOriginatorCreateRequest;
import org.openapitools.client.model.TransferOriginatorCreateResponse;
import org.openapitools.client.model.TransferOriginatorGetRequest;
import org.openapitools.client.model.TransferOriginatorGetResponse;
import org.openapitools.client.model.TransferOriginatorListRequest;
import org.openapitools.client.model.TransferOriginatorListResponse;
import org.openapitools.client.model.TransferQuestionnaireCreateRequest;
import org.openapitools.client.model.TransferQuestionnaireCreateResponse;
import org.openapitools.client.model.TransferRecurringCancelRequest;
import org.openapitools.client.model.TransferRecurringCancelResponse;
import org.openapitools.client.model.TransferRecurringCreateRequest;
import org.openapitools.client.model.TransferRecurringCreateResponse;
import org.openapitools.client.model.TransferRecurringGetRequest;
import org.openapitools.client.model.TransferRecurringGetResponse;
import org.openapitools.client.model.TransferRecurringListRequest;
import org.openapitools.client.model.TransferRecurringListResponse;
import org.openapitools.client.model.TransferRefundCancelRequest;
import org.openapitools.client.model.TransferRefundCancelResponse;
import org.openapitools.client.model.TransferRefundCreateRequest;
import org.openapitools.client.model.TransferRefundCreateResponse;
import org.openapitools.client.model.TransferRefundGetRequest;
import org.openapitools.client.model.TransferRefundGetResponse;
import org.openapitools.client.model.TransferRepaymentListRequest;
import org.openapitools.client.model.TransferRepaymentListResponse;
import org.openapitools.client.model.TransferRepaymentReturnListRequest;
import org.openapitools.client.model.TransferRepaymentReturnListResponse;
import org.openapitools.client.model.TransferSweepGetRequest;
import org.openapitools.client.model.TransferSweepGetResponse;
import org.openapitools.client.model.TransferSweepListRequest;
import org.openapitools.client.model.TransferSweepListResponse;
import org.openapitools.client.model.UserCreateRequest;
import org.openapitools.client.model.UserCreateResponse;
import org.openapitools.client.model.WalletCreateRequest;
import org.openapitools.client.model.WalletCreateResponse;
import org.openapitools.client.model.WalletGetRequest;
import org.openapitools.client.model.WalletGetResponse;
import org.openapitools.client.model.WalletListRequest;
import org.openapitools.client.model.WalletListResponse;
import org.openapitools.client.model.WalletTransactionExecuteRequest;
import org.openapitools.client.model.WalletTransactionExecuteResponse;
import org.openapitools.client.model.WalletTransactionGetRequest;
import org.openapitools.client.model.WalletTransactionGetResponse;
import org.openapitools.client.model.WalletTransactionListRequest;
import org.openapitools.client.model.WalletTransactionListResponse;
import org.openapitools.client.model.WatchlistScreeningEntityCreateRequest;
import org.openapitools.client.model.WatchlistScreeningEntityCreateResponse;
import org.openapitools.client.model.WatchlistScreeningEntityGetRequest;
import org.openapitools.client.model.WatchlistScreeningEntityGetResponse;
import org.openapitools.client.model.WatchlistScreeningEntityHistoryListRequest;
import org.openapitools.client.model.WatchlistScreeningEntityHistoryListResponse;
import org.openapitools.client.model.WatchlistScreeningEntityHitListRequest;
import org.openapitools.client.model.WatchlistScreeningEntityHitListResponse;
import org.openapitools.client.model.WatchlistScreeningEntityListRequest;
import org.openapitools.client.model.WatchlistScreeningEntityListResponse;
import org.openapitools.client.model.WatchlistScreeningEntityProgramGetRequest;
import org.openapitools.client.model.WatchlistScreeningEntityProgramGetResponse;
import org.openapitools.client.model.WatchlistScreeningEntityProgramListRequest;
import org.openapitools.client.model.WatchlistScreeningEntityProgramListResponse;
import org.openapitools.client.model.WatchlistScreeningEntityReviewCreateRequest;
import org.openapitools.client.model.WatchlistScreeningEntityReviewCreateResponse;
import org.openapitools.client.model.WatchlistScreeningEntityReviewListRequest;
import org.openapitools.client.model.WatchlistScreeningEntityReviewListResponse;
import org.openapitools.client.model.WatchlistScreeningEntityUpdateRequest;
import org.openapitools.client.model.WatchlistScreeningEntityUpdateResponse;
import org.openapitools.client.model.WatchlistScreeningIndividualCreateRequest;
import org.openapitools.client.model.WatchlistScreeningIndividualCreateResponse;
import org.openapitools.client.model.WatchlistScreeningIndividualGetRequest;
import org.openapitools.client.model.WatchlistScreeningIndividualGetResponse;
import org.openapitools.client.model.WatchlistScreeningIndividualHistoryListRequest;
import org.openapitools.client.model.WatchlistScreeningIndividualHistoryListResponse;
import org.openapitools.client.model.WatchlistScreeningIndividualHitListRequest;
import org.openapitools.client.model.WatchlistScreeningIndividualHitListResponse;
import org.openapitools.client.model.WatchlistScreeningIndividualListRequest;
import org.openapitools.client.model.WatchlistScreeningIndividualListResponse;
import org.openapitools.client.model.WatchlistScreeningIndividualProgramGetRequest;
import org.openapitools.client.model.WatchlistScreeningIndividualProgramGetResponse;
import org.openapitools.client.model.WatchlistScreeningIndividualProgramListRequest;
import org.openapitools.client.model.WatchlistScreeningIndividualProgramListResponse;
import org.openapitools.client.model.WatchlistScreeningIndividualReviewCreateRequest;
import org.openapitools.client.model.WatchlistScreeningIndividualReviewCreateResponse;
import org.openapitools.client.model.WatchlistScreeningIndividualReviewListRequest;
import org.openapitools.client.model.WatchlistScreeningIndividualReviewListResponse;
import org.openapitools.client.model.WatchlistScreeningIndividualUpdateRequest;
import org.openapitools.client.model.WatchlistScreeningIndividualUpdateResponse;
import org.openapitools.client.model.WebhookVerificationKeyGetRequest;
import org.openapitools.client.model.WebhookVerificationKeyGetResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlaidApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlaidApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlaidApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountsBalanceGet
     * @param accountsBalanceGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/balance/#accountsbalanceget">Retrieve real-time balance data Documentation</a>
     */
    public okhttp3.Call accountsBalanceGetCall(AccountsBalanceGetRequest accountsBalanceGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountsBalanceGetRequest;

        // create path and map variables
        String localVarPath = "/accounts/balance/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsBalanceGetValidateBeforeCall(AccountsBalanceGetRequest accountsBalanceGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountsBalanceGetRequest' is set
        if (accountsBalanceGetRequest == null) {
            throw new ApiException("Missing the required parameter 'accountsBalanceGetRequest' when calling accountsBalanceGet(Async)");
        }

        return accountsBalanceGetCall(accountsBalanceGetRequest, _callback);

    }

    /**
     * Retrieve real-time balance data
     * The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints; if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
     * @param accountsBalanceGetRequest  (required)
     * @return AccountsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/balance/#accountsbalanceget">Retrieve real-time balance data Documentation</a>
     */
    public AccountsGetResponse accountsBalanceGet(AccountsBalanceGetRequest accountsBalanceGetRequest) throws ApiException {
        ApiResponse<AccountsGetResponse> localVarResp = accountsBalanceGetWithHttpInfo(accountsBalanceGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve real-time balance data
     * The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints; if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
     * @param accountsBalanceGetRequest  (required)
     * @return ApiResponse&lt;AccountsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/balance/#accountsbalanceget">Retrieve real-time balance data Documentation</a>
     */
    public ApiResponse<AccountsGetResponse> accountsBalanceGetWithHttpInfo(AccountsBalanceGetRequest accountsBalanceGetRequest) throws ApiException {
        okhttp3.Call localVarCall = accountsBalanceGetValidateBeforeCall(accountsBalanceGetRequest, null);
        Type localVarReturnType = new TypeToken<AccountsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve real-time balance data (asynchronously)
     * The &#x60;/accounts/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/accounts/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, &#x60;balance&#x60; itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints; if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
     * @param accountsBalanceGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/balance/#accountsbalanceget">Retrieve real-time balance data Documentation</a>
     */
    public okhttp3.Call accountsBalanceGetAsync(AccountsBalanceGetRequest accountsBalanceGetRequest, final ApiCallback<AccountsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsBalanceGetValidateBeforeCall(accountsBalanceGetRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsGet
     * @param accountsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/accounts/#accountsget">Retrieve accounts Documentation</a>
     */
    public okhttp3.Call accountsGetCall(AccountsGetRequest accountsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountsGetRequest;

        // create path and map variables
        String localVarPath = "/accounts/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsGetValidateBeforeCall(AccountsGetRequest accountsGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountsGetRequest' is set
        if (accountsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'accountsGetRequest' when calling accountsGet(Async)");
        }

        return accountsGetCall(accountsGetRequest, _callback);

    }

    /**
     * Retrieve accounts
     * The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use &#x60;/accounts/balance/get&#x60; instead. Note that some information is nullable.
     * @param accountsGetRequest  (required)
     * @return AccountsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/accounts/#accountsget">Retrieve accounts Documentation</a>
     */
    public AccountsGetResponse accountsGet(AccountsGetRequest accountsGetRequest) throws ApiException {
        ApiResponse<AccountsGetResponse> localVarResp = accountsGetWithHttpInfo(accountsGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve accounts
     * The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use &#x60;/accounts/balance/get&#x60; instead. Note that some information is nullable.
     * @param accountsGetRequest  (required)
     * @return ApiResponse&lt;AccountsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/accounts/#accountsget">Retrieve accounts Documentation</a>
     */
    public ApiResponse<AccountsGetResponse> accountsGetWithHttpInfo(AccountsGetRequest accountsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = accountsGetValidateBeforeCall(accountsGetRequest, null);
        Type localVarReturnType = new TypeToken<AccountsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve accounts (asynchronously)
     * The &#x60;/accounts/get&#x60; endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance. For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [&#x60;NEW_ACCOUNTS_AVAILABLE&#x60;](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link&#39;s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use &#x60;/accounts/balance/get&#x60; instead. Note that some information is nullable.
     * @param accountsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/accounts/#accountsget">Retrieve accounts Documentation</a>
     */
    public okhttp3.Call accountsGetAsync(AccountsGetRequest accountsGetRequest, final ApiCallback<AccountsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsGetValidateBeforeCall(accountsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationGet
     * @param applicationGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGetCall(ApplicationGetRequest applicationGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationGetRequest;

        // create path and map variables
        String localVarPath = "/application/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationGetValidateBeforeCall(ApplicationGetRequest applicationGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationGetRequest' is set
        if (applicationGetRequest == null) {
            throw new ApiException("Missing the required parameter 'applicationGetRequest' when calling applicationGet(Async)");
        }

        return applicationGetCall(applicationGetRequest, _callback);

    }

    /**
     * Retrieve information about a Plaid application
     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
     * @param applicationGetRequest  (required)
     * @return ApplicationGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationGetResponse applicationGet(ApplicationGetRequest applicationGetRequest) throws ApiException {
        ApiResponse<ApplicationGetResponse> localVarResp = applicationGetWithHttpInfo(applicationGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve information about a Plaid application
     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
     * @param applicationGetRequest  (required)
     * @return ApiResponse&lt;ApplicationGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationGetResponse> applicationGetWithHttpInfo(ApplicationGetRequest applicationGetRequest) throws ApiException {
        okhttp3.Call localVarCall = applicationGetValidateBeforeCall(applicationGetRequest, null);
        Type localVarReturnType = new TypeToken<ApplicationGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve information about a Plaid application (asynchronously)
     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
     * @param applicationGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationGetAsync(ApplicationGetRequest applicationGetRequest, final ApiCallback<ApplicationGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationGetValidateBeforeCall(applicationGetRequest, _callback);
        Type localVarReturnType = new TypeToken<ApplicationGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportAuditCopyCreate
     * @param assetReportAuditCopyCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportaudit_copycreate">Create Asset Report Audit Copy Documentation</a>
     */
    public okhttp3.Call assetReportAuditCopyCreateCall(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportAuditCopyCreateRequest;

        // create path and map variables
        String localVarPath = "/asset_report/audit_copy/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportAuditCopyCreateValidateBeforeCall(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetReportAuditCopyCreateRequest' is set
        if (assetReportAuditCopyCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportAuditCopyCreateRequest' when calling assetReportAuditCopyCreate(Async)");
        }

        return assetReportAuditCopyCreateCall(assetReportAuditCopyCreateRequest, _callback);

    }

    /**
     * Create Asset Report Audit Copy
     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     * @param assetReportAuditCopyCreateRequest  (required)
     * @return AssetReportAuditCopyCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportaudit_copycreate">Create Asset Report Audit Copy Documentation</a>
     */
    public AssetReportAuditCopyCreateResponse assetReportAuditCopyCreate(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest) throws ApiException {
        ApiResponse<AssetReportAuditCopyCreateResponse> localVarResp = assetReportAuditCopyCreateWithHttpInfo(assetReportAuditCopyCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Asset Report Audit Copy
     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     * @param assetReportAuditCopyCreateRequest  (required)
     * @return ApiResponse&lt;AssetReportAuditCopyCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportaudit_copycreate">Create Asset Report Audit Copy Documentation</a>
     */
    public ApiResponse<AssetReportAuditCopyCreateResponse> assetReportAuditCopyCreateWithHttpInfo(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportAuditCopyCreateValidateBeforeCall(assetReportAuditCopyCreateRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportAuditCopyCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Asset Report Audit Copy (asynchronously)
     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the &#x60;/asset_report/audit_copy/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the third party who needs access. Each third party has its own &#x60;auditor_id&#x60;, for example &#x60;fannie_mae&#x60;. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     * @param assetReportAuditCopyCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportaudit_copycreate">Create Asset Report Audit Copy Documentation</a>
     */
    public okhttp3.Call assetReportAuditCopyCreateAsync(AssetReportAuditCopyCreateRequest assetReportAuditCopyCreateRequest, final ApiCallback<AssetReportAuditCopyCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportAuditCopyCreateValidateBeforeCall(assetReportAuditCopyCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportAuditCopyCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportAuditCopyGet
     * @param assetReportAuditCopyGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Retrieve an Asset Report Audit Copy Documentation</a>
     */
    public okhttp3.Call assetReportAuditCopyGetCall(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportAuditCopyGetRequest;

        // create path and map variables
        String localVarPath = "/asset_report/audit_copy/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportAuditCopyGetValidateBeforeCall(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetReportAuditCopyGetRequest' is set
        if (assetReportAuditCopyGetRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportAuditCopyGetRequest' when calling assetReportAuditCopyGet(Async)");
        }

        return assetReportAuditCopyGetCall(assetReportAuditCopyGetRequest, _callback);

    }

    /**
     * Retrieve an Asset Report Audit Copy
     * &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
     * @param assetReportAuditCopyGetRequest  (required)
     * @return AssetReportGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Retrieve an Asset Report Audit Copy Documentation</a>
     */
    public AssetReportGetResponse assetReportAuditCopyGet(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest) throws ApiException {
        ApiResponse<AssetReportGetResponse> localVarResp = assetReportAuditCopyGetWithHttpInfo(assetReportAuditCopyGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Asset Report Audit Copy
     * &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
     * @param assetReportAuditCopyGetRequest  (required)
     * @return ApiResponse&lt;AssetReportGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Retrieve an Asset Report Audit Copy Documentation</a>
     */
    public ApiResponse<AssetReportGetResponse> assetReportAuditCopyGetWithHttpInfo(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportAuditCopyGetValidateBeforeCall(assetReportAuditCopyGetRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Asset Report Audit Copy (asynchronously)
     * &#x60;/asset_report/audit_copy/get&#x60; allows auditors to get a copy of an Asset Report that was previously shared via the &#x60;/asset_report/audit_copy/create&#x60; endpoint.  The caller of &#x60;/asset_report/audit_copy/create&#x60; must provide the &#x60;audit_copy_token&#x60; to the auditor.  This token can then be used to call &#x60;/asset_report/audit_copy/create&#x60;.
     * @param assetReportAuditCopyGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Retrieve an Asset Report Audit Copy Documentation</a>
     */
    public okhttp3.Call assetReportAuditCopyGetAsync(AssetReportAuditCopyGetRequest assetReportAuditCopyGetRequest, final ApiCallback<AssetReportGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportAuditCopyGetValidateBeforeCall(assetReportAuditCopyGetRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportAuditCopyRemove
     * @param assetReportAuditCopyRemoveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportaudit_copyremove">Remove Asset Report Audit Copy Documentation</a>
     */
    public okhttp3.Call assetReportAuditCopyRemoveCall(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportAuditCopyRemoveRequest;

        // create path and map variables
        String localVarPath = "/asset_report/audit_copy/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportAuditCopyRemoveValidateBeforeCall(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetReportAuditCopyRemoveRequest' is set
        if (assetReportAuditCopyRemoveRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportAuditCopyRemoveRequest' when calling assetReportAuditCopyRemove(Async)");
        }

        return assetReportAuditCopyRemoveCall(assetReportAuditCopyRemoveRequest, _callback);

    }

    /**
     * Remove Asset Report Audit Copy
     * The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @param assetReportAuditCopyRemoveRequest  (required)
     * @return AssetReportAuditCopyRemoveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportaudit_copyremove">Remove Asset Report Audit Copy Documentation</a>
     */
    public AssetReportAuditCopyRemoveResponse assetReportAuditCopyRemove(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest) throws ApiException {
        ApiResponse<AssetReportAuditCopyRemoveResponse> localVarResp = assetReportAuditCopyRemoveWithHttpInfo(assetReportAuditCopyRemoveRequest);
        return localVarResp.getData();
    }

    /**
     * Remove Asset Report Audit Copy
     * The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @param assetReportAuditCopyRemoveRequest  (required)
     * @return ApiResponse&lt;AssetReportAuditCopyRemoveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportaudit_copyremove">Remove Asset Report Audit Copy Documentation</a>
     */
    public ApiResponse<AssetReportAuditCopyRemoveResponse> assetReportAuditCopyRemoveWithHttpInfo(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportAuditCopyRemoveValidateBeforeCall(assetReportAuditCopyRemoveRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportAuditCopyRemoveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Asset Report Audit Copy (asynchronously)
     * The &#x60;/asset_report/audit_copy/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @param assetReportAuditCopyRemoveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportaudit_copyremove">Remove Asset Report Audit Copy Documentation</a>
     */
    public okhttp3.Call assetReportAuditCopyRemoveAsync(AssetReportAuditCopyRemoveRequest assetReportAuditCopyRemoveRequest, final ApiCallback<AssetReportAuditCopyRemoveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportAuditCopyRemoveValidateBeforeCall(assetReportAuditCopyRemoveRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportAuditCopyRemoveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportCreate
     * @param assetReportCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportcreate">Create an Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportCreateCall(AssetReportCreateRequest assetReportCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportCreateRequest;

        // create path and map variables
        String localVarPath = "/asset_report/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportCreateValidateBeforeCall(AssetReportCreateRequest assetReportCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetReportCreateRequest' is set
        if (assetReportCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportCreateRequest' when calling assetReportCreate(Async)");
        }

        return assetReportCreateCall(assetReportCreateRequest, _callback);

    }

    /**
     * Create an Asset Report
     * The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
     * @param assetReportCreateRequest  (required)
     * @return AssetReportCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportcreate">Create an Asset Report Documentation</a>
     */
    public AssetReportCreateResponse assetReportCreate(AssetReportCreateRequest assetReportCreateRequest) throws ApiException {
        ApiResponse<AssetReportCreateResponse> localVarResp = assetReportCreateWithHttpInfo(assetReportCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create an Asset Report
     * The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
     * @param assetReportCreateRequest  (required)
     * @return ApiResponse&lt;AssetReportCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportcreate">Create an Asset Report Documentation</a>
     */
    public ApiResponse<AssetReportCreateResponse> assetReportCreateWithHttpInfo(AssetReportCreateRequest assetReportCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportCreateValidateBeforeCall(assetReportCreateRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an Asset Report (asynchronously)
     * The &#x60;/asset_report/create&#x60; endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the &#x60;asset_report_token&#x60; return value to the &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60; endpoints.  The Asset Report takes some time to be created and is not available immediately after calling &#x60;/asset_report/create&#x60;. When the Asset Report is ready to be retrieved using &#x60;/asset_report/get&#x60; or &#x60;/asset_report/pdf/get&#x60;, Plaid will fire a &#x60;PRODUCT_READY&#x60; webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).  The &#x60;/asset_report/create&#x60; endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the &#x60;/asset_report/refresh&#x60; endpoint.
     * @param assetReportCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportcreate">Create an Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportCreateAsync(AssetReportCreateRequest assetReportCreateRequest, final ApiCallback<AssetReportCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportCreateValidateBeforeCall(assetReportCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportFilter
     * @param assetReportFilterRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportfilter">Filter Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportFilterCall(AssetReportFilterRequest assetReportFilterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportFilterRequest;

        // create path and map variables
        String localVarPath = "/asset_report/filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportFilterValidateBeforeCall(AssetReportFilterRequest assetReportFilterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetReportFilterRequest' is set
        if (assetReportFilterRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportFilterRequest' when calling assetReportFilter(Async)");
        }

        return assetReportFilterCall(assetReportFilterRequest, _callback);

    }

    /**
     * Filter Asset Report
     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
     * @param assetReportFilterRequest  (required)
     * @return AssetReportFilterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportfilter">Filter Asset Report Documentation</a>
     */
    public AssetReportFilterResponse assetReportFilter(AssetReportFilterRequest assetReportFilterRequest) throws ApiException {
        ApiResponse<AssetReportFilterResponse> localVarResp = assetReportFilterWithHttpInfo(assetReportFilterRequest);
        return localVarResp.getData();
    }

    /**
     * Filter Asset Report
     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
     * @param assetReportFilterRequest  (required)
     * @return ApiResponse&lt;AssetReportFilterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportfilter">Filter Asset Report Documentation</a>
     */
    public ApiResponse<AssetReportFilterResponse> assetReportFilterWithHttpInfo(AssetReportFilterRequest assetReportFilterRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportFilterValidateBeforeCall(assetReportFilterRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportFilterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Filter Asset Report (asynchronously)
     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the &#x60;/accounts/get&#x60; endpoint. To narrow an Asset Report to only a subset of accounts, use the &#x60;/asset_report/filter&#x60; endpoint.  To exclude certain Accounts from an Asset Report, first use the &#x60;/asset_report/create&#x60; endpoint to create the report, then send the &#x60;asset_report_token&#x60; along with a list of &#x60;account_ids&#x60; to exclude to the &#x60;/asset_report/filter&#x60; endpoint, to create a new Asset Report which contains only a subset of the original Asset Report&#39;s data.  Because Asset Reports are immutable, calling &#x60;/asset_report/filter&#x60; does not alter the original Asset Report in any way; rather, &#x60;/asset_report/filter&#x60; creates a new Asset Report with a new token and id. Asset Reports created via &#x60;/asset_report/filter&#x60; do not contain new Asset data, and are not billed.  Plaid will fire a [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
     * @param assetReportFilterRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportfilter">Filter Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportFilterAsync(AssetReportFilterRequest assetReportFilterRequest, final ApiCallback<AssetReportFilterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportFilterValidateBeforeCall(assetReportFilterRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportFilterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportGet
     * @param assetReportGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportget">Retrieve an Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportGetCall(AssetReportGetRequest assetReportGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportGetRequest;

        // create path and map variables
        String localVarPath = "/asset_report/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportGetValidateBeforeCall(AssetReportGetRequest assetReportGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetReportGetRequest' is set
        if (assetReportGetRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportGetRequest' when calling assetReportGet(Async)");
        }

        return assetReportGetCall(assetReportGetRequest, _callback);

    }

    /**
     * Retrieve an Asset Report
     * The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  If report_type was set to &#x60;VERIFICATION_OF_EMPLOYMENT&#x60; when the Asset Report was created in asset_report/create, debit transactions and transaction amounts won’t be included in the report.  To retrieve an Asset Report with Insights, call the &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.
     * @param assetReportGetRequest  (required)
     * @return AssetReportGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportget">Retrieve an Asset Report Documentation</a>
     */
    public AssetReportGetResponse assetReportGet(AssetReportGetRequest assetReportGetRequest) throws ApiException {
        ApiResponse<AssetReportGetResponse> localVarResp = assetReportGetWithHttpInfo(assetReportGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Asset Report
     * The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  If report_type was set to &#x60;VERIFICATION_OF_EMPLOYMENT&#x60; when the Asset Report was created in asset_report/create, debit transactions and transaction amounts won’t be included in the report.  To retrieve an Asset Report with Insights, call the &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.
     * @param assetReportGetRequest  (required)
     * @return ApiResponse&lt;AssetReportGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportget">Retrieve an Asset Report Documentation</a>
     */
    public ApiResponse<AssetReportGetResponse> assetReportGetWithHttpInfo(AssetReportGetRequest assetReportGetRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportGetValidateBeforeCall(assetReportGetRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Asset Report (asynchronously)
     * The &#x60;/asset_report/get&#x60; endpoint retrieves the Asset Report in JSON format. Before calling &#x60;/asset_report/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  If report_type was set to &#x60;VERIFICATION_OF_EMPLOYMENT&#x60; when the Asset Report was created in asset_report/create, debit transactions and transaction amounts won’t be included in the report.  To retrieve an Asset Report with Insights, call the &#x60;/asset_report/get&#x60; endpoint with &#x60;include_insights&#x60; set to &#x60;true&#x60;.
     * @param assetReportGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportget">Retrieve an Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportGetAsync(AssetReportGetRequest assetReportGetRequest, final ApiCallback<AssetReportGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportGetValidateBeforeCall(assetReportGetRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportPdfGet
     * @param assetReportPDFGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A PDF of the Asset Report </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportpdfget">Retrieve a PDF Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportPdfGetCall(AssetReportPDFGetRequest assetReportPDFGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportPDFGetRequest;

        // create path and map variables
        String localVarPath = "/asset_report/pdf/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportPdfGetValidateBeforeCall(AssetReportPDFGetRequest assetReportPDFGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetReportPDFGetRequest' is set
        if (assetReportPDFGetRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportPDFGetRequest' when calling assetReportPdfGet(Async)");
        }

        return assetReportPdfGetCall(assetReportPDFGetRequest, _callback);

    }

    /**
     * Retrieve a PDF Asset Report
     * The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  If report_type was set to &#x60;VERIFICATION_OF_EMPLOYMENT&#x60; when the Asset Report was created in asset_report/create, debit transactions and transaction amounts won’t be included in the report.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     * @param assetReportPDFGetRequest  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A PDF of the Asset Report </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportpdfget">Retrieve a PDF Asset Report Documentation</a>
     */
    public File assetReportPdfGet(AssetReportPDFGetRequest assetReportPDFGetRequest) throws ApiException {
        ApiResponse<File> localVarResp = assetReportPdfGetWithHttpInfo(assetReportPDFGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a PDF Asset Report
     * The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  If report_type was set to &#x60;VERIFICATION_OF_EMPLOYMENT&#x60; when the Asset Report was created in asset_report/create, debit transactions and transaction amounts won’t be included in the report.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     * @param assetReportPDFGetRequest  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A PDF of the Asset Report </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportpdfget">Retrieve a PDF Asset Report Documentation</a>
     */
    public ApiResponse<File> assetReportPdfGetWithHttpInfo(AssetReportPDFGetRequest assetReportPDFGetRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportPdfGetValidateBeforeCall(assetReportPDFGetRequest, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a PDF Asset Report (asynchronously)
     * The &#x60;/asset_report/pdf/get&#x60; endpoint retrieves the Asset Report in PDF format. Before calling &#x60;/asset_report/pdf/get&#x60;, you must first create the Asset Report using &#x60;/asset_report/create&#x60; (or filter an Asset Report using &#x60;/asset_report/filter&#x60;) and then wait for the [&#x60;PRODUCT_READY&#x60;](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.  The response to &#x60;/asset_report/pdf/get&#x60; is the PDF binary data. The &#x60;request_id&#x60;  is returned in the &#x60;Plaid-Request-ID&#x60; header.  If report_type was set to &#x60;VERIFICATION_OF_EMPLOYMENT&#x60; when the Asset Report was created in asset_report/create, debit transactions and transaction amounts won’t be included in the report.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     * @param assetReportPDFGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A PDF of the Asset Report </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportpdfget">Retrieve a PDF Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportPdfGetAsync(AssetReportPDFGetRequest assetReportPDFGetRequest, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportPdfGetValidateBeforeCall(assetReportPDFGetRequest, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportRefresh
     * @param assetReportRefreshRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportrefresh">Refresh an Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportRefreshCall(AssetReportRefreshRequest assetReportRefreshRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportRefreshRequest;

        // create path and map variables
        String localVarPath = "/asset_report/refresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportRefreshValidateBeforeCall(AssetReportRefreshRequest assetReportRefreshRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetReportRefreshRequest' is set
        if (assetReportRefreshRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportRefreshRequest' when calling assetReportRefresh(Async)");
        }

        return assetReportRefreshCall(assetReportRefreshRequest, _callback);

    }

    /**
     * Refresh an Asset Report
     * An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
     * @param assetReportRefreshRequest  (required)
     * @return AssetReportRefreshResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportrefresh">Refresh an Asset Report Documentation</a>
     */
    public AssetReportRefreshResponse assetReportRefresh(AssetReportRefreshRequest assetReportRefreshRequest) throws ApiException {
        ApiResponse<AssetReportRefreshResponse> localVarResp = assetReportRefreshWithHttpInfo(assetReportRefreshRequest);
        return localVarResp.getData();
    }

    /**
     * Refresh an Asset Report
     * An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
     * @param assetReportRefreshRequest  (required)
     * @return ApiResponse&lt;AssetReportRefreshResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportrefresh">Refresh an Asset Report Documentation</a>
     */
    public ApiResponse<AssetReportRefreshResponse> assetReportRefreshWithHttpInfo(AssetReportRefreshRequest assetReportRefreshRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportRefreshValidateBeforeCall(assetReportRefreshRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportRefreshResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh an Asset Report (asynchronously)
     * An Asset Report is an immutable snapshot of a user&#39;s assets. In order to \&quot;refresh\&quot; an Asset Report you created previously, you can use the &#x60;/asset_report/refresh&#x60; endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to &#x60;/asset_report/filter&#x60;. By default, the new Asset Report will also use the same parameters you submitted with your original &#x60;/asset_report/create&#x60; request, but the original &#x60;days_requested&#x60; value and the values of any parameters in the &#x60;options&#x60; object can be overridden with new values. To change these arguments, simply supply new values for them in your request to &#x60;/asset_report/refresh&#x60;. Submit an empty string (\&quot;\&quot;) for any previously-populated fields you would like set as empty.
     * @param assetReportRefreshRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportrefresh">Refresh an Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportRefreshAsync(AssetReportRefreshRequest assetReportRefreshRequest, final ApiCallback<AssetReportRefreshResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportRefreshValidateBeforeCall(assetReportRefreshRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportRefreshResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetReportRemove
     * @param assetReportRemoveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportremove">Delete an Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportRemoveCall(AssetReportRemoveRequest assetReportRemoveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportRemoveRequest;

        // create path and map variables
        String localVarPath = "/asset_report/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetReportRemoveValidateBeforeCall(AssetReportRemoveRequest assetReportRemoveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetReportRemoveRequest' is set
        if (assetReportRemoveRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportRemoveRequest' when calling assetReportRemove(Async)");
        }

        return assetReportRemoveCall(assetReportRemoveRequest, _callback);

    }

    /**
     * Delete an Asset Report
     * The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
     * @param assetReportRemoveRequest  (required)
     * @return AssetReportRemoveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportremove">Delete an Asset Report Documentation</a>
     */
    public AssetReportRemoveResponse assetReportRemove(AssetReportRemoveRequest assetReportRemoveRequest) throws ApiException {
        ApiResponse<AssetReportRemoveResponse> localVarResp = assetReportRemoveWithHttpInfo(assetReportRemoveRequest);
        return localVarResp.getData();
    }

    /**
     * Delete an Asset Report
     * The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
     * @param assetReportRemoveRequest  (required)
     * @return ApiResponse&lt;AssetReportRemoveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportremove">Delete an Asset Report Documentation</a>
     */
    public ApiResponse<AssetReportRemoveResponse> assetReportRemoveWithHttpInfo(AssetReportRemoveRequest assetReportRemoveRequest) throws ApiException {
        okhttp3.Call localVarCall = assetReportRemoveValidateBeforeCall(assetReportRemoveRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportRemoveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an Asset Report (asynchronously)
     * The &#x60;/item/remove&#x60; endpoint allows you to invalidate an &#x60;access_token&#x60;, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The &#x60;/asset_report/remove&#x60; endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its &#x60;asset_report_token&#x60;, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any &#x60;audit_copy_tokens&#x60; associated with the Asset Report.
     * @param assetReportRemoveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#asset_reportremove">Delete an Asset Report Documentation</a>
     */
    public okhttp3.Call assetReportRemoveAsync(AssetReportRemoveRequest assetReportRemoveRequest, final ApiCallback<AssetReportRemoveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetReportRemoveValidateBeforeCall(assetReportRemoveRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportRemoveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authGet
     * @param authGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/auth/#authget">Retrieve auth data Documentation</a>
     */
    public okhttp3.Call authGetCall(AuthGetRequest authGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authGetRequest;

        // create path and map variables
        String localVarPath = "/auth/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authGetValidateBeforeCall(AuthGetRequest authGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authGetRequest' is set
        if (authGetRequest == null) {
            throw new ApiException("Missing the required parameter 'authGetRequest' when calling authGet(Async)");
        }

        return authGetCall(authGetRequest, _callback);

    }

    /**
     * Retrieve auth data
     * The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     * @param authGetRequest  (required)
     * @return AuthGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/auth/#authget">Retrieve auth data Documentation</a>
     */
    public AuthGetResponse authGet(AuthGetRequest authGetRequest) throws ApiException {
        ApiResponse<AuthGetResponse> localVarResp = authGetWithHttpInfo(authGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve auth data
     * The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     * @param authGetRequest  (required)
     * @return ApiResponse&lt;AuthGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/auth/#authget">Retrieve auth data Documentation</a>
     */
    public ApiResponse<AuthGetResponse> authGetWithHttpInfo(AuthGetRequest authGetRequest) throws ApiException {
        okhttp3.Call localVarCall = authGetValidateBeforeCall(authGetRequest, null);
        Type localVarReturnType = new TypeToken<AuthGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve auth data (asynchronously)
     * The &#x60;/auth/get&#x60; endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item&#39;s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if &#x60;auth&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Versioning note: In API version 2017-03-08, the schema of the &#x60;numbers&#x60; object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     * @param authGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/auth/#authget">Retrieve auth data Documentation</a>
     */
    public okhttp3.Call authGetAsync(AuthGetRequest authGetRequest, final ApiCallback<AuthGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authGetValidateBeforeCall(authGetRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferBalanceGet
     * @param bankTransferBalanceGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferbalanceget">Get balance of your Bank Transfer account Documentation</a>
     */
    public okhttp3.Call bankTransferBalanceGetCall(BankTransferBalanceGetRequest bankTransferBalanceGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferBalanceGetRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/balance/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferBalanceGetValidateBeforeCall(BankTransferBalanceGetRequest bankTransferBalanceGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bankTransferBalanceGetRequest' is set
        if (bankTransferBalanceGetRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferBalanceGetRequest' when calling bankTransferBalanceGet(Async)");
        }

        return bankTransferBalanceGetCall(bankTransferBalanceGetRequest, _callback);

    }

    /**
     * Get balance of your Bank Transfer account
     * Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
     * @param bankTransferBalanceGetRequest  (required)
     * @return BankTransferBalanceGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferbalanceget">Get balance of your Bank Transfer account Documentation</a>
     */
    public BankTransferBalanceGetResponse bankTransferBalanceGet(BankTransferBalanceGetRequest bankTransferBalanceGetRequest) throws ApiException {
        ApiResponse<BankTransferBalanceGetResponse> localVarResp = bankTransferBalanceGetWithHttpInfo(bankTransferBalanceGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get balance of your Bank Transfer account
     * Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
     * @param bankTransferBalanceGetRequest  (required)
     * @return ApiResponse&lt;BankTransferBalanceGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferbalanceget">Get balance of your Bank Transfer account Documentation</a>
     */
    public ApiResponse<BankTransferBalanceGetResponse> bankTransferBalanceGetWithHttpInfo(BankTransferBalanceGetRequest bankTransferBalanceGetRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferBalanceGetValidateBeforeCall(bankTransferBalanceGetRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferBalanceGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get balance of your Bank Transfer account (asynchronously)
     * Use the &#x60;/bank_transfer/balance/get&#x60; endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
     * @param bankTransferBalanceGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferbalanceget">Get balance of your Bank Transfer account Documentation</a>
     */
    public okhttp3.Call bankTransferBalanceGetAsync(BankTransferBalanceGetRequest bankTransferBalanceGetRequest, final ApiCallback<BankTransferBalanceGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferBalanceGetValidateBeforeCall(bankTransferBalanceGetRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferBalanceGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferCancel
     * @param bankTransferCancelRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfercancel">Cancel a bank transfer Documentation</a>
     */
    public okhttp3.Call bankTransferCancelCall(BankTransferCancelRequest bankTransferCancelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferCancelRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferCancelValidateBeforeCall(BankTransferCancelRequest bankTransferCancelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bankTransferCancelRequest' is set
        if (bankTransferCancelRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferCancelRequest' when calling bankTransferCancel(Async)");
        }

        return bankTransferCancelCall(bankTransferCancelRequest, _callback);

    }

    /**
     * Cancel a bank transfer
     * Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
     * @param bankTransferCancelRequest  (required)
     * @return BankTransferCancelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfercancel">Cancel a bank transfer Documentation</a>
     */
    public BankTransferCancelResponse bankTransferCancel(BankTransferCancelRequest bankTransferCancelRequest) throws ApiException {
        ApiResponse<BankTransferCancelResponse> localVarResp = bankTransferCancelWithHttpInfo(bankTransferCancelRequest);
        return localVarResp.getData();
    }

    /**
     * Cancel a bank transfer
     * Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
     * @param bankTransferCancelRequest  (required)
     * @return ApiResponse&lt;BankTransferCancelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfercancel">Cancel a bank transfer Documentation</a>
     */
    public ApiResponse<BankTransferCancelResponse> bankTransferCancelWithHttpInfo(BankTransferCancelRequest bankTransferCancelRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferCancelValidateBeforeCall(bankTransferCancelRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferCancelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a bank transfer (asynchronously)
     * Use the &#x60;/bank_transfer/cancel&#x60; endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the &#x60;cancellable&#x60; property returned by &#x60;/bank_transfer/get&#x60; is &#x60;true&#x60;.
     * @param bankTransferCancelRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfercancel">Cancel a bank transfer Documentation</a>
     */
    public okhttp3.Call bankTransferCancelAsync(BankTransferCancelRequest bankTransferCancelRequest, final ApiCallback<BankTransferCancelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferCancelValidateBeforeCall(bankTransferCancelRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferCancelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferCreate
     * @param bankTransferCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfercreate">Create a bank transfer Documentation</a>
     */
    public okhttp3.Call bankTransferCreateCall(BankTransferCreateRequest bankTransferCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferCreateRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferCreateValidateBeforeCall(BankTransferCreateRequest bankTransferCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bankTransferCreateRequest' is set
        if (bankTransferCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferCreateRequest' when calling bankTransferCreate(Async)");
        }

        return bankTransferCreateCall(bankTransferCreateRequest, _callback);

    }

    /**
     * Create a bank transfer
     * Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
     * @param bankTransferCreateRequest  (required)
     * @return BankTransferCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfercreate">Create a bank transfer Documentation</a>
     */
    public BankTransferCreateResponse bankTransferCreate(BankTransferCreateRequest bankTransferCreateRequest) throws ApiException {
        ApiResponse<BankTransferCreateResponse> localVarResp = bankTransferCreateWithHttpInfo(bankTransferCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a bank transfer
     * Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
     * @param bankTransferCreateRequest  (required)
     * @return ApiResponse&lt;BankTransferCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfercreate">Create a bank transfer Documentation</a>
     */
    public ApiResponse<BankTransferCreateResponse> bankTransferCreateWithHttpInfo(BankTransferCreateRequest bankTransferCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferCreateValidateBeforeCall(bankTransferCreateRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a bank transfer (asynchronously)
     * Use the &#x60;/bank_transfer/create&#x60; endpoint to initiate a new bank transfer.
     * @param bankTransferCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfercreate">Create a bank transfer Documentation</a>
     */
    public okhttp3.Call bankTransferCreateAsync(BankTransferCreateRequest bankTransferCreateRequest, final ApiCallback<BankTransferCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferCreateValidateBeforeCall(bankTransferCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferEventList
     * @param bankTransferEventListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/auth#bank_transfereventlist">List bank transfer events Documentation</a>
     */
    public okhttp3.Call bankTransferEventListCall(BankTransferEventListRequest bankTransferEventListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferEventListRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/event/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferEventListValidateBeforeCall(BankTransferEventListRequest bankTransferEventListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bankTransferEventListRequest' is set
        if (bankTransferEventListRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferEventListRequest' when calling bankTransferEventList(Async)");
        }

        return bankTransferEventListCall(bankTransferEventListRequest, _callback);

    }

    /**
     * List bank transfer events
     * Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
     * @param bankTransferEventListRequest  (required)
     * @return BankTransferEventListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/auth#bank_transfereventlist">List bank transfer events Documentation</a>
     */
    public BankTransferEventListResponse bankTransferEventList(BankTransferEventListRequest bankTransferEventListRequest) throws ApiException {
        ApiResponse<BankTransferEventListResponse> localVarResp = bankTransferEventListWithHttpInfo(bankTransferEventListRequest);
        return localVarResp.getData();
    }

    /**
     * List bank transfer events
     * Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
     * @param bankTransferEventListRequest  (required)
     * @return ApiResponse&lt;BankTransferEventListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/auth#bank_transfereventlist">List bank transfer events Documentation</a>
     */
    public ApiResponse<BankTransferEventListResponse> bankTransferEventListWithHttpInfo(BankTransferEventListRequest bankTransferEventListRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferEventListValidateBeforeCall(bankTransferEventListRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferEventListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List bank transfer events (asynchronously)
     * Use the &#x60;/bank_transfer/event/list&#x60; endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
     * @param bankTransferEventListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/auth#bank_transfereventlist">List bank transfer events Documentation</a>
     */
    public okhttp3.Call bankTransferEventListAsync(BankTransferEventListRequest bankTransferEventListRequest, final ApiCallback<BankTransferEventListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferEventListValidateBeforeCall(bankTransferEventListRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferEventListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferEventSync
     * @param bankTransferEventSyncRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/auth/#bank_transfereventsync">Sync bank transfer events Documentation</a>
     */
    public okhttp3.Call bankTransferEventSyncCall(BankTransferEventSyncRequest bankTransferEventSyncRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferEventSyncRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/event/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferEventSyncValidateBeforeCall(BankTransferEventSyncRequest bankTransferEventSyncRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bankTransferEventSyncRequest' is set
        if (bankTransferEventSyncRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferEventSyncRequest' when calling bankTransferEventSync(Async)");
        }

        return bankTransferEventSyncCall(bankTransferEventSyncRequest, _callback);

    }

    /**
     * Sync bank transfer events
     * &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific &#x60;event_id&#x60;. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
     * @param bankTransferEventSyncRequest  (required)
     * @return BankTransferEventSyncResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/auth/#bank_transfereventsync">Sync bank transfer events Documentation</a>
     */
    public BankTransferEventSyncResponse bankTransferEventSync(BankTransferEventSyncRequest bankTransferEventSyncRequest) throws ApiException {
        ApiResponse<BankTransferEventSyncResponse> localVarResp = bankTransferEventSyncWithHttpInfo(bankTransferEventSyncRequest);
        return localVarResp.getData();
    }

    /**
     * Sync bank transfer events
     * &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific &#x60;event_id&#x60;. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
     * @param bankTransferEventSyncRequest  (required)
     * @return ApiResponse&lt;BankTransferEventSyncResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/auth/#bank_transfereventsync">Sync bank transfer events Documentation</a>
     */
    public ApiResponse<BankTransferEventSyncResponse> bankTransferEventSyncWithHttpInfo(BankTransferEventSyncRequest bankTransferEventSyncRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferEventSyncValidateBeforeCall(bankTransferEventSyncRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferEventSyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sync bank transfer events (asynchronously)
     * &#x60;/bank_transfer/event/sync&#x60; allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific &#x60;event_id&#x60;. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
     * @param bankTransferEventSyncRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/auth/#bank_transfereventsync">Sync bank transfer events Documentation</a>
     */
    public okhttp3.Call bankTransferEventSyncAsync(BankTransferEventSyncRequest bankTransferEventSyncRequest, final ApiCallback<BankTransferEventSyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferEventSyncValidateBeforeCall(bankTransferEventSyncRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferEventSyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferGet
     * @param bankTransferGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferget">Retrieve a bank transfer Documentation</a>
     */
    public okhttp3.Call bankTransferGetCall(BankTransferGetRequest bankTransferGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferGetRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferGetValidateBeforeCall(BankTransferGetRequest bankTransferGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bankTransferGetRequest' is set
        if (bankTransferGetRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferGetRequest' when calling bankTransferGet(Async)");
        }

        return bankTransferGetCall(bankTransferGetRequest, _callback);

    }

    /**
     * Retrieve a bank transfer
     * The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
     * @param bankTransferGetRequest  (required)
     * @return BankTransferGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferget">Retrieve a bank transfer Documentation</a>
     */
    public BankTransferGetResponse bankTransferGet(BankTransferGetRequest bankTransferGetRequest) throws ApiException {
        ApiResponse<BankTransferGetResponse> localVarResp = bankTransferGetWithHttpInfo(bankTransferGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a bank transfer
     * The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
     * @param bankTransferGetRequest  (required)
     * @return ApiResponse&lt;BankTransferGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferget">Retrieve a bank transfer Documentation</a>
     */
    public ApiResponse<BankTransferGetResponse> bankTransferGetWithHttpInfo(BankTransferGetRequest bankTransferGetRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferGetValidateBeforeCall(bankTransferGetRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a bank transfer (asynchronously)
     * The &#x60;/bank_transfer/get&#x60; fetches information about the bank transfer corresponding to the given &#x60;bank_transfer_id&#x60;.
     * @param bankTransferGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferget">Retrieve a bank transfer Documentation</a>
     */
    public okhttp3.Call bankTransferGetAsync(BankTransferGetRequest bankTransferGetRequest, final ApiCallback<BankTransferGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferGetValidateBeforeCall(bankTransferGetRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferList
     * @param bankTransferListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferlist">List bank transfers Documentation</a>
     */
    public okhttp3.Call bankTransferListCall(BankTransferListRequest bankTransferListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferListRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferListValidateBeforeCall(BankTransferListRequest bankTransferListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bankTransferListRequest' is set
        if (bankTransferListRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferListRequest' when calling bankTransferList(Async)");
        }

        return bankTransferListCall(bankTransferListRequest, _callback);

    }

    /**
     * List bank transfers
     * Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers. 
     * @param bankTransferListRequest  (required)
     * @return BankTransferListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferlist">List bank transfers Documentation</a>
     */
    public BankTransferListResponse bankTransferList(BankTransferListRequest bankTransferListRequest) throws ApiException {
        ApiResponse<BankTransferListResponse> localVarResp = bankTransferListWithHttpInfo(bankTransferListRequest);
        return localVarResp.getData();
    }

    /**
     * List bank transfers
     * Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers. 
     * @param bankTransferListRequest  (required)
     * @return ApiResponse&lt;BankTransferListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferlist">List bank transfers Documentation</a>
     */
    public ApiResponse<BankTransferListResponse> bankTransferListWithHttpInfo(BankTransferListRequest bankTransferListRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferListValidateBeforeCall(bankTransferListRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List bank transfers (asynchronously)
     * Use the &#x60;/bank_transfer/list&#x60; endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired bank transfers. 
     * @param bankTransferListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transferlist">List bank transfers Documentation</a>
     */
    public okhttp3.Call bankTransferListAsync(BankTransferListRequest bankTransferListRequest, final ApiCallback<BankTransferListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferListValidateBeforeCall(bankTransferListRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferMigrateAccount
     * @param bankTransferMigrateAccountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfermigrate_account">Migrate account into Bank Transfers Documentation</a>
     */
    public okhttp3.Call bankTransferMigrateAccountCall(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferMigrateAccountRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/migrate_account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferMigrateAccountValidateBeforeCall(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bankTransferMigrateAccountRequest' is set
        if (bankTransferMigrateAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferMigrateAccountRequest' when calling bankTransferMigrateAccount(Async)");
        }

        return bankTransferMigrateAccountCall(bankTransferMigrateAccountRequest, _callback);

    }

    /**
     * Migrate account into Bank Transfers
     * As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @param bankTransferMigrateAccountRequest  (required)
     * @return BankTransferMigrateAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfermigrate_account">Migrate account into Bank Transfers Documentation</a>
     */
    public BankTransferMigrateAccountResponse bankTransferMigrateAccount(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest) throws ApiException {
        ApiResponse<BankTransferMigrateAccountResponse> localVarResp = bankTransferMigrateAccountWithHttpInfo(bankTransferMigrateAccountRequest);
        return localVarResp.getData();
    }

    /**
     * Migrate account into Bank Transfers
     * As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @param bankTransferMigrateAccountRequest  (required)
     * @return ApiResponse&lt;BankTransferMigrateAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfermigrate_account">Migrate account into Bank Transfers Documentation</a>
     */
    public ApiResponse<BankTransferMigrateAccountResponse> bankTransferMigrateAccountWithHttpInfo(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferMigrateAccountValidateBeforeCall(bankTransferMigrateAccountRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferMigrateAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Migrate account into Bank Transfers (asynchronously)
     * As an alternative to adding Items via Link, you can also use the &#x60;/bank_transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/bank_transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @param bankTransferMigrateAccountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference#bank_transfermigrate_account">Migrate account into Bank Transfers Documentation</a>
     */
    public okhttp3.Call bankTransferMigrateAccountAsync(BankTransferMigrateAccountRequest bankTransferMigrateAccountRequest, final ApiCallback<BankTransferMigrateAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferMigrateAccountValidateBeforeCall(bankTransferMigrateAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferMigrateAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferSweepGet
     * @param bankTransferSweepGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#bank_transfersweepget">Retrieve a sweep Documentation</a>
     */
    public okhttp3.Call bankTransferSweepGetCall(BankTransferSweepGetRequest bankTransferSweepGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferSweepGetRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/sweep/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferSweepGetValidateBeforeCall(BankTransferSweepGetRequest bankTransferSweepGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bankTransferSweepGetRequest' is set
        if (bankTransferSweepGetRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferSweepGetRequest' when calling bankTransferSweepGet(Async)");
        }

        return bankTransferSweepGetCall(bankTransferSweepGetRequest, _callback);

    }

    /**
     * Retrieve a sweep
     * The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
     * @param bankTransferSweepGetRequest  (required)
     * @return BankTransferSweepGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#bank_transfersweepget">Retrieve a sweep Documentation</a>
     */
    public BankTransferSweepGetResponse bankTransferSweepGet(BankTransferSweepGetRequest bankTransferSweepGetRequest) throws ApiException {
        ApiResponse<BankTransferSweepGetResponse> localVarResp = bankTransferSweepGetWithHttpInfo(bankTransferSweepGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a sweep
     * The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
     * @param bankTransferSweepGetRequest  (required)
     * @return ApiResponse&lt;BankTransferSweepGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#bank_transfersweepget">Retrieve a sweep Documentation</a>
     */
    public ApiResponse<BankTransferSweepGetResponse> bankTransferSweepGetWithHttpInfo(BankTransferSweepGetRequest bankTransferSweepGetRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferSweepGetValidateBeforeCall(bankTransferSweepGetRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferSweepGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a sweep (asynchronously)
     * The &#x60;/bank_transfer/sweep/get&#x60; endpoint fetches information about the sweep corresponding to the given &#x60;sweep_id&#x60;.
     * @param bankTransferSweepGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#bank_transfersweepget">Retrieve a sweep Documentation</a>
     */
    public okhttp3.Call bankTransferSweepGetAsync(BankTransferSweepGetRequest bankTransferSweepGetRequest, final ApiCallback<BankTransferSweepGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferSweepGetValidateBeforeCall(bankTransferSweepGetRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferSweepGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bankTransferSweepList
     * @param bankTransferSweepListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#bank_transfersweeplist">List sweeps Documentation</a>
     */
    public okhttp3.Call bankTransferSweepListCall(BankTransferSweepListRequest bankTransferSweepListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bankTransferSweepListRequest;

        // create path and map variables
        String localVarPath = "/bank_transfer/sweep/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bankTransferSweepListValidateBeforeCall(BankTransferSweepListRequest bankTransferSweepListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bankTransferSweepListRequest' is set
        if (bankTransferSweepListRequest == null) {
            throw new ApiException("Missing the required parameter 'bankTransferSweepListRequest' when calling bankTransferSweepList(Async)");
        }

        return bankTransferSweepListCall(bankTransferSweepListRequest, _callback);

    }

    /**
     * List sweeps
     * The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
     * @param bankTransferSweepListRequest  (required)
     * @return BankTransferSweepListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#bank_transfersweeplist">List sweeps Documentation</a>
     */
    public BankTransferSweepListResponse bankTransferSweepList(BankTransferSweepListRequest bankTransferSweepListRequest) throws ApiException {
        ApiResponse<BankTransferSweepListResponse> localVarResp = bankTransferSweepListWithHttpInfo(bankTransferSweepListRequest);
        return localVarResp.getData();
    }

    /**
     * List sweeps
     * The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
     * @param bankTransferSweepListRequest  (required)
     * @return ApiResponse&lt;BankTransferSweepListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#bank_transfersweeplist">List sweeps Documentation</a>
     */
    public ApiResponse<BankTransferSweepListResponse> bankTransferSweepListWithHttpInfo(BankTransferSweepListRequest bankTransferSweepListRequest) throws ApiException {
        okhttp3.Call localVarCall = bankTransferSweepListValidateBeforeCall(bankTransferSweepListRequest, null);
        Type localVarReturnType = new TypeToken<BankTransferSweepListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List sweeps (asynchronously)
     * The &#x60;/bank_transfer/sweep/list&#x60; endpoint fetches information about the sweeps matching the given filters.
     * @param bankTransferSweepListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#bank_transfersweeplist">List sweeps Documentation</a>
     */
    public okhttp3.Call bankTransferSweepListAsync(BankTransferSweepListRequest bankTransferSweepListRequest, final ApiCallback<BankTransferSweepListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bankTransferSweepListValidateBeforeCall(bankTransferSweepListRequest, _callback);
        Type localVarReturnType = new TypeToken<BankTransferSweepListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesGet
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#categoriesget">Get Categories Documentation</a>
     */
    public okhttp3.Call categoriesGetCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/categories/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesGetValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling categoriesGet(Async)");
        }

        return categoriesGetCall(body, _callback);

    }

    /**
     * Get Categories
     * Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
     * @param body  (required)
     * @return CategoriesGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#categoriesget">Get Categories Documentation</a>
     */
    public CategoriesGetResponse categoriesGet(Object body) throws ApiException {
        ApiResponse<CategoriesGetResponse> localVarResp = categoriesGetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Get Categories
     * Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
     * @param body  (required)
     * @return ApiResponse&lt;CategoriesGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#categoriesget">Get Categories Documentation</a>
     */
    public ApiResponse<CategoriesGetResponse> categoriesGetWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = categoriesGetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CategoriesGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Categories (asynchronously)
     * Send a request to the &#x60;/categories/get&#x60; endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#categoriesget">Get Categories Documentation</a>
     */
    public okhttp3.Call categoriesGetAsync(Object body, final ApiCallback<CategoriesGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesGetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CategoriesGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPaymentToken
     * @param paymentInitiationPaymentTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/link/maintain-legacy-integration/#creating-a-payment-token">Create payment token Documentation</a>
     */
    @Deprecated
    public okhttp3.Call createPaymentTokenCall(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationPaymentTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/payment/token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentTokenValidateBeforeCall(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentInitiationPaymentTokenCreateRequest' is set
        if (paymentInitiationPaymentTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationPaymentTokenCreateRequest' when calling createPaymentToken(Async)");
        }

        return createPaymentTokenCall(paymentInitiationPaymentTokenCreateRequest, _callback);

    }

    /**
     * Create payment token
     * The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
     * @param paymentInitiationPaymentTokenCreateRequest  (required)
     * @return PaymentInitiationPaymentTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/link/maintain-legacy-integration/#creating-a-payment-token">Create payment token Documentation</a>
     */
    @Deprecated
    public PaymentInitiationPaymentTokenCreateResponse createPaymentToken(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest) throws ApiException {
        ApiResponse<PaymentInitiationPaymentTokenCreateResponse> localVarResp = createPaymentTokenWithHttpInfo(paymentInitiationPaymentTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create payment token
     * The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
     * @param paymentInitiationPaymentTokenCreateRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationPaymentTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/link/maintain-legacy-integration/#creating-a-payment-token">Create payment token Documentation</a>
     */
    @Deprecated
    public ApiResponse<PaymentInitiationPaymentTokenCreateResponse> createPaymentTokenWithHttpInfo(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createPaymentTokenValidateBeforeCall(paymentInitiationPaymentTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create payment token (asynchronously)
     * The &#x60;/payment_initiation/payment/token/create&#x60; endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, &#x60;link_token&#x60;-based flow. The recommended flow is to provide the &#x60;payment_id&#x60; to &#x60;/link/token/create&#x60;, which returns a &#x60;link_token&#x60; used to initialize Link.  The &#x60;/payment_initiation/payment/token/create&#x60; is used to create a &#x60;payment_token&#x60;, which can then be used in Link initialization to enter a payment initiation flow. You can only use a &#x60;payment_token&#x60; once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
     * @param paymentInitiationPaymentTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/link/maintain-legacy-integration/#creating-a-payment-token">Create payment token Documentation</a>
     */
    @Deprecated
    public okhttp3.Call createPaymentTokenAsync(PaymentInitiationPaymentTokenCreateRequest paymentInitiationPaymentTokenCreateRequest, final ApiCallback<PaymentInitiationPaymentTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentTokenValidateBeforeCall(paymentInitiationPaymentTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditAssetReportFreddieMacGet
     * @param assetReportFreddieGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint. Documentation</a>
     */
    public okhttp3.Call creditAssetReportFreddieMacGetCall(AssetReportFreddieGetRequest assetReportFreddieGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetReportFreddieGetRequest;

        // create path and map variables
        String localVarPath = "/credit/asset_report/freddie_mac/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditAssetReportFreddieMacGetValidateBeforeCall(AssetReportFreddieGetRequest assetReportFreddieGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetReportFreddieGetRequest' is set
        if (assetReportFreddieGetRequest == null) {
            throw new ApiException("Missing the required parameter 'assetReportFreddieGetRequest' when calling creditAssetReportFreddieMacGet(Async)");
        }

        return creditAssetReportFreddieMacGetCall(assetReportFreddieGetRequest, _callback);

    }

    /**
     * Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
     * The &#x60;credit/asset_report/freddie_mac/get&#x60; endpoint retrieves the Asset Report in Freddie Mac&#39;s JSON format.
     * @param assetReportFreddieGetRequest  (required)
     * @return AssetReportFreddieGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint. Documentation</a>
     */
    public AssetReportFreddieGetResponse creditAssetReportFreddieMacGet(AssetReportFreddieGetRequest assetReportFreddieGetRequest) throws ApiException {
        ApiResponse<AssetReportFreddieGetResponse> localVarResp = creditAssetReportFreddieMacGetWithHttpInfo(assetReportFreddieGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
     * The &#x60;credit/asset_report/freddie_mac/get&#x60; endpoint retrieves the Asset Report in Freddie Mac&#39;s JSON format.
     * @param assetReportFreddieGetRequest  (required)
     * @return ApiResponse&lt;AssetReportFreddieGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint. Documentation</a>
     */
    public ApiResponse<AssetReportFreddieGetResponse> creditAssetReportFreddieMacGetWithHttpInfo(AssetReportFreddieGetRequest assetReportFreddieGetRequest) throws ApiException {
        okhttp3.Call localVarCall = creditAssetReportFreddieMacGetValidateBeforeCall(assetReportFreddieGetRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportFreddieGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint. (asynchronously)
     * The &#x60;credit/asset_report/freddie_mac/get&#x60; endpoint retrieves the Asset Report in Freddie Mac&#39;s JSON format.
     * @param assetReportFreddieGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint. Documentation</a>
     */
    public okhttp3.Call creditAssetReportFreddieMacGetAsync(AssetReportFreddieGetRequest assetReportFreddieGetRequest, final ApiCallback<AssetReportFreddieGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditAssetReportFreddieMacGetValidateBeforeCall(assetReportFreddieGetRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportFreddieGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditAuditCopyTokenCreate
     * @param creditAuditCopyTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditaudit_copy_tokencreate">Create Asset or Income Report Audit Copy Token Documentation</a>
     */
    public okhttp3.Call creditAuditCopyTokenCreateCall(CreditAuditCopyTokenCreateRequest creditAuditCopyTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditAuditCopyTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/credit/audit_copy_token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditAuditCopyTokenCreateValidateBeforeCall(CreditAuditCopyTokenCreateRequest creditAuditCopyTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditAuditCopyTokenCreateRequest' is set
        if (creditAuditCopyTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'creditAuditCopyTokenCreateRequest' when calling creditAuditCopyTokenCreate(Async)");
        }

        return creditAuditCopyTokenCreateCall(creditAuditCopyTokenCreateRequest, _callback);

    }

    /**
     * Create Asset or Income Report Audit Copy Token
     * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the &#x60;/credit/audit_copy_token/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the GSE who needs access.
     * @param creditAuditCopyTokenCreateRequest  (required)
     * @return CreditAuditCopyTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditaudit_copy_tokencreate">Create Asset or Income Report Audit Copy Token Documentation</a>
     */
    public CreditAuditCopyTokenCreateResponse creditAuditCopyTokenCreate(CreditAuditCopyTokenCreateRequest creditAuditCopyTokenCreateRequest) throws ApiException {
        ApiResponse<CreditAuditCopyTokenCreateResponse> localVarResp = creditAuditCopyTokenCreateWithHttpInfo(creditAuditCopyTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Asset or Income Report Audit Copy Token
     * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the &#x60;/credit/audit_copy_token/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the GSE who needs access.
     * @param creditAuditCopyTokenCreateRequest  (required)
     * @return ApiResponse&lt;CreditAuditCopyTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditaudit_copy_tokencreate">Create Asset or Income Report Audit Copy Token Documentation</a>
     */
    public ApiResponse<CreditAuditCopyTokenCreateResponse> creditAuditCopyTokenCreateWithHttpInfo(CreditAuditCopyTokenCreateRequest creditAuditCopyTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = creditAuditCopyTokenCreateValidateBeforeCall(creditAuditCopyTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<CreditAuditCopyTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Asset or Income Report Audit Copy Token (asynchronously)
     * Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).  Use the &#x60;/credit/audit_copy_token/create&#x60; endpoint to create an &#x60;audit_copy_token&#x60; and then pass that token to the GSE who needs access.
     * @param creditAuditCopyTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditaudit_copy_tokencreate">Create Asset or Income Report Audit Copy Token Documentation</a>
     */
    public okhttp3.Call creditAuditCopyTokenCreateAsync(CreditAuditCopyTokenCreateRequest creditAuditCopyTokenCreateRequest, final ApiCallback<CreditAuditCopyTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditAuditCopyTokenCreateValidateBeforeCall(creditAuditCopyTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditAuditCopyTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditAuditCopyTokenUpdate
     * @param creditAuditCopyTokenUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Update an Audit Copy Token Documentation</a>
     */
    public okhttp3.Call creditAuditCopyTokenUpdateCall(CreditAuditCopyTokenUpdateRequest creditAuditCopyTokenUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditAuditCopyTokenUpdateRequest;

        // create path and map variables
        String localVarPath = "/credit/audit_copy_token/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditAuditCopyTokenUpdateValidateBeforeCall(CreditAuditCopyTokenUpdateRequest creditAuditCopyTokenUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditAuditCopyTokenUpdateRequest' is set
        if (creditAuditCopyTokenUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'creditAuditCopyTokenUpdateRequest' when calling creditAuditCopyTokenUpdate(Async)");
        }

        return creditAuditCopyTokenUpdateCall(creditAuditCopyTokenUpdateRequest, _callback);

    }

    /**
     * Update an Audit Copy Token
     * The &#x60;/credit/audit_copy_token/update&#x60; endpoint updates an existing  Audit Copy Token by adding the report tokens in the &#x60;report_tokens&#x60; field to the &#x60;audit_copy_token&#x60;. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the &#x60;report_tokens&#x60; field.
     * @param creditAuditCopyTokenUpdateRequest  (required)
     * @return CreditAuditCopyTokenUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Update an Audit Copy Token Documentation</a>
     */
    public CreditAuditCopyTokenUpdateResponse creditAuditCopyTokenUpdate(CreditAuditCopyTokenUpdateRequest creditAuditCopyTokenUpdateRequest) throws ApiException {
        ApiResponse<CreditAuditCopyTokenUpdateResponse> localVarResp = creditAuditCopyTokenUpdateWithHttpInfo(creditAuditCopyTokenUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update an Audit Copy Token
     * The &#x60;/credit/audit_copy_token/update&#x60; endpoint updates an existing  Audit Copy Token by adding the report tokens in the &#x60;report_tokens&#x60; field to the &#x60;audit_copy_token&#x60;. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the &#x60;report_tokens&#x60; field.
     * @param creditAuditCopyTokenUpdateRequest  (required)
     * @return ApiResponse&lt;CreditAuditCopyTokenUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Update an Audit Copy Token Documentation</a>
     */
    public ApiResponse<CreditAuditCopyTokenUpdateResponse> creditAuditCopyTokenUpdateWithHttpInfo(CreditAuditCopyTokenUpdateRequest creditAuditCopyTokenUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = creditAuditCopyTokenUpdateValidateBeforeCall(creditAuditCopyTokenUpdateRequest, null);
        Type localVarReturnType = new TypeToken<CreditAuditCopyTokenUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Audit Copy Token (asynchronously)
     * The &#x60;/credit/audit_copy_token/update&#x60; endpoint updates an existing  Audit Copy Token by adding the report tokens in the &#x60;report_tokens&#x60; field to the &#x60;audit_copy_token&#x60;. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the &#x60;report_tokens&#x60; field.
     * @param creditAuditCopyTokenUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Update an Audit Copy Token Documentation</a>
     */
    public okhttp3.Call creditAuditCopyTokenUpdateAsync(CreditAuditCopyTokenUpdateRequest creditAuditCopyTokenUpdateRequest, final ApiCallback<CreditAuditCopyTokenUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditAuditCopyTokenUpdateValidateBeforeCall(creditAuditCopyTokenUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditAuditCopyTokenUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditBankEmploymentGet
     * @param creditBankEmploymentGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditbank_employmentget">Retrieve information from the bank accounts used for employment verification Documentation</a>
     */
    public okhttp3.Call creditBankEmploymentGetCall(CreditBankEmploymentGetRequest creditBankEmploymentGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditBankEmploymentGetRequest;

        // create path and map variables
        String localVarPath = "/beta/credit/v1/bank_employment/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditBankEmploymentGetValidateBeforeCall(CreditBankEmploymentGetRequest creditBankEmploymentGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditBankEmploymentGetRequest' is set
        if (creditBankEmploymentGetRequest == null) {
            throw new ApiException("Missing the required parameter 'creditBankEmploymentGetRequest' when calling creditBankEmploymentGet(Async)");
        }

        return creditBankEmploymentGetCall(creditBankEmploymentGetRequest, _callback);

    }

    /**
     * Retrieve information from the bank accounts used for employment verification
     * &#x60;/credit/bank_employment/get&#x60; returns the employment report(s) derived from bank transaction data for a specified user.
     * @param creditBankEmploymentGetRequest  (required)
     * @return CreditBankEmploymentGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditbank_employmentget">Retrieve information from the bank accounts used for employment verification Documentation</a>
     */
    public CreditBankEmploymentGetResponse creditBankEmploymentGet(CreditBankEmploymentGetRequest creditBankEmploymentGetRequest) throws ApiException {
        ApiResponse<CreditBankEmploymentGetResponse> localVarResp = creditBankEmploymentGetWithHttpInfo(creditBankEmploymentGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve information from the bank accounts used for employment verification
     * &#x60;/credit/bank_employment/get&#x60; returns the employment report(s) derived from bank transaction data for a specified user.
     * @param creditBankEmploymentGetRequest  (required)
     * @return ApiResponse&lt;CreditBankEmploymentGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditbank_employmentget">Retrieve information from the bank accounts used for employment verification Documentation</a>
     */
    public ApiResponse<CreditBankEmploymentGetResponse> creditBankEmploymentGetWithHttpInfo(CreditBankEmploymentGetRequest creditBankEmploymentGetRequest) throws ApiException {
        okhttp3.Call localVarCall = creditBankEmploymentGetValidateBeforeCall(creditBankEmploymentGetRequest, null);
        Type localVarReturnType = new TypeToken<CreditBankEmploymentGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve information from the bank accounts used for employment verification (asynchronously)
     * &#x60;/credit/bank_employment/get&#x60; returns the employment report(s) derived from bank transaction data for a specified user.
     * @param creditBankEmploymentGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditbank_employmentget">Retrieve information from the bank accounts used for employment verification Documentation</a>
     */
    public okhttp3.Call creditBankEmploymentGetAsync(CreditBankEmploymentGetRequest creditBankEmploymentGetRequest, final ApiCallback<CreditBankEmploymentGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditBankEmploymentGetValidateBeforeCall(creditBankEmploymentGetRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditBankEmploymentGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditBankIncomeGet
     * @param creditBankIncomeGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditbank_incomeget">Retrieve information from the bank accounts used for income verification Documentation</a>
     */
    public okhttp3.Call creditBankIncomeGetCall(CreditBankIncomeGetRequest creditBankIncomeGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditBankIncomeGetRequest;

        // create path and map variables
        String localVarPath = "/credit/bank_income/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditBankIncomeGetValidateBeforeCall(CreditBankIncomeGetRequest creditBankIncomeGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditBankIncomeGetRequest' is set
        if (creditBankIncomeGetRequest == null) {
            throw new ApiException("Missing the required parameter 'creditBankIncomeGetRequest' when calling creditBankIncomeGet(Async)");
        }

        return creditBankIncomeGetCall(creditBankIncomeGetRequest, _callback);

    }

    /**
     * Retrieve information from the bank accounts used for income verification
     * &#x60;/credit/bank_income/get&#x60; returns the bank income report(s) for a specified user.
     * @param creditBankIncomeGetRequest  (required)
     * @return CreditBankIncomeGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditbank_incomeget">Retrieve information from the bank accounts used for income verification Documentation</a>
     */
    public CreditBankIncomeGetResponse creditBankIncomeGet(CreditBankIncomeGetRequest creditBankIncomeGetRequest) throws ApiException {
        ApiResponse<CreditBankIncomeGetResponse> localVarResp = creditBankIncomeGetWithHttpInfo(creditBankIncomeGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve information from the bank accounts used for income verification
     * &#x60;/credit/bank_income/get&#x60; returns the bank income report(s) for a specified user.
     * @param creditBankIncomeGetRequest  (required)
     * @return ApiResponse&lt;CreditBankIncomeGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditbank_incomeget">Retrieve information from the bank accounts used for income verification Documentation</a>
     */
    public ApiResponse<CreditBankIncomeGetResponse> creditBankIncomeGetWithHttpInfo(CreditBankIncomeGetRequest creditBankIncomeGetRequest) throws ApiException {
        okhttp3.Call localVarCall = creditBankIncomeGetValidateBeforeCall(creditBankIncomeGetRequest, null);
        Type localVarReturnType = new TypeToken<CreditBankIncomeGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve information from the bank accounts used for income verification (asynchronously)
     * &#x60;/credit/bank_income/get&#x60; returns the bank income report(s) for a specified user.
     * @param creditBankIncomeGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditbank_incomeget">Retrieve information from the bank accounts used for income verification Documentation</a>
     */
    public okhttp3.Call creditBankIncomeGetAsync(CreditBankIncomeGetRequest creditBankIncomeGetRequest, final ApiCallback<CreditBankIncomeGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditBankIncomeGetValidateBeforeCall(creditBankIncomeGetRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditBankIncomeGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditBankIncomePdfGet
     * @param creditBankIncomePDFGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A PDF of the Bank Income Report </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditbank_incomepdfget">Retrieve information from the bank accounts used for income verification in PDF format Documentation</a>
     */
    public okhttp3.Call creditBankIncomePdfGetCall(CreditBankIncomePDFGetRequest creditBankIncomePDFGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditBankIncomePDFGetRequest;

        // create path and map variables
        String localVarPath = "/credit/bank_income/pdf/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditBankIncomePdfGetValidateBeforeCall(CreditBankIncomePDFGetRequest creditBankIncomePDFGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditBankIncomePDFGetRequest' is set
        if (creditBankIncomePDFGetRequest == null) {
            throw new ApiException("Missing the required parameter 'creditBankIncomePDFGetRequest' when calling creditBankIncomePdfGet(Async)");
        }

        return creditBankIncomePdfGetCall(creditBankIncomePDFGetRequest, _callback);

    }

    /**
     * Retrieve information from the bank accounts used for income verification in PDF format
     * &#x60;/credit/bank_income/pdf/get&#x60; returns the most recent bank income report for a specified user in PDF format.
     * @param creditBankIncomePDFGetRequest  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A PDF of the Bank Income Report </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditbank_incomepdfget">Retrieve information from the bank accounts used for income verification in PDF format Documentation</a>
     */
    public File creditBankIncomePdfGet(CreditBankIncomePDFGetRequest creditBankIncomePDFGetRequest) throws ApiException {
        ApiResponse<File> localVarResp = creditBankIncomePdfGetWithHttpInfo(creditBankIncomePDFGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve information from the bank accounts used for income verification in PDF format
     * &#x60;/credit/bank_income/pdf/get&#x60; returns the most recent bank income report for a specified user in PDF format.
     * @param creditBankIncomePDFGetRequest  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A PDF of the Bank Income Report </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditbank_incomepdfget">Retrieve information from the bank accounts used for income verification in PDF format Documentation</a>
     */
    public ApiResponse<File> creditBankIncomePdfGetWithHttpInfo(CreditBankIncomePDFGetRequest creditBankIncomePDFGetRequest) throws ApiException {
        okhttp3.Call localVarCall = creditBankIncomePdfGetValidateBeforeCall(creditBankIncomePDFGetRequest, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve information from the bank accounts used for income verification in PDF format (asynchronously)
     * &#x60;/credit/bank_income/pdf/get&#x60; returns the most recent bank income report for a specified user in PDF format.
     * @param creditBankIncomePDFGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A PDF of the Bank Income Report </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditbank_incomepdfget">Retrieve information from the bank accounts used for income verification in PDF format Documentation</a>
     */
    public okhttp3.Call creditBankIncomePdfGetAsync(CreditBankIncomePDFGetRequest creditBankIncomePDFGetRequest, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditBankIncomePdfGetValidateBeforeCall(creditBankIncomePDFGetRequest, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditBankIncomeRefresh
     * @param creditBankIncomeRefreshRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditbank_incomerefresh">Refresh a user&#39;s bank income information Documentation</a>
     */
    public okhttp3.Call creditBankIncomeRefreshCall(CreditBankIncomeRefreshRequest creditBankIncomeRefreshRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditBankIncomeRefreshRequest;

        // create path and map variables
        String localVarPath = "/credit/bank_income/refresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditBankIncomeRefreshValidateBeforeCall(CreditBankIncomeRefreshRequest creditBankIncomeRefreshRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditBankIncomeRefreshRequest' is set
        if (creditBankIncomeRefreshRequest == null) {
            throw new ApiException("Missing the required parameter 'creditBankIncomeRefreshRequest' when calling creditBankIncomeRefresh(Async)");
        }

        return creditBankIncomeRefreshCall(creditBankIncomeRefreshRequest, _callback);

    }

    /**
     * Refresh a user&#39;s bank income information
     * &#x60;/credit/bank_income/refresh&#x60; refreshes the bank income report data for a specific user.
     * @param creditBankIncomeRefreshRequest  (required)
     * @return CreditBankIncomeRefreshResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditbank_incomerefresh">Refresh a user&#39;s bank income information Documentation</a>
     */
    public CreditBankIncomeRefreshResponse creditBankIncomeRefresh(CreditBankIncomeRefreshRequest creditBankIncomeRefreshRequest) throws ApiException {
        ApiResponse<CreditBankIncomeRefreshResponse> localVarResp = creditBankIncomeRefreshWithHttpInfo(creditBankIncomeRefreshRequest);
        return localVarResp.getData();
    }

    /**
     * Refresh a user&#39;s bank income information
     * &#x60;/credit/bank_income/refresh&#x60; refreshes the bank income report data for a specific user.
     * @param creditBankIncomeRefreshRequest  (required)
     * @return ApiResponse&lt;CreditBankIncomeRefreshResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditbank_incomerefresh">Refresh a user&#39;s bank income information Documentation</a>
     */
    public ApiResponse<CreditBankIncomeRefreshResponse> creditBankIncomeRefreshWithHttpInfo(CreditBankIncomeRefreshRequest creditBankIncomeRefreshRequest) throws ApiException {
        okhttp3.Call localVarCall = creditBankIncomeRefreshValidateBeforeCall(creditBankIncomeRefreshRequest, null);
        Type localVarReturnType = new TypeToken<CreditBankIncomeRefreshResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh a user&#39;s bank income information (asynchronously)
     * &#x60;/credit/bank_income/refresh&#x60; refreshes the bank income report data for a specific user.
     * @param creditBankIncomeRefreshRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditbank_incomerefresh">Refresh a user&#39;s bank income information Documentation</a>
     */
    public okhttp3.Call creditBankIncomeRefreshAsync(CreditBankIncomeRefreshRequest creditBankIncomeRefreshRequest, final ApiCallback<CreditBankIncomeRefreshResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditBankIncomeRefreshValidateBeforeCall(creditBankIncomeRefreshRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditBankIncomeRefreshResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditEmploymentGet
     * @param creditEmploymentGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditemploymentget">Retrieve a summary of an individual&#39;s employment information Documentation</a>
     */
    public okhttp3.Call creditEmploymentGetCall(CreditEmploymentGetRequest creditEmploymentGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditEmploymentGetRequest;

        // create path and map variables
        String localVarPath = "/credit/employment/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditEmploymentGetValidateBeforeCall(CreditEmploymentGetRequest creditEmploymentGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditEmploymentGetRequest' is set
        if (creditEmploymentGetRequest == null) {
            throw new ApiException("Missing the required parameter 'creditEmploymentGetRequest' when calling creditEmploymentGet(Async)");
        }

        return creditEmploymentGetCall(creditEmploymentGetRequest, _callback);

    }

    /**
     * Retrieve a summary of an individual&#39;s employment information
     * &#x60;/credit/employment/get&#x60; returns a list of items with employment information from a user&#39;s payroll provider that was verified by an end user.
     * @param creditEmploymentGetRequest  (required)
     * @return CreditEmploymentGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditemploymentget">Retrieve a summary of an individual&#39;s employment information Documentation</a>
     */
    public CreditEmploymentGetResponse creditEmploymentGet(CreditEmploymentGetRequest creditEmploymentGetRequest) throws ApiException {
        ApiResponse<CreditEmploymentGetResponse> localVarResp = creditEmploymentGetWithHttpInfo(creditEmploymentGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a summary of an individual&#39;s employment information
     * &#x60;/credit/employment/get&#x60; returns a list of items with employment information from a user&#39;s payroll provider that was verified by an end user.
     * @param creditEmploymentGetRequest  (required)
     * @return ApiResponse&lt;CreditEmploymentGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditemploymentget">Retrieve a summary of an individual&#39;s employment information Documentation</a>
     */
    public ApiResponse<CreditEmploymentGetResponse> creditEmploymentGetWithHttpInfo(CreditEmploymentGetRequest creditEmploymentGetRequest) throws ApiException {
        okhttp3.Call localVarCall = creditEmploymentGetValidateBeforeCall(creditEmploymentGetRequest, null);
        Type localVarReturnType = new TypeToken<CreditEmploymentGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a summary of an individual&#39;s employment information (asynchronously)
     * &#x60;/credit/employment/get&#x60; returns a list of items with employment information from a user&#39;s payroll provider that was verified by an end user.
     * @param creditEmploymentGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditemploymentget">Retrieve a summary of an individual&#39;s employment information Documentation</a>
     */
    public okhttp3.Call creditEmploymentGetAsync(CreditEmploymentGetRequest creditEmploymentGetRequest, final ApiCallback<CreditEmploymentGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditEmploymentGetValidateBeforeCall(creditEmploymentGetRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditEmploymentGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditFreddieMacReportsGet
     * @param creditFreddieMacReportsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint. Documentation</a>
     */
    public okhttp3.Call creditFreddieMacReportsGetCall(CreditFreddieMacReportsGetRequest creditFreddieMacReportsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditFreddieMacReportsGetRequest;

        // create path and map variables
        String localVarPath = "/credit/freddie_mac/reports/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditFreddieMacReportsGetValidateBeforeCall(CreditFreddieMacReportsGetRequest creditFreddieMacReportsGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditFreddieMacReportsGetRequest' is set
        if (creditFreddieMacReportsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'creditFreddieMacReportsGetRequest' when calling creditFreddieMacReportsGet(Async)");
        }

        return creditFreddieMacReportsGetCall(creditFreddieMacReportsGetRequest, _callback);

    }

    /**
     * Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
     * The &#x60;credit/asset_report/freddie_mac/get&#x60; endpoint retrieves the Verification of Assets and Verification of Employment reports.
     * @param creditFreddieMacReportsGetRequest  (required)
     * @return CreditFreddieMacReportsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint. Documentation</a>
     */
    public CreditFreddieMacReportsGetResponse creditFreddieMacReportsGet(CreditFreddieMacReportsGetRequest creditFreddieMacReportsGetRequest) throws ApiException {
        ApiResponse<CreditFreddieMacReportsGetResponse> localVarResp = creditFreddieMacReportsGetWithHttpInfo(creditFreddieMacReportsGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
     * The &#x60;credit/asset_report/freddie_mac/get&#x60; endpoint retrieves the Verification of Assets and Verification of Employment reports.
     * @param creditFreddieMacReportsGetRequest  (required)
     * @return ApiResponse&lt;CreditFreddieMacReportsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint. Documentation</a>
     */
    public ApiResponse<CreditFreddieMacReportsGetResponse> creditFreddieMacReportsGetWithHttpInfo(CreditFreddieMacReportsGetRequest creditFreddieMacReportsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = creditFreddieMacReportsGetValidateBeforeCall(creditFreddieMacReportsGetRequest, null);
        Type localVarReturnType = new TypeToken<CreditFreddieMacReportsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint. (asynchronously)
     * The &#x60;credit/asset_report/freddie_mac/get&#x60; endpoint retrieves the Verification of Assets and Verification of Employment reports.
     * @param creditFreddieMacReportsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint. Documentation</a>
     */
    public okhttp3.Call creditFreddieMacReportsGetAsync(CreditFreddieMacReportsGetRequest creditFreddieMacReportsGetRequest, final ApiCallback<CreditFreddieMacReportsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditFreddieMacReportsGetValidateBeforeCall(creditFreddieMacReportsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditFreddieMacReportsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditPayrollIncomeGet
     * @param creditPayrollIncomeGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditpayroll_incomeget">Retrieve a user&#39;s payroll information Documentation</a>
     */
    public okhttp3.Call creditPayrollIncomeGetCall(CreditPayrollIncomeGetRequest creditPayrollIncomeGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditPayrollIncomeGetRequest;

        // create path and map variables
        String localVarPath = "/credit/payroll_income/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditPayrollIncomeGetValidateBeforeCall(CreditPayrollIncomeGetRequest creditPayrollIncomeGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditPayrollIncomeGetRequest' is set
        if (creditPayrollIncomeGetRequest == null) {
            throw new ApiException("Missing the required parameter 'creditPayrollIncomeGetRequest' when calling creditPayrollIncomeGet(Async)");
        }

        return creditPayrollIncomeGetCall(creditPayrollIncomeGetRequest, _callback);

    }

    /**
     * Retrieve a user&#39;s payroll information
     * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
     * @param creditPayrollIncomeGetRequest  (required)
     * @return CreditPayrollIncomeGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditpayroll_incomeget">Retrieve a user&#39;s payroll information Documentation</a>
     */
    public CreditPayrollIncomeGetResponse creditPayrollIncomeGet(CreditPayrollIncomeGetRequest creditPayrollIncomeGetRequest) throws ApiException {
        ApiResponse<CreditPayrollIncomeGetResponse> localVarResp = creditPayrollIncomeGetWithHttpInfo(creditPayrollIncomeGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a user&#39;s payroll information
     * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
     * @param creditPayrollIncomeGetRequest  (required)
     * @return ApiResponse&lt;CreditPayrollIncomeGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditpayroll_incomeget">Retrieve a user&#39;s payroll information Documentation</a>
     */
    public ApiResponse<CreditPayrollIncomeGetResponse> creditPayrollIncomeGetWithHttpInfo(CreditPayrollIncomeGetRequest creditPayrollIncomeGetRequest) throws ApiException {
        okhttp3.Call localVarCall = creditPayrollIncomeGetValidateBeforeCall(creditPayrollIncomeGetRequest, null);
        Type localVarReturnType = new TypeToken<CreditPayrollIncomeGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a user&#39;s payroll information (asynchronously)
     * This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
     * @param creditPayrollIncomeGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditpayroll_incomeget">Retrieve a user&#39;s payroll information Documentation</a>
     */
    public okhttp3.Call creditPayrollIncomeGetAsync(CreditPayrollIncomeGetRequest creditPayrollIncomeGetRequest, final ApiCallback<CreditPayrollIncomeGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditPayrollIncomeGetValidateBeforeCall(creditPayrollIncomeGetRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditPayrollIncomeGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditPayrollIncomePrecheck
     * @param creditPayrollIncomePrecheckRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditpayroll_incomeprecheck">Check income verification eligibility and optimize conversion Documentation</a>
     */
    public okhttp3.Call creditPayrollIncomePrecheckCall(CreditPayrollIncomePrecheckRequest creditPayrollIncomePrecheckRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditPayrollIncomePrecheckRequest;

        // create path and map variables
        String localVarPath = "/credit/payroll_income/precheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditPayrollIncomePrecheckValidateBeforeCall(CreditPayrollIncomePrecheckRequest creditPayrollIncomePrecheckRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditPayrollIncomePrecheckRequest' is set
        if (creditPayrollIncomePrecheckRequest == null) {
            throw new ApiException("Missing the required parameter 'creditPayrollIncomePrecheckRequest' when calling creditPayrollIncomePrecheck(Async)");
        }

        return creditPayrollIncomePrecheckCall(creditPayrollIncomePrecheckRequest, _callback);

    }

    /**
     * Check income verification eligibility and optimize conversion
     * &#x60;/credit/payroll_income/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing &#x60;employer&#x60; data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the &#x60;employer&#x60; and &#x60;access_tokens&#x60; fields. &#x60;employer_good&#x60; and &#x60;employer_bad&#x60; will result in &#x60;HIGH&#x60; and &#x60;LOW&#x60; confidence values, respectively. &#x60;employer_multi&#x60; will result in a &#x60;HIGH&#x60; confidence with multiple payroll options. Likewise, &#x60;access_good&#x60; and &#x60;access_bad&#x60; will result in &#x60;HIGH&#x60; and &#x60;LOW&#x60; confidence values, respectively. Any other value for &#x60;employer&#x60; and &#x60;access_tokens&#x60; in Sandbox will result in &#x60;UNKNOWN&#x60; confidence.
     * @param creditPayrollIncomePrecheckRequest  (required)
     * @return CreditPayrollIncomePrecheckResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditpayroll_incomeprecheck">Check income verification eligibility and optimize conversion Documentation</a>
     */
    public CreditPayrollIncomePrecheckResponse creditPayrollIncomePrecheck(CreditPayrollIncomePrecheckRequest creditPayrollIncomePrecheckRequest) throws ApiException {
        ApiResponse<CreditPayrollIncomePrecheckResponse> localVarResp = creditPayrollIncomePrecheckWithHttpInfo(creditPayrollIncomePrecheckRequest);
        return localVarResp.getData();
    }

    /**
     * Check income verification eligibility and optimize conversion
     * &#x60;/credit/payroll_income/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing &#x60;employer&#x60; data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the &#x60;employer&#x60; and &#x60;access_tokens&#x60; fields. &#x60;employer_good&#x60; and &#x60;employer_bad&#x60; will result in &#x60;HIGH&#x60; and &#x60;LOW&#x60; confidence values, respectively. &#x60;employer_multi&#x60; will result in a &#x60;HIGH&#x60; confidence with multiple payroll options. Likewise, &#x60;access_good&#x60; and &#x60;access_bad&#x60; will result in &#x60;HIGH&#x60; and &#x60;LOW&#x60; confidence values, respectively. Any other value for &#x60;employer&#x60; and &#x60;access_tokens&#x60; in Sandbox will result in &#x60;UNKNOWN&#x60; confidence.
     * @param creditPayrollIncomePrecheckRequest  (required)
     * @return ApiResponse&lt;CreditPayrollIncomePrecheckResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditpayroll_incomeprecheck">Check income verification eligibility and optimize conversion Documentation</a>
     */
    public ApiResponse<CreditPayrollIncomePrecheckResponse> creditPayrollIncomePrecheckWithHttpInfo(CreditPayrollIncomePrecheckRequest creditPayrollIncomePrecheckRequest) throws ApiException {
        okhttp3.Call localVarCall = creditPayrollIncomePrecheckValidateBeforeCall(creditPayrollIncomePrecheckRequest, null);
        Type localVarReturnType = new TypeToken<CreditPayrollIncomePrecheckResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check income verification eligibility and optimize conversion (asynchronously)
     * &#x60;/credit/payroll_income/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing &#x60;employer&#x60; data will increase the chance of receiving a useful result.  When testing in Sandbox, you can control the results by providing special test values in the &#x60;employer&#x60; and &#x60;access_tokens&#x60; fields. &#x60;employer_good&#x60; and &#x60;employer_bad&#x60; will result in &#x60;HIGH&#x60; and &#x60;LOW&#x60; confidence values, respectively. &#x60;employer_multi&#x60; will result in a &#x60;HIGH&#x60; confidence with multiple payroll options. Likewise, &#x60;access_good&#x60; and &#x60;access_bad&#x60; will result in &#x60;HIGH&#x60; and &#x60;LOW&#x60; confidence values, respectively. Any other value for &#x60;employer&#x60; and &#x60;access_tokens&#x60; in Sandbox will result in &#x60;UNKNOWN&#x60; confidence.
     * @param creditPayrollIncomePrecheckRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditpayroll_incomeprecheck">Check income verification eligibility and optimize conversion Documentation</a>
     */
    public okhttp3.Call creditPayrollIncomePrecheckAsync(CreditPayrollIncomePrecheckRequest creditPayrollIncomePrecheckRequest, final ApiCallback<CreditPayrollIncomePrecheckResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditPayrollIncomePrecheckValidateBeforeCall(creditPayrollIncomePrecheckRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditPayrollIncomePrecheckResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditPayrollIncomeRefresh
     * @param creditPayrollIncomeRefreshRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditpayroll_incomerefresh">Refresh a digital payroll income verification Documentation</a>
     */
    public okhttp3.Call creditPayrollIncomeRefreshCall(CreditPayrollIncomeRefreshRequest creditPayrollIncomeRefreshRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditPayrollIncomeRefreshRequest;

        // create path and map variables
        String localVarPath = "/credit/payroll_income/refresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditPayrollIncomeRefreshValidateBeforeCall(CreditPayrollIncomeRefreshRequest creditPayrollIncomeRefreshRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditPayrollIncomeRefreshRequest' is set
        if (creditPayrollIncomeRefreshRequest == null) {
            throw new ApiException("Missing the required parameter 'creditPayrollIncomeRefreshRequest' when calling creditPayrollIncomeRefresh(Async)");
        }

        return creditPayrollIncomeRefreshCall(creditPayrollIncomeRefreshRequest, _callback);

    }

    /**
     * Refresh a digital payroll income verification
     * &#x60;/credit/payroll_income/refresh&#x60; refreshes a given digital payroll income verification.
     * @param creditPayrollIncomeRefreshRequest  (required)
     * @return CreditPayrollIncomeRefreshResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditpayroll_incomerefresh">Refresh a digital payroll income verification Documentation</a>
     */
    public CreditPayrollIncomeRefreshResponse creditPayrollIncomeRefresh(CreditPayrollIncomeRefreshRequest creditPayrollIncomeRefreshRequest) throws ApiException {
        ApiResponse<CreditPayrollIncomeRefreshResponse> localVarResp = creditPayrollIncomeRefreshWithHttpInfo(creditPayrollIncomeRefreshRequest);
        return localVarResp.getData();
    }

    /**
     * Refresh a digital payroll income verification
     * &#x60;/credit/payroll_income/refresh&#x60; refreshes a given digital payroll income verification.
     * @param creditPayrollIncomeRefreshRequest  (required)
     * @return ApiResponse&lt;CreditPayrollIncomeRefreshResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditpayroll_incomerefresh">Refresh a digital payroll income verification Documentation</a>
     */
    public ApiResponse<CreditPayrollIncomeRefreshResponse> creditPayrollIncomeRefreshWithHttpInfo(CreditPayrollIncomeRefreshRequest creditPayrollIncomeRefreshRequest) throws ApiException {
        okhttp3.Call localVarCall = creditPayrollIncomeRefreshValidateBeforeCall(creditPayrollIncomeRefreshRequest, null);
        Type localVarReturnType = new TypeToken<CreditPayrollIncomeRefreshResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh a digital payroll income verification (asynchronously)
     * &#x60;/credit/payroll_income/refresh&#x60; refreshes a given digital payroll income verification.
     * @param creditPayrollIncomeRefreshRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditpayroll_incomerefresh">Refresh a digital payroll income verification Documentation</a>
     */
    public okhttp3.Call creditPayrollIncomeRefreshAsync(CreditPayrollIncomeRefreshRequest creditPayrollIncomeRefreshRequest, final ApiCallback<CreditPayrollIncomeRefreshResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditPayrollIncomeRefreshValidateBeforeCall(creditPayrollIncomeRefreshRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditPayrollIncomeRefreshResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditRelayCreate
     * @param creditRelayCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#creditrelaycreate">Create a relay token to share an Asset Report with a partner client (beta) Documentation</a>
     */
    public okhttp3.Call creditRelayCreateCall(CreditRelayCreateRequest creditRelayCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditRelayCreateRequest;

        // create path and map variables
        String localVarPath = "/credit/relay/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditRelayCreateValidateBeforeCall(CreditRelayCreateRequest creditRelayCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditRelayCreateRequest' is set
        if (creditRelayCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'creditRelayCreateRequest' when calling creditRelayCreate(Async)");
        }

        return creditRelayCreateCall(creditRelayCreateRequest, _callback);

    }

    /**
     * Create a relay token to share an Asset Report with a partner client (beta)
     * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in &#x60;/asset_report/create&#x60;.  To grant a third party access to an Asset Report, use the &#x60;/credit/relay/create&#x60; endpoint to create a &#x60;relay_token&#x60; and then pass that token to your third party. Each third party has its own &#x60;secondary_client_id&#x60;; for example, &#x60;ce5bd328dcd34123456&#x60;. You&#39;ll need to create a separate &#x60;relay_token&#x60; for each third party that needs access to the report on your behalf.
     * @param creditRelayCreateRequest  (required)
     * @return CreditRelayCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#creditrelaycreate">Create a relay token to share an Asset Report with a partner client (beta) Documentation</a>
     */
    public CreditRelayCreateResponse creditRelayCreate(CreditRelayCreateRequest creditRelayCreateRequest) throws ApiException {
        ApiResponse<CreditRelayCreateResponse> localVarResp = creditRelayCreateWithHttpInfo(creditRelayCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a relay token to share an Asset Report with a partner client (beta)
     * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in &#x60;/asset_report/create&#x60;.  To grant a third party access to an Asset Report, use the &#x60;/credit/relay/create&#x60; endpoint to create a &#x60;relay_token&#x60; and then pass that token to your third party. Each third party has its own &#x60;secondary_client_id&#x60;; for example, &#x60;ce5bd328dcd34123456&#x60;. You&#39;ll need to create a separate &#x60;relay_token&#x60; for each third party that needs access to the report on your behalf.
     * @param creditRelayCreateRequest  (required)
     * @return ApiResponse&lt;CreditRelayCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#creditrelaycreate">Create a relay token to share an Asset Report with a partner client (beta) Documentation</a>
     */
    public ApiResponse<CreditRelayCreateResponse> creditRelayCreateWithHttpInfo(CreditRelayCreateRequest creditRelayCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = creditRelayCreateValidateBeforeCall(creditRelayCreateRequest, null);
        Type localVarReturnType = new TypeToken<CreditRelayCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a relay token to share an Asset Report with a partner client (beta) (asynchronously)
     * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in &#x60;/asset_report/create&#x60;.  To grant a third party access to an Asset Report, use the &#x60;/credit/relay/create&#x60; endpoint to create a &#x60;relay_token&#x60; and then pass that token to your third party. Each third party has its own &#x60;secondary_client_id&#x60;; for example, &#x60;ce5bd328dcd34123456&#x60;. You&#39;ll need to create a separate &#x60;relay_token&#x60; for each third party that needs access to the report on your behalf.
     * @param creditRelayCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#creditrelaycreate">Create a relay token to share an Asset Report with a partner client (beta) Documentation</a>
     */
    public okhttp3.Call creditRelayCreateAsync(CreditRelayCreateRequest creditRelayCreateRequest, final ApiCallback<CreditRelayCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditRelayCreateValidateBeforeCall(creditRelayCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditRelayCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditRelayGet
     * @param creditRelayGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#creditrelayget">Retrieve the reports associated with a relay token that was shared with you (beta) Documentation</a>
     */
    public okhttp3.Call creditRelayGetCall(CreditRelayGetRequest creditRelayGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditRelayGetRequest;

        // create path and map variables
        String localVarPath = "/credit/relay/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditRelayGetValidateBeforeCall(CreditRelayGetRequest creditRelayGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditRelayGetRequest' is set
        if (creditRelayGetRequest == null) {
            throw new ApiException("Missing the required parameter 'creditRelayGetRequest' when calling creditRelayGet(Async)");
        }

        return creditRelayGetCall(creditRelayGetRequest, _callback);

    }

    /**
     * Retrieve the reports associated with a relay token that was shared with you (beta)
     * &#x60;/credit/relay/get&#x60; allows third parties to receive a report that was shared with them, using a &#x60;relay_token&#x60; that was created by the report owner.
     * @param creditRelayGetRequest  (required)
     * @return AssetReportGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#creditrelayget">Retrieve the reports associated with a relay token that was shared with you (beta) Documentation</a>
     */
    public AssetReportGetResponse creditRelayGet(CreditRelayGetRequest creditRelayGetRequest) throws ApiException {
        ApiResponse<AssetReportGetResponse> localVarResp = creditRelayGetWithHttpInfo(creditRelayGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve the reports associated with a relay token that was shared with you (beta)
     * &#x60;/credit/relay/get&#x60; allows third parties to receive a report that was shared with them, using a &#x60;relay_token&#x60; that was created by the report owner.
     * @param creditRelayGetRequest  (required)
     * @return ApiResponse&lt;AssetReportGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#creditrelayget">Retrieve the reports associated with a relay token that was shared with you (beta) Documentation</a>
     */
    public ApiResponse<AssetReportGetResponse> creditRelayGetWithHttpInfo(CreditRelayGetRequest creditRelayGetRequest) throws ApiException {
        okhttp3.Call localVarCall = creditRelayGetValidateBeforeCall(creditRelayGetRequest, null);
        Type localVarReturnType = new TypeToken<AssetReportGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the reports associated with a relay token that was shared with you (beta) (asynchronously)
     * &#x60;/credit/relay/get&#x60; allows third parties to receive a report that was shared with them, using a &#x60;relay_token&#x60; that was created by the report owner.
     * @param creditRelayGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#creditrelayget">Retrieve the reports associated with a relay token that was shared with you (beta) Documentation</a>
     */
    public okhttp3.Call creditRelayGetAsync(CreditRelayGetRequest creditRelayGetRequest, final ApiCallback<AssetReportGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditRelayGetValidateBeforeCall(creditRelayGetRequest, _callback);
        Type localVarReturnType = new TypeToken<AssetReportGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditRelayRefresh
     * @param creditRelayRefreshRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#creditrelayrefresh">Refresh a report of a relay token (beta) Documentation</a>
     */
    public okhttp3.Call creditRelayRefreshCall(CreditRelayRefreshRequest creditRelayRefreshRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditRelayRefreshRequest;

        // create path and map variables
        String localVarPath = "/credit/relay/refresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditRelayRefreshValidateBeforeCall(CreditRelayRefreshRequest creditRelayRefreshRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditRelayRefreshRequest' is set
        if (creditRelayRefreshRequest == null) {
            throw new ApiException("Missing the required parameter 'creditRelayRefreshRequest' when calling creditRelayRefresh(Async)");
        }

        return creditRelayRefreshCall(creditRelayRefreshRequest, _callback);

    }

    /**
     * Refresh a report of a relay token (beta)
     * The &#x60;/credit/relay/refresh&#x60; endpoint allows third parties to refresh a report that was relayed to them, using a &#x60;relay_token&#x60; that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the &#x60;days_requested&#x60; value of the original report.
     * @param creditRelayRefreshRequest  (required)
     * @return CreditRelayRefreshResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#creditrelayrefresh">Refresh a report of a relay token (beta) Documentation</a>
     */
    public CreditRelayRefreshResponse creditRelayRefresh(CreditRelayRefreshRequest creditRelayRefreshRequest) throws ApiException {
        ApiResponse<CreditRelayRefreshResponse> localVarResp = creditRelayRefreshWithHttpInfo(creditRelayRefreshRequest);
        return localVarResp.getData();
    }

    /**
     * Refresh a report of a relay token (beta)
     * The &#x60;/credit/relay/refresh&#x60; endpoint allows third parties to refresh a report that was relayed to them, using a &#x60;relay_token&#x60; that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the &#x60;days_requested&#x60; value of the original report.
     * @param creditRelayRefreshRequest  (required)
     * @return ApiResponse&lt;CreditRelayRefreshResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#creditrelayrefresh">Refresh a report of a relay token (beta) Documentation</a>
     */
    public ApiResponse<CreditRelayRefreshResponse> creditRelayRefreshWithHttpInfo(CreditRelayRefreshRequest creditRelayRefreshRequest) throws ApiException {
        okhttp3.Call localVarCall = creditRelayRefreshValidateBeforeCall(creditRelayRefreshRequest, null);
        Type localVarReturnType = new TypeToken<CreditRelayRefreshResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh a report of a relay token (beta) (asynchronously)
     * The &#x60;/credit/relay/refresh&#x60; endpoint allows third parties to refresh a report that was relayed to them, using a &#x60;relay_token&#x60; that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the &#x60;days_requested&#x60; value of the original report.
     * @param creditRelayRefreshRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#creditrelayrefresh">Refresh a report of a relay token (beta) Documentation</a>
     */
    public okhttp3.Call creditRelayRefreshAsync(CreditRelayRefreshRequest creditRelayRefreshRequest, final ApiCallback<CreditRelayRefreshResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditRelayRefreshValidateBeforeCall(creditRelayRefreshRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditRelayRefreshResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditRelayRemove
     * @param creditRelayRemoveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#creditrelayremove">Remove relay token (beta) Documentation</a>
     */
    public okhttp3.Call creditRelayRemoveCall(CreditRelayRemoveRequest creditRelayRemoveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditRelayRemoveRequest;

        // create path and map variables
        String localVarPath = "/credit/relay/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditRelayRemoveValidateBeforeCall(CreditRelayRemoveRequest creditRelayRemoveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditRelayRemoveRequest' is set
        if (creditRelayRemoveRequest == null) {
            throw new ApiException("Missing the required parameter 'creditRelayRemoveRequest' when calling creditRelayRemove(Async)");
        }

        return creditRelayRemoveCall(creditRelayRemoveRequest, _callback);

    }

    /**
     * Remove relay token (beta)
     * The &#x60;/credit/relay/remove&#x60; endpoint allows you to invalidate a &#x60;relay_token&#x60;. The third party holding the token will no longer be able to access or refresh the reports which the &#x60;relay_token&#x60; gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given &#x60;relay_token&#x60;.
     * @param creditRelayRemoveRequest  (required)
     * @return CreditRelayRemoveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#creditrelayremove">Remove relay token (beta) Documentation</a>
     */
    public CreditRelayRemoveResponse creditRelayRemove(CreditRelayRemoveRequest creditRelayRemoveRequest) throws ApiException {
        ApiResponse<CreditRelayRemoveResponse> localVarResp = creditRelayRemoveWithHttpInfo(creditRelayRemoveRequest);
        return localVarResp.getData();
    }

    /**
     * Remove relay token (beta)
     * The &#x60;/credit/relay/remove&#x60; endpoint allows you to invalidate a &#x60;relay_token&#x60;. The third party holding the token will no longer be able to access or refresh the reports which the &#x60;relay_token&#x60; gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given &#x60;relay_token&#x60;.
     * @param creditRelayRemoveRequest  (required)
     * @return ApiResponse&lt;CreditRelayRemoveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#creditrelayremove">Remove relay token (beta) Documentation</a>
     */
    public ApiResponse<CreditRelayRemoveResponse> creditRelayRemoveWithHttpInfo(CreditRelayRemoveRequest creditRelayRemoveRequest) throws ApiException {
        okhttp3.Call localVarCall = creditRelayRemoveValidateBeforeCall(creditRelayRemoveRequest, null);
        Type localVarReturnType = new TypeToken<CreditRelayRemoveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove relay token (beta) (asynchronously)
     * The &#x60;/credit/relay/remove&#x60; endpoint allows you to invalidate a &#x60;relay_token&#x60;. The third party holding the token will no longer be able to access or refresh the reports which the &#x60;relay_token&#x60; gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given &#x60;relay_token&#x60;.
     * @param creditRelayRemoveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/assets/#creditrelayremove">Remove relay token (beta) Documentation</a>
     */
    public okhttp3.Call creditRelayRemoveAsync(CreditRelayRemoveRequest creditRelayRemoveRequest, final ApiCallback<CreditRelayRemoveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditRelayRemoveValidateBeforeCall(creditRelayRemoveRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditRelayRemoveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditReportAuditCopyRemove
     * @param creditAuditCopyTokenRemoveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditaudit_copy_tokenremove">Remove an Audit Copy token Documentation</a>
     */
    public okhttp3.Call creditReportAuditCopyRemoveCall(CreditAuditCopyTokenRemoveRequest creditAuditCopyTokenRemoveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditAuditCopyTokenRemoveRequest;

        // create path and map variables
        String localVarPath = "/credit/audit_copy_token/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditReportAuditCopyRemoveValidateBeforeCall(CreditAuditCopyTokenRemoveRequest creditAuditCopyTokenRemoveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditAuditCopyTokenRemoveRequest' is set
        if (creditAuditCopyTokenRemoveRequest == null) {
            throw new ApiException("Missing the required parameter 'creditAuditCopyTokenRemoveRequest' when calling creditReportAuditCopyRemove(Async)");
        }

        return creditReportAuditCopyRemoveCall(creditAuditCopyTokenRemoveRequest, _callback);

    }

    /**
     * Remove an Audit Copy token
     * The &#x60;/credit/audit_copy_token/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @param creditAuditCopyTokenRemoveRequest  (required)
     * @return CreditAuditCopyTokenRemoveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditaudit_copy_tokenremove">Remove an Audit Copy token Documentation</a>
     */
    public CreditAuditCopyTokenRemoveResponse creditReportAuditCopyRemove(CreditAuditCopyTokenRemoveRequest creditAuditCopyTokenRemoveRequest) throws ApiException {
        ApiResponse<CreditAuditCopyTokenRemoveResponse> localVarResp = creditReportAuditCopyRemoveWithHttpInfo(creditAuditCopyTokenRemoveRequest);
        return localVarResp.getData();
    }

    /**
     * Remove an Audit Copy token
     * The &#x60;/credit/audit_copy_token/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @param creditAuditCopyTokenRemoveRequest  (required)
     * @return ApiResponse&lt;CreditAuditCopyTokenRemoveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditaudit_copy_tokenremove">Remove an Audit Copy token Documentation</a>
     */
    public ApiResponse<CreditAuditCopyTokenRemoveResponse> creditReportAuditCopyRemoveWithHttpInfo(CreditAuditCopyTokenRemoveRequest creditAuditCopyTokenRemoveRequest) throws ApiException {
        okhttp3.Call localVarCall = creditReportAuditCopyRemoveValidateBeforeCall(creditAuditCopyTokenRemoveRequest, null);
        Type localVarReturnType = new TypeToken<CreditAuditCopyTokenRemoveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove an Audit Copy token (asynchronously)
     * The &#x60;/credit/audit_copy_token/remove&#x60; endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the &#x60;audit_copy_token&#x60; associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @param creditAuditCopyTokenRemoveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditaudit_copy_tokenremove">Remove an Audit Copy token Documentation</a>
     */
    public okhttp3.Call creditReportAuditCopyRemoveAsync(CreditAuditCopyTokenRemoveRequest creditAuditCopyTokenRemoveRequest, final ApiCallback<CreditAuditCopyTokenRemoveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditReportAuditCopyRemoveValidateBeforeCall(creditAuditCopyTokenRemoveRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditAuditCopyTokenRemoveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creditSessionsGet
     * @param creditSessionsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditsessionsget">Retrieve Link sessions for your user Documentation</a>
     */
    public okhttp3.Call creditSessionsGetCall(CreditSessionsGetRequest creditSessionsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditSessionsGetRequest;

        // create path and map variables
        String localVarPath = "/credit/sessions/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creditSessionsGetValidateBeforeCall(CreditSessionsGetRequest creditSessionsGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditSessionsGetRequest' is set
        if (creditSessionsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'creditSessionsGetRequest' when calling creditSessionsGet(Async)");
        }

        return creditSessionsGetCall(creditSessionsGetRequest, _callback);

    }

    /**
     * Retrieve Link sessions for your user
     * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
     * @param creditSessionsGetRequest  (required)
     * @return CreditSessionsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditsessionsget">Retrieve Link sessions for your user Documentation</a>
     */
    public CreditSessionsGetResponse creditSessionsGet(CreditSessionsGetRequest creditSessionsGetRequest) throws ApiException {
        ApiResponse<CreditSessionsGetResponse> localVarResp = creditSessionsGetWithHttpInfo(creditSessionsGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve Link sessions for your user
     * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
     * @param creditSessionsGetRequest  (required)
     * @return ApiResponse&lt;CreditSessionsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditsessionsget">Retrieve Link sessions for your user Documentation</a>
     */
    public ApiResponse<CreditSessionsGetResponse> creditSessionsGetWithHttpInfo(CreditSessionsGetRequest creditSessionsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = creditSessionsGetValidateBeforeCall(creditSessionsGetRequest, null);
        Type localVarReturnType = new TypeToken<CreditSessionsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Link sessions for your user (asynchronously)
     * This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.  These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
     * @param creditSessionsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#creditsessionsget">Retrieve Link sessions for your user Documentation</a>
     */
    public okhttp3.Call creditSessionsGetAsync(CreditSessionsGetRequest creditSessionsGetRequest, final ApiCallback<CreditSessionsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = creditSessionsGetValidateBeforeCall(creditSessionsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditSessionsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dashboardUserGet
     * @param dashboardUserGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#dashboard_userget">Retrieve a dashboard user Documentation</a>
     */
    public okhttp3.Call dashboardUserGetCall(DashboardUserGetRequest dashboardUserGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dashboardUserGetRequest;

        // create path and map variables
        String localVarPath = "/dashboard_user/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dashboardUserGetValidateBeforeCall(DashboardUserGetRequest dashboardUserGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardUserGetRequest' is set
        if (dashboardUserGetRequest == null) {
            throw new ApiException("Missing the required parameter 'dashboardUserGetRequest' when calling dashboardUserGet(Async)");
        }

        return dashboardUserGetCall(dashboardUserGetRequest, _callback);

    }

    /**
     * Retrieve a dashboard user
     * Retrieve information about a dashboard user.
     * @param dashboardUserGetRequest  (required)
     * @return DashboardUserGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#dashboard_userget">Retrieve a dashboard user Documentation</a>
     */
    public DashboardUserGetResponse dashboardUserGet(DashboardUserGetRequest dashboardUserGetRequest) throws ApiException {
        ApiResponse<DashboardUserGetResponse> localVarResp = dashboardUserGetWithHttpInfo(dashboardUserGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a dashboard user
     * Retrieve information about a dashboard user.
     * @param dashboardUserGetRequest  (required)
     * @return ApiResponse&lt;DashboardUserGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#dashboard_userget">Retrieve a dashboard user Documentation</a>
     */
    public ApiResponse<DashboardUserGetResponse> dashboardUserGetWithHttpInfo(DashboardUserGetRequest dashboardUserGetRequest) throws ApiException {
        okhttp3.Call localVarCall = dashboardUserGetValidateBeforeCall(dashboardUserGetRequest, null);
        Type localVarReturnType = new TypeToken<DashboardUserGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a dashboard user (asynchronously)
     * Retrieve information about a dashboard user.
     * @param dashboardUserGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#dashboard_userget">Retrieve a dashboard user Documentation</a>
     */
    public okhttp3.Call dashboardUserGetAsync(DashboardUserGetRequest dashboardUserGetRequest, final ApiCallback<DashboardUserGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dashboardUserGetValidateBeforeCall(dashboardUserGetRequest, _callback);
        Type localVarReturnType = new TypeToken<DashboardUserGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dashboardUserList
     * @param dashboardUserListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#dashboard_userlist">List dashboard users Documentation</a>
     */
    public okhttp3.Call dashboardUserListCall(DashboardUserListRequest dashboardUserListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dashboardUserListRequest;

        // create path and map variables
        String localVarPath = "/dashboard_user/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dashboardUserListValidateBeforeCall(DashboardUserListRequest dashboardUserListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardUserListRequest' is set
        if (dashboardUserListRequest == null) {
            throw new ApiException("Missing the required parameter 'dashboardUserListRequest' when calling dashboardUserList(Async)");
        }

        return dashboardUserListCall(dashboardUserListRequest, _callback);

    }

    /**
     * List dashboard users
     * List all dashboard users associated with your account.
     * @param dashboardUserListRequest  (required)
     * @return DashboardUserListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#dashboard_userlist">List dashboard users Documentation</a>
     */
    public DashboardUserListResponse dashboardUserList(DashboardUserListRequest dashboardUserListRequest) throws ApiException {
        ApiResponse<DashboardUserListResponse> localVarResp = dashboardUserListWithHttpInfo(dashboardUserListRequest);
        return localVarResp.getData();
    }

    /**
     * List dashboard users
     * List all dashboard users associated with your account.
     * @param dashboardUserListRequest  (required)
     * @return ApiResponse&lt;DashboardUserListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#dashboard_userlist">List dashboard users Documentation</a>
     */
    public ApiResponse<DashboardUserListResponse> dashboardUserListWithHttpInfo(DashboardUserListRequest dashboardUserListRequest) throws ApiException {
        okhttp3.Call localVarCall = dashboardUserListValidateBeforeCall(dashboardUserListRequest, null);
        Type localVarReturnType = new TypeToken<DashboardUserListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List dashboard users (asynchronously)
     * List all dashboard users associated with your account.
     * @param dashboardUserListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#dashboard_userlist">List dashboard users Documentation</a>
     */
    public okhttp3.Call dashboardUserListAsync(DashboardUserListRequest dashboardUserListRequest, final ApiCallback<DashboardUserListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dashboardUserListValidateBeforeCall(dashboardUserListRequest, _callback);
        Type localVarReturnType = new TypeToken<DashboardUserListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for depositSwitchAltCreate
     * @param depositSwitchAltCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchaltcreate">Create a deposit switch without using Plaid Exchange Documentation</a>
     */
    public okhttp3.Call depositSwitchAltCreateCall(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = depositSwitchAltCreateRequest;

        // create path and map variables
        String localVarPath = "/deposit_switch/alt/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call depositSwitchAltCreateValidateBeforeCall(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'depositSwitchAltCreateRequest' is set
        if (depositSwitchAltCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'depositSwitchAltCreateRequest' when calling depositSwitchAltCreate(Async)");
        }

        return depositSwitchAltCreateCall(depositSwitchAltCreateRequest, _callback);

    }

    /**
     * Create a deposit switch without using Plaid Exchange
     * This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @param depositSwitchAltCreateRequest  (required)
     * @return DepositSwitchAltCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchaltcreate">Create a deposit switch without using Plaid Exchange Documentation</a>
     */
    public DepositSwitchAltCreateResponse depositSwitchAltCreate(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest) throws ApiException {
        ApiResponse<DepositSwitchAltCreateResponse> localVarResp = depositSwitchAltCreateWithHttpInfo(depositSwitchAltCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a deposit switch without using Plaid Exchange
     * This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @param depositSwitchAltCreateRequest  (required)
     * @return ApiResponse&lt;DepositSwitchAltCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchaltcreate">Create a deposit switch without using Plaid Exchange Documentation</a>
     */
    public ApiResponse<DepositSwitchAltCreateResponse> depositSwitchAltCreateWithHttpInfo(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = depositSwitchAltCreateValidateBeforeCall(depositSwitchAltCreateRequest, null);
        Type localVarReturnType = new TypeToken<DepositSwitchAltCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a deposit switch without using Plaid Exchange (asynchronously)
     * This endpoint provides an alternative to &#x60;/deposit_switch/create&#x60; for customers who have not yet fully integrated with Plaid Exchange. Like &#x60;/deposit_switch/create&#x60;, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @param depositSwitchAltCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchaltcreate">Create a deposit switch without using Plaid Exchange Documentation</a>
     */
    public okhttp3.Call depositSwitchAltCreateAsync(DepositSwitchAltCreateRequest depositSwitchAltCreateRequest, final ApiCallback<DepositSwitchAltCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = depositSwitchAltCreateValidateBeforeCall(depositSwitchAltCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<DepositSwitchAltCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for depositSwitchCreate
     * @param depositSwitchCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchcreate">Create a deposit switch Documentation</a>
     */
    public okhttp3.Call depositSwitchCreateCall(DepositSwitchCreateRequest depositSwitchCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = depositSwitchCreateRequest;

        // create path and map variables
        String localVarPath = "/deposit_switch/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call depositSwitchCreateValidateBeforeCall(DepositSwitchCreateRequest depositSwitchCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'depositSwitchCreateRequest' is set
        if (depositSwitchCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'depositSwitchCreateRequest' when calling depositSwitchCreate(Async)");
        }

        return depositSwitchCreateCall(depositSwitchCreateRequest, _callback);

    }

    /**
     * Create a deposit switch
     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @param depositSwitchCreateRequest  (required)
     * @return DepositSwitchCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchcreate">Create a deposit switch Documentation</a>
     */
    public DepositSwitchCreateResponse depositSwitchCreate(DepositSwitchCreateRequest depositSwitchCreateRequest) throws ApiException {
        ApiResponse<DepositSwitchCreateResponse> localVarResp = depositSwitchCreateWithHttpInfo(depositSwitchCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a deposit switch
     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @param depositSwitchCreateRequest  (required)
     * @return ApiResponse&lt;DepositSwitchCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchcreate">Create a deposit switch Documentation</a>
     */
    public ApiResponse<DepositSwitchCreateResponse> depositSwitchCreateWithHttpInfo(DepositSwitchCreateRequest depositSwitchCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = depositSwitchCreateValidateBeforeCall(depositSwitchCreateRequest, null);
        Type localVarReturnType = new TypeToken<DepositSwitchCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a deposit switch (asynchronously)
     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @param depositSwitchCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchcreate">Create a deposit switch Documentation</a>
     */
    public okhttp3.Call depositSwitchCreateAsync(DepositSwitchCreateRequest depositSwitchCreateRequest, final ApiCallback<DepositSwitchCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = depositSwitchCreateValidateBeforeCall(depositSwitchCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<DepositSwitchCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for depositSwitchGet
     * @param depositSwitchGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchget">Retrieve a deposit switch Documentation</a>
     */
    public okhttp3.Call depositSwitchGetCall(DepositSwitchGetRequest depositSwitchGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = depositSwitchGetRequest;

        // create path and map variables
        String localVarPath = "/deposit_switch/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call depositSwitchGetValidateBeforeCall(DepositSwitchGetRequest depositSwitchGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'depositSwitchGetRequest' is set
        if (depositSwitchGetRequest == null) {
            throw new ApiException("Missing the required parameter 'depositSwitchGetRequest' when calling depositSwitchGet(Async)");
        }

        return depositSwitchGetCall(depositSwitchGetRequest, _callback);

    }

    /**
     * Retrieve a deposit switch
     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
     * @param depositSwitchGetRequest  (required)
     * @return DepositSwitchGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchget">Retrieve a deposit switch Documentation</a>
     */
    public DepositSwitchGetResponse depositSwitchGet(DepositSwitchGetRequest depositSwitchGetRequest) throws ApiException {
        ApiResponse<DepositSwitchGetResponse> localVarResp = depositSwitchGetWithHttpInfo(depositSwitchGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a deposit switch
     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
     * @param depositSwitchGetRequest  (required)
     * @return ApiResponse&lt;DepositSwitchGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchget">Retrieve a deposit switch Documentation</a>
     */
    public ApiResponse<DepositSwitchGetResponse> depositSwitchGetWithHttpInfo(DepositSwitchGetRequest depositSwitchGetRequest) throws ApiException {
        okhttp3.Call localVarCall = depositSwitchGetValidateBeforeCall(depositSwitchGetRequest, null);
        Type localVarReturnType = new TypeToken<DepositSwitchGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a deposit switch (asynchronously)
     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user&#39;s direct deposit allocation preferences.
     * @param depositSwitchGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchget">Retrieve a deposit switch Documentation</a>
     */
    public okhttp3.Call depositSwitchGetAsync(DepositSwitchGetRequest depositSwitchGetRequest, final ApiCallback<DepositSwitchGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = depositSwitchGetValidateBeforeCall(depositSwitchGetRequest, _callback);
        Type localVarReturnType = new TypeToken<DepositSwitchGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for depositSwitchTokenCreate
     * @param depositSwitchTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchtokencreate">Create a deposit switch token Documentation</a>
     */
    public okhttp3.Call depositSwitchTokenCreateCall(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = depositSwitchTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/deposit_switch/token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call depositSwitchTokenCreateValidateBeforeCall(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'depositSwitchTokenCreateRequest' is set
        if (depositSwitchTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'depositSwitchTokenCreateRequest' when calling depositSwitchTokenCreate(Async)");
        }

        return depositSwitchTokenCreateCall(depositSwitchTokenCreateRequest, _callback);

    }

    /**
     * Create a deposit switch token
     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
     * @param depositSwitchTokenCreateRequest  (required)
     * @return DepositSwitchTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchtokencreate">Create a deposit switch token Documentation</a>
     */
    public DepositSwitchTokenCreateResponse depositSwitchTokenCreate(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest) throws ApiException {
        ApiResponse<DepositSwitchTokenCreateResponse> localVarResp = depositSwitchTokenCreateWithHttpInfo(depositSwitchTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a deposit switch token
     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
     * @param depositSwitchTokenCreateRequest  (required)
     * @return ApiResponse&lt;DepositSwitchTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchtokencreate">Create a deposit switch token Documentation</a>
     */
    public ApiResponse<DepositSwitchTokenCreateResponse> depositSwitchTokenCreateWithHttpInfo(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = depositSwitchTokenCreateValidateBeforeCall(depositSwitchTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<DepositSwitchTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a deposit switch token (asynchronously)
     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
     * @param depositSwitchTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/deposit-switch/reference#deposit_switchtokencreate">Create a deposit switch token Documentation</a>
     */
    public okhttp3.Call depositSwitchTokenCreateAsync(DepositSwitchTokenCreateRequest depositSwitchTokenCreateRequest, final ApiCallback<DepositSwitchTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = depositSwitchTokenCreateValidateBeforeCall(depositSwitchTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<DepositSwitchTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for employersSearch
     * @param employersSearchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/employers/#employerssearch">Search employer database Documentation</a>
     */
    public okhttp3.Call employersSearchCall(EmployersSearchRequest employersSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employersSearchRequest;

        // create path and map variables
        String localVarPath = "/employers/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call employersSearchValidateBeforeCall(EmployersSearchRequest employersSearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employersSearchRequest' is set
        if (employersSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'employersSearchRequest' when calling employersSearch(Async)");
        }

        return employersSearchCall(employersSearchRequest, _callback);

    }

    /**
     * Search employer database
     * &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
     * @param employersSearchRequest  (required)
     * @return EmployersSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/employers/#employerssearch">Search employer database Documentation</a>
     */
    public EmployersSearchResponse employersSearch(EmployersSearchRequest employersSearchRequest) throws ApiException {
        ApiResponse<EmployersSearchResponse> localVarResp = employersSearchWithHttpInfo(employersSearchRequest);
        return localVarResp.getData();
    }

    /**
     * Search employer database
     * &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
     * @param employersSearchRequest  (required)
     * @return ApiResponse&lt;EmployersSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/employers/#employerssearch">Search employer database Documentation</a>
     */
    public ApiResponse<EmployersSearchResponse> employersSearchWithHttpInfo(EmployersSearchRequest employersSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = employersSearchValidateBeforeCall(employersSearchRequest, null);
        Type localVarReturnType = new TypeToken<EmployersSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search employer database (asynchronously)
     * &#x60;/employers/search&#x60; allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user&#39;s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
     * @param employersSearchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/employers/#employerssearch">Search employer database Documentation</a>
     */
    public okhttp3.Call employersSearchAsync(EmployersSearchRequest employersSearchRequest, final ApiCallback<EmployersSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = employersSearchValidateBeforeCall(employersSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployersSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for employmentVerificationGet
     * @param employmentVerificationGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#employmentverificationget">(Deprecated) Retrieve a summary of an individual&#39;s employment information Documentation</a>
     */
    @Deprecated
    public okhttp3.Call employmentVerificationGetCall(EmploymentVerificationGetRequest employmentVerificationGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employmentVerificationGetRequest;

        // create path and map variables
        String localVarPath = "/employment/verification/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call employmentVerificationGetValidateBeforeCall(EmploymentVerificationGetRequest employmentVerificationGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employmentVerificationGetRequest' is set
        if (employmentVerificationGetRequest == null) {
            throw new ApiException("Missing the required parameter 'employmentVerificationGetRequest' when calling employmentVerificationGet(Async)");
        }

        return employmentVerificationGetCall(employmentVerificationGetRequest, _callback);

    }

    /**
     * (Deprecated) Retrieve a summary of an individual&#39;s employment information
     * &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use &#x60;/credit/employment/get&#x60; instead.
     * @param employmentVerificationGetRequest  (required)
     * @return EmploymentVerificationGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#employmentverificationget">(Deprecated) Retrieve a summary of an individual&#39;s employment information Documentation</a>
     */
    @Deprecated
    public EmploymentVerificationGetResponse employmentVerificationGet(EmploymentVerificationGetRequest employmentVerificationGetRequest) throws ApiException {
        ApiResponse<EmploymentVerificationGetResponse> localVarResp = employmentVerificationGetWithHttpInfo(employmentVerificationGetRequest);
        return localVarResp.getData();
    }

    /**
     * (Deprecated) Retrieve a summary of an individual&#39;s employment information
     * &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use &#x60;/credit/employment/get&#x60; instead.
     * @param employmentVerificationGetRequest  (required)
     * @return ApiResponse&lt;EmploymentVerificationGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#employmentverificationget">(Deprecated) Retrieve a summary of an individual&#39;s employment information Documentation</a>
     */
    @Deprecated
    public ApiResponse<EmploymentVerificationGetResponse> employmentVerificationGetWithHttpInfo(EmploymentVerificationGetRequest employmentVerificationGetRequest) throws ApiException {
        okhttp3.Call localVarCall = employmentVerificationGetValidateBeforeCall(employmentVerificationGetRequest, null);
        Type localVarReturnType = new TypeToken<EmploymentVerificationGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) Retrieve a summary of an individual&#39;s employment information (asynchronously)
     * &#x60;/employment/verification/get&#x60; returns a list of employments through a user payroll that was verified by an end user.  This endpoint has been deprecated; new integrations should use &#x60;/credit/employment/get&#x60; instead.
     * @param employmentVerificationGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#employmentverificationget">(Deprecated) Retrieve a summary of an individual&#39;s employment information Documentation</a>
     */
    @Deprecated
    public okhttp3.Call employmentVerificationGetAsync(EmploymentVerificationGetRequest employmentVerificationGetRequest, final ApiCallback<EmploymentVerificationGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = employmentVerificationGetValidateBeforeCall(employmentVerificationGetRequest, _callback);
        Type localVarReturnType = new TypeToken<EmploymentVerificationGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fdxNotifications
     * @param fdXNotification  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/fdx/notifications/#post">Webhook receiver for fdx notifications Documentation</a>
     */
    public okhttp3.Call fdxNotificationsCall(FDXNotification fdXNotification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fdXNotification;

        // create path and map variables
        String localVarPath = "/fdx/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fdxNotificationsValidateBeforeCall(FDXNotification fdXNotification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fdXNotification' is set
        if (fdXNotification == null) {
            throw new ApiException("Missing the required parameter 'fdXNotification' when calling fdxNotifications(Async)");
        }

        return fdxNotificationsCall(fdXNotification, _callback);

    }

    /**
     * Webhook receiver for fdx notifications
     * A generic webhook receiver endpoint for FDX Event Notifications
     * @param fdXNotification  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/fdx/notifications/#post">Webhook receiver for fdx notifications Documentation</a>
     */
    public void fdxNotifications(FDXNotification fdXNotification) throws ApiException {
        fdxNotificationsWithHttpInfo(fdXNotification);
    }

    /**
     * Webhook receiver for fdx notifications
     * A generic webhook receiver endpoint for FDX Event Notifications
     * @param fdXNotification  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/fdx/notifications/#post">Webhook receiver for fdx notifications Documentation</a>
     */
    public ApiResponse<Void> fdxNotificationsWithHttpInfo(FDXNotification fdXNotification) throws ApiException {
        okhttp3.Call localVarCall = fdxNotificationsValidateBeforeCall(fdXNotification, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Webhook receiver for fdx notifications (asynchronously)
     * A generic webhook receiver endpoint for FDX Event Notifications
     * @param fdXNotification  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/fdx/notifications/#post">Webhook receiver for fdx notifications Documentation</a>
     */
    public okhttp3.Call fdxNotificationsAsync(FDXNotification fdXNotification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fdxNotificationsValidateBeforeCall(fdXNotification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for identityGet
     * @param identityGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity/#identityget">Retrieve identity data Documentation</a>
     */
    public okhttp3.Call identityGetCall(IdentityGetRequest identityGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityGetRequest;

        // create path and map variables
        String localVarPath = "/identity/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call identityGetValidateBeforeCall(IdentityGetRequest identityGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identityGetRequest' is set
        if (identityGetRequest == null) {
            throw new ApiException("Missing the required parameter 'identityGetRequest' when calling identityGet(Async)");
        }

        return identityGetCall(identityGetRequest, _callback);

    }

    /**
     * Retrieve identity data
     * The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the &#x60;owners&#x60; object is not returned, and instead identity information is returned in the top level &#x60;identity&#x60; object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
     * @param identityGetRequest  (required)
     * @return IdentityGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity/#identityget">Retrieve identity data Documentation</a>
     */
    public IdentityGetResponse identityGet(IdentityGetRequest identityGetRequest) throws ApiException {
        ApiResponse<IdentityGetResponse> localVarResp = identityGetWithHttpInfo(identityGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve identity data
     * The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the &#x60;owners&#x60; object is not returned, and instead identity information is returned in the top level &#x60;identity&#x60; object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
     * @param identityGetRequest  (required)
     * @return ApiResponse&lt;IdentityGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity/#identityget">Retrieve identity data Documentation</a>
     */
    public ApiResponse<IdentityGetResponse> identityGetWithHttpInfo(IdentityGetRequest identityGetRequest) throws ApiException {
        okhttp3.Call localVarCall = identityGetValidateBeforeCall(identityGetRequest, null);
        Type localVarReturnType = new TypeToken<IdentityGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve identity data (asynchronously)
     * The &#x60;/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Note: In API versions 2018-05-22 and earlier, the &#x60;owners&#x60; object is not returned, and instead identity information is returned in the top level &#x60;identity&#x60; object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
     * @param identityGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity/#identityget">Retrieve identity data Documentation</a>
     */
    public okhttp3.Call identityGetAsync(IdentityGetRequest identityGetRequest, final ApiCallback<IdentityGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = identityGetValidateBeforeCall(identityGetRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentityGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for identityMatch
     * @param identityMatchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity/#identitymatch">Retrieve identity match score Documentation</a>
     */
    public okhttp3.Call identityMatchCall(IdentityMatchRequest identityMatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityMatchRequest;

        // create path and map variables
        String localVarPath = "/identity/match";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call identityMatchValidateBeforeCall(IdentityMatchRequest identityMatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identityMatchRequest' is set
        if (identityMatchRequest == null) {
            throw new ApiException("Missing the required parameter 'identityMatchRequest' when calling identityMatch(Async)");
        }

        return identityMatchCall(identityMatchRequest, _callback);

    }

    /**
     * Retrieve identity match score
     * The &#x60;/identity/match&#x60; endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder&#39;s financial institution.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     * @param identityMatchRequest  (required)
     * @return IdentityMatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity/#identitymatch">Retrieve identity match score Documentation</a>
     */
    public IdentityMatchResponse identityMatch(IdentityMatchRequest identityMatchRequest) throws ApiException {
        ApiResponse<IdentityMatchResponse> localVarResp = identityMatchWithHttpInfo(identityMatchRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve identity match score
     * The &#x60;/identity/match&#x60; endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder&#39;s financial institution.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     * @param identityMatchRequest  (required)
     * @return ApiResponse&lt;IdentityMatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity/#identitymatch">Retrieve identity match score Documentation</a>
     */
    public ApiResponse<IdentityMatchResponse> identityMatchWithHttpInfo(IdentityMatchRequest identityMatchRequest) throws ApiException {
        okhttp3.Call localVarCall = identityMatchValidateBeforeCall(identityMatchRequest, null);
        Type localVarReturnType = new TypeToken<IdentityMatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve identity match score (asynchronously)
     * The &#x60;/identity/match&#x60; endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder&#39;s financial institution.  This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     * @param identityMatchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity/#identitymatch">Retrieve identity match score Documentation</a>
     */
    public okhttp3.Call identityMatchAsync(IdentityMatchRequest identityMatchRequest, final ApiCallback<IdentityMatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = identityMatchValidateBeforeCall(identityMatchRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentityMatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for identityVerificationCreate
     * @param identityVerificationCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity-verification/#identity_verificationcreate">Create a new identity verification Documentation</a>
     */
    public okhttp3.Call identityVerificationCreateCall(IdentityVerificationCreateRequest identityVerificationCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityVerificationCreateRequest;

        // create path and map variables
        String localVarPath = "/identity_verification/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call identityVerificationCreateValidateBeforeCall(IdentityVerificationCreateRequest identityVerificationCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identityVerificationCreateRequest' is set
        if (identityVerificationCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'identityVerificationCreateRequest' when calling identityVerificationCreate(Async)");
        }

        return identityVerificationCreateCall(identityVerificationCreateRequest, _callback);

    }

    /**
     * Create a new identity verification
     * Create a new Identity Verification for the user specified by the &#x60;client_user_id&#x60; field. The requirements and behavior of the verification are determined by the &#x60;template_id&#x60; provided. If you don&#39;t know whether the associated user already has an active Identity Verification, you can specify &#x60;\&quot;is_idempotent\&quot;: true&#x60; in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated &#x60;client_user_id&#x60; and &#x60;template_id&#x60;. If an Identity Verification is found, it will be returned unmodified with an &#x60;200 OK&#x60; HTTP status code. 
     * @param identityVerificationCreateRequest  (required)
     * @return IdentityVerificationCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity-verification/#identity_verificationcreate">Create a new identity verification Documentation</a>
     */
    public IdentityVerificationCreateResponse identityVerificationCreate(IdentityVerificationCreateRequest identityVerificationCreateRequest) throws ApiException {
        ApiResponse<IdentityVerificationCreateResponse> localVarResp = identityVerificationCreateWithHttpInfo(identityVerificationCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new identity verification
     * Create a new Identity Verification for the user specified by the &#x60;client_user_id&#x60; field. The requirements and behavior of the verification are determined by the &#x60;template_id&#x60; provided. If you don&#39;t know whether the associated user already has an active Identity Verification, you can specify &#x60;\&quot;is_idempotent\&quot;: true&#x60; in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated &#x60;client_user_id&#x60; and &#x60;template_id&#x60;. If an Identity Verification is found, it will be returned unmodified with an &#x60;200 OK&#x60; HTTP status code. 
     * @param identityVerificationCreateRequest  (required)
     * @return ApiResponse&lt;IdentityVerificationCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity-verification/#identity_verificationcreate">Create a new identity verification Documentation</a>
     */
    public ApiResponse<IdentityVerificationCreateResponse> identityVerificationCreateWithHttpInfo(IdentityVerificationCreateRequest identityVerificationCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = identityVerificationCreateValidateBeforeCall(identityVerificationCreateRequest, null);
        Type localVarReturnType = new TypeToken<IdentityVerificationCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new identity verification (asynchronously)
     * Create a new Identity Verification for the user specified by the &#x60;client_user_id&#x60; field. The requirements and behavior of the verification are determined by the &#x60;template_id&#x60; provided. If you don&#39;t know whether the associated user already has an active Identity Verification, you can specify &#x60;\&quot;is_idempotent\&quot;: true&#x60; in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated &#x60;client_user_id&#x60; and &#x60;template_id&#x60;. If an Identity Verification is found, it will be returned unmodified with an &#x60;200 OK&#x60; HTTP status code. 
     * @param identityVerificationCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity-verification/#identity_verificationcreate">Create a new identity verification Documentation</a>
     */
    public okhttp3.Call identityVerificationCreateAsync(IdentityVerificationCreateRequest identityVerificationCreateRequest, final ApiCallback<IdentityVerificationCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = identityVerificationCreateValidateBeforeCall(identityVerificationCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentityVerificationCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for identityVerificationGet
     * @param identityVerificationGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity-verification/#identity_verificationget">Retrieve Identity Verification Documentation</a>
     */
    public okhttp3.Call identityVerificationGetCall(IdentityVerificationGetRequest identityVerificationGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityVerificationGetRequest;

        // create path and map variables
        String localVarPath = "/identity_verification/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call identityVerificationGetValidateBeforeCall(IdentityVerificationGetRequest identityVerificationGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identityVerificationGetRequest' is set
        if (identityVerificationGetRequest == null) {
            throw new ApiException("Missing the required parameter 'identityVerificationGetRequest' when calling identityVerificationGet(Async)");
        }

        return identityVerificationGetCall(identityVerificationGetRequest, _callback);

    }

    /**
     * Retrieve Identity Verification
     * Retrieve a previously created identity verification.
     * @param identityVerificationGetRequest  (required)
     * @return IdentityVerificationGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity-verification/#identity_verificationget">Retrieve Identity Verification Documentation</a>
     */
    public IdentityVerificationGetResponse identityVerificationGet(IdentityVerificationGetRequest identityVerificationGetRequest) throws ApiException {
        ApiResponse<IdentityVerificationGetResponse> localVarResp = identityVerificationGetWithHttpInfo(identityVerificationGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve Identity Verification
     * Retrieve a previously created identity verification.
     * @param identityVerificationGetRequest  (required)
     * @return ApiResponse&lt;IdentityVerificationGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity-verification/#identity_verificationget">Retrieve Identity Verification Documentation</a>
     */
    public ApiResponse<IdentityVerificationGetResponse> identityVerificationGetWithHttpInfo(IdentityVerificationGetRequest identityVerificationGetRequest) throws ApiException {
        okhttp3.Call localVarCall = identityVerificationGetValidateBeforeCall(identityVerificationGetRequest, null);
        Type localVarReturnType = new TypeToken<IdentityVerificationGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Identity Verification (asynchronously)
     * Retrieve a previously created identity verification.
     * @param identityVerificationGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity-verification/#identity_verificationget">Retrieve Identity Verification Documentation</a>
     */
    public okhttp3.Call identityVerificationGetAsync(IdentityVerificationGetRequest identityVerificationGetRequest, final ApiCallback<IdentityVerificationGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = identityVerificationGetValidateBeforeCall(identityVerificationGetRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentityVerificationGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for identityVerificationList
     * @param identityVerificationListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity-verification/#identity_verificationlist">List Identity Verifications Documentation</a>
     */
    public okhttp3.Call identityVerificationListCall(IdentityVerificationListRequest identityVerificationListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityVerificationListRequest;

        // create path and map variables
        String localVarPath = "/identity_verification/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call identityVerificationListValidateBeforeCall(IdentityVerificationListRequest identityVerificationListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identityVerificationListRequest' is set
        if (identityVerificationListRequest == null) {
            throw new ApiException("Missing the required parameter 'identityVerificationListRequest' when calling identityVerificationList(Async)");
        }

        return identityVerificationListCall(identityVerificationListRequest, _callback);

    }

    /**
     * List Identity Verifications
     * Filter and list Identity Verifications created by your account
     * @param identityVerificationListRequest  (required)
     * @return IdentityVerificationListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity-verification/#identity_verificationlist">List Identity Verifications Documentation</a>
     */
    public IdentityVerificationListResponse identityVerificationList(IdentityVerificationListRequest identityVerificationListRequest) throws ApiException {
        ApiResponse<IdentityVerificationListResponse> localVarResp = identityVerificationListWithHttpInfo(identityVerificationListRequest);
        return localVarResp.getData();
    }

    /**
     * List Identity Verifications
     * Filter and list Identity Verifications created by your account
     * @param identityVerificationListRequest  (required)
     * @return ApiResponse&lt;IdentityVerificationListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity-verification/#identity_verificationlist">List Identity Verifications Documentation</a>
     */
    public ApiResponse<IdentityVerificationListResponse> identityVerificationListWithHttpInfo(IdentityVerificationListRequest identityVerificationListRequest) throws ApiException {
        okhttp3.Call localVarCall = identityVerificationListValidateBeforeCall(identityVerificationListRequest, null);
        Type localVarReturnType = new TypeToken<IdentityVerificationListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Identity Verifications (asynchronously)
     * Filter and list Identity Verifications created by your account
     * @param identityVerificationListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity-verification/#identity_verificationlist">List Identity Verifications Documentation</a>
     */
    public okhttp3.Call identityVerificationListAsync(IdentityVerificationListRequest identityVerificationListRequest, final ApiCallback<IdentityVerificationListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = identityVerificationListValidateBeforeCall(identityVerificationListRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentityVerificationListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for identityVerificationRetry
     * @param identityVerificationRetryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity-verification/#identity_verificationretry">Retry an Identity Verification Documentation</a>
     */
    public okhttp3.Call identityVerificationRetryCall(IdentityVerificationRetryRequest identityVerificationRetryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identityVerificationRetryRequest;

        // create path and map variables
        String localVarPath = "/identity_verification/retry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call identityVerificationRetryValidateBeforeCall(IdentityVerificationRetryRequest identityVerificationRetryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identityVerificationRetryRequest' is set
        if (identityVerificationRetryRequest == null) {
            throw new ApiException("Missing the required parameter 'identityVerificationRetryRequest' when calling identityVerificationRetry(Async)");
        }

        return identityVerificationRetryCall(identityVerificationRetryRequest, _callback);

    }

    /**
     * Retry an Identity Verification
     * Allow a customer to retry their identity verification
     * @param identityVerificationRetryRequest  (required)
     * @return IdentityVerificationRetryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity-verification/#identity_verificationretry">Retry an Identity Verification Documentation</a>
     */
    public IdentityVerificationRetryResponse identityVerificationRetry(IdentityVerificationRetryRequest identityVerificationRetryRequest) throws ApiException {
        ApiResponse<IdentityVerificationRetryResponse> localVarResp = identityVerificationRetryWithHttpInfo(identityVerificationRetryRequest);
        return localVarResp.getData();
    }

    /**
     * Retry an Identity Verification
     * Allow a customer to retry their identity verification
     * @param identityVerificationRetryRequest  (required)
     * @return ApiResponse&lt;IdentityVerificationRetryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity-verification/#identity_verificationretry">Retry an Identity Verification Documentation</a>
     */
    public ApiResponse<IdentityVerificationRetryResponse> identityVerificationRetryWithHttpInfo(IdentityVerificationRetryRequest identityVerificationRetryRequest) throws ApiException {
        okhttp3.Call localVarCall = identityVerificationRetryValidateBeforeCall(identityVerificationRetryRequest, null);
        Type localVarReturnType = new TypeToken<IdentityVerificationRetryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retry an Identity Verification (asynchronously)
     * Allow a customer to retry their identity verification
     * @param identityVerificationRetryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/identity-verification/#identity_verificationretry">Retry an Identity Verification Documentation</a>
     */
    public okhttp3.Call identityVerificationRetryAsync(IdentityVerificationRetryRequest identityVerificationRetryRequest, final ApiCallback<IdentityVerificationRetryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = identityVerificationRetryValidateBeforeCall(identityVerificationRetryRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentityVerificationRetryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomeVerificationCreate
     * @param incomeVerificationCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationcreate">(Deprecated) Create an income verification instance Documentation</a>
     */
    @Deprecated
    public okhttp3.Call incomeVerificationCreateCall(IncomeVerificationCreateRequest incomeVerificationCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incomeVerificationCreateRequest;

        // create path and map variables
        String localVarPath = "/income/verification/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomeVerificationCreateValidateBeforeCall(IncomeVerificationCreateRequest incomeVerificationCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'incomeVerificationCreateRequest' is set
        if (incomeVerificationCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'incomeVerificationCreateRequest' when calling incomeVerificationCreate(Async)");
        }

        return incomeVerificationCreateCall(incomeVerificationCreateRequest, _callback);

    }

    /**
     * (Deprecated) Create an income verification instance
     * &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
     * @param incomeVerificationCreateRequest  (required)
     * @return IncomeVerificationCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationcreate">(Deprecated) Create an income verification instance Documentation</a>
     */
    @Deprecated
    public IncomeVerificationCreateResponse incomeVerificationCreate(IncomeVerificationCreateRequest incomeVerificationCreateRequest) throws ApiException {
        ApiResponse<IncomeVerificationCreateResponse> localVarResp = incomeVerificationCreateWithHttpInfo(incomeVerificationCreateRequest);
        return localVarResp.getData();
    }

    /**
     * (Deprecated) Create an income verification instance
     * &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
     * @param incomeVerificationCreateRequest  (required)
     * @return ApiResponse&lt;IncomeVerificationCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationcreate">(Deprecated) Create an income verification instance Documentation</a>
     */
    @Deprecated
    public ApiResponse<IncomeVerificationCreateResponse> incomeVerificationCreateWithHttpInfo(IncomeVerificationCreateRequest incomeVerificationCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = incomeVerificationCreateValidateBeforeCall(incomeVerificationCreateRequest, null);
        Type localVarReturnType = new TypeToken<IncomeVerificationCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) Create an income verification instance (asynchronously)
     * &#x60;/income/verification/create&#x60; begins the income verification process by returning an &#x60;income_verification_id&#x60;. You can then provide the &#x60;income_verification_id&#x60; to &#x60;/link/token/create&#x60; under the &#x60;income_verification&#x60; parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an &#x60;INCOME&#x60; webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
     * @param incomeVerificationCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationcreate">(Deprecated) Create an income verification instance Documentation</a>
     */
    @Deprecated
    public okhttp3.Call incomeVerificationCreateAsync(IncomeVerificationCreateRequest incomeVerificationCreateRequest, final ApiCallback<IncomeVerificationCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomeVerificationCreateValidateBeforeCall(incomeVerificationCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<IncomeVerificationCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomeVerificationDocumentsDownload
     * @param incomeVerificationDocumentsDownloadRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ZIP file containing source documents(s) used as the basis for income verification. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationdocumentsdownload">(Deprecated) Download the original documents used for income verification Documentation</a>
     */
    @Deprecated
    public okhttp3.Call incomeVerificationDocumentsDownloadCall(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incomeVerificationDocumentsDownloadRequest;

        // create path and map variables
        String localVarPath = "/income/verification/documents/download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomeVerificationDocumentsDownloadValidateBeforeCall(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'incomeVerificationDocumentsDownloadRequest' is set
        if (incomeVerificationDocumentsDownloadRequest == null) {
            throw new ApiException("Missing the required parameter 'incomeVerificationDocumentsDownloadRequest' when calling incomeVerificationDocumentsDownload(Async)");
        }

        return incomeVerificationDocumentsDownloadCall(incomeVerificationDocumentsDownloadRequest, _callback);

    }

    /**
     * (Deprecated) Download the original documents used for income verification
     * &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
     * @param incomeVerificationDocumentsDownloadRequest  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ZIP file containing source documents(s) used as the basis for income verification. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationdocumentsdownload">(Deprecated) Download the original documents used for income verification Documentation</a>
     */
    @Deprecated
    public File incomeVerificationDocumentsDownload(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest) throws ApiException {
        ApiResponse<File> localVarResp = incomeVerificationDocumentsDownloadWithHttpInfo(incomeVerificationDocumentsDownloadRequest);
        return localVarResp.getData();
    }

    /**
     * (Deprecated) Download the original documents used for income verification
     * &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
     * @param incomeVerificationDocumentsDownloadRequest  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ZIP file containing source documents(s) used as the basis for income verification. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationdocumentsdownload">(Deprecated) Download the original documents used for income verification Documentation</a>
     */
    @Deprecated
    public ApiResponse<File> incomeVerificationDocumentsDownloadWithHttpInfo(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest) throws ApiException {
        okhttp3.Call localVarCall = incomeVerificationDocumentsDownloadValidateBeforeCall(incomeVerificationDocumentsDownloadRequest, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) Download the original documents used for income verification (asynchronously)
     * &#x60;/income/verification/documents/download&#x60; provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to &#x60;/income/verification/documents/download&#x60; is a ZIP file in binary data. If a &#x60;document_id&#x60; is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The &#x60;request_id&#x60; is returned in the &#x60;Plaid-Request-ID&#x60; header.
     * @param incomeVerificationDocumentsDownloadRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A ZIP file containing source documents(s) used as the basis for income verification. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationdocumentsdownload">(Deprecated) Download the original documents used for income verification Documentation</a>
     */
    @Deprecated
    public okhttp3.Call incomeVerificationDocumentsDownloadAsync(IncomeVerificationDocumentsDownloadRequest incomeVerificationDocumentsDownloadRequest, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomeVerificationDocumentsDownloadValidateBeforeCall(incomeVerificationDocumentsDownloadRequest, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomeVerificationPaystubsGet
     * @param incomeVerificationPaystubsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationpaystubsget">(Deprecated) Retrieve information from the paystubs used for income verification Documentation</a>
     */
    @Deprecated
    public okhttp3.Call incomeVerificationPaystubsGetCall(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incomeVerificationPaystubsGetRequest;

        // create path and map variables
        String localVarPath = "/income/verification/paystubs/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomeVerificationPaystubsGetValidateBeforeCall(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'incomeVerificationPaystubsGetRequest' is set
        if (incomeVerificationPaystubsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'incomeVerificationPaystubsGetRequest' when calling incomeVerificationPaystubsGet(Async)");
        }

        return incomeVerificationPaystubsGetCall(incomeVerificationPaystubsGetRequest, _callback);

    }

    /**
     * (Deprecated) Retrieve information from the paystubs used for income verification
     * &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/get&#x60; instead.
     * @param incomeVerificationPaystubsGetRequest  (required)
     * @return IncomeVerificationPaystubsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationpaystubsget">(Deprecated) Retrieve information from the paystubs used for income verification Documentation</a>
     */
    @Deprecated
    public IncomeVerificationPaystubsGetResponse incomeVerificationPaystubsGet(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest) throws ApiException {
        ApiResponse<IncomeVerificationPaystubsGetResponse> localVarResp = incomeVerificationPaystubsGetWithHttpInfo(incomeVerificationPaystubsGetRequest);
        return localVarResp.getData();
    }

    /**
     * (Deprecated) Retrieve information from the paystubs used for income verification
     * &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/get&#x60; instead.
     * @param incomeVerificationPaystubsGetRequest  (required)
     * @return ApiResponse&lt;IncomeVerificationPaystubsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationpaystubsget">(Deprecated) Retrieve information from the paystubs used for income verification Documentation</a>
     */
    @Deprecated
    public ApiResponse<IncomeVerificationPaystubsGetResponse> incomeVerificationPaystubsGetWithHttpInfo(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = incomeVerificationPaystubsGetValidateBeforeCall(incomeVerificationPaystubsGetRequest, null);
        Type localVarReturnType = new TypeToken<IncomeVerificationPaystubsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) Retrieve information from the paystubs used for income verification (asynchronously)
     * &#x60;/income/verification/paystubs/get&#x60; returns the information collected from the paystubs that were used to verify an end user&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/get&#x60; instead.
     * @param incomeVerificationPaystubsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationpaystubsget">(Deprecated) Retrieve information from the paystubs used for income verification Documentation</a>
     */
    @Deprecated
    public okhttp3.Call incomeVerificationPaystubsGetAsync(IncomeVerificationPaystubsGetRequest incomeVerificationPaystubsGetRequest, final ApiCallback<IncomeVerificationPaystubsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomeVerificationPaystubsGetValidateBeforeCall(incomeVerificationPaystubsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<IncomeVerificationPaystubsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomeVerificationPrecheck
     * @param incomeVerificationPrecheckRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationprecheck">(Deprecated) Check digital income verification eligibility and optimize conversion Documentation</a>
     */
    @Deprecated
    public okhttp3.Call incomeVerificationPrecheckCall(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incomeVerificationPrecheckRequest;

        // create path and map variables
        String localVarPath = "/income/verification/precheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomeVerificationPrecheckValidateBeforeCall(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'incomeVerificationPrecheckRequest' is set
        if (incomeVerificationPrecheckRequest == null) {
            throw new ApiException("Missing the required parameter 'incomeVerificationPrecheckRequest' when calling incomeVerificationPrecheck(Async)");
        }

        return incomeVerificationPrecheckCall(incomeVerificationPrecheckRequest, _callback);

    }

    /**
     * (Deprecated) Check digital income verification eligibility and optimize conversion
     * &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/precheck&#x60; instead.
     * @param incomeVerificationPrecheckRequest  (required)
     * @return IncomeVerificationPrecheckResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationprecheck">(Deprecated) Check digital income verification eligibility and optimize conversion Documentation</a>
     */
    @Deprecated
    public IncomeVerificationPrecheckResponse incomeVerificationPrecheck(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest) throws ApiException {
        ApiResponse<IncomeVerificationPrecheckResponse> localVarResp = incomeVerificationPrecheckWithHttpInfo(incomeVerificationPrecheckRequest);
        return localVarResp.getData();
    }

    /**
     * (Deprecated) Check digital income verification eligibility and optimize conversion
     * &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/precheck&#x60; instead.
     * @param incomeVerificationPrecheckRequest  (required)
     * @return ApiResponse&lt;IncomeVerificationPrecheckResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationprecheck">(Deprecated) Check digital income verification eligibility and optimize conversion Documentation</a>
     */
    @Deprecated
    public ApiResponse<IncomeVerificationPrecheckResponse> incomeVerificationPrecheckWithHttpInfo(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest) throws ApiException {
        okhttp3.Call localVarCall = incomeVerificationPrecheckValidateBeforeCall(incomeVerificationPrecheckRequest, null);
        Type localVarReturnType = new TypeToken<IncomeVerificationPrecheckResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) Check digital income verification eligibility and optimize conversion (asynchronously)
     * &#x60;/income/verification/precheck&#x60; is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a &#x60;precheck_id&#x60; that can be provided to &#x60;/link/token/create&#x60;. If the user is eligible for digital verification, providing the &#x60;precheck_id&#x60; in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the &#x60;precheck_id&#x60; can still be provided to &#x60;/link/token/create&#x60; and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either &#x60;employer&#x60; or &#x60;transactions_access_tokens&#x60; data will increase the chance of receiving a useful result.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/precheck&#x60; instead.
     * @param incomeVerificationPrecheckRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationprecheck">(Deprecated) Check digital income verification eligibility and optimize conversion Documentation</a>
     */
    @Deprecated
    public okhttp3.Call incomeVerificationPrecheckAsync(IncomeVerificationPrecheckRequest incomeVerificationPrecheckRequest, final ApiCallback<IncomeVerificationPrecheckResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomeVerificationPrecheckValidateBeforeCall(incomeVerificationPrecheckRequest, _callback);
        Type localVarReturnType = new TypeToken<IncomeVerificationPrecheckResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for incomeVerificationTaxformsGet
     * @param incomeVerificationTaxformsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationtaxformsget">(Deprecated) Retrieve information from the tax documents used for income verification Documentation</a>
     */
    @Deprecated
    public okhttp3.Call incomeVerificationTaxformsGetCall(IncomeVerificationTaxformsGetRequest incomeVerificationTaxformsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incomeVerificationTaxformsGetRequest;

        // create path and map variables
        String localVarPath = "/income/verification/taxforms/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call incomeVerificationTaxformsGetValidateBeforeCall(IncomeVerificationTaxformsGetRequest incomeVerificationTaxformsGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'incomeVerificationTaxformsGetRequest' is set
        if (incomeVerificationTaxformsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'incomeVerificationTaxformsGetRequest' when calling incomeVerificationTaxformsGet(Async)");
        }

        return incomeVerificationTaxformsGetCall(incomeVerificationTaxformsGetRequest, _callback);

    }

    /**
     * (Deprecated) Retrieve information from the tax documents used for income verification
     * &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/get&#x60; instead.
     * @param incomeVerificationTaxformsGetRequest  (required)
     * @return IncomeVerificationTaxformsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationtaxformsget">(Deprecated) Retrieve information from the tax documents used for income verification Documentation</a>
     */
    @Deprecated
    public IncomeVerificationTaxformsGetResponse incomeVerificationTaxformsGet(IncomeVerificationTaxformsGetRequest incomeVerificationTaxformsGetRequest) throws ApiException {
        ApiResponse<IncomeVerificationTaxformsGetResponse> localVarResp = incomeVerificationTaxformsGetWithHttpInfo(incomeVerificationTaxformsGetRequest);
        return localVarResp.getData();
    }

    /**
     * (Deprecated) Retrieve information from the tax documents used for income verification
     * &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/get&#x60; instead.
     * @param incomeVerificationTaxformsGetRequest  (required)
     * @return ApiResponse&lt;IncomeVerificationTaxformsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationtaxformsget">(Deprecated) Retrieve information from the tax documents used for income verification Documentation</a>
     */
    @Deprecated
    public ApiResponse<IncomeVerificationTaxformsGetResponse> incomeVerificationTaxformsGetWithHttpInfo(IncomeVerificationTaxformsGetRequest incomeVerificationTaxformsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = incomeVerificationTaxformsGetValidateBeforeCall(incomeVerificationTaxformsGetRequest, null);
        Type localVarReturnType = new TypeToken<IncomeVerificationTaxformsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) Retrieve information from the tax documents used for income verification (asynchronously)
     * &#x60;/income/verification/taxforms/get&#x60; returns the information collected from forms that were used to verify an end user&#39;&#39;s income. It can be called once the status of the verification has been set to &#x60;VERIFICATION_STATUS_PROCESSING_COMPLETE&#x60;, as reported by the &#x60;INCOME: verification_status&#x60; webhook. Attempting to call the endpoint before verification has been completed will result in an error.  This endpoint has been deprecated; new integrations should use &#x60;/credit/payroll_income/get&#x60; instead.
     * @param incomeVerificationTaxformsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     * 
     * @see <a href="/api/products/income/#incomeverificationtaxformsget">(Deprecated) Retrieve information from the tax documents used for income verification Documentation</a>
     */
    @Deprecated
    public okhttp3.Call incomeVerificationTaxformsGetAsync(IncomeVerificationTaxformsGetRequest incomeVerificationTaxformsGetRequest, final ApiCallback<IncomeVerificationTaxformsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = incomeVerificationTaxformsGetValidateBeforeCall(incomeVerificationTaxformsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<IncomeVerificationTaxformsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for institutionsGet
     * @param institutionsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionsget">Get details of all supported institutions Documentation</a>
     */
    public okhttp3.Call institutionsGetCall(InstitutionsGetRequest institutionsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = institutionsGetRequest;

        // create path and map variables
        String localVarPath = "/institutions/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call institutionsGetValidateBeforeCall(InstitutionsGetRequest institutionsGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'institutionsGetRequest' is set
        if (institutionsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'institutionsGetRequest' when calling institutionsGet(Async)");
        }

        return institutionsGetCall(institutionsGetRequest, _callback);

    }

    /**
     * Get details of all supported institutions
     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
     * @param institutionsGetRequest  (required)
     * @return InstitutionsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionsget">Get details of all supported institutions Documentation</a>
     */
    public InstitutionsGetResponse institutionsGet(InstitutionsGetRequest institutionsGetRequest) throws ApiException {
        ApiResponse<InstitutionsGetResponse> localVarResp = institutionsGetWithHttpInfo(institutionsGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get details of all supported institutions
     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
     * @param institutionsGetRequest  (required)
     * @return ApiResponse&lt;InstitutionsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionsget">Get details of all supported institutions Documentation</a>
     */
    public ApiResponse<InstitutionsGetResponse> institutionsGetWithHttpInfo(InstitutionsGetRequest institutionsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = institutionsGetValidateBeforeCall(institutionsGetRequest, null);
        Type localVarReturnType = new TypeToken<InstitutionsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of all supported institutions (asynchronously)
     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
     * @param institutionsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionsget">Get details of all supported institutions Documentation</a>
     */
    public okhttp3.Call institutionsGetAsync(InstitutionsGetRequest institutionsGetRequest, final ApiCallback<InstitutionsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = institutionsGetValidateBeforeCall(institutionsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<InstitutionsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for institutionsGetById
     * @param institutionsGetByIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionsget_by_id">Get details of an institution Documentation</a>
     */
    public okhttp3.Call institutionsGetByIdCall(InstitutionsGetByIdRequest institutionsGetByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = institutionsGetByIdRequest;

        // create path and map variables
        String localVarPath = "/institutions/get_by_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call institutionsGetByIdValidateBeforeCall(InstitutionsGetByIdRequest institutionsGetByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'institutionsGetByIdRequest' is set
        if (institutionsGetByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'institutionsGetByIdRequest' when calling institutionsGetById(Async)");
        }

        return institutionsGetByIdCall(institutionsGetByIdRequest, _callback);

    }

    /**
     * Get details of an institution
     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
     * @param institutionsGetByIdRequest  (required)
     * @return InstitutionsGetByIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionsget_by_id">Get details of an institution Documentation</a>
     */
    public InstitutionsGetByIdResponse institutionsGetById(InstitutionsGetByIdRequest institutionsGetByIdRequest) throws ApiException {
        ApiResponse<InstitutionsGetByIdResponse> localVarResp = institutionsGetByIdWithHttpInfo(institutionsGetByIdRequest);
        return localVarResp.getData();
    }

    /**
     * Get details of an institution
     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
     * @param institutionsGetByIdRequest  (required)
     * @return ApiResponse&lt;InstitutionsGetByIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionsget_by_id">Get details of an institution Documentation</a>
     */
    public ApiResponse<InstitutionsGetByIdResponse> institutionsGetByIdWithHttpInfo(InstitutionsGetByIdRequest institutionsGetByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = institutionsGetByIdValidateBeforeCall(institutionsGetByIdRequest, null);
        Type localVarReturnType = new TypeToken<InstitutionsGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of an institution (asynchronously)
     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; to authenticate to this endpoint. The &#x60;public_key&#x60; has been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
     * @param institutionsGetByIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionsget_by_id">Get details of an institution Documentation</a>
     */
    public okhttp3.Call institutionsGetByIdAsync(InstitutionsGetByIdRequest institutionsGetByIdRequest, final ApiCallback<InstitutionsGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = institutionsGetByIdValidateBeforeCall(institutionsGetByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<InstitutionsGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for institutionsSearch
     * @param institutionsSearchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionssearch">Search institutions Documentation</a>
     */
    public okhttp3.Call institutionsSearchCall(InstitutionsSearchRequest institutionsSearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = institutionsSearchRequest;

        // create path and map variables
        String localVarPath = "/institutions/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call institutionsSearchValidateBeforeCall(InstitutionsSearchRequest institutionsSearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'institutionsSearchRequest' is set
        if (institutionsSearchRequest == null) {
            throw new ApiException("Missing the required parameter 'institutionsSearchRequest' when calling institutionsSearch(Async)");
        }

        return institutionsSearchCall(institutionsSearchRequest, _callback);

    }

    /**
     * Search institutions
     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
     * @param institutionsSearchRequest  (required)
     * @return InstitutionsSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionssearch">Search institutions Documentation</a>
     */
    public InstitutionsSearchResponse institutionsSearch(InstitutionsSearchRequest institutionsSearchRequest) throws ApiException {
        ApiResponse<InstitutionsSearchResponse> localVarResp = institutionsSearchWithHttpInfo(institutionsSearchRequest);
        return localVarResp.getData();
    }

    /**
     * Search institutions
     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
     * @param institutionsSearchRequest  (required)
     * @return ApiResponse&lt;InstitutionsSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionssearch">Search institutions Documentation</a>
     */
    public ApiResponse<InstitutionsSearchResponse> institutionsSearchWithHttpInfo(InstitutionsSearchRequest institutionsSearchRequest) throws ApiException {
        okhttp3.Call localVarCall = institutionsSearchValidateBeforeCall(institutionsSearchRequest, null);
        Type localVarReturnType = new TypeToken<InstitutionsSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search institutions (asynchronously)
     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the &#x60;public_key&#x60; parameter instead of the &#x60;client_id&#x60; and &#x60;secret&#x60; parameters to authenticate to this endpoint. The &#x60;public_key&#x60; parameter has since been deprecated; all customers are encouraged to use &#x60;client_id&#x60; and &#x60;secret&#x60; instead. 
     * @param institutionsSearchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/institutions/#institutionssearch">Search institutions Documentation</a>
     */
    public okhttp3.Call institutionsSearchAsync(InstitutionsSearchRequest institutionsSearchRequest, final ApiCallback<InstitutionsSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = institutionsSearchValidateBeforeCall(institutionsSearchRequest, _callback);
        Type localVarReturnType = new TypeToken<InstitutionsSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for investmentsHoldingsGet
     * @param investmentsHoldingsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/investments/#investmentsholdingsget">Get Investment holdings Documentation</a>
     */
    public okhttp3.Call investmentsHoldingsGetCall(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = investmentsHoldingsGetRequest;

        // create path and map variables
        String localVarPath = "/investments/holdings/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call investmentsHoldingsGetValidateBeforeCall(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'investmentsHoldingsGetRequest' is set
        if (investmentsHoldingsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'investmentsHoldingsGetRequest' when calling investmentsHoldingsGet(Async)");
        }

        return investmentsHoldingsGetCall(investmentsHoldingsGetRequest, _callback);

    }

    /**
     * Get Investment holdings
     * The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
     * @param investmentsHoldingsGetRequest  (required)
     * @return InvestmentsHoldingsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/investments/#investmentsholdingsget">Get Investment holdings Documentation</a>
     */
    public InvestmentsHoldingsGetResponse investmentsHoldingsGet(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest) throws ApiException {
        ApiResponse<InvestmentsHoldingsGetResponse> localVarResp = investmentsHoldingsGetWithHttpInfo(investmentsHoldingsGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get Investment holdings
     * The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
     * @param investmentsHoldingsGetRequest  (required)
     * @return ApiResponse&lt;InvestmentsHoldingsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/investments/#investmentsholdingsget">Get Investment holdings Documentation</a>
     */
    public ApiResponse<InvestmentsHoldingsGetResponse> investmentsHoldingsGetWithHttpInfo(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = investmentsHoldingsGetValidateBeforeCall(investmentsHoldingsGetRequest, null);
        Type localVarReturnType = new TypeToken<InvestmentsHoldingsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Investment holdings (asynchronously)
     * The &#x60;/investments/holdings/get&#x60; endpoint allows developers to receive user-authorized stock position data for &#x60;investment&#x60;-type accounts.
     * @param investmentsHoldingsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/investments/#investmentsholdingsget">Get Investment holdings Documentation</a>
     */
    public okhttp3.Call investmentsHoldingsGetAsync(InvestmentsHoldingsGetRequest investmentsHoldingsGetRequest, final ApiCallback<InvestmentsHoldingsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = investmentsHoldingsGetValidateBeforeCall(investmentsHoldingsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<InvestmentsHoldingsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for investmentsTransactionsGet
     * @param investmentsTransactionsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/investments/#investmentstransactionsget">Get investment transactions Documentation</a>
     */
    public okhttp3.Call investmentsTransactionsGetCall(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = investmentsTransactionsGetRequest;

        // create path and map variables
        String localVarPath = "/investments/transactions/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call investmentsTransactionsGetValidateBeforeCall(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'investmentsTransactionsGetRequest' is set
        if (investmentsTransactionsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'investmentsTransactionsGetRequest' when calling investmentsTransactionsGet(Async)");
        }

        return investmentsTransactionsGetCall(investmentsTransactionsGetRequest, _callback);

    }

    /**
     * Get investment transactions
     * The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded. Instead, if transactions data is not ready when &#x60;/investments/transactions/get&#x60; is first called, Plaid will wait for the data. For this reason, calling &#x60;/investments/transactions/get&#x60; immediately after Link may take up to one to two minutes to return.
     * @param investmentsTransactionsGetRequest  (required)
     * @return InvestmentsTransactionsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/investments/#investmentstransactionsget">Get investment transactions Documentation</a>
     */
    public InvestmentsTransactionsGetResponse investmentsTransactionsGet(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest) throws ApiException {
        ApiResponse<InvestmentsTransactionsGetResponse> localVarResp = investmentsTransactionsGetWithHttpInfo(investmentsTransactionsGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get investment transactions
     * The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded. Instead, if transactions data is not ready when &#x60;/investments/transactions/get&#x60; is first called, Plaid will wait for the data. For this reason, calling &#x60;/investments/transactions/get&#x60; immediately after Link may take up to one to two minutes to return.
     * @param investmentsTransactionsGetRequest  (required)
     * @return ApiResponse&lt;InvestmentsTransactionsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/investments/#investmentstransactionsget">Get investment transactions Documentation</a>
     */
    public ApiResponse<InvestmentsTransactionsGetResponse> investmentsTransactionsGetWithHttpInfo(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = investmentsTransactionsGetValidateBeforeCall(investmentsTransactionsGetRequest, null);
        Type localVarReturnType = new TypeToken<InvestmentsTransactionsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get investment transactions (asynchronously)
     * The &#x60;/investments/transactions/get&#x60; endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the &#x60;total_investment_transactions&#x60; response body field to fetch all available investment transactions.  Note that Investments does not have a webhook to indicate when initial transaction data has loaded. Instead, if transactions data is not ready when &#x60;/investments/transactions/get&#x60; is first called, Plaid will wait for the data. For this reason, calling &#x60;/investments/transactions/get&#x60; immediately after Link may take up to one to two minutes to return.
     * @param investmentsTransactionsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/investments/#investmentstransactionsget">Get investment transactions Documentation</a>
     */
    public okhttp3.Call investmentsTransactionsGetAsync(InvestmentsTransactionsGetRequest investmentsTransactionsGetRequest, final ApiCallback<InvestmentsTransactionsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = investmentsTransactionsGetValidateBeforeCall(investmentsTransactionsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<InvestmentsTransactionsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemAccessTokenInvalidate
     * @param itemAccessTokenInvalidateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itemaccess_tokeninvalidate">Invalidate access_token Documentation</a>
     */
    public okhttp3.Call itemAccessTokenInvalidateCall(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemAccessTokenInvalidateRequest;

        // create path and map variables
        String localVarPath = "/item/access_token/invalidate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemAccessTokenInvalidateValidateBeforeCall(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemAccessTokenInvalidateRequest' is set
        if (itemAccessTokenInvalidateRequest == null) {
            throw new ApiException("Missing the required parameter 'itemAccessTokenInvalidateRequest' when calling itemAccessTokenInvalidate(Async)");
        }

        return itemAccessTokenInvalidateCall(itemAccessTokenInvalidateRequest, _callback);

    }

    /**
     * Invalidate access_token
     * By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;. 
     * @param itemAccessTokenInvalidateRequest  (required)
     * @return ItemAccessTokenInvalidateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itemaccess_tokeninvalidate">Invalidate access_token Documentation</a>
     */
    public ItemAccessTokenInvalidateResponse itemAccessTokenInvalidate(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest) throws ApiException {
        ApiResponse<ItemAccessTokenInvalidateResponse> localVarResp = itemAccessTokenInvalidateWithHttpInfo(itemAccessTokenInvalidateRequest);
        return localVarResp.getData();
    }

    /**
     * Invalidate access_token
     * By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;. 
     * @param itemAccessTokenInvalidateRequest  (required)
     * @return ApiResponse&lt;ItemAccessTokenInvalidateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itemaccess_tokeninvalidate">Invalidate access_token Documentation</a>
     */
    public ApiResponse<ItemAccessTokenInvalidateResponse> itemAccessTokenInvalidateWithHttpInfo(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest) throws ApiException {
        okhttp3.Call localVarCall = itemAccessTokenInvalidateValidateBeforeCall(itemAccessTokenInvalidateRequest, null);
        Type localVarReturnType = new TypeToken<ItemAccessTokenInvalidateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invalidate access_token (asynchronously)
     * By default, the &#x60;access_token&#x60; associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the &#x60;/item/access_token/invalidate&#x60; endpoint to rotate the &#x60;access_token&#x60; associated with an Item. The endpoint returns a new &#x60;access_token&#x60; and immediately invalidates the previous &#x60;access_token&#x60;. 
     * @param itemAccessTokenInvalidateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itemaccess_tokeninvalidate">Invalidate access_token Documentation</a>
     */
    public okhttp3.Call itemAccessTokenInvalidateAsync(ItemAccessTokenInvalidateRequest itemAccessTokenInvalidateRequest, final ApiCallback<ItemAccessTokenInvalidateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemAccessTokenInvalidateValidateBeforeCall(itemAccessTokenInvalidateRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemAccessTokenInvalidateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemActivityList
     * @param itemActivityListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemActivityListCall(ItemActivityListRequest itemActivityListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemActivityListRequest;

        // create path and map variables
        String localVarPath = "/item/activity/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemActivityListValidateBeforeCall(ItemActivityListRequest itemActivityListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemActivityListRequest' is set
        if (itemActivityListRequest == null) {
            throw new ApiException("Missing the required parameter 'itemActivityListRequest' when calling itemActivityList(Async)");
        }

        return itemActivityListCall(itemActivityListRequest, _callback);

    }

    /**
     * List a historical log of user consent events
     * List a historical log of user consent events
     * @param itemActivityListRequest  (required)
     * @return ItemActivityListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ItemActivityListResponse itemActivityList(ItemActivityListRequest itemActivityListRequest) throws ApiException {
        ApiResponse<ItemActivityListResponse> localVarResp = itemActivityListWithHttpInfo(itemActivityListRequest);
        return localVarResp.getData();
    }

    /**
     * List a historical log of user consent events
     * List a historical log of user consent events
     * @param itemActivityListRequest  (required)
     * @return ApiResponse&lt;ItemActivityListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemActivityListResponse> itemActivityListWithHttpInfo(ItemActivityListRequest itemActivityListRequest) throws ApiException {
        okhttp3.Call localVarCall = itemActivityListValidateBeforeCall(itemActivityListRequest, null);
        Type localVarReturnType = new TypeToken<ItemActivityListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a historical log of user consent events (asynchronously)
     * List a historical log of user consent events
     * @param itemActivityListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemActivityListAsync(ItemActivityListRequest itemActivityListRequest, final ApiCallback<ItemActivityListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemActivityListValidateBeforeCall(itemActivityListRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemActivityListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemApplicationList
     * @param itemApplicationListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemApplicationListCall(ItemApplicationListRequest itemApplicationListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemApplicationListRequest;

        // create path and map variables
        String localVarPath = "/item/application/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemApplicationListValidateBeforeCall(ItemApplicationListRequest itemApplicationListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemApplicationListRequest' is set
        if (itemApplicationListRequest == null) {
            throw new ApiException("Missing the required parameter 'itemApplicationListRequest' when calling itemApplicationList(Async)");
        }

        return itemApplicationListCall(itemApplicationListRequest, _callback);

    }

    /**
     * List a user’s connected applications
     * List a user’s connected applications
     * @param itemApplicationListRequest  (required)
     * @return ItemApplicationListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ItemApplicationListResponse itemApplicationList(ItemApplicationListRequest itemApplicationListRequest) throws ApiException {
        ApiResponse<ItemApplicationListResponse> localVarResp = itemApplicationListWithHttpInfo(itemApplicationListRequest);
        return localVarResp.getData();
    }

    /**
     * List a user’s connected applications
     * List a user’s connected applications
     * @param itemApplicationListRequest  (required)
     * @return ApiResponse&lt;ItemApplicationListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemApplicationListResponse> itemApplicationListWithHttpInfo(ItemApplicationListRequest itemApplicationListRequest) throws ApiException {
        okhttp3.Call localVarCall = itemApplicationListValidateBeforeCall(itemApplicationListRequest, null);
        Type localVarReturnType = new TypeToken<ItemApplicationListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a user’s connected applications (asynchronously)
     * List a user’s connected applications
     * @param itemApplicationListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemApplicationListAsync(ItemApplicationListRequest itemApplicationListRequest, final ApiCallback<ItemApplicationListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemApplicationListValidateBeforeCall(itemApplicationListRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemApplicationListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemApplicationScopesUpdate
     * @param itemApplicationScopesUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemApplicationScopesUpdateCall(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemApplicationScopesUpdateRequest;

        // create path and map variables
        String localVarPath = "/item/application/scopes/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemApplicationScopesUpdateValidateBeforeCall(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemApplicationScopesUpdateRequest' is set
        if (itemApplicationScopesUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'itemApplicationScopesUpdateRequest' when calling itemApplicationScopesUpdate(Async)");
        }

        return itemApplicationScopesUpdateCall(itemApplicationScopesUpdateRequest, _callback);

    }

    /**
     * Update the scopes of access for a particular application
     * Enable consumers to update product access on selected accounts for an application.
     * @param itemApplicationScopesUpdateRequest  (required)
     * @return ItemApplicationScopesUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ItemApplicationScopesUpdateResponse itemApplicationScopesUpdate(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest) throws ApiException {
        ApiResponse<ItemApplicationScopesUpdateResponse> localVarResp = itemApplicationScopesUpdateWithHttpInfo(itemApplicationScopesUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update the scopes of access for a particular application
     * Enable consumers to update product access on selected accounts for an application.
     * @param itemApplicationScopesUpdateRequest  (required)
     * @return ApiResponse&lt;ItemApplicationScopesUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemApplicationScopesUpdateResponse> itemApplicationScopesUpdateWithHttpInfo(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = itemApplicationScopesUpdateValidateBeforeCall(itemApplicationScopesUpdateRequest, null);
        Type localVarReturnType = new TypeToken<ItemApplicationScopesUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the scopes of access for a particular application (asynchronously)
     * Enable consumers to update product access on selected accounts for an application.
     * @param itemApplicationScopesUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemApplicationScopesUpdateAsync(ItemApplicationScopesUpdateRequest itemApplicationScopesUpdateRequest, final ApiCallback<ItemApplicationScopesUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemApplicationScopesUpdateValidateBeforeCall(itemApplicationScopesUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemApplicationScopesUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemCreatePublicToken
     * @param itemPublicTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itempublic_tokencreate">Create public token Documentation</a>
     */
    public okhttp3.Call itemCreatePublicTokenCall(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemPublicTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/item/public_token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemCreatePublicTokenValidateBeforeCall(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemPublicTokenCreateRequest' is set
        if (itemPublicTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'itemPublicTokenCreateRequest' when calling itemCreatePublicToken(Async)");
        }

        return itemCreatePublicTokenCall(itemPublicTokenCreateRequest, _callback);

    }

    /**
     * Create public token
     * Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
     * @param itemPublicTokenCreateRequest  (required)
     * @return ItemPublicTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itempublic_tokencreate">Create public token Documentation</a>
     */
    public ItemPublicTokenCreateResponse itemCreatePublicToken(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest) throws ApiException {
        ApiResponse<ItemPublicTokenCreateResponse> localVarResp = itemCreatePublicTokenWithHttpInfo(itemPublicTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create public token
     * Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
     * @param itemPublicTokenCreateRequest  (required)
     * @return ApiResponse&lt;ItemPublicTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itempublic_tokencreate">Create public token Documentation</a>
     */
    public ApiResponse<ItemPublicTokenCreateResponse> itemCreatePublicTokenWithHttpInfo(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = itemCreatePublicTokenValidateBeforeCall(itemPublicTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<ItemPublicTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create public token (asynchronously)
     * Note: As of July 2020, the &#x60;/item/public_token/create&#x60; endpoint is deprecated. Instead, use &#x60;/link/token/create&#x60; with an &#x60;access_token&#x60; to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the &#x60;/item/public_token/create&#x60; endpoint and then initialize Link with that &#x60;public_token&#x60;.  A &#x60;public_token&#x60; is one-time use and expires after 30 minutes. You use a &#x60;public_token&#x60; to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a &#x60;public_token&#x60; for an Item even if you did not use Link to create the Item originally.  The &#x60;/item/public_token/create&#x60; endpoint is **not** used to create your initial &#x60;public_token&#x60;. If you have not already received an &#x60;access_token&#x60; for a specific Item, use Link to obtain your &#x60;public_token&#x60; instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
     * @param itemPublicTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itempublic_tokencreate">Create public token Documentation</a>
     */
    public okhttp3.Call itemCreatePublicTokenAsync(ItemPublicTokenCreateRequest itemPublicTokenCreateRequest, final ApiCallback<ItemPublicTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemCreatePublicTokenValidateBeforeCall(itemPublicTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemPublicTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemGet
     * @param itemGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemget">Retrieve an Item Documentation</a>
     */
    public okhttp3.Call itemGetCall(ItemGetRequest itemGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemGetRequest;

        // create path and map variables
        String localVarPath = "/item/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemGetValidateBeforeCall(ItemGetRequest itemGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemGetRequest' is set
        if (itemGetRequest == null) {
            throw new ApiException("Missing the required parameter 'itemGetRequest' when calling itemGet(Async)");
        }

        return itemGetCall(itemGetRequest, _callback);

    }

    /**
     * Retrieve an Item
     * Returns information about the status of an Item.
     * @param itemGetRequest  (required)
     * @return ItemGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemget">Retrieve an Item Documentation</a>
     */
    public ItemGetResponse itemGet(ItemGetRequest itemGetRequest) throws ApiException {
        ApiResponse<ItemGetResponse> localVarResp = itemGetWithHttpInfo(itemGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Item
     * Returns information about the status of an Item.
     * @param itemGetRequest  (required)
     * @return ApiResponse&lt;ItemGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemget">Retrieve an Item Documentation</a>
     */
    public ApiResponse<ItemGetResponse> itemGetWithHttpInfo(ItemGetRequest itemGetRequest) throws ApiException {
        okhttp3.Call localVarCall = itemGetValidateBeforeCall(itemGetRequest, null);
        Type localVarReturnType = new TypeToken<ItemGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Item (asynchronously)
     * Returns information about the status of an Item.
     * @param itemGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemget">Retrieve an Item Documentation</a>
     */
    public okhttp3.Call itemGetAsync(ItemGetRequest itemGetRequest, final ApiCallback<ItemGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemGetValidateBeforeCall(itemGetRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemImport
     * @param itemImportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemImportCall(ItemImportRequest itemImportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemImportRequest;

        // create path and map variables
        String localVarPath = "/item/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemImportValidateBeforeCall(ItemImportRequest itemImportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemImportRequest' is set
        if (itemImportRequest == null) {
            throw new ApiException("Missing the required parameter 'itemImportRequest' when calling itemImport(Async)");
        }

        return itemImportCall(itemImportRequest, _callback);

    }

    /**
     * Import Item
     * &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (&#x60;target_account_id&#x60;).
     * @param itemImportRequest  (required)
     * @return ItemImportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ItemImportResponse itemImport(ItemImportRequest itemImportRequest) throws ApiException {
        ApiResponse<ItemImportResponse> localVarResp = itemImportWithHttpInfo(itemImportRequest);
        return localVarResp.getData();
    }

    /**
     * Import Item
     * &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (&#x60;target_account_id&#x60;).
     * @param itemImportRequest  (required)
     * @return ApiResponse&lt;ItemImportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemImportResponse> itemImportWithHttpInfo(ItemImportRequest itemImportRequest) throws ApiException {
        okhttp3.Call localVarCall = itemImportValidateBeforeCall(itemImportRequest, null);
        Type localVarReturnType = new TypeToken<ItemImportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import Item (asynchronously)
     * &#x60;/item/import&#x60; creates an Item via your Plaid Exchange Integration and returns an &#x60;access_token&#x60;. As part of an &#x60;/item/import&#x60; request, you will include a User ID (&#x60;user_auth.user_id&#x60;) and Authentication Token (&#x60;user_auth.auth_token&#x60;) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via &#x60;/item/import&#x60;, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (&#x60;target_account_id&#x60;).
     * @param itemImportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call itemImportAsync(ItemImportRequest itemImportRequest, final ApiCallback<ItemImportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemImportValidateBeforeCall(itemImportRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemImportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemPublicTokenExchange
     * @param itemPublicTokenExchangeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itempublic_tokenexchange">Exchange public token for an access token Documentation</a>
     */
    public okhttp3.Call itemPublicTokenExchangeCall(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemPublicTokenExchangeRequest;

        // create path and map variables
        String localVarPath = "/item/public_token/exchange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemPublicTokenExchangeValidateBeforeCall(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemPublicTokenExchangeRequest' is set
        if (itemPublicTokenExchangeRequest == null) {
            throw new ApiException("Missing the required parameter 'itemPublicTokenExchangeRequest' when calling itemPublicTokenExchange(Async)");
        }

        return itemPublicTokenExchangeCall(itemPublicTokenExchangeRequest, _callback);

    }

    /**
     * Exchange public token for an access token
     * Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes. An &#x60;access_token&#x60; does not expire, but can be revoked by calling &#x60;/item/remove&#x60;.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
     * @param itemPublicTokenExchangeRequest  (required)
     * @return ItemPublicTokenExchangeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itempublic_tokenexchange">Exchange public token for an access token Documentation</a>
     */
    public ItemPublicTokenExchangeResponse itemPublicTokenExchange(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest) throws ApiException {
        ApiResponse<ItemPublicTokenExchangeResponse> localVarResp = itemPublicTokenExchangeWithHttpInfo(itemPublicTokenExchangeRequest);
        return localVarResp.getData();
    }

    /**
     * Exchange public token for an access token
     * Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes. An &#x60;access_token&#x60; does not expire, but can be revoked by calling &#x60;/item/remove&#x60;.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
     * @param itemPublicTokenExchangeRequest  (required)
     * @return ApiResponse&lt;ItemPublicTokenExchangeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itempublic_tokenexchange">Exchange public token for an access token Documentation</a>
     */
    public ApiResponse<ItemPublicTokenExchangeResponse> itemPublicTokenExchangeWithHttpInfo(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest) throws ApiException {
        okhttp3.Call localVarCall = itemPublicTokenExchangeValidateBeforeCall(itemPublicTokenExchangeRequest, null);
        Type localVarReturnType = new TypeToken<ItemPublicTokenExchangeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Exchange public token for an access token (asynchronously)
     * Exchange a Link &#x60;public_token&#x60; for an API &#x60;access_token&#x60;. Link hands off the &#x60;public_token&#x60; client-side via the &#x60;onSuccess&#x60; callback once a user has successfully created an Item. The &#x60;public_token&#x60; is ephemeral and expires after 30 minutes. An &#x60;access_token&#x60; does not expire, but can be revoked by calling &#x60;/item/remove&#x60;.  The response also includes an &#x60;item_id&#x60; that should be stored with the &#x60;access_token&#x60;. The &#x60;item_id&#x60; is used to identify an Item in a webhook. The &#x60;item_id&#x60; can also be retrieved by making an &#x60;/item/get&#x60; request.
     * @param itemPublicTokenExchangeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#itempublic_tokenexchange">Exchange public token for an access token Documentation</a>
     */
    public okhttp3.Call itemPublicTokenExchangeAsync(ItemPublicTokenExchangeRequest itemPublicTokenExchangeRequest, final ApiCallback<ItemPublicTokenExchangeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemPublicTokenExchangeValidateBeforeCall(itemPublicTokenExchangeRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemPublicTokenExchangeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemRemove
     * @param itemRemoveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemremove">Remove an Item Documentation</a>
     */
    public okhttp3.Call itemRemoveCall(ItemRemoveRequest itemRemoveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemRemoveRequest;

        // create path and map variables
        String localVarPath = "/item/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemRemoveValidateBeforeCall(ItemRemoveRequest itemRemoveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemRemoveRequest' is set
        if (itemRemoveRequest == null) {
            throw new ApiException("Missing the required parameter 'itemRemoveRequest' when calling itemRemove(Async)");
        }

        return itemRemoveCall(itemRemoveRequest, _callback);

    }

    /**
     * Remove an Item
     * The &#x60;/item/remove&#x60; endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
     * @param itemRemoveRequest  (required)
     * @return ItemRemoveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemremove">Remove an Item Documentation</a>
     */
    public ItemRemoveResponse itemRemove(ItemRemoveRequest itemRemoveRequest) throws ApiException {
        ApiResponse<ItemRemoveResponse> localVarResp = itemRemoveWithHttpInfo(itemRemoveRequest);
        return localVarResp.getData();
    }

    /**
     * Remove an Item
     * The &#x60;/item/remove&#x60; endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
     * @param itemRemoveRequest  (required)
     * @return ApiResponse&lt;ItemRemoveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemremove">Remove an Item Documentation</a>
     */
    public ApiResponse<ItemRemoveResponse> itemRemoveWithHttpInfo(ItemRemoveRequest itemRemoveRequest) throws ApiException {
        okhttp3.Call localVarCall = itemRemoveValidateBeforeCall(itemRemoveRequest, null);
        Type localVarReturnType = new TypeToken<ItemRemoveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove an Item (asynchronously)
     * The &#x60;/item/remove&#x60; endpoint allows you to remove an Item. Once removed, the &#x60;access_token&#x60;, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an &#x60;/item/remove&#x60;  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via &#x60;/item/remove&#x60; may still show as an active connection in the institution&#39;s OAuth permission manager.  API versions 2019-05-29 and earlier return a &#x60;removed&#x60; boolean as part of the response.
     * @param itemRemoveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemremove">Remove an Item Documentation</a>
     */
    public okhttp3.Call itemRemoveAsync(ItemRemoveRequest itemRemoveRequest, final ApiCallback<ItemRemoveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemRemoveValidateBeforeCall(itemRemoveRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemRemoveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for itemWebhookUpdate
     * @param itemWebhookUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemwebhookupdate">Update Webhook URL Documentation</a>
     */
    public okhttp3.Call itemWebhookUpdateCall(ItemWebhookUpdateRequest itemWebhookUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = itemWebhookUpdateRequest;

        // create path and map variables
        String localVarPath = "/item/webhook/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call itemWebhookUpdateValidateBeforeCall(ItemWebhookUpdateRequest itemWebhookUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemWebhookUpdateRequest' is set
        if (itemWebhookUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'itemWebhookUpdateRequest' when calling itemWebhookUpdate(Async)");
        }

        return itemWebhookUpdateCall(itemWebhookUpdateRequest, _callback);

    }

    /**
     * Update Webhook URL
     * The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
     * @param itemWebhookUpdateRequest  (required)
     * @return ItemWebhookUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemwebhookupdate">Update Webhook URL Documentation</a>
     */
    public ItemWebhookUpdateResponse itemWebhookUpdate(ItemWebhookUpdateRequest itemWebhookUpdateRequest) throws ApiException {
        ApiResponse<ItemWebhookUpdateResponse> localVarResp = itemWebhookUpdateWithHttpInfo(itemWebhookUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update Webhook URL
     * The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
     * @param itemWebhookUpdateRequest  (required)
     * @return ApiResponse&lt;ItemWebhookUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemwebhookupdate">Update Webhook URL Documentation</a>
     */
    public ApiResponse<ItemWebhookUpdateResponse> itemWebhookUpdateWithHttpInfo(ItemWebhookUpdateRequest itemWebhookUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = itemWebhookUpdateValidateBeforeCall(itemWebhookUpdateRequest, null);
        Type localVarReturnType = new TypeToken<ItemWebhookUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Webhook URL (asynchronously)
     * The POST &#x60;/item/webhook/update&#x60; allows you to update the webhook URL associated with an Item. This request triggers a [&#x60;WEBHOOK_UPDATE_ACKNOWLEDGED&#x60;](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
     * @param itemWebhookUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/items/#itemwebhookupdate">Update Webhook URL Documentation</a>
     */
    public okhttp3.Call itemWebhookUpdateAsync(ItemWebhookUpdateRequest itemWebhookUpdateRequest, final ApiCallback<ItemWebhookUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = itemWebhookUpdateValidateBeforeCall(itemWebhookUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<ItemWebhookUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for liabilitiesGet
     * @param liabilitiesGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/liabilities/#liabilitiesget">Retrieve Liabilities data Documentation</a>
     */
    public okhttp3.Call liabilitiesGetCall(LiabilitiesGetRequest liabilitiesGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = liabilitiesGetRequest;

        // create path and map variables
        String localVarPath = "/liabilities/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call liabilitiesGetValidateBeforeCall(LiabilitiesGetRequest liabilitiesGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'liabilitiesGetRequest' is set
        if (liabilitiesGetRequest == null) {
            throw new ApiException("Missing the required parameter 'liabilitiesGetRequest' when calling liabilitiesGet(Async)");
        }

        return liabilitiesGetCall(liabilitiesGetRequest, _callback);

    }

    /**
     * Retrieve Liabilities data
     * The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     * @param liabilitiesGetRequest  (required)
     * @return LiabilitiesGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/liabilities/#liabilitiesget">Retrieve Liabilities data Documentation</a>
     */
    public LiabilitiesGetResponse liabilitiesGet(LiabilitiesGetRequest liabilitiesGetRequest) throws ApiException {
        ApiResponse<LiabilitiesGetResponse> localVarResp = liabilitiesGetWithHttpInfo(liabilitiesGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve Liabilities data
     * The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     * @param liabilitiesGetRequest  (required)
     * @return ApiResponse&lt;LiabilitiesGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/liabilities/#liabilitiesget">Retrieve Liabilities data Documentation</a>
     */
    public ApiResponse<LiabilitiesGetResponse> liabilitiesGetWithHttpInfo(LiabilitiesGetRequest liabilitiesGetRequest) throws ApiException {
        okhttp3.Call localVarCall = liabilitiesGetValidateBeforeCall(liabilitiesGetRequest, null);
        Type localVarReturnType = new TypeToken<LiabilitiesGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Liabilities data (asynchronously)
     * The &#x60;/liabilities/get&#x60; endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type &#x60;credit&#x60; with account subtype &#x60;credit card&#x60; or &#x60;paypal&#x60;, and account type &#x60;loan&#x60; with account subtype &#x60;student&#x60; or &#x60;mortgage&#x60;. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the &#x60;account_filters&#x60; parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling &#x60;/liabilities/get&#x60;.  Note: This request may take some time to complete if &#x60;liabilities&#x60; was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     * @param liabilitiesGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/liabilities/#liabilitiesget">Retrieve Liabilities data Documentation</a>
     */
    public okhttp3.Call liabilitiesGetAsync(LiabilitiesGetRequest liabilitiesGetRequest, final ApiCallback<LiabilitiesGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = liabilitiesGetValidateBeforeCall(liabilitiesGetRequest, _callback);
        Type localVarReturnType = new TypeToken<LiabilitiesGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linkDeliveryCreate
     * @param linkDeliveryCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/docs/assets/waitlist/link-delivery/">Create Link Delivery session Documentation</a>
     */
    public okhttp3.Call linkDeliveryCreateCall(LinkDeliveryCreateRequest linkDeliveryCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkDeliveryCreateRequest;

        // create path and map variables
        String localVarPath = "/link_delivery/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkDeliveryCreateValidateBeforeCall(LinkDeliveryCreateRequest linkDeliveryCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkDeliveryCreateRequest' is set
        if (linkDeliveryCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'linkDeliveryCreateRequest' when calling linkDeliveryCreate(Async)");
        }

        return linkDeliveryCreateCall(linkDeliveryCreateRequest, _callback);

    }

    /**
     * Create Link Delivery session
     * Use the &#x60;/link_delivery/create&#x60; endpoint to create a Link Delivery session.
     * @param linkDeliveryCreateRequest  (required)
     * @return LinkDeliveryCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/docs/assets/waitlist/link-delivery/">Create Link Delivery session Documentation</a>
     */
    public LinkDeliveryCreateResponse linkDeliveryCreate(LinkDeliveryCreateRequest linkDeliveryCreateRequest) throws ApiException {
        ApiResponse<LinkDeliveryCreateResponse> localVarResp = linkDeliveryCreateWithHttpInfo(linkDeliveryCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Link Delivery session
     * Use the &#x60;/link_delivery/create&#x60; endpoint to create a Link Delivery session.
     * @param linkDeliveryCreateRequest  (required)
     * @return ApiResponse&lt;LinkDeliveryCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/docs/assets/waitlist/link-delivery/">Create Link Delivery session Documentation</a>
     */
    public ApiResponse<LinkDeliveryCreateResponse> linkDeliveryCreateWithHttpInfo(LinkDeliveryCreateRequest linkDeliveryCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = linkDeliveryCreateValidateBeforeCall(linkDeliveryCreateRequest, null);
        Type localVarReturnType = new TypeToken<LinkDeliveryCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Link Delivery session (asynchronously)
     * Use the &#x60;/link_delivery/create&#x60; endpoint to create a Link Delivery session.
     * @param linkDeliveryCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/docs/assets/waitlist/link-delivery/">Create Link Delivery session Documentation</a>
     */
    public okhttp3.Call linkDeliveryCreateAsync(LinkDeliveryCreateRequest linkDeliveryCreateRequest, final ApiCallback<LinkDeliveryCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkDeliveryCreateValidateBeforeCall(linkDeliveryCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<LinkDeliveryCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linkDeliveryGet
     * @param linkDeliveryGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/docs/assets/waitlist/link-delivery/">Get Link Delivery session Documentation</a>
     */
    public okhttp3.Call linkDeliveryGetCall(LinkDeliveryGetRequest linkDeliveryGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkDeliveryGetRequest;

        // create path and map variables
        String localVarPath = "/link_delivery/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkDeliveryGetValidateBeforeCall(LinkDeliveryGetRequest linkDeliveryGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkDeliveryGetRequest' is set
        if (linkDeliveryGetRequest == null) {
            throw new ApiException("Missing the required parameter 'linkDeliveryGetRequest' when calling linkDeliveryGet(Async)");
        }

        return linkDeliveryGetCall(linkDeliveryGetRequest, _callback);

    }

    /**
     * Get Link Delivery session
     * Use the &#x60;/link_delivery/get&#x60; endpoint to get the status of a Link Delivery session.
     * @param linkDeliveryGetRequest  (required)
     * @return LinkDeliveryGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/docs/assets/waitlist/link-delivery/">Get Link Delivery session Documentation</a>
     */
    public LinkDeliveryGetResponse linkDeliveryGet(LinkDeliveryGetRequest linkDeliveryGetRequest) throws ApiException {
        ApiResponse<LinkDeliveryGetResponse> localVarResp = linkDeliveryGetWithHttpInfo(linkDeliveryGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get Link Delivery session
     * Use the &#x60;/link_delivery/get&#x60; endpoint to get the status of a Link Delivery session.
     * @param linkDeliveryGetRequest  (required)
     * @return ApiResponse&lt;LinkDeliveryGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/docs/assets/waitlist/link-delivery/">Get Link Delivery session Documentation</a>
     */
    public ApiResponse<LinkDeliveryGetResponse> linkDeliveryGetWithHttpInfo(LinkDeliveryGetRequest linkDeliveryGetRequest) throws ApiException {
        okhttp3.Call localVarCall = linkDeliveryGetValidateBeforeCall(linkDeliveryGetRequest, null);
        Type localVarReturnType = new TypeToken<LinkDeliveryGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Link Delivery session (asynchronously)
     * Use the &#x60;/link_delivery/get&#x60; endpoint to get the status of a Link Delivery session.
     * @param linkDeliveryGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/docs/assets/waitlist/link-delivery/">Get Link Delivery session Documentation</a>
     */
    public okhttp3.Call linkDeliveryGetAsync(LinkDeliveryGetRequest linkDeliveryGetRequest, final ApiCallback<LinkDeliveryGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkDeliveryGetValidateBeforeCall(linkDeliveryGetRequest, _callback);
        Type localVarReturnType = new TypeToken<LinkDeliveryGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linkOauthCorrelationIdExchange
     * @param linkOAuthCorrelationIdExchangeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/oauth/#linkcorrelationid">Exchange the Link Correlation Id for a Link Token Documentation</a>
     */
    public okhttp3.Call linkOauthCorrelationIdExchangeCall(LinkOAuthCorrelationIdExchangeRequest linkOAuthCorrelationIdExchangeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkOAuthCorrelationIdExchangeRequest;

        // create path and map variables
        String localVarPath = "/link/oauth/correlation_id/exchange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkOauthCorrelationIdExchangeValidateBeforeCall(LinkOAuthCorrelationIdExchangeRequest linkOAuthCorrelationIdExchangeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkOAuthCorrelationIdExchangeRequest' is set
        if (linkOAuthCorrelationIdExchangeRequest == null) {
            throw new ApiException("Missing the required parameter 'linkOAuthCorrelationIdExchangeRequest' when calling linkOauthCorrelationIdExchange(Async)");
        }

        return linkOauthCorrelationIdExchangeCall(linkOAuthCorrelationIdExchangeRequest, _callback);

    }

    /**
     * Exchange the Link Correlation Id for a Link Token
     * Exchange an OAuth &#x60;link_correlation_id&#x60; for the corresponding &#x60;link_token&#x60;. The &#x60;link_correlation_id&#x60; is only available for &#39;payment_initiation&#39; products and is provided to the client via the OAuth &#x60;redirect_uri&#x60; as a query parameter. The &#x60;link_correlation_id&#x60; is ephemeral and expires in a brief period, after which it can no longer be exchanged for the &#39;link_token&#39;.
     * @param linkOAuthCorrelationIdExchangeRequest  (required)
     * @return LinkOAuthCorrelationIdExchangeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/oauth/#linkcorrelationid">Exchange the Link Correlation Id for a Link Token Documentation</a>
     */
    public LinkOAuthCorrelationIdExchangeResponse linkOauthCorrelationIdExchange(LinkOAuthCorrelationIdExchangeRequest linkOAuthCorrelationIdExchangeRequest) throws ApiException {
        ApiResponse<LinkOAuthCorrelationIdExchangeResponse> localVarResp = linkOauthCorrelationIdExchangeWithHttpInfo(linkOAuthCorrelationIdExchangeRequest);
        return localVarResp.getData();
    }

    /**
     * Exchange the Link Correlation Id for a Link Token
     * Exchange an OAuth &#x60;link_correlation_id&#x60; for the corresponding &#x60;link_token&#x60;. The &#x60;link_correlation_id&#x60; is only available for &#39;payment_initiation&#39; products and is provided to the client via the OAuth &#x60;redirect_uri&#x60; as a query parameter. The &#x60;link_correlation_id&#x60; is ephemeral and expires in a brief period, after which it can no longer be exchanged for the &#39;link_token&#39;.
     * @param linkOAuthCorrelationIdExchangeRequest  (required)
     * @return ApiResponse&lt;LinkOAuthCorrelationIdExchangeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/oauth/#linkcorrelationid">Exchange the Link Correlation Id for a Link Token Documentation</a>
     */
    public ApiResponse<LinkOAuthCorrelationIdExchangeResponse> linkOauthCorrelationIdExchangeWithHttpInfo(LinkOAuthCorrelationIdExchangeRequest linkOAuthCorrelationIdExchangeRequest) throws ApiException {
        okhttp3.Call localVarCall = linkOauthCorrelationIdExchangeValidateBeforeCall(linkOAuthCorrelationIdExchangeRequest, null);
        Type localVarReturnType = new TypeToken<LinkOAuthCorrelationIdExchangeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Exchange the Link Correlation Id for a Link Token (asynchronously)
     * Exchange an OAuth &#x60;link_correlation_id&#x60; for the corresponding &#x60;link_token&#x60;. The &#x60;link_correlation_id&#x60; is only available for &#39;payment_initiation&#39; products and is provided to the client via the OAuth &#x60;redirect_uri&#x60; as a query parameter. The &#x60;link_correlation_id&#x60; is ephemeral and expires in a brief period, after which it can no longer be exchanged for the &#39;link_token&#39;.
     * @param linkOAuthCorrelationIdExchangeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/oauth/#linkcorrelationid">Exchange the Link Correlation Id for a Link Token Documentation</a>
     */
    public okhttp3.Call linkOauthCorrelationIdExchangeAsync(LinkOAuthCorrelationIdExchangeRequest linkOAuthCorrelationIdExchangeRequest, final ApiCallback<LinkOAuthCorrelationIdExchangeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkOauthCorrelationIdExchangeValidateBeforeCall(linkOAuthCorrelationIdExchangeRequest, _callback);
        Type localVarReturnType = new TypeToken<LinkOAuthCorrelationIdExchangeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linkTokenCreate
     * @param linkTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#linktokencreate">Create Link Token Documentation</a>
     */
    public okhttp3.Call linkTokenCreateCall(LinkTokenCreateRequest linkTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/link/token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkTokenCreateValidateBeforeCall(LinkTokenCreateRequest linkTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkTokenCreateRequest' is set
        if (linkTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'linkTokenCreateRequest' when calling linkTokenCreate(Async)");
        }

        return linkTokenCreateCall(linkTokenCreateRequest, _callback);

    }

    /**
     * Create Link Token
     * The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     * @param linkTokenCreateRequest  (required)
     * @return LinkTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#linktokencreate">Create Link Token Documentation</a>
     */
    public LinkTokenCreateResponse linkTokenCreate(LinkTokenCreateRequest linkTokenCreateRequest) throws ApiException {
        ApiResponse<LinkTokenCreateResponse> localVarResp = linkTokenCreateWithHttpInfo(linkTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Link Token
     * The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     * @param linkTokenCreateRequest  (required)
     * @return ApiResponse&lt;LinkTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#linktokencreate">Create Link Token Documentation</a>
     */
    public ApiResponse<LinkTokenCreateResponse> linkTokenCreateWithHttpInfo(LinkTokenCreateRequest linkTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = linkTokenCreateValidateBeforeCall(linkTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<LinkTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Link Token (asynchronously)
     * The &#x60;/link/token/create&#x60; endpoint creates a &#x60;link_token&#x60;, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a &#x60;public_token&#x60;, which can then be exchanged for an &#x60;access_token&#x60; via &#x60;/item/public_token/exchange&#x60; as part of the main Link flow.  A &#x60;link_token&#x60; generated by &#x60;/link/token/create&#x60; is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     * @param linkTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#linktokencreate">Create Link Token Documentation</a>
     */
    public okhttp3.Call linkTokenCreateAsync(LinkTokenCreateRequest linkTokenCreateRequest, final ApiCallback<LinkTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkTokenCreateValidateBeforeCall(linkTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<LinkTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linkTokenGet
     * @param linkTokenGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#linktokenget">Get Link Token Documentation</a>
     */
    public okhttp3.Call linkTokenGetCall(LinkTokenGetRequest linkTokenGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = linkTokenGetRequest;

        // create path and map variables
        String localVarPath = "/link/token/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkTokenGetValidateBeforeCall(LinkTokenGetRequest linkTokenGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkTokenGetRequest' is set
        if (linkTokenGetRequest == null) {
            throw new ApiException("Missing the required parameter 'linkTokenGetRequest' when calling linkTokenGet(Async)");
        }

        return linkTokenGetCall(linkTokenGetRequest, _callback);

    }

    /**
     * Get Link Token
     * The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
     * @param linkTokenGetRequest  (required)
     * @return LinkTokenGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#linktokenget">Get Link Token Documentation</a>
     */
    public LinkTokenGetResponse linkTokenGet(LinkTokenGetRequest linkTokenGetRequest) throws ApiException {
        ApiResponse<LinkTokenGetResponse> localVarResp = linkTokenGetWithHttpInfo(linkTokenGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get Link Token
     * The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
     * @param linkTokenGetRequest  (required)
     * @return ApiResponse&lt;LinkTokenGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#linktokenget">Get Link Token Documentation</a>
     */
    public ApiResponse<LinkTokenGetResponse> linkTokenGetWithHttpInfo(LinkTokenGetRequest linkTokenGetRequest) throws ApiException {
        okhttp3.Call localVarCall = linkTokenGetValidateBeforeCall(linkTokenGetRequest, null);
        Type localVarReturnType = new TypeToken<LinkTokenGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Link Token (asynchronously)
     * The &#x60;/link/token/get&#x60; endpoint gets information about a previously-created &#x60;link_token&#x60; using the &#x60;/link/token/create&#x60; endpoint. It can be useful for debugging purposes.
     * @param linkTokenGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/tokens/#linktokenget">Get Link Token Documentation</a>
     */
    public okhttp3.Call linkTokenGetAsync(LinkTokenGetRequest linkTokenGetRequest, final ApiCallback<LinkTokenGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkTokenGetValidateBeforeCall(linkTokenGetRequest, _callback);
        Type localVarReturnType = new TypeToken<LinkTokenGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partnerCustomerCreate
     * @param partnerCustomerCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomercreate">Creates a new end customer for a Plaid reseller. Documentation</a>
     */
    public okhttp3.Call partnerCustomerCreateCall(PartnerCustomerCreateRequest partnerCustomerCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partnerCustomerCreateRequest;

        // create path and map variables
        String localVarPath = "/partner/customer/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partnerCustomerCreateValidateBeforeCall(PartnerCustomerCreateRequest partnerCustomerCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partnerCustomerCreateRequest' is set
        if (partnerCustomerCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'partnerCustomerCreateRequest' when calling partnerCustomerCreate(Async)");
        }

        return partnerCustomerCreateCall(partnerCustomerCreateRequest, _callback);

    }

    /**
     * Creates a new end customer for a Plaid reseller.
     * The &#x60;/partner/customer/create&#x60; endpoint is used by reseller partners to create end customers.
     * @param partnerCustomerCreateRequest  (required)
     * @return PartnerCustomerCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomercreate">Creates a new end customer for a Plaid reseller. Documentation</a>
     */
    public PartnerCustomerCreateResponse partnerCustomerCreate(PartnerCustomerCreateRequest partnerCustomerCreateRequest) throws ApiException {
        ApiResponse<PartnerCustomerCreateResponse> localVarResp = partnerCustomerCreateWithHttpInfo(partnerCustomerCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a new end customer for a Plaid reseller.
     * The &#x60;/partner/customer/create&#x60; endpoint is used by reseller partners to create end customers.
     * @param partnerCustomerCreateRequest  (required)
     * @return ApiResponse&lt;PartnerCustomerCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomercreate">Creates a new end customer for a Plaid reseller. Documentation</a>
     */
    public ApiResponse<PartnerCustomerCreateResponse> partnerCustomerCreateWithHttpInfo(PartnerCustomerCreateRequest partnerCustomerCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = partnerCustomerCreateValidateBeforeCall(partnerCustomerCreateRequest, null);
        Type localVarReturnType = new TypeToken<PartnerCustomerCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new end customer for a Plaid reseller. (asynchronously)
     * The &#x60;/partner/customer/create&#x60; endpoint is used by reseller partners to create end customers.
     * @param partnerCustomerCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomercreate">Creates a new end customer for a Plaid reseller. Documentation</a>
     */
    public okhttp3.Call partnerCustomerCreateAsync(PartnerCustomerCreateRequest partnerCustomerCreateRequest, final ApiCallback<PartnerCustomerCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = partnerCustomerCreateValidateBeforeCall(partnerCustomerCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<PartnerCustomerCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partnerCustomerEnable
     * @param partnerCustomerEnableRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomerenable">Enables a Plaid reseller&#39;s end customer in the Production environment. Documentation</a>
     */
    public okhttp3.Call partnerCustomerEnableCall(PartnerCustomerEnableRequest partnerCustomerEnableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partnerCustomerEnableRequest;

        // create path and map variables
        String localVarPath = "/partner/customer/enable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partnerCustomerEnableValidateBeforeCall(PartnerCustomerEnableRequest partnerCustomerEnableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partnerCustomerEnableRequest' is set
        if (partnerCustomerEnableRequest == null) {
            throw new ApiException("Missing the required parameter 'partnerCustomerEnableRequest' when calling partnerCustomerEnable(Async)");
        }

        return partnerCustomerEnableCall(partnerCustomerEnableRequest, _callback);

    }

    /**
     * Enables a Plaid reseller&#39;s end customer in the Production environment.
     * The &#x60;/partner/customer/enable&#x60; endpoint is used by reseller partners to enable an end customer in the Production environment.
     * @param partnerCustomerEnableRequest  (required)
     * @return PartnerCustomerEnableResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomerenable">Enables a Plaid reseller&#39;s end customer in the Production environment. Documentation</a>
     */
    public PartnerCustomerEnableResponse partnerCustomerEnable(PartnerCustomerEnableRequest partnerCustomerEnableRequest) throws ApiException {
        ApiResponse<PartnerCustomerEnableResponse> localVarResp = partnerCustomerEnableWithHttpInfo(partnerCustomerEnableRequest);
        return localVarResp.getData();
    }

    /**
     * Enables a Plaid reseller&#39;s end customer in the Production environment.
     * The &#x60;/partner/customer/enable&#x60; endpoint is used by reseller partners to enable an end customer in the Production environment.
     * @param partnerCustomerEnableRequest  (required)
     * @return ApiResponse&lt;PartnerCustomerEnableResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomerenable">Enables a Plaid reseller&#39;s end customer in the Production environment. Documentation</a>
     */
    public ApiResponse<PartnerCustomerEnableResponse> partnerCustomerEnableWithHttpInfo(PartnerCustomerEnableRequest partnerCustomerEnableRequest) throws ApiException {
        okhttp3.Call localVarCall = partnerCustomerEnableValidateBeforeCall(partnerCustomerEnableRequest, null);
        Type localVarReturnType = new TypeToken<PartnerCustomerEnableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enables a Plaid reseller&#39;s end customer in the Production environment. (asynchronously)
     * The &#x60;/partner/customer/enable&#x60; endpoint is used by reseller partners to enable an end customer in the Production environment.
     * @param partnerCustomerEnableRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomerenable">Enables a Plaid reseller&#39;s end customer in the Production environment. Documentation</a>
     */
    public okhttp3.Call partnerCustomerEnableAsync(PartnerCustomerEnableRequest partnerCustomerEnableRequest, final ApiCallback<PartnerCustomerEnableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = partnerCustomerEnableValidateBeforeCall(partnerCustomerEnableRequest, _callback);
        Type localVarReturnType = new TypeToken<PartnerCustomerEnableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partnerCustomerGet
     * @param partnerCustomerGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomerget">Returns a Plaid reseller&#39;s end customer. Documentation</a>
     */
    public okhttp3.Call partnerCustomerGetCall(PartnerCustomerGetRequest partnerCustomerGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partnerCustomerGetRequest;

        // create path and map variables
        String localVarPath = "/partner/customer/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partnerCustomerGetValidateBeforeCall(PartnerCustomerGetRequest partnerCustomerGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partnerCustomerGetRequest' is set
        if (partnerCustomerGetRequest == null) {
            throw new ApiException("Missing the required parameter 'partnerCustomerGetRequest' when calling partnerCustomerGet(Async)");
        }

        return partnerCustomerGetCall(partnerCustomerGetRequest, _callback);

    }

    /**
     * Returns a Plaid reseller&#39;s end customer.
     * The &#x60;/partner/customer/get&#x60; endpoint is used by reseller partners to retrieve data about a single end customer.
     * @param partnerCustomerGetRequest  (required)
     * @return PartnerCustomerGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomerget">Returns a Plaid reseller&#39;s end customer. Documentation</a>
     */
    public PartnerCustomerGetResponse partnerCustomerGet(PartnerCustomerGetRequest partnerCustomerGetRequest) throws ApiException {
        ApiResponse<PartnerCustomerGetResponse> localVarResp = partnerCustomerGetWithHttpInfo(partnerCustomerGetRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a Plaid reseller&#39;s end customer.
     * The &#x60;/partner/customer/get&#x60; endpoint is used by reseller partners to retrieve data about a single end customer.
     * @param partnerCustomerGetRequest  (required)
     * @return ApiResponse&lt;PartnerCustomerGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomerget">Returns a Plaid reseller&#39;s end customer. Documentation</a>
     */
    public ApiResponse<PartnerCustomerGetResponse> partnerCustomerGetWithHttpInfo(PartnerCustomerGetRequest partnerCustomerGetRequest) throws ApiException {
        okhttp3.Call localVarCall = partnerCustomerGetValidateBeforeCall(partnerCustomerGetRequest, null);
        Type localVarReturnType = new TypeToken<PartnerCustomerGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a Plaid reseller&#39;s end customer. (asynchronously)
     * The &#x60;/partner/customer/get&#x60; endpoint is used by reseller partners to retrieve data about a single end customer.
     * @param partnerCustomerGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomerget">Returns a Plaid reseller&#39;s end customer. Documentation</a>
     */
    public okhttp3.Call partnerCustomerGetAsync(PartnerCustomerGetRequest partnerCustomerGetRequest, final ApiCallback<PartnerCustomerGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = partnerCustomerGetValidateBeforeCall(partnerCustomerGetRequest, _callback);
        Type localVarReturnType = new TypeToken<PartnerCustomerGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partnerCustomerOauthInstitutionsGet
     * @param partnerCustomerOAuthInstitutionsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomeroauth_institutionsget">Returns OAuth-institution registration information for a given end customer. Documentation</a>
     */
    public okhttp3.Call partnerCustomerOauthInstitutionsGetCall(PartnerCustomerOAuthInstitutionsGetRequest partnerCustomerOAuthInstitutionsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partnerCustomerOAuthInstitutionsGetRequest;

        // create path and map variables
        String localVarPath = "/partner/customer/oauth_institutions/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partnerCustomerOauthInstitutionsGetValidateBeforeCall(PartnerCustomerOAuthInstitutionsGetRequest partnerCustomerOAuthInstitutionsGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partnerCustomerOAuthInstitutionsGetRequest' is set
        if (partnerCustomerOAuthInstitutionsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'partnerCustomerOAuthInstitutionsGetRequest' when calling partnerCustomerOauthInstitutionsGet(Async)");
        }

        return partnerCustomerOauthInstitutionsGetCall(partnerCustomerOAuthInstitutionsGetRequest, _callback);

    }

    /**
     * Returns OAuth-institution registration information for a given end customer.
     * The &#x60;/partner/customer/oauth_institutions/get&#x60; endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
     * @param partnerCustomerOAuthInstitutionsGetRequest  (required)
     * @return PartnerCustomerOAuthInstitutionsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomeroauth_institutionsget">Returns OAuth-institution registration information for a given end customer. Documentation</a>
     */
    public PartnerCustomerOAuthInstitutionsGetResponse partnerCustomerOauthInstitutionsGet(PartnerCustomerOAuthInstitutionsGetRequest partnerCustomerOAuthInstitutionsGetRequest) throws ApiException {
        ApiResponse<PartnerCustomerOAuthInstitutionsGetResponse> localVarResp = partnerCustomerOauthInstitutionsGetWithHttpInfo(partnerCustomerOAuthInstitutionsGetRequest);
        return localVarResp.getData();
    }

    /**
     * Returns OAuth-institution registration information for a given end customer.
     * The &#x60;/partner/customer/oauth_institutions/get&#x60; endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
     * @param partnerCustomerOAuthInstitutionsGetRequest  (required)
     * @return ApiResponse&lt;PartnerCustomerOAuthInstitutionsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomeroauth_institutionsget">Returns OAuth-institution registration information for a given end customer. Documentation</a>
     */
    public ApiResponse<PartnerCustomerOAuthInstitutionsGetResponse> partnerCustomerOauthInstitutionsGetWithHttpInfo(PartnerCustomerOAuthInstitutionsGetRequest partnerCustomerOAuthInstitutionsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = partnerCustomerOauthInstitutionsGetValidateBeforeCall(partnerCustomerOAuthInstitutionsGetRequest, null);
        Type localVarReturnType = new TypeToken<PartnerCustomerOAuthInstitutionsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns OAuth-institution registration information for a given end customer. (asynchronously)
     * The &#x60;/partner/customer/oauth_institutions/get&#x60; endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
     * @param partnerCustomerOAuthInstitutionsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomeroauth_institutionsget">Returns OAuth-institution registration information for a given end customer. Documentation</a>
     */
    public okhttp3.Call partnerCustomerOauthInstitutionsGetAsync(PartnerCustomerOAuthInstitutionsGetRequest partnerCustomerOAuthInstitutionsGetRequest, final ApiCallback<PartnerCustomerOAuthInstitutionsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = partnerCustomerOauthInstitutionsGetValidateBeforeCall(partnerCustomerOAuthInstitutionsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<PartnerCustomerOAuthInstitutionsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partnerCustomerRemove
     * @param partnerCustomerRemoveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomerremove">Removes a Plaid reseller&#39;s end customer. Documentation</a>
     */
    public okhttp3.Call partnerCustomerRemoveCall(PartnerCustomerRemoveRequest partnerCustomerRemoveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partnerCustomerRemoveRequest;

        // create path and map variables
        String localVarPath = "/partner/customer/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partnerCustomerRemoveValidateBeforeCall(PartnerCustomerRemoveRequest partnerCustomerRemoveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partnerCustomerRemoveRequest' is set
        if (partnerCustomerRemoveRequest == null) {
            throw new ApiException("Missing the required parameter 'partnerCustomerRemoveRequest' when calling partnerCustomerRemove(Async)");
        }

        return partnerCustomerRemoveCall(partnerCustomerRemoveRequest, _callback);

    }

    /**
     * Removes a Plaid reseller&#39;s end customer.
     * The &#x60;/partner/customer/remove&#x60; endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
     * @param partnerCustomerRemoveRequest  (required)
     * @return PartnerCustomerRemoveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomerremove">Removes a Plaid reseller&#39;s end customer. Documentation</a>
     */
    public PartnerCustomerRemoveResponse partnerCustomerRemove(PartnerCustomerRemoveRequest partnerCustomerRemoveRequest) throws ApiException {
        ApiResponse<PartnerCustomerRemoveResponse> localVarResp = partnerCustomerRemoveWithHttpInfo(partnerCustomerRemoveRequest);
        return localVarResp.getData();
    }

    /**
     * Removes a Plaid reseller&#39;s end customer.
     * The &#x60;/partner/customer/remove&#x60; endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
     * @param partnerCustomerRemoveRequest  (required)
     * @return ApiResponse&lt;PartnerCustomerRemoveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomerremove">Removes a Plaid reseller&#39;s end customer. Documentation</a>
     */
    public ApiResponse<PartnerCustomerRemoveResponse> partnerCustomerRemoveWithHttpInfo(PartnerCustomerRemoveRequest partnerCustomerRemoveRequest) throws ApiException {
        okhttp3.Call localVarCall = partnerCustomerRemoveValidateBeforeCall(partnerCustomerRemoveRequest, null);
        Type localVarReturnType = new TypeToken<PartnerCustomerRemoveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes a Plaid reseller&#39;s end customer. (asynchronously)
     * The &#x60;/partner/customer/remove&#x60; endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
     * @param partnerCustomerRemoveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/partner/#partnercustomerremove">Removes a Plaid reseller&#39;s end customer. Documentation</a>
     */
    public okhttp3.Call partnerCustomerRemoveAsync(PartnerCustomerRemoveRequest partnerCustomerRemoveRequest, final ApiCallback<PartnerCustomerRemoveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = partnerCustomerRemoveValidateBeforeCall(partnerCustomerRemoveRequest, _callback);
        Type localVarReturnType = new TypeToken<PartnerCustomerRemoveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationConsentCreate
     * @param paymentInitiationConsentCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationconsentcreate">Create payment consent Documentation</a>
     */
    public okhttp3.Call paymentInitiationConsentCreateCall(PaymentInitiationConsentCreateRequest paymentInitiationConsentCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationConsentCreateRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/consent/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationConsentCreateValidateBeforeCall(PaymentInitiationConsentCreateRequest paymentInitiationConsentCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentInitiationConsentCreateRequest' is set
        if (paymentInitiationConsentCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationConsentCreateRequest' when calling paymentInitiationConsentCreate(Async)");
        }

        return paymentInitiationConsentCreateCall(paymentInitiationConsentCreateRequest, _callback);

    }

    /**
     * Create payment consent
     * The &#x60;/payment_initiation/consent/create&#x60; endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with &#x60;UNAUTHORISED&#x60; status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
     * @param paymentInitiationConsentCreateRequest  (required)
     * @return PaymentInitiationConsentCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationconsentcreate">Create payment consent Documentation</a>
     */
    public PaymentInitiationConsentCreateResponse paymentInitiationConsentCreate(PaymentInitiationConsentCreateRequest paymentInitiationConsentCreateRequest) throws ApiException {
        ApiResponse<PaymentInitiationConsentCreateResponse> localVarResp = paymentInitiationConsentCreateWithHttpInfo(paymentInitiationConsentCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create payment consent
     * The &#x60;/payment_initiation/consent/create&#x60; endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with &#x60;UNAUTHORISED&#x60; status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
     * @param paymentInitiationConsentCreateRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationConsentCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationconsentcreate">Create payment consent Documentation</a>
     */
    public ApiResponse<PaymentInitiationConsentCreateResponse> paymentInitiationConsentCreateWithHttpInfo(PaymentInitiationConsentCreateRequest paymentInitiationConsentCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationConsentCreateValidateBeforeCall(paymentInitiationConsentCreateRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationConsentCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create payment consent (asynchronously)
     * The &#x60;/payment_initiation/consent/create&#x60; endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with &#x60;UNAUTHORISED&#x60; status by default and must be authorised by the user before payments can be initiated.  Consents can be limited in time and scope, and have constraints that describe limitations for payments.
     * @param paymentInitiationConsentCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationconsentcreate">Create payment consent Documentation</a>
     */
    public okhttp3.Call paymentInitiationConsentCreateAsync(PaymentInitiationConsentCreateRequest paymentInitiationConsentCreateRequest, final ApiCallback<PaymentInitiationConsentCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationConsentCreateValidateBeforeCall(paymentInitiationConsentCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationConsentCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationConsentGet
     * @param paymentInitiationConsentGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationconsentget">Get payment consent Documentation</a>
     */
    public okhttp3.Call paymentInitiationConsentGetCall(PaymentInitiationConsentGetRequest paymentInitiationConsentGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationConsentGetRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/consent/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationConsentGetValidateBeforeCall(PaymentInitiationConsentGetRequest paymentInitiationConsentGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentInitiationConsentGetRequest' is set
        if (paymentInitiationConsentGetRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationConsentGetRequest' when calling paymentInitiationConsentGet(Async)");
        }

        return paymentInitiationConsentGetCall(paymentInitiationConsentGetRequest, _callback);

    }

    /**
     * Get payment consent
     * The &#x60;/payment_initiation/consent/get&#x60; endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
     * @param paymentInitiationConsentGetRequest  (required)
     * @return PaymentInitiationConsentGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationconsentget">Get payment consent Documentation</a>
     */
    public PaymentInitiationConsentGetResponse paymentInitiationConsentGet(PaymentInitiationConsentGetRequest paymentInitiationConsentGetRequest) throws ApiException {
        ApiResponse<PaymentInitiationConsentGetResponse> localVarResp = paymentInitiationConsentGetWithHttpInfo(paymentInitiationConsentGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get payment consent
     * The &#x60;/payment_initiation/consent/get&#x60; endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
     * @param paymentInitiationConsentGetRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationConsentGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationconsentget">Get payment consent Documentation</a>
     */
    public ApiResponse<PaymentInitiationConsentGetResponse> paymentInitiationConsentGetWithHttpInfo(PaymentInitiationConsentGetRequest paymentInitiationConsentGetRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationConsentGetValidateBeforeCall(paymentInitiationConsentGetRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationConsentGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get payment consent (asynchronously)
     * The &#x60;/payment_initiation/consent/get&#x60; endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
     * @param paymentInitiationConsentGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationconsentget">Get payment consent Documentation</a>
     */
    public okhttp3.Call paymentInitiationConsentGetAsync(PaymentInitiationConsentGetRequest paymentInitiationConsentGetRequest, final ApiCallback<PaymentInitiationConsentGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationConsentGetValidateBeforeCall(paymentInitiationConsentGetRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationConsentGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationConsentPaymentExecute
     * @param paymentInitiationConsentPaymentExecuteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationconsentpaymentexecute">Execute a single payment using consent Documentation</a>
     */
    public okhttp3.Call paymentInitiationConsentPaymentExecuteCall(PaymentInitiationConsentPaymentExecuteRequest paymentInitiationConsentPaymentExecuteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationConsentPaymentExecuteRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/consent/payment/execute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationConsentPaymentExecuteValidateBeforeCall(PaymentInitiationConsentPaymentExecuteRequest paymentInitiationConsentPaymentExecuteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentInitiationConsentPaymentExecuteRequest' is set
        if (paymentInitiationConsentPaymentExecuteRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationConsentPaymentExecuteRequest' when calling paymentInitiationConsentPaymentExecute(Async)");
        }

        return paymentInitiationConsentPaymentExecuteCall(paymentInitiationConsentPaymentExecuteRequest, _callback);

    }

    /**
     * Execute a single payment using consent
     * The &#x60;/payment_initiation/consent/payment/execute&#x60; endpoint can be used to execute payments using payment consent.
     * @param paymentInitiationConsentPaymentExecuteRequest  (required)
     * @return PaymentInitiationConsentPaymentExecuteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationconsentpaymentexecute">Execute a single payment using consent Documentation</a>
     */
    public PaymentInitiationConsentPaymentExecuteResponse paymentInitiationConsentPaymentExecute(PaymentInitiationConsentPaymentExecuteRequest paymentInitiationConsentPaymentExecuteRequest) throws ApiException {
        ApiResponse<PaymentInitiationConsentPaymentExecuteResponse> localVarResp = paymentInitiationConsentPaymentExecuteWithHttpInfo(paymentInitiationConsentPaymentExecuteRequest);
        return localVarResp.getData();
    }

    /**
     * Execute a single payment using consent
     * The &#x60;/payment_initiation/consent/payment/execute&#x60; endpoint can be used to execute payments using payment consent.
     * @param paymentInitiationConsentPaymentExecuteRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationConsentPaymentExecuteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationconsentpaymentexecute">Execute a single payment using consent Documentation</a>
     */
    public ApiResponse<PaymentInitiationConsentPaymentExecuteResponse> paymentInitiationConsentPaymentExecuteWithHttpInfo(PaymentInitiationConsentPaymentExecuteRequest paymentInitiationConsentPaymentExecuteRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationConsentPaymentExecuteValidateBeforeCall(paymentInitiationConsentPaymentExecuteRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationConsentPaymentExecuteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute a single payment using consent (asynchronously)
     * The &#x60;/payment_initiation/consent/payment/execute&#x60; endpoint can be used to execute payments using payment consent.
     * @param paymentInitiationConsentPaymentExecuteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationconsentpaymentexecute">Execute a single payment using consent Documentation</a>
     */
    public okhttp3.Call paymentInitiationConsentPaymentExecuteAsync(PaymentInitiationConsentPaymentExecuteRequest paymentInitiationConsentPaymentExecuteRequest, final ApiCallback<PaymentInitiationConsentPaymentExecuteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationConsentPaymentExecuteValidateBeforeCall(paymentInitiationConsentPaymentExecuteRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationConsentPaymentExecuteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationConsentRevoke
     * @param paymentInitiationConsentRevokeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationconsentrevoke">Revoke payment consent Documentation</a>
     */
    public okhttp3.Call paymentInitiationConsentRevokeCall(PaymentInitiationConsentRevokeRequest paymentInitiationConsentRevokeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationConsentRevokeRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/consent/revoke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationConsentRevokeValidateBeforeCall(PaymentInitiationConsentRevokeRequest paymentInitiationConsentRevokeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentInitiationConsentRevokeRequest' is set
        if (paymentInitiationConsentRevokeRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationConsentRevokeRequest' when calling paymentInitiationConsentRevoke(Async)");
        }

        return paymentInitiationConsentRevokeCall(paymentInitiationConsentRevokeRequest, _callback);

    }

    /**
     * Revoke payment consent
     * The &#x60;/payment_initiation/consent/revoke&#x60; endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
     * @param paymentInitiationConsentRevokeRequest  (required)
     * @return PaymentInitiationConsentRevokeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationconsentrevoke">Revoke payment consent Documentation</a>
     */
    public PaymentInitiationConsentRevokeResponse paymentInitiationConsentRevoke(PaymentInitiationConsentRevokeRequest paymentInitiationConsentRevokeRequest) throws ApiException {
        ApiResponse<PaymentInitiationConsentRevokeResponse> localVarResp = paymentInitiationConsentRevokeWithHttpInfo(paymentInitiationConsentRevokeRequest);
        return localVarResp.getData();
    }

    /**
     * Revoke payment consent
     * The &#x60;/payment_initiation/consent/revoke&#x60; endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
     * @param paymentInitiationConsentRevokeRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationConsentRevokeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationconsentrevoke">Revoke payment consent Documentation</a>
     */
    public ApiResponse<PaymentInitiationConsentRevokeResponse> paymentInitiationConsentRevokeWithHttpInfo(PaymentInitiationConsentRevokeRequest paymentInitiationConsentRevokeRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationConsentRevokeValidateBeforeCall(paymentInitiationConsentRevokeRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationConsentRevokeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revoke payment consent (asynchronously)
     * The &#x60;/payment_initiation/consent/revoke&#x60; endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
     * @param paymentInitiationConsentRevokeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationconsentrevoke">Revoke payment consent Documentation</a>
     */
    public okhttp3.Call paymentInitiationConsentRevokeAsync(PaymentInitiationConsentRevokeRequest paymentInitiationConsentRevokeRequest, final ApiCallback<PaymentInitiationConsentRevokeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationConsentRevokeValidateBeforeCall(paymentInitiationConsentRevokeRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationConsentRevokeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationPaymentCreate
     * @param paymentInitiationPaymentCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationpaymentcreate">Create a payment Documentation</a>
     */
    public okhttp3.Call paymentInitiationPaymentCreateCall(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationPaymentCreateRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/payment/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationPaymentCreateValidateBeforeCall(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentInitiationPaymentCreateRequest' is set
        if (paymentInitiationPaymentCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationPaymentCreateRequest' when calling paymentInitiationPaymentCreate(Async)");
        }

        return paymentInitiationPaymentCreateCall(paymentInitiationPaymentCreateRequest, _callback);

    }

    /**
     * Create a payment
     * After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
     * @param paymentInitiationPaymentCreateRequest  (required)
     * @return PaymentInitiationPaymentCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationpaymentcreate">Create a payment Documentation</a>
     */
    public PaymentInitiationPaymentCreateResponse paymentInitiationPaymentCreate(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest) throws ApiException {
        ApiResponse<PaymentInitiationPaymentCreateResponse> localVarResp = paymentInitiationPaymentCreateWithHttpInfo(paymentInitiationPaymentCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a payment
     * After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
     * @param paymentInitiationPaymentCreateRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationPaymentCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationpaymentcreate">Create a payment Documentation</a>
     */
    public ApiResponse<PaymentInitiationPaymentCreateResponse> paymentInitiationPaymentCreateWithHttpInfo(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationPaymentCreateValidateBeforeCall(paymentInitiationPaymentCreateRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a payment (asynchronously)
     * After creating a payment recipient, you can use the &#x60;/payment_initiation/payment/create&#x60; endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
     * @param paymentInitiationPaymentCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationpaymentcreate">Create a payment Documentation</a>
     */
    public okhttp3.Call paymentInitiationPaymentCreateAsync(PaymentInitiationPaymentCreateRequest paymentInitiationPaymentCreateRequest, final ApiCallback<PaymentInitiationPaymentCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationPaymentCreateValidateBeforeCall(paymentInitiationPaymentCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationPaymentGet
     * @param paymentInitiationPaymentGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationpaymentget">Get payment details Documentation</a>
     */
    public okhttp3.Call paymentInitiationPaymentGetCall(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationPaymentGetRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/payment/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationPaymentGetValidateBeforeCall(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentInitiationPaymentGetRequest' is set
        if (paymentInitiationPaymentGetRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationPaymentGetRequest' when calling paymentInitiationPaymentGet(Async)");
        }

        return paymentInitiationPaymentGetCall(paymentInitiationPaymentGetRequest, _callback);

    }

    /**
     * Get payment details
     * The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
     * @param paymentInitiationPaymentGetRequest  (required)
     * @return PaymentInitiationPaymentGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationpaymentget">Get payment details Documentation</a>
     */
    public PaymentInitiationPaymentGetResponse paymentInitiationPaymentGet(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest) throws ApiException {
        ApiResponse<PaymentInitiationPaymentGetResponse> localVarResp = paymentInitiationPaymentGetWithHttpInfo(paymentInitiationPaymentGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get payment details
     * The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
     * @param paymentInitiationPaymentGetRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationPaymentGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationpaymentget">Get payment details Documentation</a>
     */
    public ApiResponse<PaymentInitiationPaymentGetResponse> paymentInitiationPaymentGetWithHttpInfo(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationPaymentGetValidateBeforeCall(paymentInitiationPaymentGetRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get payment details (asynchronously)
     * The &#x60;/payment_initiation/payment/get&#x60; endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the &#x60;/payment_initiation/payment/get&#x60; endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
     * @param paymentInitiationPaymentGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationpaymentget">Get payment details Documentation</a>
     */
    public okhttp3.Call paymentInitiationPaymentGetAsync(PaymentInitiationPaymentGetRequest paymentInitiationPaymentGetRequest, final ApiCallback<PaymentInitiationPaymentGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationPaymentGetValidateBeforeCall(paymentInitiationPaymentGetRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationPaymentList
     * @param paymentInitiationPaymentListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationpaymentlist">List payments Documentation</a>
     */
    public okhttp3.Call paymentInitiationPaymentListCall(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationPaymentListRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/payment/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationPaymentListValidateBeforeCall(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentInitiationPaymentListRequest' is set
        if (paymentInitiationPaymentListRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationPaymentListRequest' when calling paymentInitiationPaymentList(Async)");
        }

        return paymentInitiationPaymentListCall(paymentInitiationPaymentListRequest, _callback);

    }

    /**
     * List payments
     * The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
     * @param paymentInitiationPaymentListRequest  (required)
     * @return PaymentInitiationPaymentListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationpaymentlist">List payments Documentation</a>
     */
    public PaymentInitiationPaymentListResponse paymentInitiationPaymentList(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest) throws ApiException {
        ApiResponse<PaymentInitiationPaymentListResponse> localVarResp = paymentInitiationPaymentListWithHttpInfo(paymentInitiationPaymentListRequest);
        return localVarResp.getData();
    }

    /**
     * List payments
     * The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
     * @param paymentInitiationPaymentListRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationPaymentListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationpaymentlist">List payments Documentation</a>
     */
    public ApiResponse<PaymentInitiationPaymentListResponse> paymentInitiationPaymentListWithHttpInfo(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationPaymentListValidateBeforeCall(paymentInitiationPaymentListRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List payments (asynchronously)
     * The &#x60;/payment_initiation/payment/list&#x60; endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional &#x60;count&#x60; and &#x60;cursor&#x60; parameters.
     * @param paymentInitiationPaymentListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationpaymentlist">List payments Documentation</a>
     */
    public okhttp3.Call paymentInitiationPaymentListAsync(PaymentInitiationPaymentListRequest paymentInitiationPaymentListRequest, final ApiCallback<PaymentInitiationPaymentListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationPaymentListValidateBeforeCall(paymentInitiationPaymentListRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationPaymentReverse
     * @param paymentInitiationPaymentReverseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationpaymentreverse">Reverse an existing payment Documentation</a>
     */
    public okhttp3.Call paymentInitiationPaymentReverseCall(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationPaymentReverseRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/payment/reverse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationPaymentReverseValidateBeforeCall(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentInitiationPaymentReverseRequest' is set
        if (paymentInitiationPaymentReverseRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationPaymentReverseRequest' when calling paymentInitiationPaymentReverse(Async)");
        }

        return paymentInitiationPaymentReverseCall(paymentInitiationPaymentReverseRequest, _callback);

    }

    /**
     * Reverse an existing payment
     * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund. 
     * @param paymentInitiationPaymentReverseRequest  (required)
     * @return PaymentInitiationPaymentReverseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationpaymentreverse">Reverse an existing payment Documentation</a>
     */
    public PaymentInitiationPaymentReverseResponse paymentInitiationPaymentReverse(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest) throws ApiException {
        ApiResponse<PaymentInitiationPaymentReverseResponse> localVarResp = paymentInitiationPaymentReverseWithHttpInfo(paymentInitiationPaymentReverseRequest);
        return localVarResp.getData();
    }

    /**
     * Reverse an existing payment
     * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund. 
     * @param paymentInitiationPaymentReverseRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationPaymentReverseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationpaymentreverse">Reverse an existing payment Documentation</a>
     */
    public ApiResponse<PaymentInitiationPaymentReverseResponse> paymentInitiationPaymentReverseWithHttpInfo(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationPaymentReverseValidateBeforeCall(paymentInitiationPaymentReverseRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentReverseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reverse an existing payment (asynchronously)
     * Reverse a settled payment from a Plaid virtual account.  The original payment must be in a settled state to be refunded. To refund partially, specify the amount as part of the request. If the amount is not specified, the refund amount will be equal to all of the remaining payment amount that has not been refunded yet.  The refund will go back to the source account that initiated the payment. The original payment must have been initiated to a Plaid virtual account so that this account can be used to initiate the refund. 
     * @param paymentInitiationPaymentReverseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationpaymentreverse">Reverse an existing payment Documentation</a>
     */
    public okhttp3.Call paymentInitiationPaymentReverseAsync(PaymentInitiationPaymentReverseRequest paymentInitiationPaymentReverseRequest, final ApiCallback<PaymentInitiationPaymentReverseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationPaymentReverseValidateBeforeCall(paymentInitiationPaymentReverseRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationPaymentReverseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationRecipientCreate
     * @param paymentInitiationRecipientCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationrecipientcreate">Create payment recipient Documentation</a>
     */
    public okhttp3.Call paymentInitiationRecipientCreateCall(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationRecipientCreateRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/recipient/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationRecipientCreateValidateBeforeCall(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentInitiationRecipientCreateRequest' is set
        if (paymentInitiationRecipientCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationRecipientCreateRequest' when calling paymentInitiationRecipientCreate(Async)");
        }

        return paymentInitiationRecipientCreateCall(paymentInitiationRecipientCreateRequest, _callback);

    }

    /**
     * Create payment recipient
     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use &#x60;bacs&#x60; in the UK and &#x60;iban&#x60; in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;. 
     * @param paymentInitiationRecipientCreateRequest  (required)
     * @return PaymentInitiationRecipientCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationrecipientcreate">Create payment recipient Documentation</a>
     */
    public PaymentInitiationRecipientCreateResponse paymentInitiationRecipientCreate(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest) throws ApiException {
        ApiResponse<PaymentInitiationRecipientCreateResponse> localVarResp = paymentInitiationRecipientCreateWithHttpInfo(paymentInitiationRecipientCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create payment recipient
     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use &#x60;bacs&#x60; in the UK and &#x60;iban&#x60; in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;. 
     * @param paymentInitiationRecipientCreateRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationRecipientCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationrecipientcreate">Create payment recipient Documentation</a>
     */
    public ApiResponse<PaymentInitiationRecipientCreateResponse> paymentInitiationRecipientCreateWithHttpInfo(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationRecipientCreateValidateBeforeCall(paymentInitiationRecipientCreateRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationRecipientCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create payment recipient (asynchronously)
     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.  It is recommended to use &#x60;bacs&#x60; in the UK and &#x60;iban&#x60; in EU.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same &#x60;recipient_id&#x60;. 
     * @param paymentInitiationRecipientCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationrecipientcreate">Create payment recipient Documentation</a>
     */
    public okhttp3.Call paymentInitiationRecipientCreateAsync(PaymentInitiationRecipientCreateRequest paymentInitiationRecipientCreateRequest, final ApiCallback<PaymentInitiationRecipientCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationRecipientCreateValidateBeforeCall(paymentInitiationRecipientCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationRecipientCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationRecipientGet
     * @param paymentInitiationRecipientGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationrecipientget">Get payment recipient Documentation</a>
     */
    public okhttp3.Call paymentInitiationRecipientGetCall(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationRecipientGetRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/recipient/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationRecipientGetValidateBeforeCall(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentInitiationRecipientGetRequest' is set
        if (paymentInitiationRecipientGetRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationRecipientGetRequest' when calling paymentInitiationRecipientGet(Async)");
        }

        return paymentInitiationRecipientGetCall(paymentInitiationRecipientGetRequest, _callback);

    }

    /**
     * Get payment recipient
     * Get details about a payment recipient you have previously created.
     * @param paymentInitiationRecipientGetRequest  (required)
     * @return PaymentInitiationRecipientGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationrecipientget">Get payment recipient Documentation</a>
     */
    public PaymentInitiationRecipientGetResponse paymentInitiationRecipientGet(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest) throws ApiException {
        ApiResponse<PaymentInitiationRecipientGetResponse> localVarResp = paymentInitiationRecipientGetWithHttpInfo(paymentInitiationRecipientGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get payment recipient
     * Get details about a payment recipient you have previously created.
     * @param paymentInitiationRecipientGetRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationRecipientGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationrecipientget">Get payment recipient Documentation</a>
     */
    public ApiResponse<PaymentInitiationRecipientGetResponse> paymentInitiationRecipientGetWithHttpInfo(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationRecipientGetValidateBeforeCall(paymentInitiationRecipientGetRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationRecipientGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get payment recipient (asynchronously)
     * Get details about a payment recipient you have previously created.
     * @param paymentInitiationRecipientGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationrecipientget">Get payment recipient Documentation</a>
     */
    public okhttp3.Call paymentInitiationRecipientGetAsync(PaymentInitiationRecipientGetRequest paymentInitiationRecipientGetRequest, final ApiCallback<PaymentInitiationRecipientGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationRecipientGetValidateBeforeCall(paymentInitiationRecipientGetRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationRecipientGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentInitiationRecipientList
     * @param paymentInitiationRecipientListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationrecipientlist">List payment recipients Documentation</a>
     */
    public okhttp3.Call paymentInitiationRecipientListCall(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentInitiationRecipientListRequest;

        // create path and map variables
        String localVarPath = "/payment_initiation/recipient/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentInitiationRecipientListValidateBeforeCall(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentInitiationRecipientListRequest' is set
        if (paymentInitiationRecipientListRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentInitiationRecipientListRequest' when calling paymentInitiationRecipientList(Async)");
        }

        return paymentInitiationRecipientListCall(paymentInitiationRecipientListRequest, _callback);

    }

    /**
     * List payment recipients
     * The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
     * @param paymentInitiationRecipientListRequest  (required)
     * @return PaymentInitiationRecipientListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationrecipientlist">List payment recipients Documentation</a>
     */
    public PaymentInitiationRecipientListResponse paymentInitiationRecipientList(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest) throws ApiException {
        ApiResponse<PaymentInitiationRecipientListResponse> localVarResp = paymentInitiationRecipientListWithHttpInfo(paymentInitiationRecipientListRequest);
        return localVarResp.getData();
    }

    /**
     * List payment recipients
     * The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
     * @param paymentInitiationRecipientListRequest  (required)
     * @return ApiResponse&lt;PaymentInitiationRecipientListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationrecipientlist">List payment recipients Documentation</a>
     */
    public ApiResponse<PaymentInitiationRecipientListResponse> paymentInitiationRecipientListWithHttpInfo(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentInitiationRecipientListValidateBeforeCall(paymentInitiationRecipientListRequest, null);
        Type localVarReturnType = new TypeToken<PaymentInitiationRecipientListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List payment recipients (asynchronously)
     * The &#x60;/payment_initiation/recipient/list&#x60; endpoint list the payment recipients that you have previously created.
     * @param paymentInitiationRecipientListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/payment-initiation/#payment_initiationrecipientlist">List payment recipients Documentation</a>
     */
    public okhttp3.Call paymentInitiationRecipientListAsync(PaymentInitiationRecipientListRequest paymentInitiationRecipientListRequest, final ApiCallback<PaymentInitiationRecipientListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentInitiationRecipientListValidateBeforeCall(paymentInitiationRecipientListRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentInitiationRecipientListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentProfileCreate
     * @param paymentProfileCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#payment_profilecreate">Create payment profile Documentation</a>
     */
    public okhttp3.Call paymentProfileCreateCall(PaymentProfileCreateRequest paymentProfileCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentProfileCreateRequest;

        // create path and map variables
        String localVarPath = "/payment_profile/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentProfileCreateValidateBeforeCall(PaymentProfileCreateRequest paymentProfileCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentProfileCreateRequest' is set
        if (paymentProfileCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentProfileCreateRequest' when calling paymentProfileCreate(Async)");
        }

        return paymentProfileCreateCall(paymentProfileCreateRequest, _callback);

    }

    /**
     * Create payment profile
     * Use &#x60;/payment_profile/create&#x60; endpoint to create a new payment profile. To initiate the account linking experience, call &#x60;/link/token/create&#x60; and provide the &#x60;payment_profile_token&#x60; in the &#x60;transfer.payment_profile_token&#x60; field. You can then use the &#x60;payment_profile_token&#x60; when creating transfers using &#x60;/transfer/authorization/create&#x60; and &#x60;/transfer/create&#x60;.
     * @param paymentProfileCreateRequest  (required)
     * @return PaymentProfileCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#payment_profilecreate">Create payment profile Documentation</a>
     */
    public PaymentProfileCreateResponse paymentProfileCreate(PaymentProfileCreateRequest paymentProfileCreateRequest) throws ApiException {
        ApiResponse<PaymentProfileCreateResponse> localVarResp = paymentProfileCreateWithHttpInfo(paymentProfileCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create payment profile
     * Use &#x60;/payment_profile/create&#x60; endpoint to create a new payment profile. To initiate the account linking experience, call &#x60;/link/token/create&#x60; and provide the &#x60;payment_profile_token&#x60; in the &#x60;transfer.payment_profile_token&#x60; field. You can then use the &#x60;payment_profile_token&#x60; when creating transfers using &#x60;/transfer/authorization/create&#x60; and &#x60;/transfer/create&#x60;.
     * @param paymentProfileCreateRequest  (required)
     * @return ApiResponse&lt;PaymentProfileCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#payment_profilecreate">Create payment profile Documentation</a>
     */
    public ApiResponse<PaymentProfileCreateResponse> paymentProfileCreateWithHttpInfo(PaymentProfileCreateRequest paymentProfileCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentProfileCreateValidateBeforeCall(paymentProfileCreateRequest, null);
        Type localVarReturnType = new TypeToken<PaymentProfileCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create payment profile (asynchronously)
     * Use &#x60;/payment_profile/create&#x60; endpoint to create a new payment profile. To initiate the account linking experience, call &#x60;/link/token/create&#x60; and provide the &#x60;payment_profile_token&#x60; in the &#x60;transfer.payment_profile_token&#x60; field. You can then use the &#x60;payment_profile_token&#x60; when creating transfers using &#x60;/transfer/authorization/create&#x60; and &#x60;/transfer/create&#x60;.
     * @param paymentProfileCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#payment_profilecreate">Create payment profile Documentation</a>
     */
    public okhttp3.Call paymentProfileCreateAsync(PaymentProfileCreateRequest paymentProfileCreateRequest, final ApiCallback<PaymentProfileCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentProfileCreateValidateBeforeCall(paymentProfileCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentProfileCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentProfileGet
     * @param paymentProfileGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#payment_profileget">Get payment profile Documentation</a>
     */
    public okhttp3.Call paymentProfileGetCall(PaymentProfileGetRequest paymentProfileGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentProfileGetRequest;

        // create path and map variables
        String localVarPath = "/payment_profile/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentProfileGetValidateBeforeCall(PaymentProfileGetRequest paymentProfileGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentProfileGetRequest' is set
        if (paymentProfileGetRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentProfileGetRequest' when calling paymentProfileGet(Async)");
        }

        return paymentProfileGetCall(paymentProfileGetRequest, _callback);

    }

    /**
     * Get payment profile
     * Use &#x60;/payment_profile/get&#x60; endpoint to get the status of a given Payment Profile.
     * @param paymentProfileGetRequest  (required)
     * @return PaymentProfileGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#payment_profileget">Get payment profile Documentation</a>
     */
    public PaymentProfileGetResponse paymentProfileGet(PaymentProfileGetRequest paymentProfileGetRequest) throws ApiException {
        ApiResponse<PaymentProfileGetResponse> localVarResp = paymentProfileGetWithHttpInfo(paymentProfileGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get payment profile
     * Use &#x60;/payment_profile/get&#x60; endpoint to get the status of a given Payment Profile.
     * @param paymentProfileGetRequest  (required)
     * @return ApiResponse&lt;PaymentProfileGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#payment_profileget">Get payment profile Documentation</a>
     */
    public ApiResponse<PaymentProfileGetResponse> paymentProfileGetWithHttpInfo(PaymentProfileGetRequest paymentProfileGetRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentProfileGetValidateBeforeCall(paymentProfileGetRequest, null);
        Type localVarReturnType = new TypeToken<PaymentProfileGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get payment profile (asynchronously)
     * Use &#x60;/payment_profile/get&#x60; endpoint to get the status of a given Payment Profile.
     * @param paymentProfileGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#payment_profileget">Get payment profile Documentation</a>
     */
    public okhttp3.Call paymentProfileGetAsync(PaymentProfileGetRequest paymentProfileGetRequest, final ApiCallback<PaymentProfileGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentProfileGetValidateBeforeCall(paymentProfileGetRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentProfileGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentProfileRemove
     * @param paymentProfileRemoveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#payment_profileremove">Remove payment profile Documentation</a>
     */
    public okhttp3.Call paymentProfileRemoveCall(PaymentProfileRemoveRequest paymentProfileRemoveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentProfileRemoveRequest;

        // create path and map variables
        String localVarPath = "/payment_profile/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentProfileRemoveValidateBeforeCall(PaymentProfileRemoveRequest paymentProfileRemoveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentProfileRemoveRequest' is set
        if (paymentProfileRemoveRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentProfileRemoveRequest' when calling paymentProfileRemove(Async)");
        }

        return paymentProfileRemoveCall(paymentProfileRemoveRequest, _callback);

    }

    /**
     * Remove payment profile
     * Use the &#x60;/payment_profile/remove&#x60; endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
     * @param paymentProfileRemoveRequest  (required)
     * @return PaymentProfileRemoveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#payment_profileremove">Remove payment profile Documentation</a>
     */
    public PaymentProfileRemoveResponse paymentProfileRemove(PaymentProfileRemoveRequest paymentProfileRemoveRequest) throws ApiException {
        ApiResponse<PaymentProfileRemoveResponse> localVarResp = paymentProfileRemoveWithHttpInfo(paymentProfileRemoveRequest);
        return localVarResp.getData();
    }

    /**
     * Remove payment profile
     * Use the &#x60;/payment_profile/remove&#x60; endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
     * @param paymentProfileRemoveRequest  (required)
     * @return ApiResponse&lt;PaymentProfileRemoveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#payment_profileremove">Remove payment profile Documentation</a>
     */
    public ApiResponse<PaymentProfileRemoveResponse> paymentProfileRemoveWithHttpInfo(PaymentProfileRemoveRequest paymentProfileRemoveRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentProfileRemoveValidateBeforeCall(paymentProfileRemoveRequest, null);
        Type localVarReturnType = new TypeToken<PaymentProfileRemoveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove payment profile (asynchronously)
     * Use the &#x60;/payment_profile/remove&#x60; endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
     * @param paymentProfileRemoveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#payment_profileremove">Remove payment profile Documentation</a>
     */
    public okhttp3.Call paymentProfileRemoveAsync(PaymentProfileRemoveRequest paymentProfileRemoveRequest, final ApiCallback<PaymentProfileRemoveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentProfileRemoveValidateBeforeCall(paymentProfileRemoveRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentProfileRemoveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorApexProcessorTokenCreate
     * @param processorApexProcessorTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Create Apex bank account token Documentation</a>
     */
    public okhttp3.Call processorApexProcessorTokenCreateCall(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorApexProcessorTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/processor/apex/processor_token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorApexProcessorTokenCreateValidateBeforeCall(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'processorApexProcessorTokenCreateRequest' is set
        if (processorApexProcessorTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'processorApexProcessorTokenCreateRequest' when calling processorApexProcessorTokenCreate(Async)");
        }

        return processorApexProcessorTokenCreateCall(processorApexProcessorTokenCreateRequest, _callback);

    }

    /**
     * Create Apex bank account token
     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
     * @param processorApexProcessorTokenCreateRequest  (required)
     * @return ProcessorTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Create Apex bank account token Documentation</a>
     */
    public ProcessorTokenCreateResponse processorApexProcessorTokenCreate(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest) throws ApiException {
        ApiResponse<ProcessorTokenCreateResponse> localVarResp = processorApexProcessorTokenCreateWithHttpInfo(processorApexProcessorTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Apex bank account token
     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
     * @param processorApexProcessorTokenCreateRequest  (required)
     * @return ApiResponse&lt;ProcessorTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Create Apex bank account token Documentation</a>
     */
    public ApiResponse<ProcessorTokenCreateResponse> processorApexProcessorTokenCreateWithHttpInfo(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = processorApexProcessorTokenCreateValidateBeforeCall(processorApexProcessorTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Apex bank account token (asynchronously)
     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
     * @param processorApexProcessorTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/none/">Create Apex bank account token Documentation</a>
     */
    public okhttp3.Call processorApexProcessorTokenCreateAsync(ProcessorApexProcessorTokenCreateRequest processorApexProcessorTokenCreateRequest, final ApiCallback<ProcessorTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorApexProcessorTokenCreateValidateBeforeCall(processorApexProcessorTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorAuthGet
     * @param processorAuthGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorauthget">Retrieve Auth data Documentation</a>
     */
    public okhttp3.Call processorAuthGetCall(ProcessorAuthGetRequest processorAuthGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorAuthGetRequest;

        // create path and map variables
        String localVarPath = "/processor/auth/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorAuthGetValidateBeforeCall(ProcessorAuthGetRequest processorAuthGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'processorAuthGetRequest' is set
        if (processorAuthGetRequest == null) {
            throw new ApiException("Missing the required parameter 'processorAuthGetRequest' when calling processorAuthGet(Async)");
        }

        return processorAuthGetCall(processorAuthGetRequest, _callback);

    }

    /**
     * Retrieve Auth data
     * The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
     * @param processorAuthGetRequest  (required)
     * @return ProcessorAuthGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorauthget">Retrieve Auth data Documentation</a>
     */
    public ProcessorAuthGetResponse processorAuthGet(ProcessorAuthGetRequest processorAuthGetRequest) throws ApiException {
        ApiResponse<ProcessorAuthGetResponse> localVarResp = processorAuthGetWithHttpInfo(processorAuthGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve Auth data
     * The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
     * @param processorAuthGetRequest  (required)
     * @return ApiResponse&lt;ProcessorAuthGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorauthget">Retrieve Auth data Documentation</a>
     */
    public ApiResponse<ProcessorAuthGetResponse> processorAuthGetWithHttpInfo(ProcessorAuthGetRequest processorAuthGetRequest) throws ApiException {
        okhttp3.Call localVarCall = processorAuthGetValidateBeforeCall(processorAuthGetRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorAuthGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Auth data (asynchronously)
     * The &#x60;/processor/auth/get&#x60; endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that&#39;&#39;s associated with a given &#x60;processor_token&#x60;. The endpoint also returns high-level account data and balances when available.  Versioning note: API versions 2019-05-29 and earlier use a different schema for the &#x60;numbers&#x60; object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
     * @param processorAuthGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorauthget">Retrieve Auth data Documentation</a>
     */
    public okhttp3.Call processorAuthGetAsync(ProcessorAuthGetRequest processorAuthGetRequest, final ApiCallback<ProcessorAuthGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorAuthGetValidateBeforeCall(processorAuthGetRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorAuthGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorBalanceGet
     * @param processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorbalanceget">Retrieve Balance data Documentation</a>
     */
    public okhttp3.Call processorBalanceGetCall(ProcessorBalanceGetRequest processorBalanceGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorBalanceGetRequest;

        // create path and map variables
        String localVarPath = "/processor/balance/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorBalanceGetValidateBeforeCall(ProcessorBalanceGetRequest processorBalanceGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'processorBalanceGetRequest' is set
        if (processorBalanceGetRequest == null) {
            throw new ApiException("Missing the required parameter 'processorBalanceGetRequest' when calling processorBalanceGet(Async)");
        }

        return processorBalanceGetCall(processorBalanceGetRequest, _callback);

    }

    /**
     * Retrieve Balance data
     * The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. 
     * @param processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;. (required)
     * @return ProcessorBalanceGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorbalanceget">Retrieve Balance data Documentation</a>
     */
    public ProcessorBalanceGetResponse processorBalanceGet(ProcessorBalanceGetRequest processorBalanceGetRequest) throws ApiException {
        ApiResponse<ProcessorBalanceGetResponse> localVarResp = processorBalanceGetWithHttpInfo(processorBalanceGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve Balance data
     * The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. 
     * @param processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;. (required)
     * @return ApiResponse&lt;ProcessorBalanceGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorbalanceget">Retrieve Balance data Documentation</a>
     */
    public ApiResponse<ProcessorBalanceGetResponse> processorBalanceGetWithHttpInfo(ProcessorBalanceGetRequest processorBalanceGetRequest) throws ApiException {
        okhttp3.Call localVarCall = processorBalanceGetValidateBeforeCall(processorBalanceGetRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorBalanceGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Balance data (asynchronously)
     * The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for each of an Item&#39;s accounts. While other endpoints may return a balance object, only &#x60;/processor/balance/get&#x60; forces the available and current balance fields to be refreshed rather than cached. 
     * @param processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorbalanceget">Retrieve Balance data Documentation</a>
     */
    public okhttp3.Call processorBalanceGetAsync(ProcessorBalanceGetRequest processorBalanceGetRequest, final ApiCallback<ProcessorBalanceGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorBalanceGetValidateBeforeCall(processorBalanceGetRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorBalanceGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorBankTransferCreate
     * @param processorBankTransferCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#bank_transfercreate">Create a bank transfer as a processor Documentation</a>
     */
    public okhttp3.Call processorBankTransferCreateCall(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorBankTransferCreateRequest;

        // create path and map variables
        String localVarPath = "/processor/bank_transfer/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorBankTransferCreateValidateBeforeCall(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'processorBankTransferCreateRequest' is set
        if (processorBankTransferCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'processorBankTransferCreateRequest' when calling processorBankTransferCreate(Async)");
        }

        return processorBankTransferCreateCall(processorBankTransferCreateRequest, _callback);

    }

    /**
     * Create a bank transfer as a processor
     * Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
     * @param processorBankTransferCreateRequest  (required)
     * @return ProcessorBankTransferCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#bank_transfercreate">Create a bank transfer as a processor Documentation</a>
     */
    public ProcessorBankTransferCreateResponse processorBankTransferCreate(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest) throws ApiException {
        ApiResponse<ProcessorBankTransferCreateResponse> localVarResp = processorBankTransferCreateWithHttpInfo(processorBankTransferCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a bank transfer as a processor
     * Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
     * @param processorBankTransferCreateRequest  (required)
     * @return ApiResponse&lt;ProcessorBankTransferCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#bank_transfercreate">Create a bank transfer as a processor Documentation</a>
     */
    public ApiResponse<ProcessorBankTransferCreateResponse> processorBankTransferCreateWithHttpInfo(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = processorBankTransferCreateValidateBeforeCall(processorBankTransferCreateRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorBankTransferCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a bank transfer as a processor (asynchronously)
     * Use the &#x60;/processor/bank_transfer/create&#x60; endpoint to initiate a new bank transfer as a processor
     * @param processorBankTransferCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#bank_transfercreate">Create a bank transfer as a processor Documentation</a>
     */
    public okhttp3.Call processorBankTransferCreateAsync(ProcessorBankTransferCreateRequest processorBankTransferCreateRequest, final ApiCallback<ProcessorBankTransferCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorBankTransferCreateValidateBeforeCall(processorBankTransferCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorBankTransferCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorIdentityGet
     * @param processorIdentityGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processoridentityget">Retrieve Identity data Documentation</a>
     */
    public okhttp3.Call processorIdentityGetCall(ProcessorIdentityGetRequest processorIdentityGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorIdentityGetRequest;

        // create path and map variables
        String localVarPath = "/processor/identity/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorIdentityGetValidateBeforeCall(ProcessorIdentityGetRequest processorIdentityGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'processorIdentityGetRequest' is set
        if (processorIdentityGetRequest == null) {
            throw new ApiException("Missing the required parameter 'processorIdentityGetRequest' when calling processorIdentityGet(Async)");
        }

        return processorIdentityGetCall(processorIdentityGetRequest, _callback);

    }

    /**
     * Retrieve Identity data
     * The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
     * @param processorIdentityGetRequest  (required)
     * @return ProcessorIdentityGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processoridentityget">Retrieve Identity data Documentation</a>
     */
    public ProcessorIdentityGetResponse processorIdentityGet(ProcessorIdentityGetRequest processorIdentityGetRequest) throws ApiException {
        ApiResponse<ProcessorIdentityGetResponse> localVarResp = processorIdentityGetWithHttpInfo(processorIdentityGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve Identity data
     * The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
     * @param processorIdentityGetRequest  (required)
     * @return ApiResponse&lt;ProcessorIdentityGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processoridentityget">Retrieve Identity data Documentation</a>
     */
    public ApiResponse<ProcessorIdentityGetResponse> processorIdentityGetWithHttpInfo(ProcessorIdentityGetRequest processorIdentityGetRequest) throws ApiException {
        okhttp3.Call localVarCall = processorIdentityGetValidateBeforeCall(processorIdentityGetRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorIdentityGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Identity data (asynchronously)
     * The &#x60;/processor/identity/get&#x60; endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
     * @param processorIdentityGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processoridentityget">Retrieve Identity data Documentation</a>
     */
    public okhttp3.Call processorIdentityGetAsync(ProcessorIdentityGetRequest processorIdentityGetRequest, final ApiCallback<ProcessorIdentityGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorIdentityGetValidateBeforeCall(processorIdentityGetRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorIdentityGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorSignalDecisionReport
     * @param processorSignalDecisionReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorsignaldecisionreport">Report whether you initiated an ACH transaction Documentation</a>
     */
    public okhttp3.Call processorSignalDecisionReportCall(ProcessorSignalDecisionReportRequest processorSignalDecisionReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorSignalDecisionReportRequest;

        // create path and map variables
        String localVarPath = "/processor/signal/decision/report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorSignalDecisionReportValidateBeforeCall(ProcessorSignalDecisionReportRequest processorSignalDecisionReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'processorSignalDecisionReportRequest' is set
        if (processorSignalDecisionReportRequest == null) {
            throw new ApiException("Missing the required parameter 'processorSignalDecisionReportRequest' when calling processorSignalDecisionReport(Async)");
        }

        return processorSignalDecisionReportCall(processorSignalDecisionReportRequest, _callback);

    }

    /**
     * Report whether you initiated an ACH transaction
     * After calling &#x60;/processor/signal/evaluate&#x60;, call &#x60;/processor/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an [&#x60;INVALID_FIELD&#x60;](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for &#x60;initiated&#x60;.
     * @param processorSignalDecisionReportRequest  (required)
     * @return ProcessorSignalDecisionReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorsignaldecisionreport">Report whether you initiated an ACH transaction Documentation</a>
     */
    public ProcessorSignalDecisionReportResponse processorSignalDecisionReport(ProcessorSignalDecisionReportRequest processorSignalDecisionReportRequest) throws ApiException {
        ApiResponse<ProcessorSignalDecisionReportResponse> localVarResp = processorSignalDecisionReportWithHttpInfo(processorSignalDecisionReportRequest);
        return localVarResp.getData();
    }

    /**
     * Report whether you initiated an ACH transaction
     * After calling &#x60;/processor/signal/evaluate&#x60;, call &#x60;/processor/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an [&#x60;INVALID_FIELD&#x60;](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for &#x60;initiated&#x60;.
     * @param processorSignalDecisionReportRequest  (required)
     * @return ApiResponse&lt;ProcessorSignalDecisionReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorsignaldecisionreport">Report whether you initiated an ACH transaction Documentation</a>
     */
    public ApiResponse<ProcessorSignalDecisionReportResponse> processorSignalDecisionReportWithHttpInfo(ProcessorSignalDecisionReportRequest processorSignalDecisionReportRequest) throws ApiException {
        okhttp3.Call localVarCall = processorSignalDecisionReportValidateBeforeCall(processorSignalDecisionReportRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorSignalDecisionReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Report whether you initiated an ACH transaction (asynchronously)
     * After calling &#x60;/processor/signal/evaluate&#x60;, call &#x60;/processor/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an [&#x60;INVALID_FIELD&#x60;](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for &#x60;initiated&#x60;.
     * @param processorSignalDecisionReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorsignaldecisionreport">Report whether you initiated an ACH transaction Documentation</a>
     */
    public okhttp3.Call processorSignalDecisionReportAsync(ProcessorSignalDecisionReportRequest processorSignalDecisionReportRequest, final ApiCallback<ProcessorSignalDecisionReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorSignalDecisionReportValidateBeforeCall(processorSignalDecisionReportRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorSignalDecisionReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorSignalEvaluate
     * @param processorSignalEvaluateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorsignalevaluate">Evaluate a planned ACH transaction Documentation</a>
     */
    public okhttp3.Call processorSignalEvaluateCall(ProcessorSignalEvaluateRequest processorSignalEvaluateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorSignalEvaluateRequest;

        // create path and map variables
        String localVarPath = "/processor/signal/evaluate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorSignalEvaluateValidateBeforeCall(ProcessorSignalEvaluateRequest processorSignalEvaluateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'processorSignalEvaluateRequest' is set
        if (processorSignalEvaluateRequest == null) {
            throw new ApiException("Missing the required parameter 'processorSignalEvaluateRequest' when calling processorSignalEvaluate(Async)");
        }

        return processorSignalEvaluateCall(processorSignalEvaluateRequest, _callback);

    }

    /**
     * Evaluate a planned ACH transaction
     * Use &#x60;/processor/signal/evaluate&#x60; to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/processor/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
     * @param processorSignalEvaluateRequest  (required)
     * @return ProcessorSignalEvaluateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorsignalevaluate">Evaluate a planned ACH transaction Documentation</a>
     */
    public ProcessorSignalEvaluateResponse processorSignalEvaluate(ProcessorSignalEvaluateRequest processorSignalEvaluateRequest) throws ApiException {
        ApiResponse<ProcessorSignalEvaluateResponse> localVarResp = processorSignalEvaluateWithHttpInfo(processorSignalEvaluateRequest);
        return localVarResp.getData();
    }

    /**
     * Evaluate a planned ACH transaction
     * Use &#x60;/processor/signal/evaluate&#x60; to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/processor/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
     * @param processorSignalEvaluateRequest  (required)
     * @return ApiResponse&lt;ProcessorSignalEvaluateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorsignalevaluate">Evaluate a planned ACH transaction Documentation</a>
     */
    public ApiResponse<ProcessorSignalEvaluateResponse> processorSignalEvaluateWithHttpInfo(ProcessorSignalEvaluateRequest processorSignalEvaluateRequest) throws ApiException {
        okhttp3.Call localVarCall = processorSignalEvaluateValidateBeforeCall(processorSignalEvaluateRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorSignalEvaluateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Evaluate a planned ACH transaction (asynchronously)
     * Use &#x60;/processor/signal/evaluate&#x60; to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/processor/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
     * @param processorSignalEvaluateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorsignalevaluate">Evaluate a planned ACH transaction Documentation</a>
     */
    public okhttp3.Call processorSignalEvaluateAsync(ProcessorSignalEvaluateRequest processorSignalEvaluateRequest, final ApiCallback<ProcessorSignalEvaluateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorSignalEvaluateValidateBeforeCall(processorSignalEvaluateRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorSignalEvaluateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorSignalReturnReport
     * @param processorSignalReturnReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorsignalreturnreport">Report a return for an ACH transaction Documentation</a>
     */
    public okhttp3.Call processorSignalReturnReportCall(ProcessorSignalReturnReportRequest processorSignalReturnReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorSignalReturnReportRequest;

        // create path and map variables
        String localVarPath = "/processor/signal/return/report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorSignalReturnReportValidateBeforeCall(ProcessorSignalReturnReportRequest processorSignalReturnReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'processorSignalReturnReportRequest' is set
        if (processorSignalReturnReportRequest == null) {
            throw new ApiException("Missing the required parameter 'processorSignalReturnReportRequest' when calling processorSignalReturnReport(Async)");
        }

        return processorSignalReturnReportCall(processorSignalReturnReportRequest, _callback);

    }

    /**
     * Report a return for an ACH transaction
     * Call the &#x60;/processor/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/processor/signal/evaluate&#x60; endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     * @param processorSignalReturnReportRequest  (required)
     * @return ProcessorSignalReturnReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorsignalreturnreport">Report a return for an ACH transaction Documentation</a>
     */
    public ProcessorSignalReturnReportResponse processorSignalReturnReport(ProcessorSignalReturnReportRequest processorSignalReturnReportRequest) throws ApiException {
        ApiResponse<ProcessorSignalReturnReportResponse> localVarResp = processorSignalReturnReportWithHttpInfo(processorSignalReturnReportRequest);
        return localVarResp.getData();
    }

    /**
     * Report a return for an ACH transaction
     * Call the &#x60;/processor/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/processor/signal/evaluate&#x60; endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     * @param processorSignalReturnReportRequest  (required)
     * @return ApiResponse&lt;ProcessorSignalReturnReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorsignalreturnreport">Report a return for an ACH transaction Documentation</a>
     */
    public ApiResponse<ProcessorSignalReturnReportResponse> processorSignalReturnReportWithHttpInfo(ProcessorSignalReturnReportRequest processorSignalReturnReportRequest) throws ApiException {
        okhttp3.Call localVarCall = processorSignalReturnReportValidateBeforeCall(processorSignalReturnReportRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorSignalReturnReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Report a return for an ACH transaction (asynchronously)
     * Call the &#x60;/processor/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/processor/signal/evaluate&#x60; endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     * @param processorSignalReturnReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorsignalreturnreport">Report a return for an ACH transaction Documentation</a>
     */
    public okhttp3.Call processorSignalReturnReportAsync(ProcessorSignalReturnReportRequest processorSignalReturnReportRequest, final ApiCallback<ProcessorSignalReturnReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorSignalReturnReportValidateBeforeCall(processorSignalReturnReportRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorSignalReturnReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorStripeBankAccountTokenCreate
     * @param processorStripeBankAccountTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorstripebank_account_tokencreate">Create Stripe bank account token Documentation</a>
     */
    public okhttp3.Call processorStripeBankAccountTokenCreateCall(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorStripeBankAccountTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/processor/stripe/bank_account_token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorStripeBankAccountTokenCreateValidateBeforeCall(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'processorStripeBankAccountTokenCreateRequest' is set
        if (processorStripeBankAccountTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'processorStripeBankAccountTokenCreateRequest' when calling processorStripeBankAccountTokenCreate(Async)");
        }

        return processorStripeBankAccountTokenCreateCall(processorStripeBankAccountTokenCreateRequest, _callback);

    }

    /**
     * Create Stripe bank account token
     *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user&#39;s bank account information changes or they revoke Plaid&#39;s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new &#x60;access_token&#x60;.  Bank account tokens can also be revoked, using &#x60;/item/remove&#x60;.&#39;
     * @param processorStripeBankAccountTokenCreateRequest  (required)
     * @return ProcessorStripeBankAccountTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorstripebank_account_tokencreate">Create Stripe bank account token Documentation</a>
     */
    public ProcessorStripeBankAccountTokenCreateResponse processorStripeBankAccountTokenCreate(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest) throws ApiException {
        ApiResponse<ProcessorStripeBankAccountTokenCreateResponse> localVarResp = processorStripeBankAccountTokenCreateWithHttpInfo(processorStripeBankAccountTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Stripe bank account token
     *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user&#39;s bank account information changes or they revoke Plaid&#39;s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new &#x60;access_token&#x60;.  Bank account tokens can also be revoked, using &#x60;/item/remove&#x60;.&#39;
     * @param processorStripeBankAccountTokenCreateRequest  (required)
     * @return ApiResponse&lt;ProcessorStripeBankAccountTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorstripebank_account_tokencreate">Create Stripe bank account token Documentation</a>
     */
    public ApiResponse<ProcessorStripeBankAccountTokenCreateResponse> processorStripeBankAccountTokenCreateWithHttpInfo(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = processorStripeBankAccountTokenCreateValidateBeforeCall(processorStripeBankAccountTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorStripeBankAccountTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Stripe bank account token (asynchronously)
     *  Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).  Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user&#39;s bank account information changes or they revoke Plaid&#39;s permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new &#x60;access_token&#x60;.  Bank account tokens can also be revoked, using &#x60;/item/remove&#x60;.&#39;
     * @param processorStripeBankAccountTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processorstripebank_account_tokencreate">Create Stripe bank account token Documentation</a>
     */
    public okhttp3.Call processorStripeBankAccountTokenCreateAsync(ProcessorStripeBankAccountTokenCreateRequest processorStripeBankAccountTokenCreateRequest, final ApiCallback<ProcessorStripeBankAccountTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorStripeBankAccountTokenCreateValidateBeforeCall(processorStripeBankAccountTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorStripeBankAccountTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for processorTokenCreate
     * @param processorTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processortokencreate">Create processor token Documentation</a>
     */
    public okhttp3.Call processorTokenCreateCall(ProcessorTokenCreateRequest processorTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processorTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/processor/token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processorTokenCreateValidateBeforeCall(ProcessorTokenCreateRequest processorTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'processorTokenCreateRequest' is set
        if (processorTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'processorTokenCreateRequest' when calling processorTokenCreate(Async)");
        }

        return processorTokenCreateCall(processorTokenCreateRequest, _callback);

    }

    /**
     * Create processor token
     * Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new &#x60;access_token&#x60;. Processor tokens can also be revoked, using &#x60;/item/remove&#x60;.
     * @param processorTokenCreateRequest  (required)
     * @return ProcessorTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processortokencreate">Create processor token Documentation</a>
     */
    public ProcessorTokenCreateResponse processorTokenCreate(ProcessorTokenCreateRequest processorTokenCreateRequest) throws ApiException {
        ApiResponse<ProcessorTokenCreateResponse> localVarResp = processorTokenCreateWithHttpInfo(processorTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create processor token
     * Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new &#x60;access_token&#x60;. Processor tokens can also be revoked, using &#x60;/item/remove&#x60;.
     * @param processorTokenCreateRequest  (required)
     * @return ApiResponse&lt;ProcessorTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processortokencreate">Create processor token Documentation</a>
     */
    public ApiResponse<ProcessorTokenCreateResponse> processorTokenCreateWithHttpInfo(ProcessorTokenCreateRequest processorTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = processorTokenCreateValidateBeforeCall(processorTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<ProcessorTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create processor token (asynchronously)
     * Used to create a token suitable for sending to one of Plaid&#39;s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see &#x60;/processor/stripe/bank_account_token/create&#x60; for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new &#x60;access_token&#x60;. Processor tokens can also be revoked, using &#x60;/item/remove&#x60;.
     * @param processorTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/processors/#processortokencreate">Create processor token Documentation</a>
     */
    public okhttp3.Call processorTokenCreateAsync(ProcessorTokenCreateRequest processorTokenCreateRequest, final ApiCallback<ProcessorTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processorTokenCreateValidateBeforeCall(processorTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ProcessorTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxBankTransferFireWebhook
     * @param sandboxBankTransferFireWebhookRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference/#sandboxbank_transferfire_webhook">Manually fire a Bank Transfer webhook Documentation</a>
     */
    public okhttp3.Call sandboxBankTransferFireWebhookCall(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxBankTransferFireWebhookRequest;

        // create path and map variables
        String localVarPath = "/sandbox/bank_transfer/fire_webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxBankTransferFireWebhookValidateBeforeCall(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxBankTransferFireWebhookRequest' is set
        if (sandboxBankTransferFireWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxBankTransferFireWebhookRequest' when calling sandboxBankTransferFireWebhook(Async)");
        }

        return sandboxBankTransferFireWebhookCall(sandboxBankTransferFireWebhookRequest, _callback);

    }

    /**
     * Manually fire a Bank Transfer webhook
     * Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
     * @param sandboxBankTransferFireWebhookRequest  (required)
     * @return SandboxBankTransferFireWebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference/#sandboxbank_transferfire_webhook">Manually fire a Bank Transfer webhook Documentation</a>
     */
    public SandboxBankTransferFireWebhookResponse sandboxBankTransferFireWebhook(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest) throws ApiException {
        ApiResponse<SandboxBankTransferFireWebhookResponse> localVarResp = sandboxBankTransferFireWebhookWithHttpInfo(sandboxBankTransferFireWebhookRequest);
        return localVarResp.getData();
    }

    /**
     * Manually fire a Bank Transfer webhook
     * Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
     * @param sandboxBankTransferFireWebhookRequest  (required)
     * @return ApiResponse&lt;SandboxBankTransferFireWebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference/#sandboxbank_transferfire_webhook">Manually fire a Bank Transfer webhook Documentation</a>
     */
    public ApiResponse<SandboxBankTransferFireWebhookResponse> sandboxBankTransferFireWebhookWithHttpInfo(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxBankTransferFireWebhookValidateBeforeCall(sandboxBankTransferFireWebhookRequest, null);
        Type localVarReturnType = new TypeToken<SandboxBankTransferFireWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Manually fire a Bank Transfer webhook (asynchronously)
     * Use the &#x60;/sandbox/bank_transfer/fire_webhook&#x60; endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
     * @param sandboxBankTransferFireWebhookRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference/#sandboxbank_transferfire_webhook">Manually fire a Bank Transfer webhook Documentation</a>
     */
    public okhttp3.Call sandboxBankTransferFireWebhookAsync(SandboxBankTransferFireWebhookRequest sandboxBankTransferFireWebhookRequest, final ApiCallback<SandboxBankTransferFireWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxBankTransferFireWebhookValidateBeforeCall(sandboxBankTransferFireWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxBankTransferFireWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxBankTransferSimulate
     * @param sandboxBankTransferSimulateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference/#sandboxbank_transfersimulate">Simulate a bank transfer event in Sandbox Documentation</a>
     */
    public okhttp3.Call sandboxBankTransferSimulateCall(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxBankTransferSimulateRequest;

        // create path and map variables
        String localVarPath = "/sandbox/bank_transfer/simulate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxBankTransferSimulateValidateBeforeCall(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxBankTransferSimulateRequest' is set
        if (sandboxBankTransferSimulateRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxBankTransferSimulateRequest' when calling sandboxBankTransferSimulate(Async)");
        }

        return sandboxBankTransferSimulateCall(sandboxBankTransferSimulateRequest, _callback);

    }

    /**
     * Simulate a bank transfer event in Sandbox
     * Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @param sandboxBankTransferSimulateRequest  (required)
     * @return SandboxBankTransferSimulateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference/#sandboxbank_transfersimulate">Simulate a bank transfer event in Sandbox Documentation</a>
     */
    public SandboxBankTransferSimulateResponse sandboxBankTransferSimulate(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest) throws ApiException {
        ApiResponse<SandboxBankTransferSimulateResponse> localVarResp = sandboxBankTransferSimulateWithHttpInfo(sandboxBankTransferSimulateRequest);
        return localVarResp.getData();
    }

    /**
     * Simulate a bank transfer event in Sandbox
     * Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @param sandboxBankTransferSimulateRequest  (required)
     * @return ApiResponse&lt;SandboxBankTransferSimulateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference/#sandboxbank_transfersimulate">Simulate a bank transfer event in Sandbox Documentation</a>
     */
    public ApiResponse<SandboxBankTransferSimulateResponse> sandboxBankTransferSimulateWithHttpInfo(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxBankTransferSimulateValidateBeforeCall(sandboxBankTransferSimulateRequest, null);
        Type localVarReturnType = new TypeToken<SandboxBankTransferSimulateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate a bank transfer event in Sandbox (asynchronously)
     * Use the &#x60;/sandbox/bank_transfer/simulate&#x60; endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/bank_transfer/event/sync&#x60; or &#x60;/bank_transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @param sandboxBankTransferSimulateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/bank-transfers/reference/#sandboxbank_transfersimulate">Simulate a bank transfer event in Sandbox Documentation</a>
     */
    public okhttp3.Call sandboxBankTransferSimulateAsync(SandboxBankTransferSimulateRequest sandboxBankTransferSimulateRequest, final ApiCallback<SandboxBankTransferSimulateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxBankTransferSimulateValidateBeforeCall(sandboxBankTransferSimulateRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxBankTransferSimulateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxIncomeFireWebhook
     * @param sandboxIncomeFireWebhookRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxincomefire_webhook">Manually fire an Income webhook Documentation</a>
     */
    public okhttp3.Call sandboxIncomeFireWebhookCall(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxIncomeFireWebhookRequest;

        // create path and map variables
        String localVarPath = "/sandbox/income/fire_webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxIncomeFireWebhookValidateBeforeCall(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxIncomeFireWebhookRequest' is set
        if (sandboxIncomeFireWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxIncomeFireWebhookRequest' when calling sandboxIncomeFireWebhook(Async)");
        }

        return sandboxIncomeFireWebhookCall(sandboxIncomeFireWebhookRequest, _callback);

    }

    /**
     * Manually fire an Income webhook
     * Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger an Income webhook in the Sandbox environment.
     * @param sandboxIncomeFireWebhookRequest  (required)
     * @return SandboxIncomeFireWebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxincomefire_webhook">Manually fire an Income webhook Documentation</a>
     */
    public SandboxIncomeFireWebhookResponse sandboxIncomeFireWebhook(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest) throws ApiException {
        ApiResponse<SandboxIncomeFireWebhookResponse> localVarResp = sandboxIncomeFireWebhookWithHttpInfo(sandboxIncomeFireWebhookRequest);
        return localVarResp.getData();
    }

    /**
     * Manually fire an Income webhook
     * Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger an Income webhook in the Sandbox environment.
     * @param sandboxIncomeFireWebhookRequest  (required)
     * @return ApiResponse&lt;SandboxIncomeFireWebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxincomefire_webhook">Manually fire an Income webhook Documentation</a>
     */
    public ApiResponse<SandboxIncomeFireWebhookResponse> sandboxIncomeFireWebhookWithHttpInfo(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxIncomeFireWebhookValidateBeforeCall(sandboxIncomeFireWebhookRequest, null);
        Type localVarReturnType = new TypeToken<SandboxIncomeFireWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Manually fire an Income webhook (asynchronously)
     * Use the &#x60;/sandbox/income/fire_webhook&#x60; endpoint to manually trigger an Income webhook in the Sandbox environment.
     * @param sandboxIncomeFireWebhookRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxincomefire_webhook">Manually fire an Income webhook Documentation</a>
     */
    public okhttp3.Call sandboxIncomeFireWebhookAsync(SandboxIncomeFireWebhookRequest sandboxIncomeFireWebhookRequest, final ApiCallback<SandboxIncomeFireWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxIncomeFireWebhookValidateBeforeCall(sandboxIncomeFireWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxIncomeFireWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxItemFireWebhook
     * @param sandboxItemFireWebhookRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemfire_webhook">Fire a test webhook Documentation</a>
     */
    public okhttp3.Call sandboxItemFireWebhookCall(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxItemFireWebhookRequest;

        // create path and map variables
        String localVarPath = "/sandbox/item/fire_webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxItemFireWebhookValidateBeforeCall(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxItemFireWebhookRequest' is set
        if (sandboxItemFireWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxItemFireWebhookRequest' when calling sandboxItemFireWebhook(Async)");
        }

        return sandboxItemFireWebhookCall(sandboxItemFireWebhookRequest, _callback);

    }

    /**
     * Fire a test webhook
     * The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  &#x60;DEFAULT_UPDATE&#x60;: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  &#x60;NEW_ACCOUNTS_AVAILABLE&#x60;: Webhook to be fired for a given Sandbox Item created with Account Select v2.  &#x60;AUTH_DATA_UPDATE&#x60;: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  &#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  &#x60;SYNC_UPDATES_AVAILABLE&#x60;: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
     * @param sandboxItemFireWebhookRequest  (required)
     * @return SandboxItemFireWebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemfire_webhook">Fire a test webhook Documentation</a>
     */
    public SandboxItemFireWebhookResponse sandboxItemFireWebhook(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest) throws ApiException {
        ApiResponse<SandboxItemFireWebhookResponse> localVarResp = sandboxItemFireWebhookWithHttpInfo(sandboxItemFireWebhookRequest);
        return localVarResp.getData();
    }

    /**
     * Fire a test webhook
     * The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  &#x60;DEFAULT_UPDATE&#x60;: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  &#x60;NEW_ACCOUNTS_AVAILABLE&#x60;: Webhook to be fired for a given Sandbox Item created with Account Select v2.  &#x60;AUTH_DATA_UPDATE&#x60;: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  &#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  &#x60;SYNC_UPDATES_AVAILABLE&#x60;: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
     * @param sandboxItemFireWebhookRequest  (required)
     * @return ApiResponse&lt;SandboxItemFireWebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemfire_webhook">Fire a test webhook Documentation</a>
     */
    public ApiResponse<SandboxItemFireWebhookResponse> sandboxItemFireWebhookWithHttpInfo(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxItemFireWebhookValidateBeforeCall(sandboxItemFireWebhookRequest, null);
        Type localVarReturnType = new TypeToken<SandboxItemFireWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fire a test webhook (asynchronously)
     * The &#x60;/sandbox/item/fire_webhook&#x60; endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:  &#x60;DEFAULT_UPDATE&#x60;: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  &#x60;NEW_ACCOUNTS_AVAILABLE&#x60;: Webhook to be fired for a given Sandbox Item created with Account Select v2.  &#x60;AUTH_DATA_UPDATE&#x60;: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.  &#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  &#x60;SYNC_UPDATES_AVAILABLE&#x60;: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a &#x60;SANDBOX_PRODUCT_NOT_ENABLED&#x60; error will result.  Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
     * @param sandboxItemFireWebhookRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemfire_webhook">Fire a test webhook Documentation</a>
     */
    public okhttp3.Call sandboxItemFireWebhookAsync(SandboxItemFireWebhookRequest sandboxItemFireWebhookRequest, final ApiCallback<SandboxItemFireWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxItemFireWebhookValidateBeforeCall(sandboxItemFireWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxItemFireWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxItemResetLogin
     * @param sandboxItemResetLoginRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemreset_login">Force a Sandbox Item into an error state Documentation</a>
     */
    public okhttp3.Call sandboxItemResetLoginCall(SandboxItemResetLoginRequest sandboxItemResetLoginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxItemResetLoginRequest;

        // create path and map variables
        String localVarPath = "/sandbox/item/reset_login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxItemResetLoginValidateBeforeCall(SandboxItemResetLoginRequest sandboxItemResetLoginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxItemResetLoginRequest' is set
        if (sandboxItemResetLoginRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxItemResetLoginRequest' when calling sandboxItemResetLogin(Async)");
        }

        return sandboxItemResetLoginCall(sandboxItemResetLoginRequest, _callback);

    }

    /**
     * Force a Sandbox Item into an error state
     * &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
     * @param sandboxItemResetLoginRequest  (required)
     * @return SandboxItemResetLoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemreset_login">Force a Sandbox Item into an error state Documentation</a>
     */
    public SandboxItemResetLoginResponse sandboxItemResetLogin(SandboxItemResetLoginRequest sandboxItemResetLoginRequest) throws ApiException {
        ApiResponse<SandboxItemResetLoginResponse> localVarResp = sandboxItemResetLoginWithHttpInfo(sandboxItemResetLoginRequest);
        return localVarResp.getData();
    }

    /**
     * Force a Sandbox Item into an error state
     * &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
     * @param sandboxItemResetLoginRequest  (required)
     * @return ApiResponse&lt;SandboxItemResetLoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemreset_login">Force a Sandbox Item into an error state Documentation</a>
     */
    public ApiResponse<SandboxItemResetLoginResponse> sandboxItemResetLoginWithHttpInfo(SandboxItemResetLoginRequest sandboxItemResetLoginRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxItemResetLoginValidateBeforeCall(sandboxItemResetLoginRequest, null);
        Type localVarReturnType = new TypeToken<SandboxItemResetLoginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Force a Sandbox Item into an error state (asynchronously)
     * &#x60;/sandbox/item/reset_login/&#x60; forces an Item into an &#x60;ITEM_LOGIN_REQUIRED&#x60; state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link&#39;s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling &#x60;/sandbox/item/reset_login&#x60;, You can then use Plaid Link update mode to restore the Item to a good state. An &#x60;ITEM_LOGIN_REQUIRED&#x60; webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an &#x60;ITEM_LOGIN_REQUIRED&#x60; error state automatically after 30 days, even if this endpoint is not called.
     * @param sandboxItemResetLoginRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemreset_login">Force a Sandbox Item into an error state Documentation</a>
     */
    public okhttp3.Call sandboxItemResetLoginAsync(SandboxItemResetLoginRequest sandboxItemResetLoginRequest, final ApiCallback<SandboxItemResetLoginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxItemResetLoginValidateBeforeCall(sandboxItemResetLoginRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxItemResetLoginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxItemSetVerificationStatus
     * @param sandboxItemSetVerificationStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemset_verification_status">Set verification status for Sandbox account Documentation</a>
     */
    public okhttp3.Call sandboxItemSetVerificationStatusCall(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxItemSetVerificationStatusRequest;

        // create path and map variables
        String localVarPath = "/sandbox/item/set_verification_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxItemSetVerificationStatusValidateBeforeCall(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxItemSetVerificationStatusRequest' is set
        if (sandboxItemSetVerificationStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxItemSetVerificationStatusRequest' when calling sandboxItemSetVerificationStatus(Async)");
        }

        return sandboxItemSetVerificationStatusCall(sandboxItemSetVerificationStatusRequest, _callback);

    }

    /**
     * Set verification status for Sandbox account
     * The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
     * @param sandboxItemSetVerificationStatusRequest  (required)
     * @return SandboxItemSetVerificationStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemset_verification_status">Set verification status for Sandbox account Documentation</a>
     */
    public SandboxItemSetVerificationStatusResponse sandboxItemSetVerificationStatus(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest) throws ApiException {
        ApiResponse<SandboxItemSetVerificationStatusResponse> localVarResp = sandboxItemSetVerificationStatusWithHttpInfo(sandboxItemSetVerificationStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Set verification status for Sandbox account
     * The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
     * @param sandboxItemSetVerificationStatusRequest  (required)
     * @return ApiResponse&lt;SandboxItemSetVerificationStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemset_verification_status">Set verification status for Sandbox account Documentation</a>
     */
    public ApiResponse<SandboxItemSetVerificationStatusResponse> sandboxItemSetVerificationStatusWithHttpInfo(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxItemSetVerificationStatusValidateBeforeCall(sandboxItemSetVerificationStatusRequest, null);
        Type localVarReturnType = new TypeToken<SandboxItemSetVerificationStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set verification status for Sandbox account (asynchronously)
     * The &#x60;/sandbox/item/set_verification_status&#x60; endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
     * @param sandboxItemSetVerificationStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxitemset_verification_status">Set verification status for Sandbox account Documentation</a>
     */
    public okhttp3.Call sandboxItemSetVerificationStatusAsync(SandboxItemSetVerificationStatusRequest sandboxItemSetVerificationStatusRequest, final ApiCallback<SandboxItemSetVerificationStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxItemSetVerificationStatusValidateBeforeCall(sandboxItemSetVerificationStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxItemSetVerificationStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxOauthSelectAccounts
     * @param sandboxOauthSelectAccountsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sandboxOauthSelectAccountsCall(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxOauthSelectAccountsRequest;

        // create path and map variables
        String localVarPath = "/sandbox/oauth/select_accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxOauthSelectAccountsValidateBeforeCall(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxOauthSelectAccountsRequest' is set
        if (sandboxOauthSelectAccountsRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxOauthSelectAccountsRequest' when calling sandboxOauthSelectAccounts(Async)");
        }

        return sandboxOauthSelectAccountsCall(sandboxOauthSelectAccountsRequest, _callback);

    }

    /**
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * @param sandboxOauthSelectAccountsRequest  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> sandboxOauthSelectAccounts(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = sandboxOauthSelectAccountsWithHttpInfo(sandboxOauthSelectAccountsRequest);
        return localVarResp.getData();
    }

    /**
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * @param sandboxOauthSelectAccountsRequest  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> sandboxOauthSelectAccountsWithHttpInfo(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxOauthSelectAccountsValidateBeforeCall(sandboxOauthSelectAccountsRequest, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save the selected accounts when connecting to the Platypus Oauth institution (asynchronously)
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * @param sandboxOauthSelectAccountsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sandboxOauthSelectAccountsAsync(SandboxOauthSelectAccountsRequest sandboxOauthSelectAccountsRequest, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxOauthSelectAccountsValidateBeforeCall(sandboxOauthSelectAccountsRequest, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxPaymentProfileResetLogin
     * @param sandboxPaymentProfileResetLoginRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxpayment_profilereset_login">Reset the login of a Payment Profile Documentation</a>
     */
    public okhttp3.Call sandboxPaymentProfileResetLoginCall(SandboxPaymentProfileResetLoginRequest sandboxPaymentProfileResetLoginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxPaymentProfileResetLoginRequest;

        // create path and map variables
        String localVarPath = "/sandbox/payment_profile/reset_login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxPaymentProfileResetLoginValidateBeforeCall(SandboxPaymentProfileResetLoginRequest sandboxPaymentProfileResetLoginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxPaymentProfileResetLoginRequest' is set
        if (sandboxPaymentProfileResetLoginRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxPaymentProfileResetLoginRequest' when calling sandboxPaymentProfileResetLogin(Async)");
        }

        return sandboxPaymentProfileResetLoginCall(sandboxPaymentProfileResetLoginRequest, _callback);

    }

    /**
     * Reset the login of a Payment Profile
     * &#x60;/sandbox/payment_profile/reset_login/&#x60; forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling &#x60;/sandbox/payment_profile/reset_login&#x60;, calls to the &#x60;/transfer/authorization/create&#x60; with the Payment Profile will result in a &#x60;decision_rationale&#x60; &#x60;PAYMENT_PROFILE_LOGIN_REQUIRED&#x60;. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
     * @param sandboxPaymentProfileResetLoginRequest  (required)
     * @return SandboxPaymentProfileResetLoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxpayment_profilereset_login">Reset the login of a Payment Profile Documentation</a>
     */
    public SandboxPaymentProfileResetLoginResponse sandboxPaymentProfileResetLogin(SandboxPaymentProfileResetLoginRequest sandboxPaymentProfileResetLoginRequest) throws ApiException {
        ApiResponse<SandboxPaymentProfileResetLoginResponse> localVarResp = sandboxPaymentProfileResetLoginWithHttpInfo(sandboxPaymentProfileResetLoginRequest);
        return localVarResp.getData();
    }

    /**
     * Reset the login of a Payment Profile
     * &#x60;/sandbox/payment_profile/reset_login/&#x60; forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling &#x60;/sandbox/payment_profile/reset_login&#x60;, calls to the &#x60;/transfer/authorization/create&#x60; with the Payment Profile will result in a &#x60;decision_rationale&#x60; &#x60;PAYMENT_PROFILE_LOGIN_REQUIRED&#x60;. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
     * @param sandboxPaymentProfileResetLoginRequest  (required)
     * @return ApiResponse&lt;SandboxPaymentProfileResetLoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxpayment_profilereset_login">Reset the login of a Payment Profile Documentation</a>
     */
    public ApiResponse<SandboxPaymentProfileResetLoginResponse> sandboxPaymentProfileResetLoginWithHttpInfo(SandboxPaymentProfileResetLoginRequest sandboxPaymentProfileResetLoginRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxPaymentProfileResetLoginValidateBeforeCall(sandboxPaymentProfileResetLoginRequest, null);
        Type localVarReturnType = new TypeToken<SandboxPaymentProfileResetLoginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reset the login of a Payment Profile (asynchronously)
     * &#x60;/sandbox/payment_profile/reset_login/&#x60; forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.   After calling &#x60;/sandbox/payment_profile/reset_login&#x60;, calls to the &#x60;/transfer/authorization/create&#x60; with the Payment Profile will result in a &#x60;decision_rationale&#x60; &#x60;PAYMENT_PROFILE_LOGIN_REQUIRED&#x60;. You can then use update mode for Payment Profile to restore it into a good state.   In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
     * @param sandboxPaymentProfileResetLoginRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxpayment_profilereset_login">Reset the login of a Payment Profile Documentation</a>
     */
    public okhttp3.Call sandboxPaymentProfileResetLoginAsync(SandboxPaymentProfileResetLoginRequest sandboxPaymentProfileResetLoginRequest, final ApiCallback<SandboxPaymentProfileResetLoginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxPaymentProfileResetLoginValidateBeforeCall(sandboxPaymentProfileResetLoginRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxPaymentProfileResetLoginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxProcessorTokenCreate
     * @param sandboxProcessorTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxprocessor_tokencreate">Create a test Item and processor token Documentation</a>
     */
    public okhttp3.Call sandboxProcessorTokenCreateCall(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxProcessorTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/sandbox/processor_token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxProcessorTokenCreateValidateBeforeCall(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxProcessorTokenCreateRequest' is set
        if (sandboxProcessorTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxProcessorTokenCreateRequest' when calling sandboxProcessorTokenCreate(Async)");
        }

        return sandboxProcessorTokenCreateCall(sandboxProcessorTokenCreateRequest, _callback);

    }

    /**
     * Create a test Item and processor token
     * Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
     * @param sandboxProcessorTokenCreateRequest  (required)
     * @return SandboxProcessorTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxprocessor_tokencreate">Create a test Item and processor token Documentation</a>
     */
    public SandboxProcessorTokenCreateResponse sandboxProcessorTokenCreate(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest) throws ApiException {
        ApiResponse<SandboxProcessorTokenCreateResponse> localVarResp = sandboxProcessorTokenCreateWithHttpInfo(sandboxProcessorTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a test Item and processor token
     * Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
     * @param sandboxProcessorTokenCreateRequest  (required)
     * @return ApiResponse&lt;SandboxProcessorTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxprocessor_tokencreate">Create a test Item and processor token Documentation</a>
     */
    public ApiResponse<SandboxProcessorTokenCreateResponse> sandboxProcessorTokenCreateWithHttpInfo(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxProcessorTokenCreateValidateBeforeCall(sandboxProcessorTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<SandboxProcessorTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a test Item and processor token (asynchronously)
     * Use the &#x60;/sandbox/processor_token/create&#x60; endpoint to create a valid &#x60;processor_token&#x60; for an arbitrary institution ID and test credentials. The created &#x60;processor_token&#x60; corresponds to a new Sandbox Item. You can then use this &#x60;processor_token&#x60; with the &#x60;/processor/&#x60; API endpoints in Sandbox. You can also use &#x60;/sandbox/processor_token/create&#x60; with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
     * @param sandboxProcessorTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxprocessor_tokencreate">Create a test Item and processor token Documentation</a>
     */
    public okhttp3.Call sandboxProcessorTokenCreateAsync(SandboxProcessorTokenCreateRequest sandboxProcessorTokenCreateRequest, final ApiCallback<SandboxProcessorTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxProcessorTokenCreateValidateBeforeCall(sandboxProcessorTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxProcessorTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxPublicTokenCreate
     * @param sandboxPublicTokenCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxpublic_tokencreate">Create a test Item Documentation</a>
     */
    public okhttp3.Call sandboxPublicTokenCreateCall(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxPublicTokenCreateRequest;

        // create path and map variables
        String localVarPath = "/sandbox/public_token/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxPublicTokenCreateValidateBeforeCall(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxPublicTokenCreateRequest' is set
        if (sandboxPublicTokenCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxPublicTokenCreateRequest' when calling sandboxPublicTokenCreate(Async)");
        }

        return sandboxPublicTokenCreateCall(sandboxPublicTokenCreateRequest, _callback);

    }

    /**
     * Create a test Item
     * Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
     * @param sandboxPublicTokenCreateRequest  (required)
     * @return SandboxPublicTokenCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxpublic_tokencreate">Create a test Item Documentation</a>
     */
    public SandboxPublicTokenCreateResponse sandboxPublicTokenCreate(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest) throws ApiException {
        ApiResponse<SandboxPublicTokenCreateResponse> localVarResp = sandboxPublicTokenCreateWithHttpInfo(sandboxPublicTokenCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a test Item
     * Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
     * @param sandboxPublicTokenCreateRequest  (required)
     * @return ApiResponse&lt;SandboxPublicTokenCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxpublic_tokencreate">Create a test Item Documentation</a>
     */
    public ApiResponse<SandboxPublicTokenCreateResponse> sandboxPublicTokenCreateWithHttpInfo(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxPublicTokenCreateValidateBeforeCall(sandboxPublicTokenCreateRequest, null);
        Type localVarReturnType = new TypeToken<SandboxPublicTokenCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a test Item (asynchronously)
     * Use the &#x60;/sandbox/public_token/create&#x60; endpoint to create a valid &#x60;public_token&#x60;  for an arbitrary institution ID, initial products, and test credentials. The created &#x60;public_token&#x60; maps to a new Sandbox Item. You can then call &#x60;/item/public_token/exchange&#x60; to exchange the &#x60;public_token&#x60; for an &#x60;access_token&#x60; and perform all API actions. &#x60;/sandbox/public_token/create&#x60; can also be used with the [&#x60;user_custom&#x60; test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. &#x60;/sandbox/public_token/create&#x60; cannot be used with OAuth institutions.
     * @param sandboxPublicTokenCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxpublic_tokencreate">Create a test Item Documentation</a>
     */
    public okhttp3.Call sandboxPublicTokenCreateAsync(SandboxPublicTokenCreateRequest sandboxPublicTokenCreateRequest, final ApiCallback<SandboxPublicTokenCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxPublicTokenCreateValidateBeforeCall(sandboxPublicTokenCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxPublicTokenCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxTransferFireWebhook
     * @param sandboxTransferFireWebhookRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransferfire_webhook">Manually fire a Transfer webhook Documentation</a>
     */
    public okhttp3.Call sandboxTransferFireWebhookCall(SandboxTransferFireWebhookRequest sandboxTransferFireWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxTransferFireWebhookRequest;

        // create path and map variables
        String localVarPath = "/sandbox/transfer/fire_webhook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxTransferFireWebhookValidateBeforeCall(SandboxTransferFireWebhookRequest sandboxTransferFireWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxTransferFireWebhookRequest' is set
        if (sandboxTransferFireWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxTransferFireWebhookRequest' when calling sandboxTransferFireWebhook(Async)");
        }

        return sandboxTransferFireWebhookCall(sandboxTransferFireWebhookRequest, _callback);

    }

    /**
     * Manually fire a Transfer webhook
     * Use the &#x60;/sandbox/transfer/fire_webhook&#x60; endpoint to manually trigger a Transfer webhook in the Sandbox environment.
     * @param sandboxTransferFireWebhookRequest  (required)
     * @return SandboxTransferFireWebhookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransferfire_webhook">Manually fire a Transfer webhook Documentation</a>
     */
    public SandboxTransferFireWebhookResponse sandboxTransferFireWebhook(SandboxTransferFireWebhookRequest sandboxTransferFireWebhookRequest) throws ApiException {
        ApiResponse<SandboxTransferFireWebhookResponse> localVarResp = sandboxTransferFireWebhookWithHttpInfo(sandboxTransferFireWebhookRequest);
        return localVarResp.getData();
    }

    /**
     * Manually fire a Transfer webhook
     * Use the &#x60;/sandbox/transfer/fire_webhook&#x60; endpoint to manually trigger a Transfer webhook in the Sandbox environment.
     * @param sandboxTransferFireWebhookRequest  (required)
     * @return ApiResponse&lt;SandboxTransferFireWebhookResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransferfire_webhook">Manually fire a Transfer webhook Documentation</a>
     */
    public ApiResponse<SandboxTransferFireWebhookResponse> sandboxTransferFireWebhookWithHttpInfo(SandboxTransferFireWebhookRequest sandboxTransferFireWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxTransferFireWebhookValidateBeforeCall(sandboxTransferFireWebhookRequest, null);
        Type localVarReturnType = new TypeToken<SandboxTransferFireWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Manually fire a Transfer webhook (asynchronously)
     * Use the &#x60;/sandbox/transfer/fire_webhook&#x60; endpoint to manually trigger a Transfer webhook in the Sandbox environment.
     * @param sandboxTransferFireWebhookRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransferfire_webhook">Manually fire a Transfer webhook Documentation</a>
     */
    public okhttp3.Call sandboxTransferFireWebhookAsync(SandboxTransferFireWebhookRequest sandboxTransferFireWebhookRequest, final ApiCallback<SandboxTransferFireWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxTransferFireWebhookValidateBeforeCall(sandboxTransferFireWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxTransferFireWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxTransferRepaymentSimulate
     * @param sandboxTransferRepaymentSimulateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransferrepaymentsimulate">Trigger the creation of a repayment Documentation</a>
     */
    public okhttp3.Call sandboxTransferRepaymentSimulateCall(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxTransferRepaymentSimulateRequest;

        // create path and map variables
        String localVarPath = "/sandbox/transfer/repayment/simulate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxTransferRepaymentSimulateValidateBeforeCall(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxTransferRepaymentSimulateRequest' is set
        if (sandboxTransferRepaymentSimulateRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxTransferRepaymentSimulateRequest' when calling sandboxTransferRepaymentSimulate(Async)");
        }

        return sandboxTransferRepaymentSimulateCall(sandboxTransferRepaymentSimulateRequest, _callback);

    }

    /**
     * Trigger the creation of a repayment
     * Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
     * @param sandboxTransferRepaymentSimulateRequest  (required)
     * @return SandboxTransferRepaymentSimulateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransferrepaymentsimulate">Trigger the creation of a repayment Documentation</a>
     */
    public SandboxTransferRepaymentSimulateResponse sandboxTransferRepaymentSimulate(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest) throws ApiException {
        ApiResponse<SandboxTransferRepaymentSimulateResponse> localVarResp = sandboxTransferRepaymentSimulateWithHttpInfo(sandboxTransferRepaymentSimulateRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the creation of a repayment
     * Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
     * @param sandboxTransferRepaymentSimulateRequest  (required)
     * @return ApiResponse&lt;SandboxTransferRepaymentSimulateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransferrepaymentsimulate">Trigger the creation of a repayment Documentation</a>
     */
    public ApiResponse<SandboxTransferRepaymentSimulateResponse> sandboxTransferRepaymentSimulateWithHttpInfo(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxTransferRepaymentSimulateValidateBeforeCall(sandboxTransferRepaymentSimulateRequest, null);
        Type localVarReturnType = new TypeToken<SandboxTransferRepaymentSimulateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the creation of a repayment (asynchronously)
     * Use the &#x60;/sandbox/transfer/repayment/simulate&#x60; endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
     * @param sandboxTransferRepaymentSimulateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransferrepaymentsimulate">Trigger the creation of a repayment Documentation</a>
     */
    public okhttp3.Call sandboxTransferRepaymentSimulateAsync(SandboxTransferRepaymentSimulateRequest sandboxTransferRepaymentSimulateRequest, final ApiCallback<SandboxTransferRepaymentSimulateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxTransferRepaymentSimulateValidateBeforeCall(sandboxTransferRepaymentSimulateRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxTransferRepaymentSimulateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxTransferSimulate
     * @param sandboxTransferSimulateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfersimulate">Simulate a transfer event in Sandbox Documentation</a>
     */
    public okhttp3.Call sandboxTransferSimulateCall(SandboxTransferSimulateRequest sandboxTransferSimulateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxTransferSimulateRequest;

        // create path and map variables
        String localVarPath = "/sandbox/transfer/simulate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxTransferSimulateValidateBeforeCall(SandboxTransferSimulateRequest sandboxTransferSimulateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxTransferSimulateRequest' is set
        if (sandboxTransferSimulateRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxTransferSimulateRequest' when calling sandboxTransferSimulate(Async)");
        }

        return sandboxTransferSimulateCall(sandboxTransferSimulateRequest, _callback);

    }

    /**
     * Simulate a transfer event in Sandbox
     * Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @param sandboxTransferSimulateRequest  (required)
     * @return SandboxTransferSimulateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfersimulate">Simulate a transfer event in Sandbox Documentation</a>
     */
    public SandboxTransferSimulateResponse sandboxTransferSimulate(SandboxTransferSimulateRequest sandboxTransferSimulateRequest) throws ApiException {
        ApiResponse<SandboxTransferSimulateResponse> localVarResp = sandboxTransferSimulateWithHttpInfo(sandboxTransferSimulateRequest);
        return localVarResp.getData();
    }

    /**
     * Simulate a transfer event in Sandbox
     * Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @param sandboxTransferSimulateRequest  (required)
     * @return ApiResponse&lt;SandboxTransferSimulateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfersimulate">Simulate a transfer event in Sandbox Documentation</a>
     */
    public ApiResponse<SandboxTransferSimulateResponse> sandboxTransferSimulateWithHttpInfo(SandboxTransferSimulateRequest sandboxTransferSimulateRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxTransferSimulateValidateBeforeCall(sandboxTransferSimulateRequest, null);
        Type localVarReturnType = new TypeToken<SandboxTransferSimulateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate a transfer event in Sandbox (asynchronously)
     * Use the &#x60;/sandbox/transfer/simulate&#x60; endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as &#x60;/transfer/event/sync&#x60; or &#x60;/transfer/event/list&#x60;, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @param sandboxTransferSimulateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfersimulate">Simulate a transfer event in Sandbox Documentation</a>
     */
    public okhttp3.Call sandboxTransferSimulateAsync(SandboxTransferSimulateRequest sandboxTransferSimulateRequest, final ApiCallback<SandboxTransferSimulateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxTransferSimulateValidateBeforeCall(sandboxTransferSimulateRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxTransferSimulateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxTransferSweepSimulate
     * @param sandboxTransferSweepSimulateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfersweepsimulate">Simulate creating a sweep Documentation</a>
     */
    public okhttp3.Call sandboxTransferSweepSimulateCall(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxTransferSweepSimulateRequest;

        // create path and map variables
        String localVarPath = "/sandbox/transfer/sweep/simulate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxTransferSweepSimulateValidateBeforeCall(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxTransferSweepSimulateRequest' is set
        if (sandboxTransferSweepSimulateRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxTransferSweepSimulateRequest' when calling sandboxTransferSweepSimulate(Async)");
        }

        return sandboxTransferSweepSimulateCall(sandboxTransferSweepSimulateRequest, _callback);

    }

    /**
     * Simulate creating a sweep
     * Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;returned&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;return_swept&#x60;.
     * @param sandboxTransferSweepSimulateRequest  (required)
     * @return SandboxTransferSweepSimulateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfersweepsimulate">Simulate creating a sweep Documentation</a>
     */
    public SandboxTransferSweepSimulateResponse sandboxTransferSweepSimulate(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest) throws ApiException {
        ApiResponse<SandboxTransferSweepSimulateResponse> localVarResp = sandboxTransferSweepSimulateWithHttpInfo(sandboxTransferSweepSimulateRequest);
        return localVarResp.getData();
    }

    /**
     * Simulate creating a sweep
     * Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;returned&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;return_swept&#x60;.
     * @param sandboxTransferSweepSimulateRequest  (required)
     * @return ApiResponse&lt;SandboxTransferSweepSimulateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfersweepsimulate">Simulate creating a sweep Documentation</a>
     */
    public ApiResponse<SandboxTransferSweepSimulateResponse> sandboxTransferSweepSimulateWithHttpInfo(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxTransferSweepSimulateValidateBeforeCall(sandboxTransferSweepSimulateRequest, null);
        Type localVarReturnType = new TypeToken<SandboxTransferSweepSimulateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate creating a sweep (asynchronously)
     * Use the &#x60;/sandbox/transfer/sweep/simulate&#x60; endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all &#x60;posted&#x60; or &#x60;pending&#x60; transfers with a sweep status of &#x60;unswept&#x60; will become &#x60;swept&#x60;, and all &#x60;returned&#x60; transfers with a sweep status of &#x60;swept&#x60; will become &#x60;return_swept&#x60;.
     * @param sandboxTransferSweepSimulateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfersweepsimulate">Simulate creating a sweep Documentation</a>
     */
    public okhttp3.Call sandboxTransferSweepSimulateAsync(SandboxTransferSweepSimulateRequest sandboxTransferSweepSimulateRequest, final ApiCallback<SandboxTransferSweepSimulateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxTransferSweepSimulateValidateBeforeCall(sandboxTransferSweepSimulateRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxTransferSweepSimulateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxTransferTestClockAdvance
     * @param sandboxTransferTestClockAdvanceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfertest_clockadvance">Advance a test clock Documentation</a>
     */
    public okhttp3.Call sandboxTransferTestClockAdvanceCall(SandboxTransferTestClockAdvanceRequest sandboxTransferTestClockAdvanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxTransferTestClockAdvanceRequest;

        // create path and map variables
        String localVarPath = "/sandbox/transfer/test_clock/advance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxTransferTestClockAdvanceValidateBeforeCall(SandboxTransferTestClockAdvanceRequest sandboxTransferTestClockAdvanceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxTransferTestClockAdvanceRequest' is set
        if (sandboxTransferTestClockAdvanceRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxTransferTestClockAdvanceRequest' when calling sandboxTransferTestClockAdvance(Async)");
        }

        return sandboxTransferTestClockAdvanceCall(sandboxTransferTestClockAdvanceRequest, _callback);

    }

    /**
     * Advance a test clock
     * Use the &#x60;/sandbox/transfer/test_clock/advance&#x60; endpoint to advance a &#x60;test_clock&#x60; in the Sandbox environment.  A test clock object represents an independent timeline and has a &#x60;virtual_time&#x60; field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing &#x60;virtual_time&#x60;, but may never go back to a lower &#x60;virtual_time&#x60;.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed. For instance, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting &#x60;virtual_time&#x60; &#x3D; t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current &#x60;virtual_time&#x60; should be limited such that there are no more than 20 originations resulting from the advance operation on each &#x60;recurring_transfer&#x60; associated with the &#x60;test_clock&#x60;. For instance, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the &#x60;virtual_time&#x60; up to 80 weeks on each API call.
     * @param sandboxTransferTestClockAdvanceRequest  (required)
     * @return SandboxTransferTestClockAdvanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfertest_clockadvance">Advance a test clock Documentation</a>
     */
    public SandboxTransferTestClockAdvanceResponse sandboxTransferTestClockAdvance(SandboxTransferTestClockAdvanceRequest sandboxTransferTestClockAdvanceRequest) throws ApiException {
        ApiResponse<SandboxTransferTestClockAdvanceResponse> localVarResp = sandboxTransferTestClockAdvanceWithHttpInfo(sandboxTransferTestClockAdvanceRequest);
        return localVarResp.getData();
    }

    /**
     * Advance a test clock
     * Use the &#x60;/sandbox/transfer/test_clock/advance&#x60; endpoint to advance a &#x60;test_clock&#x60; in the Sandbox environment.  A test clock object represents an independent timeline and has a &#x60;virtual_time&#x60; field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing &#x60;virtual_time&#x60;, but may never go back to a lower &#x60;virtual_time&#x60;.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed. For instance, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting &#x60;virtual_time&#x60; &#x3D; t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current &#x60;virtual_time&#x60; should be limited such that there are no more than 20 originations resulting from the advance operation on each &#x60;recurring_transfer&#x60; associated with the &#x60;test_clock&#x60;. For instance, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the &#x60;virtual_time&#x60; up to 80 weeks on each API call.
     * @param sandboxTransferTestClockAdvanceRequest  (required)
     * @return ApiResponse&lt;SandboxTransferTestClockAdvanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfertest_clockadvance">Advance a test clock Documentation</a>
     */
    public ApiResponse<SandboxTransferTestClockAdvanceResponse> sandboxTransferTestClockAdvanceWithHttpInfo(SandboxTransferTestClockAdvanceRequest sandboxTransferTestClockAdvanceRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxTransferTestClockAdvanceValidateBeforeCall(sandboxTransferTestClockAdvanceRequest, null);
        Type localVarReturnType = new TypeToken<SandboxTransferTestClockAdvanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Advance a test clock (asynchronously)
     * Use the &#x60;/sandbox/transfer/test_clock/advance&#x60; endpoint to advance a &#x60;test_clock&#x60; in the Sandbox environment.  A test clock object represents an independent timeline and has a &#x60;virtual_time&#x60; field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing &#x60;virtual_time&#x60;, but may never go back to a lower &#x60;virtual_time&#x60;.  If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed. For instance, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting &#x60;virtual_time&#x60; &#x3D; t + 15 days, 2 new originations should be created, along with the webhook events.  The advancement of the test clock from its current &#x60;virtual_time&#x60; should be limited such that there are no more than 20 originations resulting from the advance operation on each &#x60;recurring_transfer&#x60; associated with the &#x60;test_clock&#x60;. For instance, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the &#x60;virtual_time&#x60; up to 80 weeks on each API call.
     * @param sandboxTransferTestClockAdvanceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfertest_clockadvance">Advance a test clock Documentation</a>
     */
    public okhttp3.Call sandboxTransferTestClockAdvanceAsync(SandboxTransferTestClockAdvanceRequest sandboxTransferTestClockAdvanceRequest, final ApiCallback<SandboxTransferTestClockAdvanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxTransferTestClockAdvanceValidateBeforeCall(sandboxTransferTestClockAdvanceRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxTransferTestClockAdvanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxTransferTestClockCreate
     * @param sandboxTransferTestClockCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfertest_clockcreate">Create a test clock Documentation</a>
     */
    public okhttp3.Call sandboxTransferTestClockCreateCall(SandboxTransferTestClockCreateRequest sandboxTransferTestClockCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxTransferTestClockCreateRequest;

        // create path and map variables
        String localVarPath = "/sandbox/transfer/test_clock/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxTransferTestClockCreateValidateBeforeCall(SandboxTransferTestClockCreateRequest sandboxTransferTestClockCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxTransferTestClockCreateRequest' is set
        if (sandboxTransferTestClockCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxTransferTestClockCreateRequest' when calling sandboxTransferTestClockCreate(Async)");
        }

        return sandboxTransferTestClockCreateCall(sandboxTransferTestClockCreateRequest, _callback);

    }

    /**
     * Create a test clock
     * Use the &#x60;/sandbox/transfer/test_clock/create&#x60; endpoint to create a &#x60;test_clock&#x60; in the Sandbox environment.  A test clock object represents an independent timeline and has a &#x60;virtual_time&#x60; field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
     * @param sandboxTransferTestClockCreateRequest  (required)
     * @return SandboxTransferTestClockCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfertest_clockcreate">Create a test clock Documentation</a>
     */
    public SandboxTransferTestClockCreateResponse sandboxTransferTestClockCreate(SandboxTransferTestClockCreateRequest sandboxTransferTestClockCreateRequest) throws ApiException {
        ApiResponse<SandboxTransferTestClockCreateResponse> localVarResp = sandboxTransferTestClockCreateWithHttpInfo(sandboxTransferTestClockCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a test clock
     * Use the &#x60;/sandbox/transfer/test_clock/create&#x60; endpoint to create a &#x60;test_clock&#x60; in the Sandbox environment.  A test clock object represents an independent timeline and has a &#x60;virtual_time&#x60; field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
     * @param sandboxTransferTestClockCreateRequest  (required)
     * @return ApiResponse&lt;SandboxTransferTestClockCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfertest_clockcreate">Create a test clock Documentation</a>
     */
    public ApiResponse<SandboxTransferTestClockCreateResponse> sandboxTransferTestClockCreateWithHttpInfo(SandboxTransferTestClockCreateRequest sandboxTransferTestClockCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxTransferTestClockCreateValidateBeforeCall(sandboxTransferTestClockCreateRequest, null);
        Type localVarReturnType = new TypeToken<SandboxTransferTestClockCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a test clock (asynchronously)
     * Use the &#x60;/sandbox/transfer/test_clock/create&#x60; endpoint to create a &#x60;test_clock&#x60; in the Sandbox environment.  A test clock object represents an independent timeline and has a &#x60;virtual_time&#x60; field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.  A test clock can be associated with up to 5 recurring transfers.
     * @param sandboxTransferTestClockCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfertest_clockcreate">Create a test clock Documentation</a>
     */
    public okhttp3.Call sandboxTransferTestClockCreateAsync(SandboxTransferTestClockCreateRequest sandboxTransferTestClockCreateRequest, final ApiCallback<SandboxTransferTestClockCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxTransferTestClockCreateValidateBeforeCall(sandboxTransferTestClockCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxTransferTestClockCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxTransferTestClockGet
     * @param sandboxTransferTestClockGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfertest_clockget">Get a test clock Documentation</a>
     */
    public okhttp3.Call sandboxTransferTestClockGetCall(SandboxTransferTestClockGetRequest sandboxTransferTestClockGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxTransferTestClockGetRequest;

        // create path and map variables
        String localVarPath = "/sandbox/transfer/test_clock/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxTransferTestClockGetValidateBeforeCall(SandboxTransferTestClockGetRequest sandboxTransferTestClockGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxTransferTestClockGetRequest' is set
        if (sandboxTransferTestClockGetRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxTransferTestClockGetRequest' when calling sandboxTransferTestClockGet(Async)");
        }

        return sandboxTransferTestClockGetCall(sandboxTransferTestClockGetRequest, _callback);

    }

    /**
     * Get a test clock
     * Use the &#x60;/sandbox/transfer/test_clock/get&#x60; endpoint to get a &#x60;test_clock&#x60; in the Sandbox environment.
     * @param sandboxTransferTestClockGetRequest  (required)
     * @return SandboxTransferTestClockGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfertest_clockget">Get a test clock Documentation</a>
     */
    public SandboxTransferTestClockGetResponse sandboxTransferTestClockGet(SandboxTransferTestClockGetRequest sandboxTransferTestClockGetRequest) throws ApiException {
        ApiResponse<SandboxTransferTestClockGetResponse> localVarResp = sandboxTransferTestClockGetWithHttpInfo(sandboxTransferTestClockGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get a test clock
     * Use the &#x60;/sandbox/transfer/test_clock/get&#x60; endpoint to get a &#x60;test_clock&#x60; in the Sandbox environment.
     * @param sandboxTransferTestClockGetRequest  (required)
     * @return ApiResponse&lt;SandboxTransferTestClockGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfertest_clockget">Get a test clock Documentation</a>
     */
    public ApiResponse<SandboxTransferTestClockGetResponse> sandboxTransferTestClockGetWithHttpInfo(SandboxTransferTestClockGetRequest sandboxTransferTestClockGetRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxTransferTestClockGetValidateBeforeCall(sandboxTransferTestClockGetRequest, null);
        Type localVarReturnType = new TypeToken<SandboxTransferTestClockGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a test clock (asynchronously)
     * Use the &#x60;/sandbox/transfer/test_clock/get&#x60; endpoint to get a &#x60;test_clock&#x60; in the Sandbox environment.
     * @param sandboxTransferTestClockGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfertest_clockget">Get a test clock Documentation</a>
     */
    public okhttp3.Call sandboxTransferTestClockGetAsync(SandboxTransferTestClockGetRequest sandboxTransferTestClockGetRequest, final ApiCallback<SandboxTransferTestClockGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxTransferTestClockGetValidateBeforeCall(sandboxTransferTestClockGetRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxTransferTestClockGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sandboxTransferTestClockList
     * @param sandboxTransferTestClockListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfertest_clocklist">List test clocks Documentation</a>
     */
    public okhttp3.Call sandboxTransferTestClockListCall(SandboxTransferTestClockListRequest sandboxTransferTestClockListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxTransferTestClockListRequest;

        // create path and map variables
        String localVarPath = "/sandbox/transfer/test_clock/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sandboxTransferTestClockListValidateBeforeCall(SandboxTransferTestClockListRequest sandboxTransferTestClockListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxTransferTestClockListRequest' is set
        if (sandboxTransferTestClockListRequest == null) {
            throw new ApiException("Missing the required parameter 'sandboxTransferTestClockListRequest' when calling sandboxTransferTestClockList(Async)");
        }

        return sandboxTransferTestClockListCall(sandboxTransferTestClockListRequest, _callback);

    }

    /**
     * List test clocks
     * Use the &#x60;/sandbox/transfer/test_clock/list&#x60; endpoint to see a list of all your test clocks in the Sandbox environment, by ascending &#x60;virtual_time&#x60;. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired test clocks.
     * @param sandboxTransferTestClockListRequest  (required)
     * @return SandboxTransferTestClockListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfertest_clocklist">List test clocks Documentation</a>
     */
    public SandboxTransferTestClockListResponse sandboxTransferTestClockList(SandboxTransferTestClockListRequest sandboxTransferTestClockListRequest) throws ApiException {
        ApiResponse<SandboxTransferTestClockListResponse> localVarResp = sandboxTransferTestClockListWithHttpInfo(sandboxTransferTestClockListRequest);
        return localVarResp.getData();
    }

    /**
     * List test clocks
     * Use the &#x60;/sandbox/transfer/test_clock/list&#x60; endpoint to see a list of all your test clocks in the Sandbox environment, by ascending &#x60;virtual_time&#x60;. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired test clocks.
     * @param sandboxTransferTestClockListRequest  (required)
     * @return ApiResponse&lt;SandboxTransferTestClockListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfertest_clocklist">List test clocks Documentation</a>
     */
    public ApiResponse<SandboxTransferTestClockListResponse> sandboxTransferTestClockListWithHttpInfo(SandboxTransferTestClockListRequest sandboxTransferTestClockListRequest) throws ApiException {
        okhttp3.Call localVarCall = sandboxTransferTestClockListValidateBeforeCall(sandboxTransferTestClockListRequest, null);
        Type localVarReturnType = new TypeToken<SandboxTransferTestClockListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List test clocks (asynchronously)
     * Use the &#x60;/sandbox/transfer/test_clock/list&#x60; endpoint to see a list of all your test clocks in the Sandbox environment, by ascending &#x60;virtual_time&#x60;. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired test clocks.
     * @param sandboxTransferTestClockListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/sandbox/#sandboxtransfertest_clocklist">List test clocks Documentation</a>
     */
    public okhttp3.Call sandboxTransferTestClockListAsync(SandboxTransferTestClockListRequest sandboxTransferTestClockListRequest, final ApiCallback<SandboxTransferTestClockListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sandboxTransferTestClockListValidateBeforeCall(sandboxTransferTestClockListRequest, _callback);
        Type localVarReturnType = new TypeToken<SandboxTransferTestClockListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalDecisionReport
     * @param signalDecisionReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/signal#signaldecisionreport">Report whether you initiated an ACH transaction Documentation</a>
     */
    public okhttp3.Call signalDecisionReportCall(SignalDecisionReportRequest signalDecisionReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signalDecisionReportRequest;

        // create path and map variables
        String localVarPath = "/signal/decision/report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalDecisionReportValidateBeforeCall(SignalDecisionReportRequest signalDecisionReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signalDecisionReportRequest' is set
        if (signalDecisionReportRequest == null) {
            throw new ApiException("Missing the required parameter 'signalDecisionReportRequest' when calling signalDecisionReport(Async)");
        }

        return signalDecisionReportCall(signalDecisionReportRequest, _callback);

    }

    /**
     * Report whether you initiated an ACH transaction
     * After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an [&#x60;INVALID_FIELD&#x60;](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for &#x60;initiated&#x60;.
     * @param signalDecisionReportRequest  (required)
     * @return SignalDecisionReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/signal#signaldecisionreport">Report whether you initiated an ACH transaction Documentation</a>
     */
    public SignalDecisionReportResponse signalDecisionReport(SignalDecisionReportRequest signalDecisionReportRequest) throws ApiException {
        ApiResponse<SignalDecisionReportResponse> localVarResp = signalDecisionReportWithHttpInfo(signalDecisionReportRequest);
        return localVarResp.getData();
    }

    /**
     * Report whether you initiated an ACH transaction
     * After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an [&#x60;INVALID_FIELD&#x60;](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for &#x60;initiated&#x60;.
     * @param signalDecisionReportRequest  (required)
     * @return ApiResponse&lt;SignalDecisionReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/signal#signaldecisionreport">Report whether you initiated an ACH transaction Documentation</a>
     */
    public ApiResponse<SignalDecisionReportResponse> signalDecisionReportWithHttpInfo(SignalDecisionReportRequest signalDecisionReportRequest) throws ApiException {
        okhttp3.Call localVarCall = signalDecisionReportValidateBeforeCall(signalDecisionReportRequest, null);
        Type localVarReturnType = new TypeToken<SignalDecisionReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Report whether you initiated an ACH transaction (asynchronously)
     * After calling &#x60;/signal/evaluate&#x60;, call &#x60;/signal/decision/report&#x60; to report whether the transaction was initiated. This endpoint will return an [&#x60;INVALID_FIELD&#x60;](/docs/errors/invalid-request/#invalid_field) error if called a second time with a different value for &#x60;initiated&#x60;.
     * @param signalDecisionReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/signal#signaldecisionreport">Report whether you initiated an ACH transaction Documentation</a>
     */
    public okhttp3.Call signalDecisionReportAsync(SignalDecisionReportRequest signalDecisionReportRequest, final ApiCallback<SignalDecisionReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalDecisionReportValidateBeforeCall(signalDecisionReportRequest, _callback);
        Type localVarReturnType = new TypeToken<SignalDecisionReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalEvaluate
     * @param signalEvaluateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/signal#signalevaluate">Evaluate a planned ACH transaction Documentation</a>
     */
    public okhttp3.Call signalEvaluateCall(SignalEvaluateRequest signalEvaluateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signalEvaluateRequest;

        // create path and map variables
        String localVarPath = "/signal/evaluate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalEvaluateValidateBeforeCall(SignalEvaluateRequest signalEvaluateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signalEvaluateRequest' is set
        if (signalEvaluateRequest == null) {
            throw new ApiException("Missing the required parameter 'signalEvaluateRequest' when calling signalEvaluate(Async)");
        }

        return signalEvaluateCall(signalEvaluateRequest, _callback);

    }

    /**
     * Evaluate a planned ACH transaction
     * Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
     * @param signalEvaluateRequest  (required)
     * @return SignalEvaluateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/signal#signalevaluate">Evaluate a planned ACH transaction Documentation</a>
     */
    public SignalEvaluateResponse signalEvaluate(SignalEvaluateRequest signalEvaluateRequest) throws ApiException {
        ApiResponse<SignalEvaluateResponse> localVarResp = signalEvaluateWithHttpInfo(signalEvaluateRequest);
        return localVarResp.getData();
    }

    /**
     * Evaluate a planned ACH transaction
     * Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
     * @param signalEvaluateRequest  (required)
     * @return ApiResponse&lt;SignalEvaluateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/signal#signalevaluate">Evaluate a planned ACH transaction Documentation</a>
     */
    public ApiResponse<SignalEvaluateResponse> signalEvaluateWithHttpInfo(SignalEvaluateRequest signalEvaluateRequest) throws ApiException {
        okhttp3.Call localVarCall = signalEvaluateValidateBeforeCall(signalEvaluateRequest, null);
        Type localVarReturnType = new TypeToken<SignalEvaluateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Evaluate a planned ACH transaction (asynchronously)
     * Use &#x60;/signal/evaluate&#x60; to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If &#x60;/signal/evaluate&#x60; is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).  Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
     * @param signalEvaluateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/signal#signalevaluate">Evaluate a planned ACH transaction Documentation</a>
     */
    public okhttp3.Call signalEvaluateAsync(SignalEvaluateRequest signalEvaluateRequest, final ApiCallback<SignalEvaluateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalEvaluateValidateBeforeCall(signalEvaluateRequest, _callback);
        Type localVarReturnType = new TypeToken<SignalEvaluateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalPrepare
     * @param signalPrepareRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/signal#signalprepare">Opt-in an Item to Signal Documentation</a>
     */
    public okhttp3.Call signalPrepareCall(SignalPrepareRequest signalPrepareRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signalPrepareRequest;

        // create path and map variables
        String localVarPath = "/signal/prepare";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalPrepareValidateBeforeCall(SignalPrepareRequest signalPrepareRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signalPrepareRequest' is set
        if (signalPrepareRequest == null) {
            throw new ApiException("Missing the required parameter 'signalPrepareRequest' when calling signalPrepare(Async)");
        }

        return signalPrepareCall(signalPrepareRequest, _callback);

    }

    /**
     * Opt-in an Item to Signal
     * When Link is not initialized with Signal, call &#x60;/signal/prepare&#x60; to opt-in that Item to the Signal data collection process, developing a Signal score.  If you are using other Plaid products after Link, e.g. Identity or Assets, call &#x60;/signal/prepare&#x60; after those product calls are complete.  Example flow: Link is initialized with Auth, call &#x60;/auth/get&#x60; for the account and routing number, call &#x60;/identity/get&#x60; to retrieve bank ownership details, then call &#x60;/signal/prepare&#x60; to begin Signal data collection. Later, once you have obtained details about the proposed transaction from the user, call &#x60;/signal/evaluate&#x60; for a Signal score. For more information please see [Recommendations for initializing Link with specific product combinations](https://www.plaid.com/docs/link/initializing-products/#recommendations-for-initializing-link-with-specific-product-combinations).
     * @param signalPrepareRequest  (required)
     * @return SignalPrepareResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/signal#signalprepare">Opt-in an Item to Signal Documentation</a>
     */
    public SignalPrepareResponse signalPrepare(SignalPrepareRequest signalPrepareRequest) throws ApiException {
        ApiResponse<SignalPrepareResponse> localVarResp = signalPrepareWithHttpInfo(signalPrepareRequest);
        return localVarResp.getData();
    }

    /**
     * Opt-in an Item to Signal
     * When Link is not initialized with Signal, call &#x60;/signal/prepare&#x60; to opt-in that Item to the Signal data collection process, developing a Signal score.  If you are using other Plaid products after Link, e.g. Identity or Assets, call &#x60;/signal/prepare&#x60; after those product calls are complete.  Example flow: Link is initialized with Auth, call &#x60;/auth/get&#x60; for the account and routing number, call &#x60;/identity/get&#x60; to retrieve bank ownership details, then call &#x60;/signal/prepare&#x60; to begin Signal data collection. Later, once you have obtained details about the proposed transaction from the user, call &#x60;/signal/evaluate&#x60; for a Signal score. For more information please see [Recommendations for initializing Link with specific product combinations](https://www.plaid.com/docs/link/initializing-products/#recommendations-for-initializing-link-with-specific-product-combinations).
     * @param signalPrepareRequest  (required)
     * @return ApiResponse&lt;SignalPrepareResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/signal#signalprepare">Opt-in an Item to Signal Documentation</a>
     */
    public ApiResponse<SignalPrepareResponse> signalPrepareWithHttpInfo(SignalPrepareRequest signalPrepareRequest) throws ApiException {
        okhttp3.Call localVarCall = signalPrepareValidateBeforeCall(signalPrepareRequest, null);
        Type localVarReturnType = new TypeToken<SignalPrepareResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Opt-in an Item to Signal (asynchronously)
     * When Link is not initialized with Signal, call &#x60;/signal/prepare&#x60; to opt-in that Item to the Signal data collection process, developing a Signal score.  If you are using other Plaid products after Link, e.g. Identity or Assets, call &#x60;/signal/prepare&#x60; after those product calls are complete.  Example flow: Link is initialized with Auth, call &#x60;/auth/get&#x60; for the account and routing number, call &#x60;/identity/get&#x60; to retrieve bank ownership details, then call &#x60;/signal/prepare&#x60; to begin Signal data collection. Later, once you have obtained details about the proposed transaction from the user, call &#x60;/signal/evaluate&#x60; for a Signal score. For more information please see [Recommendations for initializing Link with specific product combinations](https://www.plaid.com/docs/link/initializing-products/#recommendations-for-initializing-link-with-specific-product-combinations).
     * @param signalPrepareRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/signal#signalprepare">Opt-in an Item to Signal Documentation</a>
     */
    public okhttp3.Call signalPrepareAsync(SignalPrepareRequest signalPrepareRequest, final ApiCallback<SignalPrepareResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalPrepareValidateBeforeCall(signalPrepareRequest, _callback);
        Type localVarReturnType = new TypeToken<SignalPrepareResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signalReturnReport
     * @param signalReturnReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/signal#signalreturnreport">Report a return for an ACH transaction Documentation</a>
     */
    public okhttp3.Call signalReturnReportCall(SignalReturnReportRequest signalReturnReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signalReturnReportRequest;

        // create path and map variables
        String localVarPath = "/signal/return/report";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signalReturnReportValidateBeforeCall(SignalReturnReportRequest signalReturnReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signalReturnReportRequest' is set
        if (signalReturnReportRequest == null) {
            throw new ApiException("Missing the required parameter 'signalReturnReportRequest' when calling signalReturnReport(Async)");
        }

        return signalReturnReportCall(signalReturnReportRequest, _callback);

    }

    /**
     * Report a return for an ACH transaction
     * Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     * @param signalReturnReportRequest  (required)
     * @return SignalReturnReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/signal#signalreturnreport">Report a return for an ACH transaction Documentation</a>
     */
    public SignalReturnReportResponse signalReturnReport(SignalReturnReportRequest signalReturnReportRequest) throws ApiException {
        ApiResponse<SignalReturnReportResponse> localVarResp = signalReturnReportWithHttpInfo(signalReturnReportRequest);
        return localVarResp.getData();
    }

    /**
     * Report a return for an ACH transaction
     * Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     * @param signalReturnReportRequest  (required)
     * @return ApiResponse&lt;SignalReturnReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/signal#signalreturnreport">Report a return for an ACH transaction Documentation</a>
     */
    public ApiResponse<SignalReturnReportResponse> signalReturnReportWithHttpInfo(SignalReturnReportRequest signalReturnReportRequest) throws ApiException {
        okhttp3.Call localVarCall = signalReturnReportValidateBeforeCall(signalReturnReportRequest, null);
        Type localVarReturnType = new TypeToken<SignalReturnReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Report a return for an ACH transaction (asynchronously)
     * Call the &#x60;/signal/return/report&#x60; endpoint to report a returned transaction that was previously sent to the &#x60;/signal/evaluate&#x60; endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     * @param signalReturnReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/signal#signalreturnreport">Report a return for an ACH transaction Documentation</a>
     */
    public okhttp3.Call signalReturnReportAsync(SignalReturnReportRequest signalReturnReportRequest, final ApiCallback<SignalReturnReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = signalReturnReportValidateBeforeCall(signalReturnReportRequest, _callback);
        Type localVarReturnType = new TypeToken<SignalReturnReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsEnhance
     * @param transactionsEnhanceGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsEnhanceCall(TransactionsEnhanceGetRequest transactionsEnhanceGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionsEnhanceGetRequest;

        // create path and map variables
        String localVarPath = "/beta/transactions/v1/enhance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsEnhanceValidateBeforeCall(TransactionsEnhanceGetRequest transactionsEnhanceGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionsEnhanceGetRequest' is set
        if (transactionsEnhanceGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionsEnhanceGetRequest' when calling transactionsEnhance(Async)");
        }

        return transactionsEnhanceCall(transactionsEnhanceGetRequest, _callback);

    }

    /**
     * enhance locally-held transaction data
     * The &#x60;/beta/transactions/v1/enhance&#x60; endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
     * @param transactionsEnhanceGetRequest  (required)
     * @return TransactionsEnhanceGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public TransactionsEnhanceGetResponse transactionsEnhance(TransactionsEnhanceGetRequest transactionsEnhanceGetRequest) throws ApiException {
        ApiResponse<TransactionsEnhanceGetResponse> localVarResp = transactionsEnhanceWithHttpInfo(transactionsEnhanceGetRequest);
        return localVarResp.getData();
    }

    /**
     * enhance locally-held transaction data
     * The &#x60;/beta/transactions/v1/enhance&#x60; endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
     * @param transactionsEnhanceGetRequest  (required)
     * @return ApiResponse&lt;TransactionsEnhanceGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionsEnhanceGetResponse> transactionsEnhanceWithHttpInfo(TransactionsEnhanceGetRequest transactionsEnhanceGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionsEnhanceValidateBeforeCall(transactionsEnhanceGetRequest, null);
        Type localVarReturnType = new TypeToken<TransactionsEnhanceGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * enhance locally-held transaction data (asynchronously)
     * The &#x60;/beta/transactions/v1/enhance&#x60; endpoint enriches raw transaction data provided directly by clients.  The product is currently in beta.
     * @param transactionsEnhanceGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsEnhanceAsync(TransactionsEnhanceGetRequest transactionsEnhanceGetRequest, final ApiCallback<TransactionsEnhanceGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsEnhanceValidateBeforeCall(transactionsEnhanceGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionsEnhanceGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsEnrich
     * @param transactionsEnrichGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/enrich/#transactionsenrich">Enrich locally-held transaction data Documentation</a>
     */
    public okhttp3.Call transactionsEnrichCall(TransactionsEnrichGetRequest transactionsEnrichGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionsEnrichGetRequest;

        // create path and map variables
        String localVarPath = "/transactions/enrich";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsEnrichValidateBeforeCall(TransactionsEnrichGetRequest transactionsEnrichGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionsEnrichGetRequest' is set
        if (transactionsEnrichGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionsEnrichGetRequest' when calling transactionsEnrich(Async)");
        }

        return transactionsEnrichCall(transactionsEnrichGetRequest, _callback);

    }

    /**
     * Enrich locally-held transaction data
     * The &#x60;/transactions/enrich&#x60; endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.  To request access to Enrich, reach out to your Plaid point of contact or send a note to enrich-feedback@plaid.com
     * @param transactionsEnrichGetRequest  (required)
     * @return TransactionsEnrichGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/enrich/#transactionsenrich">Enrich locally-held transaction data Documentation</a>
     */
    public TransactionsEnrichGetResponse transactionsEnrich(TransactionsEnrichGetRequest transactionsEnrichGetRequest) throws ApiException {
        ApiResponse<TransactionsEnrichGetResponse> localVarResp = transactionsEnrichWithHttpInfo(transactionsEnrichGetRequest);
        return localVarResp.getData();
    }

    /**
     * Enrich locally-held transaction data
     * The &#x60;/transactions/enrich&#x60; endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.  To request access to Enrich, reach out to your Plaid point of contact or send a note to enrich-feedback@plaid.com
     * @param transactionsEnrichGetRequest  (required)
     * @return ApiResponse&lt;TransactionsEnrichGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/enrich/#transactionsenrich">Enrich locally-held transaction data Documentation</a>
     */
    public ApiResponse<TransactionsEnrichGetResponse> transactionsEnrichWithHttpInfo(TransactionsEnrichGetRequest transactionsEnrichGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionsEnrichValidateBeforeCall(transactionsEnrichGetRequest, null);
        Type localVarReturnType = new TypeToken<TransactionsEnrichGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enrich locally-held transaction data (asynchronously)
     * The &#x60;/transactions/enrich&#x60; endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.  To request access to Enrich, reach out to your Plaid point of contact or send a note to enrich-feedback@plaid.com
     * @param transactionsEnrichGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/enrich/#transactionsenrich">Enrich locally-held transaction data Documentation</a>
     */
    public okhttp3.Call transactionsEnrichAsync(TransactionsEnrichGetRequest transactionsEnrichGetRequest, final ApiCallback<TransactionsEnrichGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsEnrichValidateBeforeCall(transactionsEnrichGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionsEnrichGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsGet
     * @param transactionsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#transactionsget">Get transaction data Documentation</a>
     */
    public okhttp3.Call transactionsGetCall(TransactionsGetRequest transactionsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionsGetRequest;

        // create path and map variables
        String localVarPath = "/transactions/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsGetValidateBeforeCall(TransactionsGetRequest transactionsGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionsGetRequest' is set
        if (transactionsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionsGetRequest' when calling transactionsGet(Async)");
        }

        return transactionsGetCall(transactionsGetRequest, _callback);

    }

    /**
     * Get transaction data
     * The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
     * @param transactionsGetRequest  (required)
     * @return TransactionsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#transactionsget">Get transaction data Documentation</a>
     */
    public TransactionsGetResponse transactionsGet(TransactionsGetRequest transactionsGetRequest) throws ApiException {
        ApiResponse<TransactionsGetResponse> localVarResp = transactionsGetWithHttpInfo(transactionsGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get transaction data
     * The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
     * @param transactionsGetRequest  (required)
     * @return ApiResponse&lt;TransactionsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#transactionsget">Get transaction data Documentation</a>
     */
    public ApiResponse<TransactionsGetResponse> transactionsGetWithHttpInfo(TransactionsGetRequest transactionsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionsGetValidateBeforeCall(transactionsGetRequest, null);
        Type localVarReturnType = new TypeToken<TransactionsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transaction data (asynchronously)
     * The &#x60;/transactions/get&#x60; endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in &#x60;/transactions/get&#x60;.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the &#x60;count&#x60; and &#x60;offset&#x60; parameters in conjunction with the &#x60;total_transactions&#x60; response body field to fetch all available transactions.  Data returned by &#x60;/transactions/get&#x60; will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the &#x60;/transactions/refresh&#x60; endpoint.  Note that data may not be immediately available to &#x60;/transactions/get&#x60;. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with &#x60;transactions&#x60;, or upon the first call to &#x60;/transactions/get&#x60;, if it wasn&#39;t. To be alerted when transaction data is ready to be fetched, listen for the [&#x60;INITIAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#initial_update) and [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when &#x60;/transactions/get&#x60; is called, it will return a &#x60;PRODUCT_NOT_READY&#x60; error.
     * @param transactionsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#transactionsget">Get transaction data Documentation</a>
     */
    public okhttp3.Call transactionsGetAsync(TransactionsGetRequest transactionsGetRequest, final ApiCallback<TransactionsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsGetValidateBeforeCall(transactionsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsRecurringGet
     * @param transactionsRecurringGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#transactionsrecurringget">Fetch recurring transaction streams Documentation</a>
     */
    public okhttp3.Call transactionsRecurringGetCall(TransactionsRecurringGetRequest transactionsRecurringGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionsRecurringGetRequest;

        // create path and map variables
        String localVarPath = "/transactions/recurring/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsRecurringGetValidateBeforeCall(TransactionsRecurringGetRequest transactionsRecurringGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionsRecurringGetRequest' is set
        if (transactionsRecurringGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionsRecurringGetRequest' when calling transactionsRecurringGet(Async)");
        }

        return transactionsRecurringGetCall(transactionsRecurringGetRequest, _callback);

    }

    /**
     * Fetch recurring transaction streams
     * The &#x60;/transactions/recurring/get&#x60; endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in &#x60;/link/token/create&#x60;; or after Link, by calling &#x60;/transactions/get&#x60; or &#x60;/transactions/sync&#x60;). Once all historical transactions have been fetched, call &#x60;/transactions/recurring/get&#x60; to receive the Recurring Transactions streams and subscribe to the [&#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using &#x60;/transactions/sync&#x60; listen for the [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the &#x60;historical_update_complete&#x60; field in the payload is &#x60;true&#x60;. If using &#x60;/transactions/get&#x60;, listen for the [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call &#x60;/transactions/recurring/get&#x60; endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [&#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
     * @param transactionsRecurringGetRequest  (required)
     * @return TransactionsRecurringGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#transactionsrecurringget">Fetch recurring transaction streams Documentation</a>
     */
    public TransactionsRecurringGetResponse transactionsRecurringGet(TransactionsRecurringGetRequest transactionsRecurringGetRequest) throws ApiException {
        ApiResponse<TransactionsRecurringGetResponse> localVarResp = transactionsRecurringGetWithHttpInfo(transactionsRecurringGetRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch recurring transaction streams
     * The &#x60;/transactions/recurring/get&#x60; endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in &#x60;/link/token/create&#x60;; or after Link, by calling &#x60;/transactions/get&#x60; or &#x60;/transactions/sync&#x60;). Once all historical transactions have been fetched, call &#x60;/transactions/recurring/get&#x60; to receive the Recurring Transactions streams and subscribe to the [&#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using &#x60;/transactions/sync&#x60; listen for the [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the &#x60;historical_update_complete&#x60; field in the payload is &#x60;true&#x60;. If using &#x60;/transactions/get&#x60;, listen for the [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call &#x60;/transactions/recurring/get&#x60; endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [&#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
     * @param transactionsRecurringGetRequest  (required)
     * @return ApiResponse&lt;TransactionsRecurringGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#transactionsrecurringget">Fetch recurring transaction streams Documentation</a>
     */
    public ApiResponse<TransactionsRecurringGetResponse> transactionsRecurringGetWithHttpInfo(TransactionsRecurringGetRequest transactionsRecurringGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionsRecurringGetValidateBeforeCall(transactionsRecurringGetRequest, null);
        Type localVarReturnType = new TypeToken<TransactionsRecurringGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch recurring transaction streams (asynchronously)
     * The &#x60;/transactions/recurring/get&#x60; endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.  This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.  This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in &#x60;/link/token/create&#x60;; or after Link, by calling &#x60;/transactions/get&#x60; or &#x60;/transactions/sync&#x60;). Once all historical transactions have been fetched, call &#x60;/transactions/recurring/get&#x60; to receive the Recurring Transactions streams and subscribe to the [&#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using &#x60;/transactions/sync&#x60; listen for the [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the &#x60;historical_update_complete&#x60; field in the payload is &#x60;true&#x60;. If using &#x60;/transactions/get&#x60;, listen for the [&#x60;HISTORICAL_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.  After the initial call, you can call &#x60;/transactions/recurring/get&#x60; endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [&#x60;RECURRING_TRANSACTIONS_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
     * @param transactionsRecurringGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#transactionsrecurringget">Fetch recurring transaction streams Documentation</a>
     */
    public okhttp3.Call transactionsRecurringGetAsync(TransactionsRecurringGetRequest transactionsRecurringGetRequest, final ApiCallback<TransactionsRecurringGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsRecurringGetValidateBeforeCall(transactionsRecurringGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionsRecurringGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsRefresh
     * @param transactionsRefreshRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#transactionsrefresh">Refresh transaction data Documentation</a>
     */
    public okhttp3.Call transactionsRefreshCall(TransactionsRefreshRequest transactionsRefreshRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionsRefreshRequest;

        // create path and map variables
        String localVarPath = "/transactions/refresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsRefreshValidateBeforeCall(TransactionsRefreshRequest transactionsRefreshRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionsRefreshRequest' is set
        if (transactionsRefreshRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionsRefreshRequest' when calling transactionsRefresh(Async)");
        }

        return transactionsRefreshCall(transactionsRefreshRequest, _callback);

    }

    /**
     * Refresh transaction data
     * &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: for &#x60;/transactions/sync&#x60; users, [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both &#x60;/transactions/sync&#x60; and &#x60;/transactions/get&#x60;, [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60; or &#x60;/transactions/sync&#x60;. Note that the &#x60;/transactions/refresh&#x60; endpoint is not supported for Capital One (&#x60;ins_128026&#x60;) and will result in a &#x60;PRODUCT_NOT_SUPPORTED&#x60; error if called on an Item from that institution.  &#x60;/transactions/refresh&#x60; is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     * @param transactionsRefreshRequest  (required)
     * @return TransactionsRefreshResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#transactionsrefresh">Refresh transaction data Documentation</a>
     */
    public TransactionsRefreshResponse transactionsRefresh(TransactionsRefreshRequest transactionsRefreshRequest) throws ApiException {
        ApiResponse<TransactionsRefreshResponse> localVarResp = transactionsRefreshWithHttpInfo(transactionsRefreshRequest);
        return localVarResp.getData();
    }

    /**
     * Refresh transaction data
     * &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: for &#x60;/transactions/sync&#x60; users, [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both &#x60;/transactions/sync&#x60; and &#x60;/transactions/get&#x60;, [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60; or &#x60;/transactions/sync&#x60;. Note that the &#x60;/transactions/refresh&#x60; endpoint is not supported for Capital One (&#x60;ins_128026&#x60;) and will result in a &#x60;PRODUCT_NOT_SUPPORTED&#x60; error if called on an Item from that institution.  &#x60;/transactions/refresh&#x60; is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     * @param transactionsRefreshRequest  (required)
     * @return ApiResponse&lt;TransactionsRefreshResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#transactionsrefresh">Refresh transaction data Documentation</a>
     */
    public ApiResponse<TransactionsRefreshResponse> transactionsRefreshWithHttpInfo(TransactionsRefreshRequest transactionsRefreshRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionsRefreshValidateBeforeCall(transactionsRefreshRequest, null);
        Type localVarReturnType = new TypeToken<TransactionsRefreshResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh transaction data (asynchronously)
     * &#x60;/transactions/refresh&#x60; is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling &#x60;/transactions/refresh&#x60;, Plaid will fire a webhook: for &#x60;/transactions/sync&#x60; users, [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both &#x60;/transactions/sync&#x60; and &#x60;/transactions/get&#x60;, [&#x60;TRANSACTIONS_REMOVED&#x60;](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [&#x60;DEFAULT_UPDATE&#x60;](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling &#x60;/transactions/get&#x60; or &#x60;/transactions/sync&#x60;. Note that the &#x60;/transactions/refresh&#x60; endpoint is not supported for Capital One (&#x60;ins_128026&#x60;) and will result in a &#x60;PRODUCT_NOT_SUPPORTED&#x60; error if called on an Item from that institution.  &#x60;/transactions/refresh&#x60; is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     * @param transactionsRefreshRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#transactionsrefresh">Refresh transaction data Documentation</a>
     */
    public okhttp3.Call transactionsRefreshAsync(TransactionsRefreshRequest transactionsRefreshRequest, final ApiCallback<TransactionsRefreshResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsRefreshValidateBeforeCall(transactionsRefreshRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionsRefreshResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsRulesCreate
     * @param transactionsRulesCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRulesCreateCall(TransactionsRulesCreateRequest transactionsRulesCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionsRulesCreateRequest;

        // create path and map variables
        String localVarPath = "/beta/transactions/rules/v1/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsRulesCreateValidateBeforeCall(TransactionsRulesCreateRequest transactionsRulesCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionsRulesCreateRequest' is set
        if (transactionsRulesCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionsRulesCreateRequest' when calling transactionsRulesCreate(Async)");
        }

        return transactionsRulesCreateCall(transactionsRulesCreateRequest, _callback);

    }

    /**
     * Create transaction category rule
     * The &#x60;/transactions/rules/v1/create&#x60; endpoint creates transaction categorization rules.  Rules will be applied on the Item&#39;s transactions returned in &#x60;/transactions/get&#x60; response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @param transactionsRulesCreateRequest  (required)
     * @return TransactionsRulesCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public TransactionsRulesCreateResponse transactionsRulesCreate(TransactionsRulesCreateRequest transactionsRulesCreateRequest) throws ApiException {
        ApiResponse<TransactionsRulesCreateResponse> localVarResp = transactionsRulesCreateWithHttpInfo(transactionsRulesCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create transaction category rule
     * The &#x60;/transactions/rules/v1/create&#x60; endpoint creates transaction categorization rules.  Rules will be applied on the Item&#39;s transactions returned in &#x60;/transactions/get&#x60; response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @param transactionsRulesCreateRequest  (required)
     * @return ApiResponse&lt;TransactionsRulesCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionsRulesCreateResponse> transactionsRulesCreateWithHttpInfo(TransactionsRulesCreateRequest transactionsRulesCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionsRulesCreateValidateBeforeCall(transactionsRulesCreateRequest, null);
        Type localVarReturnType = new TypeToken<TransactionsRulesCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create transaction category rule (asynchronously)
     * The &#x60;/transactions/rules/v1/create&#x60; endpoint creates transaction categorization rules.  Rules will be applied on the Item&#39;s transactions returned in &#x60;/transactions/get&#x60; response.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @param transactionsRulesCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRulesCreateAsync(TransactionsRulesCreateRequest transactionsRulesCreateRequest, final ApiCallback<TransactionsRulesCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsRulesCreateValidateBeforeCall(transactionsRulesCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionsRulesCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsRulesList
     * @param transactionsRulesListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRulesListCall(TransactionsRulesListRequest transactionsRulesListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionsRulesListRequest;

        // create path and map variables
        String localVarPath = "/beta/transactions/rules/v1/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsRulesListValidateBeforeCall(TransactionsRulesListRequest transactionsRulesListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionsRulesListRequest' is set
        if (transactionsRulesListRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionsRulesListRequest' when calling transactionsRulesList(Async)");
        }

        return transactionsRulesListCall(transactionsRulesListRequest, _callback);

    }

    /**
     * Return a list of rules created for the Item associated with the access token.
     * The &#x60;/transactions/rules/v1/list&#x60; returns a list of transaction rules created for the Item associated with the access token.
     * @param transactionsRulesListRequest  (required)
     * @return TransactionsRulesListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public TransactionsRulesListResponse transactionsRulesList(TransactionsRulesListRequest transactionsRulesListRequest) throws ApiException {
        ApiResponse<TransactionsRulesListResponse> localVarResp = transactionsRulesListWithHttpInfo(transactionsRulesListRequest);
        return localVarResp.getData();
    }

    /**
     * Return a list of rules created for the Item associated with the access token.
     * The &#x60;/transactions/rules/v1/list&#x60; returns a list of transaction rules created for the Item associated with the access token.
     * @param transactionsRulesListRequest  (required)
     * @return ApiResponse&lt;TransactionsRulesListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionsRulesListResponse> transactionsRulesListWithHttpInfo(TransactionsRulesListRequest transactionsRulesListRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionsRulesListValidateBeforeCall(transactionsRulesListRequest, null);
        Type localVarReturnType = new TypeToken<TransactionsRulesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of rules created for the Item associated with the access token. (asynchronously)
     * The &#x60;/transactions/rules/v1/list&#x60; returns a list of transaction rules created for the Item associated with the access token.
     * @param transactionsRulesListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRulesListAsync(TransactionsRulesListRequest transactionsRulesListRequest, final ApiCallback<TransactionsRulesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsRulesListValidateBeforeCall(transactionsRulesListRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionsRulesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsRulesRemove
     * @param transactionsRulesRemoveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRulesRemoveCall(TransactionsRulesRemoveRequest transactionsRulesRemoveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionsRulesRemoveRequest;

        // create path and map variables
        String localVarPath = "/beta/transactions/rules/v1/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsRulesRemoveValidateBeforeCall(TransactionsRulesRemoveRequest transactionsRulesRemoveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionsRulesRemoveRequest' is set
        if (transactionsRulesRemoveRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionsRulesRemoveRequest' when calling transactionsRulesRemove(Async)");
        }

        return transactionsRulesRemoveCall(transactionsRulesRemoveRequest, _callback);

    }

    /**
     * Remove transaction rule
     * The &#x60;/transactions/rules/v1/remove&#x60; endpoint is used to remove a transaction rule.
     * @param transactionsRulesRemoveRequest  (required)
     * @return TransactionsRulesRemoveResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public TransactionsRulesRemoveResponse transactionsRulesRemove(TransactionsRulesRemoveRequest transactionsRulesRemoveRequest) throws ApiException {
        ApiResponse<TransactionsRulesRemoveResponse> localVarResp = transactionsRulesRemoveWithHttpInfo(transactionsRulesRemoveRequest);
        return localVarResp.getData();
    }

    /**
     * Remove transaction rule
     * The &#x60;/transactions/rules/v1/remove&#x60; endpoint is used to remove a transaction rule.
     * @param transactionsRulesRemoveRequest  (required)
     * @return ApiResponse&lt;TransactionsRulesRemoveResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionsRulesRemoveResponse> transactionsRulesRemoveWithHttpInfo(TransactionsRulesRemoveRequest transactionsRulesRemoveRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionsRulesRemoveValidateBeforeCall(transactionsRulesRemoveRequest, null);
        Type localVarReturnType = new TypeToken<TransactionsRulesRemoveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove transaction rule (asynchronously)
     * The &#x60;/transactions/rules/v1/remove&#x60; endpoint is used to remove a transaction rule.
     * @param transactionsRulesRemoveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsRulesRemoveAsync(TransactionsRulesRemoveRequest transactionsRulesRemoveRequest, final ApiCallback<TransactionsRulesRemoveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsRulesRemoveValidateBeforeCall(transactionsRulesRemoveRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionsRulesRemoveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsSync
     * @param transactionsSyncRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#transactionssync">Get incremental transaction updates on an Item Documentation</a>
     */
    public okhttp3.Call transactionsSyncCall(TransactionsSyncRequest transactionsSyncRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionsSyncRequest;

        // create path and map variables
        String localVarPath = "/transactions/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsSyncValidateBeforeCall(TransactionsSyncRequest transactionsSyncRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionsSyncRequest' is set
        if (transactionsSyncRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionsSyncRequest' when calling transactionsSync(Async)");
        }

        return transactionsSyncCall(transactionsSyncRequest, _callback);

    }

    /**
     * Get incremental transaction updates on an Item
     * This endpoint replaces &#x60;/transactions/get&#x60; and its associated webhooks for most common use-cases.  The &#x60;/transactions/sync&#x60; endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. &#x60;/transactions/sync&#x60; provides the same functionality as &#x60;/transactions/get&#x60; and can be used instead of &#x60;/transactions/get&#x60; to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for &#x60;credit&#x60;, &#x60;depository&#x60;, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from &#x60;investments&#x60; accounts, use &#x60;/investments/transactions/get&#x60; instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to &#x60;/transactions/sync&#x60; for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \&quot;adds\&quot;), which then generates a &#x60;next_cursor&#x60; for that Item. In subsequent calls, send the &#x60;next_cursor&#x60; to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The &#x60;has_more&#x60; field specifies if additional calls are necessary to fetch all available transaction updates. Call &#x60;/transactions/sync&#x60; with the new cursor, pulling all updates, until &#x60;has_more&#x60; is &#x60;false&#x60;.  When retrieving paginated updates, track both the &#x60;next_cursor&#x60; from the latest response and the original cursor from the first call in which &#x60;has_more&#x60; was &#x60;true&#x60;; if a call to &#x60;/transactions/sync&#x60; fails when retrieving a paginated update, which can occur as a result of the [&#x60;TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION&#x60;](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, &#x60;/transactions/sync&#x60; will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the &#x60;/transactions/refresh&#x60; endpoint.  Note that for newly created Items, data may not be immediately available to &#x60;/transactions/sync&#x60;. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
     * @param transactionsSyncRequest  (required)
     * @return TransactionsSyncResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#transactionssync">Get incremental transaction updates on an Item Documentation</a>
     */
    public TransactionsSyncResponse transactionsSync(TransactionsSyncRequest transactionsSyncRequest) throws ApiException {
        ApiResponse<TransactionsSyncResponse> localVarResp = transactionsSyncWithHttpInfo(transactionsSyncRequest);
        return localVarResp.getData();
    }

    /**
     * Get incremental transaction updates on an Item
     * This endpoint replaces &#x60;/transactions/get&#x60; and its associated webhooks for most common use-cases.  The &#x60;/transactions/sync&#x60; endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. &#x60;/transactions/sync&#x60; provides the same functionality as &#x60;/transactions/get&#x60; and can be used instead of &#x60;/transactions/get&#x60; to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for &#x60;credit&#x60;, &#x60;depository&#x60;, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from &#x60;investments&#x60; accounts, use &#x60;/investments/transactions/get&#x60; instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to &#x60;/transactions/sync&#x60; for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \&quot;adds\&quot;), which then generates a &#x60;next_cursor&#x60; for that Item. In subsequent calls, send the &#x60;next_cursor&#x60; to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The &#x60;has_more&#x60; field specifies if additional calls are necessary to fetch all available transaction updates. Call &#x60;/transactions/sync&#x60; with the new cursor, pulling all updates, until &#x60;has_more&#x60; is &#x60;false&#x60;.  When retrieving paginated updates, track both the &#x60;next_cursor&#x60; from the latest response and the original cursor from the first call in which &#x60;has_more&#x60; was &#x60;true&#x60;; if a call to &#x60;/transactions/sync&#x60; fails when retrieving a paginated update, which can occur as a result of the [&#x60;TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION&#x60;](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, &#x60;/transactions/sync&#x60; will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the &#x60;/transactions/refresh&#x60; endpoint.  Note that for newly created Items, data may not be immediately available to &#x60;/transactions/sync&#x60;. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
     * @param transactionsSyncRequest  (required)
     * @return ApiResponse&lt;TransactionsSyncResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#transactionssync">Get incremental transaction updates on an Item Documentation</a>
     */
    public ApiResponse<TransactionsSyncResponse> transactionsSyncWithHttpInfo(TransactionsSyncRequest transactionsSyncRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionsSyncValidateBeforeCall(transactionsSyncRequest, null);
        Type localVarReturnType = new TypeToken<TransactionsSyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get incremental transaction updates on an Item (asynchronously)
     * This endpoint replaces &#x60;/transactions/get&#x60; and its associated webhooks for most common use-cases.  The &#x60;/transactions/sync&#x60; endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. &#x60;/transactions/sync&#x60; provides the same functionality as &#x60;/transactions/get&#x60; and can be used instead of &#x60;/transactions/get&#x60; to simplify the process of tracking transactions updates.  This endpoint provides user-authorized transaction data for &#x60;credit&#x60;, &#x60;depository&#x60;, and some loan-type accounts (only those with account subtype &#x60;student&#x60;; coverage may be limited). For transaction history from &#x60;investments&#x60; accounts, use &#x60;/investments/transactions/get&#x60; instead.  Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.  In the first call to &#x60;/transactions/sync&#x60; for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as \&quot;adds\&quot;), which then generates a &#x60;next_cursor&#x60; for that Item. In subsequent calls, send the &#x60;next_cursor&#x60; to receive only the changes that have occurred since the previous call.  Due to the potentially large number of transactions associated with an Item, results are paginated. The &#x60;has_more&#x60; field specifies if additional calls are necessary to fetch all available transaction updates. Call &#x60;/transactions/sync&#x60; with the new cursor, pulling all updates, until &#x60;has_more&#x60; is &#x60;false&#x60;.  When retrieving paginated updates, track both the &#x60;next_cursor&#x60; from the latest response and the original cursor from the first call in which &#x60;has_more&#x60; was &#x60;true&#x60;; if a call to &#x60;/transactions/sync&#x60; fails when retrieving a paginated update, which can occur as a result of the [&#x60;TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION&#x60;](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.  Whenever new or updated transaction data becomes available, &#x60;/transactions/sync&#x60; will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item&#39;s &#x60;status.transactions.last_successful_update&#x60; field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the &#x60;/transactions/refresh&#x60; endpoint.  Note that for newly created Items, data may not be immediately available to &#x60;/transactions/sync&#x60;. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.  To be alerted when new data is available, listen for the [&#x60;SYNC_UPDATES_AVAILABLE&#x60;](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
     * @param transactionsSyncRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transactions/#transactionssync">Get incremental transaction updates on an Item Documentation</a>
     */
    public okhttp3.Call transactionsSyncAsync(TransactionsSyncRequest transactionsSyncRequest, final ApiCallback<TransactionsSyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsSyncValidateBeforeCall(transactionsSyncRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionsSyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferAuthorizationCreate
     * @param transferAuthorizationCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferauthorizationcreate">Create a transfer authorization Documentation</a>
     */
    public okhttp3.Call transferAuthorizationCreateCall(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferAuthorizationCreateRequest;

        // create path and map variables
        String localVarPath = "/transfer/authorization/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferAuthorizationCreateValidateBeforeCall(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferAuthorizationCreateRequest' is set
        if (transferAuthorizationCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'transferAuthorizationCreateRequest' when calling transferAuthorizationCreate(Async)");
        }

        return transferAuthorizationCreateCall(transferAuthorizationCreateRequest, _callback);

    }

    /**
     * Create a transfer authorization
     * Use the &#x60;/transfer/authorization/create&#x60; endpoint to determine transfer failure risk.  In Plaid&#39;s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with null rationale code, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To approve a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code &#x60;ITEM_LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.  &#x60;device.ip_address&#x60;, &#x60;device.user_agent&#x60; are required fields.  For [Guarantee](https://www.plaid.com/docs//transfer/guarantee/), the following fields are required : &#x60;idempotency_key&#x60;, &#x60;user.phone_number&#x60; (optional if &#x60;email_address&#x60; provided), &#x60;user.email_address&#x60; (optional if &#x60;phone_number&#x60; provided), &#x60;device.ip_address&#x60;, &#x60;device.user_agent&#x60;, and &#x60;user_present&#x60;.
     * @param transferAuthorizationCreateRequest  (required)
     * @return TransferAuthorizationCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferauthorizationcreate">Create a transfer authorization Documentation</a>
     */
    public TransferAuthorizationCreateResponse transferAuthorizationCreate(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest) throws ApiException {
        ApiResponse<TransferAuthorizationCreateResponse> localVarResp = transferAuthorizationCreateWithHttpInfo(transferAuthorizationCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a transfer authorization
     * Use the &#x60;/transfer/authorization/create&#x60; endpoint to determine transfer failure risk.  In Plaid&#39;s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with null rationale code, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To approve a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code &#x60;ITEM_LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.  &#x60;device.ip_address&#x60;, &#x60;device.user_agent&#x60; are required fields.  For [Guarantee](https://www.plaid.com/docs//transfer/guarantee/), the following fields are required : &#x60;idempotency_key&#x60;, &#x60;user.phone_number&#x60; (optional if &#x60;email_address&#x60; provided), &#x60;user.email_address&#x60; (optional if &#x60;phone_number&#x60; provided), &#x60;device.ip_address&#x60;, &#x60;device.user_agent&#x60;, and &#x60;user_present&#x60;.
     * @param transferAuthorizationCreateRequest  (required)
     * @return ApiResponse&lt;TransferAuthorizationCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferauthorizationcreate">Create a transfer authorization Documentation</a>
     */
    public ApiResponse<TransferAuthorizationCreateResponse> transferAuthorizationCreateWithHttpInfo(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = transferAuthorizationCreateValidateBeforeCall(transferAuthorizationCreateRequest, null);
        Type localVarReturnType = new TypeToken<TransferAuthorizationCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a transfer authorization (asynchronously)
     * Use the &#x60;/transfer/authorization/create&#x60; endpoint to determine transfer failure risk.  In Plaid&#39;s Sandbox environment the decisions will be returned as follows:    - To approve a transfer with null rationale code, make an authorization request with an &#x60;amount&#x60; less than the available balance in the account.    - To approve a transfer with the rationale code &#x60;MANUALLY_VERIFIED_ITEM&#x60;, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To approve a transfer with the rationale code &#x60;ITEM_LOGIN_REQUIRED&#x60;, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).    - To decline a transfer with the rationale code &#x60;NSF&#x60;, the available balance on the account must be less than the authorization &#x60;amount&#x60;. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code &#x60;RISK&#x60;, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.  &#x60;device.ip_address&#x60;, &#x60;device.user_agent&#x60; are required fields.  For [Guarantee](https://www.plaid.com/docs//transfer/guarantee/), the following fields are required : &#x60;idempotency_key&#x60;, &#x60;user.phone_number&#x60; (optional if &#x60;email_address&#x60; provided), &#x60;user.email_address&#x60; (optional if &#x60;phone_number&#x60; provided), &#x60;device.ip_address&#x60;, &#x60;device.user_agent&#x60;, and &#x60;user_present&#x60;.
     * @param transferAuthorizationCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferauthorizationcreate">Create a transfer authorization Documentation</a>
     */
    public okhttp3.Call transferAuthorizationCreateAsync(TransferAuthorizationCreateRequest transferAuthorizationCreateRequest, final ApiCallback<TransferAuthorizationCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferAuthorizationCreateValidateBeforeCall(transferAuthorizationCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferAuthorizationCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferCancel
     * @param transferCancelRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfercancel">Cancel a transfer Documentation</a>
     */
    public okhttp3.Call transferCancelCall(TransferCancelRequest transferCancelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferCancelRequest;

        // create path and map variables
        String localVarPath = "/transfer/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferCancelValidateBeforeCall(TransferCancelRequest transferCancelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferCancelRequest' is set
        if (transferCancelRequest == null) {
            throw new ApiException("Missing the required parameter 'transferCancelRequest' when calling transferCancel(Async)");
        }

        return transferCancelCall(transferCancelRequest, _callback);

    }

    /**
     * Cancel a transfer
     * Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancellation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
     * @param transferCancelRequest  (required)
     * @return TransferCancelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfercancel">Cancel a transfer Documentation</a>
     */
    public TransferCancelResponse transferCancel(TransferCancelRequest transferCancelRequest) throws ApiException {
        ApiResponse<TransferCancelResponse> localVarResp = transferCancelWithHttpInfo(transferCancelRequest);
        return localVarResp.getData();
    }

    /**
     * Cancel a transfer
     * Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancellation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
     * @param transferCancelRequest  (required)
     * @return ApiResponse&lt;TransferCancelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfercancel">Cancel a transfer Documentation</a>
     */
    public ApiResponse<TransferCancelResponse> transferCancelWithHttpInfo(TransferCancelRequest transferCancelRequest) throws ApiException {
        okhttp3.Call localVarCall = transferCancelValidateBeforeCall(transferCancelRequest, null);
        Type localVarReturnType = new TypeToken<TransferCancelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a transfer (asynchronously)
     * Use the &#x60;/transfer/cancel&#x60; endpoint to cancel a transfer.  A transfer is eligible for cancellation if the &#x60;cancellable&#x60; property returned by &#x60;/transfer/get&#x60; is &#x60;true&#x60;.
     * @param transferCancelRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfercancel">Cancel a transfer Documentation</a>
     */
    public okhttp3.Call transferCancelAsync(TransferCancelRequest transferCancelRequest, final ApiCallback<TransferCancelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferCancelValidateBeforeCall(transferCancelRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferCancelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferCapabilitiesGet
     * @param transferCapabilitiesGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfercapabilitiesget">Get RTP eligibility information of a transfer Documentation</a>
     */
    public okhttp3.Call transferCapabilitiesGetCall(TransferCapabilitiesGetRequest transferCapabilitiesGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferCapabilitiesGetRequest;

        // create path and map variables
        String localVarPath = "/transfer/capabilities/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferCapabilitiesGetValidateBeforeCall(TransferCapabilitiesGetRequest transferCapabilitiesGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferCapabilitiesGetRequest' is set
        if (transferCapabilitiesGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transferCapabilitiesGetRequest' when calling transferCapabilitiesGet(Async)");
        }

        return transferCapabilitiesGetCall(transferCapabilitiesGetRequest, _callback);

    }

    /**
     * Get RTP eligibility information of a transfer
     * Use the &#x60;/transfer/capabilities/get&#x60; endpoint to determine the RTP eligibility information of a transfer.
     * @param transferCapabilitiesGetRequest  (required)
     * @return TransferCapabilitiesGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfercapabilitiesget">Get RTP eligibility information of a transfer Documentation</a>
     */
    public TransferCapabilitiesGetResponse transferCapabilitiesGet(TransferCapabilitiesGetRequest transferCapabilitiesGetRequest) throws ApiException {
        ApiResponse<TransferCapabilitiesGetResponse> localVarResp = transferCapabilitiesGetWithHttpInfo(transferCapabilitiesGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get RTP eligibility information of a transfer
     * Use the &#x60;/transfer/capabilities/get&#x60; endpoint to determine the RTP eligibility information of a transfer.
     * @param transferCapabilitiesGetRequest  (required)
     * @return ApiResponse&lt;TransferCapabilitiesGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfercapabilitiesget">Get RTP eligibility information of a transfer Documentation</a>
     */
    public ApiResponse<TransferCapabilitiesGetResponse> transferCapabilitiesGetWithHttpInfo(TransferCapabilitiesGetRequest transferCapabilitiesGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transferCapabilitiesGetValidateBeforeCall(transferCapabilitiesGetRequest, null);
        Type localVarReturnType = new TypeToken<TransferCapabilitiesGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get RTP eligibility information of a transfer (asynchronously)
     * Use the &#x60;/transfer/capabilities/get&#x60; endpoint to determine the RTP eligibility information of a transfer.
     * @param transferCapabilitiesGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfercapabilitiesget">Get RTP eligibility information of a transfer Documentation</a>
     */
    public okhttp3.Call transferCapabilitiesGetAsync(TransferCapabilitiesGetRequest transferCapabilitiesGetRequest, final ApiCallback<TransferCapabilitiesGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferCapabilitiesGetValidateBeforeCall(transferCapabilitiesGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferCapabilitiesGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferConfigurationGet
     * @param transferConfigurationGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferconfigurationget">Get transfer product configuration Documentation</a>
     */
    public okhttp3.Call transferConfigurationGetCall(TransferConfigurationGetRequest transferConfigurationGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferConfigurationGetRequest;

        // create path and map variables
        String localVarPath = "/transfer/configuration/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferConfigurationGetValidateBeforeCall(TransferConfigurationGetRequest transferConfigurationGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferConfigurationGetRequest' is set
        if (transferConfigurationGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transferConfigurationGetRequest' when calling transferConfigurationGet(Async)");
        }

        return transferConfigurationGetCall(transferConfigurationGetRequest, _callback);

    }

    /**
     * Get transfer product configuration
     * Use the &#x60;/transfer/configuration/get&#x60; endpoint to view your transfer product configurations.
     * @param transferConfigurationGetRequest  (required)
     * @return TransferConfigurationGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferconfigurationget">Get transfer product configuration Documentation</a>
     */
    public TransferConfigurationGetResponse transferConfigurationGet(TransferConfigurationGetRequest transferConfigurationGetRequest) throws ApiException {
        ApiResponse<TransferConfigurationGetResponse> localVarResp = transferConfigurationGetWithHttpInfo(transferConfigurationGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get transfer product configuration
     * Use the &#x60;/transfer/configuration/get&#x60; endpoint to view your transfer product configurations.
     * @param transferConfigurationGetRequest  (required)
     * @return ApiResponse&lt;TransferConfigurationGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferconfigurationget">Get transfer product configuration Documentation</a>
     */
    public ApiResponse<TransferConfigurationGetResponse> transferConfigurationGetWithHttpInfo(TransferConfigurationGetRequest transferConfigurationGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transferConfigurationGetValidateBeforeCall(transferConfigurationGetRequest, null);
        Type localVarReturnType = new TypeToken<TransferConfigurationGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transfer product configuration (asynchronously)
     * Use the &#x60;/transfer/configuration/get&#x60; endpoint to view your transfer product configurations.
     * @param transferConfigurationGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferconfigurationget">Get transfer product configuration Documentation</a>
     */
    public okhttp3.Call transferConfigurationGetAsync(TransferConfigurationGetRequest transferConfigurationGetRequest, final ApiCallback<TransferConfigurationGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferConfigurationGetValidateBeforeCall(transferConfigurationGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferConfigurationGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferCreate
     * @param transferCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfercreate">Create a transfer Documentation</a>
     */
    public okhttp3.Call transferCreateCall(TransferCreateRequest transferCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferCreateRequest;

        // create path and map variables
        String localVarPath = "/transfer/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferCreateValidateBeforeCall(TransferCreateRequest transferCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferCreateRequest' is set
        if (transferCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'transferCreateRequest' when calling transferCreate(Async)");
        }

        return transferCreateCall(transferCreateRequest, _callback);

    }

    /**
     * Create a transfer
     * Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
     * @param transferCreateRequest  (required)
     * @return TransferCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfercreate">Create a transfer Documentation</a>
     */
    public TransferCreateResponse transferCreate(TransferCreateRequest transferCreateRequest) throws ApiException {
        ApiResponse<TransferCreateResponse> localVarResp = transferCreateWithHttpInfo(transferCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a transfer
     * Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
     * @param transferCreateRequest  (required)
     * @return ApiResponse&lt;TransferCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfercreate">Create a transfer Documentation</a>
     */
    public ApiResponse<TransferCreateResponse> transferCreateWithHttpInfo(TransferCreateRequest transferCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = transferCreateValidateBeforeCall(transferCreateRequest, null);
        Type localVarReturnType = new TypeToken<TransferCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a transfer (asynchronously)
     * Use the &#x60;/transfer/create&#x60; endpoint to initiate a new transfer.
     * @param transferCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfercreate">Create a transfer Documentation</a>
     */
    public okhttp3.Call transferCreateAsync(TransferCreateRequest transferCreateRequest, final ApiCallback<TransferCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferCreateValidateBeforeCall(transferCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferEventList
     * @param transferEventListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfereventlist">List transfer events Documentation</a>
     */
    public okhttp3.Call transferEventListCall(TransferEventListRequest transferEventListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferEventListRequest;

        // create path and map variables
        String localVarPath = "/transfer/event/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferEventListValidateBeforeCall(TransferEventListRequest transferEventListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferEventListRequest' is set
        if (transferEventListRequest == null) {
            throw new ApiException("Missing the required parameter 'transferEventListRequest' when calling transferEventList(Async)");
        }

        return transferEventListCall(transferEventListRequest, _callback);

    }

    /**
     * List transfer events
     * Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
     * @param transferEventListRequest  (required)
     * @return TransferEventListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfereventlist">List transfer events Documentation</a>
     */
    public TransferEventListResponse transferEventList(TransferEventListRequest transferEventListRequest) throws ApiException {
        ApiResponse<TransferEventListResponse> localVarResp = transferEventListWithHttpInfo(transferEventListRequest);
        return localVarResp.getData();
    }

    /**
     * List transfer events
     * Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
     * @param transferEventListRequest  (required)
     * @return ApiResponse&lt;TransferEventListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfereventlist">List transfer events Documentation</a>
     */
    public ApiResponse<TransferEventListResponse> transferEventListWithHttpInfo(TransferEventListRequest transferEventListRequest) throws ApiException {
        okhttp3.Call localVarCall = transferEventListValidateBeforeCall(transferEventListRequest, null);
        Type localVarReturnType = new TypeToken<TransferEventListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List transfer events (asynchronously)
     * Use the &#x60;/transfer/event/list&#x60; endpoint to get a list of transfer events based on specified filter criteria.
     * @param transferEventListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfereventlist">List transfer events Documentation</a>
     */
    public okhttp3.Call transferEventListAsync(TransferEventListRequest transferEventListRequest, final ApiCallback<TransferEventListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferEventListValidateBeforeCall(transferEventListRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferEventListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferEventSync
     * @param transferEventSyncRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfereventsync">Sync transfer events Documentation</a>
     */
    public okhttp3.Call transferEventSyncCall(TransferEventSyncRequest transferEventSyncRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferEventSyncRequest;

        // create path and map variables
        String localVarPath = "/transfer/event/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferEventSyncValidateBeforeCall(TransferEventSyncRequest transferEventSyncRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferEventSyncRequest' is set
        if (transferEventSyncRequest == null) {
            throw new ApiException("Missing the required parameter 'transferEventSyncRequest' when calling transferEventSync(Async)");
        }

        return transferEventSyncCall(transferEventSyncRequest, _callback);

    }

    /**
     * Sync transfer events
     * &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
     * @param transferEventSyncRequest  (required)
     * @return TransferEventSyncResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfereventsync">Sync transfer events Documentation</a>
     */
    public TransferEventSyncResponse transferEventSync(TransferEventSyncRequest transferEventSyncRequest) throws ApiException {
        ApiResponse<TransferEventSyncResponse> localVarResp = transferEventSyncWithHttpInfo(transferEventSyncRequest);
        return localVarResp.getData();
    }

    /**
     * Sync transfer events
     * &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
     * @param transferEventSyncRequest  (required)
     * @return ApiResponse&lt;TransferEventSyncResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfereventsync">Sync transfer events Documentation</a>
     */
    public ApiResponse<TransferEventSyncResponse> transferEventSyncWithHttpInfo(TransferEventSyncRequest transferEventSyncRequest) throws ApiException {
        okhttp3.Call localVarCall = transferEventSyncValidateBeforeCall(transferEventSyncRequest, null);
        Type localVarReturnType = new TypeToken<TransferEventSyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sync transfer events (asynchronously)
     * &#x60;/transfer/event/sync&#x60; allows you to request up to the next 25 transfer events that happened after a specific &#x60;event_id&#x60;. Use the &#x60;/transfer/event/sync&#x60; endpoint to guarantee you have seen all transfer events. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
     * @param transferEventSyncRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfereventsync">Sync transfer events Documentation</a>
     */
    public okhttp3.Call transferEventSyncAsync(TransferEventSyncRequest transferEventSyncRequest, final ApiCallback<TransferEventSyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferEventSyncValidateBeforeCall(transferEventSyncRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferEventSyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferGet
     * @param transferGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferget">Retrieve a transfer Documentation</a>
     */
    public okhttp3.Call transferGetCall(TransferGetRequest transferGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferGetRequest;

        // create path and map variables
        String localVarPath = "/transfer/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferGetValidateBeforeCall(TransferGetRequest transferGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferGetRequest' is set
        if (transferGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transferGetRequest' when calling transferGet(Async)");
        }

        return transferGetCall(transferGetRequest, _callback);

    }

    /**
     * Retrieve a transfer
     * The &#x60;/transfer/get&#x60; endpoint fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
     * @param transferGetRequest  (required)
     * @return TransferGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferget">Retrieve a transfer Documentation</a>
     */
    public TransferGetResponse transferGet(TransferGetRequest transferGetRequest) throws ApiException {
        ApiResponse<TransferGetResponse> localVarResp = transferGetWithHttpInfo(transferGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a transfer
     * The &#x60;/transfer/get&#x60; endpoint fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
     * @param transferGetRequest  (required)
     * @return ApiResponse&lt;TransferGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferget">Retrieve a transfer Documentation</a>
     */
    public ApiResponse<TransferGetResponse> transferGetWithHttpInfo(TransferGetRequest transferGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transferGetValidateBeforeCall(transferGetRequest, null);
        Type localVarReturnType = new TypeToken<TransferGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a transfer (asynchronously)
     * The &#x60;/transfer/get&#x60; endpoint fetches information about the transfer corresponding to the given &#x60;transfer_id&#x60;.
     * @param transferGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferget">Retrieve a transfer Documentation</a>
     */
    public okhttp3.Call transferGetAsync(TransferGetRequest transferGetRequest, final ApiCallback<TransferGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferGetValidateBeforeCall(transferGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferIntentCreate
     * @param transferIntentCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferintentcreate">Create a transfer intent object to invoke the Transfer UI Documentation</a>
     */
    public okhttp3.Call transferIntentCreateCall(TransferIntentCreateRequest transferIntentCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferIntentCreateRequest;

        // create path and map variables
        String localVarPath = "/transfer/intent/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferIntentCreateValidateBeforeCall(TransferIntentCreateRequest transferIntentCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferIntentCreateRequest' is set
        if (transferIntentCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'transferIntentCreateRequest' when calling transferIntentCreate(Async)");
        }

        return transferIntentCreateCall(transferIntentCreateRequest, _callback);

    }

    /**
     * Create a transfer intent object to invoke the Transfer UI
     * Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
     * @param transferIntentCreateRequest  (required)
     * @return TransferIntentCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferintentcreate">Create a transfer intent object to invoke the Transfer UI Documentation</a>
     */
    public TransferIntentCreateResponse transferIntentCreate(TransferIntentCreateRequest transferIntentCreateRequest) throws ApiException {
        ApiResponse<TransferIntentCreateResponse> localVarResp = transferIntentCreateWithHttpInfo(transferIntentCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a transfer intent object to invoke the Transfer UI
     * Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
     * @param transferIntentCreateRequest  (required)
     * @return ApiResponse&lt;TransferIntentCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferintentcreate">Create a transfer intent object to invoke the Transfer UI Documentation</a>
     */
    public ApiResponse<TransferIntentCreateResponse> transferIntentCreateWithHttpInfo(TransferIntentCreateRequest transferIntentCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = transferIntentCreateValidateBeforeCall(transferIntentCreateRequest, null);
        Type localVarReturnType = new TypeToken<TransferIntentCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a transfer intent object to invoke the Transfer UI (asynchronously)
     * Use the &#x60;/transfer/intent/create&#x60; endpoint to generate a transfer intent object and invoke the Transfer UI.
     * @param transferIntentCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferintentcreate">Create a transfer intent object to invoke the Transfer UI Documentation</a>
     */
    public okhttp3.Call transferIntentCreateAsync(TransferIntentCreateRequest transferIntentCreateRequest, final ApiCallback<TransferIntentCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferIntentCreateValidateBeforeCall(transferIntentCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferIntentCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferIntentGet
     * @param transferIntentGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferintentget">Retrieve more information about a transfer intent Documentation</a>
     */
    public okhttp3.Call transferIntentGetCall(TransferIntentGetRequest transferIntentGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferIntentGetRequest;

        // create path and map variables
        String localVarPath = "/transfer/intent/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferIntentGetValidateBeforeCall(TransferIntentGetRequest transferIntentGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferIntentGetRequest' is set
        if (transferIntentGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transferIntentGetRequest' when calling transferIntentGet(Async)");
        }

        return transferIntentGetCall(transferIntentGetRequest, _callback);

    }

    /**
     * Retrieve more information about a transfer intent
     * Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
     * @param transferIntentGetRequest  (required)
     * @return TransferIntentGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferintentget">Retrieve more information about a transfer intent Documentation</a>
     */
    public TransferIntentGetResponse transferIntentGet(TransferIntentGetRequest transferIntentGetRequest) throws ApiException {
        ApiResponse<TransferIntentGetResponse> localVarResp = transferIntentGetWithHttpInfo(transferIntentGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve more information about a transfer intent
     * Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
     * @param transferIntentGetRequest  (required)
     * @return ApiResponse&lt;TransferIntentGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferintentget">Retrieve more information about a transfer intent Documentation</a>
     */
    public ApiResponse<TransferIntentGetResponse> transferIntentGetWithHttpInfo(TransferIntentGetRequest transferIntentGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transferIntentGetValidateBeforeCall(transferIntentGetRequest, null);
        Type localVarReturnType = new TypeToken<TransferIntentGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve more information about a transfer intent (asynchronously)
     * Use the &#x60;/transfer/intent/get&#x60; endpoint to retrieve more information about a transfer intent.
     * @param transferIntentGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferintentget">Retrieve more information about a transfer intent Documentation</a>
     */
    public okhttp3.Call transferIntentGetAsync(TransferIntentGetRequest transferIntentGetRequest, final ApiCallback<TransferIntentGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferIntentGetValidateBeforeCall(transferIntentGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferIntentGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferList
     * @param transferListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferlist">List transfers Documentation</a>
     */
    public okhttp3.Call transferListCall(TransferListRequest transferListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferListRequest;

        // create path and map variables
        String localVarPath = "/transfer/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferListValidateBeforeCall(TransferListRequest transferListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferListRequest' is set
        if (transferListRequest == null) {
            throw new ApiException("Missing the required parameter 'transferListRequest' when calling transferList(Async)");
        }

        return transferListCall(transferListRequest, _callback);

    }

    /**
     * List transfers
     * Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers. 
     * @param transferListRequest  (required)
     * @return TransferListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferlist">List transfers Documentation</a>
     */
    public TransferListResponse transferList(TransferListRequest transferListRequest) throws ApiException {
        ApiResponse<TransferListResponse> localVarResp = transferListWithHttpInfo(transferListRequest);
        return localVarResp.getData();
    }

    /**
     * List transfers
     * Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers. 
     * @param transferListRequest  (required)
     * @return ApiResponse&lt;TransferListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferlist">List transfers Documentation</a>
     */
    public ApiResponse<TransferListResponse> transferListWithHttpInfo(TransferListRequest transferListRequest) throws ApiException {
        okhttp3.Call localVarCall = transferListValidateBeforeCall(transferListRequest, null);
        Type localVarReturnType = new TypeToken<TransferListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List transfers (asynchronously)
     * Use the &#x60;/transfer/list&#x60; endpoint to see a list of all your transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired transfers. 
     * @param transferListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferlist">List transfers Documentation</a>
     */
    public okhttp3.Call transferListAsync(TransferListRequest transferListRequest, final ApiCallback<TransferListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferListValidateBeforeCall(transferListRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferMetricsGet
     * @param transferMetricsGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfermetricsget">Get transfer product usage metrics Documentation</a>
     */
    public okhttp3.Call transferMetricsGetCall(TransferMetricsGetRequest transferMetricsGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferMetricsGetRequest;

        // create path and map variables
        String localVarPath = "/transfer/metrics/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferMetricsGetValidateBeforeCall(TransferMetricsGetRequest transferMetricsGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferMetricsGetRequest' is set
        if (transferMetricsGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transferMetricsGetRequest' when calling transferMetricsGet(Async)");
        }

        return transferMetricsGetCall(transferMetricsGetRequest, _callback);

    }

    /**
     * Get transfer product usage metrics
     * Use the &#x60;/transfer/metrics/get&#x60; endpoint to view your transfer product usage metrics.
     * @param transferMetricsGetRequest  (required)
     * @return TransferMetricsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfermetricsget">Get transfer product usage metrics Documentation</a>
     */
    public TransferMetricsGetResponse transferMetricsGet(TransferMetricsGetRequest transferMetricsGetRequest) throws ApiException {
        ApiResponse<TransferMetricsGetResponse> localVarResp = transferMetricsGetWithHttpInfo(transferMetricsGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get transfer product usage metrics
     * Use the &#x60;/transfer/metrics/get&#x60; endpoint to view your transfer product usage metrics.
     * @param transferMetricsGetRequest  (required)
     * @return ApiResponse&lt;TransferMetricsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfermetricsget">Get transfer product usage metrics Documentation</a>
     */
    public ApiResponse<TransferMetricsGetResponse> transferMetricsGetWithHttpInfo(TransferMetricsGetRequest transferMetricsGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transferMetricsGetValidateBeforeCall(transferMetricsGetRequest, null);
        Type localVarReturnType = new TypeToken<TransferMetricsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transfer product usage metrics (asynchronously)
     * Use the &#x60;/transfer/metrics/get&#x60; endpoint to view your transfer product usage metrics.
     * @param transferMetricsGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfermetricsget">Get transfer product usage metrics Documentation</a>
     */
    public okhttp3.Call transferMetricsGetAsync(TransferMetricsGetRequest transferMetricsGetRequest, final ApiCallback<TransferMetricsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferMetricsGetValidateBeforeCall(transferMetricsGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferMetricsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferMigrateAccount
     * @param transferMigrateAccountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfermigrate_account">Migrate account into Transfers Documentation</a>
     */
    public okhttp3.Call transferMigrateAccountCall(TransferMigrateAccountRequest transferMigrateAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferMigrateAccountRequest;

        // create path and map variables
        String localVarPath = "/transfer/migrate_account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferMigrateAccountValidateBeforeCall(TransferMigrateAccountRequest transferMigrateAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferMigrateAccountRequest' is set
        if (transferMigrateAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'transferMigrateAccountRequest' when calling transferMigrateAccount(Async)");
        }

        return transferMigrateAccountCall(transferMigrateAccountRequest, _callback);

    }

    /**
     * Migrate account into Transfers
     * As an alternative to adding Items via Link, you can also use the &#x60;/transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @param transferMigrateAccountRequest  (required)
     * @return TransferMigrateAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfermigrate_account">Migrate account into Transfers Documentation</a>
     */
    public TransferMigrateAccountResponse transferMigrateAccount(TransferMigrateAccountRequest transferMigrateAccountRequest) throws ApiException {
        ApiResponse<TransferMigrateAccountResponse> localVarResp = transferMigrateAccountWithHttpInfo(transferMigrateAccountRequest);
        return localVarResp.getData();
    }

    /**
     * Migrate account into Transfers
     * As an alternative to adding Items via Link, you can also use the &#x60;/transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @param transferMigrateAccountRequest  (required)
     * @return ApiResponse&lt;TransferMigrateAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfermigrate_account">Migrate account into Transfers Documentation</a>
     */
    public ApiResponse<TransferMigrateAccountResponse> transferMigrateAccountWithHttpInfo(TransferMigrateAccountRequest transferMigrateAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = transferMigrateAccountValidateBeforeCall(transferMigrateAccountRequest, null);
        Type localVarReturnType = new TypeToken<TransferMigrateAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Migrate account into Transfers (asynchronously)
     * As an alternative to adding Items via Link, you can also use the &#x60;/transfer/migrate_account&#x60; endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as &#x60;/accounts/balance/get&#x60;, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to &#x60;/transfer/migrate_account&#x60; is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @param transferMigrateAccountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfermigrate_account">Migrate account into Transfers Documentation</a>
     */
    public okhttp3.Call transferMigrateAccountAsync(TransferMigrateAccountRequest transferMigrateAccountRequest, final ApiCallback<TransferMigrateAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferMigrateAccountValidateBeforeCall(transferMigrateAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferMigrateAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferOriginatorCreate
     * @param transferOriginatorCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferoriginatorcreate">Create a new originator Documentation</a>
     */
    public okhttp3.Call transferOriginatorCreateCall(TransferOriginatorCreateRequest transferOriginatorCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferOriginatorCreateRequest;

        // create path and map variables
        String localVarPath = "/transfer/originator/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferOriginatorCreateValidateBeforeCall(TransferOriginatorCreateRequest transferOriginatorCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferOriginatorCreateRequest' is set
        if (transferOriginatorCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'transferOriginatorCreateRequest' when calling transferOriginatorCreate(Async)");
        }

        return transferOriginatorCreateCall(transferOriginatorCreateRequest, _callback);

    }

    /**
     * Create a new originator
     * Use the &#x60;/transfer/originator/create&#x60; endpoint to create a new originator and return an &#x60;originator_client_id&#x60;.
     * @param transferOriginatorCreateRequest  (required)
     * @return TransferOriginatorCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferoriginatorcreate">Create a new originator Documentation</a>
     */
    public TransferOriginatorCreateResponse transferOriginatorCreate(TransferOriginatorCreateRequest transferOriginatorCreateRequest) throws ApiException {
        ApiResponse<TransferOriginatorCreateResponse> localVarResp = transferOriginatorCreateWithHttpInfo(transferOriginatorCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new originator
     * Use the &#x60;/transfer/originator/create&#x60; endpoint to create a new originator and return an &#x60;originator_client_id&#x60;.
     * @param transferOriginatorCreateRequest  (required)
     * @return ApiResponse&lt;TransferOriginatorCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferoriginatorcreate">Create a new originator Documentation</a>
     */
    public ApiResponse<TransferOriginatorCreateResponse> transferOriginatorCreateWithHttpInfo(TransferOriginatorCreateRequest transferOriginatorCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = transferOriginatorCreateValidateBeforeCall(transferOriginatorCreateRequest, null);
        Type localVarReturnType = new TypeToken<TransferOriginatorCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new originator (asynchronously)
     * Use the &#x60;/transfer/originator/create&#x60; endpoint to create a new originator and return an &#x60;originator_client_id&#x60;.
     * @param transferOriginatorCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferoriginatorcreate">Create a new originator Documentation</a>
     */
    public okhttp3.Call transferOriginatorCreateAsync(TransferOriginatorCreateRequest transferOriginatorCreateRequest, final ApiCallback<TransferOriginatorCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferOriginatorCreateValidateBeforeCall(transferOriginatorCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferOriginatorCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferOriginatorGet
     * @param transferOriginatorGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferoriginatorget">Get status of an originator&#39;s onboarding Documentation</a>
     */
    public okhttp3.Call transferOriginatorGetCall(TransferOriginatorGetRequest transferOriginatorGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferOriginatorGetRequest;

        // create path and map variables
        String localVarPath = "/transfer/originator/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "examples"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferOriginatorGetValidateBeforeCall(TransferOriginatorGetRequest transferOriginatorGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferOriginatorGetRequest' is set
        if (transferOriginatorGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transferOriginatorGetRequest' when calling transferOriginatorGet(Async)");
        }

        return transferOriginatorGetCall(transferOriginatorGetRequest, _callback);

    }

    /**
     * Get status of an originator&#39;s onboarding
     * The &#x60;/transfer/originator/get&#x60; endpoint gets status updates for an originator&#39;s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
     * @param transferOriginatorGetRequest  (required)
     * @return TransferOriginatorGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferoriginatorget">Get status of an originator&#39;s onboarding Documentation</a>
     */
    public TransferOriginatorGetResponse transferOriginatorGet(TransferOriginatorGetRequest transferOriginatorGetRequest) throws ApiException {
        ApiResponse<TransferOriginatorGetResponse> localVarResp = transferOriginatorGetWithHttpInfo(transferOriginatorGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get status of an originator&#39;s onboarding
     * The &#x60;/transfer/originator/get&#x60; endpoint gets status updates for an originator&#39;s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
     * @param transferOriginatorGetRequest  (required)
     * @return ApiResponse&lt;TransferOriginatorGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferoriginatorget">Get status of an originator&#39;s onboarding Documentation</a>
     */
    public ApiResponse<TransferOriginatorGetResponse> transferOriginatorGetWithHttpInfo(TransferOriginatorGetRequest transferOriginatorGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transferOriginatorGetValidateBeforeCall(transferOriginatorGetRequest, null);
        Type localVarReturnType = new TypeToken<TransferOriginatorGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get status of an originator&#39;s onboarding (asynchronously)
     * The &#x60;/transfer/originator/get&#x60; endpoint gets status updates for an originator&#39;s onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
     * @param transferOriginatorGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferoriginatorget">Get status of an originator&#39;s onboarding Documentation</a>
     */
    public okhttp3.Call transferOriginatorGetAsync(TransferOriginatorGetRequest transferOriginatorGetRequest, final ApiCallback<TransferOriginatorGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferOriginatorGetValidateBeforeCall(transferOriginatorGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferOriginatorGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferOriginatorList
     * @param transferOriginatorListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferoriginatorlist">Get status of all originators&#39; onboarding Documentation</a>
     */
    public okhttp3.Call transferOriginatorListCall(TransferOriginatorListRequest transferOriginatorListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferOriginatorListRequest;

        // create path and map variables
        String localVarPath = "/transfer/originator/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferOriginatorListValidateBeforeCall(TransferOriginatorListRequest transferOriginatorListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferOriginatorListRequest' is set
        if (transferOriginatorListRequest == null) {
            throw new ApiException("Missing the required parameter 'transferOriginatorListRequest' when calling transferOriginatorList(Async)");
        }

        return transferOriginatorListCall(transferOriginatorListRequest, _callback);

    }

    /**
     * Get status of all originators&#39; onboarding
     * The &#x60;/transfer/originator/list&#x60; endpoint gets status updates for all of your originators&#39; onboarding. This information is also available via the Plaid dashboard.
     * @param transferOriginatorListRequest  (required)
     * @return TransferOriginatorListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferoriginatorlist">Get status of all originators&#39; onboarding Documentation</a>
     */
    public TransferOriginatorListResponse transferOriginatorList(TransferOriginatorListRequest transferOriginatorListRequest) throws ApiException {
        ApiResponse<TransferOriginatorListResponse> localVarResp = transferOriginatorListWithHttpInfo(transferOriginatorListRequest);
        return localVarResp.getData();
    }

    /**
     * Get status of all originators&#39; onboarding
     * The &#x60;/transfer/originator/list&#x60; endpoint gets status updates for all of your originators&#39; onboarding. This information is also available via the Plaid dashboard.
     * @param transferOriginatorListRequest  (required)
     * @return ApiResponse&lt;TransferOriginatorListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferoriginatorlist">Get status of all originators&#39; onboarding Documentation</a>
     */
    public ApiResponse<TransferOriginatorListResponse> transferOriginatorListWithHttpInfo(TransferOriginatorListRequest transferOriginatorListRequest) throws ApiException {
        okhttp3.Call localVarCall = transferOriginatorListValidateBeforeCall(transferOriginatorListRequest, null);
        Type localVarReturnType = new TypeToken<TransferOriginatorListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get status of all originators&#39; onboarding (asynchronously)
     * The &#x60;/transfer/originator/list&#x60; endpoint gets status updates for all of your originators&#39; onboarding. This information is also available via the Plaid dashboard.
     * @param transferOriginatorListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferoriginatorlist">Get status of all originators&#39; onboarding Documentation</a>
     */
    public okhttp3.Call transferOriginatorListAsync(TransferOriginatorListRequest transferOriginatorListRequest, final ApiCallback<TransferOriginatorListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferOriginatorListValidateBeforeCall(transferOriginatorListRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferOriginatorListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferQuestionnaireCreate
     * @param transferQuestionnaireCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferquestionnairecreate">Generate a Plaid-hosted onboarding UI URL. Documentation</a>
     */
    public okhttp3.Call transferQuestionnaireCreateCall(TransferQuestionnaireCreateRequest transferQuestionnaireCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferQuestionnaireCreateRequest;

        // create path and map variables
        String localVarPath = "/transfer/questionnaire/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferQuestionnaireCreateValidateBeforeCall(TransferQuestionnaireCreateRequest transferQuestionnaireCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferQuestionnaireCreateRequest' is set
        if (transferQuestionnaireCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'transferQuestionnaireCreateRequest' when calling transferQuestionnaireCreate(Async)");
        }

        return transferQuestionnaireCreateCall(transferQuestionnaireCreateRequest, _callback);

    }

    /**
     * Generate a Plaid-hosted onboarding UI URL.
     * The &#x60;/transfer/questionnaire/create&#x60; endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
     * @param transferQuestionnaireCreateRequest  (required)
     * @return TransferQuestionnaireCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferquestionnairecreate">Generate a Plaid-hosted onboarding UI URL. Documentation</a>
     */
    public TransferQuestionnaireCreateResponse transferQuestionnaireCreate(TransferQuestionnaireCreateRequest transferQuestionnaireCreateRequest) throws ApiException {
        ApiResponse<TransferQuestionnaireCreateResponse> localVarResp = transferQuestionnaireCreateWithHttpInfo(transferQuestionnaireCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Generate a Plaid-hosted onboarding UI URL.
     * The &#x60;/transfer/questionnaire/create&#x60; endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
     * @param transferQuestionnaireCreateRequest  (required)
     * @return ApiResponse&lt;TransferQuestionnaireCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferquestionnairecreate">Generate a Plaid-hosted onboarding UI URL. Documentation</a>
     */
    public ApiResponse<TransferQuestionnaireCreateResponse> transferQuestionnaireCreateWithHttpInfo(TransferQuestionnaireCreateRequest transferQuestionnaireCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = transferQuestionnaireCreateValidateBeforeCall(transferQuestionnaireCreateRequest, null);
        Type localVarReturnType = new TypeToken<TransferQuestionnaireCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a Plaid-hosted onboarding UI URL. (asynchronously)
     * The &#x60;/transfer/questionnaire/create&#x60; endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
     * @param transferQuestionnaireCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferquestionnairecreate">Generate a Plaid-hosted onboarding UI URL. Documentation</a>
     */
    public okhttp3.Call transferQuestionnaireCreateAsync(TransferQuestionnaireCreateRequest transferQuestionnaireCreateRequest, final ApiCallback<TransferQuestionnaireCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferQuestionnaireCreateValidateBeforeCall(transferQuestionnaireCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferQuestionnaireCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferRecurringCancel
     * @param transferRecurringCancelRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrecurringcancel">Cancel a recurring transfer. Documentation</a>
     */
    public okhttp3.Call transferRecurringCancelCall(TransferRecurringCancelRequest transferRecurringCancelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRecurringCancelRequest;

        // create path and map variables
        String localVarPath = "/transfer/recurring/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferRecurringCancelValidateBeforeCall(TransferRecurringCancelRequest transferRecurringCancelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferRecurringCancelRequest' is set
        if (transferRecurringCancelRequest == null) {
            throw new ApiException("Missing the required parameter 'transferRecurringCancelRequest' when calling transferRecurringCancel(Async)");
        }

        return transferRecurringCancelCall(transferRecurringCancelRequest, _callback);

    }

    /**
     * Cancel a recurring transfer.
     * Use the &#x60;/transfer/recurring/cancel&#x60; endpoint to cancel a recurring transfer.  Scheduled transfer that hasn&#39;t been submitted to bank will be cancelled.
     * @param transferRecurringCancelRequest  (required)
     * @return TransferRecurringCancelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrecurringcancel">Cancel a recurring transfer. Documentation</a>
     */
    public TransferRecurringCancelResponse transferRecurringCancel(TransferRecurringCancelRequest transferRecurringCancelRequest) throws ApiException {
        ApiResponse<TransferRecurringCancelResponse> localVarResp = transferRecurringCancelWithHttpInfo(transferRecurringCancelRequest);
        return localVarResp.getData();
    }

    /**
     * Cancel a recurring transfer.
     * Use the &#x60;/transfer/recurring/cancel&#x60; endpoint to cancel a recurring transfer.  Scheduled transfer that hasn&#39;t been submitted to bank will be cancelled.
     * @param transferRecurringCancelRequest  (required)
     * @return ApiResponse&lt;TransferRecurringCancelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrecurringcancel">Cancel a recurring transfer. Documentation</a>
     */
    public ApiResponse<TransferRecurringCancelResponse> transferRecurringCancelWithHttpInfo(TransferRecurringCancelRequest transferRecurringCancelRequest) throws ApiException {
        okhttp3.Call localVarCall = transferRecurringCancelValidateBeforeCall(transferRecurringCancelRequest, null);
        Type localVarReturnType = new TypeToken<TransferRecurringCancelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a recurring transfer. (asynchronously)
     * Use the &#x60;/transfer/recurring/cancel&#x60; endpoint to cancel a recurring transfer.  Scheduled transfer that hasn&#39;t been submitted to bank will be cancelled.
     * @param transferRecurringCancelRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrecurringcancel">Cancel a recurring transfer. Documentation</a>
     */
    public okhttp3.Call transferRecurringCancelAsync(TransferRecurringCancelRequest transferRecurringCancelRequest, final ApiCallback<TransferRecurringCancelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferRecurringCancelValidateBeforeCall(transferRecurringCancelRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferRecurringCancelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferRecurringCreate
     * @param transferRecurringCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrecurringcreate">Create a recurring transfer Documentation</a>
     */
    public okhttp3.Call transferRecurringCreateCall(TransferRecurringCreateRequest transferRecurringCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRecurringCreateRequest;

        // create path and map variables
        String localVarPath = "/transfer/recurring/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferRecurringCreateValidateBeforeCall(TransferRecurringCreateRequest transferRecurringCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferRecurringCreateRequest' is set
        if (transferRecurringCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'transferRecurringCreateRequest' when calling transferRecurringCreate(Async)");
        }

        return transferRecurringCreateCall(transferRecurringCreateRequest, _callback);

    }

    /**
     * Create a recurring transfer
     * Use the &#x60;/transfer/recurring/create&#x60; endpoint to initiate a new recurring transfer.
     * @param transferRecurringCreateRequest  (required)
     * @return TransferRecurringCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrecurringcreate">Create a recurring transfer Documentation</a>
     */
    public TransferRecurringCreateResponse transferRecurringCreate(TransferRecurringCreateRequest transferRecurringCreateRequest) throws ApiException {
        ApiResponse<TransferRecurringCreateResponse> localVarResp = transferRecurringCreateWithHttpInfo(transferRecurringCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a recurring transfer
     * Use the &#x60;/transfer/recurring/create&#x60; endpoint to initiate a new recurring transfer.
     * @param transferRecurringCreateRequest  (required)
     * @return ApiResponse&lt;TransferRecurringCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrecurringcreate">Create a recurring transfer Documentation</a>
     */
    public ApiResponse<TransferRecurringCreateResponse> transferRecurringCreateWithHttpInfo(TransferRecurringCreateRequest transferRecurringCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = transferRecurringCreateValidateBeforeCall(transferRecurringCreateRequest, null);
        Type localVarReturnType = new TypeToken<TransferRecurringCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a recurring transfer (asynchronously)
     * Use the &#x60;/transfer/recurring/create&#x60; endpoint to initiate a new recurring transfer.
     * @param transferRecurringCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrecurringcreate">Create a recurring transfer Documentation</a>
     */
    public okhttp3.Call transferRecurringCreateAsync(TransferRecurringCreateRequest transferRecurringCreateRequest, final ApiCallback<TransferRecurringCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferRecurringCreateValidateBeforeCall(transferRecurringCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferRecurringCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferRecurringGet
     * @param transferRecurringGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrecurringget">Retrieve a recurring transfer Documentation</a>
     */
    public okhttp3.Call transferRecurringGetCall(TransferRecurringGetRequest transferRecurringGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRecurringGetRequest;

        // create path and map variables
        String localVarPath = "/transfer/recurring/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferRecurringGetValidateBeforeCall(TransferRecurringGetRequest transferRecurringGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferRecurringGetRequest' is set
        if (transferRecurringGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transferRecurringGetRequest' when calling transferRecurringGet(Async)");
        }

        return transferRecurringGetCall(transferRecurringGetRequest, _callback);

    }

    /**
     * Retrieve a recurring transfer
     * The &#x60;/transfer/recurring/get&#x60; fetches information about the recurring transfer corresponding to the given &#x60;recurring_transfer_id&#x60;.
     * @param transferRecurringGetRequest  (required)
     * @return TransferRecurringGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrecurringget">Retrieve a recurring transfer Documentation</a>
     */
    public TransferRecurringGetResponse transferRecurringGet(TransferRecurringGetRequest transferRecurringGetRequest) throws ApiException {
        ApiResponse<TransferRecurringGetResponse> localVarResp = transferRecurringGetWithHttpInfo(transferRecurringGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a recurring transfer
     * The &#x60;/transfer/recurring/get&#x60; fetches information about the recurring transfer corresponding to the given &#x60;recurring_transfer_id&#x60;.
     * @param transferRecurringGetRequest  (required)
     * @return ApiResponse&lt;TransferRecurringGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrecurringget">Retrieve a recurring transfer Documentation</a>
     */
    public ApiResponse<TransferRecurringGetResponse> transferRecurringGetWithHttpInfo(TransferRecurringGetRequest transferRecurringGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transferRecurringGetValidateBeforeCall(transferRecurringGetRequest, null);
        Type localVarReturnType = new TypeToken<TransferRecurringGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a recurring transfer (asynchronously)
     * The &#x60;/transfer/recurring/get&#x60; fetches information about the recurring transfer corresponding to the given &#x60;recurring_transfer_id&#x60;.
     * @param transferRecurringGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrecurringget">Retrieve a recurring transfer Documentation</a>
     */
    public okhttp3.Call transferRecurringGetAsync(TransferRecurringGetRequest transferRecurringGetRequest, final ApiCallback<TransferRecurringGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferRecurringGetValidateBeforeCall(transferRecurringGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferRecurringGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferRecurringList
     * @param transferRecurringListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrecurringlist">List recurring transfers Documentation</a>
     */
    public okhttp3.Call transferRecurringListCall(TransferRecurringListRequest transferRecurringListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRecurringListRequest;

        // create path and map variables
        String localVarPath = "/transfer/recurring/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferRecurringListValidateBeforeCall(TransferRecurringListRequest transferRecurringListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferRecurringListRequest' is set
        if (transferRecurringListRequest == null) {
            throw new ApiException("Missing the required parameter 'transferRecurringListRequest' when calling transferRecurringList(Async)");
        }

        return transferRecurringListCall(transferRecurringListRequest, _callback);

    }

    /**
     * List recurring transfers
     * Use the &#x60;/transfer/recurring/list&#x60; endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired recurring transfers. 
     * @param transferRecurringListRequest  (required)
     * @return TransferRecurringListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrecurringlist">List recurring transfers Documentation</a>
     */
    public TransferRecurringListResponse transferRecurringList(TransferRecurringListRequest transferRecurringListRequest) throws ApiException {
        ApiResponse<TransferRecurringListResponse> localVarResp = transferRecurringListWithHttpInfo(transferRecurringListRequest);
        return localVarResp.getData();
    }

    /**
     * List recurring transfers
     * Use the &#x60;/transfer/recurring/list&#x60; endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired recurring transfers. 
     * @param transferRecurringListRequest  (required)
     * @return ApiResponse&lt;TransferRecurringListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrecurringlist">List recurring transfers Documentation</a>
     */
    public ApiResponse<TransferRecurringListResponse> transferRecurringListWithHttpInfo(TransferRecurringListRequest transferRecurringListRequest) throws ApiException {
        okhttp3.Call localVarCall = transferRecurringListValidateBeforeCall(transferRecurringListRequest, null);
        Type localVarReturnType = new TypeToken<TransferRecurringListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List recurring transfers (asynchronously)
     * Use the &#x60;/transfer/recurring/list&#x60; endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the &#x60;count&#x60; and &#x60;offset&#x60; query parameters to retrieve the desired recurring transfers. 
     * @param transferRecurringListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrecurringlist">List recurring transfers Documentation</a>
     */
    public okhttp3.Call transferRecurringListAsync(TransferRecurringListRequest transferRecurringListRequest, final ApiCallback<TransferRecurringListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferRecurringListValidateBeforeCall(transferRecurringListRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferRecurringListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferRefundCancel
     * @param transferRefundCancelRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrefundcancel">Cancel a refund Documentation</a>
     */
    public okhttp3.Call transferRefundCancelCall(TransferRefundCancelRequest transferRefundCancelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRefundCancelRequest;

        // create path and map variables
        String localVarPath = "/transfer/refund/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferRefundCancelValidateBeforeCall(TransferRefundCancelRequest transferRefundCancelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferRefundCancelRequest' is set
        if (transferRefundCancelRequest == null) {
            throw new ApiException("Missing the required parameter 'transferRefundCancelRequest' when calling transferRefundCancel(Async)");
        }

        return transferRefundCancelCall(transferRefundCancelRequest, _callback);

    }

    /**
     * Cancel a refund
     * Use the &#x60;/transfer/refund/cancel&#x60; endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
     * @param transferRefundCancelRequest  (required)
     * @return TransferRefundCancelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrefundcancel">Cancel a refund Documentation</a>
     */
    public TransferRefundCancelResponse transferRefundCancel(TransferRefundCancelRequest transferRefundCancelRequest) throws ApiException {
        ApiResponse<TransferRefundCancelResponse> localVarResp = transferRefundCancelWithHttpInfo(transferRefundCancelRequest);
        return localVarResp.getData();
    }

    /**
     * Cancel a refund
     * Use the &#x60;/transfer/refund/cancel&#x60; endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
     * @param transferRefundCancelRequest  (required)
     * @return ApiResponse&lt;TransferRefundCancelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrefundcancel">Cancel a refund Documentation</a>
     */
    public ApiResponse<TransferRefundCancelResponse> transferRefundCancelWithHttpInfo(TransferRefundCancelRequest transferRefundCancelRequest) throws ApiException {
        okhttp3.Call localVarCall = transferRefundCancelValidateBeforeCall(transferRefundCancelRequest, null);
        Type localVarReturnType = new TypeToken<TransferRefundCancelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a refund (asynchronously)
     * Use the &#x60;/transfer/refund/cancel&#x60; endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
     * @param transferRefundCancelRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrefundcancel">Cancel a refund Documentation</a>
     */
    public okhttp3.Call transferRefundCancelAsync(TransferRefundCancelRequest transferRefundCancelRequest, final ApiCallback<TransferRefundCancelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferRefundCancelValidateBeforeCall(transferRefundCancelRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferRefundCancelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferRefundCreate
     * @param transferRefundCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrefundcreate">Create a refund Documentation</a>
     */
    public okhttp3.Call transferRefundCreateCall(TransferRefundCreateRequest transferRefundCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRefundCreateRequest;

        // create path and map variables
        String localVarPath = "/transfer/refund/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferRefundCreateValidateBeforeCall(TransferRefundCreateRequest transferRefundCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferRefundCreateRequest' is set
        if (transferRefundCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'transferRefundCreateRequest' when calling transferRefundCreate(Async)");
        }

        return transferRefundCreateCall(transferRefundCreateRequest, _callback);

    }

    /**
     * Create a refund
     * Use the &#x60;/transfer/refund/create&#x60; endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 3 business days following the transfer&#39;s settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
     * @param transferRefundCreateRequest  (required)
     * @return TransferRefundCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrefundcreate">Create a refund Documentation</a>
     */
    public TransferRefundCreateResponse transferRefundCreate(TransferRefundCreateRequest transferRefundCreateRequest) throws ApiException {
        ApiResponse<TransferRefundCreateResponse> localVarResp = transferRefundCreateWithHttpInfo(transferRefundCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a refund
     * Use the &#x60;/transfer/refund/create&#x60; endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 3 business days following the transfer&#39;s settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
     * @param transferRefundCreateRequest  (required)
     * @return ApiResponse&lt;TransferRefundCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrefundcreate">Create a refund Documentation</a>
     */
    public ApiResponse<TransferRefundCreateResponse> transferRefundCreateWithHttpInfo(TransferRefundCreateRequest transferRefundCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = transferRefundCreateValidateBeforeCall(transferRefundCreateRequest, null);
        Type localVarReturnType = new TypeToken<TransferRefundCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a refund (asynchronously)
     * Use the &#x60;/transfer/refund/create&#x60; endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.  Processing of the refund will not occur until at least 3 business days following the transfer&#39;s settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
     * @param transferRefundCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrefundcreate">Create a refund Documentation</a>
     */
    public okhttp3.Call transferRefundCreateAsync(TransferRefundCreateRequest transferRefundCreateRequest, final ApiCallback<TransferRefundCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferRefundCreateValidateBeforeCall(transferRefundCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferRefundCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferRefundGet
     * @param transferRefundGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrefundget">Retrieve a refund Documentation</a>
     */
    public okhttp3.Call transferRefundGetCall(TransferRefundGetRequest transferRefundGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRefundGetRequest;

        // create path and map variables
        String localVarPath = "/transfer/refund/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferRefundGetValidateBeforeCall(TransferRefundGetRequest transferRefundGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferRefundGetRequest' is set
        if (transferRefundGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transferRefundGetRequest' when calling transferRefundGet(Async)");
        }

        return transferRefundGetCall(transferRefundGetRequest, _callback);

    }

    /**
     * Retrieve a refund
     * The &#x60;/transfer/refund/get&#x60; endpoint fetches information about the refund corresponding to the given &#x60;refund_id&#x60;.
     * @param transferRefundGetRequest  (required)
     * @return TransferRefundGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrefundget">Retrieve a refund Documentation</a>
     */
    public TransferRefundGetResponse transferRefundGet(TransferRefundGetRequest transferRefundGetRequest) throws ApiException {
        ApiResponse<TransferRefundGetResponse> localVarResp = transferRefundGetWithHttpInfo(transferRefundGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a refund
     * The &#x60;/transfer/refund/get&#x60; endpoint fetches information about the refund corresponding to the given &#x60;refund_id&#x60;.
     * @param transferRefundGetRequest  (required)
     * @return ApiResponse&lt;TransferRefundGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrefundget">Retrieve a refund Documentation</a>
     */
    public ApiResponse<TransferRefundGetResponse> transferRefundGetWithHttpInfo(TransferRefundGetRequest transferRefundGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transferRefundGetValidateBeforeCall(transferRefundGetRequest, null);
        Type localVarReturnType = new TypeToken<TransferRefundGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a refund (asynchronously)
     * The &#x60;/transfer/refund/get&#x60; endpoint fetches information about the refund corresponding to the given &#x60;refund_id&#x60;.
     * @param transferRefundGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrefundget">Retrieve a refund Documentation</a>
     */
    public okhttp3.Call transferRefundGetAsync(TransferRefundGetRequest transferRefundGetRequest, final ApiCallback<TransferRefundGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferRefundGetValidateBeforeCall(transferRefundGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferRefundGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferRepaymentList
     * @param transferRepaymentListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrepaymentlist">Lists historical repayments Documentation</a>
     */
    public okhttp3.Call transferRepaymentListCall(TransferRepaymentListRequest transferRepaymentListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRepaymentListRequest;

        // create path and map variables
        String localVarPath = "/transfer/repayment/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferRepaymentListValidateBeforeCall(TransferRepaymentListRequest transferRepaymentListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferRepaymentListRequest' is set
        if (transferRepaymentListRequest == null) {
            throw new ApiException("Missing the required parameter 'transferRepaymentListRequest' when calling transferRepaymentList(Async)");
        }

        return transferRepaymentListCall(transferRepaymentListRequest, _callback);

    }

    /**
     * Lists historical repayments
     * The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
     * @param transferRepaymentListRequest  (required)
     * @return TransferRepaymentListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrepaymentlist">Lists historical repayments Documentation</a>
     */
    public TransferRepaymentListResponse transferRepaymentList(TransferRepaymentListRequest transferRepaymentListRequest) throws ApiException {
        ApiResponse<TransferRepaymentListResponse> localVarResp = transferRepaymentListWithHttpInfo(transferRepaymentListRequest);
        return localVarResp.getData();
    }

    /**
     * Lists historical repayments
     * The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
     * @param transferRepaymentListRequest  (required)
     * @return ApiResponse&lt;TransferRepaymentListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrepaymentlist">Lists historical repayments Documentation</a>
     */
    public ApiResponse<TransferRepaymentListResponse> transferRepaymentListWithHttpInfo(TransferRepaymentListRequest transferRepaymentListRequest) throws ApiException {
        okhttp3.Call localVarCall = transferRepaymentListValidateBeforeCall(transferRepaymentListRequest, null);
        Type localVarReturnType = new TypeToken<TransferRepaymentListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists historical repayments (asynchronously)
     * The &#x60;/transfer/repayment/list&#x60; endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given &#x60;start_time&#x60;.
     * @param transferRepaymentListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrepaymentlist">Lists historical repayments Documentation</a>
     */
    public okhttp3.Call transferRepaymentListAsync(TransferRepaymentListRequest transferRepaymentListRequest, final ApiCallback<TransferRepaymentListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferRepaymentListValidateBeforeCall(transferRepaymentListRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferRepaymentListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferRepaymentReturnList
     * @param transferRepaymentReturnListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrepaymentreturnlist">List the returns included in a repayment Documentation</a>
     */
    public okhttp3.Call transferRepaymentReturnListCall(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRepaymentReturnListRequest;

        // create path and map variables
        String localVarPath = "/transfer/repayment/return/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferRepaymentReturnListValidateBeforeCall(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferRepaymentReturnListRequest' is set
        if (transferRepaymentReturnListRequest == null) {
            throw new ApiException("Missing the required parameter 'transferRepaymentReturnListRequest' when calling transferRepaymentReturnList(Async)");
        }

        return transferRepaymentReturnListCall(transferRepaymentReturnListRequest, _callback);

    }

    /**
     * List the returns included in a repayment
     * The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
     * @param transferRepaymentReturnListRequest  (required)
     * @return TransferRepaymentReturnListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrepaymentreturnlist">List the returns included in a repayment Documentation</a>
     */
    public TransferRepaymentReturnListResponse transferRepaymentReturnList(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest) throws ApiException {
        ApiResponse<TransferRepaymentReturnListResponse> localVarResp = transferRepaymentReturnListWithHttpInfo(transferRepaymentReturnListRequest);
        return localVarResp.getData();
    }

    /**
     * List the returns included in a repayment
     * The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
     * @param transferRepaymentReturnListRequest  (required)
     * @return ApiResponse&lt;TransferRepaymentReturnListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrepaymentreturnlist">List the returns included in a repayment Documentation</a>
     */
    public ApiResponse<TransferRepaymentReturnListResponse> transferRepaymentReturnListWithHttpInfo(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest) throws ApiException {
        okhttp3.Call localVarCall = transferRepaymentReturnListValidateBeforeCall(transferRepaymentReturnListRequest, null);
        Type localVarReturnType = new TypeToken<TransferRepaymentReturnListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the returns included in a repayment (asynchronously)
     * The &#x60;/transfer/repayment/return/list&#x60; endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
     * @param transferRepaymentReturnListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transferrepaymentreturnlist">List the returns included in a repayment Documentation</a>
     */
    public okhttp3.Call transferRepaymentReturnListAsync(TransferRepaymentReturnListRequest transferRepaymentReturnListRequest, final ApiCallback<TransferRepaymentReturnListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferRepaymentReturnListValidateBeforeCall(transferRepaymentReturnListRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferRepaymentReturnListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferSweepGet
     * @param transferSweepGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfersweepget">Retrieve a sweep Documentation</a>
     */
    public okhttp3.Call transferSweepGetCall(TransferSweepGetRequest transferSweepGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferSweepGetRequest;

        // create path and map variables
        String localVarPath = "/transfer/sweep/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferSweepGetValidateBeforeCall(TransferSweepGetRequest transferSweepGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferSweepGetRequest' is set
        if (transferSweepGetRequest == null) {
            throw new ApiException("Missing the required parameter 'transferSweepGetRequest' when calling transferSweepGet(Async)");
        }

        return transferSweepGetCall(transferSweepGetRequest, _callback);

    }

    /**
     * Retrieve a sweep
     * The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
     * @param transferSweepGetRequest  (required)
     * @return TransferSweepGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfersweepget">Retrieve a sweep Documentation</a>
     */
    public TransferSweepGetResponse transferSweepGet(TransferSweepGetRequest transferSweepGetRequest) throws ApiException {
        ApiResponse<TransferSweepGetResponse> localVarResp = transferSweepGetWithHttpInfo(transferSweepGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a sweep
     * The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
     * @param transferSweepGetRequest  (required)
     * @return ApiResponse&lt;TransferSweepGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfersweepget">Retrieve a sweep Documentation</a>
     */
    public ApiResponse<TransferSweepGetResponse> transferSweepGetWithHttpInfo(TransferSweepGetRequest transferSweepGetRequest) throws ApiException {
        okhttp3.Call localVarCall = transferSweepGetValidateBeforeCall(transferSweepGetRequest, null);
        Type localVarReturnType = new TypeToken<TransferSweepGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a sweep (asynchronously)
     * The &#x60;/transfer/sweep/get&#x60; endpoint fetches a sweep corresponding to the given &#x60;sweep_id&#x60;.
     * @param transferSweepGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfersweepget">Retrieve a sweep Documentation</a>
     */
    public okhttp3.Call transferSweepGetAsync(TransferSweepGetRequest transferSweepGetRequest, final ApiCallback<TransferSweepGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferSweepGetValidateBeforeCall(transferSweepGetRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferSweepGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferSweepList
     * @param transferSweepListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfersweeplist">List sweeps Documentation</a>
     */
    public okhttp3.Call transferSweepListCall(TransferSweepListRequest transferSweepListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferSweepListRequest;

        // create path and map variables
        String localVarPath = "/transfer/sweep/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferSweepListValidateBeforeCall(TransferSweepListRequest transferSweepListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferSweepListRequest' is set
        if (transferSweepListRequest == null) {
            throw new ApiException("Missing the required parameter 'transferSweepListRequest' when calling transferSweepList(Async)");
        }

        return transferSweepListCall(transferSweepListRequest, _callback);

    }

    /**
     * List sweeps
     * The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
     * @param transferSweepListRequest  (required)
     * @return TransferSweepListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfersweeplist">List sweeps Documentation</a>
     */
    public TransferSweepListResponse transferSweepList(TransferSweepListRequest transferSweepListRequest) throws ApiException {
        ApiResponse<TransferSweepListResponse> localVarResp = transferSweepListWithHttpInfo(transferSweepListRequest);
        return localVarResp.getData();
    }

    /**
     * List sweeps
     * The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
     * @param transferSweepListRequest  (required)
     * @return ApiResponse&lt;TransferSweepListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfersweeplist">List sweeps Documentation</a>
     */
    public ApiResponse<TransferSweepListResponse> transferSweepListWithHttpInfo(TransferSweepListRequest transferSweepListRequest) throws ApiException {
        okhttp3.Call localVarCall = transferSweepListValidateBeforeCall(transferSweepListRequest, null);
        Type localVarReturnType = new TypeToken<TransferSweepListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List sweeps (asynchronously)
     * The &#x60;/transfer/sweep/list&#x60; endpoint fetches sweeps matching the given filters.
     * @param transferSweepListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/transfer/#transfersweeplist">List sweeps Documentation</a>
     */
    public okhttp3.Call transferSweepListAsync(TransferSweepListRequest transferSweepListRequest, final ApiCallback<TransferSweepListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferSweepListValidateBeforeCall(transferSweepListRequest, _callback);
        Type localVarReturnType = new TypeToken<TransferSweepListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userCreate
     * @param userCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#usercreate">Create user Documentation</a>
     */
    public okhttp3.Call userCreateCall(UserCreateRequest userCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userCreateRequest;

        // create path and map variables
        String localVarPath = "/user/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userCreateValidateBeforeCall(UserCreateRequest userCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userCreateRequest' is set
        if (userCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'userCreateRequest' when calling userCreate(Async)");
        }

        return userCreateCall(userCreateRequest, _callback);

    }

    /**
     * Create user
     * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.  If you call the endpoint multiple times with the same &#x60;client_user_id&#x60;, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given &#x60;client_user_id&#x60;.  Ensure that you store the &#x60;user_token&#x60; along with your user&#39;s identifier in your database, as it is not possible to retrieve a previously created &#x60;user_token&#x60;.
     * @param userCreateRequest  (required)
     * @return UserCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#usercreate">Create user Documentation</a>
     */
    public UserCreateResponse userCreate(UserCreateRequest userCreateRequest) throws ApiException {
        ApiResponse<UserCreateResponse> localVarResp = userCreateWithHttpInfo(userCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create user
     * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.  If you call the endpoint multiple times with the same &#x60;client_user_id&#x60;, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given &#x60;client_user_id&#x60;.  Ensure that you store the &#x60;user_token&#x60; along with your user&#39;s identifier in your database, as it is not possible to retrieve a previously created &#x60;user_token&#x60;.
     * @param userCreateRequest  (required)
     * @return ApiResponse&lt;UserCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#usercreate">Create user Documentation</a>
     */
    public ApiResponse<UserCreateResponse> userCreateWithHttpInfo(UserCreateRequest userCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = userCreateValidateBeforeCall(userCreateRequest, null);
        Type localVarReturnType = new TypeToken<UserCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create user (asynchronously)
     * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.  If you call the endpoint multiple times with the same &#x60;client_user_id&#x60;, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given &#x60;client_user_id&#x60;.  Ensure that you store the &#x60;user_token&#x60; along with your user&#39;s identifier in your database, as it is not possible to retrieve a previously created &#x60;user_token&#x60;.
     * @param userCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/income/#usercreate">Create user Documentation</a>
     */
    public okhttp3.Call userCreateAsync(UserCreateRequest userCreateRequest, final ApiCallback<UserCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = userCreateValidateBeforeCall(userCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<UserCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletCreate
     * @param walletCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#walletcreate">Create an e-wallet Documentation</a>
     */
    public okhttp3.Call walletCreateCall(WalletCreateRequest walletCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = walletCreateRequest;

        // create path and map variables
        String localVarPath = "/wallet/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletCreateValidateBeforeCall(WalletCreateRequest walletCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'walletCreateRequest' is set
        if (walletCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'walletCreateRequest' when calling walletCreate(Async)");
        }

        return walletCreateCall(walletCreateRequest, _callback);

    }

    /**
     * Create an e-wallet
     * Create an e-wallet. The response is the newly created e-wallet object.
     * @param walletCreateRequest  (required)
     * @return WalletCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#walletcreate">Create an e-wallet Documentation</a>
     */
    public WalletCreateResponse walletCreate(WalletCreateRequest walletCreateRequest) throws ApiException {
        ApiResponse<WalletCreateResponse> localVarResp = walletCreateWithHttpInfo(walletCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create an e-wallet
     * Create an e-wallet. The response is the newly created e-wallet object.
     * @param walletCreateRequest  (required)
     * @return ApiResponse&lt;WalletCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#walletcreate">Create an e-wallet Documentation</a>
     */
    public ApiResponse<WalletCreateResponse> walletCreateWithHttpInfo(WalletCreateRequest walletCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = walletCreateValidateBeforeCall(walletCreateRequest, null);
        Type localVarReturnType = new TypeToken<WalletCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an e-wallet (asynchronously)
     * Create an e-wallet. The response is the newly created e-wallet object.
     * @param walletCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#walletcreate">Create an e-wallet Documentation</a>
     */
    public okhttp3.Call walletCreateAsync(WalletCreateRequest walletCreateRequest, final ApiCallback<WalletCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletCreateValidateBeforeCall(walletCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<WalletCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletGet
     * @param walletGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#walletget">Fetch an e-wallet Documentation</a>
     */
    public okhttp3.Call walletGetCall(WalletGetRequest walletGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = walletGetRequest;

        // create path and map variables
        String localVarPath = "/wallet/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletGetValidateBeforeCall(WalletGetRequest walletGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'walletGetRequest' is set
        if (walletGetRequest == null) {
            throw new ApiException("Missing the required parameter 'walletGetRequest' when calling walletGet(Async)");
        }

        return walletGetCall(walletGetRequest, _callback);

    }

    /**
     * Fetch an e-wallet
     * Fetch an e-wallet. The response includes the current balance.
     * @param walletGetRequest  (required)
     * @return WalletGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#walletget">Fetch an e-wallet Documentation</a>
     */
    public WalletGetResponse walletGet(WalletGetRequest walletGetRequest) throws ApiException {
        ApiResponse<WalletGetResponse> localVarResp = walletGetWithHttpInfo(walletGetRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch an e-wallet
     * Fetch an e-wallet. The response includes the current balance.
     * @param walletGetRequest  (required)
     * @return ApiResponse&lt;WalletGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#walletget">Fetch an e-wallet Documentation</a>
     */
    public ApiResponse<WalletGetResponse> walletGetWithHttpInfo(WalletGetRequest walletGetRequest) throws ApiException {
        okhttp3.Call localVarCall = walletGetValidateBeforeCall(walletGetRequest, null);
        Type localVarReturnType = new TypeToken<WalletGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch an e-wallet (asynchronously)
     * Fetch an e-wallet. The response includes the current balance.
     * @param walletGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#walletget">Fetch an e-wallet Documentation</a>
     */
    public okhttp3.Call walletGetAsync(WalletGetRequest walletGetRequest, final ApiCallback<WalletGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletGetValidateBeforeCall(walletGetRequest, _callback);
        Type localVarReturnType = new TypeToken<WalletGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletList
     * @param walletListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#walletlist">Fetch a list of e-wallets Documentation</a>
     */
    public okhttp3.Call walletListCall(WalletListRequest walletListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = walletListRequest;

        // create path and map variables
        String localVarPath = "/wallet/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletListValidateBeforeCall(WalletListRequest walletListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'walletListRequest' is set
        if (walletListRequest == null) {
            throw new ApiException("Missing the required parameter 'walletListRequest' when calling walletList(Async)");
        }

        return walletListCall(walletListRequest, _callback);

    }

    /**
     * Fetch a list of e-wallets
     * This endpoint lists all e-wallets in descending order of creation.
     * @param walletListRequest  (required)
     * @return WalletListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#walletlist">Fetch a list of e-wallets Documentation</a>
     */
    public WalletListResponse walletList(WalletListRequest walletListRequest) throws ApiException {
        ApiResponse<WalletListResponse> localVarResp = walletListWithHttpInfo(walletListRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch a list of e-wallets
     * This endpoint lists all e-wallets in descending order of creation.
     * @param walletListRequest  (required)
     * @return ApiResponse&lt;WalletListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#walletlist">Fetch a list of e-wallets Documentation</a>
     */
    public ApiResponse<WalletListResponse> walletListWithHttpInfo(WalletListRequest walletListRequest) throws ApiException {
        okhttp3.Call localVarCall = walletListValidateBeforeCall(walletListRequest, null);
        Type localVarReturnType = new TypeToken<WalletListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a list of e-wallets (asynchronously)
     * This endpoint lists all e-wallets in descending order of creation.
     * @param walletListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#walletlist">Fetch a list of e-wallets Documentation</a>
     */
    public okhttp3.Call walletListAsync(WalletListRequest walletListRequest, final ApiCallback<WalletListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletListValidateBeforeCall(walletListRequest, _callback);
        Type localVarReturnType = new TypeToken<WalletListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletTransactionExecute
     * @param walletTransactionExecuteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#wallettransactionexecute">Execute a transaction using an e-wallet Documentation</a>
     */
    public okhttp3.Call walletTransactionExecuteCall(WalletTransactionExecuteRequest walletTransactionExecuteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = walletTransactionExecuteRequest;

        // create path and map variables
        String localVarPath = "/wallet/transaction/execute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletTransactionExecuteValidateBeforeCall(WalletTransactionExecuteRequest walletTransactionExecuteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'walletTransactionExecuteRequest' is set
        if (walletTransactionExecuteRequest == null) {
            throw new ApiException("Missing the required parameter 'walletTransactionExecuteRequest' when calling walletTransactionExecute(Async)");
        }

        return walletTransactionExecuteCall(walletTransactionExecuteRequest, _callback);

    }

    /**
     * Execute a transaction using an e-wallet
     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
     * @param walletTransactionExecuteRequest  (required)
     * @return WalletTransactionExecuteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#wallettransactionexecute">Execute a transaction using an e-wallet Documentation</a>
     */
    public WalletTransactionExecuteResponse walletTransactionExecute(WalletTransactionExecuteRequest walletTransactionExecuteRequest) throws ApiException {
        ApiResponse<WalletTransactionExecuteResponse> localVarResp = walletTransactionExecuteWithHttpInfo(walletTransactionExecuteRequest);
        return localVarResp.getData();
    }

    /**
     * Execute a transaction using an e-wallet
     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
     * @param walletTransactionExecuteRequest  (required)
     * @return ApiResponse&lt;WalletTransactionExecuteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#wallettransactionexecute">Execute a transaction using an e-wallet Documentation</a>
     */
    public ApiResponse<WalletTransactionExecuteResponse> walletTransactionExecuteWithHttpInfo(WalletTransactionExecuteRequest walletTransactionExecuteRequest) throws ApiException {
        okhttp3.Call localVarCall = walletTransactionExecuteValidateBeforeCall(walletTransactionExecuteRequest, null);
        Type localVarReturnType = new TypeToken<WalletTransactionExecuteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute a transaction using an e-wallet (asynchronously)
     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction. Transactions will settle in seconds to several days, depending on the underlying payment rail.
     * @param walletTransactionExecuteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#wallettransactionexecute">Execute a transaction using an e-wallet Documentation</a>
     */
    public okhttp3.Call walletTransactionExecuteAsync(WalletTransactionExecuteRequest walletTransactionExecuteRequest, final ApiCallback<WalletTransactionExecuteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletTransactionExecuteValidateBeforeCall(walletTransactionExecuteRequest, _callback);
        Type localVarReturnType = new TypeToken<WalletTransactionExecuteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletTransactionGet
     * @param walletTransactionGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#wallettransactionget">Fetch an e-wallet transaction Documentation</a>
     */
    public okhttp3.Call walletTransactionGetCall(WalletTransactionGetRequest walletTransactionGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = walletTransactionGetRequest;

        // create path and map variables
        String localVarPath = "/wallet/transaction/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletTransactionGetValidateBeforeCall(WalletTransactionGetRequest walletTransactionGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'walletTransactionGetRequest' is set
        if (walletTransactionGetRequest == null) {
            throw new ApiException("Missing the required parameter 'walletTransactionGetRequest' when calling walletTransactionGet(Async)");
        }

        return walletTransactionGetCall(walletTransactionGetRequest, _callback);

    }

    /**
     * Fetch an e-wallet transaction
     * Fetch a specific e-wallet transaction
     * @param walletTransactionGetRequest  (required)
     * @return WalletTransactionGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#wallettransactionget">Fetch an e-wallet transaction Documentation</a>
     */
    public WalletTransactionGetResponse walletTransactionGet(WalletTransactionGetRequest walletTransactionGetRequest) throws ApiException {
        ApiResponse<WalletTransactionGetResponse> localVarResp = walletTransactionGetWithHttpInfo(walletTransactionGetRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch an e-wallet transaction
     * Fetch a specific e-wallet transaction
     * @param walletTransactionGetRequest  (required)
     * @return ApiResponse&lt;WalletTransactionGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#wallettransactionget">Fetch an e-wallet transaction Documentation</a>
     */
    public ApiResponse<WalletTransactionGetResponse> walletTransactionGetWithHttpInfo(WalletTransactionGetRequest walletTransactionGetRequest) throws ApiException {
        okhttp3.Call localVarCall = walletTransactionGetValidateBeforeCall(walletTransactionGetRequest, null);
        Type localVarReturnType = new TypeToken<WalletTransactionGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch an e-wallet transaction (asynchronously)
     * Fetch a specific e-wallet transaction
     * @param walletTransactionGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#wallettransactionget">Fetch an e-wallet transaction Documentation</a>
     */
    public okhttp3.Call walletTransactionGetAsync(WalletTransactionGetRequest walletTransactionGetRequest, final ApiCallback<WalletTransactionGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletTransactionGetValidateBeforeCall(walletTransactionGetRequest, _callback);
        Type localVarReturnType = new TypeToken<WalletTransactionGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for walletTransactionList
     * @param walletTransactionListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#wallettransactionlist">List e-wallet transactions Documentation</a>
     */
    public okhttp3.Call walletTransactionListCall(WalletTransactionListRequest walletTransactionListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = walletTransactionListRequest;

        // create path and map variables
        String localVarPath = "/wallet/transaction/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call walletTransactionListValidateBeforeCall(WalletTransactionListRequest walletTransactionListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'walletTransactionListRequest' is set
        if (walletTransactionListRequest == null) {
            throw new ApiException("Missing the required parameter 'walletTransactionListRequest' when calling walletTransactionList(Async)");
        }

        return walletTransactionListCall(walletTransactionListRequest, _callback);

    }

    /**
     * List e-wallet transactions
     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time.
     * @param walletTransactionListRequest  (required)
     * @return WalletTransactionListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#wallettransactionlist">List e-wallet transactions Documentation</a>
     */
    public WalletTransactionListResponse walletTransactionList(WalletTransactionListRequest walletTransactionListRequest) throws ApiException {
        ApiResponse<WalletTransactionListResponse> localVarResp = walletTransactionListWithHttpInfo(walletTransactionListRequest);
        return localVarResp.getData();
    }

    /**
     * List e-wallet transactions
     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time.
     * @param walletTransactionListRequest  (required)
     * @return ApiResponse&lt;WalletTransactionListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#wallettransactionlist">List e-wallet transactions Documentation</a>
     */
    public ApiResponse<WalletTransactionListResponse> walletTransactionListWithHttpInfo(WalletTransactionListRequest walletTransactionListRequest) throws ApiException {
        okhttp3.Call localVarCall = walletTransactionListValidateBeforeCall(walletTransactionListRequest, null);
        Type localVarReturnType = new TypeToken<WalletTransactionListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List e-wallet transactions (asynchronously)
     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the &#x60;created_at&#x60; time.
     * @param walletTransactionListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/virtual-accounts/#wallettransactionlist">List e-wallet transactions Documentation</a>
     */
    public okhttp3.Call walletTransactionListAsync(WalletTransactionListRequest walletTransactionListRequest, final ApiCallback<WalletTransactionListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = walletTransactionListValidateBeforeCall(walletTransactionListRequest, _callback);
        Type localVarReturnType = new TypeToken<WalletTransactionListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningEntityCreate
     * @param watchlistScreeningEntityCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentitycreate">Create a watchlist screening for an entity Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityCreateCall(WatchlistScreeningEntityCreateRequest watchlistScreeningEntityCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningEntityCreateRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/entity/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningEntityCreateValidateBeforeCall(WatchlistScreeningEntityCreateRequest watchlistScreeningEntityCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningEntityCreateRequest' is set
        if (watchlistScreeningEntityCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningEntityCreateRequest' when calling watchlistScreeningEntityCreate(Async)");
        }

        return watchlistScreeningEntityCreateCall(watchlistScreeningEntityCreateRequest, _callback);

    }

    /**
     * Create a watchlist screening for an entity
     * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     * @param watchlistScreeningEntityCreateRequest  (required)
     * @return WatchlistScreeningEntityCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentitycreate">Create a watchlist screening for an entity Documentation</a>
     */
    public WatchlistScreeningEntityCreateResponse watchlistScreeningEntityCreate(WatchlistScreeningEntityCreateRequest watchlistScreeningEntityCreateRequest) throws ApiException {
        ApiResponse<WatchlistScreeningEntityCreateResponse> localVarResp = watchlistScreeningEntityCreateWithHttpInfo(watchlistScreeningEntityCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a watchlist screening for an entity
     * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     * @param watchlistScreeningEntityCreateRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningEntityCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentitycreate">Create a watchlist screening for an entity Documentation</a>
     */
    public ApiResponse<WatchlistScreeningEntityCreateResponse> watchlistScreeningEntityCreateWithHttpInfo(WatchlistScreeningEntityCreateRequest watchlistScreeningEntityCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningEntityCreateValidateBeforeCall(watchlistScreeningEntityCreateRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a watchlist screening for an entity (asynchronously)
     * Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     * @param watchlistScreeningEntityCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentitycreate">Create a watchlist screening for an entity Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityCreateAsync(WatchlistScreeningEntityCreateRequest watchlistScreeningEntityCreateRequest, final ApiCallback<WatchlistScreeningEntityCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningEntityCreateValidateBeforeCall(watchlistScreeningEntityCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningEntityGet
     * @param watchlistScreeningEntityGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityget">Get an entity screening Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityGetCall(WatchlistScreeningEntityGetRequest watchlistScreeningEntityGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningEntityGetRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/entity/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningEntityGetValidateBeforeCall(WatchlistScreeningEntityGetRequest watchlistScreeningEntityGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningEntityGetRequest' is set
        if (watchlistScreeningEntityGetRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningEntityGetRequest' when calling watchlistScreeningEntityGet(Async)");
        }

        return watchlistScreeningEntityGetCall(watchlistScreeningEntityGetRequest, _callback);

    }

    /**
     * Get an entity screening
     * Retrieve an entity watchlist screening.
     * @param watchlistScreeningEntityGetRequest  (required)
     * @return WatchlistScreeningEntityGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityget">Get an entity screening Documentation</a>
     */
    public WatchlistScreeningEntityGetResponse watchlistScreeningEntityGet(WatchlistScreeningEntityGetRequest watchlistScreeningEntityGetRequest) throws ApiException {
        ApiResponse<WatchlistScreeningEntityGetResponse> localVarResp = watchlistScreeningEntityGetWithHttpInfo(watchlistScreeningEntityGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get an entity screening
     * Retrieve an entity watchlist screening.
     * @param watchlistScreeningEntityGetRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningEntityGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityget">Get an entity screening Documentation</a>
     */
    public ApiResponse<WatchlistScreeningEntityGetResponse> watchlistScreeningEntityGetWithHttpInfo(WatchlistScreeningEntityGetRequest watchlistScreeningEntityGetRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningEntityGetValidateBeforeCall(watchlistScreeningEntityGetRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an entity screening (asynchronously)
     * Retrieve an entity watchlist screening.
     * @param watchlistScreeningEntityGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityget">Get an entity screening Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityGetAsync(WatchlistScreeningEntityGetRequest watchlistScreeningEntityGetRequest, final ApiCallback<WatchlistScreeningEntityGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningEntityGetValidateBeforeCall(watchlistScreeningEntityGetRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningEntityHistoryList
     * @param watchlistScreeningEntityHistoryListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityhistorylist">List history for entity watchlist screenings Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityHistoryListCall(WatchlistScreeningEntityHistoryListRequest watchlistScreeningEntityHistoryListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningEntityHistoryListRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/entity/history/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningEntityHistoryListValidateBeforeCall(WatchlistScreeningEntityHistoryListRequest watchlistScreeningEntityHistoryListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningEntityHistoryListRequest' is set
        if (watchlistScreeningEntityHistoryListRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningEntityHistoryListRequest' when calling watchlistScreeningEntityHistoryList(Async)");
        }

        return watchlistScreeningEntityHistoryListCall(watchlistScreeningEntityHistoryListRequest, _callback);

    }

    /**
     * List history for entity watchlist screenings
     * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     * @param watchlistScreeningEntityHistoryListRequest  (required)
     * @return WatchlistScreeningEntityHistoryListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityhistorylist">List history for entity watchlist screenings Documentation</a>
     */
    public WatchlistScreeningEntityHistoryListResponse watchlistScreeningEntityHistoryList(WatchlistScreeningEntityHistoryListRequest watchlistScreeningEntityHistoryListRequest) throws ApiException {
        ApiResponse<WatchlistScreeningEntityHistoryListResponse> localVarResp = watchlistScreeningEntityHistoryListWithHttpInfo(watchlistScreeningEntityHistoryListRequest);
        return localVarResp.getData();
    }

    /**
     * List history for entity watchlist screenings
     * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     * @param watchlistScreeningEntityHistoryListRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningEntityHistoryListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityhistorylist">List history for entity watchlist screenings Documentation</a>
     */
    public ApiResponse<WatchlistScreeningEntityHistoryListResponse> watchlistScreeningEntityHistoryListWithHttpInfo(WatchlistScreeningEntityHistoryListRequest watchlistScreeningEntityHistoryListRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningEntityHistoryListValidateBeforeCall(watchlistScreeningEntityHistoryListRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityHistoryListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List history for entity watchlist screenings (asynchronously)
     * List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     * @param watchlistScreeningEntityHistoryListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityhistorylist">List history for entity watchlist screenings Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityHistoryListAsync(WatchlistScreeningEntityHistoryListRequest watchlistScreeningEntityHistoryListRequest, final ApiCallback<WatchlistScreeningEntityHistoryListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningEntityHistoryListValidateBeforeCall(watchlistScreeningEntityHistoryListRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityHistoryListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningEntityHitList
     * @param watchlistScreeningEntityHitListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityhitlist">List hits for entity watchlist screenings Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityHitListCall(WatchlistScreeningEntityHitListRequest watchlistScreeningEntityHitListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningEntityHitListRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/entity/hit/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningEntityHitListValidateBeforeCall(WatchlistScreeningEntityHitListRequest watchlistScreeningEntityHitListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningEntityHitListRequest' is set
        if (watchlistScreeningEntityHitListRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningEntityHitListRequest' when calling watchlistScreeningEntityHitList(Async)");
        }

        return watchlistScreeningEntityHitListCall(watchlistScreeningEntityHitListRequest, _callback);

    }

    /**
     * List hits for entity watchlist screenings
     * List all hits for the entity watchlist screening.
     * @param watchlistScreeningEntityHitListRequest  (required)
     * @return WatchlistScreeningEntityHitListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityhitlist">List hits for entity watchlist screenings Documentation</a>
     */
    public WatchlistScreeningEntityHitListResponse watchlistScreeningEntityHitList(WatchlistScreeningEntityHitListRequest watchlistScreeningEntityHitListRequest) throws ApiException {
        ApiResponse<WatchlistScreeningEntityHitListResponse> localVarResp = watchlistScreeningEntityHitListWithHttpInfo(watchlistScreeningEntityHitListRequest);
        return localVarResp.getData();
    }

    /**
     * List hits for entity watchlist screenings
     * List all hits for the entity watchlist screening.
     * @param watchlistScreeningEntityHitListRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningEntityHitListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityhitlist">List hits for entity watchlist screenings Documentation</a>
     */
    public ApiResponse<WatchlistScreeningEntityHitListResponse> watchlistScreeningEntityHitListWithHttpInfo(WatchlistScreeningEntityHitListRequest watchlistScreeningEntityHitListRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningEntityHitListValidateBeforeCall(watchlistScreeningEntityHitListRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityHitListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List hits for entity watchlist screenings (asynchronously)
     * List all hits for the entity watchlist screening.
     * @param watchlistScreeningEntityHitListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityhitlist">List hits for entity watchlist screenings Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityHitListAsync(WatchlistScreeningEntityHitListRequest watchlistScreeningEntityHitListRequest, final ApiCallback<WatchlistScreeningEntityHitListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningEntityHitListValidateBeforeCall(watchlistScreeningEntityHitListRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityHitListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningEntityList
     * @param watchlistScreeningEntityListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentitylist">List entity watchlist screenings Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityListCall(WatchlistScreeningEntityListRequest watchlistScreeningEntityListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningEntityListRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/entity/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningEntityListValidateBeforeCall(WatchlistScreeningEntityListRequest watchlistScreeningEntityListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningEntityListRequest' is set
        if (watchlistScreeningEntityListRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningEntityListRequest' when calling watchlistScreeningEntityList(Async)");
        }

        return watchlistScreeningEntityListCall(watchlistScreeningEntityListRequest, _callback);

    }

    /**
     * List entity watchlist screenings
     * List all entity screenings.
     * @param watchlistScreeningEntityListRequest  (required)
     * @return WatchlistScreeningEntityListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentitylist">List entity watchlist screenings Documentation</a>
     */
    public WatchlistScreeningEntityListResponse watchlistScreeningEntityList(WatchlistScreeningEntityListRequest watchlistScreeningEntityListRequest) throws ApiException {
        ApiResponse<WatchlistScreeningEntityListResponse> localVarResp = watchlistScreeningEntityListWithHttpInfo(watchlistScreeningEntityListRequest);
        return localVarResp.getData();
    }

    /**
     * List entity watchlist screenings
     * List all entity screenings.
     * @param watchlistScreeningEntityListRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningEntityListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentitylist">List entity watchlist screenings Documentation</a>
     */
    public ApiResponse<WatchlistScreeningEntityListResponse> watchlistScreeningEntityListWithHttpInfo(WatchlistScreeningEntityListRequest watchlistScreeningEntityListRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningEntityListValidateBeforeCall(watchlistScreeningEntityListRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List entity watchlist screenings (asynchronously)
     * List all entity screenings.
     * @param watchlistScreeningEntityListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentitylist">List entity watchlist screenings Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityListAsync(WatchlistScreeningEntityListRequest watchlistScreeningEntityListRequest, final ApiCallback<WatchlistScreeningEntityListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningEntityListValidateBeforeCall(watchlistScreeningEntityListRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningEntityProgramGet
     * @param watchlistScreeningEntityProgramGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityprogramget">Get entity watchlist screening program Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityProgramGetCall(WatchlistScreeningEntityProgramGetRequest watchlistScreeningEntityProgramGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningEntityProgramGetRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/entity/program/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningEntityProgramGetValidateBeforeCall(WatchlistScreeningEntityProgramGetRequest watchlistScreeningEntityProgramGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningEntityProgramGetRequest' is set
        if (watchlistScreeningEntityProgramGetRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningEntityProgramGetRequest' when calling watchlistScreeningEntityProgramGet(Async)");
        }

        return watchlistScreeningEntityProgramGetCall(watchlistScreeningEntityProgramGetRequest, _callback);

    }

    /**
     * Get entity watchlist screening program
     * Get an entity watchlist screening program
     * @param watchlistScreeningEntityProgramGetRequest  (required)
     * @return WatchlistScreeningEntityProgramGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityprogramget">Get entity watchlist screening program Documentation</a>
     */
    public WatchlistScreeningEntityProgramGetResponse watchlistScreeningEntityProgramGet(WatchlistScreeningEntityProgramGetRequest watchlistScreeningEntityProgramGetRequest) throws ApiException {
        ApiResponse<WatchlistScreeningEntityProgramGetResponse> localVarResp = watchlistScreeningEntityProgramGetWithHttpInfo(watchlistScreeningEntityProgramGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get entity watchlist screening program
     * Get an entity watchlist screening program
     * @param watchlistScreeningEntityProgramGetRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningEntityProgramGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityprogramget">Get entity watchlist screening program Documentation</a>
     */
    public ApiResponse<WatchlistScreeningEntityProgramGetResponse> watchlistScreeningEntityProgramGetWithHttpInfo(WatchlistScreeningEntityProgramGetRequest watchlistScreeningEntityProgramGetRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningEntityProgramGetValidateBeforeCall(watchlistScreeningEntityProgramGetRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityProgramGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get entity watchlist screening program (asynchronously)
     * Get an entity watchlist screening program
     * @param watchlistScreeningEntityProgramGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityprogramget">Get entity watchlist screening program Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityProgramGetAsync(WatchlistScreeningEntityProgramGetRequest watchlistScreeningEntityProgramGetRequest, final ApiCallback<WatchlistScreeningEntityProgramGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningEntityProgramGetValidateBeforeCall(watchlistScreeningEntityProgramGetRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityProgramGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningEntityProgramList
     * @param watchlistScreeningEntityProgramListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityprogramlist">List entity watchlist screening programs Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityProgramListCall(WatchlistScreeningEntityProgramListRequest watchlistScreeningEntityProgramListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningEntityProgramListRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/entity/program/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningEntityProgramListValidateBeforeCall(WatchlistScreeningEntityProgramListRequest watchlistScreeningEntityProgramListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningEntityProgramListRequest' is set
        if (watchlistScreeningEntityProgramListRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningEntityProgramListRequest' when calling watchlistScreeningEntityProgramList(Async)");
        }

        return watchlistScreeningEntityProgramListCall(watchlistScreeningEntityProgramListRequest, _callback);

    }

    /**
     * List entity watchlist screening programs
     * List all entity watchlist screening programs
     * @param watchlistScreeningEntityProgramListRequest  (required)
     * @return WatchlistScreeningEntityProgramListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityprogramlist">List entity watchlist screening programs Documentation</a>
     */
    public WatchlistScreeningEntityProgramListResponse watchlistScreeningEntityProgramList(WatchlistScreeningEntityProgramListRequest watchlistScreeningEntityProgramListRequest) throws ApiException {
        ApiResponse<WatchlistScreeningEntityProgramListResponse> localVarResp = watchlistScreeningEntityProgramListWithHttpInfo(watchlistScreeningEntityProgramListRequest);
        return localVarResp.getData();
    }

    /**
     * List entity watchlist screening programs
     * List all entity watchlist screening programs
     * @param watchlistScreeningEntityProgramListRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningEntityProgramListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityprogramlist">List entity watchlist screening programs Documentation</a>
     */
    public ApiResponse<WatchlistScreeningEntityProgramListResponse> watchlistScreeningEntityProgramListWithHttpInfo(WatchlistScreeningEntityProgramListRequest watchlistScreeningEntityProgramListRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningEntityProgramListValidateBeforeCall(watchlistScreeningEntityProgramListRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityProgramListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List entity watchlist screening programs (asynchronously)
     * List all entity watchlist screening programs
     * @param watchlistScreeningEntityProgramListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityprogramlist">List entity watchlist screening programs Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityProgramListAsync(WatchlistScreeningEntityProgramListRequest watchlistScreeningEntityProgramListRequest, final ApiCallback<WatchlistScreeningEntityProgramListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningEntityProgramListValidateBeforeCall(watchlistScreeningEntityProgramListRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityProgramListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningEntityReviewCreate
     * @param watchlistScreeningEntityReviewCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityreviewcreate">Create a review for an entity watchlist screening Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityReviewCreateCall(WatchlistScreeningEntityReviewCreateRequest watchlistScreeningEntityReviewCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningEntityReviewCreateRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/entity/review/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningEntityReviewCreateValidateBeforeCall(WatchlistScreeningEntityReviewCreateRequest watchlistScreeningEntityReviewCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningEntityReviewCreateRequest' is set
        if (watchlistScreeningEntityReviewCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningEntityReviewCreateRequest' when calling watchlistScreeningEntityReviewCreate(Async)");
        }

        return watchlistScreeningEntityReviewCreateCall(watchlistScreeningEntityReviewCreateRequest, _callback);

    }

    /**
     * Create a review for an entity watchlist screening
     * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @param watchlistScreeningEntityReviewCreateRequest  (required)
     * @return WatchlistScreeningEntityReviewCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityreviewcreate">Create a review for an entity watchlist screening Documentation</a>
     */
    public WatchlistScreeningEntityReviewCreateResponse watchlistScreeningEntityReviewCreate(WatchlistScreeningEntityReviewCreateRequest watchlistScreeningEntityReviewCreateRequest) throws ApiException {
        ApiResponse<WatchlistScreeningEntityReviewCreateResponse> localVarResp = watchlistScreeningEntityReviewCreateWithHttpInfo(watchlistScreeningEntityReviewCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a review for an entity watchlist screening
     * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @param watchlistScreeningEntityReviewCreateRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningEntityReviewCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityreviewcreate">Create a review for an entity watchlist screening Documentation</a>
     */
    public ApiResponse<WatchlistScreeningEntityReviewCreateResponse> watchlistScreeningEntityReviewCreateWithHttpInfo(WatchlistScreeningEntityReviewCreateRequest watchlistScreeningEntityReviewCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningEntityReviewCreateValidateBeforeCall(watchlistScreeningEntityReviewCreateRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityReviewCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a review for an entity watchlist screening (asynchronously)
     * Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @param watchlistScreeningEntityReviewCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityreviewcreate">Create a review for an entity watchlist screening Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityReviewCreateAsync(WatchlistScreeningEntityReviewCreateRequest watchlistScreeningEntityReviewCreateRequest, final ApiCallback<WatchlistScreeningEntityReviewCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningEntityReviewCreateValidateBeforeCall(watchlistScreeningEntityReviewCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityReviewCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningEntityReviewList
     * @param watchlistScreeningEntityReviewListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityreviewlist">List reviews for entity watchlist screenings Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityReviewListCall(WatchlistScreeningEntityReviewListRequest watchlistScreeningEntityReviewListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningEntityReviewListRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/entity/review/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningEntityReviewListValidateBeforeCall(WatchlistScreeningEntityReviewListRequest watchlistScreeningEntityReviewListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningEntityReviewListRequest' is set
        if (watchlistScreeningEntityReviewListRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningEntityReviewListRequest' when calling watchlistScreeningEntityReviewList(Async)");
        }

        return watchlistScreeningEntityReviewListCall(watchlistScreeningEntityReviewListRequest, _callback);

    }

    /**
     * List reviews for entity watchlist screenings
     * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @param watchlistScreeningEntityReviewListRequest  (required)
     * @return WatchlistScreeningEntityReviewListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityreviewlist">List reviews for entity watchlist screenings Documentation</a>
     */
    public WatchlistScreeningEntityReviewListResponse watchlistScreeningEntityReviewList(WatchlistScreeningEntityReviewListRequest watchlistScreeningEntityReviewListRequest) throws ApiException {
        ApiResponse<WatchlistScreeningEntityReviewListResponse> localVarResp = watchlistScreeningEntityReviewListWithHttpInfo(watchlistScreeningEntityReviewListRequest);
        return localVarResp.getData();
    }

    /**
     * List reviews for entity watchlist screenings
     * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @param watchlistScreeningEntityReviewListRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningEntityReviewListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityreviewlist">List reviews for entity watchlist screenings Documentation</a>
     */
    public ApiResponse<WatchlistScreeningEntityReviewListResponse> watchlistScreeningEntityReviewListWithHttpInfo(WatchlistScreeningEntityReviewListRequest watchlistScreeningEntityReviewListRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningEntityReviewListValidateBeforeCall(watchlistScreeningEntityReviewListRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityReviewListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reviews for entity watchlist screenings (asynchronously)
     * List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @param watchlistScreeningEntityReviewListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityreviewlist">List reviews for entity watchlist screenings Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityReviewListAsync(WatchlistScreeningEntityReviewListRequest watchlistScreeningEntityReviewListRequest, final ApiCallback<WatchlistScreeningEntityReviewListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningEntityReviewListValidateBeforeCall(watchlistScreeningEntityReviewListRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityReviewListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningEntityUpdate
     * @param watchlistScreeningEntityUpdateRequest The entity screening was successfully updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityupdate">Update an entity screening Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityUpdateCall(WatchlistScreeningEntityUpdateRequest watchlistScreeningEntityUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningEntityUpdateRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/entity/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningEntityUpdateValidateBeforeCall(WatchlistScreeningEntityUpdateRequest watchlistScreeningEntityUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningEntityUpdateRequest' is set
        if (watchlistScreeningEntityUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningEntityUpdateRequest' when calling watchlistScreeningEntityUpdate(Async)");
        }

        return watchlistScreeningEntityUpdateCall(watchlistScreeningEntityUpdateRequest, _callback);

    }

    /**
     * Update an entity screening
     * Update an entity watchlist screening.
     * @param watchlistScreeningEntityUpdateRequest The entity screening was successfully updated. (required)
     * @return WatchlistScreeningEntityUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityupdate">Update an entity screening Documentation</a>
     */
    public WatchlistScreeningEntityUpdateResponse watchlistScreeningEntityUpdate(WatchlistScreeningEntityUpdateRequest watchlistScreeningEntityUpdateRequest) throws ApiException {
        ApiResponse<WatchlistScreeningEntityUpdateResponse> localVarResp = watchlistScreeningEntityUpdateWithHttpInfo(watchlistScreeningEntityUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update an entity screening
     * Update an entity watchlist screening.
     * @param watchlistScreeningEntityUpdateRequest The entity screening was successfully updated. (required)
     * @return ApiResponse&lt;WatchlistScreeningEntityUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityupdate">Update an entity screening Documentation</a>
     */
    public ApiResponse<WatchlistScreeningEntityUpdateResponse> watchlistScreeningEntityUpdateWithHttpInfo(WatchlistScreeningEntityUpdateRequest watchlistScreeningEntityUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningEntityUpdateValidateBeforeCall(watchlistScreeningEntityUpdateRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an entity screening (asynchronously)
     * Update an entity watchlist screening.
     * @param watchlistScreeningEntityUpdateRequest The entity screening was successfully updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningentityupdate">Update an entity screening Documentation</a>
     */
    public okhttp3.Call watchlistScreeningEntityUpdateAsync(WatchlistScreeningEntityUpdateRequest watchlistScreeningEntityUpdateRequest, final ApiCallback<WatchlistScreeningEntityUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningEntityUpdateValidateBeforeCall(watchlistScreeningEntityUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningEntityUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningIndividualCreate
     * @param watchlistScreeningIndividualCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualcreate">Create a watchlist screening for a person Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualCreateCall(WatchlistScreeningIndividualCreateRequest watchlistScreeningIndividualCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningIndividualCreateRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/individual/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningIndividualCreateValidateBeforeCall(WatchlistScreeningIndividualCreateRequest watchlistScreeningIndividualCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningIndividualCreateRequest' is set
        if (watchlistScreeningIndividualCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningIndividualCreateRequest' when calling watchlistScreeningIndividualCreate(Async)");
        }

        return watchlistScreeningIndividualCreateCall(watchlistScreeningIndividualCreateRequest, _callback);

    }

    /**
     * Create a watchlist screening for a person
     * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     * @param watchlistScreeningIndividualCreateRequest  (required)
     * @return WatchlistScreeningIndividualCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualcreate">Create a watchlist screening for a person Documentation</a>
     */
    public WatchlistScreeningIndividualCreateResponse watchlistScreeningIndividualCreate(WatchlistScreeningIndividualCreateRequest watchlistScreeningIndividualCreateRequest) throws ApiException {
        ApiResponse<WatchlistScreeningIndividualCreateResponse> localVarResp = watchlistScreeningIndividualCreateWithHttpInfo(watchlistScreeningIndividualCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a watchlist screening for a person
     * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     * @param watchlistScreeningIndividualCreateRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningIndividualCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualcreate">Create a watchlist screening for a person Documentation</a>
     */
    public ApiResponse<WatchlistScreeningIndividualCreateResponse> watchlistScreeningIndividualCreateWithHttpInfo(WatchlistScreeningIndividualCreateRequest watchlistScreeningIndividualCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningIndividualCreateValidateBeforeCall(watchlistScreeningIndividualCreateRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a watchlist screening for a person (asynchronously)
     * Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     * @param watchlistScreeningIndividualCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualcreate">Create a watchlist screening for a person Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualCreateAsync(WatchlistScreeningIndividualCreateRequest watchlistScreeningIndividualCreateRequest, final ApiCallback<WatchlistScreeningIndividualCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningIndividualCreateValidateBeforeCall(watchlistScreeningIndividualCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningIndividualGet
     * @param watchlistScreeningIndividualGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualget">Retrieve an individual watchlist screening Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualGetCall(WatchlistScreeningIndividualGetRequest watchlistScreeningIndividualGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningIndividualGetRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/individual/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningIndividualGetValidateBeforeCall(WatchlistScreeningIndividualGetRequest watchlistScreeningIndividualGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningIndividualGetRequest' is set
        if (watchlistScreeningIndividualGetRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningIndividualGetRequest' when calling watchlistScreeningIndividualGet(Async)");
        }

        return watchlistScreeningIndividualGetCall(watchlistScreeningIndividualGetRequest, _callback);

    }

    /**
     * Retrieve an individual watchlist screening
     * Retrieve a previously created individual watchlist screening
     * @param watchlistScreeningIndividualGetRequest  (required)
     * @return WatchlistScreeningIndividualGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualget">Retrieve an individual watchlist screening Documentation</a>
     */
    public WatchlistScreeningIndividualGetResponse watchlistScreeningIndividualGet(WatchlistScreeningIndividualGetRequest watchlistScreeningIndividualGetRequest) throws ApiException {
        ApiResponse<WatchlistScreeningIndividualGetResponse> localVarResp = watchlistScreeningIndividualGetWithHttpInfo(watchlistScreeningIndividualGetRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve an individual watchlist screening
     * Retrieve a previously created individual watchlist screening
     * @param watchlistScreeningIndividualGetRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningIndividualGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualget">Retrieve an individual watchlist screening Documentation</a>
     */
    public ApiResponse<WatchlistScreeningIndividualGetResponse> watchlistScreeningIndividualGetWithHttpInfo(WatchlistScreeningIndividualGetRequest watchlistScreeningIndividualGetRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningIndividualGetValidateBeforeCall(watchlistScreeningIndividualGetRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an individual watchlist screening (asynchronously)
     * Retrieve a previously created individual watchlist screening
     * @param watchlistScreeningIndividualGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualget">Retrieve an individual watchlist screening Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualGetAsync(WatchlistScreeningIndividualGetRequest watchlistScreeningIndividualGetRequest, final ApiCallback<WatchlistScreeningIndividualGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningIndividualGetValidateBeforeCall(watchlistScreeningIndividualGetRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningIndividualHistoryList
     * @param watchlistScreeningIndividualHistoryListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualhistorylist">List history for individual watchlist screenings Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualHistoryListCall(WatchlistScreeningIndividualHistoryListRequest watchlistScreeningIndividualHistoryListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningIndividualHistoryListRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/individual/history/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningIndividualHistoryListValidateBeforeCall(WatchlistScreeningIndividualHistoryListRequest watchlistScreeningIndividualHistoryListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningIndividualHistoryListRequest' is set
        if (watchlistScreeningIndividualHistoryListRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningIndividualHistoryListRequest' when calling watchlistScreeningIndividualHistoryList(Async)");
        }

        return watchlistScreeningIndividualHistoryListCall(watchlistScreeningIndividualHistoryListRequest, _callback);

    }

    /**
     * List history for individual watchlist screenings
     * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     * @param watchlistScreeningIndividualHistoryListRequest  (required)
     * @return WatchlistScreeningIndividualHistoryListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualhistorylist">List history for individual watchlist screenings Documentation</a>
     */
    public WatchlistScreeningIndividualHistoryListResponse watchlistScreeningIndividualHistoryList(WatchlistScreeningIndividualHistoryListRequest watchlistScreeningIndividualHistoryListRequest) throws ApiException {
        ApiResponse<WatchlistScreeningIndividualHistoryListResponse> localVarResp = watchlistScreeningIndividualHistoryListWithHttpInfo(watchlistScreeningIndividualHistoryListRequest);
        return localVarResp.getData();
    }

    /**
     * List history for individual watchlist screenings
     * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     * @param watchlistScreeningIndividualHistoryListRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningIndividualHistoryListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualhistorylist">List history for individual watchlist screenings Documentation</a>
     */
    public ApiResponse<WatchlistScreeningIndividualHistoryListResponse> watchlistScreeningIndividualHistoryListWithHttpInfo(WatchlistScreeningIndividualHistoryListRequest watchlistScreeningIndividualHistoryListRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningIndividualHistoryListValidateBeforeCall(watchlistScreeningIndividualHistoryListRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualHistoryListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List history for individual watchlist screenings (asynchronously)
     * List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     * @param watchlistScreeningIndividualHistoryListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualhistorylist">List history for individual watchlist screenings Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualHistoryListAsync(WatchlistScreeningIndividualHistoryListRequest watchlistScreeningIndividualHistoryListRequest, final ApiCallback<WatchlistScreeningIndividualHistoryListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningIndividualHistoryListValidateBeforeCall(watchlistScreeningIndividualHistoryListRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualHistoryListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningIndividualHitList
     * @param watchlistScreeningIndividualHitListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualhitlist">List hits for individual watchlist screening Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualHitListCall(WatchlistScreeningIndividualHitListRequest watchlistScreeningIndividualHitListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningIndividualHitListRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/individual/hit/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningIndividualHitListValidateBeforeCall(WatchlistScreeningIndividualHitListRequest watchlistScreeningIndividualHitListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningIndividualHitListRequest' is set
        if (watchlistScreeningIndividualHitListRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningIndividualHitListRequest' when calling watchlistScreeningIndividualHitList(Async)");
        }

        return watchlistScreeningIndividualHitListCall(watchlistScreeningIndividualHitListRequest, _callback);

    }

    /**
     * List hits for individual watchlist screening
     * List all hits found by Plaid for a particular individual watchlist screening.
     * @param watchlistScreeningIndividualHitListRequest  (required)
     * @return WatchlistScreeningIndividualHitListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualhitlist">List hits for individual watchlist screening Documentation</a>
     */
    public WatchlistScreeningIndividualHitListResponse watchlistScreeningIndividualHitList(WatchlistScreeningIndividualHitListRequest watchlistScreeningIndividualHitListRequest) throws ApiException {
        ApiResponse<WatchlistScreeningIndividualHitListResponse> localVarResp = watchlistScreeningIndividualHitListWithHttpInfo(watchlistScreeningIndividualHitListRequest);
        return localVarResp.getData();
    }

    /**
     * List hits for individual watchlist screening
     * List all hits found by Plaid for a particular individual watchlist screening.
     * @param watchlistScreeningIndividualHitListRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningIndividualHitListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualhitlist">List hits for individual watchlist screening Documentation</a>
     */
    public ApiResponse<WatchlistScreeningIndividualHitListResponse> watchlistScreeningIndividualHitListWithHttpInfo(WatchlistScreeningIndividualHitListRequest watchlistScreeningIndividualHitListRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningIndividualHitListValidateBeforeCall(watchlistScreeningIndividualHitListRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualHitListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List hits for individual watchlist screening (asynchronously)
     * List all hits found by Plaid for a particular individual watchlist screening.
     * @param watchlistScreeningIndividualHitListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualhitlist">List hits for individual watchlist screening Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualHitListAsync(WatchlistScreeningIndividualHitListRequest watchlistScreeningIndividualHitListRequest, final ApiCallback<WatchlistScreeningIndividualHitListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningIndividualHitListValidateBeforeCall(watchlistScreeningIndividualHitListRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualHitListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningIndividualList
     * @param watchlistScreeningIndividualListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividuallist">List Individual Watchlist Screenings Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualListCall(WatchlistScreeningIndividualListRequest watchlistScreeningIndividualListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningIndividualListRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/individual/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningIndividualListValidateBeforeCall(WatchlistScreeningIndividualListRequest watchlistScreeningIndividualListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningIndividualListRequest' is set
        if (watchlistScreeningIndividualListRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningIndividualListRequest' when calling watchlistScreeningIndividualList(Async)");
        }

        return watchlistScreeningIndividualListCall(watchlistScreeningIndividualListRequest, _callback);

    }

    /**
     * List Individual Watchlist Screenings
     * List previously created watchlist screenings for individuals
     * @param watchlistScreeningIndividualListRequest  (required)
     * @return WatchlistScreeningIndividualListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividuallist">List Individual Watchlist Screenings Documentation</a>
     */
    public WatchlistScreeningIndividualListResponse watchlistScreeningIndividualList(WatchlistScreeningIndividualListRequest watchlistScreeningIndividualListRequest) throws ApiException {
        ApiResponse<WatchlistScreeningIndividualListResponse> localVarResp = watchlistScreeningIndividualListWithHttpInfo(watchlistScreeningIndividualListRequest);
        return localVarResp.getData();
    }

    /**
     * List Individual Watchlist Screenings
     * List previously created watchlist screenings for individuals
     * @param watchlistScreeningIndividualListRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningIndividualListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividuallist">List Individual Watchlist Screenings Documentation</a>
     */
    public ApiResponse<WatchlistScreeningIndividualListResponse> watchlistScreeningIndividualListWithHttpInfo(WatchlistScreeningIndividualListRequest watchlistScreeningIndividualListRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningIndividualListValidateBeforeCall(watchlistScreeningIndividualListRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Individual Watchlist Screenings (asynchronously)
     * List previously created watchlist screenings for individuals
     * @param watchlistScreeningIndividualListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividuallist">List Individual Watchlist Screenings Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualListAsync(WatchlistScreeningIndividualListRequest watchlistScreeningIndividualListRequest, final ApiCallback<WatchlistScreeningIndividualListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningIndividualListValidateBeforeCall(watchlistScreeningIndividualListRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningIndividualProgramGet
     * @param watchlistScreeningIndividualProgramGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualprogramget">Get individual watchlist screening program Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualProgramGetCall(WatchlistScreeningIndividualProgramGetRequest watchlistScreeningIndividualProgramGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningIndividualProgramGetRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/individual/program/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningIndividualProgramGetValidateBeforeCall(WatchlistScreeningIndividualProgramGetRequest watchlistScreeningIndividualProgramGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningIndividualProgramGetRequest' is set
        if (watchlistScreeningIndividualProgramGetRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningIndividualProgramGetRequest' when calling watchlistScreeningIndividualProgramGet(Async)");
        }

        return watchlistScreeningIndividualProgramGetCall(watchlistScreeningIndividualProgramGetRequest, _callback);

    }

    /**
     * Get individual watchlist screening program
     * Get an individual watchlist screening program
     * @param watchlistScreeningIndividualProgramGetRequest  (required)
     * @return WatchlistScreeningIndividualProgramGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualprogramget">Get individual watchlist screening program Documentation</a>
     */
    public WatchlistScreeningIndividualProgramGetResponse watchlistScreeningIndividualProgramGet(WatchlistScreeningIndividualProgramGetRequest watchlistScreeningIndividualProgramGetRequest) throws ApiException {
        ApiResponse<WatchlistScreeningIndividualProgramGetResponse> localVarResp = watchlistScreeningIndividualProgramGetWithHttpInfo(watchlistScreeningIndividualProgramGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get individual watchlist screening program
     * Get an individual watchlist screening program
     * @param watchlistScreeningIndividualProgramGetRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningIndividualProgramGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualprogramget">Get individual watchlist screening program Documentation</a>
     */
    public ApiResponse<WatchlistScreeningIndividualProgramGetResponse> watchlistScreeningIndividualProgramGetWithHttpInfo(WatchlistScreeningIndividualProgramGetRequest watchlistScreeningIndividualProgramGetRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningIndividualProgramGetValidateBeforeCall(watchlistScreeningIndividualProgramGetRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualProgramGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get individual watchlist screening program (asynchronously)
     * Get an individual watchlist screening program
     * @param watchlistScreeningIndividualProgramGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualprogramget">Get individual watchlist screening program Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualProgramGetAsync(WatchlistScreeningIndividualProgramGetRequest watchlistScreeningIndividualProgramGetRequest, final ApiCallback<WatchlistScreeningIndividualProgramGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningIndividualProgramGetValidateBeforeCall(watchlistScreeningIndividualProgramGetRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualProgramGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningIndividualProgramList
     * @param watchlistScreeningIndividualProgramListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualprogramlist">List individual watchlist screening programs Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualProgramListCall(WatchlistScreeningIndividualProgramListRequest watchlistScreeningIndividualProgramListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningIndividualProgramListRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/individual/program/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningIndividualProgramListValidateBeforeCall(WatchlistScreeningIndividualProgramListRequest watchlistScreeningIndividualProgramListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningIndividualProgramListRequest' is set
        if (watchlistScreeningIndividualProgramListRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningIndividualProgramListRequest' when calling watchlistScreeningIndividualProgramList(Async)");
        }

        return watchlistScreeningIndividualProgramListCall(watchlistScreeningIndividualProgramListRequest, _callback);

    }

    /**
     * List individual watchlist screening programs
     * List all individual watchlist screening programs
     * @param watchlistScreeningIndividualProgramListRequest  (required)
     * @return WatchlistScreeningIndividualProgramListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualprogramlist">List individual watchlist screening programs Documentation</a>
     */
    public WatchlistScreeningIndividualProgramListResponse watchlistScreeningIndividualProgramList(WatchlistScreeningIndividualProgramListRequest watchlistScreeningIndividualProgramListRequest) throws ApiException {
        ApiResponse<WatchlistScreeningIndividualProgramListResponse> localVarResp = watchlistScreeningIndividualProgramListWithHttpInfo(watchlistScreeningIndividualProgramListRequest);
        return localVarResp.getData();
    }

    /**
     * List individual watchlist screening programs
     * List all individual watchlist screening programs
     * @param watchlistScreeningIndividualProgramListRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningIndividualProgramListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualprogramlist">List individual watchlist screening programs Documentation</a>
     */
    public ApiResponse<WatchlistScreeningIndividualProgramListResponse> watchlistScreeningIndividualProgramListWithHttpInfo(WatchlistScreeningIndividualProgramListRequest watchlistScreeningIndividualProgramListRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningIndividualProgramListValidateBeforeCall(watchlistScreeningIndividualProgramListRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualProgramListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List individual watchlist screening programs (asynchronously)
     * List all individual watchlist screening programs
     * @param watchlistScreeningIndividualProgramListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualprogramlist">List individual watchlist screening programs Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualProgramListAsync(WatchlistScreeningIndividualProgramListRequest watchlistScreeningIndividualProgramListRequest, final ApiCallback<WatchlistScreeningIndividualProgramListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningIndividualProgramListValidateBeforeCall(watchlistScreeningIndividualProgramListRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualProgramListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningIndividualReviewCreate
     * @param watchlistScreeningIndividualReviewCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualreviewcreate">Create a review for an individual watchlist screening Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualReviewCreateCall(WatchlistScreeningIndividualReviewCreateRequest watchlistScreeningIndividualReviewCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningIndividualReviewCreateRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/individual/review/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningIndividualReviewCreateValidateBeforeCall(WatchlistScreeningIndividualReviewCreateRequest watchlistScreeningIndividualReviewCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningIndividualReviewCreateRequest' is set
        if (watchlistScreeningIndividualReviewCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningIndividualReviewCreateRequest' when calling watchlistScreeningIndividualReviewCreate(Async)");
        }

        return watchlistScreeningIndividualReviewCreateCall(watchlistScreeningIndividualReviewCreateRequest, _callback);

    }

    /**
     * Create a review for an individual watchlist screening
     * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @param watchlistScreeningIndividualReviewCreateRequest  (required)
     * @return WatchlistScreeningIndividualReviewCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualreviewcreate">Create a review for an individual watchlist screening Documentation</a>
     */
    public WatchlistScreeningIndividualReviewCreateResponse watchlistScreeningIndividualReviewCreate(WatchlistScreeningIndividualReviewCreateRequest watchlistScreeningIndividualReviewCreateRequest) throws ApiException {
        ApiResponse<WatchlistScreeningIndividualReviewCreateResponse> localVarResp = watchlistScreeningIndividualReviewCreateWithHttpInfo(watchlistScreeningIndividualReviewCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create a review for an individual watchlist screening
     * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @param watchlistScreeningIndividualReviewCreateRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningIndividualReviewCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualreviewcreate">Create a review for an individual watchlist screening Documentation</a>
     */
    public ApiResponse<WatchlistScreeningIndividualReviewCreateResponse> watchlistScreeningIndividualReviewCreateWithHttpInfo(WatchlistScreeningIndividualReviewCreateRequest watchlistScreeningIndividualReviewCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningIndividualReviewCreateValidateBeforeCall(watchlistScreeningIndividualReviewCreateRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualReviewCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a review for an individual watchlist screening (asynchronously)
     * Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     * @param watchlistScreeningIndividualReviewCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualreviewcreate">Create a review for an individual watchlist screening Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualReviewCreateAsync(WatchlistScreeningIndividualReviewCreateRequest watchlistScreeningIndividualReviewCreateRequest, final ApiCallback<WatchlistScreeningIndividualReviewCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningIndividualReviewCreateValidateBeforeCall(watchlistScreeningIndividualReviewCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualReviewCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningIndividualReviewList
     * @param watchlistScreeningIndividualReviewListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualreviewlist">List reviews for individual watchlist screenings Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualReviewListCall(WatchlistScreeningIndividualReviewListRequest watchlistScreeningIndividualReviewListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningIndividualReviewListRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/individual/review/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningIndividualReviewListValidateBeforeCall(WatchlistScreeningIndividualReviewListRequest watchlistScreeningIndividualReviewListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningIndividualReviewListRequest' is set
        if (watchlistScreeningIndividualReviewListRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningIndividualReviewListRequest' when calling watchlistScreeningIndividualReviewList(Async)");
        }

        return watchlistScreeningIndividualReviewListCall(watchlistScreeningIndividualReviewListRequest, _callback);

    }

    /**
     * List reviews for individual watchlist screenings
     * List all reviews for the individual watchlist screening.
     * @param watchlistScreeningIndividualReviewListRequest  (required)
     * @return WatchlistScreeningIndividualReviewListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualreviewlist">List reviews for individual watchlist screenings Documentation</a>
     */
    public WatchlistScreeningIndividualReviewListResponse watchlistScreeningIndividualReviewList(WatchlistScreeningIndividualReviewListRequest watchlistScreeningIndividualReviewListRequest) throws ApiException {
        ApiResponse<WatchlistScreeningIndividualReviewListResponse> localVarResp = watchlistScreeningIndividualReviewListWithHttpInfo(watchlistScreeningIndividualReviewListRequest);
        return localVarResp.getData();
    }

    /**
     * List reviews for individual watchlist screenings
     * List all reviews for the individual watchlist screening.
     * @param watchlistScreeningIndividualReviewListRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningIndividualReviewListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualreviewlist">List reviews for individual watchlist screenings Documentation</a>
     */
    public ApiResponse<WatchlistScreeningIndividualReviewListResponse> watchlistScreeningIndividualReviewListWithHttpInfo(WatchlistScreeningIndividualReviewListRequest watchlistScreeningIndividualReviewListRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningIndividualReviewListValidateBeforeCall(watchlistScreeningIndividualReviewListRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualReviewListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reviews for individual watchlist screenings (asynchronously)
     * List all reviews for the individual watchlist screening.
     * @param watchlistScreeningIndividualReviewListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualreviewlist">List reviews for individual watchlist screenings Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualReviewListAsync(WatchlistScreeningIndividualReviewListRequest watchlistScreeningIndividualReviewListRequest, final ApiCallback<WatchlistScreeningIndividualReviewListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningIndividualReviewListValidateBeforeCall(watchlistScreeningIndividualReviewListRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualReviewListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watchlistScreeningIndividualUpdate
     * @param watchlistScreeningIndividualUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualupdate">Update individual watchlist screening Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualUpdateCall(WatchlistScreeningIndividualUpdateRequest watchlistScreeningIndividualUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watchlistScreeningIndividualUpdateRequest;

        // create path and map variables
        String localVarPath = "/watchlist_screening/individual/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watchlistScreeningIndividualUpdateValidateBeforeCall(WatchlistScreeningIndividualUpdateRequest watchlistScreeningIndividualUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watchlistScreeningIndividualUpdateRequest' is set
        if (watchlistScreeningIndividualUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'watchlistScreeningIndividualUpdateRequest' when calling watchlistScreeningIndividualUpdate(Async)");
        }

        return watchlistScreeningIndividualUpdateCall(watchlistScreeningIndividualUpdateRequest, _callback);

    }

    /**
     * Update individual watchlist screening
     * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update &#x60;search_terms&#x60; and &#x60;status&#x60; at the same time since editing &#x60;search_terms&#x60; may trigger an automatic &#x60;status&#x60; change.
     * @param watchlistScreeningIndividualUpdateRequest  (required)
     * @return WatchlistScreeningIndividualUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualupdate">Update individual watchlist screening Documentation</a>
     */
    public WatchlistScreeningIndividualUpdateResponse watchlistScreeningIndividualUpdate(WatchlistScreeningIndividualUpdateRequest watchlistScreeningIndividualUpdateRequest) throws ApiException {
        ApiResponse<WatchlistScreeningIndividualUpdateResponse> localVarResp = watchlistScreeningIndividualUpdateWithHttpInfo(watchlistScreeningIndividualUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update individual watchlist screening
     * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update &#x60;search_terms&#x60; and &#x60;status&#x60; at the same time since editing &#x60;search_terms&#x60; may trigger an automatic &#x60;status&#x60; change.
     * @param watchlistScreeningIndividualUpdateRequest  (required)
     * @return ApiResponse&lt;WatchlistScreeningIndividualUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualupdate">Update individual watchlist screening Documentation</a>
     */
    public ApiResponse<WatchlistScreeningIndividualUpdateResponse> watchlistScreeningIndividualUpdateWithHttpInfo(WatchlistScreeningIndividualUpdateRequest watchlistScreeningIndividualUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = watchlistScreeningIndividualUpdateValidateBeforeCall(watchlistScreeningIndividualUpdateRequest, null);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update individual watchlist screening (asynchronously)
     * Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update &#x60;search_terms&#x60; and &#x60;status&#x60; at the same time since editing &#x60;search_terms&#x60; may trigger an automatic &#x60;status&#x60; change.
     * @param watchlistScreeningIndividualUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/products/monitor/#watchlist_screeningindividualupdate">Update individual watchlist screening Documentation</a>
     */
    public okhttp3.Call watchlistScreeningIndividualUpdateAsync(WatchlistScreeningIndividualUpdateRequest watchlistScreeningIndividualUpdateRequest, final ApiCallback<WatchlistScreeningIndividualUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = watchlistScreeningIndividualUpdateValidateBeforeCall(watchlistScreeningIndividualUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<WatchlistScreeningIndividualUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookVerificationKeyGet
     * @param webhookVerificationKeyGetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/webhooks/webhook-verification/#get-webhook-verification-key">Get webhook verification key Documentation</a>
     */
    public okhttp3.Call webhookVerificationKeyGetCall(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhookVerificationKeyGetRequest;

        // create path and map variables
        String localVarPath = "/webhook_verification_key/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "clientId", "plaidVersion", "secret" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookVerificationKeyGetValidateBeforeCall(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookVerificationKeyGetRequest' is set
        if (webhookVerificationKeyGetRequest == null) {
            throw new ApiException("Missing the required parameter 'webhookVerificationKeyGetRequest' when calling webhookVerificationKeyGet(Async)");
        }

        return webhookVerificationKeyGetCall(webhookVerificationKeyGetRequest, _callback);

    }

    /**
     * Get webhook verification key
     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
     * @param webhookVerificationKeyGetRequest  (required)
     * @return WebhookVerificationKeyGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/webhooks/webhook-verification/#get-webhook-verification-key">Get webhook verification key Documentation</a>
     */
    public WebhookVerificationKeyGetResponse webhookVerificationKeyGet(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest) throws ApiException {
        ApiResponse<WebhookVerificationKeyGetResponse> localVarResp = webhookVerificationKeyGetWithHttpInfo(webhookVerificationKeyGetRequest);
        return localVarResp.getData();
    }

    /**
     * Get webhook verification key
     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
     * @param webhookVerificationKeyGetRequest  (required)
     * @return ApiResponse&lt;WebhookVerificationKeyGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/webhooks/webhook-verification/#get-webhook-verification-key">Get webhook verification key Documentation</a>
     */
    public ApiResponse<WebhookVerificationKeyGetResponse> webhookVerificationKeyGetWithHttpInfo(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest) throws ApiException {
        okhttp3.Call localVarCall = webhookVerificationKeyGetValidateBeforeCall(webhookVerificationKeyGetRequest, null);
        Type localVarReturnType = new TypeToken<WebhookVerificationKeyGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get webhook verification key (asynchronously)
     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the &#x60;Plaid-Verification&#x60; header.  The &#x60;/webhook_verification_key/get&#x60; endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
     * @param webhookVerificationKeyGetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href="/api/webhooks/webhook-verification/#get-webhook-verification-key">Get webhook verification key Documentation</a>
     */
    public okhttp3.Call webhookVerificationKeyGetAsync(WebhookVerificationKeyGetRequest webhookVerificationKeyGetRequest, final ApiCallback<WebhookVerificationKeyGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookVerificationKeyGetValidateBeforeCall(webhookVerificationKeyGetRequest, _callback);
        Type localVarReturnType = new TypeToken<WebhookVerificationKeyGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
