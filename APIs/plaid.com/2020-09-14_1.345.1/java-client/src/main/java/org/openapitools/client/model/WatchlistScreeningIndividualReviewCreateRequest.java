/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request input for creating a screening review
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:22.461272-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WatchlistScreeningIndividualReviewCreateRequest {
  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CONFIRMED_HITS = "confirmed_hits";
  @SerializedName(SERIALIZED_NAME_CONFIRMED_HITS)
  private List<String> confirmedHits = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISMISSED_HITS = "dismissed_hits";
  @SerializedName(SERIALIZED_NAME_DISMISSED_HITS)
  private List<String> dismissedHits = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_WATCHLIST_SCREENING_ID = "watchlist_screening_id";
  @SerializedName(SERIALIZED_NAME_WATCHLIST_SCREENING_ID)
  private String watchlistScreeningId;

  public WatchlistScreeningIndividualReviewCreateRequest() {
  }

  public WatchlistScreeningIndividualReviewCreateRequest clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Your Plaid API &#x60;client_id&#x60;. The &#x60;client_id&#x60; is required and may be provided either in the &#x60;PLAID-CLIENT-ID&#x60; header or as part of a request body.
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public WatchlistScreeningIndividualReviewCreateRequest comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * A comment submitted by a team member as part of reviewing a watchlist screening.
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public WatchlistScreeningIndividualReviewCreateRequest confirmedHits(List<String> confirmedHits) {
    this.confirmedHits = confirmedHits;
    return this;
  }

  public WatchlistScreeningIndividualReviewCreateRequest addConfirmedHitsItem(String confirmedHitsItem) {
    if (this.confirmedHits == null) {
      this.confirmedHits = new ArrayList<>();
    }
    this.confirmedHits.add(confirmedHitsItem);
    return this;
  }

  /**
   * Hits to mark as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected.
   * @return confirmedHits
   */
  @javax.annotation.Nonnull
  public List<String> getConfirmedHits() {
    return confirmedHits;
  }

  public void setConfirmedHits(List<String> confirmedHits) {
    this.confirmedHits = confirmedHits;
  }


  public WatchlistScreeningIndividualReviewCreateRequest dismissedHits(List<String> dismissedHits) {
    this.dismissedHits = dismissedHits;
    return this;
  }

  public WatchlistScreeningIndividualReviewCreateRequest addDismissedHitsItem(String dismissedHitsItem) {
    if (this.dismissedHits == null) {
      this.dismissedHits = new ArrayList<>();
    }
    this.dismissedHits.add(dismissedHitsItem);
    return this;
  }

  /**
   * Hits to mark as a false positive after thorough manual review. These hits will never recur or be updated once dismissed.
   * @return dismissedHits
   */
  @javax.annotation.Nonnull
  public List<String> getDismissedHits() {
    return dismissedHits;
  }

  public void setDismissedHits(List<String> dismissedHits) {
    this.dismissedHits = dismissedHits;
  }


  public WatchlistScreeningIndividualReviewCreateRequest secret(String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Your Plaid API &#x60;secret&#x60;. The &#x60;secret&#x60; is required and may be provided either in the &#x60;PLAID-SECRET&#x60; header or as part of a request body.
   * @return secret
   */
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }


  public WatchlistScreeningIndividualReviewCreateRequest watchlistScreeningId(String watchlistScreeningId) {
    this.watchlistScreeningId = watchlistScreeningId;
    return this;
  }

  /**
   * ID of the associated screening.
   * @return watchlistScreeningId
   */
  @javax.annotation.Nonnull
  public String getWatchlistScreeningId() {
    return watchlistScreeningId;
  }

  public void setWatchlistScreeningId(String watchlistScreeningId) {
    this.watchlistScreeningId = watchlistScreeningId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WatchlistScreeningIndividualReviewCreateRequest watchlistScreeningIndividualReviewCreateRequest = (WatchlistScreeningIndividualReviewCreateRequest) o;
    return Objects.equals(this.clientId, watchlistScreeningIndividualReviewCreateRequest.clientId) &&
        Objects.equals(this.comment, watchlistScreeningIndividualReviewCreateRequest.comment) &&
        Objects.equals(this.confirmedHits, watchlistScreeningIndividualReviewCreateRequest.confirmedHits) &&
        Objects.equals(this.dismissedHits, watchlistScreeningIndividualReviewCreateRequest.dismissedHits) &&
        Objects.equals(this.secret, watchlistScreeningIndividualReviewCreateRequest.secret) &&
        Objects.equals(this.watchlistScreeningId, watchlistScreeningIndividualReviewCreateRequest.watchlistScreeningId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, comment, confirmedHits, dismissedHits, secret, watchlistScreeningId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WatchlistScreeningIndividualReviewCreateRequest {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    confirmedHits: ").append(toIndentedString(confirmedHits)).append("\n");
    sb.append("    dismissedHits: ").append(toIndentedString(dismissedHits)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    watchlistScreeningId: ").append(toIndentedString(watchlistScreeningId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_id");
    openapiFields.add("comment");
    openapiFields.add("confirmed_hits");
    openapiFields.add("dismissed_hits");
    openapiFields.add("secret");
    openapiFields.add("watchlist_screening_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("confirmed_hits");
    openapiRequiredFields.add("dismissed_hits");
    openapiRequiredFields.add("watchlist_screening_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WatchlistScreeningIndividualReviewCreateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WatchlistScreeningIndividualReviewCreateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WatchlistScreeningIndividualReviewCreateRequest is not found in the empty JSON string", WatchlistScreeningIndividualReviewCreateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WatchlistScreeningIndividualReviewCreateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WatchlistScreeningIndividualReviewCreateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WatchlistScreeningIndividualReviewCreateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("confirmed_hits") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("confirmed_hits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmed_hits` to be an array in the JSON string but got `%s`", jsonObj.get("confirmed_hits").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("dismissed_hits") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("dismissed_hits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dismissed_hits` to be an array in the JSON string but got `%s`", jsonObj.get("dismissed_hits").toString()));
      }
      if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
      if (!jsonObj.get("watchlist_screening_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `watchlist_screening_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("watchlist_screening_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WatchlistScreeningIndividualReviewCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WatchlistScreeningIndividualReviewCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WatchlistScreeningIndividualReviewCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WatchlistScreeningIndividualReviewCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<WatchlistScreeningIndividualReviewCreateRequest>() {
           @Override
           public void write(JsonWriter out, WatchlistScreeningIndividualReviewCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WatchlistScreeningIndividualReviewCreateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WatchlistScreeningIndividualReviewCreateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WatchlistScreeningIndividualReviewCreateRequest
   * @throws IOException if the JSON string is invalid with respect to WatchlistScreeningIndividualReviewCreateRequest
   */
  public static WatchlistScreeningIndividualReviewCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WatchlistScreeningIndividualReviewCreateRequest.class);
  }

  /**
   * Convert an instance of WatchlistScreeningIndividualReviewCreateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

