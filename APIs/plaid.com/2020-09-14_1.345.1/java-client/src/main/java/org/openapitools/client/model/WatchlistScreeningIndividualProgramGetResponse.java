/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.IndividualWatchlistCode;
import org.openapitools.client.model.ProgramNameSensitivity;
import org.openapitools.client.model.WatchlistScreeningAuditTrail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of individuals.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:22.461272-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WatchlistScreeningIndividualProgramGetResponse {
  public static final String SERIALIZED_NAME_AUDIT_TRAIL = "audit_trail";
  @SerializedName(SERIALIZED_NAME_AUDIT_TRAIL)
  private WatchlistScreeningAuditTrail auditTrail;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ARCHIVED = "is_archived";
  @SerializedName(SERIALIZED_NAME_IS_ARCHIVED)
  private Boolean isArchived;

  public static final String SERIALIZED_NAME_IS_RESCANNING_ENABLED = "is_rescanning_enabled";
  @SerializedName(SERIALIZED_NAME_IS_RESCANNING_ENABLED)
  private Boolean isRescanningEnabled;

  public static final String SERIALIZED_NAME_LISTS_ENABLED = "lists_enabled";
  @SerializedName(SERIALIZED_NAME_LISTS_ENABLED)
  private Set<IndividualWatchlistCode> listsEnabled = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_SENSITIVITY = "name_sensitivity";
  @SerializedName(SERIALIZED_NAME_NAME_SENSITIVITY)
  private ProgramNameSensitivity nameSensitivity;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public WatchlistScreeningIndividualProgramGetResponse() {
  }

  public WatchlistScreeningIndividualProgramGetResponse auditTrail(WatchlistScreeningAuditTrail auditTrail) {
    this.auditTrail = auditTrail;
    return this;
  }

  /**
   * Get auditTrail
   * @return auditTrail
   */
  @javax.annotation.Nonnull
  public WatchlistScreeningAuditTrail getAuditTrail() {
    return auditTrail;
  }

  public void setAuditTrail(WatchlistScreeningAuditTrail auditTrail) {
    this.auditTrail = auditTrail;
  }


  public WatchlistScreeningIndividualProgramGetResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * An ISO8601 formatted timestamp.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public WatchlistScreeningIndividualProgramGetResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the associated program.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public WatchlistScreeningIndividualProgramGetResponse isArchived(Boolean isArchived) {
    this.isArchived = isArchived;
    return this;
  }

  /**
   * Archived programs are read-only and cannot screen new customers nor participate in ongoing monitoring.
   * @return isArchived
   */
  @javax.annotation.Nonnull
  public Boolean getIsArchived() {
    return isArchived;
  }

  public void setIsArchived(Boolean isArchived) {
    this.isArchived = isArchived;
  }


  public WatchlistScreeningIndividualProgramGetResponse isRescanningEnabled(Boolean isRescanningEnabled) {
    this.isRescanningEnabled = isRescanningEnabled;
    return this;
  }

  /**
   * Indicator specifying whether the program is enabled and will perform daily rescans.
   * @return isRescanningEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getIsRescanningEnabled() {
    return isRescanningEnabled;
  }

  public void setIsRescanningEnabled(Boolean isRescanningEnabled) {
    this.isRescanningEnabled = isRescanningEnabled;
  }


  public WatchlistScreeningIndividualProgramGetResponse listsEnabled(Set<IndividualWatchlistCode> listsEnabled) {
    this.listsEnabled = listsEnabled;
    return this;
  }

  public WatchlistScreeningIndividualProgramGetResponse addListsEnabledItem(IndividualWatchlistCode listsEnabledItem) {
    if (this.listsEnabled == null) {
      this.listsEnabled = new LinkedHashSet<>();
    }
    this.listsEnabled.add(listsEnabledItem);
    return this;
  }

  /**
   * Watchlists enabled for the associated program
   * @return listsEnabled
   */
  @javax.annotation.Nonnull
  public Set<IndividualWatchlistCode> getListsEnabled() {
    return listsEnabled;
  }

  public void setListsEnabled(Set<IndividualWatchlistCode> listsEnabled) {
    this.listsEnabled = listsEnabled;
  }


  public WatchlistScreeningIndividualProgramGetResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A name for the program to define its purpose. For example, \&quot;High Risk Individuals\&quot;, \&quot;US Cardholders\&quot;, or \&quot;Applicants\&quot;.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WatchlistScreeningIndividualProgramGetResponse nameSensitivity(ProgramNameSensitivity nameSensitivity) {
    this.nameSensitivity = nameSensitivity;
    return this;
  }

  /**
   * Get nameSensitivity
   * @return nameSensitivity
   */
  @javax.annotation.Nonnull
  public ProgramNameSensitivity getNameSensitivity() {
    return nameSensitivity;
  }

  public void setNameSensitivity(ProgramNameSensitivity nameSensitivity) {
    this.nameSensitivity = nameSensitivity;
  }


  public WatchlistScreeningIndividualProgramGetResponse requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
   * @return requestId
   */
  @javax.annotation.Nonnull
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WatchlistScreeningIndividualProgramGetResponse instance itself
   */
  public WatchlistScreeningIndividualProgramGetResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WatchlistScreeningIndividualProgramGetResponse watchlistScreeningIndividualProgramGetResponse = (WatchlistScreeningIndividualProgramGetResponse) o;
    return Objects.equals(this.auditTrail, watchlistScreeningIndividualProgramGetResponse.auditTrail) &&
        Objects.equals(this.createdAt, watchlistScreeningIndividualProgramGetResponse.createdAt) &&
        Objects.equals(this.id, watchlistScreeningIndividualProgramGetResponse.id) &&
        Objects.equals(this.isArchived, watchlistScreeningIndividualProgramGetResponse.isArchived) &&
        Objects.equals(this.isRescanningEnabled, watchlistScreeningIndividualProgramGetResponse.isRescanningEnabled) &&
        Objects.equals(this.listsEnabled, watchlistScreeningIndividualProgramGetResponse.listsEnabled) &&
        Objects.equals(this.name, watchlistScreeningIndividualProgramGetResponse.name) &&
        Objects.equals(this.nameSensitivity, watchlistScreeningIndividualProgramGetResponse.nameSensitivity) &&
        Objects.equals(this.requestId, watchlistScreeningIndividualProgramGetResponse.requestId)&&
        Objects.equals(this.additionalProperties, watchlistScreeningIndividualProgramGetResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auditTrail, createdAt, id, isArchived, isRescanningEnabled, listsEnabled, name, nameSensitivity, requestId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WatchlistScreeningIndividualProgramGetResponse {\n");
    sb.append("    auditTrail: ").append(toIndentedString(auditTrail)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    isRescanningEnabled: ").append(toIndentedString(isRescanningEnabled)).append("\n");
    sb.append("    listsEnabled: ").append(toIndentedString(listsEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameSensitivity: ").append(toIndentedString(nameSensitivity)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audit_trail");
    openapiFields.add("created_at");
    openapiFields.add("id");
    openapiFields.add("is_archived");
    openapiFields.add("is_rescanning_enabled");
    openapiFields.add("lists_enabled");
    openapiFields.add("name");
    openapiFields.add("name_sensitivity");
    openapiFields.add("request_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("audit_trail");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("is_archived");
    openapiRequiredFields.add("is_rescanning_enabled");
    openapiRequiredFields.add("lists_enabled");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("name_sensitivity");
    openapiRequiredFields.add("request_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WatchlistScreeningIndividualProgramGetResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WatchlistScreeningIndividualProgramGetResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WatchlistScreeningIndividualProgramGetResponse is not found in the empty JSON string", WatchlistScreeningIndividualProgramGetResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WatchlistScreeningIndividualProgramGetResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("lists_enabled") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("lists_enabled").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lists_enabled` to be an array in the JSON string but got `%s`", jsonObj.get("lists_enabled").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `name_sensitivity`
      ProgramNameSensitivity.validateJsonElement(jsonObj.get("name_sensitivity"));
      if (!jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WatchlistScreeningIndividualProgramGetResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WatchlistScreeningIndividualProgramGetResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WatchlistScreeningIndividualProgramGetResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WatchlistScreeningIndividualProgramGetResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<WatchlistScreeningIndividualProgramGetResponse>() {
           @Override
           public void write(JsonWriter out, WatchlistScreeningIndividualProgramGetResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WatchlistScreeningIndividualProgramGetResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             WatchlistScreeningIndividualProgramGetResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WatchlistScreeningIndividualProgramGetResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WatchlistScreeningIndividualProgramGetResponse
   * @throws IOException if the JSON string is invalid with respect to WatchlistScreeningIndividualProgramGetResponse
   */
  public static WatchlistScreeningIndividualProgramGetResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WatchlistScreeningIndividualProgramGetResponse.class);
  }

  /**
   * Convert an instance of WatchlistScreeningIndividualProgramGetResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

