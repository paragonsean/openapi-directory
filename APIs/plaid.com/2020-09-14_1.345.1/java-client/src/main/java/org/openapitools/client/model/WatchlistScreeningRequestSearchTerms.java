/*
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.345.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Search inputs for creating a watchlist screening
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:22.461272-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WatchlistScreeningRequestSearchTerms {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "date_of_birth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private LocalDate dateOfBirth;

  public static final String SERIALIZED_NAME_DOCUMENT_NUMBER = "document_number";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NUMBER)
  private String documentNumber;

  public static final String SERIALIZED_NAME_LEGAL_NAME = "legal_name";
  @SerializedName(SERIALIZED_NAME_LEGAL_NAME)
  private String legalName;

  public static final String SERIALIZED_NAME_WATCHLIST_PROGRAM_ID = "watchlist_program_id";
  @SerializedName(SERIALIZED_NAME_WATCHLIST_PROGRAM_ID)
  private String watchlistProgramId;

  public WatchlistScreeningRequestSearchTerms() {
  }

  public WatchlistScreeningRequestSearchTerms country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public WatchlistScreeningRequestSearchTerms dateOfBirth(LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public LocalDate getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public WatchlistScreeningRequestSearchTerms documentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
    return this;
  }

  /**
   * The numeric or alphanumeric identifier associated with this document.
   * @return documentNumber
   */
  @javax.annotation.Nullable
  public String getDocumentNumber() {
    return documentNumber;
  }

  public void setDocumentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
  }


  public WatchlistScreeningRequestSearchTerms legalName(String legalName) {
    this.legalName = legalName;
    return this;
  }

  /**
   * The legal name of the individual being screened.
   * @return legalName
   */
  @javax.annotation.Nonnull
  public String getLegalName() {
    return legalName;
  }

  public void setLegalName(String legalName) {
    this.legalName = legalName;
  }


  public WatchlistScreeningRequestSearchTerms watchlistProgramId(String watchlistProgramId) {
    this.watchlistProgramId = watchlistProgramId;
    return this;
  }

  /**
   * ID of the associated program.
   * @return watchlistProgramId
   */
  @javax.annotation.Nonnull
  public String getWatchlistProgramId() {
    return watchlistProgramId;
  }

  public void setWatchlistProgramId(String watchlistProgramId) {
    this.watchlistProgramId = watchlistProgramId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WatchlistScreeningRequestSearchTerms watchlistScreeningRequestSearchTerms = (WatchlistScreeningRequestSearchTerms) o;
    return Objects.equals(this.country, watchlistScreeningRequestSearchTerms.country) &&
        Objects.equals(this.dateOfBirth, watchlistScreeningRequestSearchTerms.dateOfBirth) &&
        Objects.equals(this.documentNumber, watchlistScreeningRequestSearchTerms.documentNumber) &&
        Objects.equals(this.legalName, watchlistScreeningRequestSearchTerms.legalName) &&
        Objects.equals(this.watchlistProgramId, watchlistScreeningRequestSearchTerms.watchlistProgramId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, dateOfBirth, documentNumber, legalName, watchlistProgramId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WatchlistScreeningRequestSearchTerms {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    legalName: ").append(toIndentedString(legalName)).append("\n");
    sb.append("    watchlistProgramId: ").append(toIndentedString(watchlistProgramId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("date_of_birth");
    openapiFields.add("document_number");
    openapiFields.add("legal_name");
    openapiFields.add("watchlist_program_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("legal_name");
    openapiRequiredFields.add("watchlist_program_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WatchlistScreeningRequestSearchTerms
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WatchlistScreeningRequestSearchTerms.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WatchlistScreeningRequestSearchTerms is not found in the empty JSON string", WatchlistScreeningRequestSearchTerms.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WatchlistScreeningRequestSearchTerms.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WatchlistScreeningRequestSearchTerms` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WatchlistScreeningRequestSearchTerms.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("document_number") != null && !jsonObj.get("document_number").isJsonNull()) && !jsonObj.get("document_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_number").toString()));
      }
      if (!jsonObj.get("legal_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legal_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legal_name").toString()));
      }
      if (!jsonObj.get("watchlist_program_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `watchlist_program_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("watchlist_program_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WatchlistScreeningRequestSearchTerms.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WatchlistScreeningRequestSearchTerms' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WatchlistScreeningRequestSearchTerms> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WatchlistScreeningRequestSearchTerms.class));

       return (TypeAdapter<T>) new TypeAdapter<WatchlistScreeningRequestSearchTerms>() {
           @Override
           public void write(JsonWriter out, WatchlistScreeningRequestSearchTerms value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WatchlistScreeningRequestSearchTerms read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WatchlistScreeningRequestSearchTerms given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WatchlistScreeningRequestSearchTerms
   * @throws IOException if the JSON string is invalid with respect to WatchlistScreeningRequestSearchTerms
   */
  public static WatchlistScreeningRequestSearchTerms fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WatchlistScreeningRequestSearchTerms.class);
  }

  /**
   * Convert an instance of WatchlistScreeningRequestSearchTerms to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

