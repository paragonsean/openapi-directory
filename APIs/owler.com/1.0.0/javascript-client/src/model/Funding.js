/**
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Investor from './Investor';

/**
 * The Funding model module.
 * @module model/Funding
 * @version 1.0.0
 */
class Funding {
    /**
     * Constructs a new <code>Funding</code>.
     * @alias module:model/Funding
     */
    constructor() { 
        
        Funding.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Funding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Funding} obj Optional instance to populate.
     * @return {module:model/Funding} The populated <code>Funding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Funding();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('investor')) {
                obj['investor'] = ApiClient.convertToType(data['investor'], [Investor]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('undisclosed')) {
                obj['undisclosed'] = ApiClient.convertToType(data['undisclosed'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Funding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Funding</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        if (data['investor']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['investor'])) {
                throw new Error("Expected the field `investor` to be an array in the JSON data but got " + data['investor']);
            }
            // validate the optional field `investor` (array)
            for (const item of data['investor']) {
                Investor.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['undisclosed'] && !(typeof data['undisclosed'] === 'string' || data['undisclosed'] instanceof String)) {
            throw new Error("Expected the field `undisclosed` to be a primitive type in the JSON string but got " + data['undisclosed']);
        }

        return true;
    }


}



/**
 * @member {String} amount
 */
Funding.prototype['amount'] = undefined;

/**
 * @member {String} date
 */
Funding.prototype['date'] = undefined;

/**
 * @member {Array.<module:model/Investor>} investor
 */
Funding.prototype['investor'] = undefined;

/**
 * @member {String} type
 */
Funding.prototype['type'] = undefined;

/**
 * @member {String} undisclosed
 */
Funding.prototype['undisclosed'] = undefined;






export default Funding;

