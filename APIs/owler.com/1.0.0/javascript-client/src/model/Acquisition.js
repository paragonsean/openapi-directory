/**
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Acquisition model module.
 * @module model/Acquisition
 * @version 1.0.0
 */
class Acquisition {
    /**
     * Constructs a new <code>Acquisition</code>.
     * @alias module:model/Acquisition
     */
    constructor() { 
        
        Acquisition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Acquisition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Acquisition} obj Optional instance to populate.
     * @return {module:model/Acquisition} The populated <code>Acquisition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Acquisition();

            if (data.hasOwnProperty('acquirer_company_id')) {
                obj['acquirer_company_id'] = ApiClient.convertToType(data['acquirer_company_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('company_id')) {
                obj['company_id'] = ApiClient.convertToType(data['company_id'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('undisclosed')) {
                obj['undisclosed'] = ApiClient.convertToType(data['undisclosed'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Acquisition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Acquisition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['acquirer_company_id'] && !(typeof data['acquirer_company_id'] === 'string' || data['acquirer_company_id'] instanceof String)) {
            throw new Error("Expected the field `acquirer_company_id` to be a primitive type in the JSON string but got " + data['acquirer_company_id']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['company_id'] && !(typeof data['company_id'] === 'string' || data['company_id'] instanceof String)) {
            throw new Error("Expected the field `company_id` to be a primitive type in the JSON string but got " + data['company_id']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['undisclosed'] && !(typeof data['undisclosed'] === 'string' || data['undisclosed'] instanceof String)) {
            throw new Error("Expected the field `undisclosed` to be a primitive type in the JSON string but got " + data['undisclosed']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}



/**
 * @member {String} acquirer_company_id
 */
Acquisition.prototype['acquirer_company_id'] = undefined;

/**
 * @member {String} amount
 */
Acquisition.prototype['amount'] = undefined;

/**
 * @member {String} company_id
 */
Acquisition.prototype['company_id'] = undefined;

/**
 * @member {String} date
 */
Acquisition.prototype['date'] = undefined;

/**
 * @member {String} name
 */
Acquisition.prototype['name'] = undefined;

/**
 * @member {String} status
 */
Acquisition.prototype['status'] = undefined;

/**
 * @member {String} undisclosed
 */
Acquisition.prototype['undisclosed'] = undefined;

/**
 * @member {String} website
 */
Acquisition.prototype['website'] = undefined;






export default Acquisition;

