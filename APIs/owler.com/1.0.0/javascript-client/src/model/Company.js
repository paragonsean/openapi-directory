/**
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Acquisition from './Acquisition';
import Address from './Address';
import Ceo from './Ceo';
import Funding from './Funding';
import SectorVO from './SectorVO';
import Stock from './Stock';

/**
 * The Company model module.
 * @module model/Company
 * @version 1.0.0
 */
class Company {
    /**
     * Constructs a new <code>Company</code>.
     * @alias module:model/Company
     * @param companyId {Number} 
     * @param logoUrl {String} 
     * @param name {String} 
     * @param profileUrl {String} 
     * @param website {String} 
     */
    constructor(companyId, logoUrl, name, profileUrl, website) { 
        
        Company.initialize(this, companyId, logoUrl, name, profileUrl, website);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, companyId, logoUrl, name, profileUrl, website) { 
        obj['company_id'] = companyId;
        obj['logo_url'] = logoUrl;
        obj['name'] = name;
        obj['profile_url'] = profileUrl;
        obj['website'] = website;
    }

    /**
     * Constructs a <code>Company</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Company} obj Optional instance to populate.
     * @return {module:model/Company} The populated <code>Company</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Company();

            if (data.hasOwnProperty('acquisition')) {
                obj['acquisition'] = ApiClient.convertToType(data['acquisition'], [Acquisition]);
            }
            if (data.hasOwnProperty('ceo')) {
                obj['ceo'] = Ceo.constructFromObject(data['ceo']);
            }
            if (data.hasOwnProperty('company_id')) {
                obj['company_id'] = ApiClient.convertToType(data['company_id'], 'Number');
            }
            if (data.hasOwnProperty('company_type')) {
                obj['company_type'] = ApiClient.convertToType(data['company_type'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('employee_count')) {
                obj['employee_count'] = ApiClient.convertToType(data['employee_count'], 'String');
            }
            if (data.hasOwnProperty('facebook_link')) {
                obj['facebook_link'] = ApiClient.convertToType(data['facebook_link'], 'String');
            }
            if (data.hasOwnProperty('founded_date')) {
                obj['founded_date'] = ApiClient.convertToType(data['founded_date'], 'String');
            }
            if (data.hasOwnProperty('funding')) {
                obj['funding'] = ApiClient.convertToType(data['funding'], [Funding]);
            }
            if (data.hasOwnProperty('hq_address')) {
                obj['hq_address'] = Address.constructFromObject(data['hq_address']);
            }
            if (data.hasOwnProperty('industries')) {
                obj['industries'] = ApiClient.convertToType(data['industries'], ['String']);
            }
            if (data.hasOwnProperty('linkedin_link')) {
                obj['linkedin_link'] = ApiClient.convertToType(data['linkedin_link'], 'String');
            }
            if (data.hasOwnProperty('logo_url')) {
                obj['logo_url'] = ApiClient.convertToType(data['logo_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('perm_id')) {
                obj['perm_id'] = ApiClient.convertToType(data['perm_id'], 'String');
            }
            if (data.hasOwnProperty('portfolio_company_ids')) {
                obj['portfolio_company_ids'] = ApiClient.convertToType(data['portfolio_company_ids'], ['Number']);
            }
            if (data.hasOwnProperty('profile_url')) {
                obj['profile_url'] = ApiClient.convertToType(data['profile_url'], 'String');
            }
            if (data.hasOwnProperty('revenue')) {
                obj['revenue'] = ApiClient.convertToType(data['revenue'], 'String');
            }
            if (data.hasOwnProperty('sectors')) {
                obj['sectors'] = ApiClient.convertToType(data['sectors'], [SectorVO]);
            }
            if (data.hasOwnProperty('short_name')) {
                obj['short_name'] = ApiClient.convertToType(data['short_name'], 'String');
            }
            if (data.hasOwnProperty('stock')) {
                obj['stock'] = Stock.constructFromObject(data['stock']);
            }
            if (data.hasOwnProperty('twitter_link')) {
                obj['twitter_link'] = ApiClient.convertToType(data['twitter_link'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('youtube_link')) {
                obj['youtube_link'] = ApiClient.convertToType(data['youtube_link'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Company</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Company</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Company.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['acquisition']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['acquisition'])) {
                throw new Error("Expected the field `acquisition` to be an array in the JSON data but got " + data['acquisition']);
            }
            // validate the optional field `acquisition` (array)
            for (const item of data['acquisition']) {
                Acquisition.validateJSON(item);
            };
        }
        // validate the optional field `ceo`
        if (data['ceo']) { // data not null
          Ceo.validateJSON(data['ceo']);
        }
        // ensure the json data is a string
        if (data['company_type'] && !(typeof data['company_type'] === 'string' || data['company_type'] instanceof String)) {
            throw new Error("Expected the field `company_type` to be a primitive type in the JSON string but got " + data['company_type']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['employee_count'] && !(typeof data['employee_count'] === 'string' || data['employee_count'] instanceof String)) {
            throw new Error("Expected the field `employee_count` to be a primitive type in the JSON string but got " + data['employee_count']);
        }
        // ensure the json data is a string
        if (data['facebook_link'] && !(typeof data['facebook_link'] === 'string' || data['facebook_link'] instanceof String)) {
            throw new Error("Expected the field `facebook_link` to be a primitive type in the JSON string but got " + data['facebook_link']);
        }
        // ensure the json data is a string
        if (data['founded_date'] && !(typeof data['founded_date'] === 'string' || data['founded_date'] instanceof String)) {
            throw new Error("Expected the field `founded_date` to be a primitive type in the JSON string but got " + data['founded_date']);
        }
        if (data['funding']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['funding'])) {
                throw new Error("Expected the field `funding` to be an array in the JSON data but got " + data['funding']);
            }
            // validate the optional field `funding` (array)
            for (const item of data['funding']) {
                Funding.validateJSON(item);
            };
        }
        // validate the optional field `hq_address`
        if (data['hq_address']) { // data not null
          Address.validateJSON(data['hq_address']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['industries'])) {
            throw new Error("Expected the field `industries` to be an array in the JSON data but got " + data['industries']);
        }
        // ensure the json data is a string
        if (data['linkedin_link'] && !(typeof data['linkedin_link'] === 'string' || data['linkedin_link'] instanceof String)) {
            throw new Error("Expected the field `linkedin_link` to be a primitive type in the JSON string but got " + data['linkedin_link']);
        }
        // ensure the json data is a string
        if (data['logo_url'] && !(typeof data['logo_url'] === 'string' || data['logo_url'] instanceof String)) {
            throw new Error("Expected the field `logo_url` to be a primitive type in the JSON string but got " + data['logo_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['perm_id'] && !(typeof data['perm_id'] === 'string' || data['perm_id'] instanceof String)) {
            throw new Error("Expected the field `perm_id` to be a primitive type in the JSON string but got " + data['perm_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['portfolio_company_ids'])) {
            throw new Error("Expected the field `portfolio_company_ids` to be an array in the JSON data but got " + data['portfolio_company_ids']);
        }
        // ensure the json data is a string
        if (data['profile_url'] && !(typeof data['profile_url'] === 'string' || data['profile_url'] instanceof String)) {
            throw new Error("Expected the field `profile_url` to be a primitive type in the JSON string but got " + data['profile_url']);
        }
        // ensure the json data is a string
        if (data['revenue'] && !(typeof data['revenue'] === 'string' || data['revenue'] instanceof String)) {
            throw new Error("Expected the field `revenue` to be a primitive type in the JSON string but got " + data['revenue']);
        }
        if (data['sectors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sectors'])) {
                throw new Error("Expected the field `sectors` to be an array in the JSON data but got " + data['sectors']);
            }
            // validate the optional field `sectors` (array)
            for (const item of data['sectors']) {
                SectorVO.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['short_name'] && !(typeof data['short_name'] === 'string' || data['short_name'] instanceof String)) {
            throw new Error("Expected the field `short_name` to be a primitive type in the JSON string but got " + data['short_name']);
        }
        // validate the optional field `stock`
        if (data['stock']) { // data not null
          Stock.validateJSON(data['stock']);
        }
        // ensure the json data is a string
        if (data['twitter_link'] && !(typeof data['twitter_link'] === 'string' || data['twitter_link'] instanceof String)) {
            throw new Error("Expected the field `twitter_link` to be a primitive type in the JSON string but got " + data['twitter_link']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }
        // ensure the json data is a string
        if (data['youtube_link'] && !(typeof data['youtube_link'] === 'string' || data['youtube_link'] instanceof String)) {
            throw new Error("Expected the field `youtube_link` to be a primitive type in the JSON string but got " + data['youtube_link']);
        }

        return true;
    }


}

Company.RequiredProperties = ["company_id", "logo_url", "name", "profile_url", "website"];

/**
 * @member {Array.<module:model/Acquisition>} acquisition
 */
Company.prototype['acquisition'] = undefined;

/**
 * @member {module:model/Ceo} ceo
 */
Company.prototype['ceo'] = undefined;

/**
 * @member {Number} company_id
 */
Company.prototype['company_id'] = undefined;

/**
 * @member {module:model/Company.CompanyTypeEnum} company_type
 */
Company.prototype['company_type'] = undefined;

/**
 * @member {String} description
 */
Company.prototype['description'] = undefined;

/**
 * @member {String} employee_count
 */
Company.prototype['employee_count'] = undefined;

/**
 * @member {String} facebook_link
 */
Company.prototype['facebook_link'] = undefined;

/**
 * @member {String} founded_date
 */
Company.prototype['founded_date'] = undefined;

/**
 * @member {Array.<module:model/Funding>} funding
 */
Company.prototype['funding'] = undefined;

/**
 * @member {module:model/Address} hq_address
 */
Company.prototype['hq_address'] = undefined;

/**
 * @member {Array.<String>} industries
 */
Company.prototype['industries'] = undefined;

/**
 * @member {String} linkedin_link
 */
Company.prototype['linkedin_link'] = undefined;

/**
 * @member {String} logo_url
 */
Company.prototype['logo_url'] = undefined;

/**
 * @member {String} name
 */
Company.prototype['name'] = undefined;

/**
 * @member {String} perm_id
 */
Company.prototype['perm_id'] = undefined;

/**
 * @member {Array.<Number>} portfolio_company_ids
 */
Company.prototype['portfolio_company_ids'] = undefined;

/**
 * @member {String} profile_url
 */
Company.prototype['profile_url'] = undefined;

/**
 * @member {String} revenue
 */
Company.prototype['revenue'] = undefined;

/**
 * @member {Array.<module:model/SectorVO>} sectors
 */
Company.prototype['sectors'] = undefined;

/**
 * @member {String} short_name
 */
Company.prototype['short_name'] = undefined;

/**
 * @member {module:model/Stock} stock
 */
Company.prototype['stock'] = undefined;

/**
 * @member {String} twitter_link
 */
Company.prototype['twitter_link'] = undefined;

/**
 * @member {String} website
 */
Company.prototype['website'] = undefined;

/**
 * @member {String} youtube_link
 */
Company.prototype['youtube_link'] = undefined;





/**
 * Allowed values for the <code>company_type</code> property.
 * @enum {String}
 * @readonly
 */
Company['CompanyTypeEnum'] = {

    /**
     * value: "Private"
     * @const
     */
    "Private": "Private",

    /**
     * value: "Public"
     * @const
     */
    "Public": "Public",

    /**
     * value: "Product/Brand/Service"
     * @const
     */
    "Product/Brand/Service": "Product/Brand/Service",

    /**
     * value: "NGO/NPO/NFP/Organization/Association"
     * @const
     */
    "NGO/NPO/NFP/Organization/Association": "NGO/NPO/NFP/Organization/Association",

    /**
     * value: "Investment Company"
     * @const
     */
    "Investment Company": "Investment Company",

    /**
     * value: "Government"
     * @const
     */
    "Government": "Government"
};



export default Company;

