/**
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompanyBasicVO from './CompanyBasicVO';

/**
 * The FeedsVO model module.
 * @module model/FeedsVO
 * @version 1.0.0
 */
class FeedsVO {
    /**
     * Constructs a new <code>FeedsVO</code>.
     * @alias module:model/FeedsVO
     */
    constructor() { 
        
        FeedsVO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FeedsVO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedsVO} obj Optional instance to populate.
     * @return {module:model/FeedsVO} The populated <code>FeedsVO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedsVO();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = CompanyBasicVO.constructFromObject(data['company']);
            }
            if (data.hasOwnProperty('enclosure_image')) {
                obj['enclosure_image'] = ApiClient.convertToType(data['enclosure_image'], 'String');
            }
            if (data.hasOwnProperty('feed_date')) {
                obj['feed_date'] = ApiClient.convertToType(data['feed_date'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('owler_feed_url')) {
                obj['owler_feed_url'] = ApiClient.convertToType(data['owler_feed_url'], 'String');
            }
            if (data.hasOwnProperty('publisher_logo')) {
                obj['publisher_logo'] = ApiClient.convertToType(data['publisher_logo'], 'String');
            }
            if (data.hasOwnProperty('publisher_name')) {
                obj['publisher_name'] = ApiClient.convertToType(data['publisher_name'], 'String');
            }
            if (data.hasOwnProperty('source_url')) {
                obj['source_url'] = ApiClient.convertToType(data['source_url'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeedsVO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeedsVO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // validate the optional field `company`
        if (data['company']) { // data not null
          CompanyBasicVO.validateJSON(data['company']);
        }
        // ensure the json data is a string
        if (data['enclosure_image'] && !(typeof data['enclosure_image'] === 'string' || data['enclosure_image'] instanceof String)) {
            throw new Error("Expected the field `enclosure_image` to be a primitive type in the JSON string but got " + data['enclosure_image']);
        }
        // ensure the json data is a string
        if (data['feed_date'] && !(typeof data['feed_date'] === 'string' || data['feed_date'] instanceof String)) {
            throw new Error("Expected the field `feed_date` to be a primitive type in the JSON string but got " + data['feed_date']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['owler_feed_url'] && !(typeof data['owler_feed_url'] === 'string' || data['owler_feed_url'] instanceof String)) {
            throw new Error("Expected the field `owler_feed_url` to be a primitive type in the JSON string but got " + data['owler_feed_url']);
        }
        // ensure the json data is a string
        if (data['publisher_logo'] && !(typeof data['publisher_logo'] === 'string' || data['publisher_logo'] instanceof String)) {
            throw new Error("Expected the field `publisher_logo` to be a primitive type in the JSON string but got " + data['publisher_logo']);
        }
        // ensure the json data is a string
        if (data['publisher_name'] && !(typeof data['publisher_name'] === 'string' || data['publisher_name'] instanceof String)) {
            throw new Error("Expected the field `publisher_name` to be a primitive type in the JSON string but got " + data['publisher_name']);
        }
        // ensure the json data is a string
        if (data['source_url'] && !(typeof data['source_url'] === 'string' || data['source_url'] instanceof String)) {
            throw new Error("Expected the field `source_url` to be a primitive type in the JSON string but got " + data['source_url']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {String} category
 */
FeedsVO.prototype['category'] = undefined;

/**
 * @member {module:model/CompanyBasicVO} company
 */
FeedsVO.prototype['company'] = undefined;

/**
 * @member {String} enclosure_image
 */
FeedsVO.prototype['enclosure_image'] = undefined;

/**
 * @member {String} feed_date
 */
FeedsVO.prototype['feed_date'] = undefined;

/**
 * @member {String} id
 */
FeedsVO.prototype['id'] = undefined;

/**
 * @member {String} owler_feed_url
 */
FeedsVO.prototype['owler_feed_url'] = undefined;

/**
 * @member {String} publisher_logo
 */
FeedsVO.prototype['publisher_logo'] = undefined;

/**
 * @member {String} publisher_name
 */
FeedsVO.prototype['publisher_name'] = undefined;

/**
 * @member {String} source_url
 */
FeedsVO.prototype['source_url'] = undefined;

/**
 * @member {String} title
 */
FeedsVO.prototype['title'] = undefined;






export default FeedsVO;

