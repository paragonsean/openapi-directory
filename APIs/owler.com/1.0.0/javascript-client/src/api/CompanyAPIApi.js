/**
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BasicResults from '../model/BasicResults';
import Company from '../model/Company';
import Results from '../model/Results';

/**
* CompanyAPI service.
* @module api/CompanyAPIApi
* @version 1.0.0
*/
export default class CompanyAPIApi {

    /**
    * Constructs a new CompanyAPIApi. 
    * @alias module:api/CompanyAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the basicCompanySearch operation.
     * @callback module:api/CompanyAPIApi~basicCompanySearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasicResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Basic Search Company by Ticker or Website or Name or PermID
     * The Company Basic Search API searches for a company based on the input and will returns results containing basic details about matching companies. By default the API returns the top 10 available results unless the limit is specified. The maximum limit is restricted to 30.
     * @param {String} q Search term
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fields] Fields to be searched - name, website, ticker, permid. If not specfied, will be searched against all fields
     * @param {String} [limit] Number of results to be displayed - 10 (by default, if not specified) to 30
     * @param {module:model/String} [format = 'json')] Format of the response content - json (by default if not specified), xml
     * @param {module:api/CompanyAPIApi~basicCompanySearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasicResults}
     */
    basicCompanySearch(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling basicCompanySearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'limit': opts['limit'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = BasicResults;
      return this.apiClient.callApi(
        '/v1/company/basicsearch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fuzzyCompanySearch operation.
     * @callback module:api/CompanyAPIApi~fuzzyCompanySearchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fuzzy Search Company by Name or Address or Phone
     * The Company Fuzzy Search API searches for a company based on the input and will return results containing basic details about matching companies. By default the API returns at most top 10 available results unless the limit is specified. The maximum limit is restricted to 30.
     * @param {String} q Search term
     * @param {Array.<module:model/String>} fields Fields to be searched - name, website, ticker, permid, address, phone. Each field and its corresponding value has to be specified
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Number of results to be displayed - 10 (by default, if not specified) to 30
     * @param {module:model/String} [format = 'json')] Format of the response content - json (by default if not specified), xml
     * @param {module:api/CompanyAPIApi~fuzzyCompanySearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    fuzzyCompanySearch(q, fields, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling fuzzyCompanySearch");
      }
      // verify the required parameter 'fields' is set
      if (fields === undefined || fields === null) {
        throw new Error("Missing the required parameter 'fields' when calling fuzzyCompanySearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'fields': this.apiClient.buildCollectionParam(fields, 'csv'),
        'limit': opts['limit'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/company/fuzzysearch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchCompany operation.
     * @callback module:api/CompanyAPIApi~searchCompanyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Results} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Company by Ticker or Website or Name or PermID
     * The Company Search API searches for a company based on the input and will returns results containing basic details about matching companies. By default the API returns the top 10 available results unless the limit is specified. The maximum limit is restricted to 30.
     * @param {String} q Search term
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [fields] Fields to be searched - name, website, ticker. If not specified, will be searched against all fields
     * @param {String} [limit] Number of results to be displayed - 10 (by default, if not specified) to 30
     * @param {module:model/String} [format = 'json')] Format of the response content - json (by default if not specified), xml
     * @param {module:api/CompanyAPIApi~searchCompanyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Results}
     */
    searchCompany(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling searchCompany");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'limit': opts['limit'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Results;
      return this.apiClient.callApi(
        '/v1/company/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyIdCompanyIdGet operation.
     * @callback module:api/CompanyAPIApi~v1CompanyIdCompanyIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Company} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Company by Id
     * The Company Data API provides complete information about a company for the specified Company Id 
     * @param {String} companyId Company Id
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of the response content - json (by default if not specified), xml
     * @param {module:api/CompanyAPIApi~v1CompanyIdCompanyIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Company}
     */
    v1CompanyIdCompanyIdGet(companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1CompanyIdCompanyIdGet");
      }

      let pathParams = {
        'companyId': companyId
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Company;
      return this.apiClient.callApi(
        '/v1/company/id/{companyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1CompanyUrlWebsiteGet operation.
     * @callback module:api/CompanyAPIApi~v1CompanyUrlWebsiteGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Company} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Company by URL
     * The Company Data API provides complete information about a company for the specified URL 
     * @param {String} website Company Domain
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of the response content - json (by default if not specified), xml
     * @param {module:api/CompanyAPIApi~v1CompanyUrlWebsiteGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Company}
     */
    v1CompanyUrlWebsiteGet(website, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'website' is set
      if (website === undefined || website === null) {
        throw new Error("Missing the required parameter 'website' when calling v1CompanyUrlWebsiteGet");
      }

      let pathParams = {
        'website': website
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Company;
      return this.apiClient.callApi(
        '/v1/company/url/{website}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
