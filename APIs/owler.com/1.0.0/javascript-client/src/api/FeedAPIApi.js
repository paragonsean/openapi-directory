/**
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Results from '../model/Results';

/**
* FeedAPI service.
* @module api/FeedAPIApi
* @version 1.0.0
*/
export default class FeedAPIApi {

    /**
    * Constructs a new FeedAPIApi. 
    * @alias module:api/FeedAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1FeedGet operation.
     * @callback module:api/FeedAPIApi~v1FeedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Results} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Feeds for given Company Ids
     * The Feeds API provides a list of feeds and individual feed information for the given Company Ids and Category. By default the API returns the latest 10 feeds available unless the limit is specified. The maximum result is restricted to 100 feeds per API request.
     * @param {Array.<String>} companyId Company Ids separated by comma (Maximum of 150 Company Ids)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of the response content - json (by default if not specified), xml
     * @param {String} [limit = '10')] Number of results to be displayed - 10 (by default, if not specified) to 100
     * @param {String} [paginationId = '*')] Pass pagination_id as blank in the first API request. The API response will return the latest feeds along with the next pagination_id which can be passed in the subsequent API request to get the next set of feeds. Repeat this process until needed or till the pagination_id returned is blank
     * @param {Array.<module:model/String>} [category] Categories separated by comma. If not specified, will search against all categories
     * @param {module:api/FeedAPIApi~v1FeedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Results}
     */
    v1FeedGet(companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling v1FeedGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'company_id': this.apiClient.buildCollectionParam(companyId, 'csv'),
        'limit': opts['limit'],
        'pagination_id': opts['paginationId'],
        'category': this.apiClient.buildCollectionParam(opts['category'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Results;
      return this.apiClient.callApi(
        '/v1/feed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1FeedUrlGet operation.
     * @callback module:api/FeedAPIApi~v1FeedUrlGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Results} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Feeds for given Company Websites
     * The Feeds API provides a list of feeds and individual feed information for the given Company Websites and Category. By default the API returns the latest 10 feeds available unless the limit is specified. The maximum result is restricted to 100 feeds per API request.
     * @param {Array.<String>} domain Company Websites separated by comma (Maximum of 10 Company Websites)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format = 'json')] Format of the response content - json (by default if not specified), xml
     * @param {String} [limit = '10')] Number of results to be displayed - 10 (by default, if not specified) to 100
     * @param {String} [paginationId = '*')] Pass pagination_id as blank in the first API request. The API response will return the latest feeds along with the next pagination_id which can be passed in the subsequent API request to get the next set of feeds. Repeat this process until needed or till the pagination_id returned is blank
     * @param {Array.<module:model/String>} [category] Categories separated by comma. If not specified, will search against all categories
     * @param {module:api/FeedAPIApi~v1FeedUrlGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Results}
     */
    v1FeedUrlGet(domain, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling v1FeedUrlGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'domain': this.apiClient.buildCollectionParam(domain, 'csv'),
        'limit': opts['limit'],
        'pagination_id': opts['paginationId'],
        'category': this.apiClient.buildCollectionParam(opts['category'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Results;
      return this.apiClient.callApi(
        '/v1/feed/url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
