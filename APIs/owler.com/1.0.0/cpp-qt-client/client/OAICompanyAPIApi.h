/**
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICompanyAPIApi_H
#define OAI_OAICompanyAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBasic_results.h"
#include "OAICompany.h"
#include "OAIObject.h"
#include "OAIResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICompanyAPIApi : public QObject {
    Q_OBJECT

public:
    OAICompanyAPIApi(const int timeOut = 0);
    ~OAICompanyAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  q QString [required]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void basicCompanySearch(const QString &q, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  q QString [required]
    * @param[in]  fields QList<QString> [required]
    * @param[in]  limit QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void fuzzyCompanySearch(const QString &q, const QList<QString> &fields, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  q QString [required]
    * @param[in]  fields QList<QString> [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void searchCompany(const QString &q, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  company_id QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void v1CompanyIdCompanyIdGet(const QString &company_id, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  website QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void v1CompanyUrlWebsiteGet(const QString &website, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void basicCompanySearchCallback(OAIHttpRequestWorker *worker);
    void fuzzyCompanySearchCallback(OAIHttpRequestWorker *worker);
    void searchCompanyCallback(OAIHttpRequestWorker *worker);
    void v1CompanyIdCompanyIdGetCallback(OAIHttpRequestWorker *worker);
    void v1CompanyUrlWebsiteGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void basicCompanySearchSignal(OAIBasic_results summary);
    void fuzzyCompanySearchSignal(OAIObject summary);
    void searchCompanySignal(OAIResults summary);
    void v1CompanyIdCompanyIdGetSignal(OAICompany summary);
    void v1CompanyUrlWebsiteGetSignal(OAICompany summary);


    void basicCompanySearchSignalFull(OAIHttpRequestWorker *worker, OAIBasic_results summary);
    void fuzzyCompanySearchSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void searchCompanySignalFull(OAIHttpRequestWorker *worker, OAIResults summary);
    void v1CompanyIdCompanyIdGetSignalFull(OAIHttpRequestWorker *worker, OAICompany summary);
    void v1CompanyUrlWebsiteGetSignalFull(OAIHttpRequestWorker *worker, OAICompany summary);

    Q_DECL_DEPRECATED_X("Use basicCompanySearchSignalError() instead")
    void basicCompanySearchSignalE(OAIBasic_results summary, QNetworkReply::NetworkError error_type, QString error_str);
    void basicCompanySearchSignalError(OAIBasic_results summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fuzzyCompanySearchSignalError() instead")
    void fuzzyCompanySearchSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fuzzyCompanySearchSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchCompanySignalError() instead")
    void searchCompanySignalE(OAIResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchCompanySignalError(OAIResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1CompanyIdCompanyIdGetSignalError() instead")
    void v1CompanyIdCompanyIdGetSignalE(OAICompany summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1CompanyIdCompanyIdGetSignalError(OAICompany summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1CompanyUrlWebsiteGetSignalError() instead")
    void v1CompanyUrlWebsiteGetSignalE(OAICompany summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1CompanyUrlWebsiteGetSignalError(OAICompany summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use basicCompanySearchSignalErrorFull() instead")
    void basicCompanySearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void basicCompanySearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fuzzyCompanySearchSignalErrorFull() instead")
    void fuzzyCompanySearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fuzzyCompanySearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchCompanySignalErrorFull() instead")
    void searchCompanySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchCompanySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1CompanyIdCompanyIdGetSignalErrorFull() instead")
    void v1CompanyIdCompanyIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1CompanyIdCompanyIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1CompanyUrlWebsiteGetSignalErrorFull() instead")
    void v1CompanyUrlWebsiteGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1CompanyUrlWebsiteGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
