/**
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFeedAPIApi_H
#define OAI_OAIFeedAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFeedAPIApi : public QObject {
    Q_OBJECT

public:
    OAIFeedAPIApi(const int timeOut = 0);
    ~OAIFeedAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  company_id QList<QString> [required]
    * @param[in]  format QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  pagination_id QString [optional]
    * @param[in]  category QList<QString> [optional]
    */
    virtual void v1FeedGet(const QList<QString> &company_id, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pagination_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &category = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  domain QList<QString> [required]
    * @param[in]  format QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  pagination_id QString [optional]
    * @param[in]  category QList<QString> [optional]
    */
    virtual void v1FeedUrlGet(const QList<QString> &domain, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pagination_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &category = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v1FeedGetCallback(OAIHttpRequestWorker *worker);
    void v1FeedUrlGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v1FeedGetSignal(OAIResults summary);
    void v1FeedUrlGetSignal(OAIResults summary);


    void v1FeedGetSignalFull(OAIHttpRequestWorker *worker, OAIResults summary);
    void v1FeedUrlGetSignalFull(OAIHttpRequestWorker *worker, OAIResults summary);

    Q_DECL_DEPRECATED_X("Use v1FeedGetSignalError() instead")
    void v1FeedGetSignalE(OAIResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1FeedGetSignalError(OAIResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1FeedUrlGetSignalError() instead")
    void v1FeedUrlGetSignalE(OAIResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1FeedUrlGetSignalError(OAIResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v1FeedGetSignalErrorFull() instead")
    void v1FeedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1FeedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1FeedUrlGetSignalErrorFull() instead")
    void v1FeedUrlGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1FeedUrlGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
