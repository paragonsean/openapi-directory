/**
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvestor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvestor::OAIInvestor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvestor::OAIInvestor() {
    this->initializeModel();
}

OAIInvestor::~OAIInvestor() {}

void OAIInvestor::initializeModel() {

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIInvestor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvestor::fromJsonObject(QJsonObject json) {

    m_company_id_isValid = ::OpenAPI::fromJsonValue(m_company_id, json[QString("company_id")]);
    m_company_id_isSet = !json[QString("company_id")].isNull() && m_company_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIInvestor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvestor::asJsonObject() const {
    QJsonObject obj;
    if (m_company_id_isSet) {
        obj.insert(QString("company_id"), ::OpenAPI::toJsonValue(m_company_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAIInvestor::getCompanyId() const {
    return m_company_id;
}
void OAIInvestor::setCompanyId(const QString &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool OAIInvestor::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool OAIInvestor::is_company_id_Valid() const{
    return m_company_id_isValid;
}

QString OAIInvestor::getName() const {
    return m_name;
}
void OAIInvestor::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInvestor::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInvestor::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInvestor::getWebsite() const {
    return m_website;
}
void OAIInvestor::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIInvestor::is_website_Set() const{
    return m_website_isSet;
}

bool OAIInvestor::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIInvestor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvestor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
