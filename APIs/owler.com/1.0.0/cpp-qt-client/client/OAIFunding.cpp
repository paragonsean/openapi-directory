/**
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunding::OAIFunding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunding::OAIFunding() {
    this->initializeModel();
}

OAIFunding::~OAIFunding() {}

void OAIFunding::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_investor_isSet = false;
    m_investor_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_undisclosed_isSet = false;
    m_undisclosed_isValid = false;
}

void OAIFunding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunding::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_investor_isValid = ::OpenAPI::fromJsonValue(m_investor, json[QString("investor")]);
    m_investor_isSet = !json[QString("investor")].isNull() && m_investor_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_undisclosed_isValid = ::OpenAPI::fromJsonValue(m_undisclosed, json[QString("undisclosed")]);
    m_undisclosed_isSet = !json[QString("undisclosed")].isNull() && m_undisclosed_isValid;
}

QString OAIFunding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunding::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_investor.size() > 0) {
        obj.insert(QString("investor"), ::OpenAPI::toJsonValue(m_investor));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_undisclosed_isSet) {
        obj.insert(QString("undisclosed"), ::OpenAPI::toJsonValue(m_undisclosed));
    }
    return obj;
}

QString OAIFunding::getAmount() const {
    return m_amount;
}
void OAIFunding::setAmount(const QString &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIFunding::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIFunding::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIFunding::getDate() const {
    return m_date;
}
void OAIFunding::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIFunding::is_date_Set() const{
    return m_date_isSet;
}

bool OAIFunding::is_date_Valid() const{
    return m_date_isValid;
}

QList<OAIInvestor> OAIFunding::getInvestor() const {
    return m_investor;
}
void OAIFunding::setInvestor(const QList<OAIInvestor> &investor) {
    m_investor = investor;
    m_investor_isSet = true;
}

bool OAIFunding::is_investor_Set() const{
    return m_investor_isSet;
}

bool OAIFunding::is_investor_Valid() const{
    return m_investor_isValid;
}

QString OAIFunding::getType() const {
    return m_type;
}
void OAIFunding::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFunding::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFunding::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIFunding::getUndisclosed() const {
    return m_undisclosed;
}
void OAIFunding::setUndisclosed(const QString &undisclosed) {
    m_undisclosed = undisclosed;
    m_undisclosed_isSet = true;
}

bool OAIFunding::is_undisclosed_Set() const{
    return m_undisclosed_isSet;
}

bool OAIFunding::is_undisclosed_Valid() const{
    return m_undisclosed_isValid;
}

bool OAIFunding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_investor.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_undisclosed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
