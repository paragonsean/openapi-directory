/**
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedsVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedsVO::OAIFeedsVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedsVO::OAIFeedsVO() {
    this->initializeModel();
}

OAIFeedsVO::~OAIFeedsVO() {}

void OAIFeedsVO::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_enclosure_image_isSet = false;
    m_enclosure_image_isValid = false;

    m_feed_date_isSet = false;
    m_feed_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_owler_feed_url_isSet = false;
    m_owler_feed_url_isValid = false;

    m_publisher_logo_isSet = false;
    m_publisher_logo_isValid = false;

    m_publisher_name_isSet = false;
    m_publisher_name_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIFeedsVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedsVO::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_enclosure_image_isValid = ::OpenAPI::fromJsonValue(m_enclosure_image, json[QString("enclosure_image")]);
    m_enclosure_image_isSet = !json[QString("enclosure_image")].isNull() && m_enclosure_image_isValid;

    m_feed_date_isValid = ::OpenAPI::fromJsonValue(m_feed_date, json[QString("feed_date")]);
    m_feed_date_isSet = !json[QString("feed_date")].isNull() && m_feed_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_owler_feed_url_isValid = ::OpenAPI::fromJsonValue(m_owler_feed_url, json[QString("owler_feed_url")]);
    m_owler_feed_url_isSet = !json[QString("owler_feed_url")].isNull() && m_owler_feed_url_isValid;

    m_publisher_logo_isValid = ::OpenAPI::fromJsonValue(m_publisher_logo, json[QString("publisher_logo")]);
    m_publisher_logo_isSet = !json[QString("publisher_logo")].isNull() && m_publisher_logo_isValid;

    m_publisher_name_isValid = ::OpenAPI::fromJsonValue(m_publisher_name, json[QString("publisher_name")]);
    m_publisher_name_isSet = !json[QString("publisher_name")].isNull() && m_publisher_name_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("source_url")]);
    m_source_url_isSet = !json[QString("source_url")].isNull() && m_source_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIFeedsVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedsVO::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_company.isSet()) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_enclosure_image_isSet) {
        obj.insert(QString("enclosure_image"), ::OpenAPI::toJsonValue(m_enclosure_image));
    }
    if (m_feed_date_isSet) {
        obj.insert(QString("feed_date"), ::OpenAPI::toJsonValue(m_feed_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_owler_feed_url_isSet) {
        obj.insert(QString("owler_feed_url"), ::OpenAPI::toJsonValue(m_owler_feed_url));
    }
    if (m_publisher_logo_isSet) {
        obj.insert(QString("publisher_logo"), ::OpenAPI::toJsonValue(m_publisher_logo));
    }
    if (m_publisher_name_isSet) {
        obj.insert(QString("publisher_name"), ::OpenAPI::toJsonValue(m_publisher_name));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("source_url"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIFeedsVO::getCategory() const {
    return m_category;
}
void OAIFeedsVO::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIFeedsVO::is_category_Set() const{
    return m_category_isSet;
}

bool OAIFeedsVO::is_category_Valid() const{
    return m_category_isValid;
}

OAICompanyBasicVO OAIFeedsVO::getCompany() const {
    return m_company;
}
void OAIFeedsVO::setCompany(const OAICompanyBasicVO &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIFeedsVO::is_company_Set() const{
    return m_company_isSet;
}

bool OAIFeedsVO::is_company_Valid() const{
    return m_company_isValid;
}

QString OAIFeedsVO::getEnclosureImage() const {
    return m_enclosure_image;
}
void OAIFeedsVO::setEnclosureImage(const QString &enclosure_image) {
    m_enclosure_image = enclosure_image;
    m_enclosure_image_isSet = true;
}

bool OAIFeedsVO::is_enclosure_image_Set() const{
    return m_enclosure_image_isSet;
}

bool OAIFeedsVO::is_enclosure_image_Valid() const{
    return m_enclosure_image_isValid;
}

QString OAIFeedsVO::getFeedDate() const {
    return m_feed_date;
}
void OAIFeedsVO::setFeedDate(const QString &feed_date) {
    m_feed_date = feed_date;
    m_feed_date_isSet = true;
}

bool OAIFeedsVO::is_feed_date_Set() const{
    return m_feed_date_isSet;
}

bool OAIFeedsVO::is_feed_date_Valid() const{
    return m_feed_date_isValid;
}

QString OAIFeedsVO::getId() const {
    return m_id;
}
void OAIFeedsVO::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFeedsVO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFeedsVO::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFeedsVO::getOwlerFeedUrl() const {
    return m_owler_feed_url;
}
void OAIFeedsVO::setOwlerFeedUrl(const QString &owler_feed_url) {
    m_owler_feed_url = owler_feed_url;
    m_owler_feed_url_isSet = true;
}

bool OAIFeedsVO::is_owler_feed_url_Set() const{
    return m_owler_feed_url_isSet;
}

bool OAIFeedsVO::is_owler_feed_url_Valid() const{
    return m_owler_feed_url_isValid;
}

QString OAIFeedsVO::getPublisherLogo() const {
    return m_publisher_logo;
}
void OAIFeedsVO::setPublisherLogo(const QString &publisher_logo) {
    m_publisher_logo = publisher_logo;
    m_publisher_logo_isSet = true;
}

bool OAIFeedsVO::is_publisher_logo_Set() const{
    return m_publisher_logo_isSet;
}

bool OAIFeedsVO::is_publisher_logo_Valid() const{
    return m_publisher_logo_isValid;
}

QString OAIFeedsVO::getPublisherName() const {
    return m_publisher_name;
}
void OAIFeedsVO::setPublisherName(const QString &publisher_name) {
    m_publisher_name = publisher_name;
    m_publisher_name_isSet = true;
}

bool OAIFeedsVO::is_publisher_name_Set() const{
    return m_publisher_name_isSet;
}

bool OAIFeedsVO::is_publisher_name_Valid() const{
    return m_publisher_name_isValid;
}

QString OAIFeedsVO::getSourceUrl() const {
    return m_source_url;
}
void OAIFeedsVO::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIFeedsVO::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIFeedsVO::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QString OAIFeedsVO::getTitle() const {
    return m_title;
}
void OAIFeedsVO::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIFeedsVO::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFeedsVO::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIFeedsVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enclosure_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owler_feed_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedsVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
