/**
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompany.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompany::OAICompany(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompany::OAICompany() {
    this->initializeModel();
}

OAICompany::~OAICompany() {}

void OAICompany::initializeModel() {

    m_acquisition_isSet = false;
    m_acquisition_isValid = false;

    m_ceo_isSet = false;
    m_ceo_isValid = false;

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_company_type_isSet = false;
    m_company_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_employee_count_isSet = false;
    m_employee_count_isValid = false;

    m_facebook_link_isSet = false;
    m_facebook_link_isValid = false;

    m_founded_date_isSet = false;
    m_founded_date_isValid = false;

    m_funding_isSet = false;
    m_funding_isValid = false;

    m_hq_address_isSet = false;
    m_hq_address_isValid = false;

    m_industries_isSet = false;
    m_industries_isValid = false;

    m_linkedin_link_isSet = false;
    m_linkedin_link_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_perm_id_isSet = false;
    m_perm_id_isValid = false;

    m_portfolio_company_ids_isSet = false;
    m_portfolio_company_ids_isValid = false;

    m_profile_url_isSet = false;
    m_profile_url_isValid = false;

    m_revenue_isSet = false;
    m_revenue_isValid = false;

    m_sectors_isSet = false;
    m_sectors_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_stock_isSet = false;
    m_stock_isValid = false;

    m_twitter_link_isSet = false;
    m_twitter_link_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;

    m_youtube_link_isSet = false;
    m_youtube_link_isValid = false;
}

void OAICompany::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompany::fromJsonObject(QJsonObject json) {

    m_acquisition_isValid = ::OpenAPI::fromJsonValue(m_acquisition, json[QString("acquisition")]);
    m_acquisition_isSet = !json[QString("acquisition")].isNull() && m_acquisition_isValid;

    m_ceo_isValid = ::OpenAPI::fromJsonValue(m_ceo, json[QString("ceo")]);
    m_ceo_isSet = !json[QString("ceo")].isNull() && m_ceo_isValid;

    m_company_id_isValid = ::OpenAPI::fromJsonValue(m_company_id, json[QString("company_id")]);
    m_company_id_isSet = !json[QString("company_id")].isNull() && m_company_id_isValid;

    m_company_type_isValid = ::OpenAPI::fromJsonValue(m_company_type, json[QString("company_type")]);
    m_company_type_isSet = !json[QString("company_type")].isNull() && m_company_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_employee_count_isValid = ::OpenAPI::fromJsonValue(m_employee_count, json[QString("employee_count")]);
    m_employee_count_isSet = !json[QString("employee_count")].isNull() && m_employee_count_isValid;

    m_facebook_link_isValid = ::OpenAPI::fromJsonValue(m_facebook_link, json[QString("facebook_link")]);
    m_facebook_link_isSet = !json[QString("facebook_link")].isNull() && m_facebook_link_isValid;

    m_founded_date_isValid = ::OpenAPI::fromJsonValue(m_founded_date, json[QString("founded_date")]);
    m_founded_date_isSet = !json[QString("founded_date")].isNull() && m_founded_date_isValid;

    m_funding_isValid = ::OpenAPI::fromJsonValue(m_funding, json[QString("funding")]);
    m_funding_isSet = !json[QString("funding")].isNull() && m_funding_isValid;

    m_hq_address_isValid = ::OpenAPI::fromJsonValue(m_hq_address, json[QString("hq_address")]);
    m_hq_address_isSet = !json[QString("hq_address")].isNull() && m_hq_address_isValid;

    m_industries_isValid = ::OpenAPI::fromJsonValue(m_industries, json[QString("industries")]);
    m_industries_isSet = !json[QString("industries")].isNull() && m_industries_isValid;

    m_linkedin_link_isValid = ::OpenAPI::fromJsonValue(m_linkedin_link, json[QString("linkedin_link")]);
    m_linkedin_link_isSet = !json[QString("linkedin_link")].isNull() && m_linkedin_link_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logo_url")]);
    m_logo_url_isSet = !json[QString("logo_url")].isNull() && m_logo_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_perm_id_isValid = ::OpenAPI::fromJsonValue(m_perm_id, json[QString("perm_id")]);
    m_perm_id_isSet = !json[QString("perm_id")].isNull() && m_perm_id_isValid;

    m_portfolio_company_ids_isValid = ::OpenAPI::fromJsonValue(m_portfolio_company_ids, json[QString("portfolio_company_ids")]);
    m_portfolio_company_ids_isSet = !json[QString("portfolio_company_ids")].isNull() && m_portfolio_company_ids_isValid;

    m_profile_url_isValid = ::OpenAPI::fromJsonValue(m_profile_url, json[QString("profile_url")]);
    m_profile_url_isSet = !json[QString("profile_url")].isNull() && m_profile_url_isValid;

    m_revenue_isValid = ::OpenAPI::fromJsonValue(m_revenue, json[QString("revenue")]);
    m_revenue_isSet = !json[QString("revenue")].isNull() && m_revenue_isValid;

    m_sectors_isValid = ::OpenAPI::fromJsonValue(m_sectors, json[QString("sectors")]);
    m_sectors_isSet = !json[QString("sectors")].isNull() && m_sectors_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("short_name")]);
    m_short_name_isSet = !json[QString("short_name")].isNull() && m_short_name_isValid;

    m_stock_isValid = ::OpenAPI::fromJsonValue(m_stock, json[QString("stock")]);
    m_stock_isSet = !json[QString("stock")].isNull() && m_stock_isValid;

    m_twitter_link_isValid = ::OpenAPI::fromJsonValue(m_twitter_link, json[QString("twitter_link")]);
    m_twitter_link_isSet = !json[QString("twitter_link")].isNull() && m_twitter_link_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;

    m_youtube_link_isValid = ::OpenAPI::fromJsonValue(m_youtube_link, json[QString("youtube_link")]);
    m_youtube_link_isSet = !json[QString("youtube_link")].isNull() && m_youtube_link_isValid;
}

QString OAICompany::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompany::asJsonObject() const {
    QJsonObject obj;
    if (m_acquisition.size() > 0) {
        obj.insert(QString("acquisition"), ::OpenAPI::toJsonValue(m_acquisition));
    }
    if (m_ceo.isSet()) {
        obj.insert(QString("ceo"), ::OpenAPI::toJsonValue(m_ceo));
    }
    if (m_company_id_isSet) {
        obj.insert(QString("company_id"), ::OpenAPI::toJsonValue(m_company_id));
    }
    if (m_company_type_isSet) {
        obj.insert(QString("company_type"), ::OpenAPI::toJsonValue(m_company_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_employee_count_isSet) {
        obj.insert(QString("employee_count"), ::OpenAPI::toJsonValue(m_employee_count));
    }
    if (m_facebook_link_isSet) {
        obj.insert(QString("facebook_link"), ::OpenAPI::toJsonValue(m_facebook_link));
    }
    if (m_founded_date_isSet) {
        obj.insert(QString("founded_date"), ::OpenAPI::toJsonValue(m_founded_date));
    }
    if (m_funding.size() > 0) {
        obj.insert(QString("funding"), ::OpenAPI::toJsonValue(m_funding));
    }
    if (m_hq_address.isSet()) {
        obj.insert(QString("hq_address"), ::OpenAPI::toJsonValue(m_hq_address));
    }
    if (m_industries.size() > 0) {
        obj.insert(QString("industries"), ::OpenAPI::toJsonValue(m_industries));
    }
    if (m_linkedin_link_isSet) {
        obj.insert(QString("linkedin_link"), ::OpenAPI::toJsonValue(m_linkedin_link));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logo_url"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_perm_id_isSet) {
        obj.insert(QString("perm_id"), ::OpenAPI::toJsonValue(m_perm_id));
    }
    if (m_portfolio_company_ids.size() > 0) {
        obj.insert(QString("portfolio_company_ids"), ::OpenAPI::toJsonValue(m_portfolio_company_ids));
    }
    if (m_profile_url_isSet) {
        obj.insert(QString("profile_url"), ::OpenAPI::toJsonValue(m_profile_url));
    }
    if (m_revenue_isSet) {
        obj.insert(QString("revenue"), ::OpenAPI::toJsonValue(m_revenue));
    }
    if (m_sectors.size() > 0) {
        obj.insert(QString("sectors"), ::OpenAPI::toJsonValue(m_sectors));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("short_name"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_stock.isSet()) {
        obj.insert(QString("stock"), ::OpenAPI::toJsonValue(m_stock));
    }
    if (m_twitter_link_isSet) {
        obj.insert(QString("twitter_link"), ::OpenAPI::toJsonValue(m_twitter_link));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    if (m_youtube_link_isSet) {
        obj.insert(QString("youtube_link"), ::OpenAPI::toJsonValue(m_youtube_link));
    }
    return obj;
}

QList<OAIAcquisition> OAICompany::getAcquisition() const {
    return m_acquisition;
}
void OAICompany::setAcquisition(const QList<OAIAcquisition> &acquisition) {
    m_acquisition = acquisition;
    m_acquisition_isSet = true;
}

bool OAICompany::is_acquisition_Set() const{
    return m_acquisition_isSet;
}

bool OAICompany::is_acquisition_Valid() const{
    return m_acquisition_isValid;
}

OAICeo OAICompany::getCeo() const {
    return m_ceo;
}
void OAICompany::setCeo(const OAICeo &ceo) {
    m_ceo = ceo;
    m_ceo_isSet = true;
}

bool OAICompany::is_ceo_Set() const{
    return m_ceo_isSet;
}

bool OAICompany::is_ceo_Valid() const{
    return m_ceo_isValid;
}

qint64 OAICompany::getCompanyId() const {
    return m_company_id;
}
void OAICompany::setCompanyId(const qint64 &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool OAICompany::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool OAICompany::is_company_id_Valid() const{
    return m_company_id_isValid;
}

QString OAICompany::getCompanyType() const {
    return m_company_type;
}
void OAICompany::setCompanyType(const QString &company_type) {
    m_company_type = company_type;
    m_company_type_isSet = true;
}

bool OAICompany::is_company_type_Set() const{
    return m_company_type_isSet;
}

bool OAICompany::is_company_type_Valid() const{
    return m_company_type_isValid;
}

QString OAICompany::getDescription() const {
    return m_description;
}
void OAICompany::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICompany::is_description_Set() const{
    return m_description_isSet;
}

bool OAICompany::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICompany::getEmployeeCount() const {
    return m_employee_count;
}
void OAICompany::setEmployeeCount(const QString &employee_count) {
    m_employee_count = employee_count;
    m_employee_count_isSet = true;
}

bool OAICompany::is_employee_count_Set() const{
    return m_employee_count_isSet;
}

bool OAICompany::is_employee_count_Valid() const{
    return m_employee_count_isValid;
}

QString OAICompany::getFacebookLink() const {
    return m_facebook_link;
}
void OAICompany::setFacebookLink(const QString &facebook_link) {
    m_facebook_link = facebook_link;
    m_facebook_link_isSet = true;
}

bool OAICompany::is_facebook_link_Set() const{
    return m_facebook_link_isSet;
}

bool OAICompany::is_facebook_link_Valid() const{
    return m_facebook_link_isValid;
}

QString OAICompany::getFoundedDate() const {
    return m_founded_date;
}
void OAICompany::setFoundedDate(const QString &founded_date) {
    m_founded_date = founded_date;
    m_founded_date_isSet = true;
}

bool OAICompany::is_founded_date_Set() const{
    return m_founded_date_isSet;
}

bool OAICompany::is_founded_date_Valid() const{
    return m_founded_date_isValid;
}

QList<OAIFunding> OAICompany::getFunding() const {
    return m_funding;
}
void OAICompany::setFunding(const QList<OAIFunding> &funding) {
    m_funding = funding;
    m_funding_isSet = true;
}

bool OAICompany::is_funding_Set() const{
    return m_funding_isSet;
}

bool OAICompany::is_funding_Valid() const{
    return m_funding_isValid;
}

OAIAddress OAICompany::getHqAddress() const {
    return m_hq_address;
}
void OAICompany::setHqAddress(const OAIAddress &hq_address) {
    m_hq_address = hq_address;
    m_hq_address_isSet = true;
}

bool OAICompany::is_hq_address_Set() const{
    return m_hq_address_isSet;
}

bool OAICompany::is_hq_address_Valid() const{
    return m_hq_address_isValid;
}

QList<QString> OAICompany::getIndustries() const {
    return m_industries;
}
void OAICompany::setIndustries(const QList<QString> &industries) {
    m_industries = industries;
    m_industries_isSet = true;
}

bool OAICompany::is_industries_Set() const{
    return m_industries_isSet;
}

bool OAICompany::is_industries_Valid() const{
    return m_industries_isValid;
}

QString OAICompany::getLinkedinLink() const {
    return m_linkedin_link;
}
void OAICompany::setLinkedinLink(const QString &linkedin_link) {
    m_linkedin_link = linkedin_link;
    m_linkedin_link_isSet = true;
}

bool OAICompany::is_linkedin_link_Set() const{
    return m_linkedin_link_isSet;
}

bool OAICompany::is_linkedin_link_Valid() const{
    return m_linkedin_link_isValid;
}

QString OAICompany::getLogoUrl() const {
    return m_logo_url;
}
void OAICompany::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAICompany::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAICompany::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAICompany::getName() const {
    return m_name;
}
void OAICompany::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICompany::is_name_Set() const{
    return m_name_isSet;
}

bool OAICompany::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICompany::getPermId() const {
    return m_perm_id;
}
void OAICompany::setPermId(const QString &perm_id) {
    m_perm_id = perm_id;
    m_perm_id_isSet = true;
}

bool OAICompany::is_perm_id_Set() const{
    return m_perm_id_isSet;
}

bool OAICompany::is_perm_id_Valid() const{
    return m_perm_id_isValid;
}

QList<qint32> OAICompany::getPortfolioCompanyIds() const {
    return m_portfolio_company_ids;
}
void OAICompany::setPortfolioCompanyIds(const QList<qint32> &portfolio_company_ids) {
    m_portfolio_company_ids = portfolio_company_ids;
    m_portfolio_company_ids_isSet = true;
}

bool OAICompany::is_portfolio_company_ids_Set() const{
    return m_portfolio_company_ids_isSet;
}

bool OAICompany::is_portfolio_company_ids_Valid() const{
    return m_portfolio_company_ids_isValid;
}

QString OAICompany::getProfileUrl() const {
    return m_profile_url;
}
void OAICompany::setProfileUrl(const QString &profile_url) {
    m_profile_url = profile_url;
    m_profile_url_isSet = true;
}

bool OAICompany::is_profile_url_Set() const{
    return m_profile_url_isSet;
}

bool OAICompany::is_profile_url_Valid() const{
    return m_profile_url_isValid;
}

QString OAICompany::getRevenue() const {
    return m_revenue;
}
void OAICompany::setRevenue(const QString &revenue) {
    m_revenue = revenue;
    m_revenue_isSet = true;
}

bool OAICompany::is_revenue_Set() const{
    return m_revenue_isSet;
}

bool OAICompany::is_revenue_Valid() const{
    return m_revenue_isValid;
}

QList<OAISectorVO> OAICompany::getSectors() const {
    return m_sectors;
}
void OAICompany::setSectors(const QList<OAISectorVO> &sectors) {
    m_sectors = sectors;
    m_sectors_isSet = true;
}

bool OAICompany::is_sectors_Set() const{
    return m_sectors_isSet;
}

bool OAICompany::is_sectors_Valid() const{
    return m_sectors_isValid;
}

QString OAICompany::getShortName() const {
    return m_short_name;
}
void OAICompany::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAICompany::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAICompany::is_short_name_Valid() const{
    return m_short_name_isValid;
}

OAIStock OAICompany::getStock() const {
    return m_stock;
}
void OAICompany::setStock(const OAIStock &stock) {
    m_stock = stock;
    m_stock_isSet = true;
}

bool OAICompany::is_stock_Set() const{
    return m_stock_isSet;
}

bool OAICompany::is_stock_Valid() const{
    return m_stock_isValid;
}

QString OAICompany::getTwitterLink() const {
    return m_twitter_link;
}
void OAICompany::setTwitterLink(const QString &twitter_link) {
    m_twitter_link = twitter_link;
    m_twitter_link_isSet = true;
}

bool OAICompany::is_twitter_link_Set() const{
    return m_twitter_link_isSet;
}

bool OAICompany::is_twitter_link_Valid() const{
    return m_twitter_link_isValid;
}

QString OAICompany::getWebsite() const {
    return m_website;
}
void OAICompany::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAICompany::is_website_Set() const{
    return m_website_isSet;
}

bool OAICompany::is_website_Valid() const{
    return m_website_isValid;
}

QString OAICompany::getYoutubeLink() const {
    return m_youtube_link;
}
void OAICompany::setYoutubeLink(const QString &youtube_link) {
    m_youtube_link = youtube_link;
    m_youtube_link_isSet = true;
}

bool OAICompany::is_youtube_link_Set() const{
    return m_youtube_link_isSet;
}

bool OAICompany::is_youtube_link_Valid() const{
    return m_youtube_link_isValid;
}

bool OAICompany::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquisition.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ceo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employee_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facebook_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_founded_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hq_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_industries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_linkedin_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_company_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revenue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sectors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_youtube_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompany::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_company_id_isValid && m_logo_url_isValid && m_name_isValid && m_profile_url_isValid && m_website_isValid && true;
}

} // namespace OpenAPI
