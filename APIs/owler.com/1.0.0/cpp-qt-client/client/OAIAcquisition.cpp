/**
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcquisition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcquisition::OAIAcquisition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcquisition::OAIAcquisition() {
    this->initializeModel();
}

OAIAcquisition::~OAIAcquisition() {}

void OAIAcquisition::initializeModel() {

    m_acquirer_company_id_isSet = false;
    m_acquirer_company_id_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_undisclosed_isSet = false;
    m_undisclosed_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIAcquisition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcquisition::fromJsonObject(QJsonObject json) {

    m_acquirer_company_id_isValid = ::OpenAPI::fromJsonValue(m_acquirer_company_id, json[QString("acquirer_company_id")]);
    m_acquirer_company_id_isSet = !json[QString("acquirer_company_id")].isNull() && m_acquirer_company_id_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_company_id_isValid = ::OpenAPI::fromJsonValue(m_company_id, json[QString("company_id")]);
    m_company_id_isSet = !json[QString("company_id")].isNull() && m_company_id_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_undisclosed_isValid = ::OpenAPI::fromJsonValue(m_undisclosed, json[QString("undisclosed")]);
    m_undisclosed_isSet = !json[QString("undisclosed")].isNull() && m_undisclosed_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIAcquisition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcquisition::asJsonObject() const {
    QJsonObject obj;
    if (m_acquirer_company_id_isSet) {
        obj.insert(QString("acquirer_company_id"), ::OpenAPI::toJsonValue(m_acquirer_company_id));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_company_id_isSet) {
        obj.insert(QString("company_id"), ::OpenAPI::toJsonValue(m_company_id));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_undisclosed_isSet) {
        obj.insert(QString("undisclosed"), ::OpenAPI::toJsonValue(m_undisclosed));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAIAcquisition::getAcquirerCompanyId() const {
    return m_acquirer_company_id;
}
void OAIAcquisition::setAcquirerCompanyId(const QString &acquirer_company_id) {
    m_acquirer_company_id = acquirer_company_id;
    m_acquirer_company_id_isSet = true;
}

bool OAIAcquisition::is_acquirer_company_id_Set() const{
    return m_acquirer_company_id_isSet;
}

bool OAIAcquisition::is_acquirer_company_id_Valid() const{
    return m_acquirer_company_id_isValid;
}

QString OAIAcquisition::getAmount() const {
    return m_amount;
}
void OAIAcquisition::setAmount(const QString &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIAcquisition::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIAcquisition::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIAcquisition::getCompanyId() const {
    return m_company_id;
}
void OAIAcquisition::setCompanyId(const QString &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool OAIAcquisition::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool OAIAcquisition::is_company_id_Valid() const{
    return m_company_id_isValid;
}

QString OAIAcquisition::getDate() const {
    return m_date;
}
void OAIAcquisition::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAcquisition::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAcquisition::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIAcquisition::getName() const {
    return m_name;
}
void OAIAcquisition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAcquisition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAcquisition::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAcquisition::getStatus() const {
    return m_status;
}
void OAIAcquisition::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAcquisition::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAcquisition::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAcquisition::getUndisclosed() const {
    return m_undisclosed;
}
void OAIAcquisition::setUndisclosed(const QString &undisclosed) {
    m_undisclosed = undisclosed;
    m_undisclosed_isSet = true;
}

bool OAIAcquisition::is_undisclosed_Set() const{
    return m_undisclosed_isSet;
}

bool OAIAcquisition::is_undisclosed_Valid() const{
    return m_undisclosed_isValid;
}

QString OAIAcquisition::getWebsite() const {
    return m_website;
}
void OAIAcquisition::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIAcquisition::is_website_Set() const{
    return m_website_isSet;
}

bool OAIAcquisition::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIAcquisition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquirer_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_undisclosed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcquisition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
