/**
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompanyCompetitorVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompanyCompetitorVO::OAICompanyCompetitorVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompanyCompetitorVO::OAICompanyCompetitorVO() {
    this->initializeModel();
}

OAICompanyCompetitorVO::~OAICompanyCompetitorVO() {}

void OAICompanyCompetitorVO::initializeModel() {

    m_competitor_isSet = false;
    m_competitor_isValid = false;
}

void OAICompanyCompetitorVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompanyCompetitorVO::fromJsonObject(QJsonObject json) {

    m_competitor_isValid = ::OpenAPI::fromJsonValue(m_competitor, json[QString("competitor")]);
    m_competitor_isSet = !json[QString("competitor")].isNull() && m_competitor_isValid;
}

QString OAICompanyCompetitorVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompanyCompetitorVO::asJsonObject() const {
    QJsonObject obj;
    if (m_competitor.size() > 0) {
        obj.insert(QString("competitor"), ::OpenAPI::toJsonValue(m_competitor));
    }
    return obj;
}

QList<OAICompanyBasicVO> OAICompanyCompetitorVO::getCompetitor() const {
    return m_competitor;
}
void OAICompanyCompetitorVO::setCompetitor(const QList<OAICompanyBasicVO> &competitor) {
    m_competitor = competitor;
    m_competitor_isSet = true;
}

bool OAICompanyCompetitorVO::is_competitor_Set() const{
    return m_competitor_isSet;
}

bool OAICompanyCompetitorVO::is_competitor_Valid() const{
    return m_competitor_isValid;
}

bool OAICompanyCompetitorVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_competitor.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompanyCompetitorVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
