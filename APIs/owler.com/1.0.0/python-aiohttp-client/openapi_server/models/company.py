# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.acquisition import Acquisition
from openapi_server.models.address import Address
from openapi_server.models.ceo import Ceo
from openapi_server.models.funding import Funding
from openapi_server.models.sector_vo import SectorVO
from openapi_server.models.stock import Stock
from openapi_server import util


class Company(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquisition: List[Acquisition]=None, ceo: Ceo=None, company_id: int=None, company_type: str=None, description: str=None, employee_count: str=None, facebook_link: str=None, founded_date: str=None, funding: List[Funding]=None, hq_address: Address=None, industries: List[str]=None, linkedin_link: str=None, logo_url: str=None, name: str=None, perm_id: str=None, portfolio_company_ids: List[int]=None, profile_url: str=None, revenue: str=None, sectors: List[SectorVO]=None, short_name: str=None, stock: Stock=None, twitter_link: str=None, website: str=None, youtube_link: str=None):
        """Company - a model defined in OpenAPI

        :param acquisition: The acquisition of this Company.
        :param ceo: The ceo of this Company.
        :param company_id: The company_id of this Company.
        :param company_type: The company_type of this Company.
        :param description: The description of this Company.
        :param employee_count: The employee_count of this Company.
        :param facebook_link: The facebook_link of this Company.
        :param founded_date: The founded_date of this Company.
        :param funding: The funding of this Company.
        :param hq_address: The hq_address of this Company.
        :param industries: The industries of this Company.
        :param linkedin_link: The linkedin_link of this Company.
        :param logo_url: The logo_url of this Company.
        :param name: The name of this Company.
        :param perm_id: The perm_id of this Company.
        :param portfolio_company_ids: The portfolio_company_ids of this Company.
        :param profile_url: The profile_url of this Company.
        :param revenue: The revenue of this Company.
        :param sectors: The sectors of this Company.
        :param short_name: The short_name of this Company.
        :param stock: The stock of this Company.
        :param twitter_link: The twitter_link of this Company.
        :param website: The website of this Company.
        :param youtube_link: The youtube_link of this Company.
        """
        self.openapi_types = {
            'acquisition': List[Acquisition],
            'ceo': Ceo,
            'company_id': int,
            'company_type': str,
            'description': str,
            'employee_count': str,
            'facebook_link': str,
            'founded_date': str,
            'funding': List[Funding],
            'hq_address': Address,
            'industries': List[str],
            'linkedin_link': str,
            'logo_url': str,
            'name': str,
            'perm_id': str,
            'portfolio_company_ids': List[int],
            'profile_url': str,
            'revenue': str,
            'sectors': List[SectorVO],
            'short_name': str,
            'stock': Stock,
            'twitter_link': str,
            'website': str,
            'youtube_link': str
        }

        self.attribute_map = {
            'acquisition': 'acquisition',
            'ceo': 'ceo',
            'company_id': 'company_id',
            'company_type': 'company_type',
            'description': 'description',
            'employee_count': 'employee_count',
            'facebook_link': 'facebook_link',
            'founded_date': 'founded_date',
            'funding': 'funding',
            'hq_address': 'hq_address',
            'industries': 'industries',
            'linkedin_link': 'linkedin_link',
            'logo_url': 'logo_url',
            'name': 'name',
            'perm_id': 'perm_id',
            'portfolio_company_ids': 'portfolio_company_ids',
            'profile_url': 'profile_url',
            'revenue': 'revenue',
            'sectors': 'sectors',
            'short_name': 'short_name',
            'stock': 'stock',
            'twitter_link': 'twitter_link',
            'website': 'website',
            'youtube_link': 'youtube_link'
        }

        self._acquisition = acquisition
        self._ceo = ceo
        self._company_id = company_id
        self._company_type = company_type
        self._description = description
        self._employee_count = employee_count
        self._facebook_link = facebook_link
        self._founded_date = founded_date
        self._funding = funding
        self._hq_address = hq_address
        self._industries = industries
        self._linkedin_link = linkedin_link
        self._logo_url = logo_url
        self._name = name
        self._perm_id = perm_id
        self._portfolio_company_ids = portfolio_company_ids
        self._profile_url = profile_url
        self._revenue = revenue
        self._sectors = sectors
        self._short_name = short_name
        self._stock = stock
        self._twitter_link = twitter_link
        self._website = website
        self._youtube_link = youtube_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Company':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The company of this Company.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquisition(self):
        """Gets the acquisition of this Company.


        :return: The acquisition of this Company.
        :rtype: List[Acquisition]
        """
        return self._acquisition

    @acquisition.setter
    def acquisition(self, acquisition):
        """Sets the acquisition of this Company.


        :param acquisition: The acquisition of this Company.
        :type acquisition: List[Acquisition]
        """

        self._acquisition = acquisition

    @property
    def ceo(self):
        """Gets the ceo of this Company.


        :return: The ceo of this Company.
        :rtype: Ceo
        """
        return self._ceo

    @ceo.setter
    def ceo(self, ceo):
        """Sets the ceo of this Company.


        :param ceo: The ceo of this Company.
        :type ceo: Ceo
        """

        self._ceo = ceo

    @property
    def company_id(self):
        """Gets the company_id of this Company.


        :return: The company_id of this Company.
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Company.


        :param company_id: The company_id of this Company.
        :type company_id: int
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")

        self._company_id = company_id

    @property
    def company_type(self):
        """Gets the company_type of this Company.


        :return: The company_type of this Company.
        :rtype: str
        """
        return self._company_type

    @company_type.setter
    def company_type(self, company_type):
        """Sets the company_type of this Company.


        :param company_type: The company_type of this Company.
        :type company_type: str
        """
        allowed_values = ["Private", "Public", "Product/Brand/Service", "NGO/NPO/NFP/Organization/Association", "Investment Company", "Government"]  # noqa: E501
        if company_type not in allowed_values:
            raise ValueError(
                "Invalid value for `company_type` ({0}), must be one of {1}"
                .format(company_type, allowed_values)
            )

        self._company_type = company_type

    @property
    def description(self):
        """Gets the description of this Company.


        :return: The description of this Company.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Company.


        :param description: The description of this Company.
        :type description: str
        """

        self._description = description

    @property
    def employee_count(self):
        """Gets the employee_count of this Company.


        :return: The employee_count of this Company.
        :rtype: str
        """
        return self._employee_count

    @employee_count.setter
    def employee_count(self, employee_count):
        """Sets the employee_count of this Company.


        :param employee_count: The employee_count of this Company.
        :type employee_count: str
        """

        self._employee_count = employee_count

    @property
    def facebook_link(self):
        """Gets the facebook_link of this Company.


        :return: The facebook_link of this Company.
        :rtype: str
        """
        return self._facebook_link

    @facebook_link.setter
    def facebook_link(self, facebook_link):
        """Sets the facebook_link of this Company.


        :param facebook_link: The facebook_link of this Company.
        :type facebook_link: str
        """

        self._facebook_link = facebook_link

    @property
    def founded_date(self):
        """Gets the founded_date of this Company.


        :return: The founded_date of this Company.
        :rtype: str
        """
        return self._founded_date

    @founded_date.setter
    def founded_date(self, founded_date):
        """Sets the founded_date of this Company.


        :param founded_date: The founded_date of this Company.
        :type founded_date: str
        """

        self._founded_date = founded_date

    @property
    def funding(self):
        """Gets the funding of this Company.


        :return: The funding of this Company.
        :rtype: List[Funding]
        """
        return self._funding

    @funding.setter
    def funding(self, funding):
        """Sets the funding of this Company.


        :param funding: The funding of this Company.
        :type funding: List[Funding]
        """

        self._funding = funding

    @property
    def hq_address(self):
        """Gets the hq_address of this Company.


        :return: The hq_address of this Company.
        :rtype: Address
        """
        return self._hq_address

    @hq_address.setter
    def hq_address(self, hq_address):
        """Sets the hq_address of this Company.


        :param hq_address: The hq_address of this Company.
        :type hq_address: Address
        """

        self._hq_address = hq_address

    @property
    def industries(self):
        """Gets the industries of this Company.


        :return: The industries of this Company.
        :rtype: List[str]
        """
        return self._industries

    @industries.setter
    def industries(self, industries):
        """Sets the industries of this Company.


        :param industries: The industries of this Company.
        :type industries: List[str]
        """

        self._industries = industries

    @property
    def linkedin_link(self):
        """Gets the linkedin_link of this Company.


        :return: The linkedin_link of this Company.
        :rtype: str
        """
        return self._linkedin_link

    @linkedin_link.setter
    def linkedin_link(self, linkedin_link):
        """Sets the linkedin_link of this Company.


        :param linkedin_link: The linkedin_link of this Company.
        :type linkedin_link: str
        """

        self._linkedin_link = linkedin_link

    @property
    def logo_url(self):
        """Gets the logo_url of this Company.


        :return: The logo_url of this Company.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Company.


        :param logo_url: The logo_url of this Company.
        :type logo_url: str
        """
        if logo_url is None:
            raise ValueError("Invalid value for `logo_url`, must not be `None`")

        self._logo_url = logo_url

    @property
    def name(self):
        """Gets the name of this Company.


        :return: The name of this Company.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Company.


        :param name: The name of this Company.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def perm_id(self):
        """Gets the perm_id of this Company.


        :return: The perm_id of this Company.
        :rtype: str
        """
        return self._perm_id

    @perm_id.setter
    def perm_id(self, perm_id):
        """Sets the perm_id of this Company.


        :param perm_id: The perm_id of this Company.
        :type perm_id: str
        """

        self._perm_id = perm_id

    @property
    def portfolio_company_ids(self):
        """Gets the portfolio_company_ids of this Company.


        :return: The portfolio_company_ids of this Company.
        :rtype: List[int]
        """
        return self._portfolio_company_ids

    @portfolio_company_ids.setter
    def portfolio_company_ids(self, portfolio_company_ids):
        """Sets the portfolio_company_ids of this Company.


        :param portfolio_company_ids: The portfolio_company_ids of this Company.
        :type portfolio_company_ids: List[int]
        """

        self._portfolio_company_ids = portfolio_company_ids

    @property
    def profile_url(self):
        """Gets the profile_url of this Company.


        :return: The profile_url of this Company.
        :rtype: str
        """
        return self._profile_url

    @profile_url.setter
    def profile_url(self, profile_url):
        """Sets the profile_url of this Company.


        :param profile_url: The profile_url of this Company.
        :type profile_url: str
        """
        if profile_url is None:
            raise ValueError("Invalid value for `profile_url`, must not be `None`")

        self._profile_url = profile_url

    @property
    def revenue(self):
        """Gets the revenue of this Company.


        :return: The revenue of this Company.
        :rtype: str
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this Company.


        :param revenue: The revenue of this Company.
        :type revenue: str
        """

        self._revenue = revenue

    @property
    def sectors(self):
        """Gets the sectors of this Company.


        :return: The sectors of this Company.
        :rtype: List[SectorVO]
        """
        return self._sectors

    @sectors.setter
    def sectors(self, sectors):
        """Sets the sectors of this Company.


        :param sectors: The sectors of this Company.
        :type sectors: List[SectorVO]
        """

        self._sectors = sectors

    @property
    def short_name(self):
        """Gets the short_name of this Company.


        :return: The short_name of this Company.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this Company.


        :param short_name: The short_name of this Company.
        :type short_name: str
        """

        self._short_name = short_name

    @property
    def stock(self):
        """Gets the stock of this Company.


        :return: The stock of this Company.
        :rtype: Stock
        """
        return self._stock

    @stock.setter
    def stock(self, stock):
        """Sets the stock of this Company.


        :param stock: The stock of this Company.
        :type stock: Stock
        """

        self._stock = stock

    @property
    def twitter_link(self):
        """Gets the twitter_link of this Company.


        :return: The twitter_link of this Company.
        :rtype: str
        """
        return self._twitter_link

    @twitter_link.setter
    def twitter_link(self, twitter_link):
        """Sets the twitter_link of this Company.


        :param twitter_link: The twitter_link of this Company.
        :type twitter_link: str
        """

        self._twitter_link = twitter_link

    @property
    def website(self):
        """Gets the website of this Company.


        :return: The website of this Company.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Company.


        :param website: The website of this Company.
        :type website: str
        """
        if website is None:
            raise ValueError("Invalid value for `website`, must not be `None`")

        self._website = website

    @property
    def youtube_link(self):
        """Gets the youtube_link of this Company.


        :return: The youtube_link of this Company.
        :rtype: str
        """
        return self._youtube_link

    @youtube_link.setter
    def youtube_link(self, youtube_link):
        """Sets the youtube_link of this Company.


        :param youtube_link: The youtube_link of this Company.
        :type youtube_link: str
        """

        self._youtube_link = youtube_link
