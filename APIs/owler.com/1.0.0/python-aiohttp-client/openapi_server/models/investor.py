# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Investor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_id: str=None, name: str=None, website: str=None):
        """Investor - a model defined in OpenAPI

        :param company_id: The company_id of this Investor.
        :param name: The name of this Investor.
        :param website: The website of this Investor.
        """
        self.openapi_types = {
            'company_id': str,
            'name': str,
            'website': str
        }

        self.attribute_map = {
            'company_id': 'company_id',
            'name': 'name',
            'website': 'website'
        }

        self._company_id = company_id
        self._name = name
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Investor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Investor of this Investor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_id(self):
        """Gets the company_id of this Investor.


        :return: The company_id of this Investor.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Investor.


        :param company_id: The company_id of this Investor.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def name(self):
        """Gets the name of this Investor.


        :return: The name of this Investor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Investor.


        :param name: The name of this Investor.
        :type name: str
        """

        self._name = name

    @property
    def website(self):
        """Gets the website of this Investor.


        :return: The website of this Investor.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Investor.


        :param website: The website of this Investor.
        :type website: str
        """

        self._website = website
