# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SectorVO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, parent_industry: str=None):
        """SectorVO - a model defined in OpenAPI

        :param name: The name of this SectorVO.
        :param parent_industry: The parent_industry of this SectorVO.
        """
        self.openapi_types = {
            'name': str,
            'parent_industry': str
        }

        self.attribute_map = {
            'name': 'name',
            'parent_industry': 'parent_industry'
        }

        self._name = name
        self._parent_industry = parent_industry

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SectorVO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SectorVO of this SectorVO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SectorVO.


        :return: The name of this SectorVO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SectorVO.


        :param name: The name of this SectorVO.
        :type name: str
        """

        self._name = name

    @property
    def parent_industry(self):
        """Gets the parent_industry of this SectorVO.


        :return: The parent_industry of this SectorVO.
        :rtype: str
        """
        return self._parent_industry

    @parent_industry.setter
    def parent_industry(self, parent_industry):
        """Sets the parent_industry of this SectorVO.


        :param parent_industry: The parent_industry of this SectorVO.
        :type parent_industry: str
        """

        self._parent_industry = parent_industry
