/*
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Stock;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CompanySearchResultVO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:41.195333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanySearchResultVO {
  public static final String SERIALIZED_NAME_COMPANY_ID = "company_id";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private Long companyId;

  /**
   * Gets or Sets companyType
   */
  @JsonAdapter(CompanyTypeEnum.Adapter.class)
  public enum CompanyTypeEnum {
    PRIVATE("Private"),
    
    PUBLIC("Public"),
    
    PRODUCT_BRAND_SERVICE("Product/Brand/Service"),
    
    NGO_NPO_NFP_ORGANIZATION_ASSOCIATION("NGO/NPO/NFP/Organization/Association"),
    
    INVESTMENT_COMPANY("Investment Company"),
    
    GOVERNMENT("Government");

    private String value;

    CompanyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompanyTypeEnum fromValue(String value) {
      for (CompanyTypeEnum b : CompanyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompanyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompanyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompanyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompanyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CompanyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPANY_TYPE = "company_type";
  @SerializedName(SERIALIZED_NAME_COMPANY_TYPE)
  private CompanyTypeEnum companyType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HQ_ADDRESS = "hq_address";
  @SerializedName(SERIALIZED_NAME_HQ_ADDRESS)
  private Address hqAddress;

  public static final String SERIALIZED_NAME_LOGO_URL = "logo_url";
  @SerializedName(SERIALIZED_NAME_LOGO_URL)
  private String logoUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERM_ID = "perm_id";
  @SerializedName(SERIALIZED_NAME_PERM_ID)
  private String permId;

  public static final String SERIALIZED_NAME_PROFILE_URL = "profile_url";
  @SerializedName(SERIALIZED_NAME_PROFILE_URL)
  private String profileUrl;

  public static final String SERIALIZED_NAME_SHORT_NAME = "short_name";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_STOCK = "stock";
  @SerializedName(SERIALIZED_NAME_STOCK)
  private Stock stock;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public CompanySearchResultVO() {
  }

  public CompanySearchResultVO companyId(Long companyId) {
    this.companyId = companyId;
    return this;
  }

  /**
   * Get companyId
   * @return companyId
   */
  @javax.annotation.Nonnull
  public Long getCompanyId() {
    return companyId;
  }

  public void setCompanyId(Long companyId) {
    this.companyId = companyId;
  }


  public CompanySearchResultVO companyType(CompanyTypeEnum companyType) {
    this.companyType = companyType;
    return this;
  }

  /**
   * Get companyType
   * @return companyType
   */
  @javax.annotation.Nullable
  public CompanyTypeEnum getCompanyType() {
    return companyType;
  }

  public void setCompanyType(CompanyTypeEnum companyType) {
    this.companyType = companyType;
  }


  public CompanySearchResultVO description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CompanySearchResultVO hqAddress(Address hqAddress) {
    this.hqAddress = hqAddress;
    return this;
  }

  /**
   * Get hqAddress
   * @return hqAddress
   */
  @javax.annotation.Nullable
  public Address getHqAddress() {
    return hqAddress;
  }

  public void setHqAddress(Address hqAddress) {
    this.hqAddress = hqAddress;
  }


  public CompanySearchResultVO logoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

  /**
   * Get logoUrl
   * @return logoUrl
   */
  @javax.annotation.Nonnull
  public String getLogoUrl() {
    return logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }


  public CompanySearchResultVO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CompanySearchResultVO permId(String permId) {
    this.permId = permId;
    return this;
  }

  /**
   * Get permId
   * @return permId
   */
  @javax.annotation.Nullable
  public String getPermId() {
    return permId;
  }

  public void setPermId(String permId) {
    this.permId = permId;
  }


  public CompanySearchResultVO profileUrl(String profileUrl) {
    this.profileUrl = profileUrl;
    return this;
  }

  /**
   * Get profileUrl
   * @return profileUrl
   */
  @javax.annotation.Nonnull
  public String getProfileUrl() {
    return profileUrl;
  }

  public void setProfileUrl(String profileUrl) {
    this.profileUrl = profileUrl;
  }


  public CompanySearchResultVO shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * Get shortName
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public CompanySearchResultVO stock(Stock stock) {
    this.stock = stock;
    return this;
  }

  /**
   * Get stock
   * @return stock
   */
  @javax.annotation.Nullable
  public Stock getStock() {
    return stock;
  }

  public void setStock(Stock stock) {
    this.stock = stock;
  }


  public CompanySearchResultVO website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nonnull
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanySearchResultVO companySearchResultVO = (CompanySearchResultVO) o;
    return Objects.equals(this.companyId, companySearchResultVO.companyId) &&
        Objects.equals(this.companyType, companySearchResultVO.companyType) &&
        Objects.equals(this.description, companySearchResultVO.description) &&
        Objects.equals(this.hqAddress, companySearchResultVO.hqAddress) &&
        Objects.equals(this.logoUrl, companySearchResultVO.logoUrl) &&
        Objects.equals(this.name, companySearchResultVO.name) &&
        Objects.equals(this.permId, companySearchResultVO.permId) &&
        Objects.equals(this.profileUrl, companySearchResultVO.profileUrl) &&
        Objects.equals(this.shortName, companySearchResultVO.shortName) &&
        Objects.equals(this.stock, companySearchResultVO.stock) &&
        Objects.equals(this.website, companySearchResultVO.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyId, companyType, description, hqAddress, logoUrl, name, permId, profileUrl, shortName, stock, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanySearchResultVO {\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    companyType: ").append(toIndentedString(companyType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hqAddress: ").append(toIndentedString(hqAddress)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    permId: ").append(toIndentedString(permId)).append("\n");
    sb.append("    profileUrl: ").append(toIndentedString(profileUrl)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    stock: ").append(toIndentedString(stock)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("company_id");
    openapiFields.add("company_type");
    openapiFields.add("description");
    openapiFields.add("hq_address");
    openapiFields.add("logo_url");
    openapiFields.add("name");
    openapiFields.add("perm_id");
    openapiFields.add("profile_url");
    openapiFields.add("short_name");
    openapiFields.add("stock");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("company_id");
    openapiRequiredFields.add("logo_url");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("profile_url");
    openapiRequiredFields.add("website");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanySearchResultVO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanySearchResultVO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanySearchResultVO is not found in the empty JSON string", CompanySearchResultVO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanySearchResultVO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanySearchResultVO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompanySearchResultVO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("company_type") != null && !jsonObj.get("company_type").isJsonNull()) && !jsonObj.get("company_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_type").toString()));
      }
      // validate the optional field `company_type`
      if (jsonObj.get("company_type") != null && !jsonObj.get("company_type").isJsonNull()) {
        CompanyTypeEnum.validateJsonElement(jsonObj.get("company_type"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `hq_address`
      if (jsonObj.get("hq_address") != null && !jsonObj.get("hq_address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("hq_address"));
      }
      if (!jsonObj.get("logo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo_url").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("perm_id") != null && !jsonObj.get("perm_id").isJsonNull()) && !jsonObj.get("perm_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `perm_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("perm_id").toString()));
      }
      if (!jsonObj.get("profile_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_url").toString()));
      }
      if ((jsonObj.get("short_name") != null && !jsonObj.get("short_name").isJsonNull()) && !jsonObj.get("short_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_name").toString()));
      }
      // validate the optional field `stock`
      if (jsonObj.get("stock") != null && !jsonObj.get("stock").isJsonNull()) {
        Stock.validateJsonElement(jsonObj.get("stock"));
      }
      if (!jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanySearchResultVO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanySearchResultVO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanySearchResultVO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanySearchResultVO.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanySearchResultVO>() {
           @Override
           public void write(JsonWriter out, CompanySearchResultVO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanySearchResultVO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanySearchResultVO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanySearchResultVO
   * @throws IOException if the JSON string is invalid with respect to CompanySearchResultVO
   */
  public static CompanySearchResultVO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanySearchResultVO.class);
  }

  /**
   * Convert an instance of CompanySearchResultVO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

