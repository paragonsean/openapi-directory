/*
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Results;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FeedApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FeedApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FeedApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1FeedGet
     * @param companyId Company Ids separated by comma (Maximum of 150 Company Ids) (required)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 100 (optional, default to 10)
     * @param paginationId Pass pagination_id as blank in the first API request. The API response will return the latest feeds along with the next pagination_id which can be passed in the subsequent API request to get the next set of feeds. Repeat this process until needed or till the pagination_id returned is blank (optional, default to *)
     * @param category Categories separated by comma. If not specified, will search against all categories (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feeds Data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FeedGetCall(List<String> companyId, String format, String limit, String paginationId, List<String> category, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/feed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (companyId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "company_id", companyId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (paginationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_id", paginationId));
        }

        if (category != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "category", category));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1FeedGetValidateBeforeCall(List<String> companyId, String format, String limit, String paginationId, List<String> category, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling v1FeedGet(Async)");
        }

        return v1FeedGetCall(companyId, format, limit, paginationId, category, _callback);

    }

    /**
     * Get Feeds for given Company Ids
     * The Feeds API provides a list of feeds and individual feed information for the given Company Ids and Category. By default the API returns the latest 10 feeds available unless the limit is specified. The maximum result is restricted to 100 feeds per API request.
     * @param companyId Company Ids separated by comma (Maximum of 150 Company Ids) (required)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 100 (optional, default to 10)
     * @param paginationId Pass pagination_id as blank in the first API request. The API response will return the latest feeds along with the next pagination_id which can be passed in the subsequent API request to get the next set of feeds. Repeat this process until needed or till the pagination_id returned is blank (optional, default to *)
     * @param category Categories separated by comma. If not specified, will search against all categories (optional)
     * @return Results
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feeds Data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Results v1FeedGet(List<String> companyId, String format, String limit, String paginationId, List<String> category) throws ApiException {
        ApiResponse<Results> localVarResp = v1FeedGetWithHttpInfo(companyId, format, limit, paginationId, category);
        return localVarResp.getData();
    }

    /**
     * Get Feeds for given Company Ids
     * The Feeds API provides a list of feeds and individual feed information for the given Company Ids and Category. By default the API returns the latest 10 feeds available unless the limit is specified. The maximum result is restricted to 100 feeds per API request.
     * @param companyId Company Ids separated by comma (Maximum of 150 Company Ids) (required)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 100 (optional, default to 10)
     * @param paginationId Pass pagination_id as blank in the first API request. The API response will return the latest feeds along with the next pagination_id which can be passed in the subsequent API request to get the next set of feeds. Repeat this process until needed or till the pagination_id returned is blank (optional, default to *)
     * @param category Categories separated by comma. If not specified, will search against all categories (optional)
     * @return ApiResponse&lt;Results&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feeds Data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Results> v1FeedGetWithHttpInfo(List<String> companyId, String format, String limit, String paginationId, List<String> category) throws ApiException {
        okhttp3.Call localVarCall = v1FeedGetValidateBeforeCall(companyId, format, limit, paginationId, category, null);
        Type localVarReturnType = new TypeToken<Results>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Feeds for given Company Ids (asynchronously)
     * The Feeds API provides a list of feeds and individual feed information for the given Company Ids and Category. By default the API returns the latest 10 feeds available unless the limit is specified. The maximum result is restricted to 100 feeds per API request.
     * @param companyId Company Ids separated by comma (Maximum of 150 Company Ids) (required)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 100 (optional, default to 10)
     * @param paginationId Pass pagination_id as blank in the first API request. The API response will return the latest feeds along with the next pagination_id which can be passed in the subsequent API request to get the next set of feeds. Repeat this process until needed or till the pagination_id returned is blank (optional, default to *)
     * @param category Categories separated by comma. If not specified, will search against all categories (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feeds Data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FeedGetAsync(List<String> companyId, String format, String limit, String paginationId, List<String> category, final ApiCallback<Results> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1FeedGetValidateBeforeCall(companyId, format, limit, paginationId, category, _callback);
        Type localVarReturnType = new TypeToken<Results>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1FeedUrlGet
     * @param domain Company Websites separated by comma (Maximum of 10 Company Websites) (required)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 100 (optional, default to 10)
     * @param paginationId Pass pagination_id as blank in the first API request. The API response will return the latest feeds along with the next pagination_id which can be passed in the subsequent API request to get the next set of feeds. Repeat this process until needed or till the pagination_id returned is blank (optional, default to *)
     * @param category Categories separated by comma. If not specified, will search against all categories (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feeds Data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FeedUrlGetCall(List<String> domain, String format, String limit, String paginationId, List<String> category, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/feed/url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (domain != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "domain", domain));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (paginationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_id", paginationId));
        }

        if (category != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "category", category));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1FeedUrlGetValidateBeforeCall(List<String> domain, String format, String limit, String paginationId, List<String> category, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling v1FeedUrlGet(Async)");
        }

        return v1FeedUrlGetCall(domain, format, limit, paginationId, category, _callback);

    }

    /**
     * Get Feeds for given Company Websites
     * The Feeds API provides a list of feeds and individual feed information for the given Company Websites and Category. By default the API returns the latest 10 feeds available unless the limit is specified. The maximum result is restricted to 100 feeds per API request.
     * @param domain Company Websites separated by comma (Maximum of 10 Company Websites) (required)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 100 (optional, default to 10)
     * @param paginationId Pass pagination_id as blank in the first API request. The API response will return the latest feeds along with the next pagination_id which can be passed in the subsequent API request to get the next set of feeds. Repeat this process until needed or till the pagination_id returned is blank (optional, default to *)
     * @param category Categories separated by comma. If not specified, will search against all categories (optional)
     * @return Results
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feeds Data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Results v1FeedUrlGet(List<String> domain, String format, String limit, String paginationId, List<String> category) throws ApiException {
        ApiResponse<Results> localVarResp = v1FeedUrlGetWithHttpInfo(domain, format, limit, paginationId, category);
        return localVarResp.getData();
    }

    /**
     * Get Feeds for given Company Websites
     * The Feeds API provides a list of feeds and individual feed information for the given Company Websites and Category. By default the API returns the latest 10 feeds available unless the limit is specified. The maximum result is restricted to 100 feeds per API request.
     * @param domain Company Websites separated by comma (Maximum of 10 Company Websites) (required)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 100 (optional, default to 10)
     * @param paginationId Pass pagination_id as blank in the first API request. The API response will return the latest feeds along with the next pagination_id which can be passed in the subsequent API request to get the next set of feeds. Repeat this process until needed or till the pagination_id returned is blank (optional, default to *)
     * @param category Categories separated by comma. If not specified, will search against all categories (optional)
     * @return ApiResponse&lt;Results&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feeds Data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Results> v1FeedUrlGetWithHttpInfo(List<String> domain, String format, String limit, String paginationId, List<String> category) throws ApiException {
        okhttp3.Call localVarCall = v1FeedUrlGetValidateBeforeCall(domain, format, limit, paginationId, category, null);
        Type localVarReturnType = new TypeToken<Results>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Feeds for given Company Websites (asynchronously)
     * The Feeds API provides a list of feeds and individual feed information for the given Company Websites and Category. By default the API returns the latest 10 feeds available unless the limit is specified. The maximum result is restricted to 100 feeds per API request.
     * @param domain Company Websites separated by comma (Maximum of 10 Company Websites) (required)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 100 (optional, default to 10)
     * @param paginationId Pass pagination_id as blank in the first API request. The API response will return the latest feeds along with the next pagination_id which can be passed in the subsequent API request to get the next set of feeds. Repeat this process until needed or till the pagination_id returned is blank (optional, default to *)
     * @param category Categories separated by comma. If not specified, will search against all categories (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Feeds Data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1FeedUrlGetAsync(List<String> domain, String format, String limit, String paginationId, List<String> category, final ApiCallback<Results> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1FeedUrlGetValidateBeforeCall(domain, format, limit, paginationId, category, _callback);
        Type localVarReturnType = new TypeToken<Results>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
