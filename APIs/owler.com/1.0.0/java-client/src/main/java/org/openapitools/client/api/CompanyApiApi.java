/*
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BasicResults;
import org.openapitools.client.model.Company;
import org.openapitools.client.model.Results;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CompanyApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompanyApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CompanyApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for basicCompanySearch
     * @param q Search term (required)
     * @param fields Fields to be searched - name, website, ticker, permid. If not specfied, will be searched against all fields (optional)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 30 (optional)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search Results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call basicCompanySearchCall(String q, List<String> fields, String limit, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/basicsearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call basicCompanySearchValidateBeforeCall(String q, List<String> fields, String limit, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling basicCompanySearch(Async)");
        }

        return basicCompanySearchCall(q, fields, limit, format, _callback);

    }

    /**
     * Basic Search Company by Ticker or Website or Name or PermID
     * The Company Basic Search API searches for a company based on the input and will returns results containing basic details about matching companies. By default the API returns the top 10 available results unless the limit is specified. The maximum limit is restricted to 30.
     * @param q Search term (required)
     * @param fields Fields to be searched - name, website, ticker, permid. If not specfied, will be searched against all fields (optional)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 30 (optional)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @return BasicResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search Results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public BasicResults basicCompanySearch(String q, List<String> fields, String limit, String format) throws ApiException {
        ApiResponse<BasicResults> localVarResp = basicCompanySearchWithHttpInfo(q, fields, limit, format);
        return localVarResp.getData();
    }

    /**
     * Basic Search Company by Ticker or Website or Name or PermID
     * The Company Basic Search API searches for a company based on the input and will returns results containing basic details about matching companies. By default the API returns the top 10 available results unless the limit is specified. The maximum limit is restricted to 30.
     * @param q Search term (required)
     * @param fields Fields to be searched - name, website, ticker, permid. If not specfied, will be searched against all fields (optional)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 30 (optional)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @return ApiResponse&lt;BasicResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search Results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BasicResults> basicCompanySearchWithHttpInfo(String q, List<String> fields, String limit, String format) throws ApiException {
        okhttp3.Call localVarCall = basicCompanySearchValidateBeforeCall(q, fields, limit, format, null);
        Type localVarReturnType = new TypeToken<BasicResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Basic Search Company by Ticker or Website or Name or PermID (asynchronously)
     * The Company Basic Search API searches for a company based on the input and will returns results containing basic details about matching companies. By default the API returns the top 10 available results unless the limit is specified. The maximum limit is restricted to 30.
     * @param q Search term (required)
     * @param fields Fields to be searched - name, website, ticker, permid. If not specfied, will be searched against all fields (optional)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 30 (optional)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search Results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call basicCompanySearchAsync(String q, List<String> fields, String limit, String format, final ApiCallback<BasicResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = basicCompanySearchValidateBeforeCall(q, fields, limit, format, _callback);
        Type localVarReturnType = new TypeToken<BasicResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fuzzyCompanySearch
     * @param q Search term (required)
     * @param fields Fields to be searched - name, website, ticker, permid, address, phone. Each field and its corresponding value has to be specified (required)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 30 (optional)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search Results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fuzzyCompanySearchCall(String q, List<String> fields, String limit, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/fuzzysearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fuzzyCompanySearchValidateBeforeCall(String q, List<String> fields, String limit, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling fuzzyCompanySearch(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling fuzzyCompanySearch(Async)");
        }

        return fuzzyCompanySearchCall(q, fields, limit, format, _callback);

    }

    /**
     * Fuzzy Search Company by Name or Address or Phone
     * The Company Fuzzy Search API searches for a company based on the input and will return results containing basic details about matching companies. By default the API returns at most top 10 available results unless the limit is specified. The maximum limit is restricted to 30.
     * @param q Search term (required)
     * @param fields Fields to be searched - name, website, ticker, permid, address, phone. Each field and its corresponding value has to be specified (required)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 30 (optional)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search Results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Object fuzzyCompanySearch(String q, List<String> fields, String limit, String format) throws ApiException {
        ApiResponse<Object> localVarResp = fuzzyCompanySearchWithHttpInfo(q, fields, limit, format);
        return localVarResp.getData();
    }

    /**
     * Fuzzy Search Company by Name or Address or Phone
     * The Company Fuzzy Search API searches for a company based on the input and will return results containing basic details about matching companies. By default the API returns at most top 10 available results unless the limit is specified. The maximum limit is restricted to 30.
     * @param q Search term (required)
     * @param fields Fields to be searched - name, website, ticker, permid, address, phone. Each field and its corresponding value has to be specified (required)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 30 (optional)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search Results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> fuzzyCompanySearchWithHttpInfo(String q, List<String> fields, String limit, String format) throws ApiException {
        okhttp3.Call localVarCall = fuzzyCompanySearchValidateBeforeCall(q, fields, limit, format, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fuzzy Search Company by Name or Address or Phone (asynchronously)
     * The Company Fuzzy Search API searches for a company based on the input and will return results containing basic details about matching companies. By default the API returns at most top 10 available results unless the limit is specified. The maximum limit is restricted to 30.
     * @param q Search term (required)
     * @param fields Fields to be searched - name, website, ticker, permid, address, phone. Each field and its corresponding value has to be specified (required)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 30 (optional)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search Results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fuzzyCompanySearchAsync(String q, List<String> fields, String limit, String format, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = fuzzyCompanySearchValidateBeforeCall(q, fields, limit, format, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCompany
     * @param q Search term (required)
     * @param fields Fields to be searched - name, website, ticker. If not specified, will be searched against all fields (optional)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 30 (optional)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search Results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCompanyCall(String q, List<String> fields, String limit, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCompanyValidateBeforeCall(String q, List<String> fields, String limit, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchCompany(Async)");
        }

        return searchCompanyCall(q, fields, limit, format, _callback);

    }

    /**
     * Search Company by Ticker or Website or Name or PermID
     * The Company Search API searches for a company based on the input and will returns results containing basic details about matching companies. By default the API returns the top 10 available results unless the limit is specified. The maximum limit is restricted to 30.
     * @param q Search term (required)
     * @param fields Fields to be searched - name, website, ticker. If not specified, will be searched against all fields (optional)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 30 (optional)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @return Results
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search Results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Results searchCompany(String q, List<String> fields, String limit, String format) throws ApiException {
        ApiResponse<Results> localVarResp = searchCompanyWithHttpInfo(q, fields, limit, format);
        return localVarResp.getData();
    }

    /**
     * Search Company by Ticker or Website or Name or PermID
     * The Company Search API searches for a company based on the input and will returns results containing basic details about matching companies. By default the API returns the top 10 available results unless the limit is specified. The maximum limit is restricted to 30.
     * @param q Search term (required)
     * @param fields Fields to be searched - name, website, ticker. If not specified, will be searched against all fields (optional)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 30 (optional)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @return ApiResponse&lt;Results&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search Results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Results> searchCompanyWithHttpInfo(String q, List<String> fields, String limit, String format) throws ApiException {
        okhttp3.Call localVarCall = searchCompanyValidateBeforeCall(q, fields, limit, format, null);
        Type localVarReturnType = new TypeToken<Results>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Company by Ticker or Website or Name or PermID (asynchronously)
     * The Company Search API searches for a company based on the input and will returns results containing basic details about matching companies. By default the API returns the top 10 available results unless the limit is specified. The maximum limit is restricted to 30.
     * @param q Search term (required)
     * @param fields Fields to be searched - name, website, ticker. If not specified, will be searched against all fields (optional)
     * @param limit Number of results to be displayed - 10 (by default, if not specified) to 30 (optional)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search Results </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCompanyAsync(String q, List<String> fields, String limit, String format, final ApiCallback<Results> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCompanyValidateBeforeCall(q, fields, limit, format, _callback);
        Type localVarReturnType = new TypeToken<Results>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyIdCompanyIdGet
     * @param companyId Company Id (required)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company Data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyIdCompanyIdGetCall(String companyId, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/id/{companyId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyIdCompanyIdGetValidateBeforeCall(String companyId, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling v1CompanyIdCompanyIdGet(Async)");
        }

        return v1CompanyIdCompanyIdGetCall(companyId, format, _callback);

    }

    /**
     * Get Company by Id
     * The Company Data API provides complete information about a company for the specified Company Id 
     * @param companyId Company Id (required)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @return Company
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company Data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Company v1CompanyIdCompanyIdGet(String companyId, String format) throws ApiException {
        ApiResponse<Company> localVarResp = v1CompanyIdCompanyIdGetWithHttpInfo(companyId, format);
        return localVarResp.getData();
    }

    /**
     * Get Company by Id
     * The Company Data API provides complete information about a company for the specified Company Id 
     * @param companyId Company Id (required)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @return ApiResponse&lt;Company&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company Data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Company> v1CompanyIdCompanyIdGetWithHttpInfo(String companyId, String format) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyIdCompanyIdGetValidateBeforeCall(companyId, format, null);
        Type localVarReturnType = new TypeToken<Company>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Company by Id (asynchronously)
     * The Company Data API provides complete information about a company for the specified Company Id 
     * @param companyId Company Id (required)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company Data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyIdCompanyIdGetAsync(String companyId, String format, final ApiCallback<Company> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyIdCompanyIdGetValidateBeforeCall(companyId, format, _callback);
        Type localVarReturnType = new TypeToken<Company>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyUrlWebsiteGet
     * @param website Company Domain (required)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company Data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyUrlWebsiteGetCall(String website, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/url/{website}"
            .replace("{" + "website" + "}", localVarApiClient.escapeString(website.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyUrlWebsiteGetValidateBeforeCall(String website, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'website' is set
        if (website == null) {
            throw new ApiException("Missing the required parameter 'website' when calling v1CompanyUrlWebsiteGet(Async)");
        }

        return v1CompanyUrlWebsiteGetCall(website, format, _callback);

    }

    /**
     * Get Company by URL
     * The Company Data API provides complete information about a company for the specified URL 
     * @param website Company Domain (required)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @return Company
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company Data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Company v1CompanyUrlWebsiteGet(String website, String format) throws ApiException {
        ApiResponse<Company> localVarResp = v1CompanyUrlWebsiteGetWithHttpInfo(website, format);
        return localVarResp.getData();
    }

    /**
     * Get Company by URL
     * The Company Data API provides complete information about a company for the specified URL 
     * @param website Company Domain (required)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @return ApiResponse&lt;Company&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company Data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Company> v1CompanyUrlWebsiteGetWithHttpInfo(String website, String format) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyUrlWebsiteGetValidateBeforeCall(website, format, null);
        Type localVarReturnType = new TypeToken<Company>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Company by URL (asynchronously)
     * The Company Data API provides complete information about a company for the specified URL 
     * @param website Company Domain (required)
     * @param format Format of the response content - json (by default if not specified), xml (optional, default to json)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company Data </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Parameters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Authentication Failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyUrlWebsiteGetAsync(String website, String format, final ApiCallback<Company> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyUrlWebsiteGetValidateBeforeCall(website, format, _callback);
        Type localVarReturnType = new TypeToken<Company>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
