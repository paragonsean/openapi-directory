/*
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Acquisition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:41.195333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Acquisition {
  public static final String SERIALIZED_NAME_ACQUIRER_COMPANY_ID = "acquirer_company_id";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_COMPANY_ID)
  private String acquirerCompanyId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_COMPANY_ID = "company_id";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private String companyId;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_UNDISCLOSED = "undisclosed";
  @SerializedName(SERIALIZED_NAME_UNDISCLOSED)
  private String undisclosed;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public Acquisition() {
  }

  public Acquisition acquirerCompanyId(String acquirerCompanyId) {
    this.acquirerCompanyId = acquirerCompanyId;
    return this;
  }

  /**
   * Get acquirerCompanyId
   * @return acquirerCompanyId
   */
  @javax.annotation.Nullable
  public String getAcquirerCompanyId() {
    return acquirerCompanyId;
  }

  public void setAcquirerCompanyId(String acquirerCompanyId) {
    this.acquirerCompanyId = acquirerCompanyId;
  }


  public Acquisition amount(String amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public Acquisition companyId(String companyId) {
    this.companyId = companyId;
    return this;
  }

  /**
   * Get companyId
   * @return companyId
   */
  @javax.annotation.Nullable
  public String getCompanyId() {
    return companyId;
  }

  public void setCompanyId(String companyId) {
    this.companyId = companyId;
  }


  public Acquisition date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public Acquisition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Acquisition status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Acquisition undisclosed(String undisclosed) {
    this.undisclosed = undisclosed;
    return this;
  }

  /**
   * Get undisclosed
   * @return undisclosed
   */
  @javax.annotation.Nullable
  public String getUndisclosed() {
    return undisclosed;
  }

  public void setUndisclosed(String undisclosed) {
    this.undisclosed = undisclosed;
  }


  public Acquisition website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Acquisition acquisition = (Acquisition) o;
    return Objects.equals(this.acquirerCompanyId, acquisition.acquirerCompanyId) &&
        Objects.equals(this.amount, acquisition.amount) &&
        Objects.equals(this.companyId, acquisition.companyId) &&
        Objects.equals(this.date, acquisition.date) &&
        Objects.equals(this.name, acquisition.name) &&
        Objects.equals(this.status, acquisition.status) &&
        Objects.equals(this.undisclosed, acquisition.undisclosed) &&
        Objects.equals(this.website, acquisition.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquirerCompanyId, amount, companyId, date, name, status, undisclosed, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Acquisition {\n");
    sb.append("    acquirerCompanyId: ").append(toIndentedString(acquirerCompanyId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    undisclosed: ").append(toIndentedString(undisclosed)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acquirer_company_id");
    openapiFields.add("amount");
    openapiFields.add("company_id");
    openapiFields.add("date");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("undisclosed");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Acquisition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Acquisition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Acquisition is not found in the empty JSON string", Acquisition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Acquisition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Acquisition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acquirer_company_id") != null && !jsonObj.get("acquirer_company_id").isJsonNull()) && !jsonObj.get("acquirer_company_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirer_company_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirer_company_id").toString()));
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("company_id") != null && !jsonObj.get("company_id").isJsonNull()) && !jsonObj.get("company_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_id").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("undisclosed") != null && !jsonObj.get("undisclosed").isJsonNull()) && !jsonObj.get("undisclosed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `undisclosed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("undisclosed").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Acquisition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Acquisition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Acquisition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Acquisition.class));

       return (TypeAdapter<T>) new TypeAdapter<Acquisition>() {
           @Override
           public void write(JsonWriter out, Acquisition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Acquisition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Acquisition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Acquisition
   * @throws IOException if the JSON string is invalid with respect to Acquisition
   */
  public static Acquisition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Acquisition.class);
  }

  /**
   * Convert an instance of Acquisition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

