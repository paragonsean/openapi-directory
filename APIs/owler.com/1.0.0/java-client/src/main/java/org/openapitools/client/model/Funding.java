/*
 * Owler
 * Search for information on companies using a website or company name and get access to Company Data, News, Blog Posts, Competitor Lists and much more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Investor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Funding
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:41.195333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Funding {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_INVESTOR = "investor";
  @SerializedName(SERIALIZED_NAME_INVESTOR)
  private List<Investor> investor = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UNDISCLOSED = "undisclosed";
  @SerializedName(SERIALIZED_NAME_UNDISCLOSED)
  private String undisclosed;

  public Funding() {
  }

  public Funding amount(String amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public Funding date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public Funding investor(List<Investor> investor) {
    this.investor = investor;
    return this;
  }

  public Funding addInvestorItem(Investor investorItem) {
    if (this.investor == null) {
      this.investor = new ArrayList<>();
    }
    this.investor.add(investorItem);
    return this;
  }

  /**
   * Get investor
   * @return investor
   */
  @javax.annotation.Nullable
  public List<Investor> getInvestor() {
    return investor;
  }

  public void setInvestor(List<Investor> investor) {
    this.investor = investor;
  }


  public Funding type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Funding undisclosed(String undisclosed) {
    this.undisclosed = undisclosed;
    return this;
  }

  /**
   * Get undisclosed
   * @return undisclosed
   */
  @javax.annotation.Nullable
  public String getUndisclosed() {
    return undisclosed;
  }

  public void setUndisclosed(String undisclosed) {
    this.undisclosed = undisclosed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Funding funding = (Funding) o;
    return Objects.equals(this.amount, funding.amount) &&
        Objects.equals(this.date, funding.date) &&
        Objects.equals(this.investor, funding.investor) &&
        Objects.equals(this.type, funding.type) &&
        Objects.equals(this.undisclosed, funding.undisclosed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, date, investor, type, undisclosed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Funding {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    investor: ").append(toIndentedString(investor)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    undisclosed: ").append(toIndentedString(undisclosed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("date");
    openapiFields.add("investor");
    openapiFields.add("type");
    openapiFields.add("undisclosed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Funding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Funding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Funding is not found in the empty JSON string", Funding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Funding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Funding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if (jsonObj.get("investor") != null && !jsonObj.get("investor").isJsonNull()) {
        JsonArray jsonArrayinvestor = jsonObj.getAsJsonArray("investor");
        if (jsonArrayinvestor != null) {
          // ensure the json data is an array
          if (!jsonObj.get("investor").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `investor` to be an array in the JSON string but got `%s`", jsonObj.get("investor").toString()));
          }

          // validate the optional field `investor` (array)
          for (int i = 0; i < jsonArrayinvestor.size(); i++) {
            Investor.validateJsonElement(jsonArrayinvestor.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("undisclosed") != null && !jsonObj.get("undisclosed").isJsonNull()) && !jsonObj.get("undisclosed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `undisclosed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("undisclosed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Funding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Funding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Funding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Funding.class));

       return (TypeAdapter<T>) new TypeAdapter<Funding>() {
           @Override
           public void write(JsonWriter out, Funding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Funding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Funding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Funding
   * @throws IOException if the JSON string is invalid with respect to Funding
   */
  public static Funding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Funding.class);
  }

  /**
   * Convert an instance of Funding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

