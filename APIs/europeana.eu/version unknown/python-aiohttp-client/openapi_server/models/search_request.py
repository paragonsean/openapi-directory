# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hit import Hit
from openapi_server import util


class SearchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boost: str=None, callback: str=None, colour_palette: List[str]=None, cursor: str=None, facet: List[str]=None, hit: Hit=None, landing_page: bool=None, media: bool=None, profile: List[str]=None, qf: List[str]=None, query: str=None, reusability: List[str]=None, rows: int=None, sort: List[str]=None, start: int=None, text_fulltext: bool=None, theme: str=None, thumbnail: bool=None):
        """SearchRequest - a model defined in OpenAPI

        :param boost: The boost of this SearchRequest.
        :param callback: The callback of this SearchRequest.
        :param colour_palette: The colour_palette of this SearchRequest.
        :param cursor: The cursor of this SearchRequest.
        :param facet: The facet of this SearchRequest.
        :param hit: The hit of this SearchRequest.
        :param landing_page: The landing_page of this SearchRequest.
        :param media: The media of this SearchRequest.
        :param profile: The profile of this SearchRequest.
        :param qf: The qf of this SearchRequest.
        :param query: The query of this SearchRequest.
        :param reusability: The reusability of this SearchRequest.
        :param rows: The rows of this SearchRequest.
        :param sort: The sort of this SearchRequest.
        :param start: The start of this SearchRequest.
        :param text_fulltext: The text_fulltext of this SearchRequest.
        :param theme: The theme of this SearchRequest.
        :param thumbnail: The thumbnail of this SearchRequest.
        """
        self.openapi_types = {
            'boost': str,
            'callback': str,
            'colour_palette': List[str],
            'cursor': str,
            'facet': List[str],
            'hit': Hit,
            'landing_page': bool,
            'media': bool,
            'profile': List[str],
            'qf': List[str],
            'query': str,
            'reusability': List[str],
            'rows': int,
            'sort': List[str],
            'start': int,
            'text_fulltext': bool,
            'theme': str,
            'thumbnail': bool
        }

        self.attribute_map = {
            'boost': 'boost',
            'callback': 'callback',
            'colour_palette': 'colourPalette',
            'cursor': 'cursor',
            'facet': 'facet',
            'hit': 'hit',
            'landing_page': 'landingPage',
            'media': 'media',
            'profile': 'profile',
            'qf': 'qf',
            'query': 'query',
            'reusability': 'reusability',
            'rows': 'rows',
            'sort': 'sort',
            'start': 'start',
            'text_fulltext': 'textFulltext',
            'theme': 'theme',
            'thumbnail': 'thumbnail'
        }

        self._boost = boost
        self._callback = callback
        self._colour_palette = colour_palette
        self._cursor = cursor
        self._facet = facet
        self._hit = hit
        self._landing_page = landing_page
        self._media = media
        self._profile = profile
        self._qf = qf
        self._query = query
        self._reusability = reusability
        self._rows = rows
        self._sort = sort
        self._start = start
        self._text_fulltext = text_fulltext
        self._theme = theme
        self._thumbnail = thumbnail

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchRequest of this SearchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boost(self):
        """Gets the boost of this SearchRequest.


        :return: The boost of this SearchRequest.
        :rtype: str
        """
        return self._boost

    @boost.setter
    def boost(self, boost):
        """Sets the boost of this SearchRequest.


        :param boost: The boost of this SearchRequest.
        :type boost: str
        """

        self._boost = boost

    @property
    def callback(self):
        """Gets the callback of this SearchRequest.


        :return: The callback of this SearchRequest.
        :rtype: str
        """
        return self._callback

    @callback.setter
    def callback(self, callback):
        """Sets the callback of this SearchRequest.


        :param callback: The callback of this SearchRequest.
        :type callback: str
        """

        self._callback = callback

    @property
    def colour_palette(self):
        """Gets the colour_palette of this SearchRequest.


        :return: The colour_palette of this SearchRequest.
        :rtype: List[str]
        """
        return self._colour_palette

    @colour_palette.setter
    def colour_palette(self, colour_palette):
        """Sets the colour_palette of this SearchRequest.


        :param colour_palette: The colour_palette of this SearchRequest.
        :type colour_palette: List[str]
        """

        self._colour_palette = colour_palette

    @property
    def cursor(self):
        """Gets the cursor of this SearchRequest.


        :return: The cursor of this SearchRequest.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this SearchRequest.


        :param cursor: The cursor of this SearchRequest.
        :type cursor: str
        """

        self._cursor = cursor

    @property
    def facet(self):
        """Gets the facet of this SearchRequest.


        :return: The facet of this SearchRequest.
        :rtype: List[str]
        """
        return self._facet

    @facet.setter
    def facet(self, facet):
        """Sets the facet of this SearchRequest.


        :param facet: The facet of this SearchRequest.
        :type facet: List[str]
        """

        self._facet = facet

    @property
    def hit(self):
        """Gets the hit of this SearchRequest.


        :return: The hit of this SearchRequest.
        :rtype: Hit
        """
        return self._hit

    @hit.setter
    def hit(self, hit):
        """Sets the hit of this SearchRequest.


        :param hit: The hit of this SearchRequest.
        :type hit: Hit
        """

        self._hit = hit

    @property
    def landing_page(self):
        """Gets the landing_page of this SearchRequest.


        :return: The landing_page of this SearchRequest.
        :rtype: bool
        """
        return self._landing_page

    @landing_page.setter
    def landing_page(self, landing_page):
        """Sets the landing_page of this SearchRequest.


        :param landing_page: The landing_page of this SearchRequest.
        :type landing_page: bool
        """

        self._landing_page = landing_page

    @property
    def media(self):
        """Gets the media of this SearchRequest.


        :return: The media of this SearchRequest.
        :rtype: bool
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this SearchRequest.


        :param media: The media of this SearchRequest.
        :type media: bool
        """

        self._media = media

    @property
    def profile(self):
        """Gets the profile of this SearchRequest.


        :return: The profile of this SearchRequest.
        :rtype: List[str]
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this SearchRequest.


        :param profile: The profile of this SearchRequest.
        :type profile: List[str]
        """

        self._profile = profile

    @property
    def qf(self):
        """Gets the qf of this SearchRequest.


        :return: The qf of this SearchRequest.
        :rtype: List[str]
        """
        return self._qf

    @qf.setter
    def qf(self, qf):
        """Sets the qf of this SearchRequest.


        :param qf: The qf of this SearchRequest.
        :type qf: List[str]
        """

        self._qf = qf

    @property
    def query(self):
        """Gets the query of this SearchRequest.


        :return: The query of this SearchRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchRequest.


        :param query: The query of this SearchRequest.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def reusability(self):
        """Gets the reusability of this SearchRequest.


        :return: The reusability of this SearchRequest.
        :rtype: List[str]
        """
        return self._reusability

    @reusability.setter
    def reusability(self, reusability):
        """Sets the reusability of this SearchRequest.


        :param reusability: The reusability of this SearchRequest.
        :type reusability: List[str]
        """

        self._reusability = reusability

    @property
    def rows(self):
        """Gets the rows of this SearchRequest.


        :return: The rows of this SearchRequest.
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this SearchRequest.


        :param rows: The rows of this SearchRequest.
        :type rows: int
        """

        self._rows = rows

    @property
    def sort(self):
        """Gets the sort of this SearchRequest.


        :return: The sort of this SearchRequest.
        :rtype: List[str]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this SearchRequest.


        :param sort: The sort of this SearchRequest.
        :type sort: List[str]
        """

        self._sort = sort

    @property
    def start(self):
        """Gets the start of this SearchRequest.


        :return: The start of this SearchRequest.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SearchRequest.


        :param start: The start of this SearchRequest.
        :type start: int
        """

        self._start = start

    @property
    def text_fulltext(self):
        """Gets the text_fulltext of this SearchRequest.


        :return: The text_fulltext of this SearchRequest.
        :rtype: bool
        """
        return self._text_fulltext

    @text_fulltext.setter
    def text_fulltext(self, text_fulltext):
        """Sets the text_fulltext of this SearchRequest.


        :param text_fulltext: The text_fulltext of this SearchRequest.
        :type text_fulltext: bool
        """

        self._text_fulltext = text_fulltext

    @property
    def theme(self):
        """Gets the theme of this SearchRequest.


        :return: The theme of this SearchRequest.
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this SearchRequest.


        :param theme: The theme of this SearchRequest.
        :type theme: str
        """

        self._theme = theme

    @property
    def thumbnail(self):
        """Gets the thumbnail of this SearchRequest.


        :return: The thumbnail of this SearchRequest.
        :rtype: bool
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this SearchRequest.


        :param thumbnail: The thumbnail of this SearchRequest.
        :type thumbnail: bool
        """

        self._thumbnail = thumbnail
