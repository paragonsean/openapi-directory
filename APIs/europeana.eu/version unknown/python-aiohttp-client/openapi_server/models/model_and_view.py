# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.view import View
from openapi_server import util


class ModelAndView(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, empty: bool=None, model: object=None, model_map: Dict[str, object]=None, reference: bool=None, status: str=None, view: View=None, view_name: str=None):
        """ModelAndView - a model defined in OpenAPI

        :param empty: The empty of this ModelAndView.
        :param model: The model of this ModelAndView.
        :param model_map: The model_map of this ModelAndView.
        :param reference: The reference of this ModelAndView.
        :param status: The status of this ModelAndView.
        :param view: The view of this ModelAndView.
        :param view_name: The view_name of this ModelAndView.
        """
        self.openapi_types = {
            'empty': bool,
            'model': object,
            'model_map': Dict[str, object],
            'reference': bool,
            'status': str,
            'view': View,
            'view_name': str
        }

        self.attribute_map = {
            'empty': 'empty',
            'model': 'model',
            'model_map': 'modelMap',
            'reference': 'reference',
            'status': 'status',
            'view': 'view',
            'view_name': 'viewName'
        }

        self._empty = empty
        self._model = model
        self._model_map = model_map
        self._reference = reference
        self._status = status
        self._view = view
        self._view_name = view_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelAndView':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelAndView of this ModelAndView.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def empty(self):
        """Gets the empty of this ModelAndView.


        :return: The empty of this ModelAndView.
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this ModelAndView.


        :param empty: The empty of this ModelAndView.
        :type empty: bool
        """

        self._empty = empty

    @property
    def model(self):
        """Gets the model of this ModelAndView.


        :return: The model of this ModelAndView.
        :rtype: object
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ModelAndView.


        :param model: The model of this ModelAndView.
        :type model: object
        """

        self._model = model

    @property
    def model_map(self):
        """Gets the model_map of this ModelAndView.


        :return: The model_map of this ModelAndView.
        :rtype: Dict[str, object]
        """
        return self._model_map

    @model_map.setter
    def model_map(self, model_map):
        """Sets the model_map of this ModelAndView.


        :param model_map: The model_map of this ModelAndView.
        :type model_map: Dict[str, object]
        """

        self._model_map = model_map

    @property
    def reference(self):
        """Gets the reference of this ModelAndView.


        :return: The reference of this ModelAndView.
        :rtype: bool
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ModelAndView.


        :param reference: The reference of this ModelAndView.
        :type reference: bool
        """

        self._reference = reference

    @property
    def status(self):
        """Gets the status of this ModelAndView.


        :return: The status of this ModelAndView.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelAndView.


        :param status: The status of this ModelAndView.
        :type status: str
        """
        allowed_values = ["100", "101", "102", "103", "200", "201", "202", "203", "204", "205", "206", "207", "208", "226", "300", "301", "302", "303", "304", "305", "307", "308", "400", "401", "402", "403", "404", "405", "406", "407", "408", "409", "410", "411", "412", "413", "414", "415", "416", "417", "418", "419", "420", "421", "422", "423", "424", "426", "428", "429", "431", "451", "500", "501", "502", "503", "504", "505", "506", "507", "508", "509", "510", "511"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def view(self):
        """Gets the view of this ModelAndView.


        :return: The view of this ModelAndView.
        :rtype: View
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this ModelAndView.


        :param view: The view of this ModelAndView.
        :type view: View
        """

        self._view = view

    @property
    def view_name(self):
        """Gets the view_name of this ModelAndView.


        :return: The view_name of this ModelAndView.
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this ModelAndView.


        :param view_name: The view_name of this ModelAndView.
        :type view_name: str
        """

        self._view_name = view_name
