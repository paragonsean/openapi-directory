/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssetDatabase;
import org.openapitools.client.model.AssetServer;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsAnalysisRulePlugIn;
import org.openapitools.client.model.ItemsAssetDatabase;
import org.openapitools.client.model.ItemsAssetServer;
import org.openapitools.client.model.ItemsNotificationContactTemplate;
import org.openapitools.client.model.ItemsNotificationPlugIn;
import org.openapitools.client.model.ItemsSecurityEntry;
import org.openapitools.client.model.ItemsSecurityIdentity;
import org.openapitools.client.model.ItemsSecurityMapping;
import org.openapitools.client.model.ItemsSecurityRights;
import org.openapitools.client.model.ItemsTimeRulePlugIn;
import org.openapitools.client.model.ItemsUnitClass;
import org.openapitools.client.model.NotificationContactTemplate;
import org.openapitools.client.model.SecurityEntry;
import org.openapitools.client.model.SecurityIdentity;
import org.openapitools.client.model.SecurityMapping;
import org.openapitools.client.model.UnitClass;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssetServerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssetServerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssetServerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assetServerCreateAssetDatabase
     * @param webId The ID of the asset server on which to create the database. (required)
     * @param database The new database definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The database was created. The response&#39;s Location header is a link to the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerCreateAssetDatabaseCall(String webId, AssetDatabase database, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = database;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/assetdatabases"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerCreateAssetDatabaseValidateBeforeCall(String webId, AssetDatabase database, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerCreateAssetDatabase(Async)");
        }

        // verify the required parameter 'database' is set
        if (database == null) {
            throw new ApiException("Missing the required parameter 'database' when calling assetServerCreateAssetDatabase(Async)");
        }

        return assetServerCreateAssetDatabaseCall(webId, database, webIdType, _callback);

    }

    /**
     * Create an asset database.
     * 
     * @param webId The ID of the asset server on which to create the database. (required)
     * @param database The new database definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The database was created. The response&#39;s Location header is a link to the database. </td><td>  -  </td></tr>
     </table>
     */
    public void assetServerCreateAssetDatabase(String webId, AssetDatabase database, String webIdType) throws ApiException {
        assetServerCreateAssetDatabaseWithHttpInfo(webId, database, webIdType);
    }

    /**
     * Create an asset database.
     * 
     * @param webId The ID of the asset server on which to create the database. (required)
     * @param database The new database definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The database was created. The response&#39;s Location header is a link to the database. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> assetServerCreateAssetDatabaseWithHttpInfo(String webId, AssetDatabase database, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerCreateAssetDatabaseValidateBeforeCall(webId, database, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create an asset database. (asynchronously)
     * 
     * @param webId The ID of the asset server on which to create the database. (required)
     * @param database The new database definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The database was created. The response&#39;s Location header is a link to the database. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerCreateAssetDatabaseAsync(String webId, AssetDatabase database, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerCreateAssetDatabaseValidateBeforeCall(webId, database, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerCreateNotificationContactTemplate
     * @param webId The ID of the asset server on which to create the notification contact template. (required)
     * @param notificationContactTemplate The new notification contact template definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The notification contact template was created. The response&#39;s Location header is a link to the notification contact template. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerCreateNotificationContactTemplateCall(String webId, NotificationContactTemplate notificationContactTemplate, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationContactTemplate;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/notificationcontacttemplates"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerCreateNotificationContactTemplateValidateBeforeCall(String webId, NotificationContactTemplate notificationContactTemplate, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerCreateNotificationContactTemplate(Async)");
        }

        // verify the required parameter 'notificationContactTemplate' is set
        if (notificationContactTemplate == null) {
            throw new ApiException("Missing the required parameter 'notificationContactTemplate' when calling assetServerCreateNotificationContactTemplate(Async)");
        }

        return assetServerCreateNotificationContactTemplateCall(webId, notificationContactTemplate, webIdType, _callback);

    }

    /**
     * Create a notification contact template.
     * 
     * @param webId The ID of the asset server on which to create the notification contact template. (required)
     * @param notificationContactTemplate The new notification contact template definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The notification contact template was created. The response&#39;s Location header is a link to the notification contact template. </td><td>  -  </td></tr>
     </table>
     */
    public void assetServerCreateNotificationContactTemplate(String webId, NotificationContactTemplate notificationContactTemplate, String webIdType) throws ApiException {
        assetServerCreateNotificationContactTemplateWithHttpInfo(webId, notificationContactTemplate, webIdType);
    }

    /**
     * Create a notification contact template.
     * 
     * @param webId The ID of the asset server on which to create the notification contact template. (required)
     * @param notificationContactTemplate The new notification contact template definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The notification contact template was created. The response&#39;s Location header is a link to the notification contact template. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> assetServerCreateNotificationContactTemplateWithHttpInfo(String webId, NotificationContactTemplate notificationContactTemplate, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerCreateNotificationContactTemplateValidateBeforeCall(webId, notificationContactTemplate, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a notification contact template. (asynchronously)
     * 
     * @param webId The ID of the asset server on which to create the notification contact template. (required)
     * @param notificationContactTemplate The new notification contact template definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The notification contact template was created. The response&#39;s Location header is a link to the notification contact template. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerCreateNotificationContactTemplateAsync(String webId, NotificationContactTemplate notificationContactTemplate, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerCreateNotificationContactTemplateValidateBeforeCall(webId, notificationContactTemplate, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerCreateSecurityEntry
     * @param webId The ID of the asset server where the security entry will be created. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param securityItem The security item of the desired security entries to be created. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be created. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security entry was created. The response&#39;s Location header is a link to the security entry. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerCreateSecurityEntryCall(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String securityItem, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = securityEntry;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/securityentries"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applyToChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applyToChildren", applyToChildren));
        }

        if (securityItem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("securityItem", securityItem));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerCreateSecurityEntryValidateBeforeCall(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String securityItem, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerCreateSecurityEntry(Async)");
        }

        // verify the required parameter 'securityEntry' is set
        if (securityEntry == null) {
            throw new ApiException("Missing the required parameter 'securityEntry' when calling assetServerCreateSecurityEntry(Async)");
        }

        return assetServerCreateSecurityEntryCall(webId, securityEntry, applyToChildren, securityItem, webIdType, _callback);

    }

    /**
     * Create a security entry owned by the asset server.
     * 
     * @param webId The ID of the asset server where the security entry will be created. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param securityItem The security item of the desired security entries to be created. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be created. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security entry was created. The response&#39;s Location header is a link to the security entry. </td><td>  -  </td></tr>
     </table>
     */
    public void assetServerCreateSecurityEntry(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String securityItem, String webIdType) throws ApiException {
        assetServerCreateSecurityEntryWithHttpInfo(webId, securityEntry, applyToChildren, securityItem, webIdType);
    }

    /**
     * Create a security entry owned by the asset server.
     * 
     * @param webId The ID of the asset server where the security entry will be created. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param securityItem The security item of the desired security entries to be created. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be created. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security entry was created. The response&#39;s Location header is a link to the security entry. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> assetServerCreateSecurityEntryWithHttpInfo(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String securityItem, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerCreateSecurityEntryValidateBeforeCall(webId, securityEntry, applyToChildren, securityItem, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a security entry owned by the asset server. (asynchronously)
     * 
     * @param webId The ID of the asset server where the security entry will be created. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param securityItem The security item of the desired security entries to be created. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be created. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security entry was created. The response&#39;s Location header is a link to the security entry. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerCreateSecurityEntryAsync(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String securityItem, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerCreateSecurityEntryValidateBeforeCall(webId, securityEntry, applyToChildren, securityItem, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerCreateSecurityIdentity
     * @param webId The ID of the asset server on which to create the security identity. (required)
     * @param securityIdentity The new security identity definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security identity was created. The response&#39;s Location header is a link to the security identity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerCreateSecurityIdentityCall(String webId, SecurityIdentity securityIdentity, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = securityIdentity;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/securityidentities"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerCreateSecurityIdentityValidateBeforeCall(String webId, SecurityIdentity securityIdentity, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerCreateSecurityIdentity(Async)");
        }

        // verify the required parameter 'securityIdentity' is set
        if (securityIdentity == null) {
            throw new ApiException("Missing the required parameter 'securityIdentity' when calling assetServerCreateSecurityIdentity(Async)");
        }

        return assetServerCreateSecurityIdentityCall(webId, securityIdentity, webIdType, _callback);

    }

    /**
     * Create a security identity.
     * 
     * @param webId The ID of the asset server on which to create the security identity. (required)
     * @param securityIdentity The new security identity definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security identity was created. The response&#39;s Location header is a link to the security identity. </td><td>  -  </td></tr>
     </table>
     */
    public void assetServerCreateSecurityIdentity(String webId, SecurityIdentity securityIdentity, String webIdType) throws ApiException {
        assetServerCreateSecurityIdentityWithHttpInfo(webId, securityIdentity, webIdType);
    }

    /**
     * Create a security identity.
     * 
     * @param webId The ID of the asset server on which to create the security identity. (required)
     * @param securityIdentity The new security identity definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security identity was created. The response&#39;s Location header is a link to the security identity. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> assetServerCreateSecurityIdentityWithHttpInfo(String webId, SecurityIdentity securityIdentity, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerCreateSecurityIdentityValidateBeforeCall(webId, securityIdentity, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a security identity. (asynchronously)
     * 
     * @param webId The ID of the asset server on which to create the security identity. (required)
     * @param securityIdentity The new security identity definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security identity was created. The response&#39;s Location header is a link to the security identity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerCreateSecurityIdentityAsync(String webId, SecurityIdentity securityIdentity, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerCreateSecurityIdentityValidateBeforeCall(webId, securityIdentity, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerCreateSecurityMapping
     * @param webId The ID of the asset server on which to create the security mapping. (required)
     * @param securityMapping The new security mapping definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security mapping was created. The response&#39;s Location header is a link to the security mapping. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerCreateSecurityMappingCall(String webId, SecurityMapping securityMapping, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = securityMapping;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/securitymappings"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerCreateSecurityMappingValidateBeforeCall(String webId, SecurityMapping securityMapping, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerCreateSecurityMapping(Async)");
        }

        // verify the required parameter 'securityMapping' is set
        if (securityMapping == null) {
            throw new ApiException("Missing the required parameter 'securityMapping' when calling assetServerCreateSecurityMapping(Async)");
        }

        return assetServerCreateSecurityMappingCall(webId, securityMapping, webIdType, _callback);

    }

    /**
     * Create a security mapping.
     * 
     * @param webId The ID of the asset server on which to create the security mapping. (required)
     * @param securityMapping The new security mapping definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security mapping was created. The response&#39;s Location header is a link to the security mapping. </td><td>  -  </td></tr>
     </table>
     */
    public void assetServerCreateSecurityMapping(String webId, SecurityMapping securityMapping, String webIdType) throws ApiException {
        assetServerCreateSecurityMappingWithHttpInfo(webId, securityMapping, webIdType);
    }

    /**
     * Create a security mapping.
     * 
     * @param webId The ID of the asset server on which to create the security mapping. (required)
     * @param securityMapping The new security mapping definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security mapping was created. The response&#39;s Location header is a link to the security mapping. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> assetServerCreateSecurityMappingWithHttpInfo(String webId, SecurityMapping securityMapping, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerCreateSecurityMappingValidateBeforeCall(webId, securityMapping, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a security mapping. (asynchronously)
     * 
     * @param webId The ID of the asset server on which to create the security mapping. (required)
     * @param securityMapping The new security mapping definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security mapping was created. The response&#39;s Location header is a link to the security mapping. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerCreateSecurityMappingAsync(String webId, SecurityMapping securityMapping, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerCreateSecurityMappingValidateBeforeCall(webId, securityMapping, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerCreateUnitClass
     * @param webId The ID of the server. (required)
     * @param unitClass The new unit class definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The unit class was created. The response&#39;s Location header is a link to the unit class. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerCreateUnitClassCall(String webId, UnitClass unitClass, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = unitClass;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/unitclasses"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerCreateUnitClassValidateBeforeCall(String webId, UnitClass unitClass, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerCreateUnitClass(Async)");
        }

        // verify the required parameter 'unitClass' is set
        if (unitClass == null) {
            throw new ApiException("Missing the required parameter 'unitClass' when calling assetServerCreateUnitClass(Async)");
        }

        return assetServerCreateUnitClassCall(webId, unitClass, webIdType, _callback);

    }

    /**
     * Create a unit class in the specified Asset Server.
     * 
     * @param webId The ID of the server. (required)
     * @param unitClass The new unit class definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The unit class was created. The response&#39;s Location header is a link to the unit class. </td><td>  -  </td></tr>
     </table>
     */
    public void assetServerCreateUnitClass(String webId, UnitClass unitClass, String webIdType) throws ApiException {
        assetServerCreateUnitClassWithHttpInfo(webId, unitClass, webIdType);
    }

    /**
     * Create a unit class in the specified Asset Server.
     * 
     * @param webId The ID of the server. (required)
     * @param unitClass The new unit class definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The unit class was created. The response&#39;s Location header is a link to the unit class. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> assetServerCreateUnitClassWithHttpInfo(String webId, UnitClass unitClass, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerCreateUnitClassValidateBeforeCall(webId, unitClass, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a unit class in the specified Asset Server. (asynchronously)
     * 
     * @param webId The ID of the server. (required)
     * @param unitClass The new unit class definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The unit class was created. The response&#39;s Location header is a link to the unit class. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerCreateUnitClassAsync(String webId, UnitClass unitClass, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerCreateUnitClassValidateBeforeCall(webId, unitClass, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerDeleteSecurityEntry
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the asset server where the security entry will be deleted. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param securityItem The security item of the desired security entries to be deleted. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be deleted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerDeleteSecurityEntryCall(String name, String webId, Boolean applyToChildren, String securityItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/securityentries/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applyToChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applyToChildren", applyToChildren));
        }

        if (securityItem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("securityItem", securityItem));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerDeleteSecurityEntryValidateBeforeCall(String name, String webId, Boolean applyToChildren, String securityItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling assetServerDeleteSecurityEntry(Async)");
        }

        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerDeleteSecurityEntry(Async)");
        }

        return assetServerDeleteSecurityEntryCall(name, webId, applyToChildren, securityItem, _callback);

    }

    /**
     * Delete a security entry owned by the asset server.
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the asset server where the security entry will be deleted. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param securityItem The security item of the desired security entries to be deleted. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be deleted. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void assetServerDeleteSecurityEntry(String name, String webId, Boolean applyToChildren, String securityItem) throws ApiException {
        assetServerDeleteSecurityEntryWithHttpInfo(name, webId, applyToChildren, securityItem);
    }

    /**
     * Delete a security entry owned by the asset server.
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the asset server where the security entry will be deleted. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param securityItem The security item of the desired security entries to be deleted. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be deleted. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> assetServerDeleteSecurityEntryWithHttpInfo(String name, String webId, Boolean applyToChildren, String securityItem) throws ApiException {
        okhttp3.Call localVarCall = assetServerDeleteSecurityEntryValidateBeforeCall(name, webId, applyToChildren, securityItem, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a security entry owned by the asset server. (asynchronously)
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the asset server where the security entry will be deleted. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param securityItem The security item of the desired security entries to be deleted. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be deleted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerDeleteSecurityEntryAsync(String name, String webId, Boolean applyToChildren, String securityItem, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerDeleteSecurityEntryValidateBeforeCall(name, webId, applyToChildren, securityItem, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerGet
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerGetValidateBeforeCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerGet(Async)");
        }

        return assetServerGetCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve an Asset Server.
     * 
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return AssetServer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested server. </td><td>  -  </td></tr>
     </table>
     */
    public AssetServer assetServerGet(String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<AssetServer> localVarResp = assetServerGetWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Asset Server.
     * 
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;AssetServer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetServer> assetServerGetWithHttpInfo(String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerGetValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<AssetServer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Asset Server. (asynchronously)
     * 
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetAsync(String webId, String selectedFields, String webIdType, final ApiCallback<AssetServer> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerGetValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<AssetServer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerGetAnalysisRulePlugIns
     * @param webId The ID of the asset server, where the Analysis Rule Plug-in&#39;s are installed. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Analysis Rule Plug-in&#39;s. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetAnalysisRulePlugInsCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/analysisruleplugins"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerGetAnalysisRulePlugInsValidateBeforeCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerGetAnalysisRulePlugIns(Async)");
        }

        return assetServerGetAnalysisRulePlugInsCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve a list of all Analysis Rule Plug-in&#39;s.
     * 
     * @param webId The ID of the asset server, where the Analysis Rule Plug-in&#39;s are installed. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsAnalysisRulePlugIn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Analysis Rule Plug-in&#39;s. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsAnalysisRulePlugIn assetServerGetAnalysisRulePlugIns(String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsAnalysisRulePlugIn> localVarResp = assetServerGetAnalysisRulePlugInsWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of all Analysis Rule Plug-in&#39;s.
     * 
     * @param webId The ID of the asset server, where the Analysis Rule Plug-in&#39;s are installed. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsAnalysisRulePlugIn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Analysis Rule Plug-in&#39;s. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsAnalysisRulePlugIn> assetServerGetAnalysisRulePlugInsWithHttpInfo(String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerGetAnalysisRulePlugInsValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsAnalysisRulePlugIn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of all Analysis Rule Plug-in&#39;s. (asynchronously)
     * 
     * @param webId The ID of the asset server, where the Analysis Rule Plug-in&#39;s are installed. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Analysis Rule Plug-in&#39;s. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetAnalysisRulePlugInsAsync(String webId, String selectedFields, String webIdType, final ApiCallback<ItemsAnalysisRulePlugIn> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerGetAnalysisRulePlugInsValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsAnalysisRulePlugIn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerGetByName
     * @param name The name of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetByNameCall(String name, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers#name";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerGetByNameValidateBeforeCall(String name, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling assetServerGetByName(Async)");
        }

        return assetServerGetByNameCall(name, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve an Asset Server by name.
     * This method returns an asset server based on the name associated with it. Users should primarily search with the WebID when available.
     * @param name The name of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return AssetServer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested server. </td><td>  -  </td></tr>
     </table>
     */
    public AssetServer assetServerGetByName(String name, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<AssetServer> localVarResp = assetServerGetByNameWithHttpInfo(name, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Asset Server by name.
     * This method returns an asset server based on the name associated with it. Users should primarily search with the WebID when available.
     * @param name The name of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;AssetServer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetServer> assetServerGetByNameWithHttpInfo(String name, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerGetByNameValidateBeforeCall(name, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<AssetServer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Asset Server by name. (asynchronously)
     * This method returns an asset server based on the name associated with it. Users should primarily search with the WebID when available.
     * @param name The name of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetByNameAsync(String name, String selectedFields, String webIdType, final ApiCallback<AssetServer> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerGetByNameValidateBeforeCall(name, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<AssetServer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerGetByPath
     * @param path The path to the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetByPathCall(String path, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers#path";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerGetByPathValidateBeforeCall(String path, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling assetServerGetByPath(Async)");
        }

        return assetServerGetByPathCall(path, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve an Asset Server by path.
     * This method returns an asset server based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return AssetServer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested server. </td><td>  -  </td></tr>
     </table>
     */
    public AssetServer assetServerGetByPath(String path, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<AssetServer> localVarResp = assetServerGetByPathWithHttpInfo(path, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Asset Server by path.
     * This method returns an asset server based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;AssetServer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetServer> assetServerGetByPathWithHttpInfo(String path, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerGetByPathValidateBeforeCall(path, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<AssetServer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Asset Server by path. (asynchronously)
     * This method returns an asset server based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetByPathAsync(String path, String selectedFields, String webIdType, final ApiCallback<AssetServer> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerGetByPathValidateBeforeCall(path, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<AssetServer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerGetDatabases
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of databases. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetDatabasesCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/assetdatabases"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerGetDatabasesValidateBeforeCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerGetDatabases(Async)");
        }

        return assetServerGetDatabasesCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve a list of all Asset Databases on the specified Asset Server.
     * 
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsAssetDatabase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of databases. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsAssetDatabase assetServerGetDatabases(String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsAssetDatabase> localVarResp = assetServerGetDatabasesWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of all Asset Databases on the specified Asset Server.
     * 
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsAssetDatabase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of databases. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsAssetDatabase> assetServerGetDatabasesWithHttpInfo(String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerGetDatabasesValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsAssetDatabase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of all Asset Databases on the specified Asset Server. (asynchronously)
     * 
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of databases. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetDatabasesAsync(String webId, String selectedFields, String webIdType, final ApiCallback<ItemsAssetDatabase> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerGetDatabasesValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsAssetDatabase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerGetNotificationContactTemplates
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification contact templates. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetNotificationContactTemplatesCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/notificationcontacttemplates"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerGetNotificationContactTemplatesValidateBeforeCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerGetNotificationContactTemplates(Async)");
        }

        return assetServerGetNotificationContactTemplatesCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve a list of all notification contact templates on the specified Asset Server.
     * 
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsNotificationContactTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification contact templates. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsNotificationContactTemplate assetServerGetNotificationContactTemplates(String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsNotificationContactTemplate> localVarResp = assetServerGetNotificationContactTemplatesWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of all notification contact templates on the specified Asset Server.
     * 
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsNotificationContactTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification contact templates. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsNotificationContactTemplate> assetServerGetNotificationContactTemplatesWithHttpInfo(String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerGetNotificationContactTemplatesValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsNotificationContactTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of all notification contact templates on the specified Asset Server. (asynchronously)
     * 
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification contact templates. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetNotificationContactTemplatesAsync(String webId, String selectedFields, String webIdType, final ApiCallback<ItemsNotificationContactTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerGetNotificationContactTemplatesValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsNotificationContactTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerGetNotificationPlugIns
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification delivery channel plugins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetNotificationPlugInsCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/notificationplugins"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerGetNotificationPlugInsValidateBeforeCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerGetNotificationPlugIns(Async)");
        }

        return assetServerGetNotificationPlugInsCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve a list of all notification plugins on the specified Asset Server.
     * 
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsNotificationPlugIn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification delivery channel plugins. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsNotificationPlugIn assetServerGetNotificationPlugIns(String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsNotificationPlugIn> localVarResp = assetServerGetNotificationPlugInsWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of all notification plugins on the specified Asset Server.
     * 
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsNotificationPlugIn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification delivery channel plugins. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsNotificationPlugIn> assetServerGetNotificationPlugInsWithHttpInfo(String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerGetNotificationPlugInsValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsNotificationPlugIn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of all notification plugins on the specified Asset Server. (asynchronously)
     * 
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification delivery channel plugins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetNotificationPlugInsAsync(String webId, String selectedFields, String webIdType, final ApiCallback<ItemsNotificationPlugIn> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerGetNotificationPlugInsValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsNotificationPlugIn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerGetSecurity
     * @param webId The ID of the asset server for the security to be checked. (required)
     * @param securityItem The security item of the desired security information to be returned. Multiple security items may be specified with multiple instances of the parameter. If the parameter is not specified, only &#39;Default&#39; security item of the security information will be returned. (required)
     * @param userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param forceRefresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security rights. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsupported security item; an invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported when using Anonymous authentication method. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetSecurityCall(String webId, List<String> securityItem, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/security"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (securityItem != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "securityItem", securityItem));
        }

        if (userIdentity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "userIdentity", userIdentity));
        }

        if (forceRefresh != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceRefresh", forceRefresh));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerGetSecurityValidateBeforeCall(String webId, List<String> securityItem, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerGetSecurity(Async)");
        }

        // verify the required parameter 'securityItem' is set
        if (securityItem == null) {
            throw new ApiException("Missing the required parameter 'securityItem' when calling assetServerGetSecurity(Async)");
        }

        // verify the required parameter 'userIdentity' is set
        if (userIdentity == null) {
            throw new ApiException("Missing the required parameter 'userIdentity' when calling assetServerGetSecurity(Async)");
        }

        return assetServerGetSecurityCall(webId, securityItem, userIdentity, forceRefresh, selectedFields, webIdType, _callback);

    }

    /**
     * Get the security information of the specified security item associated with the asset server for a specified user.
     * 
     * @param webId The ID of the asset server for the security to be checked. (required)
     * @param securityItem The security item of the desired security information to be returned. Multiple security items may be specified with multiple instances of the parameter. If the parameter is not specified, only &#39;Default&#39; security item of the security information will be returned. (required)
     * @param userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param forceRefresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsSecurityRights
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security rights. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsupported security item; an invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported when using Anonymous authentication method. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsSecurityRights assetServerGetSecurity(String webId, List<String> securityItem, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsSecurityRights> localVarResp = assetServerGetSecurityWithHttpInfo(webId, securityItem, userIdentity, forceRefresh, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Get the security information of the specified security item associated with the asset server for a specified user.
     * 
     * @param webId The ID of the asset server for the security to be checked. (required)
     * @param securityItem The security item of the desired security information to be returned. Multiple security items may be specified with multiple instances of the parameter. If the parameter is not specified, only &#39;Default&#39; security item of the security information will be returned. (required)
     * @param userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param forceRefresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsSecurityRights&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security rights. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsupported security item; an invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported when using Anonymous authentication method. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsSecurityRights> assetServerGetSecurityWithHttpInfo(String webId, List<String> securityItem, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerGetSecurityValidateBeforeCall(webId, securityItem, userIdentity, forceRefresh, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsSecurityRights>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the security information of the specified security item associated with the asset server for a specified user. (asynchronously)
     * 
     * @param webId The ID of the asset server for the security to be checked. (required)
     * @param securityItem The security item of the desired security information to be returned. Multiple security items may be specified with multiple instances of the parameter. If the parameter is not specified, only &#39;Default&#39; security item of the security information will be returned. (required)
     * @param userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param forceRefresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security rights. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsupported security item; an invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported when using Anonymous authentication method. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetSecurityAsync(String webId, List<String> securityItem, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType, final ApiCallback<ItemsSecurityRights> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerGetSecurityValidateBeforeCall(webId, securityItem, userIdentity, forceRefresh, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsSecurityRights>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerGetSecurityEntries
     * @param webId The ID of the asset server. (required)
     * @param nameFilter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param securityItem The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security entries matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetSecurityEntriesCall(String webId, String nameFilter, String securityItem, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/securityentries"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (securityItem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("securityItem", securityItem));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerGetSecurityEntriesValidateBeforeCall(String webId, String nameFilter, String securityItem, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerGetSecurityEntries(Async)");
        }

        return assetServerGetSecurityEntriesCall(webId, nameFilter, securityItem, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve the security entries of the specified security item associated with the asset server based on the specified criteria. By default, all security entries for this asset server are returned.
     * 
     * @param webId The ID of the asset server. (required)
     * @param nameFilter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param securityItem The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsSecurityEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security entries matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsSecurityEntry assetServerGetSecurityEntries(String webId, String nameFilter, String securityItem, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsSecurityEntry> localVarResp = assetServerGetSecurityEntriesWithHttpInfo(webId, nameFilter, securityItem, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve the security entries of the specified security item associated with the asset server based on the specified criteria. By default, all security entries for this asset server are returned.
     * 
     * @param webId The ID of the asset server. (required)
     * @param nameFilter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param securityItem The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsSecurityEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security entries matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsSecurityEntry> assetServerGetSecurityEntriesWithHttpInfo(String webId, String nameFilter, String securityItem, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerGetSecurityEntriesValidateBeforeCall(webId, nameFilter, securityItem, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsSecurityEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the security entries of the specified security item associated with the asset server based on the specified criteria. By default, all security entries for this asset server are returned. (asynchronously)
     * 
     * @param webId The ID of the asset server. (required)
     * @param nameFilter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param securityItem The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security entries matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetSecurityEntriesAsync(String webId, String nameFilter, String securityItem, String selectedFields, String webIdType, final ApiCallback<ItemsSecurityEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerGetSecurityEntriesValidateBeforeCall(webId, nameFilter, securityItem, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsSecurityEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerGetSecurityEntryByName
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the asset server. (required)
     * @param securityItem The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The security entry matching the specified condition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The security entry with the specified name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetSecurityEntryByNameCall(String name, String webId, String securityItem, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/securityentries/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (securityItem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("securityItem", securityItem));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerGetSecurityEntryByNameValidateBeforeCall(String name, String webId, String securityItem, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling assetServerGetSecurityEntryByName(Async)");
        }

        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerGetSecurityEntryByName(Async)");
        }

        return assetServerGetSecurityEntryByNameCall(name, webId, securityItem, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve the security entry of the specified security item associated with the asset server with the specified name.
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the asset server. (required)
     * @param securityItem The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return SecurityEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The security entry matching the specified condition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The security entry with the specified name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public SecurityEntry assetServerGetSecurityEntryByName(String name, String webId, String securityItem, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<SecurityEntry> localVarResp = assetServerGetSecurityEntryByNameWithHttpInfo(name, webId, securityItem, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve the security entry of the specified security item associated with the asset server with the specified name.
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the asset server. (required)
     * @param securityItem The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;SecurityEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The security entry matching the specified condition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The security entry with the specified name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityEntry> assetServerGetSecurityEntryByNameWithHttpInfo(String name, String webId, String securityItem, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerGetSecurityEntryByNameValidateBeforeCall(name, webId, securityItem, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<SecurityEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the security entry of the specified security item associated with the asset server with the specified name. (asynchronously)
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the asset server. (required)
     * @param securityItem The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The security entry matching the specified condition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The security entry with the specified name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetSecurityEntryByNameAsync(String name, String webId, String securityItem, String selectedFields, String webIdType, final ApiCallback<SecurityEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerGetSecurityEntryByNameValidateBeforeCall(name, webId, securityItem, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<SecurityEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerGetSecurityIdentities
     * @param webId The ID of the asset server to search. (required)
     * @param field Specifies which of the object&#39;s properties are searched. The default is &#39;Name&#39;. (optional)
     * @param maxCount The maximum number of objects to be returned. The default is 1000. (optional)
     * @param query The query string used for finding objects. The default is no query string. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security identities matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetSecurityIdentitiesCall(String webId, String field, Integer maxCount, String query, String selectedFields, String sortField, String sortOrder, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/securityidentities"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (field != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("field", field));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerGetSecurityIdentitiesValidateBeforeCall(String webId, String field, Integer maxCount, String query, String selectedFields, String sortField, String sortOrder, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerGetSecurityIdentities(Async)");
        }

        return assetServerGetSecurityIdentitiesCall(webId, field, maxCount, query, selectedFields, sortField, sortOrder, webIdType, _callback);

    }

    /**
     * Retrieve security identities based on the specified criteria. By default, all security identities in the specified Asset Server are returned.
     * 
     * @param webId The ID of the asset server to search. (required)
     * @param field Specifies which of the object&#39;s properties are searched. The default is &#39;Name&#39;. (optional)
     * @param maxCount The maximum number of objects to be returned. The default is 1000. (optional)
     * @param query The query string used for finding objects. The default is no query string. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsSecurityIdentity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security identities matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsSecurityIdentity assetServerGetSecurityIdentities(String webId, String field, Integer maxCount, String query, String selectedFields, String sortField, String sortOrder, String webIdType) throws ApiException {
        ApiResponse<ItemsSecurityIdentity> localVarResp = assetServerGetSecurityIdentitiesWithHttpInfo(webId, field, maxCount, query, selectedFields, sortField, sortOrder, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve security identities based on the specified criteria. By default, all security identities in the specified Asset Server are returned.
     * 
     * @param webId The ID of the asset server to search. (required)
     * @param field Specifies which of the object&#39;s properties are searched. The default is &#39;Name&#39;. (optional)
     * @param maxCount The maximum number of objects to be returned. The default is 1000. (optional)
     * @param query The query string used for finding objects. The default is no query string. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsSecurityIdentity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security identities matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsSecurityIdentity> assetServerGetSecurityIdentitiesWithHttpInfo(String webId, String field, Integer maxCount, String query, String selectedFields, String sortField, String sortOrder, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerGetSecurityIdentitiesValidateBeforeCall(webId, field, maxCount, query, selectedFields, sortField, sortOrder, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsSecurityIdentity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve security identities based on the specified criteria. By default, all security identities in the specified Asset Server are returned. (asynchronously)
     * 
     * @param webId The ID of the asset server to search. (required)
     * @param field Specifies which of the object&#39;s properties are searched. The default is &#39;Name&#39;. (optional)
     * @param maxCount The maximum number of objects to be returned. The default is 1000. (optional)
     * @param query The query string used for finding objects. The default is no query string. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security identities matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetSecurityIdentitiesAsync(String webId, String field, Integer maxCount, String query, String selectedFields, String sortField, String sortOrder, String webIdType, final ApiCallback<ItemsSecurityIdentity> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerGetSecurityIdentitiesValidateBeforeCall(webId, field, maxCount, query, selectedFields, sortField, sortOrder, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsSecurityIdentity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerGetSecurityIdentitiesForUser
     * @param webId The ID of the server. (required)
     * @param userIdentity The user identity to search for. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security identities for the specified user. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsupported security item; an invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetSecurityIdentitiesForUserCall(String webId, String userIdentity, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/securityidentities#userIdentity"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userIdentity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIdentity", userIdentity));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerGetSecurityIdentitiesForUserValidateBeforeCall(String webId, String userIdentity, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerGetSecurityIdentitiesForUser(Async)");
        }

        // verify the required parameter 'userIdentity' is set
        if (userIdentity == null) {
            throw new ApiException("Missing the required parameter 'userIdentity' when calling assetServerGetSecurityIdentitiesForUser(Async)");
        }

        return assetServerGetSecurityIdentitiesForUserCall(webId, userIdentity, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve security identities for a specific user.
     * 
     * @param webId The ID of the server. (required)
     * @param userIdentity The user identity to search for. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsSecurityIdentity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security identities for the specified user. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsupported security item; an invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsSecurityIdentity assetServerGetSecurityIdentitiesForUser(String webId, String userIdentity, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsSecurityIdentity> localVarResp = assetServerGetSecurityIdentitiesForUserWithHttpInfo(webId, userIdentity, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve security identities for a specific user.
     * 
     * @param webId The ID of the server. (required)
     * @param userIdentity The user identity to search for. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsSecurityIdentity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security identities for the specified user. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsupported security item; an invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsSecurityIdentity> assetServerGetSecurityIdentitiesForUserWithHttpInfo(String webId, String userIdentity, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerGetSecurityIdentitiesForUserValidateBeforeCall(webId, userIdentity, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsSecurityIdentity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve security identities for a specific user. (asynchronously)
     * 
     * @param webId The ID of the server. (required)
     * @param userIdentity The user identity to search for. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security identities for the specified user. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unsupported security item; an invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetSecurityIdentitiesForUserAsync(String webId, String userIdentity, String selectedFields, String webIdType, final ApiCallback<ItemsSecurityIdentity> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerGetSecurityIdentitiesForUserValidateBeforeCall(webId, userIdentity, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsSecurityIdentity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerGetSecurityMappings
     * @param webId The ID of the asset server to search. (required)
     * @param field Specifies which of the object&#39;s properties are searched. The default is &#39;Name&#39;. (optional)
     * @param maxCount The maximum number of objects to be returned. The default is 1000. (optional)
     * @param query The query string used for finding objects. The default is no query string. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security mappings matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetSecurityMappingsCall(String webId, String field, Integer maxCount, String query, String selectedFields, String sortField, String sortOrder, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/securitymappings"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (field != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("field", field));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerGetSecurityMappingsValidateBeforeCall(String webId, String field, Integer maxCount, String query, String selectedFields, String sortField, String sortOrder, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerGetSecurityMappings(Async)");
        }

        return assetServerGetSecurityMappingsCall(webId, field, maxCount, query, selectedFields, sortField, sortOrder, webIdType, _callback);

    }

    /**
     * Retrieve security mappings based on the specified criteria. By default, all security mappings in the specified Asset Server are returned.
     * 
     * @param webId The ID of the asset server to search. (required)
     * @param field Specifies which of the object&#39;s properties are searched. The default is &#39;Name&#39;. (optional)
     * @param maxCount The maximum number of objects to be returned. The default is 1000. (optional)
     * @param query The query string used for finding objects. The default is no query string. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsSecurityMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security mappings matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsSecurityMapping assetServerGetSecurityMappings(String webId, String field, Integer maxCount, String query, String selectedFields, String sortField, String sortOrder, String webIdType) throws ApiException {
        ApiResponse<ItemsSecurityMapping> localVarResp = assetServerGetSecurityMappingsWithHttpInfo(webId, field, maxCount, query, selectedFields, sortField, sortOrder, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve security mappings based on the specified criteria. By default, all security mappings in the specified Asset Server are returned.
     * 
     * @param webId The ID of the asset server to search. (required)
     * @param field Specifies which of the object&#39;s properties are searched. The default is &#39;Name&#39;. (optional)
     * @param maxCount The maximum number of objects to be returned. The default is 1000. (optional)
     * @param query The query string used for finding objects. The default is no query string. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsSecurityMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security mappings matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsSecurityMapping> assetServerGetSecurityMappingsWithHttpInfo(String webId, String field, Integer maxCount, String query, String selectedFields, String sortField, String sortOrder, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerGetSecurityMappingsValidateBeforeCall(webId, field, maxCount, query, selectedFields, sortField, sortOrder, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsSecurityMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve security mappings based on the specified criteria. By default, all security mappings in the specified Asset Server are returned. (asynchronously)
     * 
     * @param webId The ID of the asset server to search. (required)
     * @param field Specifies which of the object&#39;s properties are searched. The default is &#39;Name&#39;. (optional)
     * @param maxCount The maximum number of objects to be returned. The default is 1000. (optional)
     * @param query The query string used for finding objects. The default is no query string. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security mappings matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetSecurityMappingsAsync(String webId, String field, Integer maxCount, String query, String selectedFields, String sortField, String sortOrder, String webIdType, final ApiCallback<ItemsSecurityMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerGetSecurityMappingsValidateBeforeCall(webId, field, maxCount, query, selectedFields, sortField, sortOrder, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsSecurityMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerGetTimeRulePlugIns
     * @param webId The ID of the asset server, where the Time Rule Plug-in&#39;s are installed. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Time Rule Plug-in&#39;s. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetTimeRulePlugInsCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/timeruleplugins"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerGetTimeRulePlugInsValidateBeforeCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerGetTimeRulePlugIns(Async)");
        }

        return assetServerGetTimeRulePlugInsCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve a list of all Time Rule Plug-in&#39;s.
     * 
     * @param webId The ID of the asset server, where the Time Rule Plug-in&#39;s are installed. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsTimeRulePlugIn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Time Rule Plug-in&#39;s. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsTimeRulePlugIn assetServerGetTimeRulePlugIns(String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsTimeRulePlugIn> localVarResp = assetServerGetTimeRulePlugInsWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of all Time Rule Plug-in&#39;s.
     * 
     * @param webId The ID of the asset server, where the Time Rule Plug-in&#39;s are installed. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsTimeRulePlugIn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Time Rule Plug-in&#39;s. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsTimeRulePlugIn> assetServerGetTimeRulePlugInsWithHttpInfo(String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerGetTimeRulePlugInsValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsTimeRulePlugIn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of all Time Rule Plug-in&#39;s. (asynchronously)
     * 
     * @param webId The ID of the asset server, where the Time Rule Plug-in&#39;s are installed. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Time Rule Plug-in&#39;s. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetTimeRulePlugInsAsync(String webId, String selectedFields, String webIdType, final ApiCallback<ItemsTimeRulePlugIn> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerGetTimeRulePlugInsValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsTimeRulePlugIn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerGetUnitClasses
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of unit classes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetUnitClassesCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/unitclasses"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerGetUnitClassesValidateBeforeCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerGetUnitClasses(Async)");
        }

        return assetServerGetUnitClassesCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve a list of all unit classes on the specified Asset Server.
     * 
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsUnitClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of unit classes. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsUnitClass assetServerGetUnitClasses(String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsUnitClass> localVarResp = assetServerGetUnitClassesWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of all unit classes on the specified Asset Server.
     * 
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsUnitClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of unit classes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsUnitClass> assetServerGetUnitClassesWithHttpInfo(String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerGetUnitClassesValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsUnitClass>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of all unit classes on the specified Asset Server. (asynchronously)
     * 
     * @param webId The ID of the server. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of unit classes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerGetUnitClassesAsync(String webId, String selectedFields, String webIdType, final ApiCallback<ItemsUnitClass> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerGetUnitClassesValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsUnitClass>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerList
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of servers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerListCall(String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assetservers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerListValidateBeforeCall(String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        return assetServerListCall(selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve a list of all Asset Servers known to this service.
     * 
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsAssetServer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of servers. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsAssetServer assetServerList(String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsAssetServer> localVarResp = assetServerListWithHttpInfo(selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of all Asset Servers known to this service.
     * 
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsAssetServer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of servers. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsAssetServer> assetServerListWithHttpInfo(String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = assetServerListValidateBeforeCall(selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsAssetServer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of all Asset Servers known to this service. (asynchronously)
     * 
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of servers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerListAsync(String selectedFields, String webIdType, final ApiCallback<ItemsAssetServer> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerListValidateBeforeCall(selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsAssetServer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetServerUpdateSecurityEntry
     * @param name The name of the security entry. (required)
     * @param webId The ID of the asset server where the security entry will be updated. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param securityItem The security item of the desired security entries to be updated. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be updated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerUpdateSecurityEntryCall(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren, String securityItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = securityEntry;

        // create path and map variables
        String localVarPath = "/assetservers/{webId}/securityentries/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applyToChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applyToChildren", applyToChildren));
        }

        if (securityItem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("securityItem", securityItem));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetServerUpdateSecurityEntryValidateBeforeCall(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren, String securityItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling assetServerUpdateSecurityEntry(Async)");
        }

        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling assetServerUpdateSecurityEntry(Async)");
        }

        // verify the required parameter 'securityEntry' is set
        if (securityEntry == null) {
            throw new ApiException("Missing the required parameter 'securityEntry' when calling assetServerUpdateSecurityEntry(Async)");
        }

        return assetServerUpdateSecurityEntryCall(name, webId, securityEntry, applyToChildren, securityItem, _callback);

    }

    /**
     * Update a security entry owned by the asset server.
     * 
     * @param name The name of the security entry. (required)
     * @param webId The ID of the asset server where the security entry will be updated. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param securityItem The security item of the desired security entries to be updated. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be updated. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was updated. </td><td>  -  </td></tr>
     </table>
     */
    public void assetServerUpdateSecurityEntry(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren, String securityItem) throws ApiException {
        assetServerUpdateSecurityEntryWithHttpInfo(name, webId, securityEntry, applyToChildren, securityItem);
    }

    /**
     * Update a security entry owned by the asset server.
     * 
     * @param name The name of the security entry. (required)
     * @param webId The ID of the asset server where the security entry will be updated. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param securityItem The security item of the desired security entries to be updated. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be updated. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> assetServerUpdateSecurityEntryWithHttpInfo(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren, String securityItem) throws ApiException {
        okhttp3.Call localVarCall = assetServerUpdateSecurityEntryValidateBeforeCall(name, webId, securityEntry, applyToChildren, securityItem, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a security entry owned by the asset server. (asynchronously)
     * 
     * @param name The name of the security entry. (required)
     * @param webId The ID of the asset server where the security entry will be updated. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param securityItem The security item of the desired security entries to be updated. If the parameter is not specified, security entries of the &#39;Default&#39; security item will be updated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetServerUpdateSecurityEntryAsync(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren, String securityItem, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetServerUpdateSecurityEntryValidateBeforeCall(name, webId, securityEntry, applyToChildren, securityItem, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
