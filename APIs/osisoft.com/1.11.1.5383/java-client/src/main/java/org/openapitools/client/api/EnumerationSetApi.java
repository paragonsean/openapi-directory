/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EnumerationSet;
import org.openapitools.client.model.EnumerationValue;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsEnumerationValue;
import org.openapitools.client.model.ItemsSecurityEntry;
import org.openapitools.client.model.ItemsSecurityRights;
import org.openapitools.client.model.SecurityEntry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnumerationSetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnumerationSetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnumerationSetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for enumerationSetCreateSecurityEntry
     * @param webId The ID of the enumeration set where the security entry will be created. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security entry was created. The response&#39;s Location header is a link to the security entry. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetCreateSecurityEntryCall(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = securityEntry;

        // create path and map variables
        String localVarPath = "/enumerationsets/{webId}/securityentries"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applyToChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applyToChildren", applyToChildren));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerationSetCreateSecurityEntryValidateBeforeCall(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling enumerationSetCreateSecurityEntry(Async)");
        }

        // verify the required parameter 'securityEntry' is set
        if (securityEntry == null) {
            throw new ApiException("Missing the required parameter 'securityEntry' when calling enumerationSetCreateSecurityEntry(Async)");
        }

        return enumerationSetCreateSecurityEntryCall(webId, securityEntry, applyToChildren, webIdType, _callback);

    }

    /**
     * Create a security entry owned by the enumeration set.
     * 
     * @param webId The ID of the enumeration set where the security entry will be created. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security entry was created. The response&#39;s Location header is a link to the security entry. </td><td>  -  </td></tr>
     </table>
     */
    public void enumerationSetCreateSecurityEntry(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String webIdType) throws ApiException {
        enumerationSetCreateSecurityEntryWithHttpInfo(webId, securityEntry, applyToChildren, webIdType);
    }

    /**
     * Create a security entry owned by the enumeration set.
     * 
     * @param webId The ID of the enumeration set where the security entry will be created. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security entry was created. The response&#39;s Location header is a link to the security entry. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> enumerationSetCreateSecurityEntryWithHttpInfo(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = enumerationSetCreateSecurityEntryValidateBeforeCall(webId, securityEntry, applyToChildren, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a security entry owned by the enumeration set. (asynchronously)
     * 
     * @param webId The ID of the enumeration set where the security entry will be created. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security entry was created. The response&#39;s Location header is a link to the security entry. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetCreateSecurityEntryAsync(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerationSetCreateSecurityEntryValidateBeforeCall(webId, securityEntry, applyToChildren, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enumerationSetCreateValue
     * @param webId The ID of the enumeration set on which to create the enumeration value. (required)
     * @param enumerationValue The new enumeration value definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The enumeration value was created. The response&#39;s Location header is a link to the enumeration value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetCreateValueCall(String webId, EnumerationValue enumerationValue, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enumerationValue;

        // create path and map variables
        String localVarPath = "/enumerationsets/{webId}/enumerationvalues"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerationSetCreateValueValidateBeforeCall(String webId, EnumerationValue enumerationValue, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling enumerationSetCreateValue(Async)");
        }

        // verify the required parameter 'enumerationValue' is set
        if (enumerationValue == null) {
            throw new ApiException("Missing the required parameter 'enumerationValue' when calling enumerationSetCreateValue(Async)");
        }

        return enumerationSetCreateValueCall(webId, enumerationValue, webIdType, _callback);

    }

    /**
     * Create an enumeration value for a enumeration set.
     * 
     * @param webId The ID of the enumeration set on which to create the enumeration value. (required)
     * @param enumerationValue The new enumeration value definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The enumeration value was created. The response&#39;s Location header is a link to the enumeration value. </td><td>  -  </td></tr>
     </table>
     */
    public void enumerationSetCreateValue(String webId, EnumerationValue enumerationValue, String webIdType) throws ApiException {
        enumerationSetCreateValueWithHttpInfo(webId, enumerationValue, webIdType);
    }

    /**
     * Create an enumeration value for a enumeration set.
     * 
     * @param webId The ID of the enumeration set on which to create the enumeration value. (required)
     * @param enumerationValue The new enumeration value definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The enumeration value was created. The response&#39;s Location header is a link to the enumeration value. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> enumerationSetCreateValueWithHttpInfo(String webId, EnumerationValue enumerationValue, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = enumerationSetCreateValueValidateBeforeCall(webId, enumerationValue, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create an enumeration value for a enumeration set. (asynchronously)
     * 
     * @param webId The ID of the enumeration set on which to create the enumeration value. (required)
     * @param enumerationValue The new enumeration value definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The enumeration value was created. The response&#39;s Location header is a link to the enumeration value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetCreateValueAsync(String webId, EnumerationValue enumerationValue, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerationSetCreateValueValidateBeforeCall(webId, enumerationValue, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enumerationSetDelete
     * @param webId The ID of the enumeration set to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The enumeration set was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetDeleteCall(String webId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enumerationsets/{webId}"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerationSetDeleteValidateBeforeCall(String webId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling enumerationSetDelete(Async)");
        }

        return enumerationSetDeleteCall(webId, _callback);

    }

    /**
     * Delete an enumeration set.
     * 
     * @param webId The ID of the enumeration set to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The enumeration set was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void enumerationSetDelete(String webId) throws ApiException {
        enumerationSetDeleteWithHttpInfo(webId);
    }

    /**
     * Delete an enumeration set.
     * 
     * @param webId The ID of the enumeration set to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The enumeration set was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> enumerationSetDeleteWithHttpInfo(String webId) throws ApiException {
        okhttp3.Call localVarCall = enumerationSetDeleteValidateBeforeCall(webId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an enumeration set. (asynchronously)
     * 
     * @param webId The ID of the enumeration set to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The enumeration set was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetDeleteAsync(String webId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerationSetDeleteValidateBeforeCall(webId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enumerationSetDeleteSecurityEntry
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the enumeration set where the security entry will be deleted. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetDeleteSecurityEntryCall(String name, String webId, Boolean applyToChildren, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enumerationsets/{webId}/securityentries/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applyToChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applyToChildren", applyToChildren));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerationSetDeleteSecurityEntryValidateBeforeCall(String name, String webId, Boolean applyToChildren, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling enumerationSetDeleteSecurityEntry(Async)");
        }

        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling enumerationSetDeleteSecurityEntry(Async)");
        }

        return enumerationSetDeleteSecurityEntryCall(name, webId, applyToChildren, _callback);

    }

    /**
     * Delete a security entry owned by the enumeration set.
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the enumeration set where the security entry will be deleted. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void enumerationSetDeleteSecurityEntry(String name, String webId, Boolean applyToChildren) throws ApiException {
        enumerationSetDeleteSecurityEntryWithHttpInfo(name, webId, applyToChildren);
    }

    /**
     * Delete a security entry owned by the enumeration set.
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the enumeration set where the security entry will be deleted. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> enumerationSetDeleteSecurityEntryWithHttpInfo(String name, String webId, Boolean applyToChildren) throws ApiException {
        okhttp3.Call localVarCall = enumerationSetDeleteSecurityEntryValidateBeforeCall(name, webId, applyToChildren, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a security entry owned by the enumeration set. (asynchronously)
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the enumeration set where the security entry will be deleted. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetDeleteSecurityEntryAsync(String name, String webId, Boolean applyToChildren, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerationSetDeleteSecurityEntryValidateBeforeCall(name, webId, applyToChildren, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enumerationSetGet
     * @param webId The ID of the enumeration set. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified enumeration sets. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetGetCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enumerationsets/{webId}"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerationSetGetValidateBeforeCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling enumerationSetGet(Async)");
        }

        return enumerationSetGetCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve an enumeration set.
     * 
     * @param webId The ID of the enumeration set. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return EnumerationSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified enumeration sets. </td><td>  -  </td></tr>
     </table>
     */
    public EnumerationSet enumerationSetGet(String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<EnumerationSet> localVarResp = enumerationSetGetWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve an enumeration set.
     * 
     * @param webId The ID of the enumeration set. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;EnumerationSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified enumeration sets. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnumerationSet> enumerationSetGetWithHttpInfo(String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = enumerationSetGetValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<EnumerationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an enumeration set. (asynchronously)
     * 
     * @param webId The ID of the enumeration set. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified enumeration sets. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetGetAsync(String webId, String selectedFields, String webIdType, final ApiCallback<EnumerationSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerationSetGetValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<EnumerationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enumerationSetGetByPath
     * @param path The path to the target enumeration set. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified enumeration set. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetGetByPathCall(String path, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enumerationsets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerationSetGetByPathValidateBeforeCall(String path, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling enumerationSetGetByPath(Async)");
        }

        return enumerationSetGetByPathCall(path, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve an enumeration set by path.
     * This method returns an enumeration set based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the target enumeration set. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return EnumerationSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified enumeration set. </td><td>  -  </td></tr>
     </table>
     */
    public EnumerationSet enumerationSetGetByPath(String path, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<EnumerationSet> localVarResp = enumerationSetGetByPathWithHttpInfo(path, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve an enumeration set by path.
     * This method returns an enumeration set based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the target enumeration set. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;EnumerationSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified enumeration set. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnumerationSet> enumerationSetGetByPathWithHttpInfo(String path, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = enumerationSetGetByPathValidateBeforeCall(path, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<EnumerationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an enumeration set by path. (asynchronously)
     * This method returns an enumeration set based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the target enumeration set. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified enumeration set. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetGetByPathAsync(String path, String selectedFields, String webIdType, final ApiCallback<EnumerationSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerationSetGetByPathValidateBeforeCall(path, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<EnumerationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enumerationSetGetSecurity
     * @param webId The ID of the enumeration set for the security to be checked. (required)
     * @param userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param forceRefresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security rights. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported when using Anonymous authentication method. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetGetSecurityCall(String webId, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enumerationsets/{webId}/security"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userIdentity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "userIdentity", userIdentity));
        }

        if (forceRefresh != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceRefresh", forceRefresh));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerationSetGetSecurityValidateBeforeCall(String webId, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling enumerationSetGetSecurity(Async)");
        }

        // verify the required parameter 'userIdentity' is set
        if (userIdentity == null) {
            throw new ApiException("Missing the required parameter 'userIdentity' when calling enumerationSetGetSecurity(Async)");
        }

        return enumerationSetGetSecurityCall(webId, userIdentity, forceRefresh, selectedFields, webIdType, _callback);

    }

    /**
     * Get the security information of the specified security item associated with the enumeration set for a specified user.
     * 
     * @param webId The ID of the enumeration set for the security to be checked. (required)
     * @param userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param forceRefresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsSecurityRights
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security rights. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported when using Anonymous authentication method. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsSecurityRights enumerationSetGetSecurity(String webId, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsSecurityRights> localVarResp = enumerationSetGetSecurityWithHttpInfo(webId, userIdentity, forceRefresh, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Get the security information of the specified security item associated with the enumeration set for a specified user.
     * 
     * @param webId The ID of the enumeration set for the security to be checked. (required)
     * @param userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param forceRefresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsSecurityRights&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security rights. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported when using Anonymous authentication method. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsSecurityRights> enumerationSetGetSecurityWithHttpInfo(String webId, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = enumerationSetGetSecurityValidateBeforeCall(webId, userIdentity, forceRefresh, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsSecurityRights>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the security information of the specified security item associated with the enumeration set for a specified user. (asynchronously)
     * 
     * @param webId The ID of the enumeration set for the security to be checked. (required)
     * @param userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param forceRefresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security rights. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported when using Anonymous authentication method. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetGetSecurityAsync(String webId, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType, final ApiCallback<ItemsSecurityRights> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerationSetGetSecurityValidateBeforeCall(webId, userIdentity, forceRefresh, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsSecurityRights>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enumerationSetGetSecurityEntries
     * @param webId The ID of the enumeration set. (required)
     * @param nameFilter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security entries matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetGetSecurityEntriesCall(String webId, String nameFilter, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enumerationsets/{webId}/securityentries"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerationSetGetSecurityEntriesValidateBeforeCall(String webId, String nameFilter, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling enumerationSetGetSecurityEntries(Async)");
        }

        return enumerationSetGetSecurityEntriesCall(webId, nameFilter, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve the security entries associated with the enumeration set based on the specified criteria. By default, all security entries for this enumeration set are returned.
     * 
     * @param webId The ID of the enumeration set. (required)
     * @param nameFilter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsSecurityEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security entries matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsSecurityEntry enumerationSetGetSecurityEntries(String webId, String nameFilter, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsSecurityEntry> localVarResp = enumerationSetGetSecurityEntriesWithHttpInfo(webId, nameFilter, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve the security entries associated with the enumeration set based on the specified criteria. By default, all security entries for this enumeration set are returned.
     * 
     * @param webId The ID of the enumeration set. (required)
     * @param nameFilter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsSecurityEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security entries matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsSecurityEntry> enumerationSetGetSecurityEntriesWithHttpInfo(String webId, String nameFilter, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = enumerationSetGetSecurityEntriesValidateBeforeCall(webId, nameFilter, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsSecurityEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the security entries associated with the enumeration set based on the specified criteria. By default, all security entries for this enumeration set are returned. (asynchronously)
     * 
     * @param webId The ID of the enumeration set. (required)
     * @param nameFilter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security entries matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetGetSecurityEntriesAsync(String webId, String nameFilter, String selectedFields, String webIdType, final ApiCallback<ItemsSecurityEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerationSetGetSecurityEntriesValidateBeforeCall(webId, nameFilter, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsSecurityEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enumerationSetGetSecurityEntryByName
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the enumeration set. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The security entry matching the specified condition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The security entry with the specified name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetGetSecurityEntryByNameCall(String name, String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enumerationsets/{webId}/securityentries/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerationSetGetSecurityEntryByNameValidateBeforeCall(String name, String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling enumerationSetGetSecurityEntryByName(Async)");
        }

        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling enumerationSetGetSecurityEntryByName(Async)");
        }

        return enumerationSetGetSecurityEntryByNameCall(name, webId, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve the security entry associated with the enumeration set with the specified name.
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the enumeration set. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return SecurityEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The security entry matching the specified condition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The security entry with the specified name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public SecurityEntry enumerationSetGetSecurityEntryByName(String name, String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<SecurityEntry> localVarResp = enumerationSetGetSecurityEntryByNameWithHttpInfo(name, webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve the security entry associated with the enumeration set with the specified name.
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the enumeration set. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;SecurityEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The security entry matching the specified condition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The security entry with the specified name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityEntry> enumerationSetGetSecurityEntryByNameWithHttpInfo(String name, String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = enumerationSetGetSecurityEntryByNameValidateBeforeCall(name, webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<SecurityEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the security entry associated with the enumeration set with the specified name. (asynchronously)
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the enumeration set. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The security entry matching the specified condition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The security entry with the specified name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetGetSecurityEntryByNameAsync(String name, String webId, String selectedFields, String webIdType, final ApiCallback<SecurityEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerationSetGetSecurityEntryByNameValidateBeforeCall(name, webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<SecurityEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enumerationSetGetValues
     * @param webId The ID of the enumeration set. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified enumeration set&#39;s values </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetGetValuesCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enumerationsets/{webId}/enumerationvalues"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerationSetGetValuesValidateBeforeCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling enumerationSetGetValues(Async)");
        }

        return enumerationSetGetValuesCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve an enumeration set&#39;s values.
     * 
     * @param webId The ID of the enumeration set. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsEnumerationValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified enumeration set&#39;s values </td><td>  -  </td></tr>
     </table>
     */
    public ItemsEnumerationValue enumerationSetGetValues(String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsEnumerationValue> localVarResp = enumerationSetGetValuesWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve an enumeration set&#39;s values.
     * 
     * @param webId The ID of the enumeration set. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsEnumerationValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified enumeration set&#39;s values </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsEnumerationValue> enumerationSetGetValuesWithHttpInfo(String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = enumerationSetGetValuesValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsEnumerationValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an enumeration set&#39;s values. (asynchronously)
     * 
     * @param webId The ID of the enumeration set. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified enumeration set&#39;s values </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetGetValuesAsync(String webId, String selectedFields, String webIdType, final ApiCallback<ItemsEnumerationValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerationSetGetValuesValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsEnumerationValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enumerationSetUpdate
     * @param webId The ID of the enumeration set to update. (required)
     * @param enumerationSet A partial enumeration set containing the desired changes. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The enumeration set was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetUpdateCall(String webId, EnumerationSet enumerationSet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enumerationSet;

        // create path and map variables
        String localVarPath = "/enumerationsets/{webId}"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerationSetUpdateValidateBeforeCall(String webId, EnumerationSet enumerationSet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling enumerationSetUpdate(Async)");
        }

        // verify the required parameter 'enumerationSet' is set
        if (enumerationSet == null) {
            throw new ApiException("Missing the required parameter 'enumerationSet' when calling enumerationSetUpdate(Async)");
        }

        return enumerationSetUpdateCall(webId, enumerationSet, _callback);

    }

    /**
     * Update an enumeration set by replacing items in its definition.
     * 
     * @param webId The ID of the enumeration set to update. (required)
     * @param enumerationSet A partial enumeration set containing the desired changes. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The enumeration set was updated. </td><td>  -  </td></tr>
     </table>
     */
    public void enumerationSetUpdate(String webId, EnumerationSet enumerationSet) throws ApiException {
        enumerationSetUpdateWithHttpInfo(webId, enumerationSet);
    }

    /**
     * Update an enumeration set by replacing items in its definition.
     * 
     * @param webId The ID of the enumeration set to update. (required)
     * @param enumerationSet A partial enumeration set containing the desired changes. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The enumeration set was updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> enumerationSetUpdateWithHttpInfo(String webId, EnumerationSet enumerationSet) throws ApiException {
        okhttp3.Call localVarCall = enumerationSetUpdateValidateBeforeCall(webId, enumerationSet, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an enumeration set by replacing items in its definition. (asynchronously)
     * 
     * @param webId The ID of the enumeration set to update. (required)
     * @param enumerationSet A partial enumeration set containing the desired changes. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The enumeration set was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetUpdateAsync(String webId, EnumerationSet enumerationSet, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerationSetUpdateValidateBeforeCall(webId, enumerationSet, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for enumerationSetUpdateSecurityEntry
     * @param name The name of the security entry. (required)
     * @param webId The ID of the enumeration set where the security entry will be updated. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetUpdateSecurityEntryCall(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = securityEntry;

        // create path and map variables
        String localVarPath = "/enumerationsets/{webId}/securityentries/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applyToChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applyToChildren", applyToChildren));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enumerationSetUpdateSecurityEntryValidateBeforeCall(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling enumerationSetUpdateSecurityEntry(Async)");
        }

        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling enumerationSetUpdateSecurityEntry(Async)");
        }

        // verify the required parameter 'securityEntry' is set
        if (securityEntry == null) {
            throw new ApiException("Missing the required parameter 'securityEntry' when calling enumerationSetUpdateSecurityEntry(Async)");
        }

        return enumerationSetUpdateSecurityEntryCall(name, webId, securityEntry, applyToChildren, _callback);

    }

    /**
     * Update a security entry owned by the enumeration set.
     * 
     * @param name The name of the security entry. (required)
     * @param webId The ID of the enumeration set where the security entry will be updated. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was updated. </td><td>  -  </td></tr>
     </table>
     */
    public void enumerationSetUpdateSecurityEntry(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren) throws ApiException {
        enumerationSetUpdateSecurityEntryWithHttpInfo(name, webId, securityEntry, applyToChildren);
    }

    /**
     * Update a security entry owned by the enumeration set.
     * 
     * @param name The name of the security entry. (required)
     * @param webId The ID of the enumeration set where the security entry will be updated. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> enumerationSetUpdateSecurityEntryWithHttpInfo(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren) throws ApiException {
        okhttp3.Call localVarCall = enumerationSetUpdateSecurityEntryValidateBeforeCall(name, webId, securityEntry, applyToChildren, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a security entry owned by the enumeration set. (asynchronously)
     * 
     * @param name The name of the security entry. (required)
     * @param webId The ID of the enumeration set where the security entry will be updated. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enumerationSetUpdateSecurityEntryAsync(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = enumerationSetUpdateSecurityEntryValidateBeforeCall(name, webId, securityEntry, applyToChildren, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
