/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ExtendedTimedValue;
import org.openapitools.client.model.ExtendedTimedValues;
import org.openapitools.client.model.ItemsStreamValues;
import org.openapitools.client.model.ItemsSubstatus;
import org.openapitools.client.model.ItemsSummaryValue;
import org.openapitools.client.model.StreamUpdatesRegister;
import org.openapitools.client.model.StreamUpdatesRetrieve;
import org.openapitools.client.model.TimedValue;
import org.openapitools.client.model.TimedValues;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreamApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StreamApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreamApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for streamGetChannel
     * @param webId The ID of the stream. (required)
     * @param heartbeatRate HeartbeatRate is an integer multiple of the Polling Interval. It specifies the rate at which a client will receive an empty message if there are no data updates. It can be used to check that the connection is still alive. Zero/negative values correspond to no heartbeat. By default, no empty messages will be sent to the user. (optional)
     * @param includeInitialValues Specified if the channel should send a message with the current value of the stream after the connection is opened. The default is &#39;false&#39;. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Switches to the Web Socket protocol. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetChannelCall(String webId, Integer heartbeatRate, Boolean includeInitialValues, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/{webId}/channel"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (heartbeatRate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("heartbeatRate", heartbeatRate));
        }

        if (includeInitialValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInitialValues", includeInitialValues));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamGetChannelValidateBeforeCall(String webId, Integer heartbeatRate, Boolean includeInitialValues, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamGetChannel(Async)");
        }

        return streamGetChannelCall(webId, heartbeatRate, includeInitialValues, webIdType, _callback);

    }

    /**
     * Opens a channel that will send messages about any value changes for the specified stream.
     * 
     * @param webId The ID of the stream. (required)
     * @param heartbeatRate HeartbeatRate is an integer multiple of the Polling Interval. It specifies the rate at which a client will receive an empty message if there are no data updates. It can be used to check that the connection is still alive. Zero/negative values correspond to no heartbeat. By default, no empty messages will be sent to the user. (optional)
     * @param includeInitialValues Specified if the channel should send a message with the current value of the stream after the connection is opened. The default is &#39;false&#39;. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Switches to the Web Socket protocol. </td><td>  -  </td></tr>
     </table>
     */
    public void streamGetChannel(String webId, Integer heartbeatRate, Boolean includeInitialValues, String webIdType) throws ApiException {
        streamGetChannelWithHttpInfo(webId, heartbeatRate, includeInitialValues, webIdType);
    }

    /**
     * Opens a channel that will send messages about any value changes for the specified stream.
     * 
     * @param webId The ID of the stream. (required)
     * @param heartbeatRate HeartbeatRate is an integer multiple of the Polling Interval. It specifies the rate at which a client will receive an empty message if there are no data updates. It can be used to check that the connection is still alive. Zero/negative values correspond to no heartbeat. By default, no empty messages will be sent to the user. (optional)
     * @param includeInitialValues Specified if the channel should send a message with the current value of the stream after the connection is opened. The default is &#39;false&#39;. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Switches to the Web Socket protocol. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> streamGetChannelWithHttpInfo(String webId, Integer heartbeatRate, Boolean includeInitialValues, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamGetChannelValidateBeforeCall(webId, heartbeatRate, includeInitialValues, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Opens a channel that will send messages about any value changes for the specified stream. (asynchronously)
     * 
     * @param webId The ID of the stream. (required)
     * @param heartbeatRate HeartbeatRate is an integer multiple of the Polling Interval. It specifies the rate at which a client will receive an empty message if there are no data updates. It can be used to check that the connection is still alive. Zero/negative values correspond to no heartbeat. By default, no empty messages will be sent to the user. (optional)
     * @param includeInitialValues Specified if the channel should send a message with the current value of the stream after the connection is opened. The default is &#39;false&#39;. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Switches to the Web Socket protocol. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetChannelAsync(String webId, Integer heartbeatRate, Boolean includeInitialValues, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamGetChannelValidateBeforeCall(webId, heartbeatRate, includeInitialValues, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamGetEnd
     * @param webId The ID of the stream. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value at the specified time value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetEndCall(String webId, String desiredUnits, String selectedFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/{webId}/end"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (desiredUnits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desiredUnits", desiredUnits));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamGetEndValidateBeforeCall(String webId, String desiredUnits, String selectedFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamGetEnd(Async)");
        }

        return streamGetEndCall(webId, desiredUnits, selectedFields, _callback);

    }

    /**
     * Returns the end-of-stream value of the stream.
     * 
     * @param webId The ID of the stream. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @return TimedValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value at the specified time value. </td><td>  -  </td></tr>
     </table>
     */
    public TimedValue streamGetEnd(String webId, String desiredUnits, String selectedFields) throws ApiException {
        ApiResponse<TimedValue> localVarResp = streamGetEndWithHttpInfo(webId, desiredUnits, selectedFields);
        return localVarResp.getData();
    }

    /**
     * Returns the end-of-stream value of the stream.
     * 
     * @param webId The ID of the stream. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @return ApiResponse&lt;TimedValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value at the specified time value. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimedValue> streamGetEndWithHttpInfo(String webId, String desiredUnits, String selectedFields) throws ApiException {
        okhttp3.Call localVarCall = streamGetEndValidateBeforeCall(webId, desiredUnits, selectedFields, null);
        Type localVarReturnType = new TypeToken<TimedValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the end-of-stream value of the stream. (asynchronously)
     * 
     * @param webId The ID of the stream. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value at the specified time value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetEndAsync(String webId, String desiredUnits, String selectedFields, final ApiCallback<TimedValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamGetEndValidateBeforeCall(webId, desiredUnits, selectedFields, _callback);
        Type localVarReturnType = new TypeToken<TimedValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamGetInterpolated
     * @param webId The ID of the stream. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param interval The sampling interval, in AFTimeSpan format. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param syncTime An optional start time anchor, in AFTime format. When specified, interpolated data retrieval will use the sync time as the origin for calculating the interval times. (optional)
     * @param syncTimeBoundaryType An optional string specifying the boundary type to use when applying a syncTime. The allowed values are &#39;Inside&#39; and &#39;Outside&#39;. The default is &#39;Inside&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method, or the supplied filter expression is unsupported, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetInterpolatedCall(String webId, String desiredUnits, String endTime, String filterExpression, Boolean includeFilteredValues, String interval, String selectedFields, String startTime, String syncTime, String syncTimeBoundaryType, String timeZone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/{webId}/interpolated"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (desiredUnits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desiredUnits", desiredUnits));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (filterExpression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterExpression", filterExpression));
        }

        if (includeFilteredValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeFilteredValues", includeFilteredValues));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (syncTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syncTime", syncTime));
        }

        if (syncTimeBoundaryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syncTimeBoundaryType", syncTimeBoundaryType));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamGetInterpolatedValidateBeforeCall(String webId, String desiredUnits, String endTime, String filterExpression, Boolean includeFilteredValues, String interval, String selectedFields, String startTime, String syncTime, String syncTimeBoundaryType, String timeZone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamGetInterpolated(Async)");
        }

        return streamGetInterpolatedCall(webId, desiredUnits, endTime, filterExpression, includeFilteredValues, interval, selectedFields, startTime, syncTime, syncTimeBoundaryType, timeZone, _callback);

    }

    /**
     * Retrieves interpolated values over the specified time range at the specified sampling interval.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of the stream. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param interval The sampling interval, in AFTimeSpan format. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param syncTime An optional start time anchor, in AFTime format. When specified, interpolated data retrieval will use the sync time as the origin for calculating the interval times. (optional)
     * @param syncTimeBoundaryType An optional string specifying the boundary type to use when applying a syncTime. The allowed values are &#39;Inside&#39; and &#39;Outside&#39;. The default is &#39;Inside&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @return TimedValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method, or the supplied filter expression is unsupported, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public TimedValues streamGetInterpolated(String webId, String desiredUnits, String endTime, String filterExpression, Boolean includeFilteredValues, String interval, String selectedFields, String startTime, String syncTime, String syncTimeBoundaryType, String timeZone) throws ApiException {
        ApiResponse<TimedValues> localVarResp = streamGetInterpolatedWithHttpInfo(webId, desiredUnits, endTime, filterExpression, includeFilteredValues, interval, selectedFields, startTime, syncTime, syncTimeBoundaryType, timeZone);
        return localVarResp.getData();
    }

    /**
     * Retrieves interpolated values over the specified time range at the specified sampling interval.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of the stream. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param interval The sampling interval, in AFTimeSpan format. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param syncTime An optional start time anchor, in AFTime format. When specified, interpolated data retrieval will use the sync time as the origin for calculating the interval times. (optional)
     * @param syncTimeBoundaryType An optional string specifying the boundary type to use when applying a syncTime. The allowed values are &#39;Inside&#39; and &#39;Outside&#39;. The default is &#39;Inside&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @return ApiResponse&lt;TimedValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method, or the supplied filter expression is unsupported, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimedValues> streamGetInterpolatedWithHttpInfo(String webId, String desiredUnits, String endTime, String filterExpression, Boolean includeFilteredValues, String interval, String selectedFields, String startTime, String syncTime, String syncTimeBoundaryType, String timeZone) throws ApiException {
        okhttp3.Call localVarCall = streamGetInterpolatedValidateBeforeCall(webId, desiredUnits, endTime, filterExpression, includeFilteredValues, interval, selectedFields, startTime, syncTime, syncTimeBoundaryType, timeZone, null);
        Type localVarReturnType = new TypeToken<TimedValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves interpolated values over the specified time range at the specified sampling interval. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of the stream. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param interval The sampling interval, in AFTimeSpan format. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param syncTime An optional start time anchor, in AFTime format. When specified, interpolated data retrieval will use the sync time as the origin for calculating the interval times. (optional)
     * @param syncTimeBoundaryType An optional string specifying the boundary type to use when applying a syncTime. The allowed values are &#39;Inside&#39; and &#39;Outside&#39;. The default is &#39;Inside&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method, or the supplied filter expression is unsupported, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetInterpolatedAsync(String webId, String desiredUnits, String endTime, String filterExpression, Boolean includeFilteredValues, String interval, String selectedFields, String startTime, String syncTime, String syncTimeBoundaryType, String timeZone, final ApiCallback<TimedValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamGetInterpolatedValidateBeforeCall(webId, desiredUnits, endTime, filterExpression, includeFilteredValues, interval, selectedFields, startTime, syncTime, syncTimeBoundaryType, timeZone, _callback);
        Type localVarReturnType = new TypeToken<TimedValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamGetInterpolatedAtTimes
     * @param webId The ID of the stream. (required)
     * @param time The timestamp at which to retrieve an interpolated value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method, or the supplied filter expression is unsupported, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetInterpolatedAtTimesCall(String webId, List<String> time, String desiredUnits, String filterExpression, Boolean includeFilteredValues, String selectedFields, String sortOrder, String timeZone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/{webId}/interpolatedattimes"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (time != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "time", time));
        }

        if (desiredUnits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desiredUnits", desiredUnits));
        }

        if (filterExpression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterExpression", filterExpression));
        }

        if (includeFilteredValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeFilteredValues", includeFilteredValues));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamGetInterpolatedAtTimesValidateBeforeCall(String webId, List<String> time, String desiredUnits, String filterExpression, Boolean includeFilteredValues, String selectedFields, String sortOrder, String timeZone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamGetInterpolatedAtTimes(Async)");
        }

        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling streamGetInterpolatedAtTimes(Async)");
        }

        return streamGetInterpolatedAtTimesCall(webId, time, desiredUnits, filterExpression, includeFilteredValues, selectedFields, sortOrder, timeZone, _callback);

    }

    /**
     * Retrieves interpolated values over the specified time range at the specified sampling interval.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of the stream. (required)
     * @param time The timestamp at which to retrieve an interpolated value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @return TimedValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method, or the supplied filter expression is unsupported, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public TimedValues streamGetInterpolatedAtTimes(String webId, List<String> time, String desiredUnits, String filterExpression, Boolean includeFilteredValues, String selectedFields, String sortOrder, String timeZone) throws ApiException {
        ApiResponse<TimedValues> localVarResp = streamGetInterpolatedAtTimesWithHttpInfo(webId, time, desiredUnits, filterExpression, includeFilteredValues, selectedFields, sortOrder, timeZone);
        return localVarResp.getData();
    }

    /**
     * Retrieves interpolated values over the specified time range at the specified sampling interval.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of the stream. (required)
     * @param time The timestamp at which to retrieve an interpolated value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @return ApiResponse&lt;TimedValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method, or the supplied filter expression is unsupported, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimedValues> streamGetInterpolatedAtTimesWithHttpInfo(String webId, List<String> time, String desiredUnits, String filterExpression, Boolean includeFilteredValues, String selectedFields, String sortOrder, String timeZone) throws ApiException {
        okhttp3.Call localVarCall = streamGetInterpolatedAtTimesValidateBeforeCall(webId, time, desiredUnits, filterExpression, includeFilteredValues, selectedFields, sortOrder, timeZone, null);
        Type localVarReturnType = new TypeToken<TimedValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves interpolated values over the specified time range at the specified sampling interval. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of the stream. (required)
     * @param time The timestamp at which to retrieve an interpolated value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method, or the supplied filter expression is unsupported, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetInterpolatedAtTimesAsync(String webId, List<String> time, String desiredUnits, String filterExpression, Boolean includeFilteredValues, String selectedFields, String sortOrder, String timeZone, final ApiCallback<TimedValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamGetInterpolatedAtTimesValidateBeforeCall(webId, time, desiredUnits, filterExpression, includeFilteredValues, selectedFields, sortOrder, timeZone, _callback);
        Type localVarReturnType = new TypeToken<TimedValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamGetPlot
     * @param webId The ID of the stream. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param intervals The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is &#39;24&#39;. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetPlotCall(String webId, String desiredUnits, String endTime, Integer intervals, String selectedFields, String startTime, String timeZone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/{webId}/plot"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (desiredUnits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desiredUnits", desiredUnits));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (intervals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intervals", intervals));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamGetPlotValidateBeforeCall(String webId, String desiredUnits, String endTime, Integer intervals, String selectedFields, String startTime, String timeZone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamGetPlot(Async)");
        }

        return streamGetPlotCall(webId, desiredUnits, endTime, intervals, selectedFields, startTime, timeZone, _callback);

    }

    /**
     * Retrieves values over the specified time range suitable for plotting over the number of intervals (typically represents pixels).
     * For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of the stream. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param intervals The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is &#39;24&#39;. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @return TimedValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public TimedValues streamGetPlot(String webId, String desiredUnits, String endTime, Integer intervals, String selectedFields, String startTime, String timeZone) throws ApiException {
        ApiResponse<TimedValues> localVarResp = streamGetPlotWithHttpInfo(webId, desiredUnits, endTime, intervals, selectedFields, startTime, timeZone);
        return localVarResp.getData();
    }

    /**
     * Retrieves values over the specified time range suitable for plotting over the number of intervals (typically represents pixels).
     * For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of the stream. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param intervals The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is &#39;24&#39;. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @return ApiResponse&lt;TimedValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimedValues> streamGetPlotWithHttpInfo(String webId, String desiredUnits, String endTime, Integer intervals, String selectedFields, String startTime, String timeZone) throws ApiException {
        okhttp3.Call localVarCall = streamGetPlotValidateBeforeCall(webId, desiredUnits, endTime, intervals, selectedFields, startTime, timeZone, null);
        Type localVarReturnType = new TypeToken<TimedValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves values over the specified time range suitable for plotting over the number of intervals (typically represents pixels). (asynchronously)
     * For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of the stream. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param intervals The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is &#39;24&#39;. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetPlotAsync(String webId, String desiredUnits, String endTime, Integer intervals, String selectedFields, String startTime, String timeZone, final ApiCallback<TimedValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamGetPlotValidateBeforeCall(webId, desiredUnits, endTime, intervals, selectedFields, startTime, timeZone, _callback);
        Type localVarReturnType = new TypeToken<TimedValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamGetRecorded
     * @param webId The ID of the stream. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Annotations to return events with annotation values. If this parameter is not specified, annotation values are not returned. (optional)
     * @param boundaryType An optional value that determines how the times and values of the returned end points are determined. The default is &#39;Inside&#39;. (optional)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param maxCount The maximum number of values to be returned. The default is 1000. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support the method, or the supplied filter expression is unsupported, or the desired units of measure are incompatible, or an unsupported association was specified. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetRecordedCall(String webId, String associations, String boundaryType, String desiredUnits, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String selectedFields, String startTime, String timeZone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/{webId}/recorded"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (boundaryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boundaryType", boundaryType));
        }

        if (desiredUnits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desiredUnits", desiredUnits));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (filterExpression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterExpression", filterExpression));
        }

        if (includeFilteredValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeFilteredValues", includeFilteredValues));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamGetRecordedValidateBeforeCall(String webId, String associations, String boundaryType, String desiredUnits, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String selectedFields, String startTime, String timeZone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamGetRecorded(Async)");
        }

        return streamGetRecordedCall(webId, associations, boundaryType, desiredUnits, endTime, filterExpression, includeFilteredValues, maxCount, selectedFields, startTime, timeZone, _callback);

    }

    /**
     * Returns a list of compressed values for the requested time range from the source provider.
     * Returned times are affected by the specified boundary type. If no values are found for the time range and conditions specified then the HTTP response will be success, with a body containing an empty array of Items. When specifying true for the includeFilteredValues parameter, consecutive filtered events are not returned. The first value that would be filtered out is returned with its time and the enumeration value \&quot;Filtered\&quot;. The next value in the collection will be the next compressed value in the specified direction that passes the filter criteria - if any. When both boundaryType and a filterExpression are specified, the events returned for the boundary condition specified are passed through the filter. If the includeFilteredValues parameter is true, the boundary values will be reported at the proper timestamps with the enumeration value \&quot;Filtered\&quot; when the filter conditions are not met at the boundary time. If the includeFilteredValues parameter is false for this case, no event is returned for the boundary time. Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.   If only recorded values with annotations are desired, the filterExpression parameter should include the filter IsSet(&#39;.&#39;, \&quot;a\&quot;).
     * @param webId The ID of the stream. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Annotations to return events with annotation values. If this parameter is not specified, annotation values are not returned. (optional)
     * @param boundaryType An optional value that determines how the times and values of the returned end points are determined. The default is &#39;Inside&#39;. (optional)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param maxCount The maximum number of values to be returned. The default is 1000. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @return ExtendedTimedValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support the method, or the supplied filter expression is unsupported, or the desired units of measure are incompatible, or an unsupported association was specified. </td><td>  -  </td></tr>
     </table>
     */
    public ExtendedTimedValues streamGetRecorded(String webId, String associations, String boundaryType, String desiredUnits, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String selectedFields, String startTime, String timeZone) throws ApiException {
        ApiResponse<ExtendedTimedValues> localVarResp = streamGetRecordedWithHttpInfo(webId, associations, boundaryType, desiredUnits, endTime, filterExpression, includeFilteredValues, maxCount, selectedFields, startTime, timeZone);
        return localVarResp.getData();
    }

    /**
     * Returns a list of compressed values for the requested time range from the source provider.
     * Returned times are affected by the specified boundary type. If no values are found for the time range and conditions specified then the HTTP response will be success, with a body containing an empty array of Items. When specifying true for the includeFilteredValues parameter, consecutive filtered events are not returned. The first value that would be filtered out is returned with its time and the enumeration value \&quot;Filtered\&quot;. The next value in the collection will be the next compressed value in the specified direction that passes the filter criteria - if any. When both boundaryType and a filterExpression are specified, the events returned for the boundary condition specified are passed through the filter. If the includeFilteredValues parameter is true, the boundary values will be reported at the proper timestamps with the enumeration value \&quot;Filtered\&quot; when the filter conditions are not met at the boundary time. If the includeFilteredValues parameter is false for this case, no event is returned for the boundary time. Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.   If only recorded values with annotations are desired, the filterExpression parameter should include the filter IsSet(&#39;.&#39;, \&quot;a\&quot;).
     * @param webId The ID of the stream. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Annotations to return events with annotation values. If this parameter is not specified, annotation values are not returned. (optional)
     * @param boundaryType An optional value that determines how the times and values of the returned end points are determined. The default is &#39;Inside&#39;. (optional)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param maxCount The maximum number of values to be returned. The default is 1000. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @return ApiResponse&lt;ExtendedTimedValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support the method, or the supplied filter expression is unsupported, or the desired units of measure are incompatible, or an unsupported association was specified. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtendedTimedValues> streamGetRecordedWithHttpInfo(String webId, String associations, String boundaryType, String desiredUnits, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String selectedFields, String startTime, String timeZone) throws ApiException {
        okhttp3.Call localVarCall = streamGetRecordedValidateBeforeCall(webId, associations, boundaryType, desiredUnits, endTime, filterExpression, includeFilteredValues, maxCount, selectedFields, startTime, timeZone, null);
        Type localVarReturnType = new TypeToken<ExtendedTimedValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of compressed values for the requested time range from the source provider. (asynchronously)
     * Returned times are affected by the specified boundary type. If no values are found for the time range and conditions specified then the HTTP response will be success, with a body containing an empty array of Items. When specifying true for the includeFilteredValues parameter, consecutive filtered events are not returned. The first value that would be filtered out is returned with its time and the enumeration value \&quot;Filtered\&quot;. The next value in the collection will be the next compressed value in the specified direction that passes the filter criteria - if any. When both boundaryType and a filterExpression are specified, the events returned for the boundary condition specified are passed through the filter. If the includeFilteredValues parameter is true, the boundary values will be reported at the proper timestamps with the enumeration value \&quot;Filtered\&quot; when the filter conditions are not met at the boundary time. If the includeFilteredValues parameter is false for this case, no event is returned for the boundary time. Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.   If only recorded values with annotations are desired, the filterExpression parameter should include the filter IsSet(&#39;.&#39;, \&quot;a\&quot;).
     * @param webId The ID of the stream. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Annotations to return events with annotation values. If this parameter is not specified, annotation values are not returned. (optional)
     * @param boundaryType An optional value that determines how the times and values of the returned end points are determined. The default is &#39;Inside&#39;. (optional)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param maxCount The maximum number of values to be returned. The default is 1000. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support the method, or the supplied filter expression is unsupported, or the desired units of measure are incompatible, or an unsupported association was specified. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetRecordedAsync(String webId, String associations, String boundaryType, String desiredUnits, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String selectedFields, String startTime, String timeZone, final ApiCallback<ExtendedTimedValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamGetRecordedValidateBeforeCall(webId, associations, boundaryType, desiredUnits, endTime, filterExpression, includeFilteredValues, maxCount, selectedFields, startTime, timeZone, _callback);
        Type localVarReturnType = new TypeToken<ExtendedTimedValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamGetRecordedAtTime
     * @param webId The ID of the stream. (required)
     * @param time The timestamp at which the value is desired. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Annotations to return events with annotation values. If this parameter is not specified, annotation values are not returned. (optional)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param retrievalMode An optional value that determines the value to return when a value doesn&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support the method, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetRecordedAtTimeCall(String webId, String time, String associations, String desiredUnits, String retrievalMode, String selectedFields, String timeZone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/{webId}/recordedattime"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (desiredUnits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desiredUnits", desiredUnits));
        }

        if (retrievalMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retrievalMode", retrievalMode));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamGetRecordedAtTimeValidateBeforeCall(String webId, String time, String associations, String desiredUnits, String retrievalMode, String selectedFields, String timeZone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamGetRecordedAtTime(Async)");
        }

        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling streamGetRecordedAtTime(Async)");
        }

        return streamGetRecordedAtTimeCall(webId, time, associations, desiredUnits, retrievalMode, selectedFields, timeZone, _callback);

    }

    /**
     * Returns a single recorded value based on the passed time and retrieval mode from the stream.
     * If only recorded values with annotations are desired, the filterExpression parameter should include the filter IsSet(&#39;.&#39;, \&quot;a\&quot;).
     * @param webId The ID of the stream. (required)
     * @param time The timestamp at which the value is desired. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Annotations to return events with annotation values. If this parameter is not specified, annotation values are not returned. (optional)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param retrievalMode An optional value that determines the value to return when a value doesn&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @return ExtendedTimedValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support the method, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public ExtendedTimedValue streamGetRecordedAtTime(String webId, String time, String associations, String desiredUnits, String retrievalMode, String selectedFields, String timeZone) throws ApiException {
        ApiResponse<ExtendedTimedValue> localVarResp = streamGetRecordedAtTimeWithHttpInfo(webId, time, associations, desiredUnits, retrievalMode, selectedFields, timeZone);
        return localVarResp.getData();
    }

    /**
     * Returns a single recorded value based on the passed time and retrieval mode from the stream.
     * If only recorded values with annotations are desired, the filterExpression parameter should include the filter IsSet(&#39;.&#39;, \&quot;a\&quot;).
     * @param webId The ID of the stream. (required)
     * @param time The timestamp at which the value is desired. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Annotations to return events with annotation values. If this parameter is not specified, annotation values are not returned. (optional)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param retrievalMode An optional value that determines the value to return when a value doesn&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @return ApiResponse&lt;ExtendedTimedValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support the method, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtendedTimedValue> streamGetRecordedAtTimeWithHttpInfo(String webId, String time, String associations, String desiredUnits, String retrievalMode, String selectedFields, String timeZone) throws ApiException {
        okhttp3.Call localVarCall = streamGetRecordedAtTimeValidateBeforeCall(webId, time, associations, desiredUnits, retrievalMode, selectedFields, timeZone, null);
        Type localVarReturnType = new TypeToken<ExtendedTimedValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a single recorded value based on the passed time and retrieval mode from the stream. (asynchronously)
     * If only recorded values with annotations are desired, the filterExpression parameter should include the filter IsSet(&#39;.&#39;, \&quot;a\&quot;).
     * @param webId The ID of the stream. (required)
     * @param time The timestamp at which the value is desired. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Annotations to return events with annotation values. If this parameter is not specified, annotation values are not returned. (optional)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param retrievalMode An optional value that determines the value to return when a value doesn&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support the method, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetRecordedAtTimeAsync(String webId, String time, String associations, String desiredUnits, String retrievalMode, String selectedFields, String timeZone, final ApiCallback<ExtendedTimedValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamGetRecordedAtTimeValidateBeforeCall(webId, time, associations, desiredUnits, retrievalMode, selectedFields, timeZone, _callback);
        Type localVarReturnType = new TypeToken<ExtendedTimedValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamGetRecordedAtTimes
     * @param webId The ID of the stream. (required)
     * @param time The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Annotations to return events with annotation values. If this parameter is not specified, annotation values are not returned. (optional)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param retrievalMode An optional value that determines the value to return when a value doesn&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetRecordedAtTimesCall(String webId, List<String> time, String associations, String desiredUnits, String retrievalMode, String selectedFields, String sortOrder, String timeZone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/{webId}/recordedattimes"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (time != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "time", time));
        }

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (desiredUnits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desiredUnits", desiredUnits));
        }

        if (retrievalMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retrievalMode", retrievalMode));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamGetRecordedAtTimesValidateBeforeCall(String webId, List<String> time, String associations, String desiredUnits, String retrievalMode, String selectedFields, String sortOrder, String timeZone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamGetRecordedAtTimes(Async)");
        }

        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling streamGetRecordedAtTimes(Async)");
        }

        return streamGetRecordedAtTimesCall(webId, time, associations, desiredUnits, retrievalMode, selectedFields, sortOrder, timeZone, _callback);

    }

    /**
     * Retrieves recorded values at the specified times.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.   If only recorded values with annotations are desired, the filterExpression parameter should include the filter IsSet(&#39;.&#39;, \&quot;a\&quot;).
     * @param webId The ID of the stream. (required)
     * @param time The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Annotations to return events with annotation values. If this parameter is not specified, annotation values are not returned. (optional)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param retrievalMode An optional value that determines the value to return when a value doesn&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @return ExtendedTimedValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public ExtendedTimedValues streamGetRecordedAtTimes(String webId, List<String> time, String associations, String desiredUnits, String retrievalMode, String selectedFields, String sortOrder, String timeZone) throws ApiException {
        ApiResponse<ExtendedTimedValues> localVarResp = streamGetRecordedAtTimesWithHttpInfo(webId, time, associations, desiredUnits, retrievalMode, selectedFields, sortOrder, timeZone);
        return localVarResp.getData();
    }

    /**
     * Retrieves recorded values at the specified times.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.   If only recorded values with annotations are desired, the filterExpression parameter should include the filter IsSet(&#39;.&#39;, \&quot;a\&quot;).
     * @param webId The ID of the stream. (required)
     * @param time The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Annotations to return events with annotation values. If this parameter is not specified, annotation values are not returned. (optional)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param retrievalMode An optional value that determines the value to return when a value doesn&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @return ApiResponse&lt;ExtendedTimedValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtendedTimedValues> streamGetRecordedAtTimesWithHttpInfo(String webId, List<String> time, String associations, String desiredUnits, String retrievalMode, String selectedFields, String sortOrder, String timeZone) throws ApiException {
        okhttp3.Call localVarCall = streamGetRecordedAtTimesValidateBeforeCall(webId, time, associations, desiredUnits, retrievalMode, selectedFields, sortOrder, timeZone, null);
        Type localVarReturnType = new TypeToken<ExtendedTimedValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves recorded values at the specified times. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.   If only recorded values with annotations are desired, the filterExpression parameter should include the filter IsSet(&#39;.&#39;, \&quot;a\&quot;).
     * @param webId The ID of the stream. (required)
     * @param time The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Annotations to return events with annotation values. If this parameter is not specified, annotation values are not returned. (optional)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param retrievalMode An optional value that determines the value to return when a value doesn&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The values that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetRecordedAtTimesAsync(String webId, List<String> time, String associations, String desiredUnits, String retrievalMode, String selectedFields, String sortOrder, String timeZone, final ApiCallback<ExtendedTimedValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamGetRecordedAtTimesValidateBeforeCall(webId, time, associations, desiredUnits, retrievalMode, selectedFields, sortOrder, timeZone, _callback);
        Type localVarReturnType = new TypeToken<ExtendedTimedValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamGetSummary
     * @param webId The ID of the stream. (required)
     * @param calculationBasis Specifies the method of evaluating the data over the time range. The default is &#39;TimeWeighted&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression A string containing a filter expression. Expression variables are relative to the attribute. Use &#39;.&#39; to reference the containing attribute. (optional)
     * @param sampleInterval When the sampleType is Interval, sampleInterval specifies how often the filter expression is evaluated when computing the summary for an interval. (optional)
     * @param sampleType Defines the evaluation of an expression over a time range. The default is &#39;ExpressionRecordedValues&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param summaryDuration The duration of each summary interval. If specified in hours, minutes, seconds, or milliseconds, the summary durations will be evenly spaced UTC time intervals. Longer interval types are interpreted using wall clock rules and are time zone dependent. (optional)
     * @param summaryType Specifies the kinds of summaries to produce over the range. The default is &#39;Total&#39;. Multiple summary types may be specified by using multiple instances of summaryType. (optional)
     * @param timeType Specifies how to calculate the timestamp for each interval. The default is &#39;Auto&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The summaries that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetSummaryCall(String webId, String calculationBasis, String endTime, String filterExpression, String sampleInterval, String sampleType, String selectedFields, String startTime, String summaryDuration, List<String> summaryType, String timeType, String timeZone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/{webId}/summary"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (calculationBasis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculationBasis", calculationBasis));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (filterExpression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterExpression", filterExpression));
        }

        if (sampleInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sampleInterval", sampleInterval));
        }

        if (sampleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sampleType", sampleType));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (summaryDuration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summaryDuration", summaryDuration));
        }

        if (summaryType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "summaryType", summaryType));
        }

        if (timeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeType", timeType));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamGetSummaryValidateBeforeCall(String webId, String calculationBasis, String endTime, String filterExpression, String sampleInterval, String sampleType, String selectedFields, String startTime, String summaryDuration, List<String> summaryType, String timeType, String timeZone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamGetSummary(Async)");
        }

        return streamGetSummaryCall(webId, calculationBasis, endTime, filterExpression, sampleInterval, sampleType, selectedFields, startTime, summaryDuration, summaryType, timeType, timeZone, _callback);

    }

    /**
     * Returns a summary over the specified time range for the stream.
     * Count is the only summary type supported on non-numeric streams. Requesting a summary for any other type will generate an error. Time-weighted totals are computed by integrating the rate tag values over the requested time range. If some of the data are bad in the time range, the calculated total is divided by the fraction of the time period for which there are good values. This approach is equivalent to assuming that during the period of bad data, the tag takes on the average values for the entire calculation time range. The PercentGood summary may be used to determine if the calculation results are suitable for the application&#39;s purposes. For time-weighted totals, if the time unit rate of the stream cannot be determined, then the value will be totaled assuming a unit of \&quot;per day\&quot; and no unit of measure will be assigned to the value. If the measured time component of the tag is not based on a day, the user of the data must convert the totalized value to the correct units.
     * @param webId The ID of the stream. (required)
     * @param calculationBasis Specifies the method of evaluating the data over the time range. The default is &#39;TimeWeighted&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression A string containing a filter expression. Expression variables are relative to the attribute. Use &#39;.&#39; to reference the containing attribute. (optional)
     * @param sampleInterval When the sampleType is Interval, sampleInterval specifies how often the filter expression is evaluated when computing the summary for an interval. (optional)
     * @param sampleType Defines the evaluation of an expression over a time range. The default is &#39;ExpressionRecordedValues&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param summaryDuration The duration of each summary interval. If specified in hours, minutes, seconds, or milliseconds, the summary durations will be evenly spaced UTC time intervals. Longer interval types are interpreted using wall clock rules and are time zone dependent. (optional)
     * @param summaryType Specifies the kinds of summaries to produce over the range. The default is &#39;Total&#39;. Multiple summary types may be specified by using multiple instances of summaryType. (optional)
     * @param timeType Specifies how to calculate the timestamp for each interval. The default is &#39;Auto&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @return ItemsSummaryValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The summaries that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsSummaryValue streamGetSummary(String webId, String calculationBasis, String endTime, String filterExpression, String sampleInterval, String sampleType, String selectedFields, String startTime, String summaryDuration, List<String> summaryType, String timeType, String timeZone) throws ApiException {
        ApiResponse<ItemsSummaryValue> localVarResp = streamGetSummaryWithHttpInfo(webId, calculationBasis, endTime, filterExpression, sampleInterval, sampleType, selectedFields, startTime, summaryDuration, summaryType, timeType, timeZone);
        return localVarResp.getData();
    }

    /**
     * Returns a summary over the specified time range for the stream.
     * Count is the only summary type supported on non-numeric streams. Requesting a summary for any other type will generate an error. Time-weighted totals are computed by integrating the rate tag values over the requested time range. If some of the data are bad in the time range, the calculated total is divided by the fraction of the time period for which there are good values. This approach is equivalent to assuming that during the period of bad data, the tag takes on the average values for the entire calculation time range. The PercentGood summary may be used to determine if the calculation results are suitable for the application&#39;s purposes. For time-weighted totals, if the time unit rate of the stream cannot be determined, then the value will be totaled assuming a unit of \&quot;per day\&quot; and no unit of measure will be assigned to the value. If the measured time component of the tag is not based on a day, the user of the data must convert the totalized value to the correct units.
     * @param webId The ID of the stream. (required)
     * @param calculationBasis Specifies the method of evaluating the data over the time range. The default is &#39;TimeWeighted&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression A string containing a filter expression. Expression variables are relative to the attribute. Use &#39;.&#39; to reference the containing attribute. (optional)
     * @param sampleInterval When the sampleType is Interval, sampleInterval specifies how often the filter expression is evaluated when computing the summary for an interval. (optional)
     * @param sampleType Defines the evaluation of an expression over a time range. The default is &#39;ExpressionRecordedValues&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param summaryDuration The duration of each summary interval. If specified in hours, minutes, seconds, or milliseconds, the summary durations will be evenly spaced UTC time intervals. Longer interval types are interpreted using wall clock rules and are time zone dependent. (optional)
     * @param summaryType Specifies the kinds of summaries to produce over the range. The default is &#39;Total&#39;. Multiple summary types may be specified by using multiple instances of summaryType. (optional)
     * @param timeType Specifies how to calculate the timestamp for each interval. The default is &#39;Auto&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @return ApiResponse&lt;ItemsSummaryValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The summaries that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsSummaryValue> streamGetSummaryWithHttpInfo(String webId, String calculationBasis, String endTime, String filterExpression, String sampleInterval, String sampleType, String selectedFields, String startTime, String summaryDuration, List<String> summaryType, String timeType, String timeZone) throws ApiException {
        okhttp3.Call localVarCall = streamGetSummaryValidateBeforeCall(webId, calculationBasis, endTime, filterExpression, sampleInterval, sampleType, selectedFields, startTime, summaryDuration, summaryType, timeType, timeZone, null);
        Type localVarReturnType = new TypeToken<ItemsSummaryValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a summary over the specified time range for the stream. (asynchronously)
     * Count is the only summary type supported on non-numeric streams. Requesting a summary for any other type will generate an error. Time-weighted totals are computed by integrating the rate tag values over the requested time range. If some of the data are bad in the time range, the calculated total is divided by the fraction of the time period for which there are good values. This approach is equivalent to assuming that during the period of bad data, the tag takes on the average values for the entire calculation time range. The PercentGood summary may be used to determine if the calculation results are suitable for the application&#39;s purposes. For time-weighted totals, if the time unit rate of the stream cannot be determined, then the value will be totaled assuming a unit of \&quot;per day\&quot; and no unit of measure will be assigned to the value. If the measured time component of the tag is not based on a day, the user of the data must convert the totalized value to the correct units.
     * @param webId The ID of the stream. (required)
     * @param calculationBasis Specifies the method of evaluating the data over the time range. The default is &#39;TimeWeighted&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression A string containing a filter expression. Expression variables are relative to the attribute. Use &#39;.&#39; to reference the containing attribute. (optional)
     * @param sampleInterval When the sampleType is Interval, sampleInterval specifies how often the filter expression is evaluated when computing the summary for an interval. (optional)
     * @param sampleType Defines the evaluation of an expression over a time range. The default is &#39;ExpressionRecordedValues&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param summaryDuration The duration of each summary interval. If specified in hours, minutes, seconds, or milliseconds, the summary durations will be evenly spaced UTC time intervals. Longer interval types are interpreted using wall clock rules and are time zone dependent. (optional)
     * @param summaryType Specifies the kinds of summaries to produce over the range. The default is &#39;Total&#39;. Multiple summary types may be specified by using multiple instances of summaryType. (optional)
     * @param timeType Specifies how to calculate the timestamp for each interval. The default is &#39;Auto&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The summaries that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetSummaryAsync(String webId, String calculationBasis, String endTime, String filterExpression, String sampleInterval, String sampleType, String selectedFields, String startTime, String summaryDuration, List<String> summaryType, String timeType, String timeZone, final ApiCallback<ItemsSummaryValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamGetSummaryValidateBeforeCall(webId, calculationBasis, endTime, filterExpression, sampleInterval, sampleType, selectedFields, startTime, summaryDuration, summaryType, timeType, timeZone, _callback);
        Type localVarReturnType = new TypeToken<ItemsSummaryValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamGetValue
     * @param webId The ID of the stream. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param time An optional time. The default time context is determined from the owning object - for example, the time range of the event frame or transfer which holds this attribute. Otherwise, the implementation of the Data Reference determines the meaning of no context. For Points or simply configured PI Point Data References, this means the snapshot value of the PI Point on the Data Server. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value at the specified time value. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support the method, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetValueCall(String webId, String desiredUnits, String selectedFields, String time, String timeZone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/{webId}/value"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (desiredUnits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desiredUnits", desiredUnits));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamGetValueValidateBeforeCall(String webId, String desiredUnits, String selectedFields, String time, String timeZone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamGetValue(Async)");
        }

        return streamGetValueCall(webId, desiredUnits, selectedFields, time, timeZone, _callback);

    }

    /**
     * Returns the value of the stream at the specified time. By default, this is usually the current value.
     * 
     * @param webId The ID of the stream. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param time An optional time. The default time context is determined from the owning object - for example, the time range of the event frame or transfer which holds this attribute. Otherwise, the implementation of the Data Reference determines the meaning of no context. For Points or simply configured PI Point Data References, this means the snapshot value of the PI Point on the Data Server. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @return TimedValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value at the specified time value. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support the method, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public TimedValue streamGetValue(String webId, String desiredUnits, String selectedFields, String time, String timeZone) throws ApiException {
        ApiResponse<TimedValue> localVarResp = streamGetValueWithHttpInfo(webId, desiredUnits, selectedFields, time, timeZone);
        return localVarResp.getData();
    }

    /**
     * Returns the value of the stream at the specified time. By default, this is usually the current value.
     * 
     * @param webId The ID of the stream. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param time An optional time. The default time context is determined from the owning object - for example, the time range of the event frame or transfer which holds this attribute. Otherwise, the implementation of the Data Reference determines the meaning of no context. For Points or simply configured PI Point Data References, this means the snapshot value of the PI Point on the Data Server. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @return ApiResponse&lt;TimedValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value at the specified time value. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support the method, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimedValue> streamGetValueWithHttpInfo(String webId, String desiredUnits, String selectedFields, String time, String timeZone) throws ApiException {
        okhttp3.Call localVarCall = streamGetValueValidateBeforeCall(webId, desiredUnits, selectedFields, time, timeZone, null);
        Type localVarReturnType = new TypeToken<TimedValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the value of the stream at the specified time. By default, this is usually the current value. (asynchronously)
     * 
     * @param webId The ID of the stream. (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param time An optional time. The default time context is determined from the owning object - for example, the time range of the event frame or transfer which holds this attribute. Otherwise, the implementation of the Data Reference determines the meaning of no context. For Points or simply configured PI Point Data References, this means the snapshot value of the PI Point on the Data Server. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value at the specified time value. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support the method, or the desired units of measure are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamGetValueAsync(String webId, String desiredUnits, String selectedFields, String time, String timeZone, final ApiCallback<TimedValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamGetValueValidateBeforeCall(webId, desiredUnits, selectedFields, time, timeZone, _callback);
        Type localVarReturnType = new TypeToken<TimedValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamRegisterStreamUpdate
     * @param webId The ID of the stream. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful registration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid webId </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> WebId represents a static attribute </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamRegisterStreamUpdateCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/{webId}/updates"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamRegisterStreamUpdateValidateBeforeCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamRegisterStreamUpdate(Async)");
        }

        return streamRegisterStreamUpdateCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Register for stream updates
     * The supplied webId will register for stream updates. For a 201 or 204 response, the returned location header will contain the url for retrieving the next set of stream updates.
     * @param webId The ID of the stream. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return StreamUpdatesRegister
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful registration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid webId </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> WebId represents a static attribute </td><td>  -  </td></tr>
     </table>
     */
    public StreamUpdatesRegister streamRegisterStreamUpdate(String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<StreamUpdatesRegister> localVarResp = streamRegisterStreamUpdateWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Register for stream updates
     * The supplied webId will register for stream updates. For a 201 or 204 response, the returned location header will contain the url for retrieving the next set of stream updates.
     * @param webId The ID of the stream. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;StreamUpdatesRegister&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful registration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid webId </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> WebId represents a static attribute </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamUpdatesRegister> streamRegisterStreamUpdateWithHttpInfo(String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamRegisterStreamUpdateValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<StreamUpdatesRegister>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register for stream updates (asynchronously)
     * The supplied webId will register for stream updates. For a 201 or 204 response, the returned location header will contain the url for retrieving the next set of stream updates.
     * @param webId The ID of the stream. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful registration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid webId </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> WebId represents a static attribute </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamRegisterStreamUpdateAsync(String webId, String selectedFields, String webIdType, final ApiCallback<StreamUpdatesRegister> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamRegisterStreamUpdateValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<StreamUpdatesRegister>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamRetrieveStreamUpdate
     * @param marker Identifier of stream source and current position (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stream updates have been successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cache not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid marker supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamRetrieveStreamUpdateCall(String marker, String desiredUnits, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/updates/{marker}"
            .replace("{" + "marker" + "}", localVarApiClient.escapeString(marker.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (desiredUnits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desiredUnits", desiredUnits));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamRetrieveStreamUpdateValidateBeforeCall(String marker, String desiredUnits, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marker' is set
        if (marker == null) {
            throw new ApiException("Missing the required parameter 'marker' when calling streamRetrieveStreamUpdate(Async)");
        }

        return streamRetrieveStreamUpdateCall(marker, desiredUnits, selectedFields, webIdType, _callback);

    }

    /**
     * Receive stream updates
     * The supplied marker will identify the set of stream updates to retrieve. For a 200 response, the returned location header will contain the url for retrieving the stream updates.
     * @param marker Identifier of stream source and current position (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return StreamUpdatesRetrieve
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stream updates have been successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cache not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid marker supplied </td><td>  -  </td></tr>
     </table>
     */
    public StreamUpdatesRetrieve streamRetrieveStreamUpdate(String marker, String desiredUnits, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<StreamUpdatesRetrieve> localVarResp = streamRetrieveStreamUpdateWithHttpInfo(marker, desiredUnits, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Receive stream updates
     * The supplied marker will identify the set of stream updates to retrieve. For a 200 response, the returned location header will contain the url for retrieving the stream updates.
     * @param marker Identifier of stream source and current position (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;StreamUpdatesRetrieve&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stream updates have been successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cache not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid marker supplied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamUpdatesRetrieve> streamRetrieveStreamUpdateWithHttpInfo(String marker, String desiredUnits, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamRetrieveStreamUpdateValidateBeforeCall(marker, desiredUnits, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<StreamUpdatesRetrieve>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Receive stream updates (asynchronously)
     * The supplied marker will identify the set of stream updates to retrieve. For a 200 response, the returned location header will contain the url for retrieving the stream updates.
     * @param marker Identifier of stream source and current position (required)
     * @param desiredUnits The name or abbreviation of the desired units of measure for the returned value, as found in the UOM database associated with the attribute. If not specified for an attribute, the attribute&#39;s default unit of measure is used. If the underlying stream is a point, this value may not be specified, as points are not associated with a unit of measure. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stream updates have been successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Cache not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid marker supplied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamRetrieveStreamUpdateAsync(String marker, String desiredUnits, String selectedFields, String webIdType, final ApiCallback<StreamUpdatesRetrieve> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamRetrieveStreamUpdateValidateBeforeCall(marker, desiredUnits, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<StreamUpdatesRetrieve>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamUpdateValue
     * @param webId The ID of the stream. (required)
     * @param value The value to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. This parameter is ignored if the attribute is a configuration item. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The value was accepted for a potential buffered update. The response&#39;s Location header is a link that can be used to examine the result. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The update operation was successfully applied. The response&#39;s Location header is a link that can be used to examine the result. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attribute or data reference does not support this operation, or the specified units are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamUpdateValueCall(String webId, TimedValue value, String bufferOption, String updateOption, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/streams/{webId}/value"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bufferOption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bufferOption", bufferOption));
        }

        if (updateOption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateOption", updateOption));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamUpdateValueValidateBeforeCall(String webId, TimedValue value, String bufferOption, String updateOption, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamUpdateValue(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling streamUpdateValue(Async)");
        }

        return streamUpdateValueCall(webId, value, bufferOption, updateOption, webIdType, _callback);

    }

    /**
     * Updates a value for the specified stream.
     * 
     * @param webId The ID of the stream. (required)
     * @param value The value to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. This parameter is ignored if the attribute is a configuration item. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The value was accepted for a potential buffered update. The response&#39;s Location header is a link that can be used to examine the result. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The update operation was successfully applied. The response&#39;s Location header is a link that can be used to examine the result. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attribute or data reference does not support this operation, or the specified units are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public void streamUpdateValue(String webId, TimedValue value, String bufferOption, String updateOption, String webIdType) throws ApiException {
        streamUpdateValueWithHttpInfo(webId, value, bufferOption, updateOption, webIdType);
    }

    /**
     * Updates a value for the specified stream.
     * 
     * @param webId The ID of the stream. (required)
     * @param value The value to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. This parameter is ignored if the attribute is a configuration item. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The value was accepted for a potential buffered update. The response&#39;s Location header is a link that can be used to examine the result. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The update operation was successfully applied. The response&#39;s Location header is a link that can be used to examine the result. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attribute or data reference does not support this operation, or the specified units are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> streamUpdateValueWithHttpInfo(String webId, TimedValue value, String bufferOption, String updateOption, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamUpdateValueValidateBeforeCall(webId, value, bufferOption, updateOption, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates a value for the specified stream. (asynchronously)
     * 
     * @param webId The ID of the stream. (required)
     * @param value The value to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. This parameter is ignored if the attribute is a configuration item. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The value was accepted for a potential buffered update. The response&#39;s Location header is a link that can be used to examine the result. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The update operation was successfully applied. The response&#39;s Location header is a link that can be used to examine the result. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The attribute or data reference does not support this operation, or the specified units are incompatible. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamUpdateValueAsync(String webId, TimedValue value, String bufferOption, String updateOption, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamUpdateValueValidateBeforeCall(webId, value, bufferOption, updateOption, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamUpdateValues
     * @param webId The ID of the stream. (required)
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamUpdateValuesCall(String webId, List<TimedValue> values, String bufferOption, String updateOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = values;

        // create path and map variables
        String localVarPath = "/streams/{webId}/recorded"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bufferOption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bufferOption", bufferOption));
        }

        if (updateOption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateOption", updateOption));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamUpdateValuesValidateBeforeCall(String webId, List<TimedValue> values, String bufferOption, String updateOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamUpdateValues(Async)");
        }

        // verify the required parameter 'values' is set
        if (values == null) {
            throw new ApiException("Missing the required parameter 'values' when calling streamUpdateValues(Async)");
        }

        return streamUpdateValuesCall(webId, values, bufferOption, updateOption, _callback);

    }

    /**
     * Updates multiple values for the specified stream.
     * 
     * @param webId The ID of the stream. (required)
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @return ItemsSubstatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this operation. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsSubstatus streamUpdateValues(String webId, List<TimedValue> values, String bufferOption, String updateOption) throws ApiException {
        ApiResponse<ItemsSubstatus> localVarResp = streamUpdateValuesWithHttpInfo(webId, values, bufferOption, updateOption);
        return localVarResp.getData();
    }

    /**
     * Updates multiple values for the specified stream.
     * 
     * @param webId The ID of the stream. (required)
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @return ApiResponse&lt;ItemsSubstatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this operation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsSubstatus> streamUpdateValuesWithHttpInfo(String webId, List<TimedValue> values, String bufferOption, String updateOption) throws ApiException {
        okhttp3.Call localVarCall = streamUpdateValuesValidateBeforeCall(webId, values, bufferOption, updateOption, null);
        Type localVarReturnType = new TypeToken<ItemsSubstatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates multiple values for the specified stream. (asynchronously)
     * 
     * @param webId The ID of the stream. (required)
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The data reference does not support this operation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamUpdateValuesAsync(String webId, List<TimedValue> values, String bufferOption, String updateOption, final ApiCallback<ItemsSubstatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamUpdateValuesValidateBeforeCall(webId, values, bufferOption, updateOption, _callback);
        Type localVarReturnType = new TypeToken<ItemsSubstatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
