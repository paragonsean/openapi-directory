/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AttributeTemplateLinks;
import org.openapitools.client.model.WebException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AttributeTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttributeTemplate {
  public static final String SERIALIZED_NAME_CATEGORY_NAMES = "CategoryNames";
  @SerializedName(SERIALIZED_NAME_CATEGORY_NAMES)
  private List<String> categoryNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIG_STRING = "ConfigString";
  @SerializedName(SERIALIZED_NAME_CONFIG_STRING)
  private String configString;

  public static final String SERIALIZED_NAME_DATA_REFERENCE_PLUG_IN = "DataReferencePlugIn";
  @SerializedName(SERIALIZED_NAME_DATA_REFERENCE_PLUG_IN)
  private String dataReferencePlugIn;

  public static final String SERIALIZED_NAME_DEFAULT_UNITS_NAME = "DefaultUnitsName";
  @SerializedName(SERIALIZED_NAME_DEFAULT_UNITS_NAME)
  private String defaultUnitsName;

  public static final String SERIALIZED_NAME_DEFAULT_UNITS_NAME_ABBREVIATION = "DefaultUnitsNameAbbreviation";
  @SerializedName(SERIALIZED_NAME_DEFAULT_UNITS_NAME_ABBREVIATION)
  private String defaultUnitsNameAbbreviation;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "DefaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private Object defaultValue;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HAS_CHILDREN = "HasChildren";
  @SerializedName(SERIALIZED_NAME_HAS_CHILDREN)
  private Boolean hasChildren;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IS_CONFIGURATION_ITEM = "IsConfigurationItem";
  @SerializedName(SERIALIZED_NAME_IS_CONFIGURATION_ITEM)
  private Boolean isConfigurationItem;

  public static final String SERIALIZED_NAME_IS_EXCLUDED = "IsExcluded";
  @SerializedName(SERIALIZED_NAME_IS_EXCLUDED)
  private Boolean isExcluded;

  public static final String SERIALIZED_NAME_IS_HIDDEN = "IsHidden";
  @SerializedName(SERIALIZED_NAME_IS_HIDDEN)
  private Boolean isHidden;

  public static final String SERIALIZED_NAME_IS_MANUAL_DATA_ENTRY = "IsManualDataEntry";
  @SerializedName(SERIALIZED_NAME_IS_MANUAL_DATA_ENTRY)
  private Boolean isManualDataEntry;

  public static final String SERIALIZED_NAME_LINKS = "Links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private AttributeTemplateLinks links;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_TRAIT_NAME = "TraitName";
  @SerializedName(SERIALIZED_NAME_TRAIT_NAME)
  private String traitName;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TYPE_QUALIFIER = "TypeQualifier";
  @SerializedName(SERIALIZED_NAME_TYPE_QUALIFIER)
  private String typeQualifier;

  public static final String SERIALIZED_NAME_WEB_EXCEPTION = "WebException";
  @SerializedName(SERIALIZED_NAME_WEB_EXCEPTION)
  private WebException webException;

  public static final String SERIALIZED_NAME_WEB_ID = "WebId";
  @SerializedName(SERIALIZED_NAME_WEB_ID)
  private String webId;

  public AttributeTemplate() {
  }

  public AttributeTemplate categoryNames(List<String> categoryNames) {
    this.categoryNames = categoryNames;
    return this;
  }

  public AttributeTemplate addCategoryNamesItem(String categoryNamesItem) {
    if (this.categoryNames == null) {
      this.categoryNames = new ArrayList<>();
    }
    this.categoryNames.add(categoryNamesItem);
    return this;
  }

  /**
   * Get categoryNames
   * @return categoryNames
   */
  @javax.annotation.Nullable
  public List<String> getCategoryNames() {
    return categoryNames;
  }

  public void setCategoryNames(List<String> categoryNames) {
    this.categoryNames = categoryNames;
  }


  public AttributeTemplate configString(String configString) {
    this.configString = configString;
    return this;
  }

  /**
   * Get configString
   * @return configString
   */
  @javax.annotation.Nullable
  public String getConfigString() {
    return configString;
  }

  public void setConfigString(String configString) {
    this.configString = configString;
  }


  public AttributeTemplate dataReferencePlugIn(String dataReferencePlugIn) {
    this.dataReferencePlugIn = dataReferencePlugIn;
    return this;
  }

  /**
   * Get dataReferencePlugIn
   * @return dataReferencePlugIn
   */
  @javax.annotation.Nullable
  public String getDataReferencePlugIn() {
    return dataReferencePlugIn;
  }

  public void setDataReferencePlugIn(String dataReferencePlugIn) {
    this.dataReferencePlugIn = dataReferencePlugIn;
  }


  public AttributeTemplate defaultUnitsName(String defaultUnitsName) {
    this.defaultUnitsName = defaultUnitsName;
    return this;
  }

  /**
   * Get defaultUnitsName
   * @return defaultUnitsName
   */
  @javax.annotation.Nullable
  public String getDefaultUnitsName() {
    return defaultUnitsName;
  }

  public void setDefaultUnitsName(String defaultUnitsName) {
    this.defaultUnitsName = defaultUnitsName;
  }


  public AttributeTemplate defaultUnitsNameAbbreviation(String defaultUnitsNameAbbreviation) {
    this.defaultUnitsNameAbbreviation = defaultUnitsNameAbbreviation;
    return this;
  }

  /**
   * Get defaultUnitsNameAbbreviation
   * @return defaultUnitsNameAbbreviation
   */
  @javax.annotation.Nullable
  public String getDefaultUnitsNameAbbreviation() {
    return defaultUnitsNameAbbreviation;
  }

  public void setDefaultUnitsNameAbbreviation(String defaultUnitsNameAbbreviation) {
    this.defaultUnitsNameAbbreviation = defaultUnitsNameAbbreviation;
  }


  public AttributeTemplate defaultValue(Object defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Get defaultValue
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public Object getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(Object defaultValue) {
    this.defaultValue = defaultValue;
  }


  public AttributeTemplate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AttributeTemplate hasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
    return this;
  }

  /**
   * Get hasChildren
   * @return hasChildren
   */
  @javax.annotation.Nullable
  public Boolean getHasChildren() {
    return hasChildren;
  }

  public void setHasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
  }


  public AttributeTemplate id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public AttributeTemplate isConfigurationItem(Boolean isConfigurationItem) {
    this.isConfigurationItem = isConfigurationItem;
    return this;
  }

  /**
   * Get isConfigurationItem
   * @return isConfigurationItem
   */
  @javax.annotation.Nullable
  public Boolean getIsConfigurationItem() {
    return isConfigurationItem;
  }

  public void setIsConfigurationItem(Boolean isConfigurationItem) {
    this.isConfigurationItem = isConfigurationItem;
  }


  public AttributeTemplate isExcluded(Boolean isExcluded) {
    this.isExcluded = isExcluded;
    return this;
  }

  /**
   * Get isExcluded
   * @return isExcluded
   */
  @javax.annotation.Nullable
  public Boolean getIsExcluded() {
    return isExcluded;
  }

  public void setIsExcluded(Boolean isExcluded) {
    this.isExcluded = isExcluded;
  }


  public AttributeTemplate isHidden(Boolean isHidden) {
    this.isHidden = isHidden;
    return this;
  }

  /**
   * Get isHidden
   * @return isHidden
   */
  @javax.annotation.Nullable
  public Boolean getIsHidden() {
    return isHidden;
  }

  public void setIsHidden(Boolean isHidden) {
    this.isHidden = isHidden;
  }


  public AttributeTemplate isManualDataEntry(Boolean isManualDataEntry) {
    this.isManualDataEntry = isManualDataEntry;
    return this;
  }

  /**
   * Get isManualDataEntry
   * @return isManualDataEntry
   */
  @javax.annotation.Nullable
  public Boolean getIsManualDataEntry() {
    return isManualDataEntry;
  }

  public void setIsManualDataEntry(Boolean isManualDataEntry) {
    this.isManualDataEntry = isManualDataEntry;
  }


  public AttributeTemplate links(AttributeTemplateLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public AttributeTemplateLinks getLinks() {
    return links;
  }

  public void setLinks(AttributeTemplateLinks links) {
    this.links = links;
  }


  public AttributeTemplate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AttributeTemplate path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public AttributeTemplate traitName(String traitName) {
    this.traitName = traitName;
    return this;
  }

  /**
   * Get traitName
   * @return traitName
   */
  @javax.annotation.Nullable
  public String getTraitName() {
    return traitName;
  }

  public void setTraitName(String traitName) {
    this.traitName = traitName;
  }


  public AttributeTemplate type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public AttributeTemplate typeQualifier(String typeQualifier) {
    this.typeQualifier = typeQualifier;
    return this;
  }

  /**
   * Get typeQualifier
   * @return typeQualifier
   */
  @javax.annotation.Nullable
  public String getTypeQualifier() {
    return typeQualifier;
  }

  public void setTypeQualifier(String typeQualifier) {
    this.typeQualifier = typeQualifier;
  }


  public AttributeTemplate webException(WebException webException) {
    this.webException = webException;
    return this;
  }

  /**
   * Get webException
   * @return webException
   */
  @javax.annotation.Nullable
  public WebException getWebException() {
    return webException;
  }

  public void setWebException(WebException webException) {
    this.webException = webException;
  }


  public AttributeTemplate webId(String webId) {
    this.webId = webId;
    return this;
  }

  /**
   * Get webId
   * @return webId
   */
  @javax.annotation.Nullable
  public String getWebId() {
    return webId;
  }

  public void setWebId(String webId) {
    this.webId = webId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributeTemplate attributeTemplate = (AttributeTemplate) o;
    return Objects.equals(this.categoryNames, attributeTemplate.categoryNames) &&
        Objects.equals(this.configString, attributeTemplate.configString) &&
        Objects.equals(this.dataReferencePlugIn, attributeTemplate.dataReferencePlugIn) &&
        Objects.equals(this.defaultUnitsName, attributeTemplate.defaultUnitsName) &&
        Objects.equals(this.defaultUnitsNameAbbreviation, attributeTemplate.defaultUnitsNameAbbreviation) &&
        Objects.equals(this.defaultValue, attributeTemplate.defaultValue) &&
        Objects.equals(this.description, attributeTemplate.description) &&
        Objects.equals(this.hasChildren, attributeTemplate.hasChildren) &&
        Objects.equals(this.id, attributeTemplate.id) &&
        Objects.equals(this.isConfigurationItem, attributeTemplate.isConfigurationItem) &&
        Objects.equals(this.isExcluded, attributeTemplate.isExcluded) &&
        Objects.equals(this.isHidden, attributeTemplate.isHidden) &&
        Objects.equals(this.isManualDataEntry, attributeTemplate.isManualDataEntry) &&
        Objects.equals(this.links, attributeTemplate.links) &&
        Objects.equals(this.name, attributeTemplate.name) &&
        Objects.equals(this.path, attributeTemplate.path) &&
        Objects.equals(this.traitName, attributeTemplate.traitName) &&
        Objects.equals(this.type, attributeTemplate.type) &&
        Objects.equals(this.typeQualifier, attributeTemplate.typeQualifier) &&
        Objects.equals(this.webException, attributeTemplate.webException) &&
        Objects.equals(this.webId, attributeTemplate.webId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryNames, configString, dataReferencePlugIn, defaultUnitsName, defaultUnitsNameAbbreviation, defaultValue, description, hasChildren, id, isConfigurationItem, isExcluded, isHidden, isManualDataEntry, links, name, path, traitName, type, typeQualifier, webException, webId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributeTemplate {\n");
    sb.append("    categoryNames: ").append(toIndentedString(categoryNames)).append("\n");
    sb.append("    configString: ").append(toIndentedString(configString)).append("\n");
    sb.append("    dataReferencePlugIn: ").append(toIndentedString(dataReferencePlugIn)).append("\n");
    sb.append("    defaultUnitsName: ").append(toIndentedString(defaultUnitsName)).append("\n");
    sb.append("    defaultUnitsNameAbbreviation: ").append(toIndentedString(defaultUnitsNameAbbreviation)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hasChildren: ").append(toIndentedString(hasChildren)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isConfigurationItem: ").append(toIndentedString(isConfigurationItem)).append("\n");
    sb.append("    isExcluded: ").append(toIndentedString(isExcluded)).append("\n");
    sb.append("    isHidden: ").append(toIndentedString(isHidden)).append("\n");
    sb.append("    isManualDataEntry: ").append(toIndentedString(isManualDataEntry)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    traitName: ").append(toIndentedString(traitName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeQualifier: ").append(toIndentedString(typeQualifier)).append("\n");
    sb.append("    webException: ").append(toIndentedString(webException)).append("\n");
    sb.append("    webId: ").append(toIndentedString(webId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CategoryNames");
    openapiFields.add("ConfigString");
    openapiFields.add("DataReferencePlugIn");
    openapiFields.add("DefaultUnitsName");
    openapiFields.add("DefaultUnitsNameAbbreviation");
    openapiFields.add("DefaultValue");
    openapiFields.add("Description");
    openapiFields.add("HasChildren");
    openapiFields.add("Id");
    openapiFields.add("IsConfigurationItem");
    openapiFields.add("IsExcluded");
    openapiFields.add("IsHidden");
    openapiFields.add("IsManualDataEntry");
    openapiFields.add("Links");
    openapiFields.add("Name");
    openapiFields.add("Path");
    openapiFields.add("TraitName");
    openapiFields.add("Type");
    openapiFields.add("TypeQualifier");
    openapiFields.add("WebException");
    openapiFields.add("WebId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttributeTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttributeTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttributeTemplate is not found in the empty JSON string", AttributeTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttributeTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttributeTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("CategoryNames") != null && !jsonObj.get("CategoryNames").isJsonNull() && !jsonObj.get("CategoryNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoryNames` to be an array in the JSON string but got `%s`", jsonObj.get("CategoryNames").toString()));
      }
      if ((jsonObj.get("ConfigString") != null && !jsonObj.get("ConfigString").isJsonNull()) && !jsonObj.get("ConfigString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConfigString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConfigString").toString()));
      }
      if ((jsonObj.get("DataReferencePlugIn") != null && !jsonObj.get("DataReferencePlugIn").isJsonNull()) && !jsonObj.get("DataReferencePlugIn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DataReferencePlugIn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DataReferencePlugIn").toString()));
      }
      if ((jsonObj.get("DefaultUnitsName") != null && !jsonObj.get("DefaultUnitsName").isJsonNull()) && !jsonObj.get("DefaultUnitsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultUnitsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultUnitsName").toString()));
      }
      if ((jsonObj.get("DefaultUnitsNameAbbreviation") != null && !jsonObj.get("DefaultUnitsNameAbbreviation").isJsonNull()) && !jsonObj.get("DefaultUnitsNameAbbreviation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultUnitsNameAbbreviation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultUnitsNameAbbreviation").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      // validate the optional field `Links`
      if (jsonObj.get("Links") != null && !jsonObj.get("Links").isJsonNull()) {
        AttributeTemplateLinks.validateJsonElement(jsonObj.get("Links"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      if ((jsonObj.get("TraitName") != null && !jsonObj.get("TraitName").isJsonNull()) && !jsonObj.get("TraitName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TraitName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TraitName").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if ((jsonObj.get("TypeQualifier") != null && !jsonObj.get("TypeQualifier").isJsonNull()) && !jsonObj.get("TypeQualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TypeQualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TypeQualifier").toString()));
      }
      // validate the optional field `WebException`
      if (jsonObj.get("WebException") != null && !jsonObj.get("WebException").isJsonNull()) {
        WebException.validateJsonElement(jsonObj.get("WebException"));
      }
      if ((jsonObj.get("WebId") != null && !jsonObj.get("WebId").isJsonNull()) && !jsonObj.get("WebId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttributeTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttributeTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttributeTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttributeTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<AttributeTemplate>() {
           @Override
           public void write(JsonWriter out, AttributeTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttributeTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttributeTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttributeTemplate
   * @throws IOException if the JSON string is invalid with respect to AttributeTemplate
   */
  public static AttributeTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttributeTemplate.class);
  }

  /**
   * Convert an instance of AttributeTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

