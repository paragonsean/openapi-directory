/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.NotificationContactTemplateLinks;
import org.openapitools.client.model.WebException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NotificationContactTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationContactTemplate {
  public static final String SERIALIZED_NAME_AVAILABLE = "Available";
  @SerializedName(SERIALIZED_NAME_AVAILABLE)
  private Boolean available;

  public static final String SERIALIZED_NAME_CONFIG_STRING = "ConfigString";
  @SerializedName(SERIALIZED_NAME_CONFIG_STRING)
  private String configString;

  public static final String SERIALIZED_NAME_CONTACT_TYPE = "ContactType";
  @SerializedName(SERIALIZED_NAME_CONTACT_TYPE)
  private String contactType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ESCALATION_TIMEOUT = "EscalationTimeout";
  @SerializedName(SERIALIZED_NAME_ESCALATION_TIMEOUT)
  private String escalationTimeout;

  public static final String SERIALIZED_NAME_HAS_CHILDREN = "HasChildren";
  @SerializedName(SERIALIZED_NAME_HAS_CHILDREN)
  private Boolean hasChildren;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_LINKS = "Links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private NotificationContactTemplateLinks links;

  public static final String SERIALIZED_NAME_MAXIMUM_RETRIES = "MaximumRetries";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_RETRIES)
  private Integer maximumRetries;

  public static final String SERIALIZED_NAME_MINIMUM_ACKNOWLEDGEMENTS = "MinimumAcknowledgements";
  @SerializedName(SERIALIZED_NAME_MINIMUM_ACKNOWLEDGEMENTS)
  private Integer minimumAcknowledgements;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFY_WHEN_INSTANCE_ENDED = "NotifyWhenInstanceEnded";
  @SerializedName(SERIALIZED_NAME_NOTIFY_WHEN_INSTANCE_ENDED)
  private Boolean notifyWhenInstanceEnded;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PLUG_IN_NAME = "PlugInName";
  @SerializedName(SERIALIZED_NAME_PLUG_IN_NAME)
  private String plugInName;

  public static final String SERIALIZED_NAME_RETRY_INTERVAL = "RetryInterval";
  @SerializedName(SERIALIZED_NAME_RETRY_INTERVAL)
  private String retryInterval;

  public static final String SERIALIZED_NAME_WEB_EXCEPTION = "WebException";
  @SerializedName(SERIALIZED_NAME_WEB_EXCEPTION)
  private WebException webException;

  public static final String SERIALIZED_NAME_WEB_ID = "WebId";
  @SerializedName(SERIALIZED_NAME_WEB_ID)
  private String webId;

  public NotificationContactTemplate() {
  }

  public NotificationContactTemplate available(Boolean available) {
    this.available = available;
    return this;
  }

  /**
   * Get available
   * @return available
   */
  @javax.annotation.Nullable
  public Boolean getAvailable() {
    return available;
  }

  public void setAvailable(Boolean available) {
    this.available = available;
  }


  public NotificationContactTemplate configString(String configString) {
    this.configString = configString;
    return this;
  }

  /**
   * Get configString
   * @return configString
   */
  @javax.annotation.Nullable
  public String getConfigString() {
    return configString;
  }

  public void setConfigString(String configString) {
    this.configString = configString;
  }


  public NotificationContactTemplate contactType(String contactType) {
    this.contactType = contactType;
    return this;
  }

  /**
   * Get contactType
   * @return contactType
   */
  @javax.annotation.Nullable
  public String getContactType() {
    return contactType;
  }

  public void setContactType(String contactType) {
    this.contactType = contactType;
  }


  public NotificationContactTemplate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NotificationContactTemplate escalationTimeout(String escalationTimeout) {
    this.escalationTimeout = escalationTimeout;
    return this;
  }

  /**
   * Get escalationTimeout
   * @return escalationTimeout
   */
  @javax.annotation.Nullable
  public String getEscalationTimeout() {
    return escalationTimeout;
  }

  public void setEscalationTimeout(String escalationTimeout) {
    this.escalationTimeout = escalationTimeout;
  }


  public NotificationContactTemplate hasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
    return this;
  }

  /**
   * Get hasChildren
   * @return hasChildren
   */
  @javax.annotation.Nullable
  public Boolean getHasChildren() {
    return hasChildren;
  }

  public void setHasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
  }


  public NotificationContactTemplate id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public NotificationContactTemplate links(NotificationContactTemplateLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public NotificationContactTemplateLinks getLinks() {
    return links;
  }

  public void setLinks(NotificationContactTemplateLinks links) {
    this.links = links;
  }


  public NotificationContactTemplate maximumRetries(Integer maximumRetries) {
    this.maximumRetries = maximumRetries;
    return this;
  }

  /**
   * Get maximumRetries
   * @return maximumRetries
   */
  @javax.annotation.Nullable
  public Integer getMaximumRetries() {
    return maximumRetries;
  }

  public void setMaximumRetries(Integer maximumRetries) {
    this.maximumRetries = maximumRetries;
  }


  public NotificationContactTemplate minimumAcknowledgements(Integer minimumAcknowledgements) {
    this.minimumAcknowledgements = minimumAcknowledgements;
    return this;
  }

  /**
   * Get minimumAcknowledgements
   * @return minimumAcknowledgements
   */
  @javax.annotation.Nullable
  public Integer getMinimumAcknowledgements() {
    return minimumAcknowledgements;
  }

  public void setMinimumAcknowledgements(Integer minimumAcknowledgements) {
    this.minimumAcknowledgements = minimumAcknowledgements;
  }


  public NotificationContactTemplate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NotificationContactTemplate notifyWhenInstanceEnded(Boolean notifyWhenInstanceEnded) {
    this.notifyWhenInstanceEnded = notifyWhenInstanceEnded;
    return this;
  }

  /**
   * Get notifyWhenInstanceEnded
   * @return notifyWhenInstanceEnded
   */
  @javax.annotation.Nullable
  public Boolean getNotifyWhenInstanceEnded() {
    return notifyWhenInstanceEnded;
  }

  public void setNotifyWhenInstanceEnded(Boolean notifyWhenInstanceEnded) {
    this.notifyWhenInstanceEnded = notifyWhenInstanceEnded;
  }


  public NotificationContactTemplate path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public NotificationContactTemplate plugInName(String plugInName) {
    this.plugInName = plugInName;
    return this;
  }

  /**
   * Get plugInName
   * @return plugInName
   */
  @javax.annotation.Nullable
  public String getPlugInName() {
    return plugInName;
  }

  public void setPlugInName(String plugInName) {
    this.plugInName = plugInName;
  }


  public NotificationContactTemplate retryInterval(String retryInterval) {
    this.retryInterval = retryInterval;
    return this;
  }

  /**
   * Get retryInterval
   * @return retryInterval
   */
  @javax.annotation.Nullable
  public String getRetryInterval() {
    return retryInterval;
  }

  public void setRetryInterval(String retryInterval) {
    this.retryInterval = retryInterval;
  }


  public NotificationContactTemplate webException(WebException webException) {
    this.webException = webException;
    return this;
  }

  /**
   * Get webException
   * @return webException
   */
  @javax.annotation.Nullable
  public WebException getWebException() {
    return webException;
  }

  public void setWebException(WebException webException) {
    this.webException = webException;
  }


  public NotificationContactTemplate webId(String webId) {
    this.webId = webId;
    return this;
  }

  /**
   * Get webId
   * @return webId
   */
  @javax.annotation.Nullable
  public String getWebId() {
    return webId;
  }

  public void setWebId(String webId) {
    this.webId = webId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationContactTemplate notificationContactTemplate = (NotificationContactTemplate) o;
    return Objects.equals(this.available, notificationContactTemplate.available) &&
        Objects.equals(this.configString, notificationContactTemplate.configString) &&
        Objects.equals(this.contactType, notificationContactTemplate.contactType) &&
        Objects.equals(this.description, notificationContactTemplate.description) &&
        Objects.equals(this.escalationTimeout, notificationContactTemplate.escalationTimeout) &&
        Objects.equals(this.hasChildren, notificationContactTemplate.hasChildren) &&
        Objects.equals(this.id, notificationContactTemplate.id) &&
        Objects.equals(this.links, notificationContactTemplate.links) &&
        Objects.equals(this.maximumRetries, notificationContactTemplate.maximumRetries) &&
        Objects.equals(this.minimumAcknowledgements, notificationContactTemplate.minimumAcknowledgements) &&
        Objects.equals(this.name, notificationContactTemplate.name) &&
        Objects.equals(this.notifyWhenInstanceEnded, notificationContactTemplate.notifyWhenInstanceEnded) &&
        Objects.equals(this.path, notificationContactTemplate.path) &&
        Objects.equals(this.plugInName, notificationContactTemplate.plugInName) &&
        Objects.equals(this.retryInterval, notificationContactTemplate.retryInterval) &&
        Objects.equals(this.webException, notificationContactTemplate.webException) &&
        Objects.equals(this.webId, notificationContactTemplate.webId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(available, configString, contactType, description, escalationTimeout, hasChildren, id, links, maximumRetries, minimumAcknowledgements, name, notifyWhenInstanceEnded, path, plugInName, retryInterval, webException, webId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationContactTemplate {\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    configString: ").append(toIndentedString(configString)).append("\n");
    sb.append("    contactType: ").append(toIndentedString(contactType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    escalationTimeout: ").append(toIndentedString(escalationTimeout)).append("\n");
    sb.append("    hasChildren: ").append(toIndentedString(hasChildren)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    maximumRetries: ").append(toIndentedString(maximumRetries)).append("\n");
    sb.append("    minimumAcknowledgements: ").append(toIndentedString(minimumAcknowledgements)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notifyWhenInstanceEnded: ").append(toIndentedString(notifyWhenInstanceEnded)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    plugInName: ").append(toIndentedString(plugInName)).append("\n");
    sb.append("    retryInterval: ").append(toIndentedString(retryInterval)).append("\n");
    sb.append("    webException: ").append(toIndentedString(webException)).append("\n");
    sb.append("    webId: ").append(toIndentedString(webId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Available");
    openapiFields.add("ConfigString");
    openapiFields.add("ContactType");
    openapiFields.add("Description");
    openapiFields.add("EscalationTimeout");
    openapiFields.add("HasChildren");
    openapiFields.add("Id");
    openapiFields.add("Links");
    openapiFields.add("MaximumRetries");
    openapiFields.add("MinimumAcknowledgements");
    openapiFields.add("Name");
    openapiFields.add("NotifyWhenInstanceEnded");
    openapiFields.add("Path");
    openapiFields.add("PlugInName");
    openapiFields.add("RetryInterval");
    openapiFields.add("WebException");
    openapiFields.add("WebId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationContactTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationContactTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationContactTemplate is not found in the empty JSON string", NotificationContactTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationContactTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationContactTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ConfigString") != null && !jsonObj.get("ConfigString").isJsonNull()) && !jsonObj.get("ConfigString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConfigString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConfigString").toString()));
      }
      if ((jsonObj.get("ContactType") != null && !jsonObj.get("ContactType").isJsonNull()) && !jsonObj.get("ContactType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactType").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("EscalationTimeout") != null && !jsonObj.get("EscalationTimeout").isJsonNull()) && !jsonObj.get("EscalationTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EscalationTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EscalationTimeout").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      // validate the optional field `Links`
      if (jsonObj.get("Links") != null && !jsonObj.get("Links").isJsonNull()) {
        NotificationContactTemplateLinks.validateJsonElement(jsonObj.get("Links"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      if ((jsonObj.get("PlugInName") != null && !jsonObj.get("PlugInName").isJsonNull()) && !jsonObj.get("PlugInName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlugInName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlugInName").toString()));
      }
      if ((jsonObj.get("RetryInterval") != null && !jsonObj.get("RetryInterval").isJsonNull()) && !jsonObj.get("RetryInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RetryInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RetryInterval").toString()));
      }
      // validate the optional field `WebException`
      if (jsonObj.get("WebException") != null && !jsonObj.get("WebException").isJsonNull()) {
        WebException.validateJsonElement(jsonObj.get("WebException"));
      }
      if ((jsonObj.get("WebId") != null && !jsonObj.get("WebId").isJsonNull()) && !jsonObj.get("WebId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationContactTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationContactTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationContactTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationContactTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationContactTemplate>() {
           @Override
           public void write(JsonWriter out, NotificationContactTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationContactTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationContactTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationContactTemplate
   * @throws IOException if the JSON string is invalid with respect to NotificationContactTemplate
   */
  public static NotificationContactTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationContactTemplate.class);
  }

  /**
   * Convert an instance of NotificationContactTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

