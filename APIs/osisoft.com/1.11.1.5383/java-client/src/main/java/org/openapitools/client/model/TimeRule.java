/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.TimeRuleLinks;
import org.openapitools.client.model.WebException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TimeRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeRule {
  public static final String SERIALIZED_NAME_CONFIG_STRING = "ConfigString";
  @SerializedName(SERIALIZED_NAME_CONFIG_STRING)
  private String configString;

  public static final String SERIALIZED_NAME_CONFIG_STRING_STORED = "ConfigStringStored";
  @SerializedName(SERIALIZED_NAME_CONFIG_STRING_STORED)
  private String configStringStored;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_STRING = "DisplayString";
  @SerializedName(SERIALIZED_NAME_DISPLAY_STRING)
  private String displayString;

  public static final String SERIALIZED_NAME_EDITOR_TYPE = "EditorType";
  @SerializedName(SERIALIZED_NAME_EDITOR_TYPE)
  private String editorType;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IS_CONFIGURED = "IsConfigured";
  @SerializedName(SERIALIZED_NAME_IS_CONFIGURED)
  private Boolean isConfigured;

  public static final String SERIALIZED_NAME_IS_INITIALIZING = "IsInitializing";
  @SerializedName(SERIALIZED_NAME_IS_INITIALIZING)
  private Boolean isInitializing;

  public static final String SERIALIZED_NAME_LINKS = "Links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private TimeRuleLinks links;

  public static final String SERIALIZED_NAME_MERGE_DUPLICATED_ITEMS = "MergeDuplicatedItems";
  @SerializedName(SERIALIZED_NAME_MERGE_DUPLICATED_ITEMS)
  private Boolean mergeDuplicatedItems;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PLUG_IN_NAME = "PlugInName";
  @SerializedName(SERIALIZED_NAME_PLUG_IN_NAME)
  private String plugInName;

  public static final String SERIALIZED_NAME_WEB_EXCEPTION = "WebException";
  @SerializedName(SERIALIZED_NAME_WEB_EXCEPTION)
  private WebException webException;

  public static final String SERIALIZED_NAME_WEB_ID = "WebId";
  @SerializedName(SERIALIZED_NAME_WEB_ID)
  private String webId;

  public TimeRule() {
  }

  public TimeRule configString(String configString) {
    this.configString = configString;
    return this;
  }

  /**
   * Get configString
   * @return configString
   */
  @javax.annotation.Nullable
  public String getConfigString() {
    return configString;
  }

  public void setConfigString(String configString) {
    this.configString = configString;
  }


  public TimeRule configStringStored(String configStringStored) {
    this.configStringStored = configStringStored;
    return this;
  }

  /**
   * Get configStringStored
   * @return configStringStored
   */
  @javax.annotation.Nullable
  public String getConfigStringStored() {
    return configStringStored;
  }

  public void setConfigStringStored(String configStringStored) {
    this.configStringStored = configStringStored;
  }


  public TimeRule description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TimeRule displayString(String displayString) {
    this.displayString = displayString;
    return this;
  }

  /**
   * Get displayString
   * @return displayString
   */
  @javax.annotation.Nullable
  public String getDisplayString() {
    return displayString;
  }

  public void setDisplayString(String displayString) {
    this.displayString = displayString;
  }


  public TimeRule editorType(String editorType) {
    this.editorType = editorType;
    return this;
  }

  /**
   * Get editorType
   * @return editorType
   */
  @javax.annotation.Nullable
  public String getEditorType() {
    return editorType;
  }

  public void setEditorType(String editorType) {
    this.editorType = editorType;
  }


  public TimeRule id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public TimeRule isConfigured(Boolean isConfigured) {
    this.isConfigured = isConfigured;
    return this;
  }

  /**
   * Get isConfigured
   * @return isConfigured
   */
  @javax.annotation.Nullable
  public Boolean getIsConfigured() {
    return isConfigured;
  }

  public void setIsConfigured(Boolean isConfigured) {
    this.isConfigured = isConfigured;
  }


  public TimeRule isInitializing(Boolean isInitializing) {
    this.isInitializing = isInitializing;
    return this;
  }

  /**
   * Get isInitializing
   * @return isInitializing
   */
  @javax.annotation.Nullable
  public Boolean getIsInitializing() {
    return isInitializing;
  }

  public void setIsInitializing(Boolean isInitializing) {
    this.isInitializing = isInitializing;
  }


  public TimeRule links(TimeRuleLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public TimeRuleLinks getLinks() {
    return links;
  }

  public void setLinks(TimeRuleLinks links) {
    this.links = links;
  }


  public TimeRule mergeDuplicatedItems(Boolean mergeDuplicatedItems) {
    this.mergeDuplicatedItems = mergeDuplicatedItems;
    return this;
  }

  /**
   * Get mergeDuplicatedItems
   * @return mergeDuplicatedItems
   */
  @javax.annotation.Nullable
  public Boolean getMergeDuplicatedItems() {
    return mergeDuplicatedItems;
  }

  public void setMergeDuplicatedItems(Boolean mergeDuplicatedItems) {
    this.mergeDuplicatedItems = mergeDuplicatedItems;
  }


  public TimeRule name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TimeRule path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public TimeRule plugInName(String plugInName) {
    this.plugInName = plugInName;
    return this;
  }

  /**
   * Get plugInName
   * @return plugInName
   */
  @javax.annotation.Nullable
  public String getPlugInName() {
    return plugInName;
  }

  public void setPlugInName(String plugInName) {
    this.plugInName = plugInName;
  }


  public TimeRule webException(WebException webException) {
    this.webException = webException;
    return this;
  }

  /**
   * Get webException
   * @return webException
   */
  @javax.annotation.Nullable
  public WebException getWebException() {
    return webException;
  }

  public void setWebException(WebException webException) {
    this.webException = webException;
  }


  public TimeRule webId(String webId) {
    this.webId = webId;
    return this;
  }

  /**
   * Get webId
   * @return webId
   */
  @javax.annotation.Nullable
  public String getWebId() {
    return webId;
  }

  public void setWebId(String webId) {
    this.webId = webId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeRule timeRule = (TimeRule) o;
    return Objects.equals(this.configString, timeRule.configString) &&
        Objects.equals(this.configStringStored, timeRule.configStringStored) &&
        Objects.equals(this.description, timeRule.description) &&
        Objects.equals(this.displayString, timeRule.displayString) &&
        Objects.equals(this.editorType, timeRule.editorType) &&
        Objects.equals(this.id, timeRule.id) &&
        Objects.equals(this.isConfigured, timeRule.isConfigured) &&
        Objects.equals(this.isInitializing, timeRule.isInitializing) &&
        Objects.equals(this.links, timeRule.links) &&
        Objects.equals(this.mergeDuplicatedItems, timeRule.mergeDuplicatedItems) &&
        Objects.equals(this.name, timeRule.name) &&
        Objects.equals(this.path, timeRule.path) &&
        Objects.equals(this.plugInName, timeRule.plugInName) &&
        Objects.equals(this.webException, timeRule.webException) &&
        Objects.equals(this.webId, timeRule.webId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configString, configStringStored, description, displayString, editorType, id, isConfigured, isInitializing, links, mergeDuplicatedItems, name, path, plugInName, webException, webId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeRule {\n");
    sb.append("    configString: ").append(toIndentedString(configString)).append("\n");
    sb.append("    configStringStored: ").append(toIndentedString(configStringStored)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayString: ").append(toIndentedString(displayString)).append("\n");
    sb.append("    editorType: ").append(toIndentedString(editorType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isConfigured: ").append(toIndentedString(isConfigured)).append("\n");
    sb.append("    isInitializing: ").append(toIndentedString(isInitializing)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    mergeDuplicatedItems: ").append(toIndentedString(mergeDuplicatedItems)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    plugInName: ").append(toIndentedString(plugInName)).append("\n");
    sb.append("    webException: ").append(toIndentedString(webException)).append("\n");
    sb.append("    webId: ").append(toIndentedString(webId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConfigString");
    openapiFields.add("ConfigStringStored");
    openapiFields.add("Description");
    openapiFields.add("DisplayString");
    openapiFields.add("EditorType");
    openapiFields.add("Id");
    openapiFields.add("IsConfigured");
    openapiFields.add("IsInitializing");
    openapiFields.add("Links");
    openapiFields.add("MergeDuplicatedItems");
    openapiFields.add("Name");
    openapiFields.add("Path");
    openapiFields.add("PlugInName");
    openapiFields.add("WebException");
    openapiFields.add("WebId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeRule is not found in the empty JSON string", TimeRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ConfigString") != null && !jsonObj.get("ConfigString").isJsonNull()) && !jsonObj.get("ConfigString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConfigString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConfigString").toString()));
      }
      if ((jsonObj.get("ConfigStringStored") != null && !jsonObj.get("ConfigStringStored").isJsonNull()) && !jsonObj.get("ConfigStringStored").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConfigStringStored` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConfigStringStored").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("DisplayString") != null && !jsonObj.get("DisplayString").isJsonNull()) && !jsonObj.get("DisplayString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayString").toString()));
      }
      if ((jsonObj.get("EditorType") != null && !jsonObj.get("EditorType").isJsonNull()) && !jsonObj.get("EditorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EditorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EditorType").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      // validate the optional field `Links`
      if (jsonObj.get("Links") != null && !jsonObj.get("Links").isJsonNull()) {
        TimeRuleLinks.validateJsonElement(jsonObj.get("Links"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      if ((jsonObj.get("PlugInName") != null && !jsonObj.get("PlugInName").isJsonNull()) && !jsonObj.get("PlugInName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlugInName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlugInName").toString()));
      }
      // validate the optional field `WebException`
      if (jsonObj.get("WebException") != null && !jsonObj.get("WebException").isJsonNull()) {
        WebException.validateJsonElement(jsonObj.get("WebException"));
      }
      if ((jsonObj.get("WebId") != null && !jsonObj.get("WebId").isJsonNull()) && !jsonObj.get("WebId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeRule.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeRule>() {
           @Override
           public void write(JsonWriter out, TimeRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeRule
   * @throws IOException if the JSON string is invalid with respect to TimeRule
   */
  public static TimeRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeRule.class);
  }

  /**
   * Convert an instance of TimeRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

