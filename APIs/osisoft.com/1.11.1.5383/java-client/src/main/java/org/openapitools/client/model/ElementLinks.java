/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ElementLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ElementLinks {
  public static final String SERIALIZED_NAME_ANALYSES = "Analyses";
  @SerializedName(SERIALIZED_NAME_ANALYSES)
  private String analyses;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private String attributes;

  public static final String SERIALIZED_NAME_CATEGORIES = "Categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private String categories;

  public static final String SERIALIZED_NAME_DATABASE = "Database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private String database;

  public static final String SERIALIZED_NAME_DEFAULT_ATTRIBUTE = "DefaultAttribute";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ATTRIBUTE)
  private String defaultAttribute;

  public static final String SERIALIZED_NAME_ELEMENTS = "Elements";
  @SerializedName(SERIALIZED_NAME_ELEMENTS)
  private String elements;

  public static final String SERIALIZED_NAME_END_VALUE = "EndValue";
  @SerializedName(SERIALIZED_NAME_END_VALUE)
  private String endValue;

  public static final String SERIALIZED_NAME_EVENT_FRAMES = "EventFrames";
  @SerializedName(SERIALIZED_NAME_EVENT_FRAMES)
  private String eventFrames;

  public static final String SERIALIZED_NAME_INTERPOLATED_DATA = "InterpolatedData";
  @SerializedName(SERIALIZED_NAME_INTERPOLATED_DATA)
  private String interpolatedData;

  public static final String SERIALIZED_NAME_NOTIFICATION_RULES = "NotificationRules";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_RULES)
  private String notificationRules;

  public static final String SERIALIZED_NAME_PARENT = "Parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private String parent;

  public static final String SERIALIZED_NAME_PLOT_DATA = "PlotData";
  @SerializedName(SERIALIZED_NAME_PLOT_DATA)
  private String plotData;

  public static final String SERIALIZED_NAME_RECORDED_DATA = "RecordedData";
  @SerializedName(SERIALIZED_NAME_RECORDED_DATA)
  private String recordedData;

  public static final String SERIALIZED_NAME_SECURITY = "Security";
  @SerializedName(SERIALIZED_NAME_SECURITY)
  private String security;

  public static final String SERIALIZED_NAME_SECURITY_ENTRIES = "SecurityEntries";
  @SerializedName(SERIALIZED_NAME_SECURITY_ENTRIES)
  private String securityEntries;

  public static final String SERIALIZED_NAME_SELF = "Self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private String self;

  public static final String SERIALIZED_NAME_SUMMARY_DATA = "SummaryData";
  @SerializedName(SERIALIZED_NAME_SUMMARY_DATA)
  private String summaryData;

  public static final String SERIALIZED_NAME_TEMPLATE = "Template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private String template;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public ElementLinks() {
  }

  public ElementLinks analyses(String analyses) {
    this.analyses = analyses;
    return this;
  }

  /**
   * Get analyses
   * @return analyses
   */
  @javax.annotation.Nullable
  public String getAnalyses() {
    return analyses;
  }

  public void setAnalyses(String analyses) {
    this.analyses = analyses;
  }


  public ElementLinks attributes(String attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public String getAttributes() {
    return attributes;
  }

  public void setAttributes(String attributes) {
    this.attributes = attributes;
  }


  public ElementLinks categories(String categories) {
    this.categories = categories;
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  public String getCategories() {
    return categories;
  }

  public void setCategories(String categories) {
    this.categories = categories;
  }


  public ElementLinks database(String database) {
    this.database = database;
    return this;
  }

  /**
   * Get database
   * @return database
   */
  @javax.annotation.Nullable
  public String getDatabase() {
    return database;
  }

  public void setDatabase(String database) {
    this.database = database;
  }


  public ElementLinks defaultAttribute(String defaultAttribute) {
    this.defaultAttribute = defaultAttribute;
    return this;
  }

  /**
   * Get defaultAttribute
   * @return defaultAttribute
   */
  @javax.annotation.Nullable
  public String getDefaultAttribute() {
    return defaultAttribute;
  }

  public void setDefaultAttribute(String defaultAttribute) {
    this.defaultAttribute = defaultAttribute;
  }


  public ElementLinks elements(String elements) {
    this.elements = elements;
    return this;
  }

  /**
   * Get elements
   * @return elements
   */
  @javax.annotation.Nullable
  public String getElements() {
    return elements;
  }

  public void setElements(String elements) {
    this.elements = elements;
  }


  public ElementLinks endValue(String endValue) {
    this.endValue = endValue;
    return this;
  }

  /**
   * Get endValue
   * @return endValue
   */
  @javax.annotation.Nullable
  public String getEndValue() {
    return endValue;
  }

  public void setEndValue(String endValue) {
    this.endValue = endValue;
  }


  public ElementLinks eventFrames(String eventFrames) {
    this.eventFrames = eventFrames;
    return this;
  }

  /**
   * Get eventFrames
   * @return eventFrames
   */
  @javax.annotation.Nullable
  public String getEventFrames() {
    return eventFrames;
  }

  public void setEventFrames(String eventFrames) {
    this.eventFrames = eventFrames;
  }


  public ElementLinks interpolatedData(String interpolatedData) {
    this.interpolatedData = interpolatedData;
    return this;
  }

  /**
   * Get interpolatedData
   * @return interpolatedData
   */
  @javax.annotation.Nullable
  public String getInterpolatedData() {
    return interpolatedData;
  }

  public void setInterpolatedData(String interpolatedData) {
    this.interpolatedData = interpolatedData;
  }


  public ElementLinks notificationRules(String notificationRules) {
    this.notificationRules = notificationRules;
    return this;
  }

  /**
   * Get notificationRules
   * @return notificationRules
   */
  @javax.annotation.Nullable
  public String getNotificationRules() {
    return notificationRules;
  }

  public void setNotificationRules(String notificationRules) {
    this.notificationRules = notificationRules;
  }


  public ElementLinks parent(String parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public String getParent() {
    return parent;
  }

  public void setParent(String parent) {
    this.parent = parent;
  }


  public ElementLinks plotData(String plotData) {
    this.plotData = plotData;
    return this;
  }

  /**
   * Get plotData
   * @return plotData
   */
  @javax.annotation.Nullable
  public String getPlotData() {
    return plotData;
  }

  public void setPlotData(String plotData) {
    this.plotData = plotData;
  }


  public ElementLinks recordedData(String recordedData) {
    this.recordedData = recordedData;
    return this;
  }

  /**
   * Get recordedData
   * @return recordedData
   */
  @javax.annotation.Nullable
  public String getRecordedData() {
    return recordedData;
  }

  public void setRecordedData(String recordedData) {
    this.recordedData = recordedData;
  }


  public ElementLinks security(String security) {
    this.security = security;
    return this;
  }

  /**
   * Get security
   * @return security
   */
  @javax.annotation.Nullable
  public String getSecurity() {
    return security;
  }

  public void setSecurity(String security) {
    this.security = security;
  }


  public ElementLinks securityEntries(String securityEntries) {
    this.securityEntries = securityEntries;
    return this;
  }

  /**
   * Get securityEntries
   * @return securityEntries
   */
  @javax.annotation.Nullable
  public String getSecurityEntries() {
    return securityEntries;
  }

  public void setSecurityEntries(String securityEntries) {
    this.securityEntries = securityEntries;
  }


  public ElementLinks self(String self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public String getSelf() {
    return self;
  }

  public void setSelf(String self) {
    this.self = self;
  }


  public ElementLinks summaryData(String summaryData) {
    this.summaryData = summaryData;
    return this;
  }

  /**
   * Get summaryData
   * @return summaryData
   */
  @javax.annotation.Nullable
  public String getSummaryData() {
    return summaryData;
  }

  public void setSummaryData(String summaryData) {
    this.summaryData = summaryData;
  }


  public ElementLinks template(String template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nullable
  public String getTemplate() {
    return template;
  }

  public void setTemplate(String template) {
    this.template = template;
  }


  public ElementLinks value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElementLinks elementLinks = (ElementLinks) o;
    return Objects.equals(this.analyses, elementLinks.analyses) &&
        Objects.equals(this.attributes, elementLinks.attributes) &&
        Objects.equals(this.categories, elementLinks.categories) &&
        Objects.equals(this.database, elementLinks.database) &&
        Objects.equals(this.defaultAttribute, elementLinks.defaultAttribute) &&
        Objects.equals(this.elements, elementLinks.elements) &&
        Objects.equals(this.endValue, elementLinks.endValue) &&
        Objects.equals(this.eventFrames, elementLinks.eventFrames) &&
        Objects.equals(this.interpolatedData, elementLinks.interpolatedData) &&
        Objects.equals(this.notificationRules, elementLinks.notificationRules) &&
        Objects.equals(this.parent, elementLinks.parent) &&
        Objects.equals(this.plotData, elementLinks.plotData) &&
        Objects.equals(this.recordedData, elementLinks.recordedData) &&
        Objects.equals(this.security, elementLinks.security) &&
        Objects.equals(this.securityEntries, elementLinks.securityEntries) &&
        Objects.equals(this.self, elementLinks.self) &&
        Objects.equals(this.summaryData, elementLinks.summaryData) &&
        Objects.equals(this.template, elementLinks.template) &&
        Objects.equals(this.value, elementLinks.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyses, attributes, categories, database, defaultAttribute, elements, endValue, eventFrames, interpolatedData, notificationRules, parent, plotData, recordedData, security, securityEntries, self, summaryData, template, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElementLinks {\n");
    sb.append("    analyses: ").append(toIndentedString(analyses)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    defaultAttribute: ").append(toIndentedString(defaultAttribute)).append("\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("    endValue: ").append(toIndentedString(endValue)).append("\n");
    sb.append("    eventFrames: ").append(toIndentedString(eventFrames)).append("\n");
    sb.append("    interpolatedData: ").append(toIndentedString(interpolatedData)).append("\n");
    sb.append("    notificationRules: ").append(toIndentedString(notificationRules)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    plotData: ").append(toIndentedString(plotData)).append("\n");
    sb.append("    recordedData: ").append(toIndentedString(recordedData)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    securityEntries: ").append(toIndentedString(securityEntries)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    summaryData: ").append(toIndentedString(summaryData)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Analyses");
    openapiFields.add("Attributes");
    openapiFields.add("Categories");
    openapiFields.add("Database");
    openapiFields.add("DefaultAttribute");
    openapiFields.add("Elements");
    openapiFields.add("EndValue");
    openapiFields.add("EventFrames");
    openapiFields.add("InterpolatedData");
    openapiFields.add("NotificationRules");
    openapiFields.add("Parent");
    openapiFields.add("PlotData");
    openapiFields.add("RecordedData");
    openapiFields.add("Security");
    openapiFields.add("SecurityEntries");
    openapiFields.add("Self");
    openapiFields.add("SummaryData");
    openapiFields.add("Template");
    openapiFields.add("Value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElementLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElementLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElementLinks is not found in the empty JSON string", ElementLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElementLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElementLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Analyses") != null && !jsonObj.get("Analyses").isJsonNull()) && !jsonObj.get("Analyses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Analyses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Analyses").toString()));
      }
      if ((jsonObj.get("Attributes") != null && !jsonObj.get("Attributes").isJsonNull()) && !jsonObj.get("Attributes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Attributes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Attributes").toString()));
      }
      if ((jsonObj.get("Categories") != null && !jsonObj.get("Categories").isJsonNull()) && !jsonObj.get("Categories").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Categories` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Categories").toString()));
      }
      if ((jsonObj.get("Database") != null && !jsonObj.get("Database").isJsonNull()) && !jsonObj.get("Database").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Database` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Database").toString()));
      }
      if ((jsonObj.get("DefaultAttribute") != null && !jsonObj.get("DefaultAttribute").isJsonNull()) && !jsonObj.get("DefaultAttribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultAttribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultAttribute").toString()));
      }
      if ((jsonObj.get("Elements") != null && !jsonObj.get("Elements").isJsonNull()) && !jsonObj.get("Elements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Elements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Elements").toString()));
      }
      if ((jsonObj.get("EndValue") != null && !jsonObj.get("EndValue").isJsonNull()) && !jsonObj.get("EndValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EndValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EndValue").toString()));
      }
      if ((jsonObj.get("EventFrames") != null && !jsonObj.get("EventFrames").isJsonNull()) && !jsonObj.get("EventFrames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventFrames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EventFrames").toString()));
      }
      if ((jsonObj.get("InterpolatedData") != null && !jsonObj.get("InterpolatedData").isJsonNull()) && !jsonObj.get("InterpolatedData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InterpolatedData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InterpolatedData").toString()));
      }
      if ((jsonObj.get("NotificationRules") != null && !jsonObj.get("NotificationRules").isJsonNull()) && !jsonObj.get("NotificationRules").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NotificationRules` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NotificationRules").toString()));
      }
      if ((jsonObj.get("Parent") != null && !jsonObj.get("Parent").isJsonNull()) && !jsonObj.get("Parent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Parent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Parent").toString()));
      }
      if ((jsonObj.get("PlotData") != null && !jsonObj.get("PlotData").isJsonNull()) && !jsonObj.get("PlotData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlotData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlotData").toString()));
      }
      if ((jsonObj.get("RecordedData") != null && !jsonObj.get("RecordedData").isJsonNull()) && !jsonObj.get("RecordedData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RecordedData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RecordedData").toString()));
      }
      if ((jsonObj.get("Security") != null && !jsonObj.get("Security").isJsonNull()) && !jsonObj.get("Security").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Security` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Security").toString()));
      }
      if ((jsonObj.get("SecurityEntries") != null && !jsonObj.get("SecurityEntries").isJsonNull()) && !jsonObj.get("SecurityEntries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecurityEntries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SecurityEntries").toString()));
      }
      if ((jsonObj.get("Self") != null && !jsonObj.get("Self").isJsonNull()) && !jsonObj.get("Self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Self").toString()));
      }
      if ((jsonObj.get("SummaryData") != null && !jsonObj.get("SummaryData").isJsonNull()) && !jsonObj.get("SummaryData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SummaryData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SummaryData").toString()));
      }
      if ((jsonObj.get("Template") != null && !jsonObj.get("Template").isJsonNull()) && !jsonObj.get("Template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Template").toString()));
      }
      if ((jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) && !jsonObj.get("Value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElementLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElementLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElementLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElementLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<ElementLinks>() {
           @Override
           public void write(JsonWriter out, ElementLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElementLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElementLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElementLinks
   * @throws IOException if the JSON string is invalid with respect to ElementLinks
   */
  public static ElementLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElementLinks.class);
  }

  /**
   * Convert an instance of ElementLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

