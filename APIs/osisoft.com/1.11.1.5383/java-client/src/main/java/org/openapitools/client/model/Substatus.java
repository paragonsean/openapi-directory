/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.WebException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Substatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Substatus {
  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  /**
   * Gets or Sets substatus
   */
  @JsonAdapter(SubstatusEnum.Adapter.class)
  public enum SubstatusEnum {
    NUMBER_100(100),
    
    NUMBER_101(101),
    
    NUMBER_200(200),
    
    NUMBER_201(201),
    
    NUMBER_202(202),
    
    NUMBER_203(203),
    
    NUMBER_204(204),
    
    NUMBER_205(205),
    
    NUMBER_206(206),
    
    NUMBER_207(207),
    
    NUMBER_300(300),
    
    NUMBER_301(301),
    
    NUMBER_302(302),
    
    NUMBER_303(303),
    
    NUMBER_304(304),
    
    NUMBER_305(305),
    
    NUMBER_306(306),
    
    NUMBER_307(307),
    
    NUMBER_400(400),
    
    NUMBER_401(401),
    
    NUMBER_402(402),
    
    NUMBER_403(403),
    
    NUMBER_404(404),
    
    NUMBER_405(405),
    
    NUMBER_406(406),
    
    NUMBER_407(407),
    
    NUMBER_408(408),
    
    NUMBER_409(409),
    
    NUMBER_410(410),
    
    NUMBER_411(411),
    
    NUMBER_412(412),
    
    NUMBER_413(413),
    
    NUMBER_414(414),
    
    NUMBER_415(415),
    
    NUMBER_416(416),
    
    NUMBER_417(417),
    
    NUMBER_426(426),
    
    NUMBER_500(500),
    
    NUMBER_501(501),
    
    NUMBER_502(502),
    
    NUMBER_503(503),
    
    NUMBER_504(504),
    
    NUMBER_505(505);

    private Integer value;

    SubstatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubstatusEnum fromValue(Integer value) {
      for (SubstatusEnum b : SubstatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubstatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubstatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubstatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return SubstatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      SubstatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUBSTATUS = "Substatus";
  @SerializedName(SERIALIZED_NAME_SUBSTATUS)
  private SubstatusEnum substatus;

  public static final String SERIALIZED_NAME_WEB_EXCEPTION = "WebException";
  @SerializedName(SERIALIZED_NAME_WEB_EXCEPTION)
  private WebException webException;

  public Substatus() {
  }

  public Substatus message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public Substatus substatus(SubstatusEnum substatus) {
    this.substatus = substatus;
    return this;
  }

  /**
   * Get substatus
   * @return substatus
   */
  @javax.annotation.Nullable
  public SubstatusEnum getSubstatus() {
    return substatus;
  }

  public void setSubstatus(SubstatusEnum substatus) {
    this.substatus = substatus;
  }


  public Substatus webException(WebException webException) {
    this.webException = webException;
    return this;
  }

  /**
   * Get webException
   * @return webException
   */
  @javax.annotation.Nullable
  public WebException getWebException() {
    return webException;
  }

  public void setWebException(WebException webException) {
    this.webException = webException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Substatus substatus = (Substatus) o;
    return Objects.equals(this.message, substatus.message) &&
        Objects.equals(this.substatus, substatus.substatus) &&
        Objects.equals(this.webException, substatus.webException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, substatus, webException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Substatus {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    substatus: ").append(toIndentedString(substatus)).append("\n");
    sb.append("    webException: ").append(toIndentedString(webException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Message");
    openapiFields.add("Substatus");
    openapiFields.add("WebException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Substatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Substatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Substatus is not found in the empty JSON string", Substatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Substatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Substatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) && !jsonObj.get("Message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Message").toString()));
      }
      // validate the optional field `Substatus`
      if (jsonObj.get("Substatus") != null && !jsonObj.get("Substatus").isJsonNull()) {
        SubstatusEnum.validateJsonElement(jsonObj.get("Substatus"));
      }
      // validate the optional field `WebException`
      if (jsonObj.get("WebException") != null && !jsonObj.get("WebException").isJsonNull()) {
        WebException.validateJsonElement(jsonObj.get("WebException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Substatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Substatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Substatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Substatus.class));

       return (TypeAdapter<T>) new TypeAdapter<Substatus>() {
           @Override
           public void write(JsonWriter out, Substatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Substatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Substatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Substatus
   * @throws IOException if the JSON string is invalid with respect to Substatus
   */
  public static Substatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Substatus.class);
  }

  /**
   * Convert an instance of Substatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

