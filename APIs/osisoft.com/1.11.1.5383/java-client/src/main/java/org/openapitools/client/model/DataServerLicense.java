/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DataServerLicenseLinks;
import org.openapitools.client.model.WebException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataServerLicense
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataServerLicense {
  public static final String SERIALIZED_NAME_AMOUNT_LEFT = "AmountLeft";
  @SerializedName(SERIALIZED_NAME_AMOUNT_LEFT)
  private String amountLeft;

  public static final String SERIALIZED_NAME_AMOUNT_USED = "AmountUsed";
  @SerializedName(SERIALIZED_NAME_AMOUNT_USED)
  private String amountUsed;

  public static final String SERIALIZED_NAME_LINKS = "Links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private DataServerLicenseLinks links;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "TotalAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private String totalAmount;

  public static final String SERIALIZED_NAME_WEB_EXCEPTION = "WebException";
  @SerializedName(SERIALIZED_NAME_WEB_EXCEPTION)
  private WebException webException;

  public DataServerLicense() {
  }

  public DataServerLicense amountLeft(String amountLeft) {
    this.amountLeft = amountLeft;
    return this;
  }

  /**
   * Get amountLeft
   * @return amountLeft
   */
  @javax.annotation.Nullable
  public String getAmountLeft() {
    return amountLeft;
  }

  public void setAmountLeft(String amountLeft) {
    this.amountLeft = amountLeft;
  }


  public DataServerLicense amountUsed(String amountUsed) {
    this.amountUsed = amountUsed;
    return this;
  }

  /**
   * Get amountUsed
   * @return amountUsed
   */
  @javax.annotation.Nullable
  public String getAmountUsed() {
    return amountUsed;
  }

  public void setAmountUsed(String amountUsed) {
    this.amountUsed = amountUsed;
  }


  public DataServerLicense links(DataServerLicenseLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public DataServerLicenseLinks getLinks() {
    return links;
  }

  public void setLinks(DataServerLicenseLinks links) {
    this.links = links;
  }


  public DataServerLicense name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DataServerLicense totalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Get totalAmount
   * @return totalAmount
   */
  @javax.annotation.Nullable
  public String getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
  }


  public DataServerLicense webException(WebException webException) {
    this.webException = webException;
    return this;
  }

  /**
   * Get webException
   * @return webException
   */
  @javax.annotation.Nullable
  public WebException getWebException() {
    return webException;
  }

  public void setWebException(WebException webException) {
    this.webException = webException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataServerLicense dataServerLicense = (DataServerLicense) o;
    return Objects.equals(this.amountLeft, dataServerLicense.amountLeft) &&
        Objects.equals(this.amountUsed, dataServerLicense.amountUsed) &&
        Objects.equals(this.links, dataServerLicense.links) &&
        Objects.equals(this.name, dataServerLicense.name) &&
        Objects.equals(this.totalAmount, dataServerLicense.totalAmount) &&
        Objects.equals(this.webException, dataServerLicense.webException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountLeft, amountUsed, links, name, totalAmount, webException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataServerLicense {\n");
    sb.append("    amountLeft: ").append(toIndentedString(amountLeft)).append("\n");
    sb.append("    amountUsed: ").append(toIndentedString(amountUsed)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    webException: ").append(toIndentedString(webException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AmountLeft");
    openapiFields.add("AmountUsed");
    openapiFields.add("Links");
    openapiFields.add("Name");
    openapiFields.add("TotalAmount");
    openapiFields.add("WebException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataServerLicense
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataServerLicense.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataServerLicense is not found in the empty JSON string", DataServerLicense.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataServerLicense.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataServerLicense` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AmountLeft") != null && !jsonObj.get("AmountLeft").isJsonNull()) && !jsonObj.get("AmountLeft").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AmountLeft` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AmountLeft").toString()));
      }
      if ((jsonObj.get("AmountUsed") != null && !jsonObj.get("AmountUsed").isJsonNull()) && !jsonObj.get("AmountUsed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AmountUsed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AmountUsed").toString()));
      }
      // validate the optional field `Links`
      if (jsonObj.get("Links") != null && !jsonObj.get("Links").isJsonNull()) {
        DataServerLicenseLinks.validateJsonElement(jsonObj.get("Links"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("TotalAmount") != null && !jsonObj.get("TotalAmount").isJsonNull()) && !jsonObj.get("TotalAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalAmount").toString()));
      }
      // validate the optional field `WebException`
      if (jsonObj.get("WebException") != null && !jsonObj.get("WebException").isJsonNull()) {
        WebException.validateJsonElement(jsonObj.get("WebException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataServerLicense.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataServerLicense' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataServerLicense> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataServerLicense.class));

       return (TypeAdapter<T>) new TypeAdapter<DataServerLicense>() {
           @Override
           public void write(JsonWriter out, DataServerLicense value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataServerLicense read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataServerLicense given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataServerLicense
   * @throws IOException if the JSON string is invalid with respect to DataServerLicense
   */
  public static DataServerLicense fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataServerLicense.class);
  }

  /**
   * Convert an instance of DataServerLicense to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

