/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssetDatabaseLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssetDatabaseLinks {
  public static final String SERIALIZED_NAME_ANALYSIS_CATEGORIES = "AnalysisCategories";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_CATEGORIES)
  private String analysisCategories;

  public static final String SERIALIZED_NAME_ANALYSIS_TEMPLATES = "AnalysisTemplates";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_TEMPLATES)
  private String analysisTemplates;

  public static final String SERIALIZED_NAME_ASSET_SERVER = "AssetServer";
  @SerializedName(SERIALIZED_NAME_ASSET_SERVER)
  private String assetServer;

  public static final String SERIALIZED_NAME_ATTRIBUTE_CATEGORIES = "AttributeCategories";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_CATEGORIES)
  private String attributeCategories;

  public static final String SERIALIZED_NAME_ELEMENT_CATEGORIES = "ElementCategories";
  @SerializedName(SERIALIZED_NAME_ELEMENT_CATEGORIES)
  private String elementCategories;

  public static final String SERIALIZED_NAME_ELEMENT_TEMPLATES = "ElementTemplates";
  @SerializedName(SERIALIZED_NAME_ELEMENT_TEMPLATES)
  private String elementTemplates;

  public static final String SERIALIZED_NAME_ELEMENTS = "Elements";
  @SerializedName(SERIALIZED_NAME_ELEMENTS)
  private String elements;

  public static final String SERIALIZED_NAME_ENUMERATION_SETS = "EnumerationSets";
  @SerializedName(SERIALIZED_NAME_ENUMERATION_SETS)
  private String enumerationSets;

  public static final String SERIALIZED_NAME_EVENT_FRAMES = "EventFrames";
  @SerializedName(SERIALIZED_NAME_EVENT_FRAMES)
  private String eventFrames;

  public static final String SERIALIZED_NAME_SECURITY = "Security";
  @SerializedName(SERIALIZED_NAME_SECURITY)
  private String security;

  public static final String SERIALIZED_NAME_SECURITY_ENTRIES = "SecurityEntries";
  @SerializedName(SERIALIZED_NAME_SECURITY_ENTRIES)
  private String securityEntries;

  public static final String SERIALIZED_NAME_SELF = "Self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private String self;

  public static final String SERIALIZED_NAME_TABLE_CATEGORIES = "TableCategories";
  @SerializedName(SERIALIZED_NAME_TABLE_CATEGORIES)
  private String tableCategories;

  public static final String SERIALIZED_NAME_TABLES = "Tables";
  @SerializedName(SERIALIZED_NAME_TABLES)
  private String tables;

  public AssetDatabaseLinks() {
  }

  public AssetDatabaseLinks analysisCategories(String analysisCategories) {
    this.analysisCategories = analysisCategories;
    return this;
  }

  /**
   * Get analysisCategories
   * @return analysisCategories
   */
  @javax.annotation.Nullable
  public String getAnalysisCategories() {
    return analysisCategories;
  }

  public void setAnalysisCategories(String analysisCategories) {
    this.analysisCategories = analysisCategories;
  }


  public AssetDatabaseLinks analysisTemplates(String analysisTemplates) {
    this.analysisTemplates = analysisTemplates;
    return this;
  }

  /**
   * Get analysisTemplates
   * @return analysisTemplates
   */
  @javax.annotation.Nullable
  public String getAnalysisTemplates() {
    return analysisTemplates;
  }

  public void setAnalysisTemplates(String analysisTemplates) {
    this.analysisTemplates = analysisTemplates;
  }


  public AssetDatabaseLinks assetServer(String assetServer) {
    this.assetServer = assetServer;
    return this;
  }

  /**
   * Get assetServer
   * @return assetServer
   */
  @javax.annotation.Nullable
  public String getAssetServer() {
    return assetServer;
  }

  public void setAssetServer(String assetServer) {
    this.assetServer = assetServer;
  }


  public AssetDatabaseLinks attributeCategories(String attributeCategories) {
    this.attributeCategories = attributeCategories;
    return this;
  }

  /**
   * Get attributeCategories
   * @return attributeCategories
   */
  @javax.annotation.Nullable
  public String getAttributeCategories() {
    return attributeCategories;
  }

  public void setAttributeCategories(String attributeCategories) {
    this.attributeCategories = attributeCategories;
  }


  public AssetDatabaseLinks elementCategories(String elementCategories) {
    this.elementCategories = elementCategories;
    return this;
  }

  /**
   * Get elementCategories
   * @return elementCategories
   */
  @javax.annotation.Nullable
  public String getElementCategories() {
    return elementCategories;
  }

  public void setElementCategories(String elementCategories) {
    this.elementCategories = elementCategories;
  }


  public AssetDatabaseLinks elementTemplates(String elementTemplates) {
    this.elementTemplates = elementTemplates;
    return this;
  }

  /**
   * Get elementTemplates
   * @return elementTemplates
   */
  @javax.annotation.Nullable
  public String getElementTemplates() {
    return elementTemplates;
  }

  public void setElementTemplates(String elementTemplates) {
    this.elementTemplates = elementTemplates;
  }


  public AssetDatabaseLinks elements(String elements) {
    this.elements = elements;
    return this;
  }

  /**
   * Get elements
   * @return elements
   */
  @javax.annotation.Nullable
  public String getElements() {
    return elements;
  }

  public void setElements(String elements) {
    this.elements = elements;
  }


  public AssetDatabaseLinks enumerationSets(String enumerationSets) {
    this.enumerationSets = enumerationSets;
    return this;
  }

  /**
   * Get enumerationSets
   * @return enumerationSets
   */
  @javax.annotation.Nullable
  public String getEnumerationSets() {
    return enumerationSets;
  }

  public void setEnumerationSets(String enumerationSets) {
    this.enumerationSets = enumerationSets;
  }


  public AssetDatabaseLinks eventFrames(String eventFrames) {
    this.eventFrames = eventFrames;
    return this;
  }

  /**
   * Get eventFrames
   * @return eventFrames
   */
  @javax.annotation.Nullable
  public String getEventFrames() {
    return eventFrames;
  }

  public void setEventFrames(String eventFrames) {
    this.eventFrames = eventFrames;
  }


  public AssetDatabaseLinks security(String security) {
    this.security = security;
    return this;
  }

  /**
   * Get security
   * @return security
   */
  @javax.annotation.Nullable
  public String getSecurity() {
    return security;
  }

  public void setSecurity(String security) {
    this.security = security;
  }


  public AssetDatabaseLinks securityEntries(String securityEntries) {
    this.securityEntries = securityEntries;
    return this;
  }

  /**
   * Get securityEntries
   * @return securityEntries
   */
  @javax.annotation.Nullable
  public String getSecurityEntries() {
    return securityEntries;
  }

  public void setSecurityEntries(String securityEntries) {
    this.securityEntries = securityEntries;
  }


  public AssetDatabaseLinks self(String self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public String getSelf() {
    return self;
  }

  public void setSelf(String self) {
    this.self = self;
  }


  public AssetDatabaseLinks tableCategories(String tableCategories) {
    this.tableCategories = tableCategories;
    return this;
  }

  /**
   * Get tableCategories
   * @return tableCategories
   */
  @javax.annotation.Nullable
  public String getTableCategories() {
    return tableCategories;
  }

  public void setTableCategories(String tableCategories) {
    this.tableCategories = tableCategories;
  }


  public AssetDatabaseLinks tables(String tables) {
    this.tables = tables;
    return this;
  }

  /**
   * Get tables
   * @return tables
   */
  @javax.annotation.Nullable
  public String getTables() {
    return tables;
  }

  public void setTables(String tables) {
    this.tables = tables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetDatabaseLinks assetDatabaseLinks = (AssetDatabaseLinks) o;
    return Objects.equals(this.analysisCategories, assetDatabaseLinks.analysisCategories) &&
        Objects.equals(this.analysisTemplates, assetDatabaseLinks.analysisTemplates) &&
        Objects.equals(this.assetServer, assetDatabaseLinks.assetServer) &&
        Objects.equals(this.attributeCategories, assetDatabaseLinks.attributeCategories) &&
        Objects.equals(this.elementCategories, assetDatabaseLinks.elementCategories) &&
        Objects.equals(this.elementTemplates, assetDatabaseLinks.elementTemplates) &&
        Objects.equals(this.elements, assetDatabaseLinks.elements) &&
        Objects.equals(this.enumerationSets, assetDatabaseLinks.enumerationSets) &&
        Objects.equals(this.eventFrames, assetDatabaseLinks.eventFrames) &&
        Objects.equals(this.security, assetDatabaseLinks.security) &&
        Objects.equals(this.securityEntries, assetDatabaseLinks.securityEntries) &&
        Objects.equals(this.self, assetDatabaseLinks.self) &&
        Objects.equals(this.tableCategories, assetDatabaseLinks.tableCategories) &&
        Objects.equals(this.tables, assetDatabaseLinks.tables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisCategories, analysisTemplates, assetServer, attributeCategories, elementCategories, elementTemplates, elements, enumerationSets, eventFrames, security, securityEntries, self, tableCategories, tables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetDatabaseLinks {\n");
    sb.append("    analysisCategories: ").append(toIndentedString(analysisCategories)).append("\n");
    sb.append("    analysisTemplates: ").append(toIndentedString(analysisTemplates)).append("\n");
    sb.append("    assetServer: ").append(toIndentedString(assetServer)).append("\n");
    sb.append("    attributeCategories: ").append(toIndentedString(attributeCategories)).append("\n");
    sb.append("    elementCategories: ").append(toIndentedString(elementCategories)).append("\n");
    sb.append("    elementTemplates: ").append(toIndentedString(elementTemplates)).append("\n");
    sb.append("    elements: ").append(toIndentedString(elements)).append("\n");
    sb.append("    enumerationSets: ").append(toIndentedString(enumerationSets)).append("\n");
    sb.append("    eventFrames: ").append(toIndentedString(eventFrames)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    securityEntries: ").append(toIndentedString(securityEntries)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    tableCategories: ").append(toIndentedString(tableCategories)).append("\n");
    sb.append("    tables: ").append(toIndentedString(tables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AnalysisCategories");
    openapiFields.add("AnalysisTemplates");
    openapiFields.add("AssetServer");
    openapiFields.add("AttributeCategories");
    openapiFields.add("ElementCategories");
    openapiFields.add("ElementTemplates");
    openapiFields.add("Elements");
    openapiFields.add("EnumerationSets");
    openapiFields.add("EventFrames");
    openapiFields.add("Security");
    openapiFields.add("SecurityEntries");
    openapiFields.add("Self");
    openapiFields.add("TableCategories");
    openapiFields.add("Tables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetDatabaseLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetDatabaseLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetDatabaseLinks is not found in the empty JSON string", AssetDatabaseLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetDatabaseLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetDatabaseLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AnalysisCategories") != null && !jsonObj.get("AnalysisCategories").isJsonNull()) && !jsonObj.get("AnalysisCategories").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AnalysisCategories` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AnalysisCategories").toString()));
      }
      if ((jsonObj.get("AnalysisTemplates") != null && !jsonObj.get("AnalysisTemplates").isJsonNull()) && !jsonObj.get("AnalysisTemplates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AnalysisTemplates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AnalysisTemplates").toString()));
      }
      if ((jsonObj.get("AssetServer") != null && !jsonObj.get("AssetServer").isJsonNull()) && !jsonObj.get("AssetServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssetServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssetServer").toString()));
      }
      if ((jsonObj.get("AttributeCategories") != null && !jsonObj.get("AttributeCategories").isJsonNull()) && !jsonObj.get("AttributeCategories").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttributeCategories` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttributeCategories").toString()));
      }
      if ((jsonObj.get("ElementCategories") != null && !jsonObj.get("ElementCategories").isJsonNull()) && !jsonObj.get("ElementCategories").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ElementCategories` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ElementCategories").toString()));
      }
      if ((jsonObj.get("ElementTemplates") != null && !jsonObj.get("ElementTemplates").isJsonNull()) && !jsonObj.get("ElementTemplates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ElementTemplates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ElementTemplates").toString()));
      }
      if ((jsonObj.get("Elements") != null && !jsonObj.get("Elements").isJsonNull()) && !jsonObj.get("Elements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Elements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Elements").toString()));
      }
      if ((jsonObj.get("EnumerationSets") != null && !jsonObj.get("EnumerationSets").isJsonNull()) && !jsonObj.get("EnumerationSets").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EnumerationSets` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EnumerationSets").toString()));
      }
      if ((jsonObj.get("EventFrames") != null && !jsonObj.get("EventFrames").isJsonNull()) && !jsonObj.get("EventFrames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventFrames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EventFrames").toString()));
      }
      if ((jsonObj.get("Security") != null && !jsonObj.get("Security").isJsonNull()) && !jsonObj.get("Security").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Security` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Security").toString()));
      }
      if ((jsonObj.get("SecurityEntries") != null && !jsonObj.get("SecurityEntries").isJsonNull()) && !jsonObj.get("SecurityEntries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecurityEntries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SecurityEntries").toString()));
      }
      if ((jsonObj.get("Self") != null && !jsonObj.get("Self").isJsonNull()) && !jsonObj.get("Self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Self").toString()));
      }
      if ((jsonObj.get("TableCategories") != null && !jsonObj.get("TableCategories").isJsonNull()) && !jsonObj.get("TableCategories").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableCategories` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableCategories").toString()));
      }
      if ((jsonObj.get("Tables") != null && !jsonObj.get("Tables").isJsonNull()) && !jsonObj.get("Tables").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tables` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Tables").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetDatabaseLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetDatabaseLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetDatabaseLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetDatabaseLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetDatabaseLinks>() {
           @Override
           public void write(JsonWriter out, AssetDatabaseLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetDatabaseLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetDatabaseLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetDatabaseLinks
   * @throws IOException if the JSON string is invalid with respect to AssetDatabaseLinks
   */
  public static AssetDatabaseLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetDatabaseLinks.class);
  }

  /**
   * Convert an instance of AssetDatabaseLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

