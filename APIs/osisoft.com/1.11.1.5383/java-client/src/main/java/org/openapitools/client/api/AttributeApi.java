/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Attribute;
import org.openapitools.client.model.ItemsAttribute;
import org.openapitools.client.model.ItemsAttributeCategory;
import org.openapitools.client.model.ItemsItemAttribute;
import org.openapitools.client.model.TimedValue;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AttributeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AttributeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AttributeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for attributeCreateAttribute
     * @param webId The ID of the parent attribute on which to create the attribute. (required)
     * @param attribute The definition of the new attribute. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The attribute was created. The response&#39;s Location header is a link to the created attribute. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeCreateAttributeCall(String webId, Attribute attribute, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attribute;

        // create path and map variables
        String localVarPath = "/attributes/{webId}/attributes"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeCreateAttributeValidateBeforeCall(String webId, Attribute attribute, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling attributeCreateAttribute(Async)");
        }

        // verify the required parameter 'attribute' is set
        if (attribute == null) {
            throw new ApiException("Missing the required parameter 'attribute' when calling attributeCreateAttribute(Async)");
        }

        return attributeCreateAttributeCall(webId, attribute, webIdType, _callback);

    }

    /**
     * Create a new attribute as a child of the specified attribute.
     * 
     * @param webId The ID of the parent attribute on which to create the attribute. (required)
     * @param attribute The definition of the new attribute. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The attribute was created. The response&#39;s Location header is a link to the created attribute. </td><td>  -  </td></tr>
     </table>
     */
    public void attributeCreateAttribute(String webId, Attribute attribute, String webIdType) throws ApiException {
        attributeCreateAttributeWithHttpInfo(webId, attribute, webIdType);
    }

    /**
     * Create a new attribute as a child of the specified attribute.
     * 
     * @param webId The ID of the parent attribute on which to create the attribute. (required)
     * @param attribute The definition of the new attribute. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The attribute was created. The response&#39;s Location header is a link to the created attribute. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attributeCreateAttributeWithHttpInfo(String webId, Attribute attribute, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = attributeCreateAttributeValidateBeforeCall(webId, attribute, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new attribute as a child of the specified attribute. (asynchronously)
     * 
     * @param webId The ID of the parent attribute on which to create the attribute. (required)
     * @param attribute The definition of the new attribute. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The attribute was created. The response&#39;s Location header is a link to the created attribute. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeCreateAttributeAsync(String webId, Attribute attribute, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeCreateAttributeValidateBeforeCall(webId, attribute, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeCreateConfig
     * @param webId The ID of the attribute. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The attribute&#39;s DataReference configuration was created or updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeCreateConfigCall(String webId, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes/{webId}/config"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeCreateConfigValidateBeforeCall(String webId, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling attributeCreateConfig(Async)");
        }

        return attributeCreateConfigCall(webId, webIdType, _callback);

    }

    /**
     * Create or update an attribute&#39;s DataReference configuration (Create/Update PI point for PI Point DataReference).
     * 
     * @param webId The ID of the attribute. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The attribute&#39;s DataReference configuration was created or updated. </td><td>  -  </td></tr>
     </table>
     */
    public void attributeCreateConfig(String webId, String webIdType) throws ApiException {
        attributeCreateConfigWithHttpInfo(webId, webIdType);
    }

    /**
     * Create or update an attribute&#39;s DataReference configuration (Create/Update PI point for PI Point DataReference).
     * 
     * @param webId The ID of the attribute. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The attribute&#39;s DataReference configuration was created or updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attributeCreateConfigWithHttpInfo(String webId, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = attributeCreateConfigValidateBeforeCall(webId, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or update an attribute&#39;s DataReference configuration (Create/Update PI point for PI Point DataReference). (asynchronously)
     * 
     * @param webId The ID of the attribute. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The attribute&#39;s DataReference configuration was created or updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeCreateConfigAsync(String webId, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeCreateConfigValidateBeforeCall(webId, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeDelete
     * @param webId The ID of the attribute. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeDeleteCall(String webId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes/{webId}"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeDeleteValidateBeforeCall(String webId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling attributeDelete(Async)");
        }

        return attributeDeleteCall(webId, _callback);

    }

    /**
     * Delete an attribute.
     * 
     * @param webId The ID of the attribute. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void attributeDelete(String webId) throws ApiException {
        attributeDeleteWithHttpInfo(webId);
    }

    /**
     * Delete an attribute.
     * 
     * @param webId The ID of the attribute. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attributeDeleteWithHttpInfo(String webId) throws ApiException {
        okhttp3.Call localVarCall = attributeDeleteValidateBeforeCall(webId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an attribute. (asynchronously)
     * 
     * @param webId The ID of the attribute. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeDeleteAsync(String webId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeDeleteValidateBeforeCall(webId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeGet
     * @param webId The ID of the attribute. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested attribute. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeGetCall(String webId, String associations, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes/{webId}"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeGetValidateBeforeCall(String webId, String associations, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling attributeGet(Async)");
        }

        return attributeGetCall(webId, associations, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve an attribute.
     * 
     * @param webId The ID of the attribute. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return Attribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested attribute. </td><td>  -  </td></tr>
     </table>
     */
    public Attribute attributeGet(String webId, String associations, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<Attribute> localVarResp = attributeGetWithHttpInfo(webId, associations, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve an attribute.
     * 
     * @param webId The ID of the attribute. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Attribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested attribute. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attribute> attributeGetWithHttpInfo(String webId, String associations, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = attributeGetValidateBeforeCall(webId, associations, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<Attribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an attribute. (asynchronously)
     * 
     * @param webId The ID of the attribute. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested attribute. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeGetAsync(String webId, String associations, String selectedFields, String webIdType, final ApiCallback<Attribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeGetValidateBeforeCall(webId, associations, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<Attribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeGetAttributes
     * @param webId The ID of the parent attribute. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param categoryName Specify that returned attributes must have this category. The default is no category filter. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param templateName Specify that returned attributes must be members of this template. The default is no template filter. (optional)
     * @param trait The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter. (optional)
     * @param traitCategory The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \&quot;all\&quot;, then all attribute traits of all categories will be returned. (optional)
     * @param valueType Specify that returned attributes&#39; value type must be the given value type. The default is no value type filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of child attributes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeGetAttributesCall(String webId, String associations, String categoryName, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, Integer startIndex, String templateName, List<String> trait, List<String> traitCategory, String valueType, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes/{webId}/attributes"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryName", categoryName));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (searchFullHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFullHierarchy", searchFullHierarchy));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (showExcluded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showExcluded", showExcluded));
        }

        if (showHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showHidden", showHidden));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateName", templateName));
        }

        if (trait != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "trait", trait));
        }

        if (traitCategory != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "traitCategory", traitCategory));
        }

        if (valueType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("valueType", valueType));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeGetAttributesValidateBeforeCall(String webId, String associations, String categoryName, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, Integer startIndex, String templateName, List<String> trait, List<String> traitCategory, String valueType, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling attributeGetAttributes(Async)");
        }

        return attributeGetAttributesCall(webId, associations, categoryName, maxCount, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startIndex, templateName, trait, traitCategory, valueType, webIdType, _callback);

    }

    /**
     * Get the child attributes of the specified attribute.
     * 
     * @param webId The ID of the parent attribute. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param categoryName Specify that returned attributes must have this category. The default is no category filter. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param templateName Specify that returned attributes must be members of this template. The default is no template filter. (optional)
     * @param trait The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter. (optional)
     * @param traitCategory The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \&quot;all\&quot;, then all attribute traits of all categories will be returned. (optional)
     * @param valueType Specify that returned attributes&#39; value type must be the given value type. The default is no value type filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of child attributes. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsAttribute attributeGetAttributes(String webId, String associations, String categoryName, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, Integer startIndex, String templateName, List<String> trait, List<String> traitCategory, String valueType, String webIdType) throws ApiException {
        ApiResponse<ItemsAttribute> localVarResp = attributeGetAttributesWithHttpInfo(webId, associations, categoryName, maxCount, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startIndex, templateName, trait, traitCategory, valueType, webIdType);
        return localVarResp.getData();
    }

    /**
     * Get the child attributes of the specified attribute.
     * 
     * @param webId The ID of the parent attribute. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param categoryName Specify that returned attributes must have this category. The default is no category filter. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param templateName Specify that returned attributes must be members of this template. The default is no template filter. (optional)
     * @param trait The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter. (optional)
     * @param traitCategory The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \&quot;all\&quot;, then all attribute traits of all categories will be returned. (optional)
     * @param valueType Specify that returned attributes&#39; value type must be the given value type. The default is no value type filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of child attributes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsAttribute> attributeGetAttributesWithHttpInfo(String webId, String associations, String categoryName, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, Integer startIndex, String templateName, List<String> trait, List<String> traitCategory, String valueType, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = attributeGetAttributesValidateBeforeCall(webId, associations, categoryName, maxCount, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startIndex, templateName, trait, traitCategory, valueType, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the child attributes of the specified attribute. (asynchronously)
     * 
     * @param webId The ID of the parent attribute. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param categoryName Specify that returned attributes must have this category. The default is no category filter. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param templateName Specify that returned attributes must be members of this template. The default is no template filter. (optional)
     * @param trait The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter. (optional)
     * @param traitCategory The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \&quot;all\&quot;, then all attribute traits of all categories will be returned. (optional)
     * @param valueType Specify that returned attributes&#39; value type must be the given value type. The default is no value type filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of child attributes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeGetAttributesAsync(String webId, String associations, String categoryName, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, Integer startIndex, String templateName, List<String> trait, List<String> traitCategory, String valueType, String webIdType, final ApiCallback<ItemsAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeGetAttributesValidateBeforeCall(webId, associations, categoryName, maxCount, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startIndex, templateName, trait, traitCategory, valueType, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeGetAttributesQuery
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param databaseWebId The ID of the asset database to use as the root of the query. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param query The query string is a list of filters used to perform an AFSearch for the attributes in the asset database. An example would be: \&quot;query&#x3D;Element:{ Name:&#x3D;&#39;MyElement&#39; } Type:&#x3D;Int32\&quot;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of attributes matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeGetAttributesQueryCall(String associations, String databaseWebId, Integer maxCount, String query, String selectedFields, Integer startIndex, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (databaseWebId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("databaseWebId", databaseWebId));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeGetAttributesQueryValidateBeforeCall(String associations, String databaseWebId, Integer maxCount, String query, String selectedFields, Integer startIndex, String webIdType, final ApiCallback _callback) throws ApiException {
        return attributeGetAttributesQueryCall(associations, databaseWebId, maxCount, query, selectedFields, startIndex, webIdType, _callback);

    }

    /**
     * Retrieve attributes based on the specified conditions. Returns attributes using the specified search query string.
     * 
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param databaseWebId The ID of the asset database to use as the root of the query. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param query The query string is a list of filters used to perform an AFSearch for the attributes in the asset database. An example would be: \&quot;query&#x3D;Element:{ Name:&#x3D;&#39;MyElement&#39; } Type:&#x3D;Int32\&quot;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of attributes matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsAttribute attributeGetAttributesQuery(String associations, String databaseWebId, Integer maxCount, String query, String selectedFields, Integer startIndex, String webIdType) throws ApiException {
        ApiResponse<ItemsAttribute> localVarResp = attributeGetAttributesQueryWithHttpInfo(associations, databaseWebId, maxCount, query, selectedFields, startIndex, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve attributes based on the specified conditions. Returns attributes using the specified search query string.
     * 
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param databaseWebId The ID of the asset database to use as the root of the query. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param query The query string is a list of filters used to perform an AFSearch for the attributes in the asset database. An example would be: \&quot;query&#x3D;Element:{ Name:&#x3D;&#39;MyElement&#39; } Type:&#x3D;Int32\&quot;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of attributes matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsAttribute> attributeGetAttributesQueryWithHttpInfo(String associations, String databaseWebId, Integer maxCount, String query, String selectedFields, Integer startIndex, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = attributeGetAttributesQueryValidateBeforeCall(associations, databaseWebId, maxCount, query, selectedFields, startIndex, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve attributes based on the specified conditions. Returns attributes using the specified search query string. (asynchronously)
     * 
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param databaseWebId The ID of the asset database to use as the root of the query. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param query The query string is a list of filters used to perform an AFSearch for the attributes in the asset database. An example would be: \&quot;query&#x3D;Element:{ Name:&#x3D;&#39;MyElement&#39; } Type:&#x3D;Int32\&quot;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of attributes matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeGetAttributesQueryAsync(String associations, String databaseWebId, Integer maxCount, String query, String selectedFields, Integer startIndex, String webIdType, final ApiCallback<ItemsAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeGetAttributesQueryValidateBeforeCall(associations, databaseWebId, maxCount, query, selectedFields, startIndex, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeGetByPath
     * @param path The path to the attribute. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested attribute. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeGetByPathCall(String path, String associations, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeGetByPathValidateBeforeCall(String path, String associations, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling attributeGetByPath(Async)");
        }

        return attributeGetByPathCall(path, associations, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve an attribute by path.
     * This method returns an attribute based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the attribute. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return Attribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested attribute. </td><td>  -  </td></tr>
     </table>
     */
    public Attribute attributeGetByPath(String path, String associations, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<Attribute> localVarResp = attributeGetByPathWithHttpInfo(path, associations, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve an attribute by path.
     * This method returns an attribute based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the attribute. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Attribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested attribute. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attribute> attributeGetByPathWithHttpInfo(String path, String associations, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = attributeGetByPathValidateBeforeCall(path, associations, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<Attribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an attribute by path. (asynchronously)
     * This method returns an attribute based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the attribute. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested attribute. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeGetByPathAsync(String path, String associations, String selectedFields, String webIdType, final ApiCallback<Attribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeGetByPathValidateBeforeCall(path, associations, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<Attribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeGetCategories
     * @param webId The ID of the attribute. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of categories. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeGetCategoriesCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes/{webId}/categories"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeGetCategoriesValidateBeforeCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling attributeGetCategories(Async)");
        }

        return attributeGetCategoriesCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Get an attribute&#39;s categories.
     * 
     * @param webId The ID of the attribute. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsAttributeCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of categories. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsAttributeCategory attributeGetCategories(String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsAttributeCategory> localVarResp = attributeGetCategoriesWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Get an attribute&#39;s categories.
     * 
     * @param webId The ID of the attribute. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsAttributeCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of categories. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsAttributeCategory> attributeGetCategoriesWithHttpInfo(String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = attributeGetCategoriesValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsAttributeCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an attribute&#39;s categories. (asynchronously)
     * 
     * @param webId The ID of the attribute. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of categories. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeGetCategoriesAsync(String webId, String selectedFields, String webIdType, final ApiCallback<ItemsAttributeCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeGetCategoriesValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsAttributeCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeGetMultiple
     * @param asParallel Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is &#39;false&#39;. (optional)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param includeMode The include mode for the return list. The default is &#39;All&#39;. (optional)
     * @param path The path of an attribute. Multiple attributes may be specified with multiple instances of the parameter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webId The ID of an attribute. Multiple attributes may be specified with multiple instances of the parameter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested attributes </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Some or all items contain exceptions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeGetMultipleCall(Boolean asParallel, String associations, String includeMode, List<String> path, String selectedFields, List<String> webId, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes/multiple";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asParallel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asParallel", asParallel));
        }

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (includeMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeMode", includeMode));
        }

        if (path != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "path", path));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "webId", webId));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeGetMultipleValidateBeforeCall(Boolean asParallel, String associations, String includeMode, List<String> path, String selectedFields, List<String> webId, String webIdType, final ApiCallback _callback) throws ApiException {
        return attributeGetMultipleCall(asParallel, associations, includeMode, path, selectedFields, webId, webIdType, _callback);

    }

    /**
     * Retrieve multiple attributes by web id or path.
     * 
     * @param asParallel Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is &#39;false&#39;. (optional)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param includeMode The include mode for the return list. The default is &#39;All&#39;. (optional)
     * @param path The path of an attribute. Multiple attributes may be specified with multiple instances of the parameter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webId The ID of an attribute. Multiple attributes may be specified with multiple instances of the parameter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsItemAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested attributes </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Some or all items contain exceptions. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsItemAttribute attributeGetMultiple(Boolean asParallel, String associations, String includeMode, List<String> path, String selectedFields, List<String> webId, String webIdType) throws ApiException {
        ApiResponse<ItemsItemAttribute> localVarResp = attributeGetMultipleWithHttpInfo(asParallel, associations, includeMode, path, selectedFields, webId, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve multiple attributes by web id or path.
     * 
     * @param asParallel Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is &#39;false&#39;. (optional)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param includeMode The include mode for the return list. The default is &#39;All&#39;. (optional)
     * @param path The path of an attribute. Multiple attributes may be specified with multiple instances of the parameter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webId The ID of an attribute. Multiple attributes may be specified with multiple instances of the parameter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsItemAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested attributes </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Some or all items contain exceptions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsItemAttribute> attributeGetMultipleWithHttpInfo(Boolean asParallel, String associations, String includeMode, List<String> path, String selectedFields, List<String> webId, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = attributeGetMultipleValidateBeforeCall(asParallel, associations, includeMode, path, selectedFields, webId, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsItemAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve multiple attributes by web id or path. (asynchronously)
     * 
     * @param asParallel Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is &#39;false&#39;. (optional)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param includeMode The include mode for the return list. The default is &#39;All&#39;. (optional)
     * @param path The path of an attribute. Multiple attributes may be specified with multiple instances of the parameter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webId The ID of an attribute. Multiple attributes may be specified with multiple instances of the parameter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested attributes </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Some or all items contain exceptions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeGetMultipleAsync(Boolean asParallel, String associations, String includeMode, List<String> path, String selectedFields, List<String> webId, String webIdType, final ApiCallback<ItemsItemAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeGetMultipleValidateBeforeCall(asParallel, associations, includeMode, path, selectedFields, webId, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsItemAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeGetValue
     * @param webId The ID of the attribute. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The attribute&#39;s value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeGetValueCall(String webId, String selectedFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes/{webId}/value"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeGetValueValidateBeforeCall(String webId, String selectedFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling attributeGetValue(Async)");
        }

        return attributeGetValueCall(webId, selectedFields, _callback);

    }

    /**
     * Get the attribute&#39;s value. This call is intended for use with attributes that have no data reference only. For attributes with a data reference, consult the documentation for Streams.
     * 
     * @param webId The ID of the attribute. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @return TimedValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The attribute&#39;s value. </td><td>  -  </td></tr>
     </table>
     */
    public TimedValue attributeGetValue(String webId, String selectedFields) throws ApiException {
        ApiResponse<TimedValue> localVarResp = attributeGetValueWithHttpInfo(webId, selectedFields);
        return localVarResp.getData();
    }

    /**
     * Get the attribute&#39;s value. This call is intended for use with attributes that have no data reference only. For attributes with a data reference, consult the documentation for Streams.
     * 
     * @param webId The ID of the attribute. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @return ApiResponse&lt;TimedValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The attribute&#39;s value. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimedValue> attributeGetValueWithHttpInfo(String webId, String selectedFields) throws ApiException {
        okhttp3.Call localVarCall = attributeGetValueValidateBeforeCall(webId, selectedFields, null);
        Type localVarReturnType = new TypeToken<TimedValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the attribute&#39;s value. This call is intended for use with attributes that have no data reference only. For attributes with a data reference, consult the documentation for Streams. (asynchronously)
     * 
     * @param webId The ID of the attribute. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The attribute&#39;s value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeGetValueAsync(String webId, String selectedFields, final ApiCallback<TimedValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeGetValueValidateBeforeCall(webId, selectedFields, _callback);
        Type localVarReturnType = new TypeToken<TimedValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeSetValue
     * @param webId The ID of the attribute. (required)
     * @param value The value to write. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The value was set successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeSetValueCall(String webId, TimedValue value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/attributes/{webId}/value"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeSetValueValidateBeforeCall(String webId, TimedValue value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling attributeSetValue(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling attributeSetValue(Async)");
        }

        return attributeSetValueCall(webId, value, _callback);

    }

    /**
     * Set the value of a configuration item attribute. For attributes with a data reference or non-configuration item attributes, consult the documentation for streams.
     * Users must be aware of the value type that the attribute takes before changing the value. If a value entered by the user does not match the value type expressed in the attribute, it will not work or it will return an error. Users should also be careful of what the value type means, for instance, if a value type accepts strings and the user enters a number, the attribute will interpret it as a string of characters and not as the integer value that the user may have wanted.
     * @param webId The ID of the attribute. (required)
     * @param value The value to write. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The value was set successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void attributeSetValue(String webId, TimedValue value) throws ApiException {
        attributeSetValueWithHttpInfo(webId, value);
    }

    /**
     * Set the value of a configuration item attribute. For attributes with a data reference or non-configuration item attributes, consult the documentation for streams.
     * Users must be aware of the value type that the attribute takes before changing the value. If a value entered by the user does not match the value type expressed in the attribute, it will not work or it will return an error. Users should also be careful of what the value type means, for instance, if a value type accepts strings and the user enters a number, the attribute will interpret it as a string of characters and not as the integer value that the user may have wanted.
     * @param webId The ID of the attribute. (required)
     * @param value The value to write. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The value was set successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attributeSetValueWithHttpInfo(String webId, TimedValue value) throws ApiException {
        okhttp3.Call localVarCall = attributeSetValueValidateBeforeCall(webId, value, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set the value of a configuration item attribute. For attributes with a data reference or non-configuration item attributes, consult the documentation for streams. (asynchronously)
     * Users must be aware of the value type that the attribute takes before changing the value. If a value entered by the user does not match the value type expressed in the attribute, it will not work or it will return an error. Users should also be careful of what the value type means, for instance, if a value type accepts strings and the user enters a number, the attribute will interpret it as a string of characters and not as the integer value that the user may have wanted.
     * @param webId The ID of the attribute. (required)
     * @param value The value to write. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The value was set successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeSetValueAsync(String webId, TimedValue value, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeSetValueValidateBeforeCall(webId, value, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeUpdate
     * @param webId The ID of the attribute. (required)
     * @param attribute A partial attribute containing the desired changes. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeUpdateCall(String webId, Attribute attribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attribute;

        // create path and map variables
        String localVarPath = "/attributes/{webId}"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeUpdateValidateBeforeCall(String webId, Attribute attribute, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling attributeUpdate(Async)");
        }

        // verify the required parameter 'attribute' is set
        if (attribute == null) {
            throw new ApiException("Missing the required parameter 'attribute' when calling attributeUpdate(Async)");
        }

        return attributeUpdateCall(webId, attribute, _callback);

    }

    /**
     * Update an attribute by replacing items in its definition.
     * If an attribute is based on a template, the user must make sure to update the attribute appropriately so that it does not conflict with the template&#39;s design. Once a template is applied to an attribute, it can not be changed.
     * @param webId The ID of the attribute. (required)
     * @param attribute A partial attribute containing the desired changes. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was updated. </td><td>  -  </td></tr>
     </table>
     */
    public void attributeUpdate(String webId, Attribute attribute) throws ApiException {
        attributeUpdateWithHttpInfo(webId, attribute);
    }

    /**
     * Update an attribute by replacing items in its definition.
     * If an attribute is based on a template, the user must make sure to update the attribute appropriately so that it does not conflict with the template&#39;s design. Once a template is applied to an attribute, it can not be changed.
     * @param webId The ID of the attribute. (required)
     * @param attribute A partial attribute containing the desired changes. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> attributeUpdateWithHttpInfo(String webId, Attribute attribute) throws ApiException {
        okhttp3.Call localVarCall = attributeUpdateValidateBeforeCall(webId, attribute, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an attribute by replacing items in its definition. (asynchronously)
     * If an attribute is based on a template, the user must make sure to update the attribute appropriately so that it does not conflict with the template&#39;s design. Once a template is applied to an attribute, it can not be changed.
     * @param webId The ID of the attribute. (required)
     * @param attribute A partial attribute containing the desired changes. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The attribute was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeUpdateAsync(String webId, Attribute attribute, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeUpdateValidateBeforeCall(webId, attribute, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
