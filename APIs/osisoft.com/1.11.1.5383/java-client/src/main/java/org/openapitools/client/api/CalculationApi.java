/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsSummaryValue;
import org.openapitools.client.model.TimedValues;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CalculationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CalculationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CalculationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for calculationGetAtIntervals
     * @param expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation. (required)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param sampleInterval A time span specifies how often the filter expression is evaluated when computing the summary for an interval. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param webId The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The calculated values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The targeted object does not support the calculation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculationGetAtIntervalsCall(String expression, String endTime, String sampleInterval, String selectedFields, String startTime, String webId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calculation/intervals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (sampleInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sampleInterval", sampleInterval));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (webId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webId", webId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculationGetAtIntervalsValidateBeforeCall(String expression, String endTime, String sampleInterval, String selectedFields, String startTime, String webId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expression' is set
        if (expression == null) {
            throw new ApiException("Missing the required parameter 'expression' when calling calculationGetAtIntervals(Async)");
        }

        return calculationGetAtIntervalsCall(expression, endTime, sampleInterval, selectedFields, startTime, webId, _callback);

    }

    /**
     * Returns results of evaluating the expression over the time range from the start time to the end time at a defined interval.
     * 
     * @param expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation. (required)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param sampleInterval A time span specifies how often the filter expression is evaluated when computing the summary for an interval. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param webId The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null. (optional)
     * @return TimedValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The calculated values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The targeted object does not support the calculation. </td><td>  -  </td></tr>
     </table>
     */
    public TimedValues calculationGetAtIntervals(String expression, String endTime, String sampleInterval, String selectedFields, String startTime, String webId) throws ApiException {
        ApiResponse<TimedValues> localVarResp = calculationGetAtIntervalsWithHttpInfo(expression, endTime, sampleInterval, selectedFields, startTime, webId);
        return localVarResp.getData();
    }

    /**
     * Returns results of evaluating the expression over the time range from the start time to the end time at a defined interval.
     * 
     * @param expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation. (required)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param sampleInterval A time span specifies how often the filter expression is evaluated when computing the summary for an interval. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param webId The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null. (optional)
     * @return ApiResponse&lt;TimedValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The calculated values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The targeted object does not support the calculation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimedValues> calculationGetAtIntervalsWithHttpInfo(String expression, String endTime, String sampleInterval, String selectedFields, String startTime, String webId) throws ApiException {
        okhttp3.Call localVarCall = calculationGetAtIntervalsValidateBeforeCall(expression, endTime, sampleInterval, selectedFields, startTime, webId, null);
        Type localVarReturnType = new TypeToken<TimedValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns results of evaluating the expression over the time range from the start time to the end time at a defined interval. (asynchronously)
     * 
     * @param expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation. (required)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param sampleInterval A time span specifies how often the filter expression is evaluated when computing the summary for an interval. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param webId The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The calculated values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The targeted object does not support the calculation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculationGetAtIntervalsAsync(String expression, String endTime, String sampleInterval, String selectedFields, String startTime, String webId, final ApiCallback<TimedValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculationGetAtIntervalsValidateBeforeCall(expression, endTime, sampleInterval, selectedFields, startTime, webId, _callback);
        Type localVarReturnType = new TypeToken<TimedValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculationGetAtRecorded
     * @param expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation. (required)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param webId The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The calculated values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The targeted object does not support the calculation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculationGetAtRecordedCall(String expression, String endTime, String selectedFields, String startTime, String webId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calculation/recorded";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (webId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webId", webId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculationGetAtRecordedValidateBeforeCall(String expression, String endTime, String selectedFields, String startTime, String webId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expression' is set
        if (expression == null) {
            throw new ApiException("Missing the required parameter 'expression' when calling calculationGetAtRecorded(Async)");
        }

        return calculationGetAtRecordedCall(expression, endTime, selectedFields, startTime, webId, _callback);

    }

    /**
     * Returns the result of evaluating the expression at each point in time over the time range from the start time to the end time where a recorded value exists for a member of the expression.
     * 
     * @param expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation. (required)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param webId The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null. (optional)
     * @return TimedValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The calculated values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The targeted object does not support the calculation. </td><td>  -  </td></tr>
     </table>
     */
    public TimedValues calculationGetAtRecorded(String expression, String endTime, String selectedFields, String startTime, String webId) throws ApiException {
        ApiResponse<TimedValues> localVarResp = calculationGetAtRecordedWithHttpInfo(expression, endTime, selectedFields, startTime, webId);
        return localVarResp.getData();
    }

    /**
     * Returns the result of evaluating the expression at each point in time over the time range from the start time to the end time where a recorded value exists for a member of the expression.
     * 
     * @param expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation. (required)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param webId The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null. (optional)
     * @return ApiResponse&lt;TimedValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The calculated values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The targeted object does not support the calculation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimedValues> calculationGetAtRecordedWithHttpInfo(String expression, String endTime, String selectedFields, String startTime, String webId) throws ApiException {
        okhttp3.Call localVarCall = calculationGetAtRecordedValidateBeforeCall(expression, endTime, selectedFields, startTime, webId, null);
        Type localVarReturnType = new TypeToken<TimedValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the result of evaluating the expression at each point in time over the time range from the start time to the end time where a recorded value exists for a member of the expression. (asynchronously)
     * 
     * @param expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation. (required)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param webId The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The calculated values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The targeted object does not support the calculation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculationGetAtRecordedAsync(String expression, String endTime, String selectedFields, String startTime, String webId, final ApiCallback<TimedValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculationGetAtRecordedValidateBeforeCall(expression, endTime, selectedFields, startTime, webId, _callback);
        Type localVarReturnType = new TypeToken<TimedValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculationGetAtTimes
     * @param expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation. (required)
     * @param time A list of timestamps at which to calculate the expression. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param webId The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The calculated values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The targeted object does not support the calculation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculationGetAtTimesCall(String expression, List<String> time, String selectedFields, String sortOrder, String webId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calculation/times";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        if (time != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "time", time));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (webId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webId", webId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculationGetAtTimesValidateBeforeCall(String expression, List<String> time, String selectedFields, String sortOrder, String webId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expression' is set
        if (expression == null) {
            throw new ApiException("Missing the required parameter 'expression' when calling calculationGetAtTimes(Async)");
        }

        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling calculationGetAtTimes(Async)");
        }

        return calculationGetAtTimesCall(expression, time, selectedFields, sortOrder, webId, _callback);

    }

    /**
     * Returns the result of evaluating the expression at the specified timestamps.
     * 
     * @param expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation. (required)
     * @param time A list of timestamps at which to calculate the expression. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param webId The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null. (optional)
     * @return TimedValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The calculated values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The targeted object does not support the calculation. </td><td>  -  </td></tr>
     </table>
     */
    public TimedValues calculationGetAtTimes(String expression, List<String> time, String selectedFields, String sortOrder, String webId) throws ApiException {
        ApiResponse<TimedValues> localVarResp = calculationGetAtTimesWithHttpInfo(expression, time, selectedFields, sortOrder, webId);
        return localVarResp.getData();
    }

    /**
     * Returns the result of evaluating the expression at the specified timestamps.
     * 
     * @param expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation. (required)
     * @param time A list of timestamps at which to calculate the expression. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param webId The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null. (optional)
     * @return ApiResponse&lt;TimedValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The calculated values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The targeted object does not support the calculation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TimedValues> calculationGetAtTimesWithHttpInfo(String expression, List<String> time, String selectedFields, String sortOrder, String webId) throws ApiException {
        okhttp3.Call localVarCall = calculationGetAtTimesValidateBeforeCall(expression, time, selectedFields, sortOrder, webId, null);
        Type localVarReturnType = new TypeToken<TimedValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the result of evaluating the expression at the specified timestamps. (asynchronously)
     * 
     * @param expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation. (required)
     * @param time A list of timestamps at which to calculate the expression. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param webId The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The calculated values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The targeted object does not support the calculation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculationGetAtTimesAsync(String expression, List<String> time, String selectedFields, String sortOrder, String webId, final ApiCallback<TimedValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculationGetAtTimesValidateBeforeCall(expression, time, selectedFields, sortOrder, webId, _callback);
        Type localVarReturnType = new TypeToken<TimedValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculationGetSummary
     * @param expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation. (required)
     * @param calculationBasis Specifies the method of evaluating the data over the time range. The default is &#39;TimeWeighted&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param sampleInterval A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is &#39;Interval&#39;. (optional)
     * @param sampleType A flag which specifies one or more summaries to compute for each interval over the time range. The default is &#39;ExpressionRecordedValues&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param summaryDuration The duration of each summary interval. (optional)
     * @param summaryType Specifies the kinds of summaries to produce over the range. The default is &#39;Total&#39;. Multiple summary types may be specified by using multiple instances of summaryType. (optional)
     * @param timeType Specifies how to calculate the timestamp for each interval. The default is &#39;Auto&#39;. (optional)
     * @param webId The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The calculated values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The targeted object does not support the calculation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculationGetSummaryCall(String expression, String calculationBasis, String endTime, String sampleInterval, String sampleType, String selectedFields, String startTime, String summaryDuration, List<String> summaryType, String timeType, String webId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calculation/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expression", expression));
        }

        if (calculationBasis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculationBasis", calculationBasis));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (sampleInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sampleInterval", sampleInterval));
        }

        if (sampleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sampleType", sampleType));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (summaryDuration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summaryDuration", summaryDuration));
        }

        if (summaryType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "summaryType", summaryType));
        }

        if (timeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeType", timeType));
        }

        if (webId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webId", webId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculationGetSummaryValidateBeforeCall(String expression, String calculationBasis, String endTime, String sampleInterval, String sampleType, String selectedFields, String startTime, String summaryDuration, List<String> summaryType, String timeType, String webId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expression' is set
        if (expression == null) {
            throw new ApiException("Missing the required parameter 'expression' when calling calculationGetSummary(Async)");
        }

        return calculationGetSummaryCall(expression, calculationBasis, endTime, sampleInterval, sampleType, selectedFields, startTime, summaryDuration, summaryType, timeType, webId, _callback);

    }

    /**
     * Returns the result of evaluating the expression over the time range from the start time to the end time. The time range is first divided into a number of summary intervals. Then the calculation is performed for the specified summaries over each interval.
     * 
     * @param expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation. (required)
     * @param calculationBasis Specifies the method of evaluating the data over the time range. The default is &#39;TimeWeighted&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param sampleInterval A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is &#39;Interval&#39;. (optional)
     * @param sampleType A flag which specifies one or more summaries to compute for each interval over the time range. The default is &#39;ExpressionRecordedValues&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param summaryDuration The duration of each summary interval. (optional)
     * @param summaryType Specifies the kinds of summaries to produce over the range. The default is &#39;Total&#39;. Multiple summary types may be specified by using multiple instances of summaryType. (optional)
     * @param timeType Specifies how to calculate the timestamp for each interval. The default is &#39;Auto&#39;. (optional)
     * @param webId The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null. (optional)
     * @return ItemsSummaryValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The calculated values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The targeted object does not support the calculation. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsSummaryValue calculationGetSummary(String expression, String calculationBasis, String endTime, String sampleInterval, String sampleType, String selectedFields, String startTime, String summaryDuration, List<String> summaryType, String timeType, String webId) throws ApiException {
        ApiResponse<ItemsSummaryValue> localVarResp = calculationGetSummaryWithHttpInfo(expression, calculationBasis, endTime, sampleInterval, sampleType, selectedFields, startTime, summaryDuration, summaryType, timeType, webId);
        return localVarResp.getData();
    }

    /**
     * Returns the result of evaluating the expression over the time range from the start time to the end time. The time range is first divided into a number of summary intervals. Then the calculation is performed for the specified summaries over each interval.
     * 
     * @param expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation. (required)
     * @param calculationBasis Specifies the method of evaluating the data over the time range. The default is &#39;TimeWeighted&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param sampleInterval A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is &#39;Interval&#39;. (optional)
     * @param sampleType A flag which specifies one or more summaries to compute for each interval over the time range. The default is &#39;ExpressionRecordedValues&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param summaryDuration The duration of each summary interval. (optional)
     * @param summaryType Specifies the kinds of summaries to produce over the range. The default is &#39;Total&#39;. Multiple summary types may be specified by using multiple instances of summaryType. (optional)
     * @param timeType Specifies how to calculate the timestamp for each interval. The default is &#39;Auto&#39;. (optional)
     * @param webId The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null. (optional)
     * @return ApiResponse&lt;ItemsSummaryValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The calculated values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The targeted object does not support the calculation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsSummaryValue> calculationGetSummaryWithHttpInfo(String expression, String calculationBasis, String endTime, String sampleInterval, String sampleType, String selectedFields, String startTime, String summaryDuration, List<String> summaryType, String timeType, String webId) throws ApiException {
        okhttp3.Call localVarCall = calculationGetSummaryValidateBeforeCall(expression, calculationBasis, endTime, sampleInterval, sampleType, selectedFields, startTime, summaryDuration, summaryType, timeType, webId, null);
        Type localVarReturnType = new TypeToken<ItemsSummaryValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the result of evaluating the expression over the time range from the start time to the end time. The time range is first divided into a number of summary intervals. Then the calculation is performed for the specified summaries over each interval. (asynchronously)
     * 
     * @param expression A string containing the expression to be evaluated. The syntax for the expression generally follows the Performance Equation syntax as described in the PI Server documentation, with the exception that expressions which target AF objects use attribute names in place of tag names in the equation. (required)
     * @param calculationBasis Specifies the method of evaluating the data over the time range. The default is &#39;TimeWeighted&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param sampleInterval A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is &#39;Interval&#39;. (optional)
     * @param sampleType A flag which specifies one or more summaries to compute for each interval over the time range. The default is &#39;ExpressionRecordedValues&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param summaryDuration The duration of each summary interval. (optional)
     * @param summaryType Specifies the kinds of summaries to produce over the range. The default is &#39;Total&#39;. Multiple summary types may be specified by using multiple instances of summaryType. (optional)
     * @param timeType Specifies how to calculate the timestamp for each interval. The default is &#39;Auto&#39;. (optional)
     * @param webId The ID of the target object of the expression. A target object can be a Data Server, a database, an element, an event frame or an attribute. References to attributes or points are based on the target. If this parameter is not provided, the target object is set to null. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The calculated values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The targeted object does not support the calculation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculationGetSummaryAsync(String expression, String calculationBasis, String endTime, String sampleInterval, String sampleType, String selectedFields, String startTime, String summaryDuration, List<String> summaryType, String timeType, String webId, final ApiCallback<ItemsSummaryValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculationGetSummaryValidateBeforeCall(expression, calculationBasis, endTime, sampleInterval, sampleType, selectedFields, startTime, summaryDuration, summaryType, timeType, webId, _callback);
        Type localVarReturnType = new TypeToken<ItemsSummaryValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
