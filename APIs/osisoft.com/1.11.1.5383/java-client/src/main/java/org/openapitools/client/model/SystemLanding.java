/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SystemLandingLinks;
import org.openapitools.client.model.WebException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SystemLanding
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SystemLanding {
  public static final String SERIALIZED_NAME_LINKS = "Links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private SystemLandingLinks links;

  public static final String SERIALIZED_NAME_PRODUCT_TITLE = "ProductTitle";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TITLE)
  private String productTitle;

  public static final String SERIALIZED_NAME_PRODUCT_VERSION = "ProductVersion";
  @SerializedName(SERIALIZED_NAME_PRODUCT_VERSION)
  private String productVersion;

  public static final String SERIALIZED_NAME_WEB_EXCEPTION = "WebException";
  @SerializedName(SERIALIZED_NAME_WEB_EXCEPTION)
  private WebException webException;

  public SystemLanding() {
  }

  public SystemLanding links(SystemLandingLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public SystemLandingLinks getLinks() {
    return links;
  }

  public void setLinks(SystemLandingLinks links) {
    this.links = links;
  }


  public SystemLanding productTitle(String productTitle) {
    this.productTitle = productTitle;
    return this;
  }

  /**
   * Get productTitle
   * @return productTitle
   */
  @javax.annotation.Nullable
  public String getProductTitle() {
    return productTitle;
  }

  public void setProductTitle(String productTitle) {
    this.productTitle = productTitle;
  }


  public SystemLanding productVersion(String productVersion) {
    this.productVersion = productVersion;
    return this;
  }

  /**
   * Get productVersion
   * @return productVersion
   */
  @javax.annotation.Nullable
  public String getProductVersion() {
    return productVersion;
  }

  public void setProductVersion(String productVersion) {
    this.productVersion = productVersion;
  }


  public SystemLanding webException(WebException webException) {
    this.webException = webException;
    return this;
  }

  /**
   * Get webException
   * @return webException
   */
  @javax.annotation.Nullable
  public WebException getWebException() {
    return webException;
  }

  public void setWebException(WebException webException) {
    this.webException = webException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemLanding systemLanding = (SystemLanding) o;
    return Objects.equals(this.links, systemLanding.links) &&
        Objects.equals(this.productTitle, systemLanding.productTitle) &&
        Objects.equals(this.productVersion, systemLanding.productVersion) &&
        Objects.equals(this.webException, systemLanding.webException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, productTitle, productVersion, webException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemLanding {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    productTitle: ").append(toIndentedString(productTitle)).append("\n");
    sb.append("    productVersion: ").append(toIndentedString(productVersion)).append("\n");
    sb.append("    webException: ").append(toIndentedString(webException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Links");
    openapiFields.add("ProductTitle");
    openapiFields.add("ProductVersion");
    openapiFields.add("WebException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SystemLanding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SystemLanding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SystemLanding is not found in the empty JSON string", SystemLanding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SystemLanding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SystemLanding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Links`
      if (jsonObj.get("Links") != null && !jsonObj.get("Links").isJsonNull()) {
        SystemLandingLinks.validateJsonElement(jsonObj.get("Links"));
      }
      if ((jsonObj.get("ProductTitle") != null && !jsonObj.get("ProductTitle").isJsonNull()) && !jsonObj.get("ProductTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProductTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProductTitle").toString()));
      }
      if ((jsonObj.get("ProductVersion") != null && !jsonObj.get("ProductVersion").isJsonNull()) && !jsonObj.get("ProductVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProductVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProductVersion").toString()));
      }
      // validate the optional field `WebException`
      if (jsonObj.get("WebException") != null && !jsonObj.get("WebException").isJsonNull()) {
        WebException.validateJsonElement(jsonObj.get("WebException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SystemLanding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SystemLanding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SystemLanding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SystemLanding.class));

       return (TypeAdapter<T>) new TypeAdapter<SystemLanding>() {
           @Override
           public void write(JsonWriter out, SystemLanding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SystemLanding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SystemLanding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SystemLanding
   * @throws IOException if the JSON string is invalid with respect to SystemLanding
   */
  public static SystemLanding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SystemLanding.class);
  }

  /**
   * Convert an instance of SystemLanding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

