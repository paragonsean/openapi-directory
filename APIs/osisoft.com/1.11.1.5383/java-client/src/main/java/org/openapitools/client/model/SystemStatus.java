/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.WebException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SystemStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SystemStatus {
  public static final String SERIALIZED_NAME_CACHE_INSTANCES = "CacheInstances";
  @SerializedName(SERIALIZED_NAME_CACHE_INSTANCES)
  private Integer cacheInstances;

  public static final String SERIALIZED_NAME_SERVER_TIME = "ServerTime";
  @SerializedName(SERIALIZED_NAME_SERVER_TIME)
  private OffsetDateTime serverTime;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_UP_TIME_IN_MINUTES = "UpTimeInMinutes";
  @SerializedName(SERIALIZED_NAME_UP_TIME_IN_MINUTES)
  private Double upTimeInMinutes;

  public static final String SERIALIZED_NAME_WEB_EXCEPTION = "WebException";
  @SerializedName(SERIALIZED_NAME_WEB_EXCEPTION)
  private WebException webException;

  public SystemStatus() {
  }

  public SystemStatus cacheInstances(Integer cacheInstances) {
    this.cacheInstances = cacheInstances;
    return this;
  }

  /**
   * Get cacheInstances
   * @return cacheInstances
   */
  @javax.annotation.Nullable
  public Integer getCacheInstances() {
    return cacheInstances;
  }

  public void setCacheInstances(Integer cacheInstances) {
    this.cacheInstances = cacheInstances;
  }


  public SystemStatus serverTime(OffsetDateTime serverTime) {
    this.serverTime = serverTime;
    return this;
  }

  /**
   * Get serverTime
   * @return serverTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getServerTime() {
    return serverTime;
  }

  public void setServerTime(OffsetDateTime serverTime) {
    this.serverTime = serverTime;
  }


  public SystemStatus state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public SystemStatus upTimeInMinutes(Double upTimeInMinutes) {
    this.upTimeInMinutes = upTimeInMinutes;
    return this;
  }

  /**
   * Get upTimeInMinutes
   * @return upTimeInMinutes
   */
  @javax.annotation.Nullable
  public Double getUpTimeInMinutes() {
    return upTimeInMinutes;
  }

  public void setUpTimeInMinutes(Double upTimeInMinutes) {
    this.upTimeInMinutes = upTimeInMinutes;
  }


  public SystemStatus webException(WebException webException) {
    this.webException = webException;
    return this;
  }

  /**
   * Get webException
   * @return webException
   */
  @javax.annotation.Nullable
  public WebException getWebException() {
    return webException;
  }

  public void setWebException(WebException webException) {
    this.webException = webException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemStatus systemStatus = (SystemStatus) o;
    return Objects.equals(this.cacheInstances, systemStatus.cacheInstances) &&
        Objects.equals(this.serverTime, systemStatus.serverTime) &&
        Objects.equals(this.state, systemStatus.state) &&
        Objects.equals(this.upTimeInMinutes, systemStatus.upTimeInMinutes) &&
        Objects.equals(this.webException, systemStatus.webException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheInstances, serverTime, state, upTimeInMinutes, webException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemStatus {\n");
    sb.append("    cacheInstances: ").append(toIndentedString(cacheInstances)).append("\n");
    sb.append("    serverTime: ").append(toIndentedString(serverTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    upTimeInMinutes: ").append(toIndentedString(upTimeInMinutes)).append("\n");
    sb.append("    webException: ").append(toIndentedString(webException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CacheInstances");
    openapiFields.add("ServerTime");
    openapiFields.add("State");
    openapiFields.add("UpTimeInMinutes");
    openapiFields.add("WebException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SystemStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SystemStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SystemStatus is not found in the empty JSON string", SystemStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SystemStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SystemStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) && !jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
      // validate the optional field `WebException`
      if (jsonObj.get("WebException") != null && !jsonObj.get("WebException").isJsonNull()) {
        WebException.validateJsonElement(jsonObj.get("WebException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SystemStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SystemStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SystemStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SystemStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<SystemStatus>() {
           @Override
           public void write(JsonWriter out, SystemStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SystemStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SystemStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SystemStatus
   * @throws IOException if the JSON string is invalid with respect to SystemStatus
   */
  public static SystemStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SystemStatus.class);
  }

  /**
   * Convert an instance of SystemStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

