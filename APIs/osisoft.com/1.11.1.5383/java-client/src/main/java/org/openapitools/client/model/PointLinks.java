/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PointLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PointLinks {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private String attributes;

  public static final String SERIALIZED_NAME_DATA_SERVER = "DataServer";
  @SerializedName(SERIALIZED_NAME_DATA_SERVER)
  private String dataServer;

  public static final String SERIALIZED_NAME_END_VALUE = "EndValue";
  @SerializedName(SERIALIZED_NAME_END_VALUE)
  private String endValue;

  public static final String SERIALIZED_NAME_INTERPOLATED_DATA = "InterpolatedData";
  @SerializedName(SERIALIZED_NAME_INTERPOLATED_DATA)
  private String interpolatedData;

  public static final String SERIALIZED_NAME_PLOT_DATA = "PlotData";
  @SerializedName(SERIALIZED_NAME_PLOT_DATA)
  private String plotData;

  public static final String SERIALIZED_NAME_RECORDED_DATA = "RecordedData";
  @SerializedName(SERIALIZED_NAME_RECORDED_DATA)
  private String recordedData;

  public static final String SERIALIZED_NAME_SELF = "Self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private String self;

  public static final String SERIALIZED_NAME_SUMMARY_DATA = "SummaryData";
  @SerializedName(SERIALIZED_NAME_SUMMARY_DATA)
  private String summaryData;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public PointLinks() {
  }

  public PointLinks attributes(String attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public String getAttributes() {
    return attributes;
  }

  public void setAttributes(String attributes) {
    this.attributes = attributes;
  }


  public PointLinks dataServer(String dataServer) {
    this.dataServer = dataServer;
    return this;
  }

  /**
   * Get dataServer
   * @return dataServer
   */
  @javax.annotation.Nullable
  public String getDataServer() {
    return dataServer;
  }

  public void setDataServer(String dataServer) {
    this.dataServer = dataServer;
  }


  public PointLinks endValue(String endValue) {
    this.endValue = endValue;
    return this;
  }

  /**
   * Get endValue
   * @return endValue
   */
  @javax.annotation.Nullable
  public String getEndValue() {
    return endValue;
  }

  public void setEndValue(String endValue) {
    this.endValue = endValue;
  }


  public PointLinks interpolatedData(String interpolatedData) {
    this.interpolatedData = interpolatedData;
    return this;
  }

  /**
   * Get interpolatedData
   * @return interpolatedData
   */
  @javax.annotation.Nullable
  public String getInterpolatedData() {
    return interpolatedData;
  }

  public void setInterpolatedData(String interpolatedData) {
    this.interpolatedData = interpolatedData;
  }


  public PointLinks plotData(String plotData) {
    this.plotData = plotData;
    return this;
  }

  /**
   * Get plotData
   * @return plotData
   */
  @javax.annotation.Nullable
  public String getPlotData() {
    return plotData;
  }

  public void setPlotData(String plotData) {
    this.plotData = plotData;
  }


  public PointLinks recordedData(String recordedData) {
    this.recordedData = recordedData;
    return this;
  }

  /**
   * Get recordedData
   * @return recordedData
   */
  @javax.annotation.Nullable
  public String getRecordedData() {
    return recordedData;
  }

  public void setRecordedData(String recordedData) {
    this.recordedData = recordedData;
  }


  public PointLinks self(String self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public String getSelf() {
    return self;
  }

  public void setSelf(String self) {
    this.self = self;
  }


  public PointLinks summaryData(String summaryData) {
    this.summaryData = summaryData;
    return this;
  }

  /**
   * Get summaryData
   * @return summaryData
   */
  @javax.annotation.Nullable
  public String getSummaryData() {
    return summaryData;
  }

  public void setSummaryData(String summaryData) {
    this.summaryData = summaryData;
  }


  public PointLinks value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PointLinks pointLinks = (PointLinks) o;
    return Objects.equals(this.attributes, pointLinks.attributes) &&
        Objects.equals(this.dataServer, pointLinks.dataServer) &&
        Objects.equals(this.endValue, pointLinks.endValue) &&
        Objects.equals(this.interpolatedData, pointLinks.interpolatedData) &&
        Objects.equals(this.plotData, pointLinks.plotData) &&
        Objects.equals(this.recordedData, pointLinks.recordedData) &&
        Objects.equals(this.self, pointLinks.self) &&
        Objects.equals(this.summaryData, pointLinks.summaryData) &&
        Objects.equals(this.value, pointLinks.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, dataServer, endValue, interpolatedData, plotData, recordedData, self, summaryData, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PointLinks {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    dataServer: ").append(toIndentedString(dataServer)).append("\n");
    sb.append("    endValue: ").append(toIndentedString(endValue)).append("\n");
    sb.append("    interpolatedData: ").append(toIndentedString(interpolatedData)).append("\n");
    sb.append("    plotData: ").append(toIndentedString(plotData)).append("\n");
    sb.append("    recordedData: ").append(toIndentedString(recordedData)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    summaryData: ").append(toIndentedString(summaryData)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attributes");
    openapiFields.add("DataServer");
    openapiFields.add("EndValue");
    openapiFields.add("InterpolatedData");
    openapiFields.add("PlotData");
    openapiFields.add("RecordedData");
    openapiFields.add("Self");
    openapiFields.add("SummaryData");
    openapiFields.add("Value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PointLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PointLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PointLinks is not found in the empty JSON string", PointLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PointLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PointLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Attributes") != null && !jsonObj.get("Attributes").isJsonNull()) && !jsonObj.get("Attributes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Attributes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Attributes").toString()));
      }
      if ((jsonObj.get("DataServer") != null && !jsonObj.get("DataServer").isJsonNull()) && !jsonObj.get("DataServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DataServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DataServer").toString()));
      }
      if ((jsonObj.get("EndValue") != null && !jsonObj.get("EndValue").isJsonNull()) && !jsonObj.get("EndValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EndValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EndValue").toString()));
      }
      if ((jsonObj.get("InterpolatedData") != null && !jsonObj.get("InterpolatedData").isJsonNull()) && !jsonObj.get("InterpolatedData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InterpolatedData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InterpolatedData").toString()));
      }
      if ((jsonObj.get("PlotData") != null && !jsonObj.get("PlotData").isJsonNull()) && !jsonObj.get("PlotData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlotData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlotData").toString()));
      }
      if ((jsonObj.get("RecordedData") != null && !jsonObj.get("RecordedData").isJsonNull()) && !jsonObj.get("RecordedData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RecordedData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RecordedData").toString()));
      }
      if ((jsonObj.get("Self") != null && !jsonObj.get("Self").isJsonNull()) && !jsonObj.get("Self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Self").toString()));
      }
      if ((jsonObj.get("SummaryData") != null && !jsonObj.get("SummaryData").isJsonNull()) && !jsonObj.get("SummaryData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SummaryData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SummaryData").toString()));
      }
      if ((jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) && !jsonObj.get("Value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PointLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PointLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PointLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PointLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<PointLinks>() {
           @Override
           public void write(JsonWriter out, PointLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PointLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PointLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PointLinks
   * @throws IOException if the JSON string is invalid with respect to PointLinks
   */
  public static PointLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PointLinks.class);
  }

  /**
   * Convert an instance of PointLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

