/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PropertyError;
import org.openapitools.client.model.StreamAnnotation;
import org.openapitools.client.model.WebException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExtendedTimedValue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExtendedTimedValue {
  public static final String SERIALIZED_NAME_ANNOTATED = "Annotated";
  @SerializedName(SERIALIZED_NAME_ANNOTATED)
  private Boolean annotated;

  public static final String SERIALIZED_NAME_ANNOTATIONS = "Annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private List<StreamAnnotation> annotations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERRORS = "Errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<PropertyError> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_GOOD = "Good";
  @SerializedName(SERIALIZED_NAME_GOOD)
  private Boolean good;

  public static final String SERIALIZED_NAME_QUESTIONABLE = "Questionable";
  @SerializedName(SERIALIZED_NAME_QUESTIONABLE)
  private Boolean questionable;

  public static final String SERIALIZED_NAME_SUBSTITUTED = "Substituted";
  @SerializedName(SERIALIZED_NAME_SUBSTITUTED)
  private Boolean substituted;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_UNITS_ABBREVIATION = "UnitsAbbreviation";
  @SerializedName(SERIALIZED_NAME_UNITS_ABBREVIATION)
  private String unitsAbbreviation;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Object value;

  public static final String SERIALIZED_NAME_WEB_EXCEPTION = "WebException";
  @SerializedName(SERIALIZED_NAME_WEB_EXCEPTION)
  private WebException webException;

  public ExtendedTimedValue() {
  }

  public ExtendedTimedValue annotated(Boolean annotated) {
    this.annotated = annotated;
    return this;
  }

  /**
   * Get annotated
   * @return annotated
   */
  @javax.annotation.Nullable
  public Boolean getAnnotated() {
    return annotated;
  }

  public void setAnnotated(Boolean annotated) {
    this.annotated = annotated;
  }


  public ExtendedTimedValue annotations(List<StreamAnnotation> annotations) {
    this.annotations = annotations;
    return this;
  }

  public ExtendedTimedValue addAnnotationsItem(StreamAnnotation annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new ArrayList<>();
    }
    this.annotations.add(annotationsItem);
    return this;
  }

  /**
   * Get annotations
   * @return annotations
   */
  @javax.annotation.Nullable
  public List<StreamAnnotation> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(List<StreamAnnotation> annotations) {
    this.annotations = annotations;
  }


  public ExtendedTimedValue errors(List<PropertyError> errors) {
    this.errors = errors;
    return this;
  }

  public ExtendedTimedValue addErrorsItem(PropertyError errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nullable
  public List<PropertyError> getErrors() {
    return errors;
  }

  public void setErrors(List<PropertyError> errors) {
    this.errors = errors;
  }


  public ExtendedTimedValue good(Boolean good) {
    this.good = good;
    return this;
  }

  /**
   * Get good
   * @return good
   */
  @javax.annotation.Nullable
  public Boolean getGood() {
    return good;
  }

  public void setGood(Boolean good) {
    this.good = good;
  }


  public ExtendedTimedValue questionable(Boolean questionable) {
    this.questionable = questionable;
    return this;
  }

  /**
   * Get questionable
   * @return questionable
   */
  @javax.annotation.Nullable
  public Boolean getQuestionable() {
    return questionable;
  }

  public void setQuestionable(Boolean questionable) {
    this.questionable = questionable;
  }


  public ExtendedTimedValue substituted(Boolean substituted) {
    this.substituted = substituted;
    return this;
  }

  /**
   * Get substituted
   * @return substituted
   */
  @javax.annotation.Nullable
  public Boolean getSubstituted() {
    return substituted;
  }

  public void setSubstituted(Boolean substituted) {
    this.substituted = substituted;
  }


  public ExtendedTimedValue timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public ExtendedTimedValue unitsAbbreviation(String unitsAbbreviation) {
    this.unitsAbbreviation = unitsAbbreviation;
    return this;
  }

  /**
   * Get unitsAbbreviation
   * @return unitsAbbreviation
   */
  @javax.annotation.Nullable
  public String getUnitsAbbreviation() {
    return unitsAbbreviation;
  }

  public void setUnitsAbbreviation(String unitsAbbreviation) {
    this.unitsAbbreviation = unitsAbbreviation;
  }


  public ExtendedTimedValue value(Object value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public Object getValue() {
    return value;
  }

  public void setValue(Object value) {
    this.value = value;
  }


  public ExtendedTimedValue webException(WebException webException) {
    this.webException = webException;
    return this;
  }

  /**
   * Get webException
   * @return webException
   */
  @javax.annotation.Nullable
  public WebException getWebException() {
    return webException;
  }

  public void setWebException(WebException webException) {
    this.webException = webException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtendedTimedValue extendedTimedValue = (ExtendedTimedValue) o;
    return Objects.equals(this.annotated, extendedTimedValue.annotated) &&
        Objects.equals(this.annotations, extendedTimedValue.annotations) &&
        Objects.equals(this.errors, extendedTimedValue.errors) &&
        Objects.equals(this.good, extendedTimedValue.good) &&
        Objects.equals(this.questionable, extendedTimedValue.questionable) &&
        Objects.equals(this.substituted, extendedTimedValue.substituted) &&
        Objects.equals(this.timestamp, extendedTimedValue.timestamp) &&
        Objects.equals(this.unitsAbbreviation, extendedTimedValue.unitsAbbreviation) &&
        Objects.equals(this.value, extendedTimedValue.value) &&
        Objects.equals(this.webException, extendedTimedValue.webException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotated, annotations, errors, good, questionable, substituted, timestamp, unitsAbbreviation, value, webException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtendedTimedValue {\n");
    sb.append("    annotated: ").append(toIndentedString(annotated)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    good: ").append(toIndentedString(good)).append("\n");
    sb.append("    questionable: ").append(toIndentedString(questionable)).append("\n");
    sb.append("    substituted: ").append(toIndentedString(substituted)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    unitsAbbreviation: ").append(toIndentedString(unitsAbbreviation)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    webException: ").append(toIndentedString(webException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Annotated");
    openapiFields.add("Annotations");
    openapiFields.add("Errors");
    openapiFields.add("Good");
    openapiFields.add("Questionable");
    openapiFields.add("Substituted");
    openapiFields.add("Timestamp");
    openapiFields.add("UnitsAbbreviation");
    openapiFields.add("Value");
    openapiFields.add("WebException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExtendedTimedValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExtendedTimedValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExtendedTimedValue is not found in the empty JSON string", ExtendedTimedValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExtendedTimedValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExtendedTimedValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Annotations") != null && !jsonObj.get("Annotations").isJsonNull()) {
        JsonArray jsonArrayannotations = jsonObj.getAsJsonArray("Annotations");
        if (jsonArrayannotations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Annotations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Annotations` to be an array in the JSON string but got `%s`", jsonObj.get("Annotations").toString()));
          }

          // validate the optional field `Annotations` (array)
          for (int i = 0; i < jsonArrayannotations.size(); i++) {
            StreamAnnotation.validateJsonElement(jsonArrayannotations.get(i));
          };
        }
      }
      if (jsonObj.get("Errors") != null && !jsonObj.get("Errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("Errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Errors` to be an array in the JSON string but got `%s`", jsonObj.get("Errors").toString()));
          }

          // validate the optional field `Errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            PropertyError.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("UnitsAbbreviation") != null && !jsonObj.get("UnitsAbbreviation").isJsonNull()) && !jsonObj.get("UnitsAbbreviation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UnitsAbbreviation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UnitsAbbreviation").toString()));
      }
      // validate the optional field `WebException`
      if (jsonObj.get("WebException") != null && !jsonObj.get("WebException").isJsonNull()) {
        WebException.validateJsonElement(jsonObj.get("WebException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExtendedTimedValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExtendedTimedValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExtendedTimedValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExtendedTimedValue.class));

       return (TypeAdapter<T>) new TypeAdapter<ExtendedTimedValue>() {
           @Override
           public void write(JsonWriter out, ExtendedTimedValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExtendedTimedValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExtendedTimedValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExtendedTimedValue
   * @throws IOException if the JSON string is invalid with respect to ExtendedTimedValue
   */
  public static ExtendedTimedValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExtendedTimedValue.class);
  }

  /**
   * Convert an instance of ExtendedTimedValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

