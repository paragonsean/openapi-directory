/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.PointLinks;
import org.openapitools.client.model.WebException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Point
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Point {
  public static final String SERIALIZED_NAME_DESCRIPTOR = "Descriptor";
  @SerializedName(SERIALIZED_NAME_DESCRIPTOR)
  private String descriptor;

  public static final String SERIALIZED_NAME_DIGITAL_SET_NAME = "DigitalSetName";
  @SerializedName(SERIALIZED_NAME_DIGITAL_SET_NAME)
  private String digitalSetName;

  public static final String SERIALIZED_NAME_DISPLAY_DIGITS = "DisplayDigits";
  @SerializedName(SERIALIZED_NAME_DISPLAY_DIGITS)
  private Integer displayDigits;

  public static final String SERIALIZED_NAME_ENGINEERING_UNITS = "EngineeringUnits";
  @SerializedName(SERIALIZED_NAME_ENGINEERING_UNITS)
  private String engineeringUnits;

  public static final String SERIALIZED_NAME_FUTURE = "Future";
  @SerializedName(SERIALIZED_NAME_FUTURE)
  private Boolean future;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LINKS = "Links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private PointLinks links;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_POINT_CLASS = "PointClass";
  @SerializedName(SERIALIZED_NAME_POINT_CLASS)
  private String pointClass;

  public static final String SERIALIZED_NAME_POINT_TYPE = "PointType";
  @SerializedName(SERIALIZED_NAME_POINT_TYPE)
  private String pointType;

  public static final String SERIALIZED_NAME_SPAN = "Span";
  @SerializedName(SERIALIZED_NAME_SPAN)
  private BigDecimal span;

  public static final String SERIALIZED_NAME_STEP = "Step";
  @SerializedName(SERIALIZED_NAME_STEP)
  private Boolean step;

  public static final String SERIALIZED_NAME_WEB_EXCEPTION = "WebException";
  @SerializedName(SERIALIZED_NAME_WEB_EXCEPTION)
  private WebException webException;

  public static final String SERIALIZED_NAME_WEB_ID = "WebId";
  @SerializedName(SERIALIZED_NAME_WEB_ID)
  private String webId;

  public static final String SERIALIZED_NAME_ZERO = "Zero";
  @SerializedName(SERIALIZED_NAME_ZERO)
  private BigDecimal zero;

  public Point() {
  }

  public Point descriptor(String descriptor) {
    this.descriptor = descriptor;
    return this;
  }

  /**
   * Get descriptor
   * @return descriptor
   */
  @javax.annotation.Nullable
  public String getDescriptor() {
    return descriptor;
  }

  public void setDescriptor(String descriptor) {
    this.descriptor = descriptor;
  }


  public Point digitalSetName(String digitalSetName) {
    this.digitalSetName = digitalSetName;
    return this;
  }

  /**
   * Get digitalSetName
   * @return digitalSetName
   */
  @javax.annotation.Nullable
  public String getDigitalSetName() {
    return digitalSetName;
  }

  public void setDigitalSetName(String digitalSetName) {
    this.digitalSetName = digitalSetName;
  }


  public Point displayDigits(Integer displayDigits) {
    this.displayDigits = displayDigits;
    return this;
  }

  /**
   * Get displayDigits
   * @return displayDigits
   */
  @javax.annotation.Nullable
  public Integer getDisplayDigits() {
    return displayDigits;
  }

  public void setDisplayDigits(Integer displayDigits) {
    this.displayDigits = displayDigits;
  }


  public Point engineeringUnits(String engineeringUnits) {
    this.engineeringUnits = engineeringUnits;
    return this;
  }

  /**
   * Get engineeringUnits
   * @return engineeringUnits
   */
  @javax.annotation.Nullable
  public String getEngineeringUnits() {
    return engineeringUnits;
  }

  public void setEngineeringUnits(String engineeringUnits) {
    this.engineeringUnits = engineeringUnits;
  }


  public Point future(Boolean future) {
    this.future = future;
    return this;
  }

  /**
   * Get future
   * @return future
   */
  @javax.annotation.Nullable
  public Boolean getFuture() {
    return future;
  }

  public void setFuture(Boolean future) {
    this.future = future;
  }


  public Point id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Point links(PointLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public PointLinks getLinks() {
    return links;
  }

  public void setLinks(PointLinks links) {
    this.links = links;
  }


  public Point name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Point path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public Point pointClass(String pointClass) {
    this.pointClass = pointClass;
    return this;
  }

  /**
   * Get pointClass
   * @return pointClass
   */
  @javax.annotation.Nullable
  public String getPointClass() {
    return pointClass;
  }

  public void setPointClass(String pointClass) {
    this.pointClass = pointClass;
  }


  public Point pointType(String pointType) {
    this.pointType = pointType;
    return this;
  }

  /**
   * Get pointType
   * @return pointType
   */
  @javax.annotation.Nullable
  public String getPointType() {
    return pointType;
  }

  public void setPointType(String pointType) {
    this.pointType = pointType;
  }


  public Point span(BigDecimal span) {
    this.span = span;
    return this;
  }

  /**
   * Get span
   * @return span
   */
  @javax.annotation.Nullable
  public BigDecimal getSpan() {
    return span;
  }

  public void setSpan(BigDecimal span) {
    this.span = span;
  }


  public Point step(Boolean step) {
    this.step = step;
    return this;
  }

  /**
   * Get step
   * @return step
   */
  @javax.annotation.Nullable
  public Boolean getStep() {
    return step;
  }

  public void setStep(Boolean step) {
    this.step = step;
  }


  public Point webException(WebException webException) {
    this.webException = webException;
    return this;
  }

  /**
   * Get webException
   * @return webException
   */
  @javax.annotation.Nullable
  public WebException getWebException() {
    return webException;
  }

  public void setWebException(WebException webException) {
    this.webException = webException;
  }


  public Point webId(String webId) {
    this.webId = webId;
    return this;
  }

  /**
   * Get webId
   * @return webId
   */
  @javax.annotation.Nullable
  public String getWebId() {
    return webId;
  }

  public void setWebId(String webId) {
    this.webId = webId;
  }


  public Point zero(BigDecimal zero) {
    this.zero = zero;
    return this;
  }

  /**
   * Get zero
   * @return zero
   */
  @javax.annotation.Nullable
  public BigDecimal getZero() {
    return zero;
  }

  public void setZero(BigDecimal zero) {
    this.zero = zero;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Point point = (Point) o;
    return Objects.equals(this.descriptor, point.descriptor) &&
        Objects.equals(this.digitalSetName, point.digitalSetName) &&
        Objects.equals(this.displayDigits, point.displayDigits) &&
        Objects.equals(this.engineeringUnits, point.engineeringUnits) &&
        Objects.equals(this.future, point.future) &&
        Objects.equals(this.id, point.id) &&
        Objects.equals(this.links, point.links) &&
        Objects.equals(this.name, point.name) &&
        Objects.equals(this.path, point.path) &&
        Objects.equals(this.pointClass, point.pointClass) &&
        Objects.equals(this.pointType, point.pointType) &&
        Objects.equals(this.span, point.span) &&
        Objects.equals(this.step, point.step) &&
        Objects.equals(this.webException, point.webException) &&
        Objects.equals(this.webId, point.webId) &&
        Objects.equals(this.zero, point.zero);
  }

  @Override
  public int hashCode() {
    return Objects.hash(descriptor, digitalSetName, displayDigits, engineeringUnits, future, id, links, name, path, pointClass, pointType, span, step, webException, webId, zero);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Point {\n");
    sb.append("    descriptor: ").append(toIndentedString(descriptor)).append("\n");
    sb.append("    digitalSetName: ").append(toIndentedString(digitalSetName)).append("\n");
    sb.append("    displayDigits: ").append(toIndentedString(displayDigits)).append("\n");
    sb.append("    engineeringUnits: ").append(toIndentedString(engineeringUnits)).append("\n");
    sb.append("    future: ").append(toIndentedString(future)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    pointClass: ").append(toIndentedString(pointClass)).append("\n");
    sb.append("    pointType: ").append(toIndentedString(pointType)).append("\n");
    sb.append("    span: ").append(toIndentedString(span)).append("\n");
    sb.append("    step: ").append(toIndentedString(step)).append("\n");
    sb.append("    webException: ").append(toIndentedString(webException)).append("\n");
    sb.append("    webId: ").append(toIndentedString(webId)).append("\n");
    sb.append("    zero: ").append(toIndentedString(zero)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Descriptor");
    openapiFields.add("DigitalSetName");
    openapiFields.add("DisplayDigits");
    openapiFields.add("EngineeringUnits");
    openapiFields.add("Future");
    openapiFields.add("Id");
    openapiFields.add("Links");
    openapiFields.add("Name");
    openapiFields.add("Path");
    openapiFields.add("PointClass");
    openapiFields.add("PointType");
    openapiFields.add("Span");
    openapiFields.add("Step");
    openapiFields.add("WebException");
    openapiFields.add("WebId");
    openapiFields.add("Zero");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Point
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Point.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Point is not found in the empty JSON string", Point.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Point.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Point` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Descriptor") != null && !jsonObj.get("Descriptor").isJsonNull()) && !jsonObj.get("Descriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Descriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Descriptor").toString()));
      }
      if ((jsonObj.get("DigitalSetName") != null && !jsonObj.get("DigitalSetName").isJsonNull()) && !jsonObj.get("DigitalSetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DigitalSetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DigitalSetName").toString()));
      }
      if ((jsonObj.get("EngineeringUnits") != null && !jsonObj.get("EngineeringUnits").isJsonNull()) && !jsonObj.get("EngineeringUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EngineeringUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EngineeringUnits").toString()));
      }
      // validate the optional field `Links`
      if (jsonObj.get("Links") != null && !jsonObj.get("Links").isJsonNull()) {
        PointLinks.validateJsonElement(jsonObj.get("Links"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      if ((jsonObj.get("PointClass") != null && !jsonObj.get("PointClass").isJsonNull()) && !jsonObj.get("PointClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PointClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PointClass").toString()));
      }
      if ((jsonObj.get("PointType") != null && !jsonObj.get("PointType").isJsonNull()) && !jsonObj.get("PointType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PointType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PointType").toString()));
      }
      // validate the optional field `WebException`
      if (jsonObj.get("WebException") != null && !jsonObj.get("WebException").isJsonNull()) {
        WebException.validateJsonElement(jsonObj.get("WebException"));
      }
      if ((jsonObj.get("WebId") != null && !jsonObj.get("WebId").isJsonNull()) && !jsonObj.get("WebId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Point.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Point' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Point> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Point.class));

       return (TypeAdapter<T>) new TypeAdapter<Point>() {
           @Override
           public void write(JsonWriter out, Point value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Point read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Point given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Point
   * @throws IOException if the JSON string is invalid with respect to Point
   */
  public static Point fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Point.class);
  }

  /**
   * Convert an instance of Point to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

