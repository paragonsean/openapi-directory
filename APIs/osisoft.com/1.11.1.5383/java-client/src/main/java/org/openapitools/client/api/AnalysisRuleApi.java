/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnalysisRule;
import org.openapitools.client.model.ItemsAnalysisRule;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalysisRuleApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnalysisRuleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalysisRuleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for analysisRuleCreateAnalysisRule
     * @param webId The ID of the parent Analysis Rule, on which to create the child Analysis Rule. (required)
     * @param analysisRule The definition of the new Analysis Rule. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Analysis Rule was created. The response&#39;s Location header is a link to the created Analysis Rule. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analysisRuleCreateAnalysisRuleCall(String webId, AnalysisRule analysisRule, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analysisRule;

        // create path and map variables
        String localVarPath = "/analysisrules/{webId}/analysisrules"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analysisRuleCreateAnalysisRuleValidateBeforeCall(String webId, AnalysisRule analysisRule, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling analysisRuleCreateAnalysisRule(Async)");
        }

        // verify the required parameter 'analysisRule' is set
        if (analysisRule == null) {
            throw new ApiException("Missing the required parameter 'analysisRule' when calling analysisRuleCreateAnalysisRule(Async)");
        }

        return analysisRuleCreateAnalysisRuleCall(webId, analysisRule, webIdType, _callback);

    }

    /**
     * Create a new Analysis Rule as a child of an existing Analysis Rule.
     * 
     * @param webId The ID of the parent Analysis Rule, on which to create the child Analysis Rule. (required)
     * @param analysisRule The definition of the new Analysis Rule. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Analysis Rule was created. The response&#39;s Location header is a link to the created Analysis Rule. </td><td>  -  </td></tr>
     </table>
     */
    public void analysisRuleCreateAnalysisRule(String webId, AnalysisRule analysisRule, String webIdType) throws ApiException {
        analysisRuleCreateAnalysisRuleWithHttpInfo(webId, analysisRule, webIdType);
    }

    /**
     * Create a new Analysis Rule as a child of an existing Analysis Rule.
     * 
     * @param webId The ID of the parent Analysis Rule, on which to create the child Analysis Rule. (required)
     * @param analysisRule The definition of the new Analysis Rule. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Analysis Rule was created. The response&#39;s Location header is a link to the created Analysis Rule. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analysisRuleCreateAnalysisRuleWithHttpInfo(String webId, AnalysisRule analysisRule, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = analysisRuleCreateAnalysisRuleValidateBeforeCall(webId, analysisRule, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new Analysis Rule as a child of an existing Analysis Rule. (asynchronously)
     * 
     * @param webId The ID of the parent Analysis Rule, on which to create the child Analysis Rule. (required)
     * @param analysisRule The definition of the new Analysis Rule. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Analysis Rule was created. The response&#39;s Location header is a link to the created Analysis Rule. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analysisRuleCreateAnalysisRuleAsync(String webId, AnalysisRule analysisRule, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analysisRuleCreateAnalysisRuleValidateBeforeCall(webId, analysisRule, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analysisRuleDelete
     * @param webId The ID of the Analysis Rule. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Analysis Rule was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analysisRuleDeleteCall(String webId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analysisrules/{webId}"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analysisRuleDeleteValidateBeforeCall(String webId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling analysisRuleDelete(Async)");
        }

        return analysisRuleDeleteCall(webId, _callback);

    }

    /**
     * Delete an Analysis Rule.
     * 
     * @param webId The ID of the Analysis Rule. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Analysis Rule was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void analysisRuleDelete(String webId) throws ApiException {
        analysisRuleDeleteWithHttpInfo(webId);
    }

    /**
     * Delete an Analysis Rule.
     * 
     * @param webId The ID of the Analysis Rule. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Analysis Rule was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analysisRuleDeleteWithHttpInfo(String webId) throws ApiException {
        okhttp3.Call localVarCall = analysisRuleDeleteValidateBeforeCall(webId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an Analysis Rule. (asynchronously)
     * 
     * @param webId The ID of the Analysis Rule. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Analysis Rule was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analysisRuleDeleteAsync(String webId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analysisRuleDeleteValidateBeforeCall(webId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analysisRuleGet
     * @param webId The ID of the Analysis Rule. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Analysis Rule. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analysisRuleGetCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analysisrules/{webId}"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analysisRuleGetValidateBeforeCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling analysisRuleGet(Async)");
        }

        return analysisRuleGetCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve an Analysis Rule.
     * 
     * @param webId The ID of the Analysis Rule. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return AnalysisRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Analysis Rule. </td><td>  -  </td></tr>
     </table>
     */
    public AnalysisRule analysisRuleGet(String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<AnalysisRule> localVarResp = analysisRuleGetWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Analysis Rule.
     * 
     * @param webId The ID of the Analysis Rule. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;AnalysisRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Analysis Rule. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalysisRule> analysisRuleGetWithHttpInfo(String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = analysisRuleGetValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<AnalysisRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Analysis Rule. (asynchronously)
     * 
     * @param webId The ID of the Analysis Rule. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Analysis Rule. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analysisRuleGetAsync(String webId, String selectedFields, String webIdType, final ApiCallback<AnalysisRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = analysisRuleGetValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<AnalysisRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analysisRuleGetAnalysisRules
     * @param webId The ID of the parent Analysis Rule. (required)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding Analysis Rules. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include Analysis Rules nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of child Analysis Rules. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analysisRuleGetAnalysisRulesCall(String webId, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analysisrules/{webId}/analysisrules"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (searchFullHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFullHierarchy", searchFullHierarchy));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analysisRuleGetAnalysisRulesValidateBeforeCall(String webId, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling analysisRuleGetAnalysisRules(Async)");
        }

        return analysisRuleGetAnalysisRulesCall(webId, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, webIdType, _callback);

    }

    /**
     * Get the child Analysis Rules of the Analysis Rule.
     * 
     * @param webId The ID of the parent Analysis Rule. (required)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding Analysis Rules. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include Analysis Rules nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsAnalysisRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of child Analysis Rules. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsAnalysisRule analysisRuleGetAnalysisRules(String webId, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType) throws ApiException {
        ApiResponse<ItemsAnalysisRule> localVarResp = analysisRuleGetAnalysisRulesWithHttpInfo(webId, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, webIdType);
        return localVarResp.getData();
    }

    /**
     * Get the child Analysis Rules of the Analysis Rule.
     * 
     * @param webId The ID of the parent Analysis Rule. (required)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding Analysis Rules. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include Analysis Rules nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsAnalysisRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of child Analysis Rules. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsAnalysisRule> analysisRuleGetAnalysisRulesWithHttpInfo(String webId, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = analysisRuleGetAnalysisRulesValidateBeforeCall(webId, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsAnalysisRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the child Analysis Rules of the Analysis Rule. (asynchronously)
     * 
     * @param webId The ID of the parent Analysis Rule. (required)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding Analysis Rules. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include Analysis Rules nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of child Analysis Rules. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analysisRuleGetAnalysisRulesAsync(String webId, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType, final ApiCallback<ItemsAnalysisRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = analysisRuleGetAnalysisRulesValidateBeforeCall(webId, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsAnalysisRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analysisRuleGetByPath
     * @param path The path to the Analysis Rule. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Analysis Rule. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analysisRuleGetByPathCall(String path, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analysisrules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analysisRuleGetByPathValidateBeforeCall(String path, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling analysisRuleGetByPath(Async)");
        }

        return analysisRuleGetByPathCall(path, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve an Analysis Rule by path.
     * This method returns an Analysis Rule based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the Analysis Rule. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return AnalysisRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Analysis Rule. </td><td>  -  </td></tr>
     </table>
     */
    public AnalysisRule analysisRuleGetByPath(String path, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<AnalysisRule> localVarResp = analysisRuleGetByPathWithHttpInfo(path, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve an Analysis Rule by path.
     * This method returns an Analysis Rule based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the Analysis Rule. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;AnalysisRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Analysis Rule. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalysisRule> analysisRuleGetByPathWithHttpInfo(String path, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = analysisRuleGetByPathValidateBeforeCall(path, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<AnalysisRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an Analysis Rule by path. (asynchronously)
     * This method returns an Analysis Rule based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the Analysis Rule. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested Analysis Rule. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analysisRuleGetByPathAsync(String path, String selectedFields, String webIdType, final ApiCallback<AnalysisRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = analysisRuleGetByPathValidateBeforeCall(path, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<AnalysisRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analysisRuleUpdate
     * @param webId The ID of the Analysis Rule. (required)
     * @param analysisRule A partial Analysis Rule containing the desired changes. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Analysis Rule was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analysisRuleUpdateCall(String webId, AnalysisRule analysisRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analysisRule;

        // create path and map variables
        String localVarPath = "/analysisrules/{webId}"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analysisRuleUpdateValidateBeforeCall(String webId, AnalysisRule analysisRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling analysisRuleUpdate(Async)");
        }

        // verify the required parameter 'analysisRule' is set
        if (analysisRule == null) {
            throw new ApiException("Missing the required parameter 'analysisRule' when calling analysisRuleUpdate(Async)");
        }

        return analysisRuleUpdateCall(webId, analysisRule, _callback);

    }

    /**
     * Update an Analysis Rule by replacing items in its definition.
     * 
     * @param webId The ID of the Analysis Rule. (required)
     * @param analysisRule A partial Analysis Rule containing the desired changes. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Analysis Rule was updated. </td><td>  -  </td></tr>
     </table>
     */
    public void analysisRuleUpdate(String webId, AnalysisRule analysisRule) throws ApiException {
        analysisRuleUpdateWithHttpInfo(webId, analysisRule);
    }

    /**
     * Update an Analysis Rule by replacing items in its definition.
     * 
     * @param webId The ID of the Analysis Rule. (required)
     * @param analysisRule A partial Analysis Rule containing the desired changes. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Analysis Rule was updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analysisRuleUpdateWithHttpInfo(String webId, AnalysisRule analysisRule) throws ApiException {
        okhttp3.Call localVarCall = analysisRuleUpdateValidateBeforeCall(webId, analysisRule, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an Analysis Rule by replacing items in its definition. (asynchronously)
     * 
     * @param webId The ID of the Analysis Rule. (required)
     * @param analysisRule A partial Analysis Rule containing the desired changes. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Analysis Rule was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analysisRuleUpdateAsync(String webId, AnalysisRule analysisRule, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analysisRuleUpdateValidateBeforeCall(webId, analysisRule, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
