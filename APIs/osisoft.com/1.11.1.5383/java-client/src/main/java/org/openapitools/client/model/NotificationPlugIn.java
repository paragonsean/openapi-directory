/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.DeliveryChannelPlugInLinks;
import org.openapitools.client.model.WebException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NotificationPlugIn
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationPlugIn {
  public static final String SERIALIZED_NAME_ASSEMBLY_FILE_NAME = "AssemblyFileName";
  @SerializedName(SERIALIZED_NAME_ASSEMBLY_FILE_NAME)
  private String assemblyFileName;

  public static final String SERIALIZED_NAME_ASSEMBLY_I_D = "AssemblyID";
  @SerializedName(SERIALIZED_NAME_ASSEMBLY_I_D)
  private UUID assemblyID;

  public static final String SERIALIZED_NAME_ASSEMBLY_LOAD_PROPERTIES = "AssemblyLoadProperties";
  @SerializedName(SERIALIZED_NAME_ASSEMBLY_LOAD_PROPERTIES)
  private List<String> assemblyLoadProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSEMBLY_TIME = "AssemblyTime";
  @SerializedName(SERIALIZED_NAME_ASSEMBLY_TIME)
  private OffsetDateTime assemblyTime;

  public static final String SERIALIZED_NAME_COMPATIBILITY_VERSION = "CompatibilityVersion";
  @SerializedName(SERIALIZED_NAME_COMPATIBILITY_VERSION)
  private Integer compatibilityVersion;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IS_BROWSABLE = "IsBrowsable";
  @SerializedName(SERIALIZED_NAME_IS_BROWSABLE)
  private Boolean isBrowsable;

  public static final String SERIALIZED_NAME_IS_NON_EDITABLE_CONFIG = "IsNonEditableConfig";
  @SerializedName(SERIALIZED_NAME_IS_NON_EDITABLE_CONFIG)
  private Boolean isNonEditableConfig;

  public static final String SERIALIZED_NAME_LINKS = "Links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private DeliveryChannelPlugInLinks links;

  public static final String SERIALIZED_NAME_LOADED_ASSEMBLY_TIME = "LoadedAssemblyTime";
  @SerializedName(SERIALIZED_NAME_LOADED_ASSEMBLY_TIME)
  private OffsetDateTime loadedAssemblyTime;

  public static final String SERIALIZED_NAME_LOADED_VERSION = "LoadedVersion";
  @SerializedName(SERIALIZED_NAME_LOADED_VERSION)
  private String loadedVersion;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_WEB_EXCEPTION = "WebException";
  @SerializedName(SERIALIZED_NAME_WEB_EXCEPTION)
  private WebException webException;

  public static final String SERIALIZED_NAME_WEB_ID = "WebId";
  @SerializedName(SERIALIZED_NAME_WEB_ID)
  private String webId;

  public NotificationPlugIn() {
  }

  public NotificationPlugIn assemblyFileName(String assemblyFileName) {
    this.assemblyFileName = assemblyFileName;
    return this;
  }

  /**
   * Get assemblyFileName
   * @return assemblyFileName
   */
  @javax.annotation.Nullable
  public String getAssemblyFileName() {
    return assemblyFileName;
  }

  public void setAssemblyFileName(String assemblyFileName) {
    this.assemblyFileName = assemblyFileName;
  }


  public NotificationPlugIn assemblyID(UUID assemblyID) {
    this.assemblyID = assemblyID;
    return this;
  }

  /**
   * Get assemblyID
   * @return assemblyID
   */
  @javax.annotation.Nullable
  public UUID getAssemblyID() {
    return assemblyID;
  }

  public void setAssemblyID(UUID assemblyID) {
    this.assemblyID = assemblyID;
  }


  public NotificationPlugIn assemblyLoadProperties(List<String> assemblyLoadProperties) {
    this.assemblyLoadProperties = assemblyLoadProperties;
    return this;
  }

  public NotificationPlugIn addAssemblyLoadPropertiesItem(String assemblyLoadPropertiesItem) {
    if (this.assemblyLoadProperties == null) {
      this.assemblyLoadProperties = new ArrayList<>();
    }
    this.assemblyLoadProperties.add(assemblyLoadPropertiesItem);
    return this;
  }

  /**
   * Get assemblyLoadProperties
   * @return assemblyLoadProperties
   */
  @javax.annotation.Nullable
  public List<String> getAssemblyLoadProperties() {
    return assemblyLoadProperties;
  }

  public void setAssemblyLoadProperties(List<String> assemblyLoadProperties) {
    this.assemblyLoadProperties = assemblyLoadProperties;
  }


  public NotificationPlugIn assemblyTime(OffsetDateTime assemblyTime) {
    this.assemblyTime = assemblyTime;
    return this;
  }

  /**
   * Get assemblyTime
   * @return assemblyTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAssemblyTime() {
    return assemblyTime;
  }

  public void setAssemblyTime(OffsetDateTime assemblyTime) {
    this.assemblyTime = assemblyTime;
  }


  public NotificationPlugIn compatibilityVersion(Integer compatibilityVersion) {
    this.compatibilityVersion = compatibilityVersion;
    return this;
  }

  /**
   * Get compatibilityVersion
   * @return compatibilityVersion
   */
  @javax.annotation.Nullable
  public Integer getCompatibilityVersion() {
    return compatibilityVersion;
  }

  public void setCompatibilityVersion(Integer compatibilityVersion) {
    this.compatibilityVersion = compatibilityVersion;
  }


  public NotificationPlugIn description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NotificationPlugIn id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public NotificationPlugIn isBrowsable(Boolean isBrowsable) {
    this.isBrowsable = isBrowsable;
    return this;
  }

  /**
   * Get isBrowsable
   * @return isBrowsable
   */
  @javax.annotation.Nullable
  public Boolean getIsBrowsable() {
    return isBrowsable;
  }

  public void setIsBrowsable(Boolean isBrowsable) {
    this.isBrowsable = isBrowsable;
  }


  public NotificationPlugIn isNonEditableConfig(Boolean isNonEditableConfig) {
    this.isNonEditableConfig = isNonEditableConfig;
    return this;
  }

  /**
   * Get isNonEditableConfig
   * @return isNonEditableConfig
   */
  @javax.annotation.Nullable
  public Boolean getIsNonEditableConfig() {
    return isNonEditableConfig;
  }

  public void setIsNonEditableConfig(Boolean isNonEditableConfig) {
    this.isNonEditableConfig = isNonEditableConfig;
  }


  public NotificationPlugIn links(DeliveryChannelPlugInLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public DeliveryChannelPlugInLinks getLinks() {
    return links;
  }

  public void setLinks(DeliveryChannelPlugInLinks links) {
    this.links = links;
  }


  public NotificationPlugIn loadedAssemblyTime(OffsetDateTime loadedAssemblyTime) {
    this.loadedAssemblyTime = loadedAssemblyTime;
    return this;
  }

  /**
   * Get loadedAssemblyTime
   * @return loadedAssemblyTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLoadedAssemblyTime() {
    return loadedAssemblyTime;
  }

  public void setLoadedAssemblyTime(OffsetDateTime loadedAssemblyTime) {
    this.loadedAssemblyTime = loadedAssemblyTime;
  }


  public NotificationPlugIn loadedVersion(String loadedVersion) {
    this.loadedVersion = loadedVersion;
    return this;
  }

  /**
   * Get loadedVersion
   * @return loadedVersion
   */
  @javax.annotation.Nullable
  public String getLoadedVersion() {
    return loadedVersion;
  }

  public void setLoadedVersion(String loadedVersion) {
    this.loadedVersion = loadedVersion;
  }


  public NotificationPlugIn name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NotificationPlugIn path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public NotificationPlugIn version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public NotificationPlugIn webException(WebException webException) {
    this.webException = webException;
    return this;
  }

  /**
   * Get webException
   * @return webException
   */
  @javax.annotation.Nullable
  public WebException getWebException() {
    return webException;
  }

  public void setWebException(WebException webException) {
    this.webException = webException;
  }


  public NotificationPlugIn webId(String webId) {
    this.webId = webId;
    return this;
  }

  /**
   * Get webId
   * @return webId
   */
  @javax.annotation.Nullable
  public String getWebId() {
    return webId;
  }

  public void setWebId(String webId) {
    this.webId = webId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationPlugIn notificationPlugIn = (NotificationPlugIn) o;
    return Objects.equals(this.assemblyFileName, notificationPlugIn.assemblyFileName) &&
        Objects.equals(this.assemblyID, notificationPlugIn.assemblyID) &&
        Objects.equals(this.assemblyLoadProperties, notificationPlugIn.assemblyLoadProperties) &&
        Objects.equals(this.assemblyTime, notificationPlugIn.assemblyTime) &&
        Objects.equals(this.compatibilityVersion, notificationPlugIn.compatibilityVersion) &&
        Objects.equals(this.description, notificationPlugIn.description) &&
        Objects.equals(this.id, notificationPlugIn.id) &&
        Objects.equals(this.isBrowsable, notificationPlugIn.isBrowsable) &&
        Objects.equals(this.isNonEditableConfig, notificationPlugIn.isNonEditableConfig) &&
        Objects.equals(this.links, notificationPlugIn.links) &&
        Objects.equals(this.loadedAssemblyTime, notificationPlugIn.loadedAssemblyTime) &&
        Objects.equals(this.loadedVersion, notificationPlugIn.loadedVersion) &&
        Objects.equals(this.name, notificationPlugIn.name) &&
        Objects.equals(this.path, notificationPlugIn.path) &&
        Objects.equals(this.version, notificationPlugIn.version) &&
        Objects.equals(this.webException, notificationPlugIn.webException) &&
        Objects.equals(this.webId, notificationPlugIn.webId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assemblyFileName, assemblyID, assemblyLoadProperties, assemblyTime, compatibilityVersion, description, id, isBrowsable, isNonEditableConfig, links, loadedAssemblyTime, loadedVersion, name, path, version, webException, webId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationPlugIn {\n");
    sb.append("    assemblyFileName: ").append(toIndentedString(assemblyFileName)).append("\n");
    sb.append("    assemblyID: ").append(toIndentedString(assemblyID)).append("\n");
    sb.append("    assemblyLoadProperties: ").append(toIndentedString(assemblyLoadProperties)).append("\n");
    sb.append("    assemblyTime: ").append(toIndentedString(assemblyTime)).append("\n");
    sb.append("    compatibilityVersion: ").append(toIndentedString(compatibilityVersion)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isBrowsable: ").append(toIndentedString(isBrowsable)).append("\n");
    sb.append("    isNonEditableConfig: ").append(toIndentedString(isNonEditableConfig)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    loadedAssemblyTime: ").append(toIndentedString(loadedAssemblyTime)).append("\n");
    sb.append("    loadedVersion: ").append(toIndentedString(loadedVersion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    webException: ").append(toIndentedString(webException)).append("\n");
    sb.append("    webId: ").append(toIndentedString(webId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssemblyFileName");
    openapiFields.add("AssemblyID");
    openapiFields.add("AssemblyLoadProperties");
    openapiFields.add("AssemblyTime");
    openapiFields.add("CompatibilityVersion");
    openapiFields.add("Description");
    openapiFields.add("Id");
    openapiFields.add("IsBrowsable");
    openapiFields.add("IsNonEditableConfig");
    openapiFields.add("Links");
    openapiFields.add("LoadedAssemblyTime");
    openapiFields.add("LoadedVersion");
    openapiFields.add("Name");
    openapiFields.add("Path");
    openapiFields.add("Version");
    openapiFields.add("WebException");
    openapiFields.add("WebId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationPlugIn
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationPlugIn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationPlugIn is not found in the empty JSON string", NotificationPlugIn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationPlugIn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationPlugIn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AssemblyFileName") != null && !jsonObj.get("AssemblyFileName").isJsonNull()) && !jsonObj.get("AssemblyFileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssemblyFileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssemblyFileName").toString()));
      }
      if ((jsonObj.get("AssemblyID") != null && !jsonObj.get("AssemblyID").isJsonNull()) && !jsonObj.get("AssemblyID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssemblyID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssemblyID").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AssemblyLoadProperties") != null && !jsonObj.get("AssemblyLoadProperties").isJsonNull() && !jsonObj.get("AssemblyLoadProperties").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssemblyLoadProperties` to be an array in the JSON string but got `%s`", jsonObj.get("AssemblyLoadProperties").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      // validate the optional field `Links`
      if (jsonObj.get("Links") != null && !jsonObj.get("Links").isJsonNull()) {
        DeliveryChannelPlugInLinks.validateJsonElement(jsonObj.get("Links"));
      }
      if ((jsonObj.get("LoadedVersion") != null && !jsonObj.get("LoadedVersion").isJsonNull()) && !jsonObj.get("LoadedVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LoadedVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LoadedVersion").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
      // validate the optional field `WebException`
      if (jsonObj.get("WebException") != null && !jsonObj.get("WebException").isJsonNull()) {
        WebException.validateJsonElement(jsonObj.get("WebException"));
      }
      if ((jsonObj.get("WebId") != null && !jsonObj.get("WebId").isJsonNull()) && !jsonObj.get("WebId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationPlugIn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationPlugIn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationPlugIn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationPlugIn.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationPlugIn>() {
           @Override
           public void write(JsonWriter out, NotificationPlugIn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationPlugIn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationPlugIn given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationPlugIn
   * @throws IOException if the JSON string is invalid with respect to NotificationPlugIn
   */
  public static NotificationPlugIn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationPlugIn.class);
  }

  /**
   * Convert an instance of NotificationPlugIn to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

