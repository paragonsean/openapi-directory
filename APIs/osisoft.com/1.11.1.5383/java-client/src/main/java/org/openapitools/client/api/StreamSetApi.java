/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsItemsSubstatus;
import org.openapitools.client.model.ItemsStreamSummaries;
import org.openapitools.client.model.ItemsStreamUpdatesRegister;
import org.openapitools.client.model.ItemsStreamUpdatesRetrieve;
import org.openapitools.client.model.ItemsStreamValue;
import org.openapitools.client.model.ItemsStreamValues;
import org.openapitools.client.model.ItemsSubstatus;
import org.openapitools.client.model.StreamValue;
import org.openapitools.client.model.StreamValues;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreamSetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StreamSetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreamSetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for streamSetGetChannel
     * @param webId The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param heartbeatRate Specifies the maximum number of consecutive empty messages that can be elapsed with no new data updates from the PI System, after which the client receives an empty payload. It helps to check if the connection is still alive. Zero/negative values correspond to no heartbeat, and the default value is no heartbeat. (optional)
     * @param includeInitialValues Specified if the channel should send a message with the current values of all the streams after the connection is opened. The default is &#39;false&#39;. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Switches to the Web Socket protocol. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetChannelCall(String webId, String categoryName, Integer heartbeatRate, Boolean includeInitialValues, String nameFilter, Boolean searchFullHierarchy, Boolean showExcluded, Boolean showHidden, String templateName, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/{webId}/channel"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryName", categoryName));
        }

        if (heartbeatRate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("heartbeatRate", heartbeatRate));
        }

        if (includeInitialValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInitialValues", includeInitialValues));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (searchFullHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFullHierarchy", searchFullHierarchy));
        }

        if (showExcluded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showExcluded", showExcluded));
        }

        if (showHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showHidden", showHidden));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateName", templateName));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetChannelValidateBeforeCall(String webId, String categoryName, Integer heartbeatRate, Boolean includeInitialValues, String nameFilter, Boolean searchFullHierarchy, Boolean showExcluded, Boolean showHidden, String templateName, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetChannel(Async)");
        }

        return streamSetGetChannelCall(webId, categoryName, heartbeatRate, includeInitialValues, nameFilter, searchFullHierarchy, showExcluded, showHidden, templateName, webIdType, _callback);

    }

    /**
     * Opens a channel that will send messages about any value changes for the attributes of an Element, Event Frame, or Attribute.
     * 
     * @param webId The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param heartbeatRate Specifies the maximum number of consecutive empty messages that can be elapsed with no new data updates from the PI System, after which the client receives an empty payload. It helps to check if the connection is still alive. Zero/negative values correspond to no heartbeat, and the default value is no heartbeat. (optional)
     * @param includeInitialValues Specified if the channel should send a message with the current values of all the streams after the connection is opened. The default is &#39;false&#39;. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Switches to the Web Socket protocol. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public void streamSetGetChannel(String webId, String categoryName, Integer heartbeatRate, Boolean includeInitialValues, String nameFilter, Boolean searchFullHierarchy, Boolean showExcluded, Boolean showHidden, String templateName, String webIdType) throws ApiException {
        streamSetGetChannelWithHttpInfo(webId, categoryName, heartbeatRate, includeInitialValues, nameFilter, searchFullHierarchy, showExcluded, showHidden, templateName, webIdType);
    }

    /**
     * Opens a channel that will send messages about any value changes for the attributes of an Element, Event Frame, or Attribute.
     * 
     * @param webId The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param heartbeatRate Specifies the maximum number of consecutive empty messages that can be elapsed with no new data updates from the PI System, after which the client receives an empty payload. It helps to check if the connection is still alive. Zero/negative values correspond to no heartbeat, and the default value is no heartbeat. (optional)
     * @param includeInitialValues Specified if the channel should send a message with the current values of all the streams after the connection is opened. The default is &#39;false&#39;. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Switches to the Web Socket protocol. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> streamSetGetChannelWithHttpInfo(String webId, String categoryName, Integer heartbeatRate, Boolean includeInitialValues, String nameFilter, Boolean searchFullHierarchy, Boolean showExcluded, Boolean showHidden, String templateName, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetChannelValidateBeforeCall(webId, categoryName, heartbeatRate, includeInitialValues, nameFilter, searchFullHierarchy, showExcluded, showHidden, templateName, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Opens a channel that will send messages about any value changes for the attributes of an Element, Event Frame, or Attribute. (asynchronously)
     * 
     * @param webId The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param heartbeatRate Specifies the maximum number of consecutive empty messages that can be elapsed with no new data updates from the PI System, after which the client receives an empty payload. It helps to check if the connection is still alive. Zero/negative values correspond to no heartbeat, and the default value is no heartbeat. (optional)
     * @param includeInitialValues Specified if the channel should send a message with the current values of all the streams after the connection is opened. The default is &#39;false&#39;. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Switches to the Web Socket protocol. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetChannelAsync(String webId, String categoryName, Integer heartbeatRate, Boolean includeInitialValues, String nameFilter, Boolean searchFullHierarchy, Boolean showExcluded, Boolean showHidden, String templateName, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetChannelValidateBeforeCall(webId, categoryName, heartbeatRate, includeInitialValues, nameFilter, searchFullHierarchy, showExcluded, showHidden, templateName, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetChannelAdHoc
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param heartbeatRate Specifies the maximum number of consecutive empty messages that can be elapsed with no new data updates from the PI System, after which the client receives an empty payload. It helps to check if the connection is still alive. Zero/negative values correspond to no heartbeat, and the default value is no heartbeat. (optional)
     * @param includeInitialValues Specified if the channel should send a message with the current values of all the streams after the connection is opened. The default is &#39;false&#39;. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Switches to the Web Socket protocol. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetChannelAdHocCall(List<String> webId, Integer heartbeatRate, Boolean includeInitialValues, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/channel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "webId", webId));
        }

        if (heartbeatRate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("heartbeatRate", heartbeatRate));
        }

        if (includeInitialValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInitialValues", includeInitialValues));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetChannelAdHocValidateBeforeCall(List<String> webId, Integer heartbeatRate, Boolean includeInitialValues, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetChannelAdHoc(Async)");
        }

        return streamSetGetChannelAdHocCall(webId, heartbeatRate, includeInitialValues, webIdType, _callback);

    }

    /**
     * Opens a channel that will send messages about any value changes for the specified streams.
     * 
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param heartbeatRate Specifies the maximum number of consecutive empty messages that can be elapsed with no new data updates from the PI System, after which the client receives an empty payload. It helps to check if the connection is still alive. Zero/negative values correspond to no heartbeat, and the default value is no heartbeat. (optional)
     * @param includeInitialValues Specified if the channel should send a message with the current values of all the streams after the connection is opened. The default is &#39;false&#39;. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Switches to the Web Socket protocol. </td><td>  -  </td></tr>
     </table>
     */
    public void streamSetGetChannelAdHoc(List<String> webId, Integer heartbeatRate, Boolean includeInitialValues, String webIdType) throws ApiException {
        streamSetGetChannelAdHocWithHttpInfo(webId, heartbeatRate, includeInitialValues, webIdType);
    }

    /**
     * Opens a channel that will send messages about any value changes for the specified streams.
     * 
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param heartbeatRate Specifies the maximum number of consecutive empty messages that can be elapsed with no new data updates from the PI System, after which the client receives an empty payload. It helps to check if the connection is still alive. Zero/negative values correspond to no heartbeat, and the default value is no heartbeat. (optional)
     * @param includeInitialValues Specified if the channel should send a message with the current values of all the streams after the connection is opened. The default is &#39;false&#39;. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Switches to the Web Socket protocol. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> streamSetGetChannelAdHocWithHttpInfo(List<String> webId, Integer heartbeatRate, Boolean includeInitialValues, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetChannelAdHocValidateBeforeCall(webId, heartbeatRate, includeInitialValues, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Opens a channel that will send messages about any value changes for the specified streams. (asynchronously)
     * 
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param heartbeatRate Specifies the maximum number of consecutive empty messages that can be elapsed with no new data updates from the PI System, after which the client receives an empty payload. It helps to check if the connection is still alive. Zero/negative values correspond to no heartbeat, and the default value is no heartbeat. (optional)
     * @param includeInitialValues Specified if the channel should send a message with the current values of all the streams after the connection is opened. The default is &#39;false&#39;. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 101 </td><td> Switches to the Web Socket protocol. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetChannelAdHocAsync(List<String> webId, Integer heartbeatRate, Boolean includeInitialValues, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetChannelAdHocValidateBeforeCall(webId, heartbeatRate, includeInitialValues, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetEnd
     * @param webId The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetEndCall(String webId, String categoryName, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String templateName, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/{webId}/end"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryName", categoryName));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (searchFullHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFullHierarchy", searchFullHierarchy));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (showExcluded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showExcluded", showExcluded));
        }

        if (showHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showHidden", showHidden));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateName", templateName));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetEndValidateBeforeCall(String webId, String categoryName, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String templateName, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetEnd(Async)");
        }

        return streamSetGetEndCall(webId, categoryName, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, templateName, webIdType, _callback);

    }

    /**
     * Returns End of stream values of the attributes for an Element, Event Frame or Attribute
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValue streamSetGetEnd(String webId, String categoryName, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String templateName, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValue> localVarResp = streamSetGetEndWithHttpInfo(webId, categoryName, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, templateName, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns End of stream values of the attributes for an Element, Event Frame or Attribute
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValue> streamSetGetEndWithHttpInfo(String webId, String categoryName, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String templateName, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetEndValidateBeforeCall(webId, categoryName, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, templateName, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns End of stream values of the attributes for an Element, Event Frame or Attribute (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetEndAsync(String webId, String categoryName, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String templateName, String webIdType, final ApiCallback<ItemsStreamValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetEndValidateBeforeCall(webId, categoryName, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, templateName, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetEndAdHoc
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> End of stream values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetEndAdHocCall(List<String> webId, String selectedFields, String sortField, String sortOrder, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/end";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "webId", webId));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetEndAdHocValidateBeforeCall(List<String> webId, String selectedFields, String sortField, String sortOrder, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetEndAdHoc(Async)");
        }

        return streamSetGetEndAdHocCall(webId, selectedFields, sortField, sortOrder, webIdType, _callback);

    }

    /**
     * Returns End Of Stream values for attributes of the specified streams
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> End of stream values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValues streamSetGetEndAdHoc(List<String> webId, String selectedFields, String sortField, String sortOrder, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValues> localVarResp = streamSetGetEndAdHocWithHttpInfo(webId, selectedFields, sortField, sortOrder, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns End Of Stream values for attributes of the specified streams
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> End of stream values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValues> streamSetGetEndAdHocWithHttpInfo(List<String> webId, String selectedFields, String sortField, String sortOrder, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetEndAdHocValidateBeforeCall(webId, selectedFields, sortField, sortOrder, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns End Of Stream values for attributes of the specified streams (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> End of stream values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetEndAdHocAsync(List<String> webId, String selectedFields, String sortField, String sortOrder, String webIdType, final ApiCallback<ItemsStreamValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetEndAdHocValidateBeforeCall(webId, selectedFields, sortField, sortOrder, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetInterpolated
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param interval The sampling interval, in AFTimeSpan format. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param syncTime An optional start time anchor, in AFTime format. When specified, interpolated data retrieval will use the sync time as the origin for calculating the interval times. (optional)
     * @param syncTimeBoundaryType An optional string specifying the boundary type to use when applying a syncTime. The allowed values are &#39;Inside&#39; and &#39;Outside&#39;. The default is &#39;Inside&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interpolated values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetInterpolatedCall(String webId, String categoryName, String endTime, String filterExpression, Boolean includeFilteredValues, String interval, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String startTime, String syncTime, String syncTimeBoundaryType, String templateName, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/{webId}/interpolated"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryName", categoryName));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (filterExpression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterExpression", filterExpression));
        }

        if (includeFilteredValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeFilteredValues", includeFilteredValues));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (searchFullHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFullHierarchy", searchFullHierarchy));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (showExcluded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showExcluded", showExcluded));
        }

        if (showHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showHidden", showHidden));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (syncTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syncTime", syncTime));
        }

        if (syncTimeBoundaryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syncTimeBoundaryType", syncTimeBoundaryType));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateName", templateName));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetInterpolatedValidateBeforeCall(String webId, String categoryName, String endTime, String filterExpression, Boolean includeFilteredValues, String interval, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String startTime, String syncTime, String syncTimeBoundaryType, String templateName, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetInterpolated(Async)");
        }

        return streamSetGetInterpolatedCall(webId, categoryName, endTime, filterExpression, includeFilteredValues, interval, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startTime, syncTime, syncTimeBoundaryType, templateName, timeZone, webIdType, _callback);

    }

    /**
     * Returns interpolated values of attributes for an element, event frame or attribute over the specified time range at the specified sampling interval.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param interval The sampling interval, in AFTimeSpan format. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param syncTime An optional start time anchor, in AFTime format. When specified, interpolated data retrieval will use the sync time as the origin for calculating the interval times. (optional)
     * @param syncTimeBoundaryType An optional string specifying the boundary type to use when applying a syncTime. The allowed values are &#39;Inside&#39; and &#39;Outside&#39;. The default is &#39;Inside&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interpolated values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValues streamSetGetInterpolated(String webId, String categoryName, String endTime, String filterExpression, Boolean includeFilteredValues, String interval, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String startTime, String syncTime, String syncTimeBoundaryType, String templateName, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValues> localVarResp = streamSetGetInterpolatedWithHttpInfo(webId, categoryName, endTime, filterExpression, includeFilteredValues, interval, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startTime, syncTime, syncTimeBoundaryType, templateName, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns interpolated values of attributes for an element, event frame or attribute over the specified time range at the specified sampling interval.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param interval The sampling interval, in AFTimeSpan format. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param syncTime An optional start time anchor, in AFTime format. When specified, interpolated data retrieval will use the sync time as the origin for calculating the interval times. (optional)
     * @param syncTimeBoundaryType An optional string specifying the boundary type to use when applying a syncTime. The allowed values are &#39;Inside&#39; and &#39;Outside&#39;. The default is &#39;Inside&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interpolated values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValues> streamSetGetInterpolatedWithHttpInfo(String webId, String categoryName, String endTime, String filterExpression, Boolean includeFilteredValues, String interval, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String startTime, String syncTime, String syncTimeBoundaryType, String templateName, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetInterpolatedValidateBeforeCall(webId, categoryName, endTime, filterExpression, includeFilteredValues, interval, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startTime, syncTime, syncTimeBoundaryType, templateName, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns interpolated values of attributes for an element, event frame or attribute over the specified time range at the specified sampling interval. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param interval The sampling interval, in AFTimeSpan format. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param syncTime An optional start time anchor, in AFTime format. When specified, interpolated data retrieval will use the sync time as the origin for calculating the interval times. (optional)
     * @param syncTimeBoundaryType An optional string specifying the boundary type to use when applying a syncTime. The allowed values are &#39;Inside&#39; and &#39;Outside&#39;. The default is &#39;Inside&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interpolated values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetInterpolatedAsync(String webId, String categoryName, String endTime, String filterExpression, Boolean includeFilteredValues, String interval, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String startTime, String syncTime, String syncTimeBoundaryType, String templateName, String timeZone, String webIdType, final ApiCallback<ItemsStreamValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetInterpolatedValidateBeforeCall(webId, categoryName, endTime, filterExpression, includeFilteredValues, interval, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startTime, syncTime, syncTimeBoundaryType, templateName, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetInterpolatedAdHoc
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param endTime An optional end time. The default is &#39;*&#39;. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param interval The sampling interval, in AFTimeSpan format. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39;. (optional)
     * @param syncTime An optional start time anchor, in AFTime format. When specified, interpolated data retrieval will use the sync time as the origin for calculating the interval times. (optional)
     * @param syncTimeBoundaryType An optional string specifying the boundary type to use when applying a syncTime. The allowed values are &#39;Inside&#39; and &#39;Outside&#39;. The default is &#39;Inside&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interpolated values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetInterpolatedAdHocCall(List<String> webId, String endTime, String filterExpression, Boolean includeFilteredValues, String interval, String selectedFields, String sortField, String sortOrder, String startTime, String syncTime, String syncTimeBoundaryType, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/interpolated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "webId", webId));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (filterExpression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterExpression", filterExpression));
        }

        if (includeFilteredValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeFilteredValues", includeFilteredValues));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (syncTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syncTime", syncTime));
        }

        if (syncTimeBoundaryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syncTimeBoundaryType", syncTimeBoundaryType));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetInterpolatedAdHocValidateBeforeCall(List<String> webId, String endTime, String filterExpression, Boolean includeFilteredValues, String interval, String selectedFields, String sortField, String sortOrder, String startTime, String syncTime, String syncTimeBoundaryType, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetInterpolatedAdHoc(Async)");
        }

        return streamSetGetInterpolatedAdHocCall(webId, endTime, filterExpression, includeFilteredValues, interval, selectedFields, sortField, sortOrder, startTime, syncTime, syncTimeBoundaryType, timeZone, webIdType, _callback);

    }

    /**
     * Returns interpolated values of the specified streams over the specified time range at the specified sampling interval.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param endTime An optional end time. The default is &#39;*&#39;. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param interval The sampling interval, in AFTimeSpan format. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39;. (optional)
     * @param syncTime An optional start time anchor, in AFTime format. When specified, interpolated data retrieval will use the sync time as the origin for calculating the interval times. (optional)
     * @param syncTimeBoundaryType An optional string specifying the boundary type to use when applying a syncTime. The allowed values are &#39;Inside&#39; and &#39;Outside&#39;. The default is &#39;Inside&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interpolated values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValues streamSetGetInterpolatedAdHoc(List<String> webId, String endTime, String filterExpression, Boolean includeFilteredValues, String interval, String selectedFields, String sortField, String sortOrder, String startTime, String syncTime, String syncTimeBoundaryType, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValues> localVarResp = streamSetGetInterpolatedAdHocWithHttpInfo(webId, endTime, filterExpression, includeFilteredValues, interval, selectedFields, sortField, sortOrder, startTime, syncTime, syncTimeBoundaryType, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns interpolated values of the specified streams over the specified time range at the specified sampling interval.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param endTime An optional end time. The default is &#39;*&#39;. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param interval The sampling interval, in AFTimeSpan format. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39;. (optional)
     * @param syncTime An optional start time anchor, in AFTime format. When specified, interpolated data retrieval will use the sync time as the origin for calculating the interval times. (optional)
     * @param syncTimeBoundaryType An optional string specifying the boundary type to use when applying a syncTime. The allowed values are &#39;Inside&#39; and &#39;Outside&#39;. The default is &#39;Inside&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interpolated values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValues> streamSetGetInterpolatedAdHocWithHttpInfo(List<String> webId, String endTime, String filterExpression, Boolean includeFilteredValues, String interval, String selectedFields, String sortField, String sortOrder, String startTime, String syncTime, String syncTimeBoundaryType, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetInterpolatedAdHocValidateBeforeCall(webId, endTime, filterExpression, includeFilteredValues, interval, selectedFields, sortField, sortOrder, startTime, syncTime, syncTimeBoundaryType, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns interpolated values of the specified streams over the specified time range at the specified sampling interval. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param endTime An optional end time. The default is &#39;*&#39;. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param interval The sampling interval, in AFTimeSpan format. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39;. (optional)
     * @param syncTime An optional start time anchor, in AFTime format. When specified, interpolated data retrieval will use the sync time as the origin for calculating the interval times. (optional)
     * @param syncTimeBoundaryType An optional string specifying the boundary type to use when applying a syncTime. The allowed values are &#39;Inside&#39; and &#39;Outside&#39;. The default is &#39;Inside&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interpolated values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetInterpolatedAdHocAsync(List<String> webId, String endTime, String filterExpression, Boolean includeFilteredValues, String interval, String selectedFields, String sortField, String sortOrder, String startTime, String syncTime, String syncTimeBoundaryType, String timeZone, String webIdType, final ApiCallback<ItemsStreamValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetInterpolatedAdHocValidateBeforeCall(webId, endTime, filterExpression, includeFilteredValues, interval, selectedFields, sortField, sortOrder, startTime, syncTime, syncTimeBoundaryType, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetInterpolatedAtTimes
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param time The timestamp at which to retrieve a interpolated value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interpolated values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The request was cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetInterpolatedAtTimesCall(String webId, List<String> time, String categoryName, String filterExpression, Boolean includeFilteredValues, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortOrder, String templateName, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/{webId}/interpolatedattimes"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (time != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "time", time));
        }

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryName", categoryName));
        }

        if (filterExpression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterExpression", filterExpression));
        }

        if (includeFilteredValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeFilteredValues", includeFilteredValues));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (searchFullHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFullHierarchy", searchFullHierarchy));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (showExcluded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showExcluded", showExcluded));
        }

        if (showHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showHidden", showHidden));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateName", templateName));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetInterpolatedAtTimesValidateBeforeCall(String webId, List<String> time, String categoryName, String filterExpression, Boolean includeFilteredValues, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortOrder, String templateName, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetInterpolatedAtTimes(Async)");
        }

        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling streamSetGetInterpolatedAtTimes(Async)");
        }

        return streamSetGetInterpolatedAtTimesCall(webId, time, categoryName, filterExpression, includeFilteredValues, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortOrder, templateName, timeZone, webIdType, _callback);

    }

    /**
     * Returns interpolated values of attributes for an element, event frame or attribute at the specified times.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param time The timestamp at which to retrieve a interpolated value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interpolated values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The request was cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValues streamSetGetInterpolatedAtTimes(String webId, List<String> time, String categoryName, String filterExpression, Boolean includeFilteredValues, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortOrder, String templateName, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValues> localVarResp = streamSetGetInterpolatedAtTimesWithHttpInfo(webId, time, categoryName, filterExpression, includeFilteredValues, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortOrder, templateName, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns interpolated values of attributes for an element, event frame or attribute at the specified times.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param time The timestamp at which to retrieve a interpolated value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interpolated values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The request was cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValues> streamSetGetInterpolatedAtTimesWithHttpInfo(String webId, List<String> time, String categoryName, String filterExpression, Boolean includeFilteredValues, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortOrder, String templateName, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetInterpolatedAtTimesValidateBeforeCall(webId, time, categoryName, filterExpression, includeFilteredValues, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortOrder, templateName, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns interpolated values of attributes for an element, event frame or attribute at the specified times. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param time The timestamp at which to retrieve a interpolated value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interpolated values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The request was cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetInterpolatedAtTimesAsync(String webId, List<String> time, String categoryName, String filterExpression, Boolean includeFilteredValues, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortOrder, String templateName, String timeZone, String webIdType, final ApiCallback<ItemsStreamValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetInterpolatedAtTimesValidateBeforeCall(webId, time, categoryName, filterExpression, includeFilteredValues, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortOrder, templateName, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetInterpolatedAtTimesAdHoc
     * @param time The timestamp at which to retrieve a interpolated value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interpolated values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The request was cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetInterpolatedAtTimesAdHocCall(List<String> time, List<String> webId, String filterExpression, Boolean includeFilteredValues, String selectedFields, String sortOrder, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/interpolatedattimes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (time != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "time", time));
        }

        if (webId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "webId", webId));
        }

        if (filterExpression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterExpression", filterExpression));
        }

        if (includeFilteredValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeFilteredValues", includeFilteredValues));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetInterpolatedAtTimesAdHocValidateBeforeCall(List<String> time, List<String> webId, String filterExpression, Boolean includeFilteredValues, String selectedFields, String sortOrder, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling streamSetGetInterpolatedAtTimesAdHoc(Async)");
        }

        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetInterpolatedAtTimesAdHoc(Async)");
        }

        return streamSetGetInterpolatedAtTimesAdHocCall(time, webId, filterExpression, includeFilteredValues, selectedFields, sortOrder, timeZone, webIdType, _callback);

    }

    /**
     * Returns interpolated values of the specified streams at the specified times.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param time The timestamp at which to retrieve a interpolated value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interpolated values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The request was cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValues streamSetGetInterpolatedAtTimesAdHoc(List<String> time, List<String> webId, String filterExpression, Boolean includeFilteredValues, String selectedFields, String sortOrder, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValues> localVarResp = streamSetGetInterpolatedAtTimesAdHocWithHttpInfo(time, webId, filterExpression, includeFilteredValues, selectedFields, sortOrder, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns interpolated values of the specified streams at the specified times.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param time The timestamp at which to retrieve a interpolated value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interpolated values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The request was cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValues> streamSetGetInterpolatedAtTimesAdHocWithHttpInfo(List<String> time, List<String> webId, String filterExpression, Boolean includeFilteredValues, String selectedFields, String sortOrder, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetInterpolatedAtTimesAdHocValidateBeforeCall(time, webId, filterExpression, includeFilteredValues, selectedFields, sortOrder, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns interpolated values of the specified streams at the specified times. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param time The timestamp at which to retrieve a interpolated value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. If the attribute does not support filtering, the filter will be ignored. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Interpolated values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The request was cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetInterpolatedAtTimesAdHocAsync(List<String> time, List<String> webId, String filterExpression, Boolean includeFilteredValues, String selectedFields, String sortOrder, String timeZone, String webIdType, final ApiCallback<ItemsStreamValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetInterpolatedAtTimesAdHocValidateBeforeCall(time, webId, filterExpression, includeFilteredValues, selectedFields, sortOrder, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetJoined
     * @param baseWebId The ID of the base stream which is used for retrieving the recorded values. (required)
     * @param subordinateWebId The ID of a stream whose values will be joined on the times with the values of the base stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param boundaryType An optional value that determines how the times and values of the returned end points are determined. The default is &#39;Inside&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param maxCount The maximum number of values to be returned. The default is 1000. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either place, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetJoinedCall(String baseWebId, List<String> subordinateWebId, String boundaryType, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String selectedFields, String startTime, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/joined";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (baseWebId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baseWebId", baseWebId));
        }

        if (subordinateWebId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "subordinateWebId", subordinateWebId));
        }

        if (boundaryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boundaryType", boundaryType));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (filterExpression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterExpression", filterExpression));
        }

        if (includeFilteredValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeFilteredValues", includeFilteredValues));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetJoinedValidateBeforeCall(String baseWebId, List<String> subordinateWebId, String boundaryType, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String selectedFields, String startTime, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'baseWebId' is set
        if (baseWebId == null) {
            throw new ApiException("Missing the required parameter 'baseWebId' when calling streamSetGetJoined(Async)");
        }

        // verify the required parameter 'subordinateWebId' is set
        if (subordinateWebId == null) {
            throw new ApiException("Missing the required parameter 'subordinateWebId' when calling streamSetGetJoined(Async)");
        }

        return streamSetGetJoinedCall(baseWebId, subordinateWebId, boundaryType, endTime, filterExpression, includeFilteredValues, maxCount, selectedFields, startTime, timeZone, webIdType, _callback);

    }

    /**
     * Returns the base stream&#39;s recorded values and subordinate streams&#39; interpolated values at times matching the recorded values&#39; timestamps.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream. The first stream in the response is always the X-Axis.
     * @param baseWebId The ID of the base stream which is used for retrieving the recorded values. (required)
     * @param subordinateWebId The ID of a stream whose values will be joined on the times with the values of the base stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param boundaryType An optional value that determines how the times and values of the returned end points are determined. The default is &#39;Inside&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param maxCount The maximum number of values to be returned. The default is 1000. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either place, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValues streamSetGetJoined(String baseWebId, List<String> subordinateWebId, String boundaryType, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String selectedFields, String startTime, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValues> localVarResp = streamSetGetJoinedWithHttpInfo(baseWebId, subordinateWebId, boundaryType, endTime, filterExpression, includeFilteredValues, maxCount, selectedFields, startTime, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns the base stream&#39;s recorded values and subordinate streams&#39; interpolated values at times matching the recorded values&#39; timestamps.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream. The first stream in the response is always the X-Axis.
     * @param baseWebId The ID of the base stream which is used for retrieving the recorded values. (required)
     * @param subordinateWebId The ID of a stream whose values will be joined on the times with the values of the base stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param boundaryType An optional value that determines how the times and values of the returned end points are determined. The default is &#39;Inside&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param maxCount The maximum number of values to be returned. The default is 1000. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either place, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValues> streamSetGetJoinedWithHttpInfo(String baseWebId, List<String> subordinateWebId, String boundaryType, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String selectedFields, String startTime, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetJoinedValidateBeforeCall(baseWebId, subordinateWebId, boundaryType, endTime, filterExpression, includeFilteredValues, maxCount, selectedFields, startTime, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the base stream&#39;s recorded values and subordinate streams&#39; interpolated values at times matching the recorded values&#39; timestamps. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream. The first stream in the response is always the X-Axis.
     * @param baseWebId The ID of the base stream which is used for retrieving the recorded values. (required)
     * @param subordinateWebId The ID of a stream whose values will be joined on the times with the values of the base stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param boundaryType An optional value that determines how the times and values of the returned end points are determined. The default is &#39;Inside&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param maxCount The maximum number of values to be returned. The default is 1000. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either place, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetJoinedAsync(String baseWebId, List<String> subordinateWebId, String boundaryType, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String selectedFields, String startTime, String timeZone, String webIdType, final ApiCallback<ItemsStreamValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetJoinedValidateBeforeCall(baseWebId, subordinateWebId, boundaryType, endTime, filterExpression, includeFilteredValues, maxCount, selectedFields, startTime, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetPlot
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param intervals The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is &#39;24&#39;. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plot values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetPlotCall(String webId, String categoryName, String endTime, Integer intervals, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String startTime, String templateName, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/{webId}/plot"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryName", categoryName));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (intervals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intervals", intervals));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (searchFullHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFullHierarchy", searchFullHierarchy));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (showExcluded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showExcluded", showExcluded));
        }

        if (showHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showHidden", showHidden));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateName", templateName));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetPlotValidateBeforeCall(String webId, String categoryName, String endTime, Integer intervals, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String startTime, String templateName, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetPlot(Async)");
        }

        return streamSetGetPlotCall(webId, categoryName, endTime, intervals, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startTime, templateName, timeZone, webIdType, _callback);

    }

    /**
     * Returns values of attributes for an element, event frame or attribute over the specified time range suitable for plotting over the number of intervals (typically represents pixels).
     * For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param intervals The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is &#39;24&#39;. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plot values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValues streamSetGetPlot(String webId, String categoryName, String endTime, Integer intervals, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String startTime, String templateName, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValues> localVarResp = streamSetGetPlotWithHttpInfo(webId, categoryName, endTime, intervals, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startTime, templateName, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns values of attributes for an element, event frame or attribute over the specified time range suitable for plotting over the number of intervals (typically represents pixels).
     * For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param intervals The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is &#39;24&#39;. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plot values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValues> streamSetGetPlotWithHttpInfo(String webId, String categoryName, String endTime, Integer intervals, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String startTime, String templateName, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetPlotValidateBeforeCall(webId, categoryName, endTime, intervals, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startTime, templateName, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns values of attributes for an element, event frame or attribute over the specified time range suitable for plotting over the number of intervals (typically represents pixels). (asynchronously)
     * For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param intervals The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is &#39;24&#39;. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plot values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetPlotAsync(String webId, String categoryName, String endTime, Integer intervals, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String startTime, String templateName, String timeZone, String webIdType, final ApiCallback<ItemsStreamValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetPlotValidateBeforeCall(webId, categoryName, endTime, intervals, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startTime, templateName, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetPlotAdHoc
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param endTime An optional end time. The default is &#39;*&#39;. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param intervals The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is &#39;24&#39;. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plot values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetPlotAdHocCall(List<String> webId, String endTime, Integer intervals, String selectedFields, String sortField, String sortOrder, String startTime, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/plot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "webId", webId));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (intervals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intervals", intervals));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetPlotAdHocValidateBeforeCall(List<String> webId, String endTime, Integer intervals, String selectedFields, String sortField, String sortOrder, String startTime, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetPlotAdHoc(Async)");
        }

        return streamSetGetPlotAdHocCall(webId, endTime, intervals, selectedFields, sortField, sortOrder, startTime, timeZone, webIdType, _callback);

    }

    /**
     * Returns values of attributes for the specified streams over the specified time range suitable for plotting over the number of intervals (typically represents pixels).
     * For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param endTime An optional end time. The default is &#39;*&#39;. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param intervals The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is &#39;24&#39;. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plot values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValues streamSetGetPlotAdHoc(List<String> webId, String endTime, Integer intervals, String selectedFields, String sortField, String sortOrder, String startTime, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValues> localVarResp = streamSetGetPlotAdHocWithHttpInfo(webId, endTime, intervals, selectedFields, sortField, sortOrder, startTime, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns values of attributes for the specified streams over the specified time range suitable for plotting over the number of intervals (typically represents pixels).
     * For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param endTime An optional end time. The default is &#39;*&#39;. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param intervals The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is &#39;24&#39;. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plot values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValues> streamSetGetPlotAdHocWithHttpInfo(List<String> webId, String endTime, Integer intervals, String selectedFields, String sortField, String sortOrder, String startTime, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetPlotAdHocValidateBeforeCall(webId, endTime, intervals, selectedFields, sortField, sortOrder, startTime, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns values of attributes for the specified streams over the specified time range suitable for plotting over the number of intervals (typically represents pixels). (asynchronously)
     * For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param endTime An optional end time. The default is &#39;*&#39;. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param intervals The number of intervals to plot over. Typically, this would be the number of horizontal pixels in the trend. The default is &#39;24&#39;. For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Plot values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetPlotAdHocAsync(List<String> webId, String endTime, Integer intervals, String selectedFields, String sortField, String sortOrder, String startTime, String timeZone, String webIdType, final ApiCallback<ItemsStreamValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetPlotAdHocValidateBeforeCall(webId, endTime, intervals, selectedFields, sortField, sortOrder, startTime, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetRecorded
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param boundaryType An optional value that determines how the times and values of the returned end points are determined. The default is &#39;Inside&#39;. (optional)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param maxCount The maximum number of values to be returned. The default is 1000. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetRecordedCall(String webId, String boundaryType, String categoryName, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String startTime, String templateName, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/{webId}/recorded"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (boundaryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boundaryType", boundaryType));
        }

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryName", categoryName));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (filterExpression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterExpression", filterExpression));
        }

        if (includeFilteredValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeFilteredValues", includeFilteredValues));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (searchFullHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFullHierarchy", searchFullHierarchy));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (showExcluded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showExcluded", showExcluded));
        }

        if (showHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showHidden", showHidden));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateName", templateName));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetRecordedValidateBeforeCall(String webId, String boundaryType, String categoryName, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String startTime, String templateName, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetRecorded(Async)");
        }

        return streamSetGetRecordedCall(webId, boundaryType, categoryName, endTime, filterExpression, includeFilteredValues, maxCount, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startTime, templateName, timeZone, webIdType, _callback);

    }

    /**
     * Returns recorded values of the attributes for an element, event frame, or attribute.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param boundaryType An optional value that determines how the times and values of the returned end points are determined. The default is &#39;Inside&#39;. (optional)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param maxCount The maximum number of values to be returned. The default is 1000. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValues streamSetGetRecorded(String webId, String boundaryType, String categoryName, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String startTime, String templateName, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValues> localVarResp = streamSetGetRecordedWithHttpInfo(webId, boundaryType, categoryName, endTime, filterExpression, includeFilteredValues, maxCount, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startTime, templateName, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns recorded values of the attributes for an element, event frame, or attribute.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param boundaryType An optional value that determines how the times and values of the returned end points are determined. The default is &#39;Inside&#39;. (optional)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param maxCount The maximum number of values to be returned. The default is 1000. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValues> streamSetGetRecordedWithHttpInfo(String webId, String boundaryType, String categoryName, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String startTime, String templateName, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetRecordedValidateBeforeCall(webId, boundaryType, categoryName, endTime, filterExpression, includeFilteredValues, maxCount, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startTime, templateName, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns recorded values of the attributes for an element, event frame, or attribute. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param boundaryType An optional value that determines how the times and values of the returned end points are determined. The default is &#39;Inside&#39;. (optional)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param maxCount The maximum number of values to be returned. The default is 1000. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetRecordedAsync(String webId, String boundaryType, String categoryName, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String startTime, String templateName, String timeZone, String webIdType, final ApiCallback<ItemsStreamValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetRecordedValidateBeforeCall(webId, boundaryType, categoryName, endTime, filterExpression, includeFilteredValues, maxCount, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startTime, templateName, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetRecordedAdHoc
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param boundaryType An optional value that determines how the times and values of the returned end points are determined. The default is &#39;Inside&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39;. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param maxCount The maximum number of values to be returned. The default is 1000. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetRecordedAdHocCall(List<String> webId, String boundaryType, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String selectedFields, String sortField, String sortOrder, String startTime, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/recorded";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "webId", webId));
        }

        if (boundaryType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("boundaryType", boundaryType));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (filterExpression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterExpression", filterExpression));
        }

        if (includeFilteredValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeFilteredValues", includeFilteredValues));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetRecordedAdHocValidateBeforeCall(List<String> webId, String boundaryType, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String selectedFields, String sortField, String sortOrder, String startTime, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetRecordedAdHoc(Async)");
        }

        return streamSetGetRecordedAdHocCall(webId, boundaryType, endTime, filterExpression, includeFilteredValues, maxCount, selectedFields, sortField, sortOrder, startTime, timeZone, webIdType, _callback);

    }

    /**
     * Returns recorded values of the specified streams.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param boundaryType An optional value that determines how the times and values of the returned end points are determined. The default is &#39;Inside&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39;. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param maxCount The maximum number of values to be returned. The default is 1000. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValues streamSetGetRecordedAdHoc(List<String> webId, String boundaryType, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String selectedFields, String sortField, String sortOrder, String startTime, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValues> localVarResp = streamSetGetRecordedAdHocWithHttpInfo(webId, boundaryType, endTime, filterExpression, includeFilteredValues, maxCount, selectedFields, sortField, sortOrder, startTime, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns recorded values of the specified streams.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param boundaryType An optional value that determines how the times and values of the returned end points are determined. The default is &#39;Inside&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39;. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param maxCount The maximum number of values to be returned. The default is 1000. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValues> streamSetGetRecordedAdHocWithHttpInfo(List<String> webId, String boundaryType, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String selectedFields, String sortField, String sortOrder, String startTime, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetRecordedAdHocValidateBeforeCall(webId, boundaryType, endTime, filterExpression, includeFilteredValues, maxCount, selectedFields, sortField, sortOrder, startTime, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns recorded values of the specified streams. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param boundaryType An optional value that determines how the times and values of the returned end points are determined. The default is &#39;Inside&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39;. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression An optional string containing a filter expression. Expression variables are relative to the data point. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param includeFilteredValues Specify &#39;true&#39; to indicate that values which fail the filter criteria are present in the returned data at the times where they occurred with a value set to a &#39;Filtered&#39; enumeration value with bad status. Repeated consecutive failures are omitted. (optional)
     * @param maxCount The maximum number of values to be returned. The default is 1000. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetRecordedAdHocAsync(List<String> webId, String boundaryType, String endTime, String filterExpression, Boolean includeFilteredValues, Integer maxCount, String selectedFields, String sortField, String sortOrder, String startTime, String timeZone, String webIdType, final ApiCallback<ItemsStreamValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetRecordedAdHocValidateBeforeCall(webId, boundaryType, endTime, filterExpression, includeFilteredValues, maxCount, selectedFields, sortField, sortOrder, startTime, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetRecordedAtTime
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param time The timestamp at which the values are desired. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param retrievalMode An optional value that determines the values to return when values don&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetRecordedAtTimeCall(String webId, String time, String categoryName, String nameFilter, String retrievalMode, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String templateName, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/{webId}/recordedattime"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryName", categoryName));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (retrievalMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retrievalMode", retrievalMode));
        }

        if (searchFullHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFullHierarchy", searchFullHierarchy));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (showExcluded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showExcluded", showExcluded));
        }

        if (showHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showHidden", showHidden));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateName", templateName));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetRecordedAtTimeValidateBeforeCall(String webId, String time, String categoryName, String nameFilter, String retrievalMode, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String templateName, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetRecordedAtTime(Async)");
        }

        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling streamSetGetRecordedAtTime(Async)");
        }

        return streamSetGetRecordedAtTimeCall(webId, time, categoryName, nameFilter, retrievalMode, searchFullHierarchy, selectedFields, showExcluded, showHidden, templateName, timeZone, webIdType, _callback);

    }

    /**
     * Returns recorded values of the attributes for an element, event frame, or attribute.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param time The timestamp at which the values are desired. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param retrievalMode An optional value that determines the values to return when values don&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValue streamSetGetRecordedAtTime(String webId, String time, String categoryName, String nameFilter, String retrievalMode, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String templateName, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValue> localVarResp = streamSetGetRecordedAtTimeWithHttpInfo(webId, time, categoryName, nameFilter, retrievalMode, searchFullHierarchy, selectedFields, showExcluded, showHidden, templateName, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns recorded values of the attributes for an element, event frame, or attribute.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param time The timestamp at which the values are desired. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param retrievalMode An optional value that determines the values to return when values don&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValue> streamSetGetRecordedAtTimeWithHttpInfo(String webId, String time, String categoryName, String nameFilter, String retrievalMode, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String templateName, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetRecordedAtTimeValidateBeforeCall(webId, time, categoryName, nameFilter, retrievalMode, searchFullHierarchy, selectedFields, showExcluded, showHidden, templateName, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns recorded values of the attributes for an element, event frame, or attribute. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param time The timestamp at which the values are desired. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param retrievalMode An optional value that determines the values to return when values don&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetRecordedAtTimeAsync(String webId, String time, String categoryName, String nameFilter, String retrievalMode, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String templateName, String timeZone, String webIdType, final ApiCallback<ItemsStreamValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetRecordedAtTimeValidateBeforeCall(webId, time, categoryName, nameFilter, retrievalMode, searchFullHierarchy, selectedFields, showExcluded, showHidden, templateName, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetRecordedAtTimeAdHoc
     * @param time The timestamp at which the values are desired. (required)
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param retrievalMode An optional value that determines the values to return when values don&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetRecordedAtTimeAdHocCall(String time, List<String> webId, String retrievalMode, String selectedFields, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/recordedattime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (webId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "webId", webId));
        }

        if (retrievalMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retrievalMode", retrievalMode));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetRecordedAtTimeAdHocValidateBeforeCall(String time, List<String> webId, String retrievalMode, String selectedFields, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling streamSetGetRecordedAtTimeAdHoc(Async)");
        }

        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetRecordedAtTimeAdHoc(Async)");
        }

        return streamSetGetRecordedAtTimeAdHocCall(time, webId, retrievalMode, selectedFields, timeZone, webIdType, _callback);

    }

    /**
     * Returns recorded values based on the passed time and retrieval mode.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param time The timestamp at which the values are desired. (required)
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param retrievalMode An optional value that determines the values to return when values don&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValue streamSetGetRecordedAtTimeAdHoc(String time, List<String> webId, String retrievalMode, String selectedFields, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValue> localVarResp = streamSetGetRecordedAtTimeAdHocWithHttpInfo(time, webId, retrievalMode, selectedFields, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns recorded values based on the passed time and retrieval mode.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param time The timestamp at which the values are desired. (required)
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param retrievalMode An optional value that determines the values to return when values don&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValue> streamSetGetRecordedAtTimeAdHocWithHttpInfo(String time, List<String> webId, String retrievalMode, String selectedFields, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetRecordedAtTimeAdHocValidateBeforeCall(time, webId, retrievalMode, selectedFields, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns recorded values based on the passed time and retrieval mode. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param time The timestamp at which the values are desired. (required)
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param retrievalMode An optional value that determines the values to return when values don&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetRecordedAtTimeAdHocAsync(String time, List<String> webId, String retrievalMode, String selectedFields, String timeZone, String webIdType, final ApiCallback<ItemsStreamValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetRecordedAtTimeAdHocValidateBeforeCall(time, webId, retrievalMode, selectedFields, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetRecordedAtTimes
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param time The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param retrievalMode An optional value that determines the values to return when values don&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The request was cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetRecordedAtTimesCall(String webId, List<String> time, String categoryName, String nameFilter, String retrievalMode, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortOrder, String templateName, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/{webId}/recordedattimes"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (time != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "time", time));
        }

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryName", categoryName));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (retrievalMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retrievalMode", retrievalMode));
        }

        if (searchFullHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFullHierarchy", searchFullHierarchy));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (showExcluded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showExcluded", showExcluded));
        }

        if (showHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showHidden", showHidden));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateName", templateName));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetRecordedAtTimesValidateBeforeCall(String webId, List<String> time, String categoryName, String nameFilter, String retrievalMode, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortOrder, String templateName, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetRecordedAtTimes(Async)");
        }

        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling streamSetGetRecordedAtTimes(Async)");
        }

        return streamSetGetRecordedAtTimesCall(webId, time, categoryName, nameFilter, retrievalMode, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortOrder, templateName, timeZone, webIdType, _callback);

    }

    /**
     * Returns recorded values of attributes for an element, event frame or attribute at the specified times.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param time The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param retrievalMode An optional value that determines the values to return when values don&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The request was cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValues streamSetGetRecordedAtTimes(String webId, List<String> time, String categoryName, String nameFilter, String retrievalMode, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortOrder, String templateName, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValues> localVarResp = streamSetGetRecordedAtTimesWithHttpInfo(webId, time, categoryName, nameFilter, retrievalMode, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortOrder, templateName, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns recorded values of attributes for an element, event frame or attribute at the specified times.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param time The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param retrievalMode An optional value that determines the values to return when values don&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The request was cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValues> streamSetGetRecordedAtTimesWithHttpInfo(String webId, List<String> time, String categoryName, String nameFilter, String retrievalMode, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortOrder, String templateName, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetRecordedAtTimesValidateBeforeCall(webId, time, categoryName, nameFilter, retrievalMode, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortOrder, templateName, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns recorded values of attributes for an element, event frame or attribute at the specified times. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param time The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param retrievalMode An optional value that determines the values to return when values don&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The request was cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetRecordedAtTimesAsync(String webId, List<String> time, String categoryName, String nameFilter, String retrievalMode, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortOrder, String templateName, String timeZone, String webIdType, final ApiCallback<ItemsStreamValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetRecordedAtTimesValidateBeforeCall(webId, time, categoryName, nameFilter, retrievalMode, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortOrder, templateName, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetRecordedAtTimesAdHoc
     * @param time The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param retrievalMode An optional value that determines the values to return when values don&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The request was cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetRecordedAtTimesAdHocCall(List<String> time, List<String> webId, String retrievalMode, String selectedFields, String sortOrder, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/recordedattimes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (time != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "time", time));
        }

        if (webId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "webId", webId));
        }

        if (retrievalMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retrievalMode", retrievalMode));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetRecordedAtTimesAdHocValidateBeforeCall(List<String> time, List<String> webId, String retrievalMode, String selectedFields, String sortOrder, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling streamSetGetRecordedAtTimesAdHoc(Async)");
        }

        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetRecordedAtTimesAdHoc(Async)");
        }

        return streamSetGetRecordedAtTimesAdHocCall(time, webId, retrievalMode, selectedFields, sortOrder, timeZone, webIdType, _callback);

    }

    /**
     * Returns recorded values of the specified streams at the specified times.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param time The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param retrievalMode An optional value that determines the values to return when values don&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The request was cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValues streamSetGetRecordedAtTimesAdHoc(List<String> time, List<String> webId, String retrievalMode, String selectedFields, String sortOrder, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValues> localVarResp = streamSetGetRecordedAtTimesAdHocWithHttpInfo(time, webId, retrievalMode, selectedFields, sortOrder, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns recorded values of the specified streams at the specified times.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param time The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param retrievalMode An optional value that determines the values to return when values don&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The request was cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValues> streamSetGetRecordedAtTimesAdHocWithHttpInfo(List<String> time, List<String> webId, String retrievalMode, String selectedFields, String sortOrder, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetRecordedAtTimesAdHocValidateBeforeCall(time, webId, retrievalMode, selectedFields, sortOrder, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns recorded values of the specified streams at the specified times. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param time The timestamp at which to retrieve a recorded value. Multiple timestamps may be specified with multiple instances of the parameter. (required)
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param retrievalMode An optional value that determines the values to return when values don&#39;t exist at the exact time specified. The default is &#39;Auto&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recorded values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was malformed. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> The request was cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetRecordedAtTimesAdHocAsync(List<String> time, List<String> webId, String retrievalMode, String selectedFields, String sortOrder, String timeZone, String webIdType, final ApiCallback<ItemsStreamValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetRecordedAtTimesAdHocValidateBeforeCall(time, webId, retrievalMode, selectedFields, sortOrder, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetSummaries
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param calculationBasis Specifies the method of evaluating the data over the time range. The default is &#39;TimeWeighted&#39;. (optional)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression A string containing a filter expression. Expression variables are relative to the attribute. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param sampleInterval A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is &#39;Interval&#39;. (optional)
     * @param sampleType A flag which specifies one or more summaries to compute for each interval over the time range. The default is &#39;ExpressionRecordedValues&#39;. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param summaryDuration The duration of each summary interval. (optional)
     * @param summaryType Specifies the kinds of summaries to produce over the range. The default is &#39;Total&#39;. Multiple summary types may be specified by using multiple instances of summaryType. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeType Specifies how to calculate the timestamp for each interval. The default is &#39;Auto&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetSummariesCall(String webId, String calculationBasis, String categoryName, String endTime, String filterExpression, String nameFilter, String sampleInterval, String sampleType, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String startTime, String summaryDuration, List<String> summaryType, String templateName, String timeType, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/{webId}/summary"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (calculationBasis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculationBasis", calculationBasis));
        }

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryName", categoryName));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (filterExpression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterExpression", filterExpression));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (sampleInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sampleInterval", sampleInterval));
        }

        if (sampleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sampleType", sampleType));
        }

        if (searchFullHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFullHierarchy", searchFullHierarchy));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (showExcluded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showExcluded", showExcluded));
        }

        if (showHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showHidden", showHidden));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (summaryDuration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summaryDuration", summaryDuration));
        }

        if (summaryType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "summaryType", summaryType));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateName", templateName));
        }

        if (timeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeType", timeType));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetSummariesValidateBeforeCall(String webId, String calculationBasis, String categoryName, String endTime, String filterExpression, String nameFilter, String sampleInterval, String sampleType, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String startTime, String summaryDuration, List<String> summaryType, String templateName, String timeType, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetSummaries(Async)");
        }

        return streamSetGetSummariesCall(webId, calculationBasis, categoryName, endTime, filterExpression, nameFilter, sampleInterval, sampleType, searchFullHierarchy, selectedFields, showExcluded, showHidden, startTime, summaryDuration, summaryType, templateName, timeType, timeZone, webIdType, _callback);

    }

    /**
     * Returns summary values of the attributes for an element, event frame or attribute.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param calculationBasis Specifies the method of evaluating the data over the time range. The default is &#39;TimeWeighted&#39;. (optional)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression A string containing a filter expression. Expression variables are relative to the attribute. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param sampleInterval A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is &#39;Interval&#39;. (optional)
     * @param sampleType A flag which specifies one or more summaries to compute for each interval over the time range. The default is &#39;ExpressionRecordedValues&#39;. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param summaryDuration The duration of each summary interval. (optional)
     * @param summaryType Specifies the kinds of summaries to produce over the range. The default is &#39;Total&#39;. Multiple summary types may be specified by using multiple instances of summaryType. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeType Specifies how to calculate the timestamp for each interval. The default is &#39;Auto&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamSummaries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamSummaries streamSetGetSummaries(String webId, String calculationBasis, String categoryName, String endTime, String filterExpression, String nameFilter, String sampleInterval, String sampleType, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String startTime, String summaryDuration, List<String> summaryType, String templateName, String timeType, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamSummaries> localVarResp = streamSetGetSummariesWithHttpInfo(webId, calculationBasis, categoryName, endTime, filterExpression, nameFilter, sampleInterval, sampleType, searchFullHierarchy, selectedFields, showExcluded, showHidden, startTime, summaryDuration, summaryType, templateName, timeType, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns summary values of the attributes for an element, event frame or attribute.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param calculationBasis Specifies the method of evaluating the data over the time range. The default is &#39;TimeWeighted&#39;. (optional)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression A string containing a filter expression. Expression variables are relative to the attribute. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param sampleInterval A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is &#39;Interval&#39;. (optional)
     * @param sampleType A flag which specifies one or more summaries to compute for each interval over the time range. The default is &#39;ExpressionRecordedValues&#39;. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param summaryDuration The duration of each summary interval. (optional)
     * @param summaryType Specifies the kinds of summaries to produce over the range. The default is &#39;Total&#39;. Multiple summary types may be specified by using multiple instances of summaryType. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeType Specifies how to calculate the timestamp for each interval. The default is &#39;Auto&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamSummaries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamSummaries> streamSetGetSummariesWithHttpInfo(String webId, String calculationBasis, String categoryName, String endTime, String filterExpression, String nameFilter, String sampleInterval, String sampleType, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String startTime, String summaryDuration, List<String> summaryType, String templateName, String timeType, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetSummariesValidateBeforeCall(webId, calculationBasis, categoryName, endTime, filterExpression, nameFilter, sampleInterval, sampleType, searchFullHierarchy, selectedFields, showExcluded, showHidden, startTime, summaryDuration, summaryType, templateName, timeType, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamSummaries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns summary values of the attributes for an element, event frame or attribute. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an element, event frame or attribute, which is the base element or parent of all the stream attributes. (required)
     * @param calculationBasis Specifies the method of evaluating the data over the time range. The default is &#39;TimeWeighted&#39;. (optional)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s end time, or &#39;*&#39; if that is not set. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression A string containing a filter expression. Expression variables are relative to the attribute. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param sampleInterval A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is &#39;Interval&#39;. (optional)
     * @param sampleType A flag which specifies one or more summaries to compute for each interval over the time range. The default is &#39;ExpressionRecordedValues&#39;. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39; for element attributes and points. For event frame attributes, the default is the event frame&#39;s start time, or &#39;*-1d&#39; if that is not set. (optional)
     * @param summaryDuration The duration of each summary interval. (optional)
     * @param summaryType Specifies the kinds of summaries to produce over the range. The default is &#39;Total&#39;. Multiple summary types may be specified by using multiple instances of summaryType. (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param timeType Specifies how to calculate the timestamp for each interval. The default is &#39;Auto&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetSummariesAsync(String webId, String calculationBasis, String categoryName, String endTime, String filterExpression, String nameFilter, String sampleInterval, String sampleType, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String startTime, String summaryDuration, List<String> summaryType, String templateName, String timeType, String timeZone, String webIdType, final ApiCallback<ItemsStreamSummaries> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetSummariesValidateBeforeCall(webId, calculationBasis, categoryName, endTime, filterExpression, nameFilter, sampleInterval, sampleType, searchFullHierarchy, selectedFields, showExcluded, showHidden, startTime, summaryDuration, summaryType, templateName, timeType, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamSummaries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetSummariesAdHoc
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param calculationBasis Specifies the method of evaluating the data over the time range. The default is &#39;TimeWeighted&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39;. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression A string containing a filter expression. Expression variables are relative to the attribute. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param sampleInterval A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is &#39;Interval&#39;. (optional)
     * @param sampleType A flag which specifies one or more summaries to compute for each interval over the time range. The default is &#39;ExpressionRecordedValues&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39;. (optional)
     * @param summaryDuration The duration of each summary interval. (optional)
     * @param summaryType Specifies the kinds of summaries to produce over the range. The default is &#39;Total&#39;. Multiple summary types may be specified by using multiple instances of summaryType. (optional)
     * @param timeType Specifies how to calculate the timestamp for each interval. The default is &#39;Auto&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetSummariesAdHocCall(List<String> webId, String calculationBasis, String endTime, String filterExpression, String sampleInterval, String sampleType, String selectedFields, String startTime, String summaryDuration, List<String> summaryType, String timeType, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "webId", webId));
        }

        if (calculationBasis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculationBasis", calculationBasis));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (filterExpression != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterExpression", filterExpression));
        }

        if (sampleInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sampleInterval", sampleInterval));
        }

        if (sampleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sampleType", sampleType));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (summaryDuration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("summaryDuration", summaryDuration));
        }

        if (summaryType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "summaryType", summaryType));
        }

        if (timeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeType", timeType));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetSummariesAdHocValidateBeforeCall(List<String> webId, String calculationBasis, String endTime, String filterExpression, String sampleInterval, String sampleType, String selectedFields, String startTime, String summaryDuration, List<String> summaryType, String timeType, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetSummariesAdHoc(Async)");
        }

        return streamSetGetSummariesAdHocCall(webId, calculationBasis, endTime, filterExpression, sampleInterval, sampleType, selectedFields, startTime, summaryDuration, summaryType, timeType, timeZone, webIdType, _callback);

    }

    /**
     * Returns summary values of the specified streams.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param calculationBasis Specifies the method of evaluating the data over the time range. The default is &#39;TimeWeighted&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39;. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression A string containing a filter expression. Expression variables are relative to the attribute. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param sampleInterval A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is &#39;Interval&#39;. (optional)
     * @param sampleType A flag which specifies one or more summaries to compute for each interval over the time range. The default is &#39;ExpressionRecordedValues&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39;. (optional)
     * @param summaryDuration The duration of each summary interval. (optional)
     * @param summaryType Specifies the kinds of summaries to produce over the range. The default is &#39;Total&#39;. Multiple summary types may be specified by using multiple instances of summaryType. (optional)
     * @param timeType Specifies how to calculate the timestamp for each interval. The default is &#39;Auto&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamSummaries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamSummaries streamSetGetSummariesAdHoc(List<String> webId, String calculationBasis, String endTime, String filterExpression, String sampleInterval, String sampleType, String selectedFields, String startTime, String summaryDuration, List<String> summaryType, String timeType, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamSummaries> localVarResp = streamSetGetSummariesAdHocWithHttpInfo(webId, calculationBasis, endTime, filterExpression, sampleInterval, sampleType, selectedFields, startTime, summaryDuration, summaryType, timeType, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns summary values of the specified streams.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param calculationBasis Specifies the method of evaluating the data over the time range. The default is &#39;TimeWeighted&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39;. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression A string containing a filter expression. Expression variables are relative to the attribute. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param sampleInterval A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is &#39;Interval&#39;. (optional)
     * @param sampleType A flag which specifies one or more summaries to compute for each interval over the time range. The default is &#39;ExpressionRecordedValues&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39;. (optional)
     * @param summaryDuration The duration of each summary interval. (optional)
     * @param summaryType Specifies the kinds of summaries to produce over the range. The default is &#39;Total&#39;. Multiple summary types may be specified by using multiple instances of summaryType. (optional)
     * @param timeType Specifies how to calculate the timestamp for each interval. The default is &#39;Auto&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamSummaries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamSummaries> streamSetGetSummariesAdHocWithHttpInfo(List<String> webId, String calculationBasis, String endTime, String filterExpression, String sampleInterval, String sampleType, String selectedFields, String startTime, String summaryDuration, List<String> summaryType, String timeType, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetSummariesAdHocValidateBeforeCall(webId, calculationBasis, endTime, filterExpression, sampleInterval, sampleType, selectedFields, startTime, summaryDuration, summaryType, timeType, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamSummaries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns summary values of the specified streams. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param calculationBasis Specifies the method of evaluating the data over the time range. The default is &#39;TimeWeighted&#39;. (optional)
     * @param endTime An optional end time. The default is &#39;*&#39;. Note that if endTime is earlier than startTime, the resulting values will be in time-descending order. (optional)
     * @param filterExpression A string containing a filter expression. Expression variables are relative to the attribute. Use &#39;.&#39; to reference the containing attribute. The default is no filtering. (optional)
     * @param sampleInterval A time span specifies how often the filter expression is evaluated when computing the summary for an interval, if the sampleType is &#39;Interval&#39;. (optional)
     * @param sampleType A flag which specifies one or more summaries to compute for each interval over the time range. The default is &#39;ExpressionRecordedValues&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startTime An optional start time. The default is &#39;*-1d&#39;. (optional)
     * @param summaryDuration The duration of each summary interval. (optional)
     * @param summaryType Specifies the kinds of summaries to produce over the range. The default is &#39;Total&#39;. Multiple summary types may be specified by using multiple instances of summaryType. (optional)
     * @param timeType Specifies how to calculate the timestamp for each interval. The default is &#39;Auto&#39;. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetSummariesAdHocAsync(List<String> webId, String calculationBasis, String endTime, String filterExpression, String sampleInterval, String sampleType, String selectedFields, String startTime, String summaryDuration, List<String> summaryType, String timeType, String timeZone, String webIdType, final ApiCallback<ItemsStreamSummaries> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetSummariesAdHocValidateBeforeCall(webId, calculationBasis, endTime, filterExpression, sampleInterval, sampleType, selectedFields, startTime, summaryDuration, summaryType, timeType, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamSummaries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetValues
     * @param webId The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param time An AF time string, which is used as the time context to get stream values if it is provided. By default, it is not specified, and the default time context of the AF object will be used. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetValuesCall(String webId, String categoryName, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String templateName, String time, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/{webId}/value"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryName", categoryName));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (searchFullHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFullHierarchy", searchFullHierarchy));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (showExcluded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showExcluded", showExcluded));
        }

        if (showHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showHidden", showHidden));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateName", templateName));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetValuesValidateBeforeCall(String webId, String categoryName, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String templateName, String time, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetValues(Async)");
        }

        return streamSetGetValuesCall(webId, categoryName, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, templateName, time, timeZone, webIdType, _callback);

    }

    /**
     * Returns values of the attributes for an Element, Event Frame or Attribute at the specified time.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param time An AF time string, which is used as the time context to get stream values if it is provided. By default, it is not specified, and the default time context of the AF object will be used. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValue streamSetGetValues(String webId, String categoryName, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String templateName, String time, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValue> localVarResp = streamSetGetValuesWithHttpInfo(webId, categoryName, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, templateName, time, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns values of the attributes for an Element, Event Frame or Attribute at the specified time.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param time An AF time string, which is used as the time context to get stream values if it is provided. By default, it is not specified, and the default time context of the AF object will be used. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValue> streamSetGetValuesWithHttpInfo(String webId, String categoryName, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String templateName, String time, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetValuesValidateBeforeCall(webId, categoryName, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, templateName, time, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns values of the attributes for an Element, Event Frame or Attribute at the specified time. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of an Element, Event Frame or Attribute, which is the base element or parent of all the stream attributes. (required)
     * @param categoryName Specify that included attributes must have this category. The default is no category filter. (optional)
     * @param nameFilter The name query string used for filtering attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param templateName Specify that included attributes must be members of this template. The default is no template filter. (optional)
     * @param time An AF time string, which is used as the time context to get stream values if it is provided. By default, it is not specified, and the default time context of the AF object will be used. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetValuesAsync(String webId, String categoryName, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, String templateName, String time, String timeZone, String webIdType, final ApiCallback<ItemsStreamValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetValuesValidateBeforeCall(webId, categoryName, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, templateName, time, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetGetValuesAdHoc
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param time An AF time string, which is used as the time context to get stream values if it is provided. By default, it is not specified, and the default time context of the AF object will be used. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetValuesAdHocCall(List<String> webId, String selectedFields, String sortField, String sortOrder, String time, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "webId", webId));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("time", time));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeZone", timeZone));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetGetValuesAdHocValidateBeforeCall(List<String> webId, String selectedFields, String sortField, String sortOrder, String time, String timeZone, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetGetValuesAdHoc(Async)");
        }

        return streamSetGetValuesAdHocCall(webId, selectedFields, sortField, sortOrder, time, timeZone, webIdType, _callback);

    }

    /**
     * Returns values of the specified streams.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param time An AF time string, which is used as the time context to get stream values if it is provided. By default, it is not specified, and the default time context of the AF object will be used. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamValue streamSetGetValuesAdHoc(List<String> webId, String selectedFields, String sortField, String sortOrder, String time, String timeZone, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamValue> localVarResp = streamSetGetValuesAdHocWithHttpInfo(webId, selectedFields, sortField, sortOrder, time, timeZone, webIdType);
        return localVarResp.getData();
    }

    /**
     * Returns values of the specified streams.
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param time An AF time string, which is used as the time context to get stream values if it is provided. By default, it is not specified, and the default time context of the AF object will be used. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamValue> streamSetGetValuesAdHocWithHttpInfo(List<String> webId, String selectedFields, String sortField, String sortOrder, String time, String timeZone, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetGetValuesAdHocValidateBeforeCall(webId, selectedFields, sortField, sortOrder, time, timeZone, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns values of the specified streams. (asynchronously)
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. For better performance, by default no sorting is applied. &#39;Name&#39; is the only supported field by which to sort. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; (optional)
     * @param time An AF time string, which is used as the time context to get stream values if it is provided. By default, it is not specified, and the default time context of the AF object will be used. (optional)
     * @param timeZone The time zone in which the time string will be interpreted. This parameter will be ignored if a time zone is specified in the time string. If no time zone is specified in either places, the PI Web API server time zone will be used. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Summary values of the streams that meet the specified conditions. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetGetValuesAdHocAsync(List<String> webId, String selectedFields, String sortField, String sortOrder, String time, String timeZone, String webIdType, final ApiCallback<ItemsStreamValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetGetValuesAdHocValidateBeforeCall(webId, selectedFields, sortField, sortOrder, time, timeZone, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetRegisterStreamSetUpdates
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Registration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Any webID supplied is invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Any webID supplied is a static attribute </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetRegisterStreamSetUpdatesCall(List<String> webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/updates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "webId", webId));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetRegisterStreamSetUpdatesValidateBeforeCall(List<String> webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetRegisterStreamSetUpdates(Async)");
        }

        return streamSetRegisterStreamSetUpdatesCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Register for stream updates
     * The supplied webIds will register for stream updates. For a 200 response, the returned location header will contain the url for retrieving the next set of stream updates.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamUpdatesRegister
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Registration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Any webID supplied is invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Any webID supplied is a static attribute </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamUpdatesRegister streamSetRegisterStreamSetUpdates(List<String> webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamUpdatesRegister> localVarResp = streamSetRegisterStreamSetUpdatesWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Register for stream updates
     * The supplied webIds will register for stream updates. For a 200 response, the returned location header will contain the url for retrieving the next set of stream updates.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamUpdatesRegister&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Registration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Any webID supplied is invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Any webID supplied is a static attribute </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamUpdatesRegister> streamSetRegisterStreamSetUpdatesWithHttpInfo(List<String> webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetRegisterStreamSetUpdatesValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamUpdatesRegister>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register for stream updates (asynchronously)
     * The supplied webIds will register for stream updates. For a 200 response, the returned location header will contain the url for retrieving the next set of stream updates.
     * @param webId The ID of a stream. Multiple streams may be specified with multiple instances of the parameter. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Registration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Any webID supplied is invalid </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Any webID supplied is a static attribute </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetRegisterStreamSetUpdatesAsync(List<String> webId, String selectedFields, String webIdType, final ApiCallback<ItemsStreamUpdatesRegister> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetRegisterStreamSetUpdatesValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamUpdatesRegister>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetRetrieveStreamSetUpdates
     * @param marker Identifier of stream source and current position. Multiple markers may be specified with multiple instances of the parameter. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stream updates have been successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetRetrieveStreamSetUpdatesCall(List<String> marker, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streamsets/updates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marker != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "marker", marker));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetRetrieveStreamSetUpdatesValidateBeforeCall(List<String> marker, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marker' is set
        if (marker == null) {
            throw new ApiException("Missing the required parameter 'marker' when calling streamSetRetrieveStreamSetUpdates(Async)");
        }

        return streamSetRetrieveStreamSetUpdatesCall(marker, selectedFields, webIdType, _callback);

    }

    /**
     * Receive stream updates
     * The supplied markers will identify the set of stream updates to retrieve. For a 200 response, the returned location header will contain the url for retrieving the stream updates.
     * @param marker Identifier of stream source and current position. Multiple markers may be specified with multiple instances of the parameter. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsStreamUpdatesRetrieve
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stream updates have been successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ItemsStreamUpdatesRetrieve streamSetRetrieveStreamSetUpdates(List<String> marker, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsStreamUpdatesRetrieve> localVarResp = streamSetRetrieveStreamSetUpdatesWithHttpInfo(marker, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Receive stream updates
     * The supplied markers will identify the set of stream updates to retrieve. For a 200 response, the returned location header will contain the url for retrieving the stream updates.
     * @param marker Identifier of stream source and current position. Multiple markers may be specified with multiple instances of the parameter. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsStreamUpdatesRetrieve&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stream updates have been successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsStreamUpdatesRetrieve> streamSetRetrieveStreamSetUpdatesWithHttpInfo(List<String> marker, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = streamSetRetrieveStreamSetUpdatesValidateBeforeCall(marker, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsStreamUpdatesRetrieve>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Receive stream updates (asynchronously)
     * The supplied markers will identify the set of stream updates to retrieve. For a 200 response, the returned location header will contain the url for retrieving the stream updates.
     * @param marker Identifier of stream source and current position. Multiple markers may be specified with multiple instances of the parameter. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stream updates have been successfully retrieved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetRetrieveStreamSetUpdatesAsync(List<String> marker, String selectedFields, String webIdType, final ApiCallback<ItemsStreamUpdatesRetrieve> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetRetrieveStreamSetUpdatesValidateBeforeCall(marker, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsStreamUpdatesRetrieve>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetUpdateValue
     * @param webId The ID of the parent element, event frame, or attribute. Attributes specified in the body must be descendants of the specified object. (required)
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetUpdateValueCall(String webId, List<StreamValue> values, String bufferOption, String updateOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = values;

        // create path and map variables
        String localVarPath = "/streamsets/{webId}/value"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bufferOption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bufferOption", bufferOption));
        }

        if (updateOption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateOption", updateOption));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetUpdateValueValidateBeforeCall(String webId, List<StreamValue> values, String bufferOption, String updateOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetUpdateValue(Async)");
        }

        // verify the required parameter 'values' is set
        if (values == null) {
            throw new ApiException("Missing the required parameter 'values' when calling streamSetUpdateValue(Async)");
        }

        return streamSetUpdateValueCall(webId, values, bufferOption, updateOption, _callback);

    }

    /**
     * Updates a single value for the specified streams.
     * 
     * @param webId The ID of the parent element, event frame, or attribute. Attributes specified in the body must be descendants of the specified object. (required)
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @return ItemsSubstatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsSubstatus streamSetUpdateValue(String webId, List<StreamValue> values, String bufferOption, String updateOption) throws ApiException {
        ApiResponse<ItemsSubstatus> localVarResp = streamSetUpdateValueWithHttpInfo(webId, values, bufferOption, updateOption);
        return localVarResp.getData();
    }

    /**
     * Updates a single value for the specified streams.
     * 
     * @param webId The ID of the parent element, event frame, or attribute. Attributes specified in the body must be descendants of the specified object. (required)
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @return ApiResponse&lt;ItemsSubstatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsSubstatus> streamSetUpdateValueWithHttpInfo(String webId, List<StreamValue> values, String bufferOption, String updateOption) throws ApiException {
        okhttp3.Call localVarCall = streamSetUpdateValueValidateBeforeCall(webId, values, bufferOption, updateOption, null);
        Type localVarReturnType = new TypeToken<ItemsSubstatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a single value for the specified streams. (asynchronously)
     * 
     * @param webId The ID of the parent element, event frame, or attribute. Attributes specified in the body must be descendants of the specified object. (required)
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetUpdateValueAsync(String webId, List<StreamValue> values, String bufferOption, String updateOption, final ApiCallback<ItemsSubstatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetUpdateValueValidateBeforeCall(webId, values, bufferOption, updateOption, _callback);
        Type localVarReturnType = new TypeToken<ItemsSubstatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetUpdateValueAdHoc
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetUpdateValueAdHocCall(List<StreamValue> values, String bufferOption, String updateOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = values;

        // create path and map variables
        String localVarPath = "/streamsets/value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bufferOption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bufferOption", bufferOption));
        }

        if (updateOption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateOption", updateOption));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetUpdateValueAdHocValidateBeforeCall(List<StreamValue> values, String bufferOption, String updateOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'values' is set
        if (values == null) {
            throw new ApiException("Missing the required parameter 'values' when calling streamSetUpdateValueAdHoc(Async)");
        }

        return streamSetUpdateValueAdHocCall(values, bufferOption, updateOption, _callback);

    }

    /**
     * Updates a single value for the specified streams.
     * 
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @return ItemsSubstatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsSubstatus streamSetUpdateValueAdHoc(List<StreamValue> values, String bufferOption, String updateOption) throws ApiException {
        ApiResponse<ItemsSubstatus> localVarResp = streamSetUpdateValueAdHocWithHttpInfo(values, bufferOption, updateOption);
        return localVarResp.getData();
    }

    /**
     * Updates a single value for the specified streams.
     * 
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @return ApiResponse&lt;ItemsSubstatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsSubstatus> streamSetUpdateValueAdHocWithHttpInfo(List<StreamValue> values, String bufferOption, String updateOption) throws ApiException {
        okhttp3.Call localVarCall = streamSetUpdateValueAdHocValidateBeforeCall(values, bufferOption, updateOption, null);
        Type localVarReturnType = new TypeToken<ItemsSubstatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a single value for the specified streams. (asynchronously)
     * 
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetUpdateValueAdHocAsync(List<StreamValue> values, String bufferOption, String updateOption, final ApiCallback<ItemsSubstatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetUpdateValueAdHocValidateBeforeCall(values, bufferOption, updateOption, _callback);
        Type localVarReturnType = new TypeToken<ItemsSubstatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetUpdateValues
     * @param webId The ID of the parent element, event frame, or attribute. Attributes specified in the body must be descendants of the specified object. (required)
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetUpdateValuesCall(String webId, List<StreamValues> values, String bufferOption, String updateOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = values;

        // create path and map variables
        String localVarPath = "/streamsets/{webId}/recorded"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bufferOption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bufferOption", bufferOption));
        }

        if (updateOption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateOption", updateOption));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetUpdateValuesValidateBeforeCall(String webId, List<StreamValues> values, String bufferOption, String updateOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling streamSetUpdateValues(Async)");
        }

        // verify the required parameter 'values' is set
        if (values == null) {
            throw new ApiException("Missing the required parameter 'values' when calling streamSetUpdateValues(Async)");
        }

        return streamSetUpdateValuesCall(webId, values, bufferOption, updateOption, _callback);

    }

    /**
     * Updates multiple values for the specified streams.
     * 
     * @param webId The ID of the parent element, event frame, or attribute. Attributes specified in the body must be descendants of the specified object. (required)
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @return ItemsItemsSubstatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsItemsSubstatus streamSetUpdateValues(String webId, List<StreamValues> values, String bufferOption, String updateOption) throws ApiException {
        ApiResponse<ItemsItemsSubstatus> localVarResp = streamSetUpdateValuesWithHttpInfo(webId, values, bufferOption, updateOption);
        return localVarResp.getData();
    }

    /**
     * Updates multiple values for the specified streams.
     * 
     * @param webId The ID of the parent element, event frame, or attribute. Attributes specified in the body must be descendants of the specified object. (required)
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @return ApiResponse&lt;ItemsItemsSubstatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsItemsSubstatus> streamSetUpdateValuesWithHttpInfo(String webId, List<StreamValues> values, String bufferOption, String updateOption) throws ApiException {
        okhttp3.Call localVarCall = streamSetUpdateValuesValidateBeforeCall(webId, values, bufferOption, updateOption, null);
        Type localVarReturnType = new TypeToken<ItemsItemsSubstatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates multiple values for the specified streams. (asynchronously)
     * 
     * @param webId The ID of the parent element, event frame, or attribute. Attributes specified in the body must be descendants of the specified object. (required)
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetUpdateValuesAsync(String webId, List<StreamValues> values, String bufferOption, String updateOption, final ApiCallback<ItemsItemsSubstatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetUpdateValuesValidateBeforeCall(webId, values, bufferOption, updateOption, _callback);
        Type localVarReturnType = new TypeToken<ItemsItemsSubstatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for streamSetUpdateValuesAdHoc
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetUpdateValuesAdHocCall(List<StreamValues> values, String bufferOption, String updateOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = values;

        // create path and map variables
        String localVarPath = "/streamsets/recorded";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bufferOption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bufferOption", bufferOption));
        }

        if (updateOption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updateOption", updateOption));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call streamSetUpdateValuesAdHocValidateBeforeCall(List<StreamValues> values, String bufferOption, String updateOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'values' is set
        if (values == null) {
            throw new ApiException("Missing the required parameter 'values' when calling streamSetUpdateValuesAdHoc(Async)");
        }

        return streamSetUpdateValuesAdHocCall(values, bufferOption, updateOption, _callback);

    }

    /**
     * Updates multiple values for the specified streams.
     * 
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @return ItemsItemsSubstatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsItemsSubstatus streamSetUpdateValuesAdHoc(List<StreamValues> values, String bufferOption, String updateOption) throws ApiException {
        ApiResponse<ItemsItemsSubstatus> localVarResp = streamSetUpdateValuesAdHocWithHttpInfo(values, bufferOption, updateOption);
        return localVarResp.getData();
    }

    /**
     * Updates multiple values for the specified streams.
     * 
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @return ApiResponse&lt;ItemsItemsSubstatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsItemsSubstatus> streamSetUpdateValuesAdHocWithHttpInfo(List<StreamValues> values, String bufferOption, String updateOption) throws ApiException {
        okhttp3.Call localVarCall = streamSetUpdateValuesAdHocValidateBeforeCall(values, bufferOption, updateOption, null);
        Type localVarReturnType = new TypeToken<ItemsItemsSubstatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates multiple values for the specified streams. (asynchronously)
     * 
     * @param values The values to add or update. (required)
     * @param bufferOption The desired AFBufferOption. The default is &#39;BufferIfPossible&#39;. (optional)
     * @param updateOption The desired AFUpdateOption. The default is &#39;Replace&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All updates executed successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The operation was a partial success. The response body contains substatuses and errors in the same order as the supplied values. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported operation on the given AF object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call streamSetUpdateValuesAdHocAsync(List<StreamValues> values, String bufferOption, String updateOption, final ApiCallback<ItemsItemsSubstatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = streamSetUpdateValuesAdHocValidateBeforeCall(values, bufferOption, updateOption, _callback);
        Type localVarReturnType = new TypeToken<ItemsItemsSubstatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
