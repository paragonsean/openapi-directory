/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsNotificationRuleSubscriber;
import org.openapitools.client.model.ItemsNotificationRuleTemplate;
import org.openapitools.client.model.ItemsSecurityEntry;
import org.openapitools.client.model.ItemsSecurityRights;
import org.openapitools.client.model.NotificationRuleSubscriber;
import org.openapitools.client.model.NotificationRuleTemplate;
import org.openapitools.client.model.SecurityEntry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationRuleTemplateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationRuleTemplateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationRuleTemplateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for notificationRuleTemplateCreateNotificationRuleTemplateSubscriber
     * @param webId The ID of the notification rule template on which to create the notification rule subscriber. (required)
     * @param notificationRuleSubscriber The new notification rule subscriber definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The notification rule subscriber was created. The response&#39;s Location header is a link to the notification rule subscriber. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateCreateNotificationRuleTemplateSubscriberCall(String webId, NotificationRuleSubscriber notificationRuleSubscriber, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationRuleSubscriber;

        // create path and map variables
        String localVarPath = "/notificationruletemplates/{webId}/notificationrulesubscribers"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationRuleTemplateCreateNotificationRuleTemplateSubscriberValidateBeforeCall(String webId, NotificationRuleSubscriber notificationRuleSubscriber, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling notificationRuleTemplateCreateNotificationRuleTemplateSubscriber(Async)");
        }

        // verify the required parameter 'notificationRuleSubscriber' is set
        if (notificationRuleSubscriber == null) {
            throw new ApiException("Missing the required parameter 'notificationRuleSubscriber' when calling notificationRuleTemplateCreateNotificationRuleTemplateSubscriber(Async)");
        }

        return notificationRuleTemplateCreateNotificationRuleTemplateSubscriberCall(webId, notificationRuleSubscriber, webIdType, _callback);

    }

    /**
     * Create a notification rule subscriber.
     * 
     * @param webId The ID of the notification rule template on which to create the notification rule subscriber. (required)
     * @param notificationRuleSubscriber The new notification rule subscriber definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The notification rule subscriber was created. The response&#39;s Location header is a link to the notification rule subscriber. </td><td>  -  </td></tr>
     </table>
     */
    public void notificationRuleTemplateCreateNotificationRuleTemplateSubscriber(String webId, NotificationRuleSubscriber notificationRuleSubscriber, String webIdType) throws ApiException {
        notificationRuleTemplateCreateNotificationRuleTemplateSubscriberWithHttpInfo(webId, notificationRuleSubscriber, webIdType);
    }

    /**
     * Create a notification rule subscriber.
     * 
     * @param webId The ID of the notification rule template on which to create the notification rule subscriber. (required)
     * @param notificationRuleSubscriber The new notification rule subscriber definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The notification rule subscriber was created. The response&#39;s Location header is a link to the notification rule subscriber. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationRuleTemplateCreateNotificationRuleTemplateSubscriberWithHttpInfo(String webId, NotificationRuleSubscriber notificationRuleSubscriber, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = notificationRuleTemplateCreateNotificationRuleTemplateSubscriberValidateBeforeCall(webId, notificationRuleSubscriber, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a notification rule subscriber. (asynchronously)
     * 
     * @param webId The ID of the notification rule template on which to create the notification rule subscriber. (required)
     * @param notificationRuleSubscriber The new notification rule subscriber definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The notification rule subscriber was created. The response&#39;s Location header is a link to the notification rule subscriber. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateCreateNotificationRuleTemplateSubscriberAsync(String webId, NotificationRuleSubscriber notificationRuleSubscriber, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationRuleTemplateCreateNotificationRuleTemplateSubscriberValidateBeforeCall(webId, notificationRuleSubscriber, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationRuleTemplateCreateSecurityEntry
     * @param webId The ID of the notification rule template, where the security entry will be created. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security entry was created. The response&#39;s Location header is a link to the security entry. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateCreateSecurityEntryCall(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = securityEntry;

        // create path and map variables
        String localVarPath = "/notificationruletemplates/{webId}/securityentries"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applyToChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applyToChildren", applyToChildren));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationRuleTemplateCreateSecurityEntryValidateBeforeCall(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling notificationRuleTemplateCreateSecurityEntry(Async)");
        }

        // verify the required parameter 'securityEntry' is set
        if (securityEntry == null) {
            throw new ApiException("Missing the required parameter 'securityEntry' when calling notificationRuleTemplateCreateSecurityEntry(Async)");
        }

        return notificationRuleTemplateCreateSecurityEntryCall(webId, securityEntry, applyToChildren, webIdType, _callback);

    }

    /**
     * Create a security entry owned by the notification rule template.
     * 
     * @param webId The ID of the notification rule template, where the security entry will be created. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security entry was created. The response&#39;s Location header is a link to the security entry. </td><td>  -  </td></tr>
     </table>
     */
    public void notificationRuleTemplateCreateSecurityEntry(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String webIdType) throws ApiException {
        notificationRuleTemplateCreateSecurityEntryWithHttpInfo(webId, securityEntry, applyToChildren, webIdType);
    }

    /**
     * Create a security entry owned by the notification rule template.
     * 
     * @param webId The ID of the notification rule template, where the security entry will be created. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security entry was created. The response&#39;s Location header is a link to the security entry. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationRuleTemplateCreateSecurityEntryWithHttpInfo(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = notificationRuleTemplateCreateSecurityEntryValidateBeforeCall(webId, securityEntry, applyToChildren, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a security entry owned by the notification rule template. (asynchronously)
     * 
     * @param webId The ID of the notification rule template, where the security entry will be created. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security entry was created. The response&#39;s Location header is a link to the security entry. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateCreateSecurityEntryAsync(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationRuleTemplateCreateSecurityEntryValidateBeforeCall(webId, securityEntry, applyToChildren, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationRuleTemplateDelete
     * @param webId The ID of the notification rule template. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The notification rule template was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateDeleteCall(String webId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationruletemplates/{webId}"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationRuleTemplateDeleteValidateBeforeCall(String webId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling notificationRuleTemplateDelete(Async)");
        }

        return notificationRuleTemplateDeleteCall(webId, _callback);

    }

    /**
     * Delete a notification rule template.
     * 
     * @param webId The ID of the notification rule template. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The notification rule template was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void notificationRuleTemplateDelete(String webId) throws ApiException {
        notificationRuleTemplateDeleteWithHttpInfo(webId);
    }

    /**
     * Delete a notification rule template.
     * 
     * @param webId The ID of the notification rule template. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The notification rule template was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationRuleTemplateDeleteWithHttpInfo(String webId) throws ApiException {
        okhttp3.Call localVarCall = notificationRuleTemplateDeleteValidateBeforeCall(webId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a notification rule template. (asynchronously)
     * 
     * @param webId The ID of the notification rule template. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The notification rule template was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateDeleteAsync(String webId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationRuleTemplateDeleteValidateBeforeCall(webId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationRuleTemplateDeleteSecurityEntry
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the notification rule template, where the security entry will be deleted. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateDeleteSecurityEntryCall(String name, String webId, Boolean applyToChildren, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationruletemplates/{webId}/securityentries/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applyToChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applyToChildren", applyToChildren));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationRuleTemplateDeleteSecurityEntryValidateBeforeCall(String name, String webId, Boolean applyToChildren, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling notificationRuleTemplateDeleteSecurityEntry(Async)");
        }

        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling notificationRuleTemplateDeleteSecurityEntry(Async)");
        }

        return notificationRuleTemplateDeleteSecurityEntryCall(name, webId, applyToChildren, _callback);

    }

    /**
     * Delete a security entry owned by the notification rule template.
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the notification rule template, where the security entry will be deleted. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void notificationRuleTemplateDeleteSecurityEntry(String name, String webId, Boolean applyToChildren) throws ApiException {
        notificationRuleTemplateDeleteSecurityEntryWithHttpInfo(name, webId, applyToChildren);
    }

    /**
     * Delete a security entry owned by the notification rule template.
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the notification rule template, where the security entry will be deleted. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationRuleTemplateDeleteSecurityEntryWithHttpInfo(String name, String webId, Boolean applyToChildren) throws ApiException {
        okhttp3.Call localVarCall = notificationRuleTemplateDeleteSecurityEntryValidateBeforeCall(name, webId, applyToChildren, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a security entry owned by the notification rule template. (asynchronously)
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the notification rule template, where the security entry will be deleted. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateDeleteSecurityEntryAsync(String name, String webId, Boolean applyToChildren, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationRuleTemplateDeleteSecurityEntryValidateBeforeCall(name, webId, applyToChildren, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationRuleTemplateGet
     * @param webId The ID of the notification rule template. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified notification rule template. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateGetCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationruletemplates/{webId}"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationRuleTemplateGetValidateBeforeCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling notificationRuleTemplateGet(Async)");
        }

        return notificationRuleTemplateGetCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Get the specified notification rule template.
     * 
     * @param webId The ID of the notification rule template. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return NotificationRuleTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified notification rule template. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationRuleTemplate notificationRuleTemplateGet(String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<NotificationRuleTemplate> localVarResp = notificationRuleTemplateGetWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Get the specified notification rule template.
     * 
     * @param webId The ID of the notification rule template. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;NotificationRuleTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified notification rule template. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationRuleTemplate> notificationRuleTemplateGetWithHttpInfo(String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = notificationRuleTemplateGetValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<NotificationRuleTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the specified notification rule template. (asynchronously)
     * 
     * @param webId The ID of the notification rule template. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified notification rule template. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateGetAsync(String webId, String selectedFields, String webIdType, final ApiCallback<NotificationRuleTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationRuleTemplateGetValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<NotificationRuleTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationRuleTemplateGetByPath
     * @param path The path to the notification rule template. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified notification rule template. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateGetByPathCall(String path, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationruletemplates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationRuleTemplateGetByPathValidateBeforeCall(String path, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling notificationRuleTemplateGetByPath(Async)");
        }

        return notificationRuleTemplateGetByPathCall(path, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve a notification rule template by path.
     * This method returns a Notification Rule Template based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the notification rule template. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return NotificationRuleTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified notification rule template. </td><td>  -  </td></tr>
     </table>
     */
    public NotificationRuleTemplate notificationRuleTemplateGetByPath(String path, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<NotificationRuleTemplate> localVarResp = notificationRuleTemplateGetByPathWithHttpInfo(path, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve a notification rule template by path.
     * This method returns a Notification Rule Template based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the notification rule template. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;NotificationRuleTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified notification rule template. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationRuleTemplate> notificationRuleTemplateGetByPathWithHttpInfo(String path, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = notificationRuleTemplateGetByPathValidateBeforeCall(path, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<NotificationRuleTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a notification rule template by path. (asynchronously)
     * This method returns a Notification Rule Template based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the notification rule template. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified notification rule template. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateGetByPathAsync(String path, String selectedFields, String webIdType, final ApiCallback<NotificationRuleTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationRuleTemplateGetByPathValidateBeforeCall(path, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<NotificationRuleTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationRuleTemplateGetNotificationRuleTemplateSubscribers
     * @param webId The ID of the resource to use as the root of the search. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification rule template subscribers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateGetNotificationRuleTemplateSubscribersCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationruletemplates/{webId}/notificationrulesubscribers"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationRuleTemplateGetNotificationRuleTemplateSubscribersValidateBeforeCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling notificationRuleTemplateGetNotificationRuleTemplateSubscribers(Async)");
        }

        return notificationRuleTemplateGetNotificationRuleTemplateSubscribersCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve notification rule template subscribers.
     * 
     * @param webId The ID of the resource to use as the root of the search. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsNotificationRuleSubscriber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification rule template subscribers. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsNotificationRuleSubscriber notificationRuleTemplateGetNotificationRuleTemplateSubscribers(String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsNotificationRuleSubscriber> localVarResp = notificationRuleTemplateGetNotificationRuleTemplateSubscribersWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve notification rule template subscribers.
     * 
     * @param webId The ID of the resource to use as the root of the search. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsNotificationRuleSubscriber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification rule template subscribers. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsNotificationRuleSubscriber> notificationRuleTemplateGetNotificationRuleTemplateSubscribersWithHttpInfo(String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = notificationRuleTemplateGetNotificationRuleTemplateSubscribersValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsNotificationRuleSubscriber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve notification rule template subscribers. (asynchronously)
     * 
     * @param webId The ID of the resource to use as the root of the search. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification rule template subscribers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateGetNotificationRuleTemplateSubscribersAsync(String webId, String selectedFields, String webIdType, final ApiCallback<ItemsNotificationRuleSubscriber> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationRuleTemplateGetNotificationRuleTemplateSubscribersValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsNotificationRuleSubscriber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationRuleTemplateGetNotificationRuleTemplatesQuery
     * @param databaseWebId The ID of the asset database to use as the root of the query. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param query The query string is a list of filters used to perform an AFSearch for the Notification rule templates in the asset database. An example would be: \&quot;query&#x3D;NotificationRuleTemplate:{ Name:&#x3D;&#39;MyNotificationRuleTemplate&#39; } Type:&#x3D;Int32\&quot;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification rule templates matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateGetNotificationRuleTemplatesQueryCall(String databaseWebId, Integer maxCount, String query, String selectedFields, Integer startIndex, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationruletemplates/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (databaseWebId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("databaseWebId", databaseWebId));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationRuleTemplateGetNotificationRuleTemplatesQueryValidateBeforeCall(String databaseWebId, Integer maxCount, String query, String selectedFields, Integer startIndex, String webIdType, final ApiCallback _callback) throws ApiException {
        return notificationRuleTemplateGetNotificationRuleTemplatesQueryCall(databaseWebId, maxCount, query, selectedFields, startIndex, webIdType, _callback);

    }

    /**
     * Retrieve Notification rule templates based on the specified conditions. Returns Notification rule templates using the specified search query string.
     * 
     * @param databaseWebId The ID of the asset database to use as the root of the query. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param query The query string is a list of filters used to perform an AFSearch for the Notification rule templates in the asset database. An example would be: \&quot;query&#x3D;NotificationRuleTemplate:{ Name:&#x3D;&#39;MyNotificationRuleTemplate&#39; } Type:&#x3D;Int32\&quot;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsNotificationRuleTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification rule templates matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsNotificationRuleTemplate notificationRuleTemplateGetNotificationRuleTemplatesQuery(String databaseWebId, Integer maxCount, String query, String selectedFields, Integer startIndex, String webIdType) throws ApiException {
        ApiResponse<ItemsNotificationRuleTemplate> localVarResp = notificationRuleTemplateGetNotificationRuleTemplatesQueryWithHttpInfo(databaseWebId, maxCount, query, selectedFields, startIndex, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve Notification rule templates based on the specified conditions. Returns Notification rule templates using the specified search query string.
     * 
     * @param databaseWebId The ID of the asset database to use as the root of the query. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param query The query string is a list of filters used to perform an AFSearch for the Notification rule templates in the asset database. An example would be: \&quot;query&#x3D;NotificationRuleTemplate:{ Name:&#x3D;&#39;MyNotificationRuleTemplate&#39; } Type:&#x3D;Int32\&quot;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsNotificationRuleTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification rule templates matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsNotificationRuleTemplate> notificationRuleTemplateGetNotificationRuleTemplatesQueryWithHttpInfo(String databaseWebId, Integer maxCount, String query, String selectedFields, Integer startIndex, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = notificationRuleTemplateGetNotificationRuleTemplatesQueryValidateBeforeCall(databaseWebId, maxCount, query, selectedFields, startIndex, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsNotificationRuleTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Notification rule templates based on the specified conditions. Returns Notification rule templates using the specified search query string. (asynchronously)
     * 
     * @param databaseWebId The ID of the asset database to use as the root of the query. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param query The query string is a list of filters used to perform an AFSearch for the Notification rule templates in the asset database. An example would be: \&quot;query&#x3D;NotificationRuleTemplate:{ Name:&#x3D;&#39;MyNotificationRuleTemplate&#39; } Type:&#x3D;Int32\&quot;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification rule templates matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateGetNotificationRuleTemplatesQueryAsync(String databaseWebId, Integer maxCount, String query, String selectedFields, Integer startIndex, String webIdType, final ApiCallback<ItemsNotificationRuleTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationRuleTemplateGetNotificationRuleTemplatesQueryValidateBeforeCall(databaseWebId, maxCount, query, selectedFields, startIndex, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsNotificationRuleTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationRuleTemplateGetSecurity
     * @param webId The ID of the notification rule template for the security to be checked. (required)
     * @param userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param forceRefresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security rights. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported when using Anonymous authentication method. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateGetSecurityCall(String webId, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationruletemplates/{webId}/security"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userIdentity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "userIdentity", userIdentity));
        }

        if (forceRefresh != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceRefresh", forceRefresh));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationRuleTemplateGetSecurityValidateBeforeCall(String webId, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling notificationRuleTemplateGetSecurity(Async)");
        }

        // verify the required parameter 'userIdentity' is set
        if (userIdentity == null) {
            throw new ApiException("Missing the required parameter 'userIdentity' when calling notificationRuleTemplateGetSecurity(Async)");
        }

        return notificationRuleTemplateGetSecurityCall(webId, userIdentity, forceRefresh, selectedFields, webIdType, _callback);

    }

    /**
     * Get the security information of the specified security item associated with the notification rule template for a specified user.
     * 
     * @param webId The ID of the notification rule template for the security to be checked. (required)
     * @param userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param forceRefresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsSecurityRights
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security rights. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported when using Anonymous authentication method. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsSecurityRights notificationRuleTemplateGetSecurity(String webId, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsSecurityRights> localVarResp = notificationRuleTemplateGetSecurityWithHttpInfo(webId, userIdentity, forceRefresh, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Get the security information of the specified security item associated with the notification rule template for a specified user.
     * 
     * @param webId The ID of the notification rule template for the security to be checked. (required)
     * @param userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param forceRefresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsSecurityRights&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security rights. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported when using Anonymous authentication method. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsSecurityRights> notificationRuleTemplateGetSecurityWithHttpInfo(String webId, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = notificationRuleTemplateGetSecurityValidateBeforeCall(webId, userIdentity, forceRefresh, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsSecurityRights>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the security information of the specified security item associated with the notification rule template for a specified user. (asynchronously)
     * 
     * @param webId The ID of the notification rule template for the security to be checked. (required)
     * @param userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param forceRefresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security rights. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported when using Anonymous authentication method. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateGetSecurityAsync(String webId, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType, final ApiCallback<ItemsSecurityRights> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationRuleTemplateGetSecurityValidateBeforeCall(webId, userIdentity, forceRefresh, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsSecurityRights>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationRuleTemplateGetSecurityEntries
     * @param webId The ID of the notification rule template. (required)
     * @param nameFilter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security entries matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateGetSecurityEntriesCall(String webId, String nameFilter, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationruletemplates/{webId}/securityentries"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationRuleTemplateGetSecurityEntriesValidateBeforeCall(String webId, String nameFilter, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling notificationRuleTemplateGetSecurityEntries(Async)");
        }

        return notificationRuleTemplateGetSecurityEntriesCall(webId, nameFilter, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve the security entries associated with the notification rule template based on the specified criteria. By default, all security entries for this notification rule template are returned.
     * 
     * @param webId The ID of the notification rule template. (required)
     * @param nameFilter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsSecurityEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security entries matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsSecurityEntry notificationRuleTemplateGetSecurityEntries(String webId, String nameFilter, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsSecurityEntry> localVarResp = notificationRuleTemplateGetSecurityEntriesWithHttpInfo(webId, nameFilter, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve the security entries associated with the notification rule template based on the specified criteria. By default, all security entries for this notification rule template are returned.
     * 
     * @param webId The ID of the notification rule template. (required)
     * @param nameFilter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsSecurityEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security entries matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsSecurityEntry> notificationRuleTemplateGetSecurityEntriesWithHttpInfo(String webId, String nameFilter, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = notificationRuleTemplateGetSecurityEntriesValidateBeforeCall(webId, nameFilter, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsSecurityEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the security entries associated with the notification rule template based on the specified criteria. By default, all security entries for this notification rule template are returned. (asynchronously)
     * 
     * @param webId The ID of the notification rule template. (required)
     * @param nameFilter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security entries matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateGetSecurityEntriesAsync(String webId, String nameFilter, String selectedFields, String webIdType, final ApiCallback<ItemsSecurityEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationRuleTemplateGetSecurityEntriesValidateBeforeCall(webId, nameFilter, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsSecurityEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationRuleTemplateGetSecurityEntryByName
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the notification rule template. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The security entry matching the specified condition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The security entry with the specified name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateGetSecurityEntryByNameCall(String name, String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notificationruletemplates/{webId}/securityentries/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationRuleTemplateGetSecurityEntryByNameValidateBeforeCall(String name, String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling notificationRuleTemplateGetSecurityEntryByName(Async)");
        }

        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling notificationRuleTemplateGetSecurityEntryByName(Async)");
        }

        return notificationRuleTemplateGetSecurityEntryByNameCall(name, webId, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve the security entry associated with the notification rule template with the specified name.
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the notification rule template. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return SecurityEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The security entry matching the specified condition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The security entry with the specified name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public SecurityEntry notificationRuleTemplateGetSecurityEntryByName(String name, String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<SecurityEntry> localVarResp = notificationRuleTemplateGetSecurityEntryByNameWithHttpInfo(name, webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve the security entry associated with the notification rule template with the specified name.
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the notification rule template. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;SecurityEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The security entry matching the specified condition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The security entry with the specified name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityEntry> notificationRuleTemplateGetSecurityEntryByNameWithHttpInfo(String name, String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = notificationRuleTemplateGetSecurityEntryByNameValidateBeforeCall(name, webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<SecurityEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the security entry associated with the notification rule template with the specified name. (asynchronously)
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the notification rule template. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The security entry matching the specified condition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The security entry with the specified name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateGetSecurityEntryByNameAsync(String name, String webId, String selectedFields, String webIdType, final ApiCallback<SecurityEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationRuleTemplateGetSecurityEntryByNameValidateBeforeCall(name, webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<SecurityEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationRuleTemplateUpdate
     * @param webId The ID of the notification rule template to update. (required)
     * @param notificationRuleTemplate A partial notification rule template containing the desired changes. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The notification rule template was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateUpdateCall(String webId, NotificationRuleTemplate notificationRuleTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationRuleTemplate;

        // create path and map variables
        String localVarPath = "/notificationruletemplates/{webId}"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationRuleTemplateUpdateValidateBeforeCall(String webId, NotificationRuleTemplate notificationRuleTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling notificationRuleTemplateUpdate(Async)");
        }

        // verify the required parameter 'notificationRuleTemplate' is set
        if (notificationRuleTemplate == null) {
            throw new ApiException("Missing the required parameter 'notificationRuleTemplate' when calling notificationRuleTemplateUpdate(Async)");
        }

        return notificationRuleTemplateUpdateCall(webId, notificationRuleTemplate, _callback);

    }

    /**
     * Update a notification rule template by replacing items in its definition.
     * 
     * @param webId The ID of the notification rule template to update. (required)
     * @param notificationRuleTemplate A partial notification rule template containing the desired changes. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The notification rule template was updated. </td><td>  -  </td></tr>
     </table>
     */
    public void notificationRuleTemplateUpdate(String webId, NotificationRuleTemplate notificationRuleTemplate) throws ApiException {
        notificationRuleTemplateUpdateWithHttpInfo(webId, notificationRuleTemplate);
    }

    /**
     * Update a notification rule template by replacing items in its definition.
     * 
     * @param webId The ID of the notification rule template to update. (required)
     * @param notificationRuleTemplate A partial notification rule template containing the desired changes. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The notification rule template was updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationRuleTemplateUpdateWithHttpInfo(String webId, NotificationRuleTemplate notificationRuleTemplate) throws ApiException {
        okhttp3.Call localVarCall = notificationRuleTemplateUpdateValidateBeforeCall(webId, notificationRuleTemplate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a notification rule template by replacing items in its definition. (asynchronously)
     * 
     * @param webId The ID of the notification rule template to update. (required)
     * @param notificationRuleTemplate A partial notification rule template containing the desired changes. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The notification rule template was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateUpdateAsync(String webId, NotificationRuleTemplate notificationRuleTemplate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationRuleTemplateUpdateValidateBeforeCall(webId, notificationRuleTemplate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationRuleTemplateUpdateSecurityEntry
     * @param name The name of the security entry. (required)
     * @param webId The ID of the notification rule template, where the security entry will be updated. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateUpdateSecurityEntryCall(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = securityEntry;

        // create path and map variables
        String localVarPath = "/notificationruletemplates/{webId}/securityentries/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applyToChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applyToChildren", applyToChildren));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationRuleTemplateUpdateSecurityEntryValidateBeforeCall(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling notificationRuleTemplateUpdateSecurityEntry(Async)");
        }

        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling notificationRuleTemplateUpdateSecurityEntry(Async)");
        }

        // verify the required parameter 'securityEntry' is set
        if (securityEntry == null) {
            throw new ApiException("Missing the required parameter 'securityEntry' when calling notificationRuleTemplateUpdateSecurityEntry(Async)");
        }

        return notificationRuleTemplateUpdateSecurityEntryCall(name, webId, securityEntry, applyToChildren, _callback);

    }

    /**
     * Update a security entry owned by the notification rule template.
     * 
     * @param name The name of the security entry. (required)
     * @param webId The ID of the notification rule template, where the security entry will be updated. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was updated. </td><td>  -  </td></tr>
     </table>
     */
    public void notificationRuleTemplateUpdateSecurityEntry(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren) throws ApiException {
        notificationRuleTemplateUpdateSecurityEntryWithHttpInfo(name, webId, securityEntry, applyToChildren);
    }

    /**
     * Update a security entry owned by the notification rule template.
     * 
     * @param name The name of the security entry. (required)
     * @param webId The ID of the notification rule template, where the security entry will be updated. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> notificationRuleTemplateUpdateSecurityEntryWithHttpInfo(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren) throws ApiException {
        okhttp3.Call localVarCall = notificationRuleTemplateUpdateSecurityEntryValidateBeforeCall(name, webId, securityEntry, applyToChildren, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a security entry owned by the notification rule template. (asynchronously)
     * 
     * @param name The name of the security entry. (required)
     * @param webId The ID of the notification rule template, where the security entry will be updated. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationRuleTemplateUpdateSecurityEntryAsync(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationRuleTemplateUpdateSecurityEntryValidateBeforeCall(name, webId, securityEntry, applyToChildren, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
