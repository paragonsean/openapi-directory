/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AnalysisLinks;
import org.openapitools.client.model.WebException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Analysis
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Analysis {
  public static final String SERIALIZED_NAME_ANALYSIS_RULE_PLUG_IN_NAME = "AnalysisRulePlugInName";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_RULE_PLUG_IN_NAME)
  private String analysisRulePlugInName;

  public static final String SERIALIZED_NAME_AUTO_CREATED = "AutoCreated";
  @SerializedName(SERIALIZED_NAME_AUTO_CREATED)
  private Boolean autoCreated;

  public static final String SERIALIZED_NAME_CATEGORY_NAMES = "CategoryNames";
  @SerializedName(SERIALIZED_NAME_CATEGORY_NAMES)
  private List<String> categoryNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GROUP_ID = "GroupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Integer groupId;

  public static final String SERIALIZED_NAME_HAS_NOTIFICATION = "HasNotification";
  @SerializedName(SERIALIZED_NAME_HAS_NOTIFICATION)
  private Boolean hasNotification;

  public static final String SERIALIZED_NAME_HAS_TARGET = "HasTarget";
  @SerializedName(SERIALIZED_NAME_HAS_TARGET)
  private Boolean hasTarget;

  public static final String SERIALIZED_NAME_HAS_TEMPLATE = "HasTemplate";
  @SerializedName(SERIALIZED_NAME_HAS_TEMPLATE)
  private Boolean hasTemplate;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IS_CONFIGURED = "IsConfigured";
  @SerializedName(SERIALIZED_NAME_IS_CONFIGURED)
  private Boolean isConfigured;

  public static final String SERIALIZED_NAME_IS_TIME_RULE_DEFINED_BY_TEMPLATE = "IsTimeRuleDefinedByTemplate";
  @SerializedName(SERIALIZED_NAME_IS_TIME_RULE_DEFINED_BY_TEMPLATE)
  private Boolean isTimeRuleDefinedByTemplate;

  public static final String SERIALIZED_NAME_LINKS = "Links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private AnalysisLinks links;

  public static final String SERIALIZED_NAME_MAXIMUM_QUEUE_SIZE = "MaximumQueueSize";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_QUEUE_SIZE)
  private Integer maximumQueueSize;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTPUT_TIME = "OutputTime";
  @SerializedName(SERIALIZED_NAME_OUTPUT_TIME)
  private String outputTime;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PRIORITY = "Priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private String priority;

  public static final String SERIALIZED_NAME_PUBLISH_RESULTS = "PublishResults";
  @SerializedName(SERIALIZED_NAME_PUBLISH_RESULTS)
  private Boolean publishResults;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TARGET_WEB_ID = "TargetWebId";
  @SerializedName(SERIALIZED_NAME_TARGET_WEB_ID)
  private String targetWebId;

  public static final String SERIALIZED_NAME_TEMPLATE_NAME = "TemplateName";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_NAME)
  private String templateName;

  public static final String SERIALIZED_NAME_TIME_RULE_PLUG_IN_NAME = "TimeRulePlugInName";
  @SerializedName(SERIALIZED_NAME_TIME_RULE_PLUG_IN_NAME)
  private String timeRulePlugInName;

  public static final String SERIALIZED_NAME_WEB_EXCEPTION = "WebException";
  @SerializedName(SERIALIZED_NAME_WEB_EXCEPTION)
  private WebException webException;

  public static final String SERIALIZED_NAME_WEB_ID = "WebId";
  @SerializedName(SERIALIZED_NAME_WEB_ID)
  private String webId;

  public Analysis() {
  }

  public Analysis analysisRulePlugInName(String analysisRulePlugInName) {
    this.analysisRulePlugInName = analysisRulePlugInName;
    return this;
  }

  /**
   * Get analysisRulePlugInName
   * @return analysisRulePlugInName
   */
  @javax.annotation.Nullable
  public String getAnalysisRulePlugInName() {
    return analysisRulePlugInName;
  }

  public void setAnalysisRulePlugInName(String analysisRulePlugInName) {
    this.analysisRulePlugInName = analysisRulePlugInName;
  }


  public Analysis autoCreated(Boolean autoCreated) {
    this.autoCreated = autoCreated;
    return this;
  }

  /**
   * Get autoCreated
   * @return autoCreated
   */
  @javax.annotation.Nullable
  public Boolean getAutoCreated() {
    return autoCreated;
  }

  public void setAutoCreated(Boolean autoCreated) {
    this.autoCreated = autoCreated;
  }


  public Analysis categoryNames(List<String> categoryNames) {
    this.categoryNames = categoryNames;
    return this;
  }

  public Analysis addCategoryNamesItem(String categoryNamesItem) {
    if (this.categoryNames == null) {
      this.categoryNames = new ArrayList<>();
    }
    this.categoryNames.add(categoryNamesItem);
    return this;
  }

  /**
   * Get categoryNames
   * @return categoryNames
   */
  @javax.annotation.Nullable
  public List<String> getCategoryNames() {
    return categoryNames;
  }

  public void setCategoryNames(List<String> categoryNames) {
    this.categoryNames = categoryNames;
  }


  public Analysis description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Analysis groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Get groupId
   * @return groupId
   */
  @javax.annotation.Nullable
  public Integer getGroupId() {
    return groupId;
  }

  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }


  public Analysis hasNotification(Boolean hasNotification) {
    this.hasNotification = hasNotification;
    return this;
  }

  /**
   * Get hasNotification
   * @return hasNotification
   */
  @javax.annotation.Nullable
  public Boolean getHasNotification() {
    return hasNotification;
  }

  public void setHasNotification(Boolean hasNotification) {
    this.hasNotification = hasNotification;
  }


  public Analysis hasTarget(Boolean hasTarget) {
    this.hasTarget = hasTarget;
    return this;
  }

  /**
   * Get hasTarget
   * @return hasTarget
   */
  @javax.annotation.Nullable
  public Boolean getHasTarget() {
    return hasTarget;
  }

  public void setHasTarget(Boolean hasTarget) {
    this.hasTarget = hasTarget;
  }


  public Analysis hasTemplate(Boolean hasTemplate) {
    this.hasTemplate = hasTemplate;
    return this;
  }

  /**
   * Get hasTemplate
   * @return hasTemplate
   */
  @javax.annotation.Nullable
  public Boolean getHasTemplate() {
    return hasTemplate;
  }

  public void setHasTemplate(Boolean hasTemplate) {
    this.hasTemplate = hasTemplate;
  }


  public Analysis id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public Analysis isConfigured(Boolean isConfigured) {
    this.isConfigured = isConfigured;
    return this;
  }

  /**
   * Get isConfigured
   * @return isConfigured
   */
  @javax.annotation.Nullable
  public Boolean getIsConfigured() {
    return isConfigured;
  }

  public void setIsConfigured(Boolean isConfigured) {
    this.isConfigured = isConfigured;
  }


  public Analysis isTimeRuleDefinedByTemplate(Boolean isTimeRuleDefinedByTemplate) {
    this.isTimeRuleDefinedByTemplate = isTimeRuleDefinedByTemplate;
    return this;
  }

  /**
   * Get isTimeRuleDefinedByTemplate
   * @return isTimeRuleDefinedByTemplate
   */
  @javax.annotation.Nullable
  public Boolean getIsTimeRuleDefinedByTemplate() {
    return isTimeRuleDefinedByTemplate;
  }

  public void setIsTimeRuleDefinedByTemplate(Boolean isTimeRuleDefinedByTemplate) {
    this.isTimeRuleDefinedByTemplate = isTimeRuleDefinedByTemplate;
  }


  public Analysis links(AnalysisLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public AnalysisLinks getLinks() {
    return links;
  }

  public void setLinks(AnalysisLinks links) {
    this.links = links;
  }


  public Analysis maximumQueueSize(Integer maximumQueueSize) {
    this.maximumQueueSize = maximumQueueSize;
    return this;
  }

  /**
   * Get maximumQueueSize
   * @return maximumQueueSize
   */
  @javax.annotation.Nullable
  public Integer getMaximumQueueSize() {
    return maximumQueueSize;
  }

  public void setMaximumQueueSize(Integer maximumQueueSize) {
    this.maximumQueueSize = maximumQueueSize;
  }


  public Analysis name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Analysis outputTime(String outputTime) {
    this.outputTime = outputTime;
    return this;
  }

  /**
   * Get outputTime
   * @return outputTime
   */
  @javax.annotation.Nullable
  public String getOutputTime() {
    return outputTime;
  }

  public void setOutputTime(String outputTime) {
    this.outputTime = outputTime;
  }


  public Analysis path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public Analysis priority(String priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public String getPriority() {
    return priority;
  }

  public void setPriority(String priority) {
    this.priority = priority;
  }


  public Analysis publishResults(Boolean publishResults) {
    this.publishResults = publishResults;
    return this;
  }

  /**
   * Get publishResults
   * @return publishResults
   */
  @javax.annotation.Nullable
  public Boolean getPublishResults() {
    return publishResults;
  }

  public void setPublishResults(Boolean publishResults) {
    this.publishResults = publishResults;
  }


  public Analysis status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Analysis targetWebId(String targetWebId) {
    this.targetWebId = targetWebId;
    return this;
  }

  /**
   * Get targetWebId
   * @return targetWebId
   */
  @javax.annotation.Nullable
  public String getTargetWebId() {
    return targetWebId;
  }

  public void setTargetWebId(String targetWebId) {
    this.targetWebId = targetWebId;
  }


  public Analysis templateName(String templateName) {
    this.templateName = templateName;
    return this;
  }

  /**
   * Get templateName
   * @return templateName
   */
  @javax.annotation.Nullable
  public String getTemplateName() {
    return templateName;
  }

  public void setTemplateName(String templateName) {
    this.templateName = templateName;
  }


  public Analysis timeRulePlugInName(String timeRulePlugInName) {
    this.timeRulePlugInName = timeRulePlugInName;
    return this;
  }

  /**
   * Get timeRulePlugInName
   * @return timeRulePlugInName
   */
  @javax.annotation.Nullable
  public String getTimeRulePlugInName() {
    return timeRulePlugInName;
  }

  public void setTimeRulePlugInName(String timeRulePlugInName) {
    this.timeRulePlugInName = timeRulePlugInName;
  }


  public Analysis webException(WebException webException) {
    this.webException = webException;
    return this;
  }

  /**
   * Get webException
   * @return webException
   */
  @javax.annotation.Nullable
  public WebException getWebException() {
    return webException;
  }

  public void setWebException(WebException webException) {
    this.webException = webException;
  }


  public Analysis webId(String webId) {
    this.webId = webId;
    return this;
  }

  /**
   * Get webId
   * @return webId
   */
  @javax.annotation.Nullable
  public String getWebId() {
    return webId;
  }

  public void setWebId(String webId) {
    this.webId = webId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Analysis analysis = (Analysis) o;
    return Objects.equals(this.analysisRulePlugInName, analysis.analysisRulePlugInName) &&
        Objects.equals(this.autoCreated, analysis.autoCreated) &&
        Objects.equals(this.categoryNames, analysis.categoryNames) &&
        Objects.equals(this.description, analysis.description) &&
        Objects.equals(this.groupId, analysis.groupId) &&
        Objects.equals(this.hasNotification, analysis.hasNotification) &&
        Objects.equals(this.hasTarget, analysis.hasTarget) &&
        Objects.equals(this.hasTemplate, analysis.hasTemplate) &&
        Objects.equals(this.id, analysis.id) &&
        Objects.equals(this.isConfigured, analysis.isConfigured) &&
        Objects.equals(this.isTimeRuleDefinedByTemplate, analysis.isTimeRuleDefinedByTemplate) &&
        Objects.equals(this.links, analysis.links) &&
        Objects.equals(this.maximumQueueSize, analysis.maximumQueueSize) &&
        Objects.equals(this.name, analysis.name) &&
        Objects.equals(this.outputTime, analysis.outputTime) &&
        Objects.equals(this.path, analysis.path) &&
        Objects.equals(this.priority, analysis.priority) &&
        Objects.equals(this.publishResults, analysis.publishResults) &&
        Objects.equals(this.status, analysis.status) &&
        Objects.equals(this.targetWebId, analysis.targetWebId) &&
        Objects.equals(this.templateName, analysis.templateName) &&
        Objects.equals(this.timeRulePlugInName, analysis.timeRulePlugInName) &&
        Objects.equals(this.webException, analysis.webException) &&
        Objects.equals(this.webId, analysis.webId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisRulePlugInName, autoCreated, categoryNames, description, groupId, hasNotification, hasTarget, hasTemplate, id, isConfigured, isTimeRuleDefinedByTemplate, links, maximumQueueSize, name, outputTime, path, priority, publishResults, status, targetWebId, templateName, timeRulePlugInName, webException, webId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Analysis {\n");
    sb.append("    analysisRulePlugInName: ").append(toIndentedString(analysisRulePlugInName)).append("\n");
    sb.append("    autoCreated: ").append(toIndentedString(autoCreated)).append("\n");
    sb.append("    categoryNames: ").append(toIndentedString(categoryNames)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    hasNotification: ").append(toIndentedString(hasNotification)).append("\n");
    sb.append("    hasTarget: ").append(toIndentedString(hasTarget)).append("\n");
    sb.append("    hasTemplate: ").append(toIndentedString(hasTemplate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isConfigured: ").append(toIndentedString(isConfigured)).append("\n");
    sb.append("    isTimeRuleDefinedByTemplate: ").append(toIndentedString(isTimeRuleDefinedByTemplate)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    maximumQueueSize: ").append(toIndentedString(maximumQueueSize)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputTime: ").append(toIndentedString(outputTime)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    publishResults: ").append(toIndentedString(publishResults)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetWebId: ").append(toIndentedString(targetWebId)).append("\n");
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("    timeRulePlugInName: ").append(toIndentedString(timeRulePlugInName)).append("\n");
    sb.append("    webException: ").append(toIndentedString(webException)).append("\n");
    sb.append("    webId: ").append(toIndentedString(webId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AnalysisRulePlugInName");
    openapiFields.add("AutoCreated");
    openapiFields.add("CategoryNames");
    openapiFields.add("Description");
    openapiFields.add("GroupId");
    openapiFields.add("HasNotification");
    openapiFields.add("HasTarget");
    openapiFields.add("HasTemplate");
    openapiFields.add("Id");
    openapiFields.add("IsConfigured");
    openapiFields.add("IsTimeRuleDefinedByTemplate");
    openapiFields.add("Links");
    openapiFields.add("MaximumQueueSize");
    openapiFields.add("Name");
    openapiFields.add("OutputTime");
    openapiFields.add("Path");
    openapiFields.add("Priority");
    openapiFields.add("PublishResults");
    openapiFields.add("Status");
    openapiFields.add("TargetWebId");
    openapiFields.add("TemplateName");
    openapiFields.add("TimeRulePlugInName");
    openapiFields.add("WebException");
    openapiFields.add("WebId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Analysis
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Analysis.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Analysis is not found in the empty JSON string", Analysis.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Analysis.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Analysis` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AnalysisRulePlugInName") != null && !jsonObj.get("AnalysisRulePlugInName").isJsonNull()) && !jsonObj.get("AnalysisRulePlugInName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AnalysisRulePlugInName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AnalysisRulePlugInName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CategoryNames") != null && !jsonObj.get("CategoryNames").isJsonNull() && !jsonObj.get("CategoryNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoryNames` to be an array in the JSON string but got `%s`", jsonObj.get("CategoryNames").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      // validate the optional field `Links`
      if (jsonObj.get("Links") != null && !jsonObj.get("Links").isJsonNull()) {
        AnalysisLinks.validateJsonElement(jsonObj.get("Links"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("OutputTime") != null && !jsonObj.get("OutputTime").isJsonNull()) && !jsonObj.get("OutputTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OutputTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OutputTime").toString()));
      }
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      if ((jsonObj.get("Priority") != null && !jsonObj.get("Priority").isJsonNull()) && !jsonObj.get("Priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Priority").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("TargetWebId") != null && !jsonObj.get("TargetWebId").isJsonNull()) && !jsonObj.get("TargetWebId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetWebId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TargetWebId").toString()));
      }
      if ((jsonObj.get("TemplateName") != null && !jsonObj.get("TemplateName").isJsonNull()) && !jsonObj.get("TemplateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TemplateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TemplateName").toString()));
      }
      if ((jsonObj.get("TimeRulePlugInName") != null && !jsonObj.get("TimeRulePlugInName").isJsonNull()) && !jsonObj.get("TimeRulePlugInName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimeRulePlugInName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimeRulePlugInName").toString()));
      }
      // validate the optional field `WebException`
      if (jsonObj.get("WebException") != null && !jsonObj.get("WebException").isJsonNull()) {
        WebException.validateJsonElement(jsonObj.get("WebException"));
      }
      if ((jsonObj.get("WebId") != null && !jsonObj.get("WebId").isJsonNull()) && !jsonObj.get("WebId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Analysis.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Analysis' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Analysis> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Analysis.class));

       return (TypeAdapter<T>) new TypeAdapter<Analysis>() {
           @Override
           public void write(JsonWriter out, Analysis value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Analysis read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Analysis given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Analysis
   * @throws IOException if the JSON string is invalid with respect to Analysis
   */
  public static Analysis fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Analysis.class);
  }

  /**
   * Convert an instance of Analysis to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

