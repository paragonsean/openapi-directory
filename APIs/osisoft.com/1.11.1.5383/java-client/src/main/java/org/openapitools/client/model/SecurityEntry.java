/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SecurityEntryLinks;
import org.openapitools.client.model.WebException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SecurityEntry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SecurityEntry {
  public static final String SERIALIZED_NAME_ALLOW_RIGHTS = "AllowRights";
  @SerializedName(SERIALIZED_NAME_ALLOW_RIGHTS)
  private List<String> allowRights = new ArrayList<>();

  public static final String SERIALIZED_NAME_DENY_RIGHTS = "DenyRights";
  @SerializedName(SERIALIZED_NAME_DENY_RIGHTS)
  private List<String> denyRights = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKS = "Links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private SecurityEntryLinks links;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SECURITY_IDENTITY_NAME = "SecurityIdentityName";
  @SerializedName(SERIALIZED_NAME_SECURITY_IDENTITY_NAME)
  private String securityIdentityName;

  public static final String SERIALIZED_NAME_WEB_EXCEPTION = "WebException";
  @SerializedName(SERIALIZED_NAME_WEB_EXCEPTION)
  private WebException webException;

  public SecurityEntry() {
  }

  public SecurityEntry allowRights(List<String> allowRights) {
    this.allowRights = allowRights;
    return this;
  }

  public SecurityEntry addAllowRightsItem(String allowRightsItem) {
    if (this.allowRights == null) {
      this.allowRights = new ArrayList<>();
    }
    this.allowRights.add(allowRightsItem);
    return this;
  }

  /**
   * Get allowRights
   * @return allowRights
   */
  @javax.annotation.Nullable
  public List<String> getAllowRights() {
    return allowRights;
  }

  public void setAllowRights(List<String> allowRights) {
    this.allowRights = allowRights;
  }


  public SecurityEntry denyRights(List<String> denyRights) {
    this.denyRights = denyRights;
    return this;
  }

  public SecurityEntry addDenyRightsItem(String denyRightsItem) {
    if (this.denyRights == null) {
      this.denyRights = new ArrayList<>();
    }
    this.denyRights.add(denyRightsItem);
    return this;
  }

  /**
   * Get denyRights
   * @return denyRights
   */
  @javax.annotation.Nullable
  public List<String> getDenyRights() {
    return denyRights;
  }

  public void setDenyRights(List<String> denyRights) {
    this.denyRights = denyRights;
  }


  public SecurityEntry links(SecurityEntryLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public SecurityEntryLinks getLinks() {
    return links;
  }

  public void setLinks(SecurityEntryLinks links) {
    this.links = links;
  }


  public SecurityEntry name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SecurityEntry securityIdentityName(String securityIdentityName) {
    this.securityIdentityName = securityIdentityName;
    return this;
  }

  /**
   * Get securityIdentityName
   * @return securityIdentityName
   */
  @javax.annotation.Nullable
  public String getSecurityIdentityName() {
    return securityIdentityName;
  }

  public void setSecurityIdentityName(String securityIdentityName) {
    this.securityIdentityName = securityIdentityName;
  }


  public SecurityEntry webException(WebException webException) {
    this.webException = webException;
    return this;
  }

  /**
   * Get webException
   * @return webException
   */
  @javax.annotation.Nullable
  public WebException getWebException() {
    return webException;
  }

  public void setWebException(WebException webException) {
    this.webException = webException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecurityEntry securityEntry = (SecurityEntry) o;
    return Objects.equals(this.allowRights, securityEntry.allowRights) &&
        Objects.equals(this.denyRights, securityEntry.denyRights) &&
        Objects.equals(this.links, securityEntry.links) &&
        Objects.equals(this.name, securityEntry.name) &&
        Objects.equals(this.securityIdentityName, securityEntry.securityIdentityName) &&
        Objects.equals(this.webException, securityEntry.webException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowRights, denyRights, links, name, securityIdentityName, webException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecurityEntry {\n");
    sb.append("    allowRights: ").append(toIndentedString(allowRights)).append("\n");
    sb.append("    denyRights: ").append(toIndentedString(denyRights)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    securityIdentityName: ").append(toIndentedString(securityIdentityName)).append("\n");
    sb.append("    webException: ").append(toIndentedString(webException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AllowRights");
    openapiFields.add("DenyRights");
    openapiFields.add("Links");
    openapiFields.add("Name");
    openapiFields.add("SecurityIdentityName");
    openapiFields.add("WebException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecurityEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecurityEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecurityEntry is not found in the empty JSON string", SecurityEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecurityEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecurityEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("AllowRights") != null && !jsonObj.get("AllowRights").isJsonNull() && !jsonObj.get("AllowRights").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AllowRights` to be an array in the JSON string but got `%s`", jsonObj.get("AllowRights").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("DenyRights") != null && !jsonObj.get("DenyRights").isJsonNull() && !jsonObj.get("DenyRights").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DenyRights` to be an array in the JSON string but got `%s`", jsonObj.get("DenyRights").toString()));
      }
      // validate the optional field `Links`
      if (jsonObj.get("Links") != null && !jsonObj.get("Links").isJsonNull()) {
        SecurityEntryLinks.validateJsonElement(jsonObj.get("Links"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("SecurityIdentityName") != null && !jsonObj.get("SecurityIdentityName").isJsonNull()) && !jsonObj.get("SecurityIdentityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecurityIdentityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SecurityIdentityName").toString()));
      }
      // validate the optional field `WebException`
      if (jsonObj.get("WebException") != null && !jsonObj.get("WebException").isJsonNull()) {
        WebException.validateJsonElement(jsonObj.get("WebException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecurityEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecurityEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecurityEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecurityEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<SecurityEntry>() {
           @Override
           public void write(JsonWriter out, SecurityEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecurityEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecurityEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecurityEntry
   * @throws IOException if the JSON string is invalid with respect to SecurityEntry
   */
  public static SecurityEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecurityEntry.class);
  }

  /**
   * Convert an instance of SecurityEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

