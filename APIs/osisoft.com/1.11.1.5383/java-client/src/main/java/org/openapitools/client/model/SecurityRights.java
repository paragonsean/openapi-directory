/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SecurityRightsLinks;
import org.openapitools.client.model.WebException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SecurityRights
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SecurityRights {
  public static final String SERIALIZED_NAME_CAN_ANNOTATE = "CanAnnotate";
  @SerializedName(SERIALIZED_NAME_CAN_ANNOTATE)
  private Boolean canAnnotate;

  public static final String SERIALIZED_NAME_CAN_DELETE = "CanDelete";
  @SerializedName(SERIALIZED_NAME_CAN_DELETE)
  private Boolean canDelete;

  public static final String SERIALIZED_NAME_CAN_EXECUTE = "CanExecute";
  @SerializedName(SERIALIZED_NAME_CAN_EXECUTE)
  private Boolean canExecute;

  public static final String SERIALIZED_NAME_CAN_READ = "CanRead";
  @SerializedName(SERIALIZED_NAME_CAN_READ)
  private Boolean canRead;

  public static final String SERIALIZED_NAME_CAN_READ_DATA = "CanReadData";
  @SerializedName(SERIALIZED_NAME_CAN_READ_DATA)
  private Boolean canReadData;

  public static final String SERIALIZED_NAME_CAN_SUBSCRIBE = "CanSubscribe";
  @SerializedName(SERIALIZED_NAME_CAN_SUBSCRIBE)
  private Boolean canSubscribe;

  public static final String SERIALIZED_NAME_CAN_SUBSCRIBE_OTHERS = "CanSubscribeOthers";
  @SerializedName(SERIALIZED_NAME_CAN_SUBSCRIBE_OTHERS)
  private Boolean canSubscribeOthers;

  public static final String SERIALIZED_NAME_CAN_WRITE = "CanWrite";
  @SerializedName(SERIALIZED_NAME_CAN_WRITE)
  private Boolean canWrite;

  public static final String SERIALIZED_NAME_CAN_WRITE_DATA = "CanWriteData";
  @SerializedName(SERIALIZED_NAME_CAN_WRITE_DATA)
  private Boolean canWriteData;

  public static final String SERIALIZED_NAME_HAS_ADMIN = "HasAdmin";
  @SerializedName(SERIALIZED_NAME_HAS_ADMIN)
  private Boolean hasAdmin;

  public static final String SERIALIZED_NAME_LINKS = "Links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private SecurityRightsLinks links;

  public static final String SERIALIZED_NAME_OWNER_WEB_ID = "OwnerWebId";
  @SerializedName(SERIALIZED_NAME_OWNER_WEB_ID)
  private String ownerWebId;

  public static final String SERIALIZED_NAME_RIGHTS = "Rights";
  @SerializedName(SERIALIZED_NAME_RIGHTS)
  private List<String> rights = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURITY_ITEM = "SecurityItem";
  @SerializedName(SERIALIZED_NAME_SECURITY_ITEM)
  private String securityItem;

  public static final String SERIALIZED_NAME_USER_IDENTITY = "UserIdentity";
  @SerializedName(SERIALIZED_NAME_USER_IDENTITY)
  private String userIdentity;

  public static final String SERIALIZED_NAME_WEB_EXCEPTION = "WebException";
  @SerializedName(SERIALIZED_NAME_WEB_EXCEPTION)
  private WebException webException;

  public SecurityRights() {
  }

  public SecurityRights canAnnotate(Boolean canAnnotate) {
    this.canAnnotate = canAnnotate;
    return this;
  }

  /**
   * Get canAnnotate
   * @return canAnnotate
   */
  @javax.annotation.Nullable
  public Boolean getCanAnnotate() {
    return canAnnotate;
  }

  public void setCanAnnotate(Boolean canAnnotate) {
    this.canAnnotate = canAnnotate;
  }


  public SecurityRights canDelete(Boolean canDelete) {
    this.canDelete = canDelete;
    return this;
  }

  /**
   * Get canDelete
   * @return canDelete
   */
  @javax.annotation.Nullable
  public Boolean getCanDelete() {
    return canDelete;
  }

  public void setCanDelete(Boolean canDelete) {
    this.canDelete = canDelete;
  }


  public SecurityRights canExecute(Boolean canExecute) {
    this.canExecute = canExecute;
    return this;
  }

  /**
   * Get canExecute
   * @return canExecute
   */
  @javax.annotation.Nullable
  public Boolean getCanExecute() {
    return canExecute;
  }

  public void setCanExecute(Boolean canExecute) {
    this.canExecute = canExecute;
  }


  public SecurityRights canRead(Boolean canRead) {
    this.canRead = canRead;
    return this;
  }

  /**
   * Get canRead
   * @return canRead
   */
  @javax.annotation.Nullable
  public Boolean getCanRead() {
    return canRead;
  }

  public void setCanRead(Boolean canRead) {
    this.canRead = canRead;
  }


  public SecurityRights canReadData(Boolean canReadData) {
    this.canReadData = canReadData;
    return this;
  }

  /**
   * Get canReadData
   * @return canReadData
   */
  @javax.annotation.Nullable
  public Boolean getCanReadData() {
    return canReadData;
  }

  public void setCanReadData(Boolean canReadData) {
    this.canReadData = canReadData;
  }


  public SecurityRights canSubscribe(Boolean canSubscribe) {
    this.canSubscribe = canSubscribe;
    return this;
  }

  /**
   * Get canSubscribe
   * @return canSubscribe
   */
  @javax.annotation.Nullable
  public Boolean getCanSubscribe() {
    return canSubscribe;
  }

  public void setCanSubscribe(Boolean canSubscribe) {
    this.canSubscribe = canSubscribe;
  }


  public SecurityRights canSubscribeOthers(Boolean canSubscribeOthers) {
    this.canSubscribeOthers = canSubscribeOthers;
    return this;
  }

  /**
   * Get canSubscribeOthers
   * @return canSubscribeOthers
   */
  @javax.annotation.Nullable
  public Boolean getCanSubscribeOthers() {
    return canSubscribeOthers;
  }

  public void setCanSubscribeOthers(Boolean canSubscribeOthers) {
    this.canSubscribeOthers = canSubscribeOthers;
  }


  public SecurityRights canWrite(Boolean canWrite) {
    this.canWrite = canWrite;
    return this;
  }

  /**
   * Get canWrite
   * @return canWrite
   */
  @javax.annotation.Nullable
  public Boolean getCanWrite() {
    return canWrite;
  }

  public void setCanWrite(Boolean canWrite) {
    this.canWrite = canWrite;
  }


  public SecurityRights canWriteData(Boolean canWriteData) {
    this.canWriteData = canWriteData;
    return this;
  }

  /**
   * Get canWriteData
   * @return canWriteData
   */
  @javax.annotation.Nullable
  public Boolean getCanWriteData() {
    return canWriteData;
  }

  public void setCanWriteData(Boolean canWriteData) {
    this.canWriteData = canWriteData;
  }


  public SecurityRights hasAdmin(Boolean hasAdmin) {
    this.hasAdmin = hasAdmin;
    return this;
  }

  /**
   * Get hasAdmin
   * @return hasAdmin
   */
  @javax.annotation.Nullable
  public Boolean getHasAdmin() {
    return hasAdmin;
  }

  public void setHasAdmin(Boolean hasAdmin) {
    this.hasAdmin = hasAdmin;
  }


  public SecurityRights links(SecurityRightsLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public SecurityRightsLinks getLinks() {
    return links;
  }

  public void setLinks(SecurityRightsLinks links) {
    this.links = links;
  }


  public SecurityRights ownerWebId(String ownerWebId) {
    this.ownerWebId = ownerWebId;
    return this;
  }

  /**
   * Get ownerWebId
   * @return ownerWebId
   */
  @javax.annotation.Nullable
  public String getOwnerWebId() {
    return ownerWebId;
  }

  public void setOwnerWebId(String ownerWebId) {
    this.ownerWebId = ownerWebId;
  }


  public SecurityRights rights(List<String> rights) {
    this.rights = rights;
    return this;
  }

  public SecurityRights addRightsItem(String rightsItem) {
    if (this.rights == null) {
      this.rights = new ArrayList<>();
    }
    this.rights.add(rightsItem);
    return this;
  }

  /**
   * Get rights
   * @return rights
   */
  @javax.annotation.Nullable
  public List<String> getRights() {
    return rights;
  }

  public void setRights(List<String> rights) {
    this.rights = rights;
  }


  public SecurityRights securityItem(String securityItem) {
    this.securityItem = securityItem;
    return this;
  }

  /**
   * Get securityItem
   * @return securityItem
   */
  @javax.annotation.Nullable
  public String getSecurityItem() {
    return securityItem;
  }

  public void setSecurityItem(String securityItem) {
    this.securityItem = securityItem;
  }


  public SecurityRights userIdentity(String userIdentity) {
    this.userIdentity = userIdentity;
    return this;
  }

  /**
   * Get userIdentity
   * @return userIdentity
   */
  @javax.annotation.Nullable
  public String getUserIdentity() {
    return userIdentity;
  }

  public void setUserIdentity(String userIdentity) {
    this.userIdentity = userIdentity;
  }


  public SecurityRights webException(WebException webException) {
    this.webException = webException;
    return this;
  }

  /**
   * Get webException
   * @return webException
   */
  @javax.annotation.Nullable
  public WebException getWebException() {
    return webException;
  }

  public void setWebException(WebException webException) {
    this.webException = webException;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecurityRights securityRights = (SecurityRights) o;
    return Objects.equals(this.canAnnotate, securityRights.canAnnotate) &&
        Objects.equals(this.canDelete, securityRights.canDelete) &&
        Objects.equals(this.canExecute, securityRights.canExecute) &&
        Objects.equals(this.canRead, securityRights.canRead) &&
        Objects.equals(this.canReadData, securityRights.canReadData) &&
        Objects.equals(this.canSubscribe, securityRights.canSubscribe) &&
        Objects.equals(this.canSubscribeOthers, securityRights.canSubscribeOthers) &&
        Objects.equals(this.canWrite, securityRights.canWrite) &&
        Objects.equals(this.canWriteData, securityRights.canWriteData) &&
        Objects.equals(this.hasAdmin, securityRights.hasAdmin) &&
        Objects.equals(this.links, securityRights.links) &&
        Objects.equals(this.ownerWebId, securityRights.ownerWebId) &&
        Objects.equals(this.rights, securityRights.rights) &&
        Objects.equals(this.securityItem, securityRights.securityItem) &&
        Objects.equals(this.userIdentity, securityRights.userIdentity) &&
        Objects.equals(this.webException, securityRights.webException);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canAnnotate, canDelete, canExecute, canRead, canReadData, canSubscribe, canSubscribeOthers, canWrite, canWriteData, hasAdmin, links, ownerWebId, rights, securityItem, userIdentity, webException);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecurityRights {\n");
    sb.append("    canAnnotate: ").append(toIndentedString(canAnnotate)).append("\n");
    sb.append("    canDelete: ").append(toIndentedString(canDelete)).append("\n");
    sb.append("    canExecute: ").append(toIndentedString(canExecute)).append("\n");
    sb.append("    canRead: ").append(toIndentedString(canRead)).append("\n");
    sb.append("    canReadData: ").append(toIndentedString(canReadData)).append("\n");
    sb.append("    canSubscribe: ").append(toIndentedString(canSubscribe)).append("\n");
    sb.append("    canSubscribeOthers: ").append(toIndentedString(canSubscribeOthers)).append("\n");
    sb.append("    canWrite: ").append(toIndentedString(canWrite)).append("\n");
    sb.append("    canWriteData: ").append(toIndentedString(canWriteData)).append("\n");
    sb.append("    hasAdmin: ").append(toIndentedString(hasAdmin)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    ownerWebId: ").append(toIndentedString(ownerWebId)).append("\n");
    sb.append("    rights: ").append(toIndentedString(rights)).append("\n");
    sb.append("    securityItem: ").append(toIndentedString(securityItem)).append("\n");
    sb.append("    userIdentity: ").append(toIndentedString(userIdentity)).append("\n");
    sb.append("    webException: ").append(toIndentedString(webException)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CanAnnotate");
    openapiFields.add("CanDelete");
    openapiFields.add("CanExecute");
    openapiFields.add("CanRead");
    openapiFields.add("CanReadData");
    openapiFields.add("CanSubscribe");
    openapiFields.add("CanSubscribeOthers");
    openapiFields.add("CanWrite");
    openapiFields.add("CanWriteData");
    openapiFields.add("HasAdmin");
    openapiFields.add("Links");
    openapiFields.add("OwnerWebId");
    openapiFields.add("Rights");
    openapiFields.add("SecurityItem");
    openapiFields.add("UserIdentity");
    openapiFields.add("WebException");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecurityRights
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecurityRights.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecurityRights is not found in the empty JSON string", SecurityRights.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecurityRights.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecurityRights` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Links`
      if (jsonObj.get("Links") != null && !jsonObj.get("Links").isJsonNull()) {
        SecurityRightsLinks.validateJsonElement(jsonObj.get("Links"));
      }
      if ((jsonObj.get("OwnerWebId") != null && !jsonObj.get("OwnerWebId").isJsonNull()) && !jsonObj.get("OwnerWebId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OwnerWebId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OwnerWebId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Rights") != null && !jsonObj.get("Rights").isJsonNull() && !jsonObj.get("Rights").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Rights` to be an array in the JSON string but got `%s`", jsonObj.get("Rights").toString()));
      }
      if ((jsonObj.get("SecurityItem") != null && !jsonObj.get("SecurityItem").isJsonNull()) && !jsonObj.get("SecurityItem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecurityItem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SecurityItem").toString()));
      }
      if ((jsonObj.get("UserIdentity") != null && !jsonObj.get("UserIdentity").isJsonNull()) && !jsonObj.get("UserIdentity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserIdentity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserIdentity").toString()));
      }
      // validate the optional field `WebException`
      if (jsonObj.get("WebException") != null && !jsonObj.get("WebException").isJsonNull()) {
        WebException.validateJsonElement(jsonObj.get("WebException"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecurityRights.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecurityRights' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecurityRights> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecurityRights.class));

       return (TypeAdapter<T>) new TypeAdapter<SecurityRights>() {
           @Override
           public void write(JsonWriter out, SecurityRights value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecurityRights read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecurityRights given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecurityRights
   * @throws IOException if the JSON string is invalid with respect to SecurityRights
   */
  public static SecurityRights fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecurityRights.class);
  }

  /**
   * Convert an instance of SecurityRights to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

