/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.WebException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NotificationRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationRule {
  public static final String SERIALIZED_NAME_AUTO_CREATED = "AutoCreated";
  @SerializedName(SERIALIZED_NAME_AUTO_CREATED)
  private Boolean autoCreated;

  public static final String SERIALIZED_NAME_CATEGORY_NAMES = "CategoryNames";
  @SerializedName(SERIALIZED_NAME_CATEGORY_NAMES)
  private List<String> categoryNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_CRITERIA = "Criteria";
  @SerializedName(SERIALIZED_NAME_CRITERIA)
  private String criteria;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_MULTI_TRIGGER_EVENT_OPTION = "MultiTriggerEventOption";
  @SerializedName(SERIALIZED_NAME_MULTI_TRIGGER_EVENT_OPTION)
  private String multiTriggerEventOption;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NONREPETITION_INTERVAL = "NonrepetitionInterval";
  @SerializedName(SERIALIZED_NAME_NONREPETITION_INTERVAL)
  private String nonrepetitionInterval;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_RESEND_INTERVAL = "ResendInterval";
  @SerializedName(SERIALIZED_NAME_RESEND_INTERVAL)
  private String resendInterval;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TEMPLATE_NAME = "TemplateName";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_NAME)
  private String templateName;

  public static final String SERIALIZED_NAME_WEB_EXCEPTION = "WebException";
  @SerializedName(SERIALIZED_NAME_WEB_EXCEPTION)
  private WebException webException;

  public static final String SERIALIZED_NAME_WEB_ID = "WebId";
  @SerializedName(SERIALIZED_NAME_WEB_ID)
  private String webId;

  public NotificationRule() {
  }

  public NotificationRule autoCreated(Boolean autoCreated) {
    this.autoCreated = autoCreated;
    return this;
  }

  /**
   * Get autoCreated
   * @return autoCreated
   */
  @javax.annotation.Nullable
  public Boolean getAutoCreated() {
    return autoCreated;
  }

  public void setAutoCreated(Boolean autoCreated) {
    this.autoCreated = autoCreated;
  }


  public NotificationRule categoryNames(List<String> categoryNames) {
    this.categoryNames = categoryNames;
    return this;
  }

  public NotificationRule addCategoryNamesItem(String categoryNamesItem) {
    if (this.categoryNames == null) {
      this.categoryNames = new ArrayList<>();
    }
    this.categoryNames.add(categoryNamesItem);
    return this;
  }

  /**
   * Get categoryNames
   * @return categoryNames
   */
  @javax.annotation.Nullable
  public List<String> getCategoryNames() {
    return categoryNames;
  }

  public void setCategoryNames(List<String> categoryNames) {
    this.categoryNames = categoryNames;
  }


  public NotificationRule criteria(String criteria) {
    this.criteria = criteria;
    return this;
  }

  /**
   * Get criteria
   * @return criteria
   */
  @javax.annotation.Nullable
  public String getCriteria() {
    return criteria;
  }

  public void setCriteria(String criteria) {
    this.criteria = criteria;
  }


  public NotificationRule description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NotificationRule id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public NotificationRule multiTriggerEventOption(String multiTriggerEventOption) {
    this.multiTriggerEventOption = multiTriggerEventOption;
    return this;
  }

  /**
   * Get multiTriggerEventOption
   * @return multiTriggerEventOption
   */
  @javax.annotation.Nullable
  public String getMultiTriggerEventOption() {
    return multiTriggerEventOption;
  }

  public void setMultiTriggerEventOption(String multiTriggerEventOption) {
    this.multiTriggerEventOption = multiTriggerEventOption;
  }


  public NotificationRule name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NotificationRule nonrepetitionInterval(String nonrepetitionInterval) {
    this.nonrepetitionInterval = nonrepetitionInterval;
    return this;
  }

  /**
   * Get nonrepetitionInterval
   * @return nonrepetitionInterval
   */
  @javax.annotation.Nullable
  public String getNonrepetitionInterval() {
    return nonrepetitionInterval;
  }

  public void setNonrepetitionInterval(String nonrepetitionInterval) {
    this.nonrepetitionInterval = nonrepetitionInterval;
  }


  public NotificationRule path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public NotificationRule resendInterval(String resendInterval) {
    this.resendInterval = resendInterval;
    return this;
  }

  /**
   * Get resendInterval
   * @return resendInterval
   */
  @javax.annotation.Nullable
  public String getResendInterval() {
    return resendInterval;
  }

  public void setResendInterval(String resendInterval) {
    this.resendInterval = resendInterval;
  }


  public NotificationRule status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public NotificationRule templateName(String templateName) {
    this.templateName = templateName;
    return this;
  }

  /**
   * Get templateName
   * @return templateName
   */
  @javax.annotation.Nullable
  public String getTemplateName() {
    return templateName;
  }

  public void setTemplateName(String templateName) {
    this.templateName = templateName;
  }


  public NotificationRule webException(WebException webException) {
    this.webException = webException;
    return this;
  }

  /**
   * Get webException
   * @return webException
   */
  @javax.annotation.Nullable
  public WebException getWebException() {
    return webException;
  }

  public void setWebException(WebException webException) {
    this.webException = webException;
  }


  public NotificationRule webId(String webId) {
    this.webId = webId;
    return this;
  }

  /**
   * Get webId
   * @return webId
   */
  @javax.annotation.Nullable
  public String getWebId() {
    return webId;
  }

  public void setWebId(String webId) {
    this.webId = webId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationRule notificationRule = (NotificationRule) o;
    return Objects.equals(this.autoCreated, notificationRule.autoCreated) &&
        Objects.equals(this.categoryNames, notificationRule.categoryNames) &&
        Objects.equals(this.criteria, notificationRule.criteria) &&
        Objects.equals(this.description, notificationRule.description) &&
        Objects.equals(this.id, notificationRule.id) &&
        Objects.equals(this.multiTriggerEventOption, notificationRule.multiTriggerEventOption) &&
        Objects.equals(this.name, notificationRule.name) &&
        Objects.equals(this.nonrepetitionInterval, notificationRule.nonrepetitionInterval) &&
        Objects.equals(this.path, notificationRule.path) &&
        Objects.equals(this.resendInterval, notificationRule.resendInterval) &&
        Objects.equals(this.status, notificationRule.status) &&
        Objects.equals(this.templateName, notificationRule.templateName) &&
        Objects.equals(this.webException, notificationRule.webException) &&
        Objects.equals(this.webId, notificationRule.webId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoCreated, categoryNames, criteria, description, id, multiTriggerEventOption, name, nonrepetitionInterval, path, resendInterval, status, templateName, webException, webId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationRule {\n");
    sb.append("    autoCreated: ").append(toIndentedString(autoCreated)).append("\n");
    sb.append("    categoryNames: ").append(toIndentedString(categoryNames)).append("\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    multiTriggerEventOption: ").append(toIndentedString(multiTriggerEventOption)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nonrepetitionInterval: ").append(toIndentedString(nonrepetitionInterval)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    resendInterval: ").append(toIndentedString(resendInterval)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("    webException: ").append(toIndentedString(webException)).append("\n");
    sb.append("    webId: ").append(toIndentedString(webId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AutoCreated");
    openapiFields.add("CategoryNames");
    openapiFields.add("Criteria");
    openapiFields.add("Description");
    openapiFields.add("Id");
    openapiFields.add("MultiTriggerEventOption");
    openapiFields.add("Name");
    openapiFields.add("NonrepetitionInterval");
    openapiFields.add("Path");
    openapiFields.add("ResendInterval");
    openapiFields.add("Status");
    openapiFields.add("TemplateName");
    openapiFields.add("WebException");
    openapiFields.add("WebId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationRule is not found in the empty JSON string", NotificationRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("CategoryNames") != null && !jsonObj.get("CategoryNames").isJsonNull() && !jsonObj.get("CategoryNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoryNames` to be an array in the JSON string but got `%s`", jsonObj.get("CategoryNames").toString()));
      }
      if ((jsonObj.get("Criteria") != null && !jsonObj.get("Criteria").isJsonNull()) && !jsonObj.get("Criteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Criteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Criteria").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if ((jsonObj.get("MultiTriggerEventOption") != null && !jsonObj.get("MultiTriggerEventOption").isJsonNull()) && !jsonObj.get("MultiTriggerEventOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MultiTriggerEventOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MultiTriggerEventOption").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("NonrepetitionInterval") != null && !jsonObj.get("NonrepetitionInterval").isJsonNull()) && !jsonObj.get("NonrepetitionInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NonrepetitionInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NonrepetitionInterval").toString()));
      }
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      if ((jsonObj.get("ResendInterval") != null && !jsonObj.get("ResendInterval").isJsonNull()) && !jsonObj.get("ResendInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResendInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResendInterval").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("TemplateName") != null && !jsonObj.get("TemplateName").isJsonNull()) && !jsonObj.get("TemplateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TemplateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TemplateName").toString()));
      }
      // validate the optional field `WebException`
      if (jsonObj.get("WebException") != null && !jsonObj.get("WebException").isJsonNull()) {
        WebException.validateJsonElement(jsonObj.get("WebException"));
      }
      if ((jsonObj.get("WebId") != null && !jsonObj.get("WebId").isJsonNull()) && !jsonObj.get("WebId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationRule.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationRule>() {
           @Override
           public void write(JsonWriter out, NotificationRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationRule
   * @throws IOException if the JSON string is invalid with respect to NotificationRule
   */
  public static NotificationRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationRule.class);
  }

  /**
   * Convert an instance of NotificationRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

