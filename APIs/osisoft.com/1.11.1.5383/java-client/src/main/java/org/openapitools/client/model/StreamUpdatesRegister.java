/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Errors;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StreamUpdatesRegister
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamUpdatesRegister {
  public static final String SERIALIZED_NAME_EXCEPTION = "Exception";
  @SerializedName(SERIALIZED_NAME_EXCEPTION)
  private Errors exception;

  public static final String SERIALIZED_NAME_LATEST_MARKER = "LatestMarker";
  @SerializedName(SERIALIZED_NAME_LATEST_MARKER)
  private String latestMarker;

  public static final String SERIALIZED_NAME_SOURCE = "Source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SOURCE_NAME = "SourceName";
  @SerializedName(SERIALIZED_NAME_SOURCE_NAME)
  private String sourceName;

  public static final String SERIALIZED_NAME_SOURCE_PATH = "SourcePath";
  @SerializedName(SERIALIZED_NAME_SOURCE_PATH)
  private String sourcePath;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public StreamUpdatesRegister() {
  }

  public StreamUpdatesRegister exception(Errors exception) {
    this.exception = exception;
    return this;
  }

  /**
   * Get exception
   * @return exception
   */
  @javax.annotation.Nullable
  public Errors getException() {
    return exception;
  }

  public void setException(Errors exception) {
    this.exception = exception;
  }


  public StreamUpdatesRegister latestMarker(String latestMarker) {
    this.latestMarker = latestMarker;
    return this;
  }

  /**
   * Get latestMarker
   * @return latestMarker
   */
  @javax.annotation.Nullable
  public String getLatestMarker() {
    return latestMarker;
  }

  public void setLatestMarker(String latestMarker) {
    this.latestMarker = latestMarker;
  }


  public StreamUpdatesRegister source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public StreamUpdatesRegister sourceName(String sourceName) {
    this.sourceName = sourceName;
    return this;
  }

  /**
   * Get sourceName
   * @return sourceName
   */
  @javax.annotation.Nullable
  public String getSourceName() {
    return sourceName;
  }

  public void setSourceName(String sourceName) {
    this.sourceName = sourceName;
  }


  public StreamUpdatesRegister sourcePath(String sourcePath) {
    this.sourcePath = sourcePath;
    return this;
  }

  /**
   * Get sourcePath
   * @return sourcePath
   */
  @javax.annotation.Nullable
  public String getSourcePath() {
    return sourcePath;
  }

  public void setSourcePath(String sourcePath) {
    this.sourcePath = sourcePath;
  }


  public StreamUpdatesRegister status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamUpdatesRegister streamUpdatesRegister = (StreamUpdatesRegister) o;
    return Objects.equals(this.exception, streamUpdatesRegister.exception) &&
        Objects.equals(this.latestMarker, streamUpdatesRegister.latestMarker) &&
        Objects.equals(this.source, streamUpdatesRegister.source) &&
        Objects.equals(this.sourceName, streamUpdatesRegister.sourceName) &&
        Objects.equals(this.sourcePath, streamUpdatesRegister.sourcePath) &&
        Objects.equals(this.status, streamUpdatesRegister.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exception, latestMarker, source, sourceName, sourcePath, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamUpdatesRegister {\n");
    sb.append("    exception: ").append(toIndentedString(exception)).append("\n");
    sb.append("    latestMarker: ").append(toIndentedString(latestMarker)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceName: ").append(toIndentedString(sourceName)).append("\n");
    sb.append("    sourcePath: ").append(toIndentedString(sourcePath)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Exception");
    openapiFields.add("LatestMarker");
    openapiFields.add("Source");
    openapiFields.add("SourceName");
    openapiFields.add("SourcePath");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamUpdatesRegister
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamUpdatesRegister.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamUpdatesRegister is not found in the empty JSON string", StreamUpdatesRegister.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamUpdatesRegister.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamUpdatesRegister` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Exception`
      if (jsonObj.get("Exception") != null && !jsonObj.get("Exception").isJsonNull()) {
        Errors.validateJsonElement(jsonObj.get("Exception"));
      }
      if ((jsonObj.get("LatestMarker") != null && !jsonObj.get("LatestMarker").isJsonNull()) && !jsonObj.get("LatestMarker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LatestMarker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LatestMarker").toString()));
      }
      if ((jsonObj.get("Source") != null && !jsonObj.get("Source").isJsonNull()) && !jsonObj.get("Source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Source").toString()));
      }
      if ((jsonObj.get("SourceName") != null && !jsonObj.get("SourceName").isJsonNull()) && !jsonObj.get("SourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceName").toString()));
      }
      if ((jsonObj.get("SourcePath") != null && !jsonObj.get("SourcePath").isJsonNull()) && !jsonObj.get("SourcePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourcePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourcePath").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamUpdatesRegister.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamUpdatesRegister' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamUpdatesRegister> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamUpdatesRegister.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamUpdatesRegister>() {
           @Override
           public void write(JsonWriter out, StreamUpdatesRegister value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamUpdatesRegister read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamUpdatesRegister given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamUpdatesRegister
   * @throws IOException if the JSON string is invalid with respect to StreamUpdatesRegister
   */
  public static StreamUpdatesRegister fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamUpdatesRegister.class);
  }

  /**
   * Convert an instance of StreamUpdatesRegister to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

