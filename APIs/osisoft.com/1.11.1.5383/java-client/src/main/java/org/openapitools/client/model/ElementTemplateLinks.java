/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ElementTemplateLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ElementTemplateLinks {
  public static final String SERIALIZED_NAME_ANALYSIS_TEMPLATES = "AnalysisTemplates";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_TEMPLATES)
  private String analysisTemplates;

  public static final String SERIALIZED_NAME_ATTRIBUTE_TEMPLATES = "AttributeTemplates";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_TEMPLATES)
  private String attributeTemplates;

  public static final String SERIALIZED_NAME_BASE_TEMPLATE = "BaseTemplate";
  @SerializedName(SERIALIZED_NAME_BASE_TEMPLATE)
  private String baseTemplate;

  public static final String SERIALIZED_NAME_BASE_TEMPLATES = "BaseTemplates";
  @SerializedName(SERIALIZED_NAME_BASE_TEMPLATES)
  private String baseTemplates;

  public static final String SERIALIZED_NAME_CATEGORIES = "Categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private String categories;

  public static final String SERIALIZED_NAME_DATABASE = "Database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private String database;

  public static final String SERIALIZED_NAME_DEFAULT_ATTRIBUTE = "DefaultAttribute";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ATTRIBUTE)
  private String defaultAttribute;

  public static final String SERIALIZED_NAME_DERIVED_TEMPLATES = "DerivedTemplates";
  @SerializedName(SERIALIZED_NAME_DERIVED_TEMPLATES)
  private String derivedTemplates;

  public static final String SERIALIZED_NAME_NOTIFICATION_RULE_TEMPLATES = "NotificationRuleTemplates";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_RULE_TEMPLATES)
  private String notificationRuleTemplates;

  public static final String SERIALIZED_NAME_SECURITY = "Security";
  @SerializedName(SERIALIZED_NAME_SECURITY)
  private String security;

  public static final String SERIALIZED_NAME_SECURITY_ENTRIES = "SecurityEntries";
  @SerializedName(SERIALIZED_NAME_SECURITY_ENTRIES)
  private String securityEntries;

  public static final String SERIALIZED_NAME_SELF = "Self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private String self;

  public ElementTemplateLinks() {
  }

  public ElementTemplateLinks analysisTemplates(String analysisTemplates) {
    this.analysisTemplates = analysisTemplates;
    return this;
  }

  /**
   * Get analysisTemplates
   * @return analysisTemplates
   */
  @javax.annotation.Nullable
  public String getAnalysisTemplates() {
    return analysisTemplates;
  }

  public void setAnalysisTemplates(String analysisTemplates) {
    this.analysisTemplates = analysisTemplates;
  }


  public ElementTemplateLinks attributeTemplates(String attributeTemplates) {
    this.attributeTemplates = attributeTemplates;
    return this;
  }

  /**
   * Get attributeTemplates
   * @return attributeTemplates
   */
  @javax.annotation.Nullable
  public String getAttributeTemplates() {
    return attributeTemplates;
  }

  public void setAttributeTemplates(String attributeTemplates) {
    this.attributeTemplates = attributeTemplates;
  }


  public ElementTemplateLinks baseTemplate(String baseTemplate) {
    this.baseTemplate = baseTemplate;
    return this;
  }

  /**
   * Get baseTemplate
   * @return baseTemplate
   */
  @javax.annotation.Nullable
  public String getBaseTemplate() {
    return baseTemplate;
  }

  public void setBaseTemplate(String baseTemplate) {
    this.baseTemplate = baseTemplate;
  }


  public ElementTemplateLinks baseTemplates(String baseTemplates) {
    this.baseTemplates = baseTemplates;
    return this;
  }

  /**
   * Get baseTemplates
   * @return baseTemplates
   */
  @javax.annotation.Nullable
  public String getBaseTemplates() {
    return baseTemplates;
  }

  public void setBaseTemplates(String baseTemplates) {
    this.baseTemplates = baseTemplates;
  }


  public ElementTemplateLinks categories(String categories) {
    this.categories = categories;
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  public String getCategories() {
    return categories;
  }

  public void setCategories(String categories) {
    this.categories = categories;
  }


  public ElementTemplateLinks database(String database) {
    this.database = database;
    return this;
  }

  /**
   * Get database
   * @return database
   */
  @javax.annotation.Nullable
  public String getDatabase() {
    return database;
  }

  public void setDatabase(String database) {
    this.database = database;
  }


  public ElementTemplateLinks defaultAttribute(String defaultAttribute) {
    this.defaultAttribute = defaultAttribute;
    return this;
  }

  /**
   * Get defaultAttribute
   * @return defaultAttribute
   */
  @javax.annotation.Nullable
  public String getDefaultAttribute() {
    return defaultAttribute;
  }

  public void setDefaultAttribute(String defaultAttribute) {
    this.defaultAttribute = defaultAttribute;
  }


  public ElementTemplateLinks derivedTemplates(String derivedTemplates) {
    this.derivedTemplates = derivedTemplates;
    return this;
  }

  /**
   * Get derivedTemplates
   * @return derivedTemplates
   */
  @javax.annotation.Nullable
  public String getDerivedTemplates() {
    return derivedTemplates;
  }

  public void setDerivedTemplates(String derivedTemplates) {
    this.derivedTemplates = derivedTemplates;
  }


  public ElementTemplateLinks notificationRuleTemplates(String notificationRuleTemplates) {
    this.notificationRuleTemplates = notificationRuleTemplates;
    return this;
  }

  /**
   * Get notificationRuleTemplates
   * @return notificationRuleTemplates
   */
  @javax.annotation.Nullable
  public String getNotificationRuleTemplates() {
    return notificationRuleTemplates;
  }

  public void setNotificationRuleTemplates(String notificationRuleTemplates) {
    this.notificationRuleTemplates = notificationRuleTemplates;
  }


  public ElementTemplateLinks security(String security) {
    this.security = security;
    return this;
  }

  /**
   * Get security
   * @return security
   */
  @javax.annotation.Nullable
  public String getSecurity() {
    return security;
  }

  public void setSecurity(String security) {
    this.security = security;
  }


  public ElementTemplateLinks securityEntries(String securityEntries) {
    this.securityEntries = securityEntries;
    return this;
  }

  /**
   * Get securityEntries
   * @return securityEntries
   */
  @javax.annotation.Nullable
  public String getSecurityEntries() {
    return securityEntries;
  }

  public void setSecurityEntries(String securityEntries) {
    this.securityEntries = securityEntries;
  }


  public ElementTemplateLinks self(String self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public String getSelf() {
    return self;
  }

  public void setSelf(String self) {
    this.self = self;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElementTemplateLinks elementTemplateLinks = (ElementTemplateLinks) o;
    return Objects.equals(this.analysisTemplates, elementTemplateLinks.analysisTemplates) &&
        Objects.equals(this.attributeTemplates, elementTemplateLinks.attributeTemplates) &&
        Objects.equals(this.baseTemplate, elementTemplateLinks.baseTemplate) &&
        Objects.equals(this.baseTemplates, elementTemplateLinks.baseTemplates) &&
        Objects.equals(this.categories, elementTemplateLinks.categories) &&
        Objects.equals(this.database, elementTemplateLinks.database) &&
        Objects.equals(this.defaultAttribute, elementTemplateLinks.defaultAttribute) &&
        Objects.equals(this.derivedTemplates, elementTemplateLinks.derivedTemplates) &&
        Objects.equals(this.notificationRuleTemplates, elementTemplateLinks.notificationRuleTemplates) &&
        Objects.equals(this.security, elementTemplateLinks.security) &&
        Objects.equals(this.securityEntries, elementTemplateLinks.securityEntries) &&
        Objects.equals(this.self, elementTemplateLinks.self);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analysisTemplates, attributeTemplates, baseTemplate, baseTemplates, categories, database, defaultAttribute, derivedTemplates, notificationRuleTemplates, security, securityEntries, self);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElementTemplateLinks {\n");
    sb.append("    analysisTemplates: ").append(toIndentedString(analysisTemplates)).append("\n");
    sb.append("    attributeTemplates: ").append(toIndentedString(attributeTemplates)).append("\n");
    sb.append("    baseTemplate: ").append(toIndentedString(baseTemplate)).append("\n");
    sb.append("    baseTemplates: ").append(toIndentedString(baseTemplates)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    defaultAttribute: ").append(toIndentedString(defaultAttribute)).append("\n");
    sb.append("    derivedTemplates: ").append(toIndentedString(derivedTemplates)).append("\n");
    sb.append("    notificationRuleTemplates: ").append(toIndentedString(notificationRuleTemplates)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    securityEntries: ").append(toIndentedString(securityEntries)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AnalysisTemplates");
    openapiFields.add("AttributeTemplates");
    openapiFields.add("BaseTemplate");
    openapiFields.add("BaseTemplates");
    openapiFields.add("Categories");
    openapiFields.add("Database");
    openapiFields.add("DefaultAttribute");
    openapiFields.add("DerivedTemplates");
    openapiFields.add("NotificationRuleTemplates");
    openapiFields.add("Security");
    openapiFields.add("SecurityEntries");
    openapiFields.add("Self");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElementTemplateLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElementTemplateLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElementTemplateLinks is not found in the empty JSON string", ElementTemplateLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElementTemplateLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElementTemplateLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AnalysisTemplates") != null && !jsonObj.get("AnalysisTemplates").isJsonNull()) && !jsonObj.get("AnalysisTemplates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AnalysisTemplates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AnalysisTemplates").toString()));
      }
      if ((jsonObj.get("AttributeTemplates") != null && !jsonObj.get("AttributeTemplates").isJsonNull()) && !jsonObj.get("AttributeTemplates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttributeTemplates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttributeTemplates").toString()));
      }
      if ((jsonObj.get("BaseTemplate") != null && !jsonObj.get("BaseTemplate").isJsonNull()) && !jsonObj.get("BaseTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BaseTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BaseTemplate").toString()));
      }
      if ((jsonObj.get("BaseTemplates") != null && !jsonObj.get("BaseTemplates").isJsonNull()) && !jsonObj.get("BaseTemplates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BaseTemplates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BaseTemplates").toString()));
      }
      if ((jsonObj.get("Categories") != null && !jsonObj.get("Categories").isJsonNull()) && !jsonObj.get("Categories").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Categories` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Categories").toString()));
      }
      if ((jsonObj.get("Database") != null && !jsonObj.get("Database").isJsonNull()) && !jsonObj.get("Database").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Database` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Database").toString()));
      }
      if ((jsonObj.get("DefaultAttribute") != null && !jsonObj.get("DefaultAttribute").isJsonNull()) && !jsonObj.get("DefaultAttribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultAttribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultAttribute").toString()));
      }
      if ((jsonObj.get("DerivedTemplates") != null && !jsonObj.get("DerivedTemplates").isJsonNull()) && !jsonObj.get("DerivedTemplates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DerivedTemplates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DerivedTemplates").toString()));
      }
      if ((jsonObj.get("NotificationRuleTemplates") != null && !jsonObj.get("NotificationRuleTemplates").isJsonNull()) && !jsonObj.get("NotificationRuleTemplates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NotificationRuleTemplates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NotificationRuleTemplates").toString()));
      }
      if ((jsonObj.get("Security") != null && !jsonObj.get("Security").isJsonNull()) && !jsonObj.get("Security").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Security` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Security").toString()));
      }
      if ((jsonObj.get("SecurityEntries") != null && !jsonObj.get("SecurityEntries").isJsonNull()) && !jsonObj.get("SecurityEntries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecurityEntries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SecurityEntries").toString()));
      }
      if ((jsonObj.get("Self") != null && !jsonObj.get("Self").isJsonNull()) && !jsonObj.get("Self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Self").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElementTemplateLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElementTemplateLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElementTemplateLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElementTemplateLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<ElementTemplateLinks>() {
           @Override
           public void write(JsonWriter out, ElementTemplateLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElementTemplateLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElementTemplateLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElementTemplateLinks
   * @throws IOException if the JSON string is invalid with respect to ElementTemplateLinks
   */
  public static ElementTemplateLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElementTemplateLinks.class);
  }

  /**
   * Convert an instance of ElementTemplateLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

