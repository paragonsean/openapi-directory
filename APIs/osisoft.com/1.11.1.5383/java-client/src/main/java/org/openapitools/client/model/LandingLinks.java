/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LandingLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LandingLinks {
  public static final String SERIALIZED_NAME_ASSET_SERVERS = "AssetServers";
  @SerializedName(SERIALIZED_NAME_ASSET_SERVERS)
  private String assetServers;

  public static final String SERIALIZED_NAME_DATA_SERVERS = "DataServers";
  @SerializedName(SERIALIZED_NAME_DATA_SERVERS)
  private String dataServers;

  public static final String SERIALIZED_NAME_SEARCH = "Search";
  @SerializedName(SERIALIZED_NAME_SEARCH)
  private String search;

  public static final String SERIALIZED_NAME_SELF = "Self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private String self;

  public static final String SERIALIZED_NAME_SYSTEM = "System";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private String system;

  public LandingLinks() {
  }

  public LandingLinks assetServers(String assetServers) {
    this.assetServers = assetServers;
    return this;
  }

  /**
   * Get assetServers
   * @return assetServers
   */
  @javax.annotation.Nullable
  public String getAssetServers() {
    return assetServers;
  }

  public void setAssetServers(String assetServers) {
    this.assetServers = assetServers;
  }


  public LandingLinks dataServers(String dataServers) {
    this.dataServers = dataServers;
    return this;
  }

  /**
   * Get dataServers
   * @return dataServers
   */
  @javax.annotation.Nullable
  public String getDataServers() {
    return dataServers;
  }

  public void setDataServers(String dataServers) {
    this.dataServers = dataServers;
  }


  public LandingLinks search(String search) {
    this.search = search;
    return this;
  }

  /**
   * Get search
   * @return search
   */
  @javax.annotation.Nullable
  public String getSearch() {
    return search;
  }

  public void setSearch(String search) {
    this.search = search;
  }


  public LandingLinks self(String self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public String getSelf() {
    return self;
  }

  public void setSelf(String self) {
    this.self = self;
  }


  public LandingLinks system(String system) {
    this.system = system;
    return this;
  }

  /**
   * Get system
   * @return system
   */
  @javax.annotation.Nullable
  public String getSystem() {
    return system;
  }

  public void setSystem(String system) {
    this.system = system;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LandingLinks landingLinks = (LandingLinks) o;
    return Objects.equals(this.assetServers, landingLinks.assetServers) &&
        Objects.equals(this.dataServers, landingLinks.dataServers) &&
        Objects.equals(this.search, landingLinks.search) &&
        Objects.equals(this.self, landingLinks.self) &&
        Objects.equals(this.system, landingLinks.system);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetServers, dataServers, search, self, system);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LandingLinks {\n");
    sb.append("    assetServers: ").append(toIndentedString(assetServers)).append("\n");
    sb.append("    dataServers: ").append(toIndentedString(dataServers)).append("\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssetServers");
    openapiFields.add("DataServers");
    openapiFields.add("Search");
    openapiFields.add("Self");
    openapiFields.add("System");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LandingLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LandingLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LandingLinks is not found in the empty JSON string", LandingLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LandingLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LandingLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AssetServers") != null && !jsonObj.get("AssetServers").isJsonNull()) && !jsonObj.get("AssetServers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssetServers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssetServers").toString()));
      }
      if ((jsonObj.get("DataServers") != null && !jsonObj.get("DataServers").isJsonNull()) && !jsonObj.get("DataServers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DataServers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DataServers").toString()));
      }
      if ((jsonObj.get("Search") != null && !jsonObj.get("Search").isJsonNull()) && !jsonObj.get("Search").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Search` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Search").toString()));
      }
      if ((jsonObj.get("Self") != null && !jsonObj.get("Self").isJsonNull()) && !jsonObj.get("Self").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Self` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Self").toString()));
      }
      if ((jsonObj.get("System") != null && !jsonObj.get("System").isJsonNull()) && !jsonObj.get("System").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `System` to be a primitive type in the JSON string but got `%s`", jsonObj.get("System").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LandingLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LandingLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LandingLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LandingLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<LandingLinks>() {
           @Override
           public void write(JsonWriter out, LandingLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LandingLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LandingLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LandingLinks
   * @throws IOException if the JSON string is invalid with respect to LandingLinks
   */
  public static LandingLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LandingLinks.class);
  }

  /**
   * Convert an instance of LandingLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

