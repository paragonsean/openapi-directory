/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Analysis;
import org.openapitools.client.model.Attribute;
import org.openapitools.client.model.Element;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsAnalysis;
import org.openapitools.client.model.ItemsAttribute;
import org.openapitools.client.model.ItemsElement;
import org.openapitools.client.model.ItemsElementCategory;
import org.openapitools.client.model.ItemsEventFrame;
import org.openapitools.client.model.ItemsItemElement;
import org.openapitools.client.model.ItemsNotificationRule;
import org.openapitools.client.model.ItemsSecurityEntry;
import org.openapitools.client.model.ItemsSecurityRights;
import org.openapitools.client.model.ItemsString;
import org.openapitools.client.model.NotificationRule;
import org.openapitools.client.model.SearchByAttribute;
import org.openapitools.client.model.SecurityEntry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ElementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ElementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ElementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for elementAddReferencedElement
     * @param webId The ID of the element which the referenced element will be added to. (required)
     * @param referencedElementWebId The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
     * @param referenceType The name of the reference type between the parent and the referenced element. The default is \&quot;parent-child\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The referenced element was successfully added. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The referenced element already exists in the collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementAddReferencedElementCall(String webId, List<String> referencedElementWebId, String referenceType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}/referencedelements"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referencedElementWebId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "referencedElementWebId", referencedElementWebId));
        }

        if (referenceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceType", referenceType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementAddReferencedElementValidateBeforeCall(String webId, List<String> referencedElementWebId, String referenceType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementAddReferencedElement(Async)");
        }

        // verify the required parameter 'referencedElementWebId' is set
        if (referencedElementWebId == null) {
            throw new ApiException("Missing the required parameter 'referencedElementWebId' when calling elementAddReferencedElement(Async)");
        }

        return elementAddReferencedElementCall(webId, referencedElementWebId, referenceType, _callback);

    }

    /**
     * Add a reference to an existing element to the child elements collection.
     * 
     * @param webId The ID of the element which the referenced element will be added to. (required)
     * @param referencedElementWebId The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
     * @param referenceType The name of the reference type between the parent and the referenced element. The default is \&quot;parent-child\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The referenced element was successfully added. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The referenced element already exists in the collection. </td><td>  -  </td></tr>
     </table>
     */
    public void elementAddReferencedElement(String webId, List<String> referencedElementWebId, String referenceType) throws ApiException {
        elementAddReferencedElementWithHttpInfo(webId, referencedElementWebId, referenceType);
    }

    /**
     * Add a reference to an existing element to the child elements collection.
     * 
     * @param webId The ID of the element which the referenced element will be added to. (required)
     * @param referencedElementWebId The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
     * @param referenceType The name of the reference type between the parent and the referenced element. The default is \&quot;parent-child\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The referenced element was successfully added. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The referenced element already exists in the collection. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> elementAddReferencedElementWithHttpInfo(String webId, List<String> referencedElementWebId, String referenceType) throws ApiException {
        okhttp3.Call localVarCall = elementAddReferencedElementValidateBeforeCall(webId, referencedElementWebId, referenceType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add a reference to an existing element to the child elements collection. (asynchronously)
     * 
     * @param webId The ID of the element which the referenced element will be added to. (required)
     * @param referencedElementWebId The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
     * @param referenceType The name of the reference type between the parent and the referenced element. The default is \&quot;parent-child\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The referenced element was successfully added. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The referenced element already exists in the collection. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementAddReferencedElementAsync(String webId, List<String> referencedElementWebId, String referenceType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementAddReferencedElementValidateBeforeCall(webId, referencedElementWebId, referenceType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementCreateAnalysis
     * @param webId The ID of the element on which to create the Analysis. (required)
     * @param analysis The new Analysis definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Analysis was created. The response&#39;s Location header is a link to the Analysis. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementCreateAnalysisCall(String webId, Analysis analysis, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analysis;

        // create path and map variables
        String localVarPath = "/elements/{webId}/analyses"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementCreateAnalysisValidateBeforeCall(String webId, Analysis analysis, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementCreateAnalysis(Async)");
        }

        // verify the required parameter 'analysis' is set
        if (analysis == null) {
            throw new ApiException("Missing the required parameter 'analysis' when calling elementCreateAnalysis(Async)");
        }

        return elementCreateAnalysisCall(webId, analysis, webIdType, _callback);

    }

    /**
     * Create an Analysis.
     * 
     * @param webId The ID of the element on which to create the Analysis. (required)
     * @param analysis The new Analysis definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Analysis was created. The response&#39;s Location header is a link to the Analysis. </td><td>  -  </td></tr>
     </table>
     */
    public void elementCreateAnalysis(String webId, Analysis analysis, String webIdType) throws ApiException {
        elementCreateAnalysisWithHttpInfo(webId, analysis, webIdType);
    }

    /**
     * Create an Analysis.
     * 
     * @param webId The ID of the element on which to create the Analysis. (required)
     * @param analysis The new Analysis definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Analysis was created. The response&#39;s Location header is a link to the Analysis. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> elementCreateAnalysisWithHttpInfo(String webId, Analysis analysis, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementCreateAnalysisValidateBeforeCall(webId, analysis, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create an Analysis. (asynchronously)
     * 
     * @param webId The ID of the element on which to create the Analysis. (required)
     * @param analysis The new Analysis definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Analysis was created. The response&#39;s Location header is a link to the Analysis. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementCreateAnalysisAsync(String webId, Analysis analysis, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementCreateAnalysisValidateBeforeCall(webId, analysis, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementCreateAttribute
     * @param webId The ID of the element on which to create the attribute. (required)
     * @param attribute The definition of the new attribute. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The attribute was created. The response&#39;s Location header is a link to the created attribute. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementCreateAttributeCall(String webId, Attribute attribute, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attribute;

        // create path and map variables
        String localVarPath = "/elements/{webId}/attributes"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementCreateAttributeValidateBeforeCall(String webId, Attribute attribute, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementCreateAttribute(Async)");
        }

        // verify the required parameter 'attribute' is set
        if (attribute == null) {
            throw new ApiException("Missing the required parameter 'attribute' when calling elementCreateAttribute(Async)");
        }

        return elementCreateAttributeCall(webId, attribute, webIdType, _callback);

    }

    /**
     * Create a new attribute of the specified element.
     * 
     * @param webId The ID of the element on which to create the attribute. (required)
     * @param attribute The definition of the new attribute. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The attribute was created. The response&#39;s Location header is a link to the created attribute. </td><td>  -  </td></tr>
     </table>
     */
    public void elementCreateAttribute(String webId, Attribute attribute, String webIdType) throws ApiException {
        elementCreateAttributeWithHttpInfo(webId, attribute, webIdType);
    }

    /**
     * Create a new attribute of the specified element.
     * 
     * @param webId The ID of the element on which to create the attribute. (required)
     * @param attribute The definition of the new attribute. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The attribute was created. The response&#39;s Location header is a link to the created attribute. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> elementCreateAttributeWithHttpInfo(String webId, Attribute attribute, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementCreateAttributeValidateBeforeCall(webId, attribute, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new attribute of the specified element. (asynchronously)
     * 
     * @param webId The ID of the element on which to create the attribute. (required)
     * @param attribute The definition of the new attribute. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The attribute was created. The response&#39;s Location header is a link to the created attribute. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementCreateAttributeAsync(String webId, Attribute attribute, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementCreateAttributeValidateBeforeCall(webId, attribute, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementCreateConfig
     * @param webId The ID of the element. (required)
     * @param includeChildElements If true, includes the child elements of the specified element. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process log of operations. Operations completed with no errors. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Process log of operations. Operations completed with errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementCreateConfigCall(String webId, Boolean includeChildElements, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}/config"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeChildElements != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeChildElements", includeChildElements));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementCreateConfigValidateBeforeCall(String webId, Boolean includeChildElements, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementCreateConfig(Async)");
        }

        return elementCreateConfigCall(webId, includeChildElements, _callback);

    }

    /**
     * Executes the create configuration function of the data references found within the attributes of the element, and optionally, its children.
     * 
     * @param webId The ID of the element. (required)
     * @param includeChildElements If true, includes the child elements of the specified element. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process log of operations. Operations completed with no errors. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Process log of operations. Operations completed with errors. </td><td>  -  </td></tr>
     </table>
     */
    public void elementCreateConfig(String webId, Boolean includeChildElements) throws ApiException {
        elementCreateConfigWithHttpInfo(webId, includeChildElements);
    }

    /**
     * Executes the create configuration function of the data references found within the attributes of the element, and optionally, its children.
     * 
     * @param webId The ID of the element. (required)
     * @param includeChildElements If true, includes the child elements of the specified element. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process log of operations. Operations completed with no errors. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Process log of operations. Operations completed with errors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> elementCreateConfigWithHttpInfo(String webId, Boolean includeChildElements) throws ApiException {
        okhttp3.Call localVarCall = elementCreateConfigValidateBeforeCall(webId, includeChildElements, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Executes the create configuration function of the data references found within the attributes of the element, and optionally, its children. (asynchronously)
     * 
     * @param webId The ID of the element. (required)
     * @param includeChildElements If true, includes the child elements of the specified element. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Process log of operations. Operations completed with no errors. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Process log of operations. Operations completed with errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementCreateConfigAsync(String webId, Boolean includeChildElements, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementCreateConfigValidateBeforeCall(webId, includeChildElements, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementCreateElement
     * @param webId The ID of the parent element on which to create the element. (required)
     * @param element The new element definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The element was created. The response&#39;s Location header is a link to the element. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementCreateElementCall(String webId, Element element, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = element;

        // create path and map variables
        String localVarPath = "/elements/{webId}/elements"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementCreateElementValidateBeforeCall(String webId, Element element, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementCreateElement(Async)");
        }

        // verify the required parameter 'element' is set
        if (element == null) {
            throw new ApiException("Missing the required parameter 'element' when calling elementCreateElement(Async)");
        }

        return elementCreateElementCall(webId, element, webIdType, _callback);

    }

    /**
     * Create a child element.
     * 
     * @param webId The ID of the parent element on which to create the element. (required)
     * @param element The new element definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The element was created. The response&#39;s Location header is a link to the element. </td><td>  -  </td></tr>
     </table>
     */
    public void elementCreateElement(String webId, Element element, String webIdType) throws ApiException {
        elementCreateElementWithHttpInfo(webId, element, webIdType);
    }

    /**
     * Create a child element.
     * 
     * @param webId The ID of the parent element on which to create the element. (required)
     * @param element The new element definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The element was created. The response&#39;s Location header is a link to the element. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> elementCreateElementWithHttpInfo(String webId, Element element, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementCreateElementValidateBeforeCall(webId, element, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a child element. (asynchronously)
     * 
     * @param webId The ID of the parent element on which to create the element. (required)
     * @param element The new element definition. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The element was created. The response&#39;s Location header is a link to the element. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementCreateElementAsync(String webId, Element element, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementCreateElementValidateBeforeCall(webId, element, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementCreateNotificationRule
     * @param webId The ID of the element on which to create the notification rule. (required)
     * @param notificationRule The new notification rule. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The notification rule was created. The response&#39;s Location header is a link to the notification rule. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementCreateNotificationRuleCall(String webId, NotificationRule notificationRule, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationRule;

        // create path and map variables
        String localVarPath = "/elements/{webId}/notificationrules"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementCreateNotificationRuleValidateBeforeCall(String webId, NotificationRule notificationRule, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementCreateNotificationRule(Async)");
        }

        // verify the required parameter 'notificationRule' is set
        if (notificationRule == null) {
            throw new ApiException("Missing the required parameter 'notificationRule' when calling elementCreateNotificationRule(Async)");
        }

        return elementCreateNotificationRuleCall(webId, notificationRule, webIdType, _callback);

    }

    /**
     * Create a notification rule.
     * 
     * @param webId The ID of the element on which to create the notification rule. (required)
     * @param notificationRule The new notification rule. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The notification rule was created. The response&#39;s Location header is a link to the notification rule. </td><td>  -  </td></tr>
     </table>
     */
    public void elementCreateNotificationRule(String webId, NotificationRule notificationRule, String webIdType) throws ApiException {
        elementCreateNotificationRuleWithHttpInfo(webId, notificationRule, webIdType);
    }

    /**
     * Create a notification rule.
     * 
     * @param webId The ID of the element on which to create the notification rule. (required)
     * @param notificationRule The new notification rule. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The notification rule was created. The response&#39;s Location header is a link to the notification rule. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> elementCreateNotificationRuleWithHttpInfo(String webId, NotificationRule notificationRule, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementCreateNotificationRuleValidateBeforeCall(webId, notificationRule, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a notification rule. (asynchronously)
     * 
     * @param webId The ID of the element on which to create the notification rule. (required)
     * @param notificationRule The new notification rule. (required)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The notification rule was created. The response&#39;s Location header is a link to the notification rule. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementCreateNotificationRuleAsync(String webId, NotificationRule notificationRule, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementCreateNotificationRuleValidateBeforeCall(webId, notificationRule, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementCreateSearchByAttribute
     * @param query The query of search by attribute. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param noResults If false, the response content will contain the first page of the search results. If true, the response content will be empty. The default is false. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link is stored in the response&#39;s \&quot;Location\&quot; header. The response content is the first page of the search result by the default parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Empty or invalid request content. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Request content is too large. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementCreateSearchByAttributeCall(SearchByAttribute query, String associations, Boolean noResults, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = query;

        // create path and map variables
        String localVarPath = "/elements/searchbyattribute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (noResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("noResults", noResults));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementCreateSearchByAttributeValidateBeforeCall(SearchByAttribute query, String associations, Boolean noResults, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling elementCreateSearchByAttribute(Async)");
        }

        return elementCreateSearchByAttributeCall(query, associations, noResults, webIdType, _callback);

    }

    /**
     * Create a link for a \&quot;Search Elements By Attribute Value\&quot; operation, whose queries are specified in the request content. The SearchRoot is specified by the Web Id of the root Element. If the SearchRoot is not specified, then the search starts at the Asset Database. ElementTemplate must be provided as the Web ID of the ElementTemplate, which are used to create the Elements. All the attributes in the queries must be defined as AttributeTemplates on the ElementTemplate. An array of attribute value queries are ANDed together to find the desired Element objects. At least one value query must be specified. There are limitations on SearchOperators.
     * 
     * @param query The query of search by attribute. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param noResults If false, the response content will contain the first page of the search results. If true, the response content will be empty. The default is false. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsElement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link is stored in the response&#39;s \&quot;Location\&quot; header. The response content is the first page of the search result by the default parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Empty or invalid request content. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Request content is too large. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsElement elementCreateSearchByAttribute(SearchByAttribute query, String associations, Boolean noResults, String webIdType) throws ApiException {
        ApiResponse<ItemsElement> localVarResp = elementCreateSearchByAttributeWithHttpInfo(query, associations, noResults, webIdType);
        return localVarResp.getData();
    }

    /**
     * Create a link for a \&quot;Search Elements By Attribute Value\&quot; operation, whose queries are specified in the request content. The SearchRoot is specified by the Web Id of the root Element. If the SearchRoot is not specified, then the search starts at the Asset Database. ElementTemplate must be provided as the Web ID of the ElementTemplate, which are used to create the Elements. All the attributes in the queries must be defined as AttributeTemplates on the ElementTemplate. An array of attribute value queries are ANDed together to find the desired Element objects. At least one value query must be specified. There are limitations on SearchOperators.
     * 
     * @param query The query of search by attribute. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param noResults If false, the response content will contain the first page of the search results. If true, the response content will be empty. The default is false. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsElement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link is stored in the response&#39;s \&quot;Location\&quot; header. The response content is the first page of the search result by the default parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Empty or invalid request content. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Request content is too large. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsElement> elementCreateSearchByAttributeWithHttpInfo(SearchByAttribute query, String associations, Boolean noResults, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementCreateSearchByAttributeValidateBeforeCall(query, associations, noResults, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsElement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a link for a \&quot;Search Elements By Attribute Value\&quot; operation, whose queries are specified in the request content. The SearchRoot is specified by the Web Id of the root Element. If the SearchRoot is not specified, then the search starts at the Asset Database. ElementTemplate must be provided as the Web ID of the ElementTemplate, which are used to create the Elements. All the attributes in the queries must be defined as AttributeTemplates on the ElementTemplate. An array of attribute value queries are ANDed together to find the desired Element objects. At least one value query must be specified. There are limitations on SearchOperators. (asynchronously)
     * 
     * @param query The query of search by attribute. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param noResults If false, the response content will contain the first page of the search results. If true, the response content will be empty. The default is false. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link is stored in the response&#39;s \&quot;Location\&quot; header. The response content is the first page of the search result by the default parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Empty or invalid request content. </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Request content is too large. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementCreateSearchByAttributeAsync(SearchByAttribute query, String associations, Boolean noResults, String webIdType, final ApiCallback<ItemsElement> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementCreateSearchByAttributeValidateBeforeCall(query, associations, noResults, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsElement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementCreateSecurityEntry
     * @param webId The ID of the element where the security entry will be created. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security entry was created. The response&#39;s Location header is a link to the security entry. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementCreateSecurityEntryCall(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = securityEntry;

        // create path and map variables
        String localVarPath = "/elements/{webId}/securityentries"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applyToChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applyToChildren", applyToChildren));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementCreateSecurityEntryValidateBeforeCall(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementCreateSecurityEntry(Async)");
        }

        // verify the required parameter 'securityEntry' is set
        if (securityEntry == null) {
            throw new ApiException("Missing the required parameter 'securityEntry' when calling elementCreateSecurityEntry(Async)");
        }

        return elementCreateSecurityEntryCall(webId, securityEntry, applyToChildren, webIdType, _callback);

    }

    /**
     * Create a security entry owned by the element.
     * 
     * @param webId The ID of the element where the security entry will be created. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security entry was created. The response&#39;s Location header is a link to the security entry. </td><td>  -  </td></tr>
     </table>
     */
    public void elementCreateSecurityEntry(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String webIdType) throws ApiException {
        elementCreateSecurityEntryWithHttpInfo(webId, securityEntry, applyToChildren, webIdType);
    }

    /**
     * Create a security entry owned by the element.
     * 
     * @param webId The ID of the element where the security entry will be created. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security entry was created. The response&#39;s Location header is a link to the security entry. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> elementCreateSecurityEntryWithHttpInfo(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementCreateSecurityEntryValidateBeforeCall(webId, securityEntry, applyToChildren, webIdType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a security entry owned by the element. (asynchronously)
     * 
     * @param webId The ID of the element where the security entry will be created. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The security entry was created. The response&#39;s Location header is a link to the security entry. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementCreateSecurityEntryAsync(String webId, SecurityEntry securityEntry, Boolean applyToChildren, String webIdType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementCreateSecurityEntryValidateBeforeCall(webId, securityEntry, applyToChildren, webIdType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementDelete
     * @param webId The ID of the element. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The element was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementDeleteCall(String webId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementDeleteValidateBeforeCall(String webId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementDelete(Async)");
        }

        return elementDeleteCall(webId, _callback);

    }

    /**
     * Delete an element.
     * 
     * @param webId The ID of the element. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The element was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void elementDelete(String webId) throws ApiException {
        elementDeleteWithHttpInfo(webId);
    }

    /**
     * Delete an element.
     * 
     * @param webId The ID of the element. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The element was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> elementDeleteWithHttpInfo(String webId) throws ApiException {
        okhttp3.Call localVarCall = elementDeleteValidateBeforeCall(webId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an element. (asynchronously)
     * 
     * @param webId The ID of the element. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The element was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementDeleteAsync(String webId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementDeleteValidateBeforeCall(webId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementDeleteSecurityEntry
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the element where the security entry will be deleted. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementDeleteSecurityEntryCall(String name, String webId, Boolean applyToChildren, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}/securityentries/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applyToChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applyToChildren", applyToChildren));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementDeleteSecurityEntryValidateBeforeCall(String name, String webId, Boolean applyToChildren, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling elementDeleteSecurityEntry(Async)");
        }

        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementDeleteSecurityEntry(Async)");
        }

        return elementDeleteSecurityEntryCall(name, webId, applyToChildren, _callback);

    }

    /**
     * Delete a security entry owned by the element.
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the element where the security entry will be deleted. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void elementDeleteSecurityEntry(String name, String webId, Boolean applyToChildren) throws ApiException {
        elementDeleteSecurityEntryWithHttpInfo(name, webId, applyToChildren);
    }

    /**
     * Delete a security entry owned by the element.
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the element where the security entry will be deleted. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> elementDeleteSecurityEntryWithHttpInfo(String name, String webId, Boolean applyToChildren) throws ApiException {
        okhttp3.Call localVarCall = elementDeleteSecurityEntryValidateBeforeCall(name, webId, applyToChildren, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a security entry owned by the element. (asynchronously)
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the element where the security entry will be deleted. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementDeleteSecurityEntryAsync(String name, String webId, Boolean applyToChildren, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementDeleteSecurityEntryValidateBeforeCall(name, webId, applyToChildren, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementExecuteSearchByAttribute
     * @param searchId The encoded search Id of the \&quot;Search Elements By Attribute Value\&quot; operation. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param categoryName Specify that the owner of the returned attributes must have this category. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param descriptionFilter The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param maxCount The maximum number of objects to be returned. The default is 1000. (optional)
     * @param nameFilter The name query string used for finding objects. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of matching Elements. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid search Id or search parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementExecuteSearchByAttributeCall(String searchId, String associations, String categoryName, String descriptionFilter, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/searchbyattribute/{searchId}"
            .replace("{" + "searchId" + "}", localVarApiClient.escapeString(searchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryName", categoryName));
        }

        if (descriptionFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("descriptionFilter", descriptionFilter));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (searchFullHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFullHierarchy", searchFullHierarchy));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementExecuteSearchByAttributeValidateBeforeCall(String searchId, String associations, String categoryName, String descriptionFilter, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchId' is set
        if (searchId == null) {
            throw new ApiException("Missing the required parameter 'searchId' when calling elementExecuteSearchByAttribute(Async)");
        }

        return elementExecuteSearchByAttributeCall(searchId, associations, categoryName, descriptionFilter, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, webIdType, _callback);

    }

    /**
     * Execute a \&quot;Search Elements By Attribute Value\&quot; operation.
     * 
     * @param searchId The encoded search Id of the \&quot;Search Elements By Attribute Value\&quot; operation. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param categoryName Specify that the owner of the returned attributes must have this category. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param descriptionFilter The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param maxCount The maximum number of objects to be returned. The default is 1000. (optional)
     * @param nameFilter The name query string used for finding objects. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsElement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of matching Elements. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid search Id or search parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsElement elementExecuteSearchByAttribute(String searchId, String associations, String categoryName, String descriptionFilter, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType) throws ApiException {
        ApiResponse<ItemsElement> localVarResp = elementExecuteSearchByAttributeWithHttpInfo(searchId, associations, categoryName, descriptionFilter, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, webIdType);
        return localVarResp.getData();
    }

    /**
     * Execute a \&quot;Search Elements By Attribute Value\&quot; operation.
     * 
     * @param searchId The encoded search Id of the \&quot;Search Elements By Attribute Value\&quot; operation. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param categoryName Specify that the owner of the returned attributes must have this category. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param descriptionFilter The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param maxCount The maximum number of objects to be returned. The default is 1000. (optional)
     * @param nameFilter The name query string used for finding objects. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsElement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of matching Elements. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid search Id or search parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsElement> elementExecuteSearchByAttributeWithHttpInfo(String searchId, String associations, String categoryName, String descriptionFilter, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementExecuteSearchByAttributeValidateBeforeCall(searchId, associations, categoryName, descriptionFilter, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsElement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute a \&quot;Search Elements By Attribute Value\&quot; operation. (asynchronously)
     * 
     * @param searchId The encoded search Id of the \&quot;Search Elements By Attribute Value\&quot; operation. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param categoryName Specify that the owner of the returned attributes must have this category. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param descriptionFilter The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param maxCount The maximum number of objects to be returned. The default is 1000. (optional)
     * @param nameFilter The name query string used for finding objects. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of matching Elements. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid search Id or search parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementExecuteSearchByAttributeAsync(String searchId, String associations, String categoryName, String descriptionFilter, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType, final ApiCallback<ItemsElement> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementExecuteSearchByAttributeValidateBeforeCall(searchId, associations, categoryName, descriptionFilter, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsElement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementFindElementAttributes
     * @param webId The ID of the element to use as the root of the search. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param attributeCategory Specify that returned attributes must have this category. The default is no filter. (optional)
     * @param attributeDescriptionFilter The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param attributeNameFilter The attribute name filter string used for finding objects. The default is no filter. (optional)
     * @param attributeType Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)
     * @param elementCategory Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)
     * @param elementDescriptionFilter The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param elementNameFilter The element name filter string used for finding objects. The default is no filter. (optional)
     * @param elementTemplate Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)
     * @param elementType Specify that the element of the returned attributes must have this AFElementType. The default is no filter. (optional)
     * @param maxCount The maximum number of objects to be returned (the page size). The default is 1000. (optional)
     * @param searchFullHierarchy Specifies if the search should include objects nested further than immediate children of the given resource. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of matching attributes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementFindElementAttributesCall(String webId, String associations, String attributeCategory, String attributeDescriptionFilter, String attributeNameFilter, String attributeType, String elementCategory, String elementDescriptionFilter, String elementNameFilter, String elementTemplate, String elementType, Integer maxCount, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}/elementattributes"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (attributeCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributeCategory", attributeCategory));
        }

        if (attributeDescriptionFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributeDescriptionFilter", attributeDescriptionFilter));
        }

        if (attributeNameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributeNameFilter", attributeNameFilter));
        }

        if (attributeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributeType", attributeType));
        }

        if (elementCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elementCategory", elementCategory));
        }

        if (elementDescriptionFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elementDescriptionFilter", elementDescriptionFilter));
        }

        if (elementNameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elementNameFilter", elementNameFilter));
        }

        if (elementTemplate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elementTemplate", elementTemplate));
        }

        if (elementType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elementType", elementType));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (searchFullHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFullHierarchy", searchFullHierarchy));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementFindElementAttributesValidateBeforeCall(String webId, String associations, String attributeCategory, String attributeDescriptionFilter, String attributeNameFilter, String attributeType, String elementCategory, String elementDescriptionFilter, String elementNameFilter, String elementTemplate, String elementType, Integer maxCount, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementFindElementAttributes(Async)");
        }

        return elementFindElementAttributesCall(webId, associations, attributeCategory, attributeDescriptionFilter, attributeNameFilter, attributeType, elementCategory, elementDescriptionFilter, elementNameFilter, elementTemplate, elementType, maxCount, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, webIdType, _callback);

    }

    /**
     * Retrieves a list of element attributes matching the specified filters from the specified element.
     * 
     * @param webId The ID of the element to use as the root of the search. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param attributeCategory Specify that returned attributes must have this category. The default is no filter. (optional)
     * @param attributeDescriptionFilter The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param attributeNameFilter The attribute name filter string used for finding objects. The default is no filter. (optional)
     * @param attributeType Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)
     * @param elementCategory Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)
     * @param elementDescriptionFilter The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param elementNameFilter The element name filter string used for finding objects. The default is no filter. (optional)
     * @param elementTemplate Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)
     * @param elementType Specify that the element of the returned attributes must have this AFElementType. The default is no filter. (optional)
     * @param maxCount The maximum number of objects to be returned (the page size). The default is 1000. (optional)
     * @param searchFullHierarchy Specifies if the search should include objects nested further than immediate children of the given resource. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of matching attributes. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsAttribute elementFindElementAttributes(String webId, String associations, String attributeCategory, String attributeDescriptionFilter, String attributeNameFilter, String attributeType, String elementCategory, String elementDescriptionFilter, String elementNameFilter, String elementTemplate, String elementType, Integer maxCount, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType) throws ApiException {
        ApiResponse<ItemsAttribute> localVarResp = elementFindElementAttributesWithHttpInfo(webId, associations, attributeCategory, attributeDescriptionFilter, attributeNameFilter, attributeType, elementCategory, elementDescriptionFilter, elementNameFilter, elementTemplate, elementType, maxCount, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of element attributes matching the specified filters from the specified element.
     * 
     * @param webId The ID of the element to use as the root of the search. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param attributeCategory Specify that returned attributes must have this category. The default is no filter. (optional)
     * @param attributeDescriptionFilter The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param attributeNameFilter The attribute name filter string used for finding objects. The default is no filter. (optional)
     * @param attributeType Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)
     * @param elementCategory Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)
     * @param elementDescriptionFilter The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param elementNameFilter The element name filter string used for finding objects. The default is no filter. (optional)
     * @param elementTemplate Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)
     * @param elementType Specify that the element of the returned attributes must have this AFElementType. The default is no filter. (optional)
     * @param maxCount The maximum number of objects to be returned (the page size). The default is 1000. (optional)
     * @param searchFullHierarchy Specifies if the search should include objects nested further than immediate children of the given resource. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of matching attributes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsAttribute> elementFindElementAttributesWithHttpInfo(String webId, String associations, String attributeCategory, String attributeDescriptionFilter, String attributeNameFilter, String attributeType, String elementCategory, String elementDescriptionFilter, String elementNameFilter, String elementTemplate, String elementType, Integer maxCount, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementFindElementAttributesValidateBeforeCall(webId, associations, attributeCategory, attributeDescriptionFilter, attributeNameFilter, attributeType, elementCategory, elementDescriptionFilter, elementNameFilter, elementTemplate, elementType, maxCount, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of element attributes matching the specified filters from the specified element. (asynchronously)
     * 
     * @param webId The ID of the element to use as the root of the search. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param attributeCategory Specify that returned attributes must have this category. The default is no filter. (optional)
     * @param attributeDescriptionFilter The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param attributeNameFilter The attribute name filter string used for finding objects. The default is no filter. (optional)
     * @param attributeType Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)
     * @param elementCategory Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)
     * @param elementDescriptionFilter The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter. (optional)
     * @param elementNameFilter The element name filter string used for finding objects. The default is no filter. (optional)
     * @param elementTemplate Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)
     * @param elementType Specify that the element of the returned attributes must have this AFElementType. The default is no filter. (optional)
     * @param maxCount The maximum number of objects to be returned (the page size). The default is 1000. (optional)
     * @param searchFullHierarchy Specifies if the search should include objects nested further than immediate children of the given resource. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of matching attributes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementFindElementAttributesAsync(String webId, String associations, String attributeCategory, String attributeDescriptionFilter, String attributeNameFilter, String attributeType, String elementCategory, String elementDescriptionFilter, String elementNameFilter, String elementTemplate, String elementType, Integer maxCount, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType, final ApiCallback<ItemsAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementFindElementAttributesValidateBeforeCall(webId, associations, attributeCategory, attributeDescriptionFilter, attributeNameFilter, attributeType, elementCategory, elementDescriptionFilter, elementNameFilter, elementTemplate, elementType, maxCount, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementGet
     * @param webId The ID of the element. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified element. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetCall(String webId, String associations, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementGetValidateBeforeCall(String webId, String associations, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementGet(Async)");
        }

        return elementGetCall(webId, associations, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve an element.
     * 
     * @param webId The ID of the element. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return Element
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified element. </td><td>  -  </td></tr>
     </table>
     */
    public Element elementGet(String webId, String associations, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<Element> localVarResp = elementGetWithHttpInfo(webId, associations, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve an element.
     * 
     * @param webId The ID of the element. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Element&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified element. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Element> elementGetWithHttpInfo(String webId, String associations, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementGetValidateBeforeCall(webId, associations, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<Element>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an element. (asynchronously)
     * 
     * @param webId The ID of the element. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified element. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetAsync(String webId, String associations, String selectedFields, String webIdType, final ApiCallback<Element> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementGetValidateBeforeCall(webId, associations, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<Element>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementGetAnalyses
     * @param webId The ID of the element, which is the Target of the analyses. (required)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of analyses matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetAnalysesCall(String webId, Integer maxCount, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}/analyses"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementGetAnalysesValidateBeforeCall(String webId, Integer maxCount, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementGetAnalyses(Async)");
        }

        return elementGetAnalysesCall(webId, maxCount, selectedFields, sortField, sortOrder, startIndex, webIdType, _callback);

    }

    /**
     * Retrieve analyses based on the specified conditions.
     * Users can search for the analyses based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the analyses that match the default search.
     * @param webId The ID of the element, which is the Target of the analyses. (required)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsAnalysis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of analyses matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsAnalysis elementGetAnalyses(String webId, Integer maxCount, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType) throws ApiException {
        ApiResponse<ItemsAnalysis> localVarResp = elementGetAnalysesWithHttpInfo(webId, maxCount, selectedFields, sortField, sortOrder, startIndex, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve analyses based on the specified conditions.
     * Users can search for the analyses based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the analyses that match the default search.
     * @param webId The ID of the element, which is the Target of the analyses. (required)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsAnalysis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of analyses matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsAnalysis> elementGetAnalysesWithHttpInfo(String webId, Integer maxCount, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementGetAnalysesValidateBeforeCall(webId, maxCount, selectedFields, sortField, sortOrder, startIndex, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsAnalysis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve analyses based on the specified conditions. (asynchronously)
     * Users can search for the analyses based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the analyses that match the default search.
     * @param webId The ID of the element, which is the Target of the analyses. (required)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of analyses matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetAnalysesAsync(String webId, Integer maxCount, String selectedFields, String sortField, String sortOrder, Integer startIndex, String webIdType, final ApiCallback<ItemsAnalysis> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementGetAnalysesValidateBeforeCall(webId, maxCount, selectedFields, sortField, sortOrder, startIndex, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsAnalysis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementGetAttributes
     * @param webId The ID of the element. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param categoryName Specify that returned attributes must have this category. The default is no category filter. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param templateName Specify that returned attributes must be members of this template. The default is no template filter. (optional)
     * @param trait The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter. (optional)
     * @param traitCategory The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \&quot;all\&quot;, then all attribute traits of all categories will be returned. (optional)
     * @param valueType Specify that returned attributes&#39; value type must be the given value type. The default is no value type filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of child attributes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetAttributesCall(String webId, String associations, String categoryName, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, Integer startIndex, String templateName, List<String> trait, List<String> traitCategory, String valueType, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}/attributes"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryName", categoryName));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (searchFullHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFullHierarchy", searchFullHierarchy));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (showExcluded != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showExcluded", showExcluded));
        }

        if (showHidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showHidden", showHidden));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateName", templateName));
        }

        if (trait != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "trait", trait));
        }

        if (traitCategory != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "traitCategory", traitCategory));
        }

        if (valueType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("valueType", valueType));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementGetAttributesValidateBeforeCall(String webId, String associations, String categoryName, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, Integer startIndex, String templateName, List<String> trait, List<String> traitCategory, String valueType, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementGetAttributes(Async)");
        }

        return elementGetAttributesCall(webId, associations, categoryName, maxCount, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startIndex, templateName, trait, traitCategory, valueType, webIdType, _callback);

    }

    /**
     * Get the attributes of the specified element.
     * 
     * @param webId The ID of the element. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param categoryName Specify that returned attributes must have this category. The default is no category filter. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param templateName Specify that returned attributes must be members of this template. The default is no template filter. (optional)
     * @param trait The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter. (optional)
     * @param traitCategory The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \&quot;all\&quot;, then all attribute traits of all categories will be returned. (optional)
     * @param valueType Specify that returned attributes&#39; value type must be the given value type. The default is no value type filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsAttribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of child attributes. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsAttribute elementGetAttributes(String webId, String associations, String categoryName, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, Integer startIndex, String templateName, List<String> trait, List<String> traitCategory, String valueType, String webIdType) throws ApiException {
        ApiResponse<ItemsAttribute> localVarResp = elementGetAttributesWithHttpInfo(webId, associations, categoryName, maxCount, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startIndex, templateName, trait, traitCategory, valueType, webIdType);
        return localVarResp.getData();
    }

    /**
     * Get the attributes of the specified element.
     * 
     * @param webId The ID of the element. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param categoryName Specify that returned attributes must have this category. The default is no category filter. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param templateName Specify that returned attributes must be members of this template. The default is no template filter. (optional)
     * @param trait The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter. (optional)
     * @param traitCategory The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \&quot;all\&quot;, then all attribute traits of all categories will be returned. (optional)
     * @param valueType Specify that returned attributes&#39; value type must be the given value type. The default is no value type filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of child attributes. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsAttribute> elementGetAttributesWithHttpInfo(String webId, String associations, String categoryName, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, Integer startIndex, String templateName, List<String> trait, List<String> traitCategory, String valueType, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementGetAttributesValidateBeforeCall(webId, associations, categoryName, maxCount, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startIndex, templateName, trait, traitCategory, valueType, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsAttribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the attributes of the specified element. (asynchronously)
     * 
     * @param webId The ID of the element. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned. (optional)
     * @param categoryName Specify that returned attributes must have this category. The default is no category filter. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding attributes. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param showExcluded Specified if the search should include attributes with the Excluded property set. The default is &#39;false&#39;. (optional)
     * @param showHidden Specified if the search should include attributes with the Hidden property set. The default is &#39;false&#39;. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param templateName Specify that returned attributes must be members of this template. The default is no template filter. (optional)
     * @param trait The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter. (optional)
     * @param traitCategory The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \&quot;all\&quot;, then all attribute traits of all categories will be returned. (optional)
     * @param valueType Specify that returned attributes&#39; value type must be the given value type. The default is no value type filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of child attributes. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetAttributesAsync(String webId, String associations, String categoryName, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, Boolean showExcluded, Boolean showHidden, String sortField, String sortOrder, Integer startIndex, String templateName, List<String> trait, List<String> traitCategory, String valueType, String webIdType, final ApiCallback<ItemsAttribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementGetAttributesValidateBeforeCall(webId, associations, categoryName, maxCount, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startIndex, templateName, trait, traitCategory, valueType, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsAttribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementGetByPath
     * @param path The path to the element. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified element. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetByPathCall(String path, String associations, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (path != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
        }

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementGetByPathValidateBeforeCall(String path, String associations, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling elementGetByPath(Async)");
        }

        return elementGetByPathCall(path, associations, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve an element by path.
     * This method returns an element based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the element. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return Element
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified element. </td><td>  -  </td></tr>
     </table>
     */
    public Element elementGetByPath(String path, String associations, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<Element> localVarResp = elementGetByPathWithHttpInfo(path, associations, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve an element by path.
     * This method returns an element based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the element. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;Element&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified element. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Element> elementGetByPathWithHttpInfo(String path, String associations, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementGetByPathValidateBeforeCall(path, associations, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<Element>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve an element by path. (asynchronously)
     * This method returns an element based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param path The path to the element. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specified element. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetByPathAsync(String path, String associations, String selectedFields, String webIdType, final ApiCallback<Element> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementGetByPathValidateBeforeCall(path, associations, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<Element>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementGetCategories
     * @param webId The ID of the element. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of categories. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetCategoriesCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}/categories"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementGetCategoriesValidateBeforeCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementGetCategories(Async)");
        }

        return elementGetCategoriesCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Get an element&#39;s categories.
     * 
     * @param webId The ID of the element. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsElementCategory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of categories. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsElementCategory elementGetCategories(String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsElementCategory> localVarResp = elementGetCategoriesWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Get an element&#39;s categories.
     * 
     * @param webId The ID of the element. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsElementCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of categories. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsElementCategory> elementGetCategoriesWithHttpInfo(String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementGetCategoriesValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsElementCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an element&#39;s categories. (asynchronously)
     * 
     * @param webId The ID of the element. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of categories. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetCategoriesAsync(String webId, String selectedFields, String webIdType, final ApiCallback<ItemsElementCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementGetCategoriesValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsElementCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementGetElements
     * @param webId The ID of the element to use as the root of the search. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param categoryName Specify that returned elements must have this category. The default is no category filter. (optional)
     * @param descriptionFilter Specify that returned elements must have this description. The default is no description filter. (optional)
     * @param elementType Specify that returned elements must have this type. The default type is &#39;Any&#39;. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding objects. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param templateName Specify that returned elements must have this template or a template derived from this template. The default is no template filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of elements matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetElementsCall(String webId, String associations, String categoryName, String descriptionFilter, String elementType, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String templateName, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}/elements"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryName", categoryName));
        }

        if (descriptionFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("descriptionFilter", descriptionFilter));
        }

        if (elementType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elementType", elementType));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (searchFullHierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFullHierarchy", searchFullHierarchy));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateName", templateName));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementGetElementsValidateBeforeCall(String webId, String associations, String categoryName, String descriptionFilter, String elementType, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String templateName, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementGetElements(Async)");
        }

        return elementGetElementsCall(webId, associations, categoryName, descriptionFilter, elementType, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, templateName, webIdType, _callback);

    }

    /**
     * Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified element.
     * Users can search for the elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
     * @param webId The ID of the element to use as the root of the search. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param categoryName Specify that returned elements must have this category. The default is no category filter. (optional)
     * @param descriptionFilter Specify that returned elements must have this description. The default is no description filter. (optional)
     * @param elementType Specify that returned elements must have this type. The default type is &#39;Any&#39;. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding objects. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param templateName Specify that returned elements must have this template or a template derived from this template. The default is no template filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsElement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of elements matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsElement elementGetElements(String webId, String associations, String categoryName, String descriptionFilter, String elementType, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String templateName, String webIdType) throws ApiException {
        ApiResponse<ItemsElement> localVarResp = elementGetElementsWithHttpInfo(webId, associations, categoryName, descriptionFilter, elementType, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, templateName, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified element.
     * Users can search for the elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
     * @param webId The ID of the element to use as the root of the search. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param categoryName Specify that returned elements must have this category. The default is no category filter. (optional)
     * @param descriptionFilter Specify that returned elements must have this description. The default is no description filter. (optional)
     * @param elementType Specify that returned elements must have this type. The default type is &#39;Any&#39;. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding objects. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param templateName Specify that returned elements must have this template or a template derived from this template. The default is no template filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsElement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of elements matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsElement> elementGetElementsWithHttpInfo(String webId, String associations, String categoryName, String descriptionFilter, String elementType, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String templateName, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementGetElementsValidateBeforeCall(webId, associations, categoryName, descriptionFilter, elementType, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, templateName, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsElement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified element. (asynchronously)
     * Users can search for the elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
     * @param webId The ID of the element to use as the root of the search. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param categoryName Specify that returned elements must have this category. The default is no category filter. (optional)
     * @param descriptionFilter Specify that returned elements must have this description. The default is no description filter. (optional)
     * @param elementType Specify that returned elements must have this type. The default type is &#39;Any&#39;. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding objects. The default is no filter. (optional)
     * @param searchFullHierarchy Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param templateName Specify that returned elements must have this template or a template derived from this template. The default is no template filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of elements matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetElementsAsync(String webId, String associations, String categoryName, String descriptionFilter, String elementType, Integer maxCount, String nameFilter, Boolean searchFullHierarchy, String selectedFields, String sortField, String sortOrder, Integer startIndex, String templateName, String webIdType, final ApiCallback<ItemsElement> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementGetElementsValidateBeforeCall(webId, associations, categoryName, descriptionFilter, elementType, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, templateName, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsElement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementGetElementsQuery
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param databaseWebId The ID of the asset database to use as the root of the query. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param query The query string is a list of filters used to perform an AFSearch for the elements in the asset database. An example would be: \&quot;query&#x3D;Name:&#x3D;MyElement* Template:&#x3D;ElementTemplate\&quot;. (optional)
     * @param queryDate Optional parameter. Used to retrieve the relative the version of an object. A value of null or AFTime.MaxValue initializes the query date so the latest versions of sub-objects are retrieved. The value may be an AFTime, DateTime, PITime, String, or numeric. An integer numeric represents the number of ticks (100-nanosecond intervals) since January 1, 0001. A floating point numeric represents the number of seconds since January 1, 1970 UTC. A String is interpreted as local time, unless it contains a time zone indicator such as a trailing \&quot;Z\&quot; or \&quot;GMT\&quot;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of elements matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetElementsQueryCall(String associations, String databaseWebId, Integer maxCount, String query, String queryDate, String selectedFields, Integer startIndex, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (databaseWebId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("databaseWebId", databaseWebId));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (queryDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryDate", queryDate));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementGetElementsQueryValidateBeforeCall(String associations, String databaseWebId, Integer maxCount, String query, String queryDate, String selectedFields, Integer startIndex, String webIdType, final ApiCallback _callback) throws ApiException {
        return elementGetElementsQueryCall(associations, databaseWebId, maxCount, query, queryDate, selectedFields, startIndex, webIdType, _callback);

    }

    /**
     * Retrieve elements based on the specified conditions. By default, returns all the elements.
     * 
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param databaseWebId The ID of the asset database to use as the root of the query. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param query The query string is a list of filters used to perform an AFSearch for the elements in the asset database. An example would be: \&quot;query&#x3D;Name:&#x3D;MyElement* Template:&#x3D;ElementTemplate\&quot;. (optional)
     * @param queryDate Optional parameter. Used to retrieve the relative the version of an object. A value of null or AFTime.MaxValue initializes the query date so the latest versions of sub-objects are retrieved. The value may be an AFTime, DateTime, PITime, String, or numeric. An integer numeric represents the number of ticks (100-nanosecond intervals) since January 1, 0001. A floating point numeric represents the number of seconds since January 1, 1970 UTC. A String is interpreted as local time, unless it contains a time zone indicator such as a trailing \&quot;Z\&quot; or \&quot;GMT\&quot;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsElement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of elements matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsElement elementGetElementsQuery(String associations, String databaseWebId, Integer maxCount, String query, String queryDate, String selectedFields, Integer startIndex, String webIdType) throws ApiException {
        ApiResponse<ItemsElement> localVarResp = elementGetElementsQueryWithHttpInfo(associations, databaseWebId, maxCount, query, queryDate, selectedFields, startIndex, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve elements based on the specified conditions. By default, returns all the elements.
     * 
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param databaseWebId The ID of the asset database to use as the root of the query. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param query The query string is a list of filters used to perform an AFSearch for the elements in the asset database. An example would be: \&quot;query&#x3D;Name:&#x3D;MyElement* Template:&#x3D;ElementTemplate\&quot;. (optional)
     * @param queryDate Optional parameter. Used to retrieve the relative the version of an object. A value of null or AFTime.MaxValue initializes the query date so the latest versions of sub-objects are retrieved. The value may be an AFTime, DateTime, PITime, String, or numeric. An integer numeric represents the number of ticks (100-nanosecond intervals) since January 1, 0001. A floating point numeric represents the number of seconds since January 1, 1970 UTC. A String is interpreted as local time, unless it contains a time zone indicator such as a trailing \&quot;Z\&quot; or \&quot;GMT\&quot;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsElement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of elements matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsElement> elementGetElementsQueryWithHttpInfo(String associations, String databaseWebId, Integer maxCount, String query, String queryDate, String selectedFields, Integer startIndex, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementGetElementsQueryValidateBeforeCall(associations, databaseWebId, maxCount, query, queryDate, selectedFields, startIndex, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsElement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve elements based on the specified conditions. By default, returns all the elements. (asynchronously)
     * 
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param databaseWebId The ID of the asset database to use as the root of the query. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param query The query string is a list of filters used to perform an AFSearch for the elements in the asset database. An example would be: \&quot;query&#x3D;Name:&#x3D;MyElement* Template:&#x3D;ElementTemplate\&quot;. (optional)
     * @param queryDate Optional parameter. Used to retrieve the relative the version of an object. A value of null or AFTime.MaxValue initializes the query date so the latest versions of sub-objects are retrieved. The value may be an AFTime, DateTime, PITime, String, or numeric. An integer numeric represents the number of ticks (100-nanosecond intervals) since January 1, 0001. A floating point numeric represents the number of seconds since January 1, 1970 UTC. A String is interpreted as local time, unless it contains a time zone indicator such as a trailing \&quot;Z\&quot; or \&quot;GMT\&quot;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of elements matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetElementsQueryAsync(String associations, String databaseWebId, Integer maxCount, String query, String queryDate, String selectedFields, Integer startIndex, String webIdType, final ApiCallback<ItemsElement> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementGetElementsQueryValidateBeforeCall(associations, databaseWebId, maxCount, query, queryDate, selectedFields, startIndex, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsElement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementGetEventFrames
     * @param webId The ID of the element whose related event frames are sought. (required)
     * @param canBeAcknowledged Specify the returned event frames&#39; canBeAcknowledged property. The default is no canBeAcknowledged filter. (optional)
     * @param categoryName Specify that returned event frames must have this category. The default is no category filter. (optional)
     * @param endTime The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame&#39;s startTime or endTime. The default is &#39;*&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param isAcknowledged Specify the returned event frames&#39; isAcknowledged property. The default no isAcknowledged filter. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding event frames. The default is no filter. (optional)
     * @param searchMode Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the &#39;Backward*&#39; or &#39;Forward*&#39; values, none of endTime, sortField, or sortOrder may be specified. The default is &#39;Overlapped&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param severity Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param startTime The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame&#39;s startTime or endTime. The default is &#39;*-8h&#39;. (optional)
     * @param templateName Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of event frames matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetEventFramesCall(String webId, Boolean canBeAcknowledged, String categoryName, String endTime, Boolean isAcknowledged, Integer maxCount, String nameFilter, String searchMode, String selectedFields, List<String> severity, String sortField, String sortOrder, Integer startIndex, String startTime, String templateName, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}/eventframes"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (canBeAcknowledged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("canBeAcknowledged", canBeAcknowledged));
        }

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryName", categoryName));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (isAcknowledged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAcknowledged", isAcknowledged));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (searchMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchMode", searchMode));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (severity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "severity", severity));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateName", templateName));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementGetEventFramesValidateBeforeCall(String webId, Boolean canBeAcknowledged, String categoryName, String endTime, Boolean isAcknowledged, Integer maxCount, String nameFilter, String searchMode, String selectedFields, List<String> severity, String sortField, String sortOrder, Integer startIndex, String startTime, String templateName, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementGetEventFrames(Async)");
        }

        return elementGetEventFramesCall(webId, canBeAcknowledged, categoryName, endTime, isAcknowledged, maxCount, nameFilter, searchMode, selectedFields, severity, sortField, sortOrder, startIndex, startTime, templateName, webIdType, _callback);

    }

    /**
     * Retrieve event frames that reference this element based on the specified conditions. By default, returns all event frames that reference this element that have been active in the past 8 hours.
     * 
     * @param webId The ID of the element whose related event frames are sought. (required)
     * @param canBeAcknowledged Specify the returned event frames&#39; canBeAcknowledged property. The default is no canBeAcknowledged filter. (optional)
     * @param categoryName Specify that returned event frames must have this category. The default is no category filter. (optional)
     * @param endTime The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame&#39;s startTime or endTime. The default is &#39;*&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param isAcknowledged Specify the returned event frames&#39; isAcknowledged property. The default no isAcknowledged filter. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding event frames. The default is no filter. (optional)
     * @param searchMode Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the &#39;Backward*&#39; or &#39;Forward*&#39; values, none of endTime, sortField, or sortOrder may be specified. The default is &#39;Overlapped&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param severity Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param startTime The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame&#39;s startTime or endTime. The default is &#39;*-8h&#39;. (optional)
     * @param templateName Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsEventFrame
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of event frames matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsEventFrame elementGetEventFrames(String webId, Boolean canBeAcknowledged, String categoryName, String endTime, Boolean isAcknowledged, Integer maxCount, String nameFilter, String searchMode, String selectedFields, List<String> severity, String sortField, String sortOrder, Integer startIndex, String startTime, String templateName, String webIdType) throws ApiException {
        ApiResponse<ItemsEventFrame> localVarResp = elementGetEventFramesWithHttpInfo(webId, canBeAcknowledged, categoryName, endTime, isAcknowledged, maxCount, nameFilter, searchMode, selectedFields, severity, sortField, sortOrder, startIndex, startTime, templateName, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve event frames that reference this element based on the specified conditions. By default, returns all event frames that reference this element that have been active in the past 8 hours.
     * 
     * @param webId The ID of the element whose related event frames are sought. (required)
     * @param canBeAcknowledged Specify the returned event frames&#39; canBeAcknowledged property. The default is no canBeAcknowledged filter. (optional)
     * @param categoryName Specify that returned event frames must have this category. The default is no category filter. (optional)
     * @param endTime The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame&#39;s startTime or endTime. The default is &#39;*&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param isAcknowledged Specify the returned event frames&#39; isAcknowledged property. The default no isAcknowledged filter. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding event frames. The default is no filter. (optional)
     * @param searchMode Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the &#39;Backward*&#39; or &#39;Forward*&#39; values, none of endTime, sortField, or sortOrder may be specified. The default is &#39;Overlapped&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param severity Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param startTime The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame&#39;s startTime or endTime. The default is &#39;*-8h&#39;. (optional)
     * @param templateName Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsEventFrame&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of event frames matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsEventFrame> elementGetEventFramesWithHttpInfo(String webId, Boolean canBeAcknowledged, String categoryName, String endTime, Boolean isAcknowledged, Integer maxCount, String nameFilter, String searchMode, String selectedFields, List<String> severity, String sortField, String sortOrder, Integer startIndex, String startTime, String templateName, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementGetEventFramesValidateBeforeCall(webId, canBeAcknowledged, categoryName, endTime, isAcknowledged, maxCount, nameFilter, searchMode, selectedFields, severity, sortField, sortOrder, startIndex, startTime, templateName, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsEventFrame>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve event frames that reference this element based on the specified conditions. By default, returns all event frames that reference this element that have been active in the past 8 hours. (asynchronously)
     * 
     * @param webId The ID of the element whose related event frames are sought. (required)
     * @param canBeAcknowledged Specify the returned event frames&#39; canBeAcknowledged property. The default is no canBeAcknowledged filter. (optional)
     * @param categoryName Specify that returned event frames must have this category. The default is no category filter. (optional)
     * @param endTime The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame&#39;s startTime or endTime. The default is &#39;*&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param isAcknowledged Specify the returned event frames&#39; isAcknowledged property. The default no isAcknowledged filter. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding event frames. The default is no filter. (optional)
     * @param searchMode Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the &#39;Backward*&#39; or &#39;Forward*&#39; values, none of endTime, sortField, or sortOrder may be specified. The default is &#39;Overlapped&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param severity Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39; if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param startTime The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame&#39;s startTime or endTime. The default is &#39;*-8h&#39;. (optional)
     * @param templateName Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of event frames matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetEventFramesAsync(String webId, Boolean canBeAcknowledged, String categoryName, String endTime, Boolean isAcknowledged, Integer maxCount, String nameFilter, String searchMode, String selectedFields, List<String> severity, String sortField, String sortOrder, Integer startIndex, String startTime, String templateName, String webIdType, final ApiCallback<ItemsEventFrame> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementGetEventFramesValidateBeforeCall(webId, canBeAcknowledged, categoryName, endTime, isAcknowledged, maxCount, nameFilter, searchMode, selectedFields, severity, sortField, sortOrder, startIndex, startTime, templateName, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsEventFrame>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementGetMultiple
     * @param asParallel Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is &#39;false&#39;. (optional)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param includeMode The include mode for the return list. The default is &#39;All&#39;. (optional)
     * @param path The path of an element. Multiple elements may be specified with multiple instances of the parameter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webId The ID of an element. Multiple elements may be specified with multiple instances of the parameter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested elements </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Some or all items contain exceptions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetMultipleCall(Boolean asParallel, String associations, String includeMode, List<String> path, String selectedFields, List<String> webId, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/multiple";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asParallel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asParallel", asParallel));
        }

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (includeMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeMode", includeMode));
        }

        if (path != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "path", path));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "webId", webId));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementGetMultipleValidateBeforeCall(Boolean asParallel, String associations, String includeMode, List<String> path, String selectedFields, List<String> webId, String webIdType, final ApiCallback _callback) throws ApiException {
        return elementGetMultipleCall(asParallel, associations, includeMode, path, selectedFields, webId, webIdType, _callback);

    }

    /**
     * Retrieve multiple elements by web id or path.
     * 
     * @param asParallel Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is &#39;false&#39;. (optional)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param includeMode The include mode for the return list. The default is &#39;All&#39;. (optional)
     * @param path The path of an element. Multiple elements may be specified with multiple instances of the parameter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webId The ID of an element. Multiple elements may be specified with multiple instances of the parameter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsItemElement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested elements </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Some or all items contain exceptions. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsItemElement elementGetMultiple(Boolean asParallel, String associations, String includeMode, List<String> path, String selectedFields, List<String> webId, String webIdType) throws ApiException {
        ApiResponse<ItemsItemElement> localVarResp = elementGetMultipleWithHttpInfo(asParallel, associations, includeMode, path, selectedFields, webId, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve multiple elements by web id or path.
     * 
     * @param asParallel Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is &#39;false&#39;. (optional)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param includeMode The include mode for the return list. The default is &#39;All&#39;. (optional)
     * @param path The path of an element. Multiple elements may be specified with multiple instances of the parameter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webId The ID of an element. Multiple elements may be specified with multiple instances of the parameter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsItemElement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested elements </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Some or all items contain exceptions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsItemElement> elementGetMultipleWithHttpInfo(Boolean asParallel, String associations, String includeMode, List<String> path, String selectedFields, List<String> webId, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementGetMultipleValidateBeforeCall(asParallel, associations, includeMode, path, selectedFields, webId, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsItemElement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve multiple elements by web id or path. (asynchronously)
     * 
     * @param asParallel Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is &#39;false&#39;. (optional)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param includeMode The include mode for the return list. The default is &#39;All&#39;. (optional)
     * @param path The path of an element. Multiple elements may be specified with multiple instances of the parameter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webId The ID of an element. Multiple elements may be specified with multiple instances of the parameter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested elements </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Some or all items contain exceptions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetMultipleAsync(Boolean asParallel, String associations, String includeMode, List<String> path, String selectedFields, List<String> webId, String webIdType, final ApiCallback<ItemsItemElement> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementGetMultipleValidateBeforeCall(asParallel, associations, includeMode, path, selectedFields, webId, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsItemElement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementGetNotificationRules
     * @param webId The ID of the resource to use as the root of the search. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification rules. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetNotificationRulesCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}/notificationrules"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementGetNotificationRulesValidateBeforeCall(String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementGetNotificationRules(Async)");
        }

        return elementGetNotificationRulesCall(webId, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve notification rules for an element
     * 
     * @param webId The ID of the resource to use as the root of the search. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsNotificationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification rules. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsNotificationRule elementGetNotificationRules(String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsNotificationRule> localVarResp = elementGetNotificationRulesWithHttpInfo(webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve notification rules for an element
     * 
     * @param webId The ID of the resource to use as the root of the search. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsNotificationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification rules. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsNotificationRule> elementGetNotificationRulesWithHttpInfo(String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementGetNotificationRulesValidateBeforeCall(webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsNotificationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve notification rules for an element (asynchronously)
     * 
     * @param webId The ID of the resource to use as the root of the search. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of notification rules. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetNotificationRulesAsync(String webId, String selectedFields, String webIdType, final ApiCallback<ItemsNotificationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementGetNotificationRulesValidateBeforeCall(webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsNotificationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementGetPaths
     * @param webId The ID of the element. (required)
     * @param relativePath The full path in ShortName format to the parent object that the returned paths should be relative. For example, \&quot;\\\\Server1\\Database2\&quot; would return all the paths to the element relative to the database. A path of \&quot;\\\\Server1\\Database2\\RootElement\&quot; would return all paths to the element relative to \&quot;RootElement\&quot;. If null, then all the full paths to the element will be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the full or relative paths to this element. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetPathsCall(String webId, String relativePath, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}/paths"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (relativePath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relativePath", relativePath));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementGetPathsValidateBeforeCall(String webId, String relativePath, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementGetPaths(Async)");
        }

        return elementGetPathsCall(webId, relativePath, _callback);

    }

    /**
     * Get a list of the full or relative paths to this element.
     * This method will return paths with the primary path at the first index. If there is no primary path, then null will be at the first index. If relative path is specified but does not exist, null will be returned at the first index.
     * @param webId The ID of the element. (required)
     * @param relativePath The full path in ShortName format to the parent object that the returned paths should be relative. For example, \&quot;\\\\Server1\\Database2\&quot; would return all the paths to the element relative to the database. A path of \&quot;\\\\Server1\\Database2\\RootElement\&quot; would return all paths to the element relative to \&quot;RootElement\&quot;. If null, then all the full paths to the element will be returned. (optional)
     * @return ItemsString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the full or relative paths to this element. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsString elementGetPaths(String webId, String relativePath) throws ApiException {
        ApiResponse<ItemsString> localVarResp = elementGetPathsWithHttpInfo(webId, relativePath);
        return localVarResp.getData();
    }

    /**
     * Get a list of the full or relative paths to this element.
     * This method will return paths with the primary path at the first index. If there is no primary path, then null will be at the first index. If relative path is specified but does not exist, null will be returned at the first index.
     * @param webId The ID of the element. (required)
     * @param relativePath The full path in ShortName format to the parent object that the returned paths should be relative. For example, \&quot;\\\\Server1\\Database2\&quot; would return all the paths to the element relative to the database. A path of \&quot;\\\\Server1\\Database2\\RootElement\&quot; would return all paths to the element relative to \&quot;RootElement\&quot;. If null, then all the full paths to the element will be returned. (optional)
     * @return ApiResponse&lt;ItemsString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the full or relative paths to this element. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsString> elementGetPathsWithHttpInfo(String webId, String relativePath) throws ApiException {
        okhttp3.Call localVarCall = elementGetPathsValidateBeforeCall(webId, relativePath, null);
        Type localVarReturnType = new TypeToken<ItemsString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of the full or relative paths to this element. (asynchronously)
     * This method will return paths with the primary path at the first index. If there is no primary path, then null will be at the first index. If relative path is specified but does not exist, null will be returned at the first index.
     * @param webId The ID of the element. (required)
     * @param relativePath The full path in ShortName format to the parent object that the returned paths should be relative. For example, \&quot;\\\\Server1\\Database2\&quot; would return all the paths to the element relative to the database. A path of \&quot;\\\\Server1\\Database2\\RootElement\&quot; would return all paths to the element relative to \&quot;RootElement\&quot;. If null, then all the full paths to the element will be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the full or relative paths to this element. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetPathsAsync(String webId, String relativePath, final ApiCallback<ItemsString> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementGetPathsValidateBeforeCall(webId, relativePath, _callback);
        Type localVarReturnType = new TypeToken<ItemsString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementGetReferencedElements
     * @param webId The ID of the resource to use as the root of the search. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param categoryName Specify that returned elements must have this category. The default is no category filter. (optional)
     * @param descriptionFilter Specify that returned elements must have this description. The default is no description filter. (optional)
     * @param elementType Specify that returned elements must have this type. The default type is &#39;Any&#39;. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding objects. The default is no filter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param templateName Specify that returned elements must have this template or a template derived from this template. The default is no template filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of referenced elements matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetReferencedElementsCall(String webId, String associations, String categoryName, String descriptionFilter, String elementType, Integer maxCount, String nameFilter, String selectedFields, String sortField, String sortOrder, Integer startIndex, String templateName, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}/referencedelements"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (associations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("associations", associations));
        }

        if (categoryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("categoryName", categoryName));
        }

        if (descriptionFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("descriptionFilter", descriptionFilter));
        }

        if (elementType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("elementType", elementType));
        }

        if (maxCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCount", maxCount));
        }

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortField", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (templateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("templateName", templateName));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementGetReferencedElementsValidateBeforeCall(String webId, String associations, String categoryName, String descriptionFilter, String elementType, Integer maxCount, String nameFilter, String selectedFields, String sortField, String sortOrder, Integer startIndex, String templateName, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementGetReferencedElements(Async)");
        }

        return elementGetReferencedElementsCall(webId, associations, categoryName, descriptionFilter, elementType, maxCount, nameFilter, selectedFields, sortField, sortOrder, startIndex, templateName, webIdType, _callback);

    }

    /**
     * Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements of the current resource.
     * Users can search for the referenced elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
     * @param webId The ID of the resource to use as the root of the search. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param categoryName Specify that returned elements must have this category. The default is no category filter. (optional)
     * @param descriptionFilter Specify that returned elements must have this description. The default is no description filter. (optional)
     * @param elementType Specify that returned elements must have this type. The default type is &#39;Any&#39;. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding objects. The default is no filter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param templateName Specify that returned elements must have this template or a template derived from this template. The default is no template filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsElement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of referenced elements matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsElement elementGetReferencedElements(String webId, String associations, String categoryName, String descriptionFilter, String elementType, Integer maxCount, String nameFilter, String selectedFields, String sortField, String sortOrder, Integer startIndex, String templateName, String webIdType) throws ApiException {
        ApiResponse<ItemsElement> localVarResp = elementGetReferencedElementsWithHttpInfo(webId, associations, categoryName, descriptionFilter, elementType, maxCount, nameFilter, selectedFields, sortField, sortOrder, startIndex, templateName, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements of the current resource.
     * Users can search for the referenced elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
     * @param webId The ID of the resource to use as the root of the search. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param categoryName Specify that returned elements must have this category. The default is no category filter. (optional)
     * @param descriptionFilter Specify that returned elements must have this description. The default is no description filter. (optional)
     * @param elementType Specify that returned elements must have this type. The default type is &#39;Any&#39;. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding objects. The default is no filter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param templateName Specify that returned elements must have this template or a template derived from this template. The default is no template filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsElement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of referenced elements matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsElement> elementGetReferencedElementsWithHttpInfo(String webId, String associations, String categoryName, String descriptionFilter, String elementType, Integer maxCount, String nameFilter, String selectedFields, String sortField, String sortOrder, Integer startIndex, String templateName, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementGetReferencedElementsValidateBeforeCall(webId, associations, categoryName, descriptionFilter, elementType, maxCount, nameFilter, selectedFields, sortField, sortOrder, startIndex, templateName, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsElement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements of the current resource. (asynchronously)
     * Users can search for the referenced elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
     * @param webId The ID of the resource to use as the root of the search. (required)
     * @param associations Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned. (optional)
     * @param categoryName Specify that returned elements must have this category. The default is no category filter. (optional)
     * @param descriptionFilter Specify that returned elements must have this description. The default is no description filter. (optional)
     * @param elementType Specify that returned elements must have this type. The default type is &#39;Any&#39;. (optional)
     * @param maxCount The maximum number of objects to be returned per call (page size). The default is 1000. (optional)
     * @param nameFilter The name query string used for finding objects. The default is no filter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param sortField The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)
     * @param sortOrder The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)
     * @param startIndex The starting index (zero based) of the items to be returned. The default is 0. (optional)
     * @param templateName Specify that returned elements must have this template or a template derived from this template. The default is no template filter. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of referenced elements matching the specified conditions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetReferencedElementsAsync(String webId, String associations, String categoryName, String descriptionFilter, String elementType, Integer maxCount, String nameFilter, String selectedFields, String sortField, String sortOrder, Integer startIndex, String templateName, String webIdType, final ApiCallback<ItemsElement> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementGetReferencedElementsValidateBeforeCall(webId, associations, categoryName, descriptionFilter, elementType, maxCount, nameFilter, selectedFields, sortField, sortOrder, startIndex, templateName, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsElement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementGetSecurity
     * @param webId The ID of the element for the security to be checked. (required)
     * @param userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param forceRefresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security rights. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported when using Anonymous authentication method. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetSecurityCall(String webId, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}/security"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userIdentity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "userIdentity", userIdentity));
        }

        if (forceRefresh != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceRefresh", forceRefresh));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementGetSecurityValidateBeforeCall(String webId, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementGetSecurity(Async)");
        }

        // verify the required parameter 'userIdentity' is set
        if (userIdentity == null) {
            throw new ApiException("Missing the required parameter 'userIdentity' when calling elementGetSecurity(Async)");
        }

        return elementGetSecurityCall(webId, userIdentity, forceRefresh, selectedFields, webIdType, _callback);

    }

    /**
     * Get the security information of the specified security item associated with the element for a specified user.
     * 
     * @param webId The ID of the element for the security to be checked. (required)
     * @param userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param forceRefresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsSecurityRights
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security rights. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported when using Anonymous authentication method. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsSecurityRights elementGetSecurity(String webId, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsSecurityRights> localVarResp = elementGetSecurityWithHttpInfo(webId, userIdentity, forceRefresh, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Get the security information of the specified security item associated with the element for a specified user.
     * 
     * @param webId The ID of the element for the security to be checked. (required)
     * @param userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param forceRefresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsSecurityRights&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security rights. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported when using Anonymous authentication method. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsSecurityRights> elementGetSecurityWithHttpInfo(String webId, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementGetSecurityValidateBeforeCall(webId, userIdentity, forceRefresh, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsSecurityRights>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the security information of the specified security item associated with the element for a specified user. (asynchronously)
     * 
     * @param webId The ID of the element for the security to be checked. (required)
     * @param userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user&#39;s security rights will be returned. (required)
     * @param forceRefresh Indicates if the security cache should be refreshed before getting security information. The default is &#39;false&#39;. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Security rights. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An invalid or local account is specified as the user identity. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access denied for the specified user identity. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Unsupported when using Anonymous authentication method. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Failed to retrieve the specified user identity. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetSecurityAsync(String webId, List<String> userIdentity, Boolean forceRefresh, String selectedFields, String webIdType, final ApiCallback<ItemsSecurityRights> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementGetSecurityValidateBeforeCall(webId, userIdentity, forceRefresh, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsSecurityRights>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementGetSecurityEntries
     * @param webId The ID of the element. (required)
     * @param nameFilter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security entries matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetSecurityEntriesCall(String webId, String nameFilter, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}/securityentries"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameFilter", nameFilter));
        }

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementGetSecurityEntriesValidateBeforeCall(String webId, String nameFilter, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementGetSecurityEntries(Async)");
        }

        return elementGetSecurityEntriesCall(webId, nameFilter, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve the security entries associated with the element based on the specified criteria. By default, all security entries for this element are returned.
     * 
     * @param webId The ID of the element. (required)
     * @param nameFilter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ItemsSecurityEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security entries matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public ItemsSecurityEntry elementGetSecurityEntries(String webId, String nameFilter, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<ItemsSecurityEntry> localVarResp = elementGetSecurityEntriesWithHttpInfo(webId, nameFilter, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve the security entries associated with the element based on the specified criteria. By default, all security entries for this element are returned.
     * 
     * @param webId The ID of the element. (required)
     * @param nameFilter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;ItemsSecurityEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security entries matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ItemsSecurityEntry> elementGetSecurityEntriesWithHttpInfo(String webId, String nameFilter, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementGetSecurityEntriesValidateBeforeCall(webId, nameFilter, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<ItemsSecurityEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the security entries associated with the element based on the specified criteria. By default, all security entries for this element are returned. (asynchronously)
     * 
     * @param webId The ID of the element. (required)
     * @param nameFilter The name query string used for filtering security entries. The default is no filter. (optional)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of security entries matching the specified condition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetSecurityEntriesAsync(String webId, String nameFilter, String selectedFields, String webIdType, final ApiCallback<ItemsSecurityEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementGetSecurityEntriesValidateBeforeCall(webId, nameFilter, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<ItemsSecurityEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementGetSecurityEntryByName
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the element. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The security entry matching the specified condition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The security entry with the specified name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetSecurityEntryByNameCall(String name, String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}/securityentries/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selectedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selectedFields", selectedFields));
        }

        if (webIdType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("webIdType", webIdType));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/html",
            "application/x-ms-application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementGetSecurityEntryByNameValidateBeforeCall(String name, String webId, String selectedFields, String webIdType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling elementGetSecurityEntryByName(Async)");
        }

        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementGetSecurityEntryByName(Async)");
        }

        return elementGetSecurityEntryByNameCall(name, webId, selectedFields, webIdType, _callback);

    }

    /**
     * Retrieve the security entry associated with the element with the specified name.
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the element. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return SecurityEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The security entry matching the specified condition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The security entry with the specified name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public SecurityEntry elementGetSecurityEntryByName(String name, String webId, String selectedFields, String webIdType) throws ApiException {
        ApiResponse<SecurityEntry> localVarResp = elementGetSecurityEntryByNameWithHttpInfo(name, webId, selectedFields, webIdType);
        return localVarResp.getData();
    }

    /**
     * Retrieve the security entry associated with the element with the specified name.
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the element. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @return ApiResponse&lt;SecurityEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The security entry matching the specified condition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The security entry with the specified name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SecurityEntry> elementGetSecurityEntryByNameWithHttpInfo(String name, String webId, String selectedFields, String webIdType) throws ApiException {
        okhttp3.Call localVarCall = elementGetSecurityEntryByNameValidateBeforeCall(name, webId, selectedFields, webIdType, null);
        Type localVarReturnType = new TypeToken<SecurityEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the security entry associated with the element with the specified name. (asynchronously)
     * 
     * @param name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username. (required)
     * @param webId The ID of the element. (required)
     * @param selectedFields List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. (optional)
     * @param webIdType Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \&quot;WebIDType\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The security entry matching the specified condition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The security entry with the specified name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementGetSecurityEntryByNameAsync(String name, String webId, String selectedFields, String webIdType, final ApiCallback<SecurityEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementGetSecurityEntryByNameValidateBeforeCall(name, webId, selectedFields, webIdType, _callback);
        Type localVarReturnType = new TypeToken<SecurityEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementRemoveReferencedElement
     * @param webId The ID of the element which the referenced element will be removed from. (required)
     * @param referencedElementWebId The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The referenced element was successfully removed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementRemoveReferencedElementCall(String webId, List<String> referencedElementWebId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/elements/{webId}/referencedelements"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referencedElementWebId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "referencedElementWebId", referencedElementWebId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementRemoveReferencedElementValidateBeforeCall(String webId, List<String> referencedElementWebId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementRemoveReferencedElement(Async)");
        }

        // verify the required parameter 'referencedElementWebId' is set
        if (referencedElementWebId == null) {
            throw new ApiException("Missing the required parameter 'referencedElementWebId' when calling elementRemoveReferencedElement(Async)");
        }

        return elementRemoveReferencedElementCall(webId, referencedElementWebId, _callback);

    }

    /**
     * Remove a reference to an existing element from the child elements collection.
     * 
     * @param webId The ID of the element which the referenced element will be removed from. (required)
     * @param referencedElementWebId The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The referenced element was successfully removed. </td><td>  -  </td></tr>
     </table>
     */
    public void elementRemoveReferencedElement(String webId, List<String> referencedElementWebId) throws ApiException {
        elementRemoveReferencedElementWithHttpInfo(webId, referencedElementWebId);
    }

    /**
     * Remove a reference to an existing element from the child elements collection.
     * 
     * @param webId The ID of the element which the referenced element will be removed from. (required)
     * @param referencedElementWebId The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The referenced element was successfully removed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> elementRemoveReferencedElementWithHttpInfo(String webId, List<String> referencedElementWebId) throws ApiException {
        okhttp3.Call localVarCall = elementRemoveReferencedElementValidateBeforeCall(webId, referencedElementWebId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a reference to an existing element from the child elements collection. (asynchronously)
     * 
     * @param webId The ID of the element which the referenced element will be removed from. (required)
     * @param referencedElementWebId The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The referenced element was successfully removed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementRemoveReferencedElementAsync(String webId, List<String> referencedElementWebId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementRemoveReferencedElementValidateBeforeCall(webId, referencedElementWebId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementUpdate
     * @param webId The ID of the element. (required)
     * @param element A partial element containing the desired changes. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The element was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementUpdateCall(String webId, Element element, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = element;

        // create path and map variables
        String localVarPath = "/elements/{webId}"
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementUpdateValidateBeforeCall(String webId, Element element, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementUpdate(Async)");
        }

        // verify the required parameter 'element' is set
        if (element == null) {
            throw new ApiException("Missing the required parameter 'element' when calling elementUpdate(Async)");
        }

        return elementUpdateCall(webId, element, _callback);

    }

    /**
     * Update an element by replacing items in its definition.
     * 
     * @param webId The ID of the element. (required)
     * @param element A partial element containing the desired changes. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The element was updated. </td><td>  -  </td></tr>
     </table>
     */
    public void elementUpdate(String webId, Element element) throws ApiException {
        elementUpdateWithHttpInfo(webId, element);
    }

    /**
     * Update an element by replacing items in its definition.
     * 
     * @param webId The ID of the element. (required)
     * @param element A partial element containing the desired changes. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The element was updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> elementUpdateWithHttpInfo(String webId, Element element) throws ApiException {
        okhttp3.Call localVarCall = elementUpdateValidateBeforeCall(webId, element, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an element by replacing items in its definition. (asynchronously)
     * 
     * @param webId The ID of the element. (required)
     * @param element A partial element containing the desired changes. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The element was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementUpdateAsync(String webId, Element element, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementUpdateValidateBeforeCall(webId, element, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for elementUpdateSecurityEntry
     * @param name The name of the security entry. (required)
     * @param webId The ID of the element where the security entry will be updated. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementUpdateSecurityEntryCall(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = securityEntry;

        // create path and map variables
        String localVarPath = "/elements/{webId}/securityentries/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "webId" + "}", localVarApiClient.escapeString(webId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (applyToChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applyToChildren", applyToChildren));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call elementUpdateSecurityEntryValidateBeforeCall(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling elementUpdateSecurityEntry(Async)");
        }

        // verify the required parameter 'webId' is set
        if (webId == null) {
            throw new ApiException("Missing the required parameter 'webId' when calling elementUpdateSecurityEntry(Async)");
        }

        // verify the required parameter 'securityEntry' is set
        if (securityEntry == null) {
            throw new ApiException("Missing the required parameter 'securityEntry' when calling elementUpdateSecurityEntry(Async)");
        }

        return elementUpdateSecurityEntryCall(name, webId, securityEntry, applyToChildren, _callback);

    }

    /**
     * Update a security entry owned by the element.
     * 
     * @param name The name of the security entry. (required)
     * @param webId The ID of the element where the security entry will be updated. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was updated. </td><td>  -  </td></tr>
     </table>
     */
    public void elementUpdateSecurityEntry(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren) throws ApiException {
        elementUpdateSecurityEntryWithHttpInfo(name, webId, securityEntry, applyToChildren);
    }

    /**
     * Update a security entry owned by the element.
     * 
     * @param name The name of the security entry. (required)
     * @param webId The ID of the element where the security entry will be updated. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> elementUpdateSecurityEntryWithHttpInfo(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren) throws ApiException {
        okhttp3.Call localVarCall = elementUpdateSecurityEntryValidateBeforeCall(name, webId, securityEntry, applyToChildren, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a security entry owned by the element. (asynchronously)
     * 
     * @param name The name of the security entry. (required)
     * @param webId The ID of the element where the security entry will be updated. (required)
     * @param securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed. (required)
     * @param applyToChildren If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The security entry was updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call elementUpdateSecurityEntryAsync(String name, String webId, SecurityEntry securityEntry, Boolean applyToChildren, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = elementUpdateSecurityEntryValidateBeforeCall(name, webId, securityEntry, applyToChildren, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
