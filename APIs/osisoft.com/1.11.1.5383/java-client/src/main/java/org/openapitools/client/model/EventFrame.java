/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.client.model.EventFrameLinks;
import org.openapitools.client.model.Security;
import org.openapitools.client.model.Value;
import org.openapitools.client.model.WebException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EventFrame
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:19:51.369442-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventFrame {
  public static final String SERIALIZED_NAME_ACKNOWLEDGED_BY = "AcknowledgedBy";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGED_BY)
  private String acknowledgedBy;

  public static final String SERIALIZED_NAME_ACKNOWLEDGED_DATE = "AcknowledgedDate";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGED_DATE)
  private OffsetDateTime acknowledgedDate;

  public static final String SERIALIZED_NAME_ARE_VALUES_CAPTURED = "AreValuesCaptured";
  @SerializedName(SERIALIZED_NAME_ARE_VALUES_CAPTURED)
  private Boolean areValuesCaptured;

  public static final String SERIALIZED_NAME_CAN_BE_ACKNOWLEDGED = "CanBeAcknowledged";
  @SerializedName(SERIALIZED_NAME_CAN_BE_ACKNOWLEDGED)
  private Boolean canBeAcknowledged;

  public static final String SERIALIZED_NAME_CATEGORY_NAMES = "CategoryNames";
  @SerializedName(SERIALIZED_NAME_CATEGORY_NAMES)
  private List<String> categoryNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_EXTENDED_PROPERTIES = "ExtendedProperties";
  @SerializedName(SERIALIZED_NAME_EXTENDED_PROPERTIES)
  private Map<String, Value> extendedProperties = new HashMap<>();

  public static final String SERIALIZED_NAME_HAS_CHILDREN = "HasChildren";
  @SerializedName(SERIALIZED_NAME_HAS_CHILDREN)
  private Boolean hasChildren;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IS_ACKNOWLEDGED = "IsAcknowledged";
  @SerializedName(SERIALIZED_NAME_IS_ACKNOWLEDGED)
  private Boolean isAcknowledged;

  public static final String SERIALIZED_NAME_IS_ANNOTATED = "IsAnnotated";
  @SerializedName(SERIALIZED_NAME_IS_ANNOTATED)
  private Boolean isAnnotated;

  public static final String SERIALIZED_NAME_IS_LOCKED = "IsLocked";
  @SerializedName(SERIALIZED_NAME_IS_LOCKED)
  private Boolean isLocked;

  public static final String SERIALIZED_NAME_LINKS = "Links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private EventFrameLinks links;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_REF_ELEMENT_WEB_IDS = "RefElementWebIds";
  @SerializedName(SERIALIZED_NAME_REF_ELEMENT_WEB_IDS)
  private List<String> refElementWebIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURITY = "Security";
  @SerializedName(SERIALIZED_NAME_SECURITY)
  private Security security;

  public static final String SERIALIZED_NAME_SEVERITY = "Severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private String severity;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TEMPLATE_NAME = "TemplateName";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_NAME)
  private String templateName;

  public static final String SERIALIZED_NAME_WEB_EXCEPTION = "WebException";
  @SerializedName(SERIALIZED_NAME_WEB_EXCEPTION)
  private WebException webException;

  public static final String SERIALIZED_NAME_WEB_ID = "WebId";
  @SerializedName(SERIALIZED_NAME_WEB_ID)
  private String webId;

  public EventFrame() {
  }

  public EventFrame acknowledgedBy(String acknowledgedBy) {
    this.acknowledgedBy = acknowledgedBy;
    return this;
  }

  /**
   * Get acknowledgedBy
   * @return acknowledgedBy
   */
  @javax.annotation.Nullable
  public String getAcknowledgedBy() {
    return acknowledgedBy;
  }

  public void setAcknowledgedBy(String acknowledgedBy) {
    this.acknowledgedBy = acknowledgedBy;
  }


  public EventFrame acknowledgedDate(OffsetDateTime acknowledgedDate) {
    this.acknowledgedDate = acknowledgedDate;
    return this;
  }

  /**
   * Get acknowledgedDate
   * @return acknowledgedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAcknowledgedDate() {
    return acknowledgedDate;
  }

  public void setAcknowledgedDate(OffsetDateTime acknowledgedDate) {
    this.acknowledgedDate = acknowledgedDate;
  }


  public EventFrame areValuesCaptured(Boolean areValuesCaptured) {
    this.areValuesCaptured = areValuesCaptured;
    return this;
  }

  /**
   * Get areValuesCaptured
   * @return areValuesCaptured
   */
  @javax.annotation.Nullable
  public Boolean getAreValuesCaptured() {
    return areValuesCaptured;
  }

  public void setAreValuesCaptured(Boolean areValuesCaptured) {
    this.areValuesCaptured = areValuesCaptured;
  }


  public EventFrame canBeAcknowledged(Boolean canBeAcknowledged) {
    this.canBeAcknowledged = canBeAcknowledged;
    return this;
  }

  /**
   * Get canBeAcknowledged
   * @return canBeAcknowledged
   */
  @javax.annotation.Nullable
  public Boolean getCanBeAcknowledged() {
    return canBeAcknowledged;
  }

  public void setCanBeAcknowledged(Boolean canBeAcknowledged) {
    this.canBeAcknowledged = canBeAcknowledged;
  }


  public EventFrame categoryNames(List<String> categoryNames) {
    this.categoryNames = categoryNames;
    return this;
  }

  public EventFrame addCategoryNamesItem(String categoryNamesItem) {
    if (this.categoryNames == null) {
      this.categoryNames = new ArrayList<>();
    }
    this.categoryNames.add(categoryNamesItem);
    return this;
  }

  /**
   * Get categoryNames
   * @return categoryNames
   */
  @javax.annotation.Nullable
  public List<String> getCategoryNames() {
    return categoryNames;
  }

  public void setCategoryNames(List<String> categoryNames) {
    this.categoryNames = categoryNames;
  }


  public EventFrame description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EventFrame endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public EventFrame extendedProperties(Map<String, Value> extendedProperties) {
    this.extendedProperties = extendedProperties;
    return this;
  }

  public EventFrame putExtendedPropertiesItem(String key, Value extendedPropertiesItem) {
    if (this.extendedProperties == null) {
      this.extendedProperties = new HashMap<>();
    }
    this.extendedProperties.put(key, extendedPropertiesItem);
    return this;
  }

  /**
   * Get extendedProperties
   * @return extendedProperties
   */
  @javax.annotation.Nullable
  public Map<String, Value> getExtendedProperties() {
    return extendedProperties;
  }

  public void setExtendedProperties(Map<String, Value> extendedProperties) {
    this.extendedProperties = extendedProperties;
  }


  public EventFrame hasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
    return this;
  }

  /**
   * Get hasChildren
   * @return hasChildren
   */
  @javax.annotation.Nullable
  public Boolean getHasChildren() {
    return hasChildren;
  }

  public void setHasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
  }


  public EventFrame id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public EventFrame isAcknowledged(Boolean isAcknowledged) {
    this.isAcknowledged = isAcknowledged;
    return this;
  }

  /**
   * Get isAcknowledged
   * @return isAcknowledged
   */
  @javax.annotation.Nullable
  public Boolean getIsAcknowledged() {
    return isAcknowledged;
  }

  public void setIsAcknowledged(Boolean isAcknowledged) {
    this.isAcknowledged = isAcknowledged;
  }


  public EventFrame isAnnotated(Boolean isAnnotated) {
    this.isAnnotated = isAnnotated;
    return this;
  }

  /**
   * Get isAnnotated
   * @return isAnnotated
   */
  @javax.annotation.Nullable
  public Boolean getIsAnnotated() {
    return isAnnotated;
  }

  public void setIsAnnotated(Boolean isAnnotated) {
    this.isAnnotated = isAnnotated;
  }


  public EventFrame isLocked(Boolean isLocked) {
    this.isLocked = isLocked;
    return this;
  }

  /**
   * Get isLocked
   * @return isLocked
   */
  @javax.annotation.Nullable
  public Boolean getIsLocked() {
    return isLocked;
  }

  public void setIsLocked(Boolean isLocked) {
    this.isLocked = isLocked;
  }


  public EventFrame links(EventFrameLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public EventFrameLinks getLinks() {
    return links;
  }

  public void setLinks(EventFrameLinks links) {
    this.links = links;
  }


  public EventFrame name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventFrame path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public EventFrame refElementWebIds(List<String> refElementWebIds) {
    this.refElementWebIds = refElementWebIds;
    return this;
  }

  public EventFrame addRefElementWebIdsItem(String refElementWebIdsItem) {
    if (this.refElementWebIds == null) {
      this.refElementWebIds = new ArrayList<>();
    }
    this.refElementWebIds.add(refElementWebIdsItem);
    return this;
  }

  /**
   * Get refElementWebIds
   * @return refElementWebIds
   */
  @javax.annotation.Nullable
  public List<String> getRefElementWebIds() {
    return refElementWebIds;
  }

  public void setRefElementWebIds(List<String> refElementWebIds) {
    this.refElementWebIds = refElementWebIds;
  }


  public EventFrame security(Security security) {
    this.security = security;
    return this;
  }

  /**
   * Get security
   * @return security
   */
  @javax.annotation.Nullable
  public Security getSecurity() {
    return security;
  }

  public void setSecurity(Security security) {
    this.security = security;
  }


  public EventFrame severity(String severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public String getSeverity() {
    return severity;
  }

  public void setSeverity(String severity) {
    this.severity = severity;
  }


  public EventFrame startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public EventFrame templateName(String templateName) {
    this.templateName = templateName;
    return this;
  }

  /**
   * Get templateName
   * @return templateName
   */
  @javax.annotation.Nullable
  public String getTemplateName() {
    return templateName;
  }

  public void setTemplateName(String templateName) {
    this.templateName = templateName;
  }


  public EventFrame webException(WebException webException) {
    this.webException = webException;
    return this;
  }

  /**
   * Get webException
   * @return webException
   */
  @javax.annotation.Nullable
  public WebException getWebException() {
    return webException;
  }

  public void setWebException(WebException webException) {
    this.webException = webException;
  }


  public EventFrame webId(String webId) {
    this.webId = webId;
    return this;
  }

  /**
   * Get webId
   * @return webId
   */
  @javax.annotation.Nullable
  public String getWebId() {
    return webId;
  }

  public void setWebId(String webId) {
    this.webId = webId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventFrame eventFrame = (EventFrame) o;
    return Objects.equals(this.acknowledgedBy, eventFrame.acknowledgedBy) &&
        Objects.equals(this.acknowledgedDate, eventFrame.acknowledgedDate) &&
        Objects.equals(this.areValuesCaptured, eventFrame.areValuesCaptured) &&
        Objects.equals(this.canBeAcknowledged, eventFrame.canBeAcknowledged) &&
        Objects.equals(this.categoryNames, eventFrame.categoryNames) &&
        Objects.equals(this.description, eventFrame.description) &&
        Objects.equals(this.endTime, eventFrame.endTime) &&
        Objects.equals(this.extendedProperties, eventFrame.extendedProperties) &&
        Objects.equals(this.hasChildren, eventFrame.hasChildren) &&
        Objects.equals(this.id, eventFrame.id) &&
        Objects.equals(this.isAcknowledged, eventFrame.isAcknowledged) &&
        Objects.equals(this.isAnnotated, eventFrame.isAnnotated) &&
        Objects.equals(this.isLocked, eventFrame.isLocked) &&
        Objects.equals(this.links, eventFrame.links) &&
        Objects.equals(this.name, eventFrame.name) &&
        Objects.equals(this.path, eventFrame.path) &&
        Objects.equals(this.refElementWebIds, eventFrame.refElementWebIds) &&
        Objects.equals(this.security, eventFrame.security) &&
        Objects.equals(this.severity, eventFrame.severity) &&
        Objects.equals(this.startTime, eventFrame.startTime) &&
        Objects.equals(this.templateName, eventFrame.templateName) &&
        Objects.equals(this.webException, eventFrame.webException) &&
        Objects.equals(this.webId, eventFrame.webId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acknowledgedBy, acknowledgedDate, areValuesCaptured, canBeAcknowledged, categoryNames, description, endTime, extendedProperties, hasChildren, id, isAcknowledged, isAnnotated, isLocked, links, name, path, refElementWebIds, security, severity, startTime, templateName, webException, webId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventFrame {\n");
    sb.append("    acknowledgedBy: ").append(toIndentedString(acknowledgedBy)).append("\n");
    sb.append("    acknowledgedDate: ").append(toIndentedString(acknowledgedDate)).append("\n");
    sb.append("    areValuesCaptured: ").append(toIndentedString(areValuesCaptured)).append("\n");
    sb.append("    canBeAcknowledged: ").append(toIndentedString(canBeAcknowledged)).append("\n");
    sb.append("    categoryNames: ").append(toIndentedString(categoryNames)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    extendedProperties: ").append(toIndentedString(extendedProperties)).append("\n");
    sb.append("    hasChildren: ").append(toIndentedString(hasChildren)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isAcknowledged: ").append(toIndentedString(isAcknowledged)).append("\n");
    sb.append("    isAnnotated: ").append(toIndentedString(isAnnotated)).append("\n");
    sb.append("    isLocked: ").append(toIndentedString(isLocked)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    refElementWebIds: ").append(toIndentedString(refElementWebIds)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("    webException: ").append(toIndentedString(webException)).append("\n");
    sb.append("    webId: ").append(toIndentedString(webId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AcknowledgedBy");
    openapiFields.add("AcknowledgedDate");
    openapiFields.add("AreValuesCaptured");
    openapiFields.add("CanBeAcknowledged");
    openapiFields.add("CategoryNames");
    openapiFields.add("Description");
    openapiFields.add("EndTime");
    openapiFields.add("ExtendedProperties");
    openapiFields.add("HasChildren");
    openapiFields.add("Id");
    openapiFields.add("IsAcknowledged");
    openapiFields.add("IsAnnotated");
    openapiFields.add("IsLocked");
    openapiFields.add("Links");
    openapiFields.add("Name");
    openapiFields.add("Path");
    openapiFields.add("RefElementWebIds");
    openapiFields.add("Security");
    openapiFields.add("Severity");
    openapiFields.add("StartTime");
    openapiFields.add("TemplateName");
    openapiFields.add("WebException");
    openapiFields.add("WebId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventFrame
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventFrame.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventFrame is not found in the empty JSON string", EventFrame.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventFrame.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventFrame` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AcknowledgedBy") != null && !jsonObj.get("AcknowledgedBy").isJsonNull()) && !jsonObj.get("AcknowledgedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AcknowledgedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AcknowledgedBy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CategoryNames") != null && !jsonObj.get("CategoryNames").isJsonNull() && !jsonObj.get("CategoryNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoryNames` to be an array in the JSON string but got `%s`", jsonObj.get("CategoryNames").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      // validate the optional field `Links`
      if (jsonObj.get("Links") != null && !jsonObj.get("Links").isJsonNull()) {
        EventFrameLinks.validateJsonElement(jsonObj.get("Links"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("RefElementWebIds") != null && !jsonObj.get("RefElementWebIds").isJsonNull() && !jsonObj.get("RefElementWebIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `RefElementWebIds` to be an array in the JSON string but got `%s`", jsonObj.get("RefElementWebIds").toString()));
      }
      // validate the optional field `Security`
      if (jsonObj.get("Security") != null && !jsonObj.get("Security").isJsonNull()) {
        Security.validateJsonElement(jsonObj.get("Security"));
      }
      if ((jsonObj.get("Severity") != null && !jsonObj.get("Severity").isJsonNull()) && !jsonObj.get("Severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Severity").toString()));
      }
      if ((jsonObj.get("TemplateName") != null && !jsonObj.get("TemplateName").isJsonNull()) && !jsonObj.get("TemplateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TemplateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TemplateName").toString()));
      }
      // validate the optional field `WebException`
      if (jsonObj.get("WebException") != null && !jsonObj.get("WebException").isJsonNull()) {
        WebException.validateJsonElement(jsonObj.get("WebException"));
      }
      if ((jsonObj.get("WebId") != null && !jsonObj.get("WebId").isJsonNull()) && !jsonObj.get("WebId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WebId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WebId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventFrame.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventFrame' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventFrame> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventFrame.class));

       return (TypeAdapter<T>) new TypeAdapter<EventFrame>() {
           @Override
           public void write(JsonWriter out, EventFrame value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventFrame read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventFrame given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventFrame
   * @throws IOException if the JSON string is invalid with respect to EventFrame
   */
  public static EventFrame fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventFrame.class);
  }

  /**
   * Convert an instance of EventFrame to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

