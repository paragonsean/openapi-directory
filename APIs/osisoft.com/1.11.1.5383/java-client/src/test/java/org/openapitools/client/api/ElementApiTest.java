/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Analysis;
import org.openapitools.client.model.Attribute;
import org.openapitools.client.model.Element;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsAnalysis;
import org.openapitools.client.model.ItemsAttribute;
import org.openapitools.client.model.ItemsElement;
import org.openapitools.client.model.ItemsElementCategory;
import org.openapitools.client.model.ItemsEventFrame;
import org.openapitools.client.model.ItemsItemElement;
import org.openapitools.client.model.ItemsNotificationRule;
import org.openapitools.client.model.ItemsSecurityEntry;
import org.openapitools.client.model.ItemsSecurityRights;
import org.openapitools.client.model.ItemsString;
import org.openapitools.client.model.NotificationRule;
import org.openapitools.client.model.SearchByAttribute;
import org.openapitools.client.model.SecurityEntry;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ElementApi
 */
@Disabled
public class ElementApiTest {

    private final ElementApi api = new ElementApi();

    /**
     * Add a reference to an existing element to the child elements collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementAddReferencedElementTest() throws ApiException {
        String webId = null;
        List<String> referencedElementWebId = null;
        String referenceType = null;
        api.elementAddReferencedElement(webId, referencedElementWebId, referenceType);
        // TODO: test validations
    }

    /**
     * Create an Analysis.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementCreateAnalysisTest() throws ApiException {
        String webId = null;
        Analysis analysis = null;
        String webIdType = null;
        api.elementCreateAnalysis(webId, analysis, webIdType);
        // TODO: test validations
    }

    /**
     * Create a new attribute of the specified element.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementCreateAttributeTest() throws ApiException {
        String webId = null;
        Attribute attribute = null;
        String webIdType = null;
        api.elementCreateAttribute(webId, attribute, webIdType);
        // TODO: test validations
    }

    /**
     * Executes the create configuration function of the data references found within the attributes of the element, and optionally, its children.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementCreateConfigTest() throws ApiException {
        String webId = null;
        Boolean includeChildElements = null;
        api.elementCreateConfig(webId, includeChildElements);
        // TODO: test validations
    }

    /**
     * Create a child element.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementCreateElementTest() throws ApiException {
        String webId = null;
        Element element = null;
        String webIdType = null;
        api.elementCreateElement(webId, element, webIdType);
        // TODO: test validations
    }

    /**
     * Create a notification rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementCreateNotificationRuleTest() throws ApiException {
        String webId = null;
        NotificationRule notificationRule = null;
        String webIdType = null;
        api.elementCreateNotificationRule(webId, notificationRule, webIdType);
        // TODO: test validations
    }

    /**
     * Create a link for a \&quot;Search Elements By Attribute Value\&quot; operation, whose queries are specified in the request content. The SearchRoot is specified by the Web Id of the root Element. If the SearchRoot is not specified, then the search starts at the Asset Database. ElementTemplate must be provided as the Web ID of the ElementTemplate, which are used to create the Elements. All the attributes in the queries must be defined as AttributeTemplates on the ElementTemplate. An array of attribute value queries are ANDed together to find the desired Element objects. At least one value query must be specified. There are limitations on SearchOperators.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementCreateSearchByAttributeTest() throws ApiException {
        SearchByAttribute query = null;
        String associations = null;
        Boolean noResults = null;
        String webIdType = null;
        ItemsElement response = api.elementCreateSearchByAttribute(query, associations, noResults, webIdType);
        // TODO: test validations
    }

    /**
     * Create a security entry owned by the element.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementCreateSecurityEntryTest() throws ApiException {
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        String webIdType = null;
        api.elementCreateSecurityEntry(webId, securityEntry, applyToChildren, webIdType);
        // TODO: test validations
    }

    /**
     * Delete an element.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementDeleteTest() throws ApiException {
        String webId = null;
        api.elementDelete(webId);
        // TODO: test validations
    }

    /**
     * Delete a security entry owned by the element.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementDeleteSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        Boolean applyToChildren = null;
        api.elementDeleteSecurityEntry(name, webId, applyToChildren);
        // TODO: test validations
    }

    /**
     * Execute a \&quot;Search Elements By Attribute Value\&quot; operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementExecuteSearchByAttributeTest() throws ApiException {
        String searchId = null;
        String associations = null;
        String categoryName = null;
        String descriptionFilter = null;
        Integer maxCount = null;
        String nameFilter = null;
        Boolean searchFullHierarchy = null;
        String selectedFields = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String webIdType = null;
        ItemsElement response = api.elementExecuteSearchByAttribute(searchId, associations, categoryName, descriptionFilter, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieves a list of element attributes matching the specified filters from the specified element.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementFindElementAttributesTest() throws ApiException {
        String webId = null;
        String associations = null;
        String attributeCategory = null;
        String attributeDescriptionFilter = null;
        String attributeNameFilter = null;
        String attributeType = null;
        String elementCategory = null;
        String elementDescriptionFilter = null;
        String elementNameFilter = null;
        String elementTemplate = null;
        String elementType = null;
        Integer maxCount = null;
        Boolean searchFullHierarchy = null;
        String selectedFields = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String webIdType = null;
        ItemsAttribute response = api.elementFindElementAttributes(webId, associations, attributeCategory, attributeDescriptionFilter, attributeNameFilter, attributeType, elementCategory, elementDescriptionFilter, elementNameFilter, elementTemplate, elementType, maxCount, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve an element.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementGetTest() throws ApiException {
        String webId = null;
        String associations = null;
        String selectedFields = null;
        String webIdType = null;
        Element response = api.elementGet(webId, associations, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve analyses based on the specified conditions.
     *
     * Users can search for the analyses based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the analyses that match the default search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementGetAnalysesTest() throws ApiException {
        String webId = null;
        Integer maxCount = null;
        String selectedFields = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String webIdType = null;
        ItemsAnalysis response = api.elementGetAnalyses(webId, maxCount, selectedFields, sortField, sortOrder, startIndex, webIdType);
        // TODO: test validations
    }

    /**
     * Get the attributes of the specified element.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementGetAttributesTest() throws ApiException {
        String webId = null;
        String associations = null;
        String categoryName = null;
        Integer maxCount = null;
        String nameFilter = null;
        Boolean searchFullHierarchy = null;
        String selectedFields = null;
        Boolean showExcluded = null;
        Boolean showHidden = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String templateName = null;
        List<String> trait = null;
        List<String> traitCategory = null;
        String valueType = null;
        String webIdType = null;
        ItemsAttribute response = api.elementGetAttributes(webId, associations, categoryName, maxCount, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startIndex, templateName, trait, traitCategory, valueType, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve an element by path.
     *
     * This method returns an element based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementGetByPathTest() throws ApiException {
        String path = null;
        String associations = null;
        String selectedFields = null;
        String webIdType = null;
        Element response = api.elementGetByPath(path, associations, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get an element&#39;s categories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementGetCategoriesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsElementCategory response = api.elementGetCategories(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified element.
     *
     * Users can search for the elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementGetElementsTest() throws ApiException {
        String webId = null;
        String associations = null;
        String categoryName = null;
        String descriptionFilter = null;
        String elementType = null;
        Integer maxCount = null;
        String nameFilter = null;
        Boolean searchFullHierarchy = null;
        String selectedFields = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String templateName = null;
        String webIdType = null;
        ItemsElement response = api.elementGetElements(webId, associations, categoryName, descriptionFilter, elementType, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, templateName, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve elements based on the specified conditions. By default, returns all the elements.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementGetElementsQueryTest() throws ApiException {
        String associations = null;
        String databaseWebId = null;
        Integer maxCount = null;
        String query = null;
        String queryDate = null;
        String selectedFields = null;
        Integer startIndex = null;
        String webIdType = null;
        ItemsElement response = api.elementGetElementsQuery(associations, databaseWebId, maxCount, query, queryDate, selectedFields, startIndex, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve event frames that reference this element based on the specified conditions. By default, returns all event frames that reference this element that have been active in the past 8 hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementGetEventFramesTest() throws ApiException {
        String webId = null;
        Boolean canBeAcknowledged = null;
        String categoryName = null;
        String endTime = null;
        Boolean isAcknowledged = null;
        Integer maxCount = null;
        String nameFilter = null;
        String searchMode = null;
        String selectedFields = null;
        List<String> severity = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String startTime = null;
        String templateName = null;
        String webIdType = null;
        ItemsEventFrame response = api.elementGetEventFrames(webId, canBeAcknowledged, categoryName, endTime, isAcknowledged, maxCount, nameFilter, searchMode, selectedFields, severity, sortField, sortOrder, startIndex, startTime, templateName, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve multiple elements by web id or path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementGetMultipleTest() throws ApiException {
        Boolean asParallel = null;
        String associations = null;
        String includeMode = null;
        List<String> path = null;
        String selectedFields = null;
        List<String> webId = null;
        String webIdType = null;
        ItemsItemElement response = api.elementGetMultiple(asParallel, associations, includeMode, path, selectedFields, webId, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve notification rules for an element
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementGetNotificationRulesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsNotificationRule response = api.elementGetNotificationRules(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get a list of the full or relative paths to this element.
     *
     * This method will return paths with the primary path at the first index. If there is no primary path, then null will be at the first index. If relative path is specified but does not exist, null will be returned at the first index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementGetPathsTest() throws ApiException {
        String webId = null;
        String relativePath = null;
        ItemsString response = api.elementGetPaths(webId, relativePath);
        // TODO: test validations
    }

    /**
     * Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements of the current resource.
     *
     * Users can search for the referenced elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementGetReferencedElementsTest() throws ApiException {
        String webId = null;
        String associations = null;
        String categoryName = null;
        String descriptionFilter = null;
        String elementType = null;
        Integer maxCount = null;
        String nameFilter = null;
        String selectedFields = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String templateName = null;
        String webIdType = null;
        ItemsElement response = api.elementGetReferencedElements(webId, associations, categoryName, descriptionFilter, elementType, maxCount, nameFilter, selectedFields, sortField, sortOrder, startIndex, templateName, webIdType);
        // TODO: test validations
    }

    /**
     * Get the security information of the specified security item associated with the element for a specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementGetSecurityTest() throws ApiException {
        String webId = null;
        List<String> userIdentity = null;
        Boolean forceRefresh = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityRights response = api.elementGetSecurity(webId, userIdentity, forceRefresh, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entries associated with the element based on the specified criteria. By default, all security entries for this element are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementGetSecurityEntriesTest() throws ApiException {
        String webId = null;
        String nameFilter = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityEntry response = api.elementGetSecurityEntries(webId, nameFilter, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entry associated with the element with the specified name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementGetSecurityEntryByNameTest() throws ApiException {
        String name = null;
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        SecurityEntry response = api.elementGetSecurityEntryByName(name, webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Remove a reference to an existing element from the child elements collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementRemoveReferencedElementTest() throws ApiException {
        String webId = null;
        List<String> referencedElementWebId = null;
        api.elementRemoveReferencedElement(webId, referencedElementWebId);
        // TODO: test validations
    }

    /**
     * Update an element by replacing items in its definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementUpdateTest() throws ApiException {
        String webId = null;
        Element element = null;
        api.elementUpdate(webId, element);
        // TODO: test validations
    }

    /**
     * Update a security entry owned by the element.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementUpdateSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        api.elementUpdateSecurityEntry(name, webId, securityEntry, applyToChildren);
        // TODO: test validations
    }

}
