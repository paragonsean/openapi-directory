/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnalysisCategory;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsSecurityEntry;
import org.openapitools.client.model.ItemsSecurityRights;
import org.openapitools.client.model.SecurityEntry;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnalysisCategoryApi
 */
@Disabled
public class AnalysisCategoryApiTest {

    private final AnalysisCategoryApi api = new AnalysisCategoryApi();

    /**
     * Create a security entry owned by the analysis category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisCategoryCreateSecurityEntryTest() throws ApiException {
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        String webIdType = null;
        api.analysisCategoryCreateSecurityEntry(webId, securityEntry, applyToChildren, webIdType);
        // TODO: test validations
    }

    /**
     * Delete an analysis category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisCategoryDeleteTest() throws ApiException {
        String webId = null;
        api.analysisCategoryDelete(webId);
        // TODO: test validations
    }

    /**
     * Delete a security entry owned by the analysis category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisCategoryDeleteSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        Boolean applyToChildren = null;
        api.analysisCategoryDeleteSecurityEntry(name, webId, applyToChildren);
        // TODO: test validations
    }

    /**
     * Retrieve an analysis category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisCategoryGetTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        AnalysisCategory response = api.analysisCategoryGet(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve an analysis category by path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisCategoryGetByPathTest() throws ApiException {
        String path = null;
        String selectedFields = null;
        String webIdType = null;
        AnalysisCategory response = api.analysisCategoryGetByPath(path, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get the security information of the specified security item associated with the analysis category for a specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisCategoryGetSecurityTest() throws ApiException {
        String webId = null;
        List<String> userIdentity = null;
        Boolean forceRefresh = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityRights response = api.analysisCategoryGetSecurity(webId, userIdentity, forceRefresh, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entries associated with the analysis category based on the specified criteria. By default, all security entries for this analysis category are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisCategoryGetSecurityEntriesTest() throws ApiException {
        String webId = null;
        String nameFilter = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityEntry response = api.analysisCategoryGetSecurityEntries(webId, nameFilter, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entry associated with the analysis category with the specified name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisCategoryGetSecurityEntryByNameTest() throws ApiException {
        String name = null;
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        SecurityEntry response = api.analysisCategoryGetSecurityEntryByName(name, webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Update an analysis category by replacing items in its definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisCategoryUpdateTest() throws ApiException {
        String webId = null;
        AnalysisCategory category = null;
        api.analysisCategoryUpdate(webId, category);
        // TODO: test validations
    }

    /**
     * Update a security entry owned by the analysis category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisCategoryUpdateSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        api.analysisCategoryUpdateSecurityEntry(name, webId, securityEntry, applyToChildren);
        // TODO: test validations
    }

}
