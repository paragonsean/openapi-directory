/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsSecurityEntry;
import org.openapitools.client.model.ItemsSecurityRights;
import org.openapitools.client.model.ItemsTableCategory;
import org.openapitools.client.model.SecurityEntry;
import org.openapitools.client.model.Table;
import org.openapitools.client.model.TableData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TableApi
 */
@Disabled
public class TableApiTest {

    private final TableApi api = new TableApi();

    /**
     * Create a security entry owned by the table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableCreateSecurityEntryTest() throws ApiException {
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        String webIdType = null;
        api.tableCreateSecurityEntry(webId, securityEntry, applyToChildren, webIdType);
        // TODO: test validations
    }

    /**
     * Delete a table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableDeleteTest() throws ApiException {
        String webId = null;
        api.tableDelete(webId);
        // TODO: test validations
    }

    /**
     * Delete a security entry owned by the table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableDeleteSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        Boolean applyToChildren = null;
        api.tableDeleteSecurityEntry(name, webId, applyToChildren);
        // TODO: test validations
    }

    /**
     * Retrieve a table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableGetTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        Table response = api.tableGet(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve a table by path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableGetByPathTest() throws ApiException {
        String path = null;
        String selectedFields = null;
        String webIdType = null;
        Table response = api.tableGetByPath(path, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get a table&#39;s categories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableGetCategoriesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsTableCategory response = api.tableGetCategories(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get the table&#39;s data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableGetDataTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        TableData response = api.tableGetData(webId, selectedFields);
        // TODO: test validations
    }

    /**
     * Get the security information of the specified security item associated with the table for a specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableGetSecurityTest() throws ApiException {
        String webId = null;
        List<String> userIdentity = null;
        Boolean forceRefresh = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityRights response = api.tableGetSecurity(webId, userIdentity, forceRefresh, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entries associated with the table based on the specified criteria. By default, all security entries for this table are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableGetSecurityEntriesTest() throws ApiException {
        String webId = null;
        String nameFilter = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityEntry response = api.tableGetSecurityEntries(webId, nameFilter, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entry associated with the table with the specified name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableGetSecurityEntryByNameTest() throws ApiException {
        String name = null;
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        SecurityEntry response = api.tableGetSecurityEntryByName(name, webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Update a table by replacing items in its definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableUpdateTest() throws ApiException {
        String webId = null;
        Table table = null;
        api.tableUpdate(webId, table);
        // TODO: test validations
    }

    /**
     * Update the table&#39;s data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableUpdateDataTest() throws ApiException {
        String webId = null;
        TableData data = null;
        api.tableUpdateData(webId, data);
        // TODO: test validations
    }

    /**
     * Update a security entry owned by the table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tableUpdateSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        api.tableUpdateSecurityEntry(name, webId, securityEntry, applyToChildren);
        // TODO: test validations
    }

}
