/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AttributeCategory;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsSecurityEntry;
import org.openapitools.client.model.ItemsSecurityRights;
import org.openapitools.client.model.SecurityEntry;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AttributeCategoryApi
 */
@Disabled
public class AttributeCategoryApiTest {

    private final AttributeCategoryApi api = new AttributeCategoryApi();

    /**
     * Create a security entry owned by the attribute category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeCategoryCreateSecurityEntryTest() throws ApiException {
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        String webIdType = null;
        api.attributeCategoryCreateSecurityEntry(webId, securityEntry, applyToChildren, webIdType);
        // TODO: test validations
    }

    /**
     * Delete an attribute category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeCategoryDeleteTest() throws ApiException {
        String webId = null;
        api.attributeCategoryDelete(webId);
        // TODO: test validations
    }

    /**
     * Delete a security entry owned by the attribute category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeCategoryDeleteSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        Boolean applyToChildren = null;
        api.attributeCategoryDeleteSecurityEntry(name, webId, applyToChildren);
        // TODO: test validations
    }

    /**
     * Retrieve an attribute category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeCategoryGetTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        AttributeCategory response = api.attributeCategoryGet(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve an attribute category by path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeCategoryGetByPathTest() throws ApiException {
        String path = null;
        String selectedFields = null;
        String webIdType = null;
        AttributeCategory response = api.attributeCategoryGetByPath(path, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get the security information of the specified security item associated with the attribute category for a specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeCategoryGetSecurityTest() throws ApiException {
        String webId = null;
        List<String> userIdentity = null;
        Boolean forceRefresh = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityRights response = api.attributeCategoryGetSecurity(webId, userIdentity, forceRefresh, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entries associated with the attribute category based on the specified criteria. By default, all security entries for this attribute category are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeCategoryGetSecurityEntriesTest() throws ApiException {
        String webId = null;
        String nameFilter = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityEntry response = api.attributeCategoryGetSecurityEntries(webId, nameFilter, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entry associated with the attribute category with the specified name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeCategoryGetSecurityEntryByNameTest() throws ApiException {
        String name = null;
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        SecurityEntry response = api.attributeCategoryGetSecurityEntryByName(name, webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Update an attribute category by replacing items in its definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeCategoryUpdateTest() throws ApiException {
        String webId = null;
        AttributeCategory category = null;
        api.attributeCategoryUpdate(webId, category);
        // TODO: test validations
    }

    /**
     * Update a security entry owned by the attribute category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeCategoryUpdateSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        api.attributeCategoryUpdateSecurityEntry(name, webId, securityEntry, applyToChildren);
        // TODO: test validations
    }

}
