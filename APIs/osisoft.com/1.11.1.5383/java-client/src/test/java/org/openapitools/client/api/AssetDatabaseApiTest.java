/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnalysisCategory;
import org.openapitools.client.model.AnalysisTemplate;
import org.openapitools.client.model.AssetDatabase;
import org.openapitools.client.model.AttributeCategory;
import org.openapitools.client.model.Element;
import org.openapitools.client.model.ElementCategory;
import org.openapitools.client.model.ElementTemplate;
import org.openapitools.client.model.EnumerationSet;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.EventFrame;
import org.openapitools.client.model.ItemsAnalysis;
import org.openapitools.client.model.ItemsAnalysisCategory;
import org.openapitools.client.model.ItemsAnalysisTemplate;
import org.openapitools.client.model.ItemsAttribute;
import org.openapitools.client.model.ItemsAttributeCategory;
import org.openapitools.client.model.ItemsElement;
import org.openapitools.client.model.ItemsElementCategory;
import org.openapitools.client.model.ItemsElementTemplate;
import org.openapitools.client.model.ItemsEnumerationSet;
import org.openapitools.client.model.ItemsEventFrame;
import org.openapitools.client.model.ItemsSecurityEntry;
import org.openapitools.client.model.ItemsSecurityRights;
import org.openapitools.client.model.ItemsTable;
import org.openapitools.client.model.ItemsTableCategory;
import org.openapitools.client.model.SecurityEntry;
import org.openapitools.client.model.Table;
import org.openapitools.client.model.TableCategory;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AssetDatabaseApi
 */
@Disabled
public class AssetDatabaseApiTest {

    private final AssetDatabaseApi api = new AssetDatabaseApi();

    /**
     * Add a reference to an existing element to the specified database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseAddReferencedElementTest() throws ApiException {
        String webId = null;
        List<String> referencedElementWebId = null;
        String referenceType = null;
        api.assetDatabaseAddReferencedElement(webId, referencedElementWebId, referenceType);
        // TODO: test validations
    }

    /**
     * Create an analysis category at the Asset Database root.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseCreateAnalysisCategoryTest() throws ApiException {
        String webId = null;
        AnalysisCategory analysisCategory = null;
        String webIdType = null;
        api.assetDatabaseCreateAnalysisCategory(webId, analysisCategory, webIdType);
        // TODO: test validations
    }

    /**
     * Create an analysis template at the Asset Database root.
     *
     * Analyses that are based on an analysis template will inherit characteristics defined in the template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseCreateAnalysisTemplateTest() throws ApiException {
        String webId = null;
        AnalysisTemplate template = null;
        String webIdType = null;
        api.assetDatabaseCreateAnalysisTemplate(webId, template, webIdType);
        // TODO: test validations
    }

    /**
     * Create an attribute category at the Asset Database root.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseCreateAttributeCategoryTest() throws ApiException {
        String webId = null;
        AttributeCategory attributeCategory = null;
        String webIdType = null;
        api.assetDatabaseCreateAttributeCategory(webId, attributeCategory, webIdType);
        // TODO: test validations
    }

    /**
     * Create a child element.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseCreateElementTest() throws ApiException {
        String webId = null;
        Element element = null;
        String webIdType = null;
        api.assetDatabaseCreateElement(webId, element, webIdType);
        // TODO: test validations
    }

    /**
     * Create an element category at the Asset Database root.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseCreateElementCategoryTest() throws ApiException {
        String webId = null;
        ElementCategory elementCategory = null;
        String webIdType = null;
        api.assetDatabaseCreateElementCategory(webId, elementCategory, webIdType);
        // TODO: test validations
    }

    /**
     * Create a template at the Asset Database root. Specify InstanceType of \&quot;Element\&quot; or \&quot;EventFrame\&quot; to create element or event frame template respectively. Only these two types of templates can be created.
     *
     * Elements and event frames that are based on an element template will inherit characteristics defined in the template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseCreateElementTemplateTest() throws ApiException {
        String webId = null;
        ElementTemplate template = null;
        String webIdType = null;
        api.assetDatabaseCreateElementTemplate(webId, template, webIdType);
        // TODO: test validations
    }

    /**
     * Create an enumeration set at the Asset Database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseCreateEnumerationSetTest() throws ApiException {
        String webId = null;
        EnumerationSet enumerationSet = null;
        String webIdType = null;
        api.assetDatabaseCreateEnumerationSet(webId, enumerationSet, webIdType);
        // TODO: test validations
    }

    /**
     * Create an event frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseCreateEventFrameTest() throws ApiException {
        String webId = null;
        EventFrame eventFrame = null;
        String webIdType = null;
        api.assetDatabaseCreateEventFrame(webId, eventFrame, webIdType);
        // TODO: test validations
    }

    /**
     * Create a security entry owned by the asset database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseCreateSecurityEntryTest() throws ApiException {
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        String securityItem = null;
        String webIdType = null;
        api.assetDatabaseCreateSecurityEntry(webId, securityEntry, applyToChildren, securityItem, webIdType);
        // TODO: test validations
    }

    /**
     * Create a table on the Asset Database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseCreateTableTest() throws ApiException {
        String webId = null;
        Table table = null;
        String webIdType = null;
        api.assetDatabaseCreateTable(webId, table, webIdType);
        // TODO: test validations
    }

    /**
     * Create a table category on the Asset Database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseCreateTableCategoryTest() throws ApiException {
        String webId = null;
        TableCategory tableCategory = null;
        String webIdType = null;
        api.assetDatabaseCreateTableCategory(webId, tableCategory, webIdType);
        // TODO: test validations
    }

    /**
     * Delete an asset database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseDeleteTest() throws ApiException {
        String webId = null;
        api.assetDatabaseDelete(webId);
        // TODO: test validations
    }

    /**
     * Delete a security entry owned by the asset database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseDeleteSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        Boolean applyToChildren = null;
        String securityItem = null;
        api.assetDatabaseDeleteSecurityEntry(name, webId, applyToChildren, securityItem);
        // TODO: test validations
    }

    /**
     * Export the asset database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseExportTest() throws ApiException {
        String webId = null;
        String endTime = null;
        List<String> exportMode = null;
        String startTime = null;
        api.assetDatabaseExport(webId, endTime, exportMode, startTime);
        // TODO: test validations
    }

    /**
     * Retrieve analyses based on the specified conditions.
     *
     * Users can search for the analyses based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the analyses that match the default search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseFindAnalysesTest() throws ApiException {
        String webId = null;
        List<String> field = null;
        Integer maxCount = null;
        String query = null;
        String selectedFields = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String webIdType = null;
        ItemsAnalysis response = api.assetDatabaseFindAnalyses(webId, field, maxCount, query, selectedFields, sortField, sortOrder, startIndex, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieves a list of element attributes matching the specified filters from the specified asset database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseFindElementAttributesTest() throws ApiException {
        String webId = null;
        String associations = null;
        String attributeCategory = null;
        String attributeDescriptionFilter = null;
        String attributeNameFilter = null;
        String attributeType = null;
        String elementCategory = null;
        String elementDescriptionFilter = null;
        String elementNameFilter = null;
        String elementTemplate = null;
        String elementType = null;
        Integer maxCount = null;
        Boolean searchFullHierarchy = null;
        String selectedFields = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String webIdType = null;
        ItemsAttribute response = api.assetDatabaseFindElementAttributes(webId, associations, attributeCategory, attributeDescriptionFilter, attributeNameFilter, attributeType, elementCategory, elementDescriptionFilter, elementNameFilter, elementTemplate, elementType, maxCount, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieves a list of event frame attributes matching the specified filters from the specified asset database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseFindEventFrameAttributesTest() throws ApiException {
        String webId = null;
        String associations = null;
        String attributeCategory = null;
        String attributeDescriptionFilter = null;
        String attributeNameFilter = null;
        String attributeType = null;
        String endTime = null;
        String eventFrameCategory = null;
        String eventFrameDescriptionFilter = null;
        String eventFrameNameFilter = null;
        String eventFrameTemplate = null;
        Integer maxCount = null;
        String referencedElementNameFilter = null;
        Boolean searchFullHierarchy = null;
        String searchMode = null;
        String selectedFields = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String startTime = null;
        String webIdType = null;
        ItemsAttribute response = api.assetDatabaseFindEventFrameAttributes(webId, associations, attributeCategory, attributeDescriptionFilter, attributeNameFilter, attributeType, endTime, eventFrameCategory, eventFrameDescriptionFilter, eventFrameNameFilter, eventFrameTemplate, maxCount, referencedElementNameFilter, searchFullHierarchy, searchMode, selectedFields, sortField, sortOrder, startIndex, startTime, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve an Asset Database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseGetTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        AssetDatabase response = api.assetDatabaseGet(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve analysis categories for a given Asset Database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseGetAnalysisCategoriesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsAnalysisCategory response = api.assetDatabaseGetAnalysisCategories(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve analysis templates based on the specified criteria. By default, all analysis templates in the specified Asset Database are returned.
     *
     * Users can search for the analysis templates based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the templates that match the default search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseGetAnalysisTemplatesTest() throws ApiException {
        String webId = null;
        List<String> field = null;
        Integer maxCount = null;
        String query = null;
        String selectedFields = null;
        String sortField = null;
        String sortOrder = null;
        String webIdType = null;
        ItemsAnalysisTemplate response = api.assetDatabaseGetAnalysisTemplates(webId, field, maxCount, query, selectedFields, sortField, sortOrder, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve attribute categories for a given Asset Database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseGetAttributeCategoriesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsAttributeCategory response = api.assetDatabaseGetAttributeCategories(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve an Asset Database by path.
     *
     * This method returns an asset database based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseGetByPathTest() throws ApiException {
        String path = null;
        String selectedFields = null;
        String webIdType = null;
        AssetDatabase response = api.assetDatabaseGetByPath(path, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve element categories for a given Asset Database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseGetElementCategoriesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsElementCategory response = api.assetDatabaseGetElementCategories(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve element templates based on the specified criteria. Only templates of instance type \&quot;Element\&quot; and \&quot;EventFrame\&quot; are returned. By default, all element and event frame templates in the specified Asset Database are returned.
     *
     * Users can search for the element and event frame template based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the templates that match the default search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseGetElementTemplatesTest() throws ApiException {
        String webId = null;
        List<String> field = null;
        Integer maxCount = null;
        String query = null;
        String selectedFields = null;
        String sortField = null;
        String sortOrder = null;
        String webIdType = null;
        ItemsElementTemplate response = api.assetDatabaseGetElementTemplates(webId, field, maxCount, query, selectedFields, sortField, sortOrder, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified asset database.
     *
     * Users can search for the elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseGetElementsTest() throws ApiException {
        String webId = null;
        String associations = null;
        String categoryName = null;
        String descriptionFilter = null;
        String elementType = null;
        Integer maxCount = null;
        String nameFilter = null;
        Boolean searchFullHierarchy = null;
        String selectedFields = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String templateName = null;
        String webIdType = null;
        ItemsElement response = api.assetDatabaseGetElements(webId, associations, categoryName, descriptionFilter, elementType, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex, templateName, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve enumeration sets for given asset database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseGetEnumerationSetsTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsEnumerationSet response = api.assetDatabaseGetEnumerationSets(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve event frames based on the specified conditions. By default, returns all children of the specified root resource that have been active in the past 8 hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseGetEventFramesTest() throws ApiException {
        String webId = null;
        Boolean canBeAcknowledged = null;
        String categoryName = null;
        String endTime = null;
        Boolean isAcknowledged = null;
        Integer maxCount = null;
        String nameFilter = null;
        String referencedElementNameFilter = null;
        String referencedElementTemplateName = null;
        Boolean searchFullHierarchy = null;
        String searchMode = null;
        String selectedFields = null;
        List<String> severity = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String startTime = null;
        String templateName = null;
        String webIdType = null;
        ItemsEventFrame response = api.assetDatabaseGetEventFrames(webId, canBeAcknowledged, categoryName, endTime, isAcknowledged, maxCount, nameFilter, referencedElementNameFilter, referencedElementTemplateName, searchFullHierarchy, searchMode, selectedFields, severity, sortField, sortOrder, startIndex, startTime, templateName, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements at the root level of the asset database.
     *
     * Users can search for the referenced elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseGetReferencedElementsTest() throws ApiException {
        String webId = null;
        String associations = null;
        String categoryName = null;
        String descriptionFilter = null;
        String elementType = null;
        Integer maxCount = null;
        String nameFilter = null;
        String selectedFields = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String templateName = null;
        String webIdType = null;
        ItemsElement response = api.assetDatabaseGetReferencedElements(webId, associations, categoryName, descriptionFilter, elementType, maxCount, nameFilter, selectedFields, sortField, sortOrder, startIndex, templateName, webIdType);
        // TODO: test validations
    }

    /**
     * Get the security information of the specified security item associated with the asset database for a specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseGetSecurityTest() throws ApiException {
        String webId = null;
        List<String> securityItem = null;
        List<String> userIdentity = null;
        Boolean forceRefresh = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityRights response = api.assetDatabaseGetSecurity(webId, securityItem, userIdentity, forceRefresh, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entries of the specified security item associated with the asset database based on the specified criteria. By default, all security entries for this asset database are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseGetSecurityEntriesTest() throws ApiException {
        String webId = null;
        String nameFilter = null;
        String securityItem = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityEntry response = api.assetDatabaseGetSecurityEntries(webId, nameFilter, securityItem, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entry of the specified security item associated with the asset database with the specified name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseGetSecurityEntryByNameTest() throws ApiException {
        String name = null;
        String webId = null;
        String securityItem = null;
        String selectedFields = null;
        String webIdType = null;
        SecurityEntry response = api.assetDatabaseGetSecurityEntryByName(name, webId, securityItem, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve table categories for a given Asset Database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseGetTableCategoriesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsTableCategory response = api.assetDatabaseGetTableCategories(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve tables for given Asset Database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseGetTablesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsTable response = api.assetDatabaseGetTables(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Import an asset database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseImportTest() throws ApiException {
        String webId = null;
        List<String> importMode = null;
        api.assetDatabaseImport(webId, importMode);
        // TODO: test validations
    }

    /**
     * Remove a reference to an existing element from the specified database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseRemoveReferencedElementTest() throws ApiException {
        String webId = null;
        List<String> referencedElementWebId = null;
        api.assetDatabaseRemoveReferencedElement(webId, referencedElementWebId);
        // TODO: test validations
    }

    /**
     * Update an asset database by replacing items in its definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseUpdateTest() throws ApiException {
        String webId = null;
        AssetDatabase database = null;
        api.assetDatabaseUpdate(webId, database);
        // TODO: test validations
    }

    /**
     * Update a security entry owned by the asset database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetDatabaseUpdateSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        String securityItem = null;
        api.assetDatabaseUpdateSecurityEntry(name, webId, securityEntry, applyToChildren, securityItem);
        // TODO: test validations
    }

}
