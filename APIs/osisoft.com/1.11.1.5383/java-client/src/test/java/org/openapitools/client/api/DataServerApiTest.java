/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DataServer;
import org.openapitools.client.model.DataServerLicense;
import org.openapitools.client.model.EnumerationSet;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsDataServer;
import org.openapitools.client.model.ItemsEnumerationSet;
import org.openapitools.client.model.ItemsPoint;
import org.openapitools.client.model.Point;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataServerApi
 */
@Disabled
public class DataServerApiTest {

    private final DataServerApi api = new DataServerApi();

    /**
     * Create an enumeration set on the Data Server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataServerCreateEnumerationSetTest() throws ApiException {
        String webId = null;
        EnumerationSet enumerationSet = null;
        String webIdType = null;
        api.dataServerCreateEnumerationSet(webId, enumerationSet, webIdType);
        // TODO: test validations
    }

    /**
     * Create a point in the specified Data Server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataServerCreatePointTest() throws ApiException {
        String webId = null;
        Point pointDTO = null;
        String webIdType = null;
        api.dataServerCreatePoint(webId, pointDTO, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve a Data Server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataServerGetTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        DataServer response = api.dataServerGet(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve a Data Server by name.
     *
     * This method returns a data server based on the name. Users should primarily search with the WebID when available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataServerGetByNameTest() throws ApiException {
        String name = null;
        String selectedFields = null;
        String webIdType = null;
        DataServer response = api.dataServerGetByName(name, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve a Data Server by path.
     *
     * This method returns a data server based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataServerGetByPathTest() throws ApiException {
        String path = null;
        String selectedFields = null;
        String webIdType = null;
        DataServer response = api.dataServerGetByPath(path, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve enumeration sets for given Data Server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataServerGetEnumerationSetsTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsEnumerationSet response = api.dataServerGetEnumerationSets(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieves the specified license for the given Data Server. The fields of the response object are string representations of the numerical values reported by the Data Server, with \&quot;Infinity\&quot; representing a license field with no limit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataServerGetLicenseTest() throws ApiException {
        String webId = null;
        String module = null;
        String selectedFields = null;
        String webIdType = null;
        DataServerLicense response = api.dataServerGetLicense(webId, module, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve a list of points on a specified Data Server.
     *
     * Users can search for the data servers based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the data servers that match the default search.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataServerGetPointsTest() throws ApiException {
        String webId = null;
        Integer maxCount = null;
        String nameFilter = null;
        String selectedFields = null;
        Integer startIndex = null;
        String webIdType = null;
        ItemsPoint response = api.dataServerGetPoints(webId, maxCount, nameFilter, selectedFields, startIndex, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve a list of Data Servers known to this service.
     *
     * This method returns a list of all available known Data Servers that the user can connect to. Even though a server may be returned in the list, the user may not have permission to access it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataServerListTest() throws ApiException {
        String selectedFields = null;
        String webIdType = null;
        ItemsDataServer response = api.dataServerList(selectedFields, webIdType);
        // TODO: test validations
    }

}
