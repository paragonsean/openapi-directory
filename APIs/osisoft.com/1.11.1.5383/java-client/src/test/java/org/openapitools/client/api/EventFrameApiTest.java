/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Annotation;
import org.openapitools.client.model.Attribute;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.EventFrame;
import org.openapitools.client.model.ItemsAnnotation;
import org.openapitools.client.model.ItemsAttribute;
import org.openapitools.client.model.ItemsElement;
import org.openapitools.client.model.ItemsElementCategory;
import org.openapitools.client.model.ItemsEventFrame;
import org.openapitools.client.model.ItemsItemEventFrame;
import org.openapitools.client.model.ItemsSecurityEntry;
import org.openapitools.client.model.ItemsSecurityRights;
import org.openapitools.client.model.MediaMetadata;
import org.openapitools.client.model.SearchByAttribute;
import org.openapitools.client.model.SecurityEntry;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventFrameApi
 */
@Disabled
public class EventFrameApiTest {

    private final EventFrameApi api = new EventFrameApi();

    /**
     * Calls the EventFrame&#39;s Acknowledge method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameAcknowledgeTest() throws ApiException {
        String webId = null;
        api.eventFrameAcknowledge(webId);
        // TODO: test validations
    }

    /**
     * Calls the EventFrame&#39;s CaptureValues method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameCaptureValuesTest() throws ApiException {
        String webId = null;
        api.eventFrameCaptureValues(webId);
        // TODO: test validations
    }

    /**
     * Create an annotation on an event frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameCreateAnnotationTest() throws ApiException {
        String webId = null;
        Annotation annotation = null;
        String webIdType = null;
        api.eventFrameCreateAnnotation(webId, annotation, webIdType);
        // TODO: test validations
    }

    /**
     * Create a new attribute of the specified event frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameCreateAttributeTest() throws ApiException {
        String webId = null;
        Attribute attribute = null;
        String webIdType = null;
        api.eventFrameCreateAttribute(webId, attribute, webIdType);
        // TODO: test validations
    }

    /**
     * Executes the create configuration function of the data references found within the attributes of the event frame, and optionally, its children.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameCreateConfigTest() throws ApiException {
        String webId = null;
        Boolean includeChildElements = null;
        api.eventFrameCreateConfig(webId, includeChildElements);
        // TODO: test validations
    }

    /**
     * Create an event frame as a child of the specified event frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameCreateEventFrameTest() throws ApiException {
        String webId = null;
        EventFrame eventFrame = null;
        String webIdType = null;
        api.eventFrameCreateEventFrame(webId, eventFrame, webIdType);
        // TODO: test validations
    }

    /**
     * Create a link for a \&quot;Search EventFrames By Attribute Value\&quot; operation, whose queries are specified in the request content. The SearchRoot is specified by the Web Id of the root EventFrame. If the SearchRoot is not specified, then the search starts at the Asset Database. ElementTemplate must be provided as the Web ID of the ElementTemplate, which are used to create the EventFrames. All the attributes in the queries must be defined as AttributeTemplates on the ElementTemplate. An array of attribute value queries are ANDed together to find the desired Element objects. At least one value query must be specified. There are limitations on SearchOperators.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameCreateSearchByAttributeTest() throws ApiException {
        SearchByAttribute query = null;
        Boolean noResults = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsEventFrame response = api.eventFrameCreateSearchByAttribute(query, noResults, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Create a security entry owned by the event frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameCreateSecurityEntryTest() throws ApiException {
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        String webIdType = null;
        api.eventFrameCreateSecurityEntry(webId, securityEntry, applyToChildren, webIdType);
        // TODO: test validations
    }

    /**
     * Delete an event frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameDeleteTest() throws ApiException {
        String webId = null;
        api.eventFrameDelete(webId);
        // TODO: test validations
    }

    /**
     * Delete an annotation on an event frame. If the annotation has attached media, the attached media will also be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameDeleteAnnotationTest() throws ApiException {
        String id = null;
        String webId = null;
        api.eventFrameDeleteAnnotation(id, webId);
        // TODO: test validations
    }

    /**
     * Delete attached media from an annotation on an event frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameDeleteAnnotationAttachmentMediaByIdTest() throws ApiException {
        String id = null;
        String webId = null;
        api.eventFrameDeleteAnnotationAttachmentMediaById(id, webId);
        // TODO: test validations
    }

    /**
     * Delete a security entry owned by the event frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameDeleteSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        Boolean applyToChildren = null;
        api.eventFrameDeleteSecurityEntry(name, webId, applyToChildren);
        // TODO: test validations
    }

    /**
     * Execute a \&quot;Search EventFrames By Attribute Value\&quot; operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameExecuteSearchByAttributeTest() throws ApiException {
        String searchId = null;
        Boolean canBeAcknowledged = null;
        String endTime = null;
        Boolean isAcknowledged = null;
        Integer maxCount = null;
        String nameFilter = null;
        String referencedElementNameFilter = null;
        Boolean searchFullHierarchy = null;
        String searchMode = null;
        String selectedFields = null;
        List<String> severity = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String startTime = null;
        String webIdType = null;
        ItemsEventFrame response = api.eventFrameExecuteSearchByAttribute(searchId, canBeAcknowledged, endTime, isAcknowledged, maxCount, nameFilter, referencedElementNameFilter, searchFullHierarchy, searchMode, selectedFields, severity, sortField, sortOrder, startIndex, startTime, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieves a list of event frame attributes matching the specified filters from the specified event frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameFindEventFrameAttributesTest() throws ApiException {
        String webId = null;
        String associations = null;
        String attributeCategory = null;
        String attributeDescriptionFilter = null;
        String attributeNameFilter = null;
        String attributeType = null;
        String endTime = null;
        String eventFrameCategory = null;
        String eventFrameDescriptionFilter = null;
        String eventFrameNameFilter = null;
        String eventFrameTemplate = null;
        Integer maxCount = null;
        String referencedElementNameFilter = null;
        Boolean searchFullHierarchy = null;
        String searchMode = null;
        String selectedFields = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String startTime = null;
        String webIdType = null;
        ItemsAttribute response = api.eventFrameFindEventFrameAttributes(webId, associations, attributeCategory, attributeDescriptionFilter, attributeNameFilter, attributeType, endTime, eventFrameCategory, eventFrameDescriptionFilter, eventFrameNameFilter, eventFrameTemplate, maxCount, referencedElementNameFilter, searchFullHierarchy, searchMode, selectedFields, sortField, sortOrder, startIndex, startTime, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve an event frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameGetTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        EventFrame response = api.eventFrameGet(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Gets the metadata of the media attached to the specified annotation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameGetAnnotationAttachmentMediaMetadataByIdTest() throws ApiException {
        String id = null;
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        MediaMetadata response = api.eventFrameGetAnnotationAttachmentMediaMetadataById(id, webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get a specific annotation on an event frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameGetAnnotationByIdTest() throws ApiException {
        String id = null;
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        Annotation response = api.eventFrameGetAnnotationById(id, webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get an event frame&#39;s annotations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameGetAnnotationsTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsAnnotation response = api.eventFrameGetAnnotations(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get the attributes of the specified event frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameGetAttributesTest() throws ApiException {
        String webId = null;
        String associations = null;
        String categoryName = null;
        Integer maxCount = null;
        String nameFilter = null;
        Boolean searchFullHierarchy = null;
        String selectedFields = null;
        Boolean showExcluded = null;
        Boolean showHidden = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String templateName = null;
        List<String> trait = null;
        List<String> traitCategory = null;
        String valueType = null;
        String webIdType = null;
        ItemsAttribute response = api.eventFrameGetAttributes(webId, associations, categoryName, maxCount, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startIndex, templateName, trait, traitCategory, valueType, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve an event frame by path.
     *
     * This method returns an event frame based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameGetByPathTest() throws ApiException {
        String path = null;
        String selectedFields = null;
        String webIdType = null;
        EventFrame response = api.eventFrameGetByPath(path, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get an event frame&#39;s categories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameGetCategoriesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsElementCategory response = api.eventFrameGetCategories(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve event frames based on the specified conditions. By default, returns all children of the specified root event frame that have been active in the past 8 hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameGetEventFramesTest() throws ApiException {
        String webId = null;
        Boolean canBeAcknowledged = null;
        String categoryName = null;
        String endTime = null;
        Boolean isAcknowledged = null;
        Integer maxCount = null;
        String nameFilter = null;
        String referencedElementNameFilter = null;
        String referencedElementTemplateName = null;
        Boolean searchFullHierarchy = null;
        String searchMode = null;
        String selectedFields = null;
        List<String> severity = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String startTime = null;
        String templateName = null;
        String webIdType = null;
        ItemsEventFrame response = api.eventFrameGetEventFrames(webId, canBeAcknowledged, categoryName, endTime, isAcknowledged, maxCount, nameFilter, referencedElementNameFilter, referencedElementTemplateName, searchFullHierarchy, searchMode, selectedFields, severity, sortField, sortOrder, startIndex, startTime, templateName, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve event frames based on the specified conditions. Returns event frames using the specified search query string.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameGetEventFramesQueryTest() throws ApiException {
        String databaseWebId = null;
        Integer maxCount = null;
        String query = null;
        String selectedFields = null;
        Integer startIndex = null;
        String webIdType = null;
        ItemsEventFrame response = api.eventFrameGetEventFramesQuery(databaseWebId, maxCount, query, selectedFields, startIndex, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve multiple event frames by web ids or paths.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameGetMultipleTest() throws ApiException {
        Boolean asParallel = null;
        String includeMode = null;
        List<String> path = null;
        String selectedFields = null;
        List<String> webId = null;
        String webIdType = null;
        ItemsItemEventFrame response = api.eventFrameGetMultiple(asParallel, includeMode, path, selectedFields, webId, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the event frame&#39;s referenced elements.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameGetReferencedElementsTest() throws ApiException {
        String webId = null;
        String associations = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsElement response = api.eventFrameGetReferencedElements(webId, associations, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get the security information of the specified security item associated with the event frame for a specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameGetSecurityTest() throws ApiException {
        String webId = null;
        List<String> userIdentity = null;
        Boolean forceRefresh = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityRights response = api.eventFrameGetSecurity(webId, userIdentity, forceRefresh, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entries associated with the event frame based on the specified criteria. By default, all security entries for this event frame are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameGetSecurityEntriesTest() throws ApiException {
        String webId = null;
        String nameFilter = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityEntry response = api.eventFrameGetSecurityEntries(webId, nameFilter, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entry associated with the event frame with the specified name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameGetSecurityEntryByNameTest() throws ApiException {
        String name = null;
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        SecurityEntry response = api.eventFrameGetSecurityEntryByName(name, webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Update an event frame by replacing items in its definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameUpdateTest() throws ApiException {
        String webId = null;
        EventFrame eventFrame = null;
        api.eventFrameUpdate(webId, eventFrame);
        // TODO: test validations
    }

    /**
     * Update an annotation on an event frame by replacing items in its definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameUpdateAnnotationTest() throws ApiException {
        String id = null;
        String webId = null;
        Annotation annotation = null;
        api.eventFrameUpdateAnnotation(id, webId, annotation);
        // TODO: test validations
    }

    /**
     * Update a security entry owned by the event frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventFrameUpdateSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        api.eventFrameUpdateSecurityEntry(name, webId, securityEntry, applyToChildren);
        // TODO: test validations
    }

}
