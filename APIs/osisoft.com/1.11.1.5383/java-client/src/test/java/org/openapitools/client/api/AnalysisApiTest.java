/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Analysis;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsAnalysis;
import org.openapitools.client.model.ItemsAnalysisCategory;
import org.openapitools.client.model.ItemsSecurityEntry;
import org.openapitools.client.model.ItemsSecurityRights;
import org.openapitools.client.model.SecurityEntry;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnalysisApi
 */
@Disabled
public class AnalysisApiTest {

    private final AnalysisApi api = new AnalysisApi();

    /**
     * Create a security entry owned by the analysis.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisCreateSecurityEntryTest() throws ApiException {
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        String webIdType = null;
        api.analysisCreateSecurityEntry(webId, securityEntry, applyToChildren, webIdType);
        // TODO: test validations
    }

    /**
     * Delete an Analysis.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisDeleteTest() throws ApiException {
        String webId = null;
        api.analysisDelete(webId);
        // TODO: test validations
    }

    /**
     * Delete a security entry owned by the analysis.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisDeleteSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        Boolean applyToChildren = null;
        api.analysisDeleteSecurityEntry(name, webId, applyToChildren);
        // TODO: test validations
    }

    /**
     * Retrieve an Analysis.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisGetTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        Analysis response = api.analysisGet(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve analyses based on the specified conditions. By default, returns all analyses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisGetAnalysesQueryTest() throws ApiException {
        String databaseWebId = null;
        Integer maxCount = null;
        String query = null;
        String selectedFields = null;
        Integer startIndex = null;
        String webIdType = null;
        ItemsAnalysis response = api.analysisGetAnalysesQuery(databaseWebId, maxCount, query, selectedFields, startIndex, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve an Analysis by path.
     *
     * This method returns an Analysis based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisGetByPathTest() throws ApiException {
        String path = null;
        String selectedFields = null;
        String webIdType = null;
        Analysis response = api.analysisGetByPath(path, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get an Analysis&#39; categories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisGetCategoriesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsAnalysisCategory response = api.analysisGetCategories(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get the security information of the specified security item associated with the Analysis for a specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisGetSecurityTest() throws ApiException {
        String webId = null;
        List<String> userIdentity = null;
        Boolean forceRefresh = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityRights response = api.analysisGetSecurity(webId, userIdentity, forceRefresh, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entries associated with the analysis based on the specified criteria. By default, all security entries for this analysis are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisGetSecurityEntriesTest() throws ApiException {
        String webId = null;
        String nameFilter = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityEntry response = api.analysisGetSecurityEntries(webId, nameFilter, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entry associated with the analysis with the specified name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisGetSecurityEntryByNameTest() throws ApiException {
        String name = null;
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        SecurityEntry response = api.analysisGetSecurityEntryByName(name, webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Update an Analysis.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisUpdateTest() throws ApiException {
        String webId = null;
        Analysis analysis = null;
        api.analysisUpdate(webId, analysis);
        // TODO: test validations
    }

    /**
     * Update a security entry owned by the analysis.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisUpdateSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        api.analysisUpdateSecurityEntry(name, webId, securityEntry, applyToChildren);
        // TODO: test validations
    }

}
