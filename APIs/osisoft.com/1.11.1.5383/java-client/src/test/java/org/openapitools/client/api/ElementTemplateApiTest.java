/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AttributeTemplate;
import org.openapitools.client.model.ElementTemplate;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsAnalysisTemplate;
import org.openapitools.client.model.ItemsAttributeTemplate;
import org.openapitools.client.model.ItemsElementCategory;
import org.openapitools.client.model.ItemsElementTemplate;
import org.openapitools.client.model.ItemsNotificationRuleTemplate;
import org.openapitools.client.model.ItemsSecurityEntry;
import org.openapitools.client.model.ItemsSecurityRights;
import org.openapitools.client.model.NotificationRuleTemplate;
import org.openapitools.client.model.SecurityEntry;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ElementTemplateApi
 */
@Disabled
public class ElementTemplateApiTest {

    private final ElementTemplateApi api = new ElementTemplateApi();

    /**
     * Create an attribute template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateCreateAttributeTemplateTest() throws ApiException {
        String webId = null;
        AttributeTemplate template = null;
        String webIdType = null;
        api.elementTemplateCreateAttributeTemplate(webId, template, webIdType);
        // TODO: test validations
    }

    /**
     * Create a notification rule template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateCreateNotificationRuleTemplateTest() throws ApiException {
        String webId = null;
        NotificationRuleTemplate notificationRuleTemplate = null;
        String webIdType = null;
        api.elementTemplateCreateNotificationRuleTemplate(webId, notificationRuleTemplate, webIdType);
        // TODO: test validations
    }

    /**
     * Create a security entry owned by the element template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateCreateSecurityEntryTest() throws ApiException {
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        String webIdType = null;
        api.elementTemplateCreateSecurityEntry(webId, securityEntry, applyToChildren, webIdType);
        // TODO: test validations
    }

    /**
     * Delete an element template.
     *
     * Deleting an element template will delete all associated templated data from elements which were created from it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateDeleteTest() throws ApiException {
        String webId = null;
        api.elementTemplateDelete(webId);
        // TODO: test validations
    }

    /**
     * Delete a security entry owned by the element template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateDeleteSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        Boolean applyToChildren = null;
        api.elementTemplateDeleteSecurityEntry(name, webId, applyToChildren);
        // TODO: test validations
    }

    /**
     * Retrieve an element template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateGetTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ElementTemplate response = api.elementTemplateGet(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get analysis templates for an element template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateGetAnalysisTemplatesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsAnalysisTemplate response = api.elementTemplateGetAnalysisTemplates(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get child attribute templates for an element template.
     *
     * If &#39;showInherited&#39; and &#39;showDescendants&#39; are &#39;true&#39;, it returns all the attribute templates from current element template and the base template.  If &#39;showInherited&#39; is &#39;false&#39;, it returns all the attribute templates from the current element template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateGetAttributeTemplatesTest() throws ApiException {
        String webId = null;
        Boolean depthFirstTraverse = null;
        Integer maxCount = null;
        String selectedFields = null;
        Boolean showDescendants = null;
        Boolean showInherited = null;
        Integer startIndex = null;
        String webIdType = null;
        ItemsAttributeTemplate response = api.elementTemplateGetAttributeTemplates(webId, depthFirstTraverse, maxCount, selectedFields, showDescendants, showInherited, startIndex, webIdType);
        // TODO: test validations
    }

    /**
     * Get base element templates for an element template.
     *
     * The root template will be returned first, followed by successive templates in the inheritance chain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateGetBaseElementTemplatesTest() throws ApiException {
        String webId = null;
        Integer maxCount = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsElementTemplate response = api.elementTemplateGetBaseElementTemplates(webId, maxCount, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve an element template by path.
     *
     * This method returns an element template based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateGetByPathTest() throws ApiException {
        String path = null;
        String selectedFields = null;
        String webIdType = null;
        ElementTemplate response = api.elementTemplateGetByPath(path, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get an element template&#39;s categories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateGetCategoriesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        Boolean showInherited = null;
        String webIdType = null;
        ItemsElementCategory response = api.elementTemplateGetCategories(webId, selectedFields, showInherited, webIdType);
        // TODO: test validations
    }

    /**
     * Get derived element templates for an element template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateGetDerivedElementTemplatesTest() throws ApiException {
        String webId = null;
        Integer maxCount = null;
        String selectedFields = null;
        Boolean showDescendants = null;
        String webIdType = null;
        ItemsElementTemplate response = api.elementTemplateGetDerivedElementTemplates(webId, maxCount, selectedFields, showDescendants, webIdType);
        // TODO: test validations
    }

    /**
     * Get notification rule templates for an element template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateGetNotificationRuleTemplatesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsNotificationRuleTemplate response = api.elementTemplateGetNotificationRuleTemplates(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get the security information of the specified security item associated with the element template for a specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateGetSecurityTest() throws ApiException {
        String webId = null;
        List<String> userIdentity = null;
        Boolean forceRefresh = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityRights response = api.elementTemplateGetSecurity(webId, userIdentity, forceRefresh, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entries associated with the element template based on the specified criteria. By default, all security entries for this element template are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateGetSecurityEntriesTest() throws ApiException {
        String webId = null;
        String nameFilter = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityEntry response = api.elementTemplateGetSecurityEntries(webId, nameFilter, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entry associated with the element template with the specified name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateGetSecurityEntryByNameTest() throws ApiException {
        String name = null;
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityEntry response = api.elementTemplateGetSecurityEntryByName(name, webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Update an element template by replacing items in its definition.
     *
     * Updating the InstanceType property of an element template will not affect any elements that have already been created from this template; it will only affect any future elements created from this template. All other changes will be propagated to elements based on this template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateUpdateTest() throws ApiException {
        String webId = null;
        ElementTemplate template = null;
        api.elementTemplateUpdate(webId, template);
        // TODO: test validations
    }

    /**
     * Update a security entry owned by the element template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elementTemplateUpdateSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        api.elementTemplateUpdateSecurityEntry(name, webId, securityEntry, applyToChildren);
        // TODO: test validations
    }

}
