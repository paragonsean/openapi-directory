/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EnumerationSet;
import org.openapitools.client.model.EnumerationValue;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsEnumerationValue;
import org.openapitools.client.model.ItemsSecurityEntry;
import org.openapitools.client.model.ItemsSecurityRights;
import org.openapitools.client.model.SecurityEntry;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EnumerationSetApi
 */
@Disabled
public class EnumerationSetApiTest {

    private final EnumerationSetApi api = new EnumerationSetApi();

    /**
     * Create a security entry owned by the enumeration set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumerationSetCreateSecurityEntryTest() throws ApiException {
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        String webIdType = null;
        api.enumerationSetCreateSecurityEntry(webId, securityEntry, applyToChildren, webIdType);
        // TODO: test validations
    }

    /**
     * Create an enumeration value for a enumeration set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumerationSetCreateValueTest() throws ApiException {
        String webId = null;
        EnumerationValue enumerationValue = null;
        String webIdType = null;
        api.enumerationSetCreateValue(webId, enumerationValue, webIdType);
        // TODO: test validations
    }

    /**
     * Delete an enumeration set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumerationSetDeleteTest() throws ApiException {
        String webId = null;
        api.enumerationSetDelete(webId);
        // TODO: test validations
    }

    /**
     * Delete a security entry owned by the enumeration set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumerationSetDeleteSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        Boolean applyToChildren = null;
        api.enumerationSetDeleteSecurityEntry(name, webId, applyToChildren);
        // TODO: test validations
    }

    /**
     * Retrieve an enumeration set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumerationSetGetTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        EnumerationSet response = api.enumerationSetGet(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve an enumeration set by path.
     *
     * This method returns an enumeration set based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumerationSetGetByPathTest() throws ApiException {
        String path = null;
        String selectedFields = null;
        String webIdType = null;
        EnumerationSet response = api.enumerationSetGetByPath(path, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get the security information of the specified security item associated with the enumeration set for a specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumerationSetGetSecurityTest() throws ApiException {
        String webId = null;
        List<String> userIdentity = null;
        Boolean forceRefresh = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityRights response = api.enumerationSetGetSecurity(webId, userIdentity, forceRefresh, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entries associated with the enumeration set based on the specified criteria. By default, all security entries for this enumeration set are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumerationSetGetSecurityEntriesTest() throws ApiException {
        String webId = null;
        String nameFilter = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityEntry response = api.enumerationSetGetSecurityEntries(webId, nameFilter, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entry associated with the enumeration set with the specified name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumerationSetGetSecurityEntryByNameTest() throws ApiException {
        String name = null;
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        SecurityEntry response = api.enumerationSetGetSecurityEntryByName(name, webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve an enumeration set&#39;s values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumerationSetGetValuesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsEnumerationValue response = api.enumerationSetGetValues(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Update an enumeration set by replacing items in its definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumerationSetUpdateTest() throws ApiException {
        String webId = null;
        EnumerationSet enumerationSet = null;
        api.enumerationSetUpdate(webId, enumerationSet);
        // TODO: test validations
    }

    /**
     * Update a security entry owned by the enumeration set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enumerationSetUpdateSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        api.enumerationSetUpdateSecurityEntry(name, webId, securityEntry, applyToChildren);
        // TODO: test validations
    }

}
