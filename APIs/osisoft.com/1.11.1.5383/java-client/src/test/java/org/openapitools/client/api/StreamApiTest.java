/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ExtendedTimedValue;
import org.openapitools.client.model.ExtendedTimedValues;
import org.openapitools.client.model.ItemsStreamValues;
import org.openapitools.client.model.ItemsSubstatus;
import org.openapitools.client.model.ItemsSummaryValue;
import org.openapitools.client.model.StreamUpdatesRegister;
import org.openapitools.client.model.StreamUpdatesRetrieve;
import org.openapitools.client.model.TimedValue;
import org.openapitools.client.model.TimedValues;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StreamApi
 */
@Disabled
public class StreamApiTest {

    private final StreamApi api = new StreamApi();

    /**
     * Opens a channel that will send messages about any value changes for the specified stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamGetChannelTest() throws ApiException {
        String webId = null;
        Integer heartbeatRate = null;
        Boolean includeInitialValues = null;
        String webIdType = null;
        api.streamGetChannel(webId, heartbeatRate, includeInitialValues, webIdType);
        // TODO: test validations
    }

    /**
     * Returns the end-of-stream value of the stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamGetEndTest() throws ApiException {
        String webId = null;
        String desiredUnits = null;
        String selectedFields = null;
        TimedValue response = api.streamGetEnd(webId, desiredUnits, selectedFields);
        // TODO: test validations
    }

    /**
     * Retrieves interpolated values over the specified time range at the specified sampling interval.
     *
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamGetInterpolatedTest() throws ApiException {
        String webId = null;
        String desiredUnits = null;
        String endTime = null;
        String filterExpression = null;
        Boolean includeFilteredValues = null;
        String interval = null;
        String selectedFields = null;
        String startTime = null;
        String syncTime = null;
        String syncTimeBoundaryType = null;
        String timeZone = null;
        TimedValues response = api.streamGetInterpolated(webId, desiredUnits, endTime, filterExpression, includeFilteredValues, interval, selectedFields, startTime, syncTime, syncTimeBoundaryType, timeZone);
        // TODO: test validations
    }

    /**
     * Retrieves interpolated values over the specified time range at the specified sampling interval.
     *
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamGetInterpolatedAtTimesTest() throws ApiException {
        String webId = null;
        List<String> time = null;
        String desiredUnits = null;
        String filterExpression = null;
        Boolean includeFilteredValues = null;
        String selectedFields = null;
        String sortOrder = null;
        String timeZone = null;
        TimedValues response = api.streamGetInterpolatedAtTimes(webId, time, desiredUnits, filterExpression, includeFilteredValues, selectedFields, sortOrder, timeZone);
        // TODO: test validations
    }

    /**
     * Retrieves values over the specified time range suitable for plotting over the number of intervals (typically represents pixels).
     *
     * For each interval, the data available is examined and significant values are returned. Each interval can produce up to 5 values if they are unique, the first value in the interval, the last value, the highest value, the lowest value and at most one exceptional point (bad status or digital state). Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamGetPlotTest() throws ApiException {
        String webId = null;
        String desiredUnits = null;
        String endTime = null;
        Integer intervals = null;
        String selectedFields = null;
        String startTime = null;
        String timeZone = null;
        TimedValues response = api.streamGetPlot(webId, desiredUnits, endTime, intervals, selectedFields, startTime, timeZone);
        // TODO: test validations
    }

    /**
     * Returns a list of compressed values for the requested time range from the source provider.
     *
     * Returned times are affected by the specified boundary type. If no values are found for the time range and conditions specified then the HTTP response will be success, with a body containing an empty array of Items. When specifying true for the includeFilteredValues parameter, consecutive filtered events are not returned. The first value that would be filtered out is returned with its time and the enumeration value \&quot;Filtered\&quot;. The next value in the collection will be the next compressed value in the specified direction that passes the filter criteria - if any. When both boundaryType and a filterExpression are specified, the events returned for the boundary condition specified are passed through the filter. If the includeFilteredValues parameter is true, the boundary values will be reported at the proper timestamps with the enumeration value \&quot;Filtered\&quot; when the filter conditions are not met at the boundary time. If the includeFilteredValues parameter is false for this case, no event is returned for the boundary time. Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.   If only recorded values with annotations are desired, the filterExpression parameter should include the filter IsSet(&#39;.&#39;, \&quot;a\&quot;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamGetRecordedTest() throws ApiException {
        String webId = null;
        String associations = null;
        String boundaryType = null;
        String desiredUnits = null;
        String endTime = null;
        String filterExpression = null;
        Boolean includeFilteredValues = null;
        Integer maxCount = null;
        String selectedFields = null;
        String startTime = null;
        String timeZone = null;
        ExtendedTimedValues response = api.streamGetRecorded(webId, associations, boundaryType, desiredUnits, endTime, filterExpression, includeFilteredValues, maxCount, selectedFields, startTime, timeZone);
        // TODO: test validations
    }

    /**
     * Returns a single recorded value based on the passed time and retrieval mode from the stream.
     *
     * If only recorded values with annotations are desired, the filterExpression parameter should include the filter IsSet(&#39;.&#39;, \&quot;a\&quot;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamGetRecordedAtTimeTest() throws ApiException {
        String webId = null;
        String time = null;
        String associations = null;
        String desiredUnits = null;
        String retrievalMode = null;
        String selectedFields = null;
        String timeZone = null;
        ExtendedTimedValue response = api.streamGetRecordedAtTime(webId, time, associations, desiredUnits, retrievalMode, selectedFields, timeZone);
        // TODO: test validations
    }

    /**
     * Retrieves recorded values at the specified times.
     *
     * Any time series value in the response that contains an &#39;Errors&#39; property indicates PI Web API encountered a handled error during the transfer of the response stream.   If only recorded values with annotations are desired, the filterExpression parameter should include the filter IsSet(&#39;.&#39;, \&quot;a\&quot;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamGetRecordedAtTimesTest() throws ApiException {
        String webId = null;
        List<String> time = null;
        String associations = null;
        String desiredUnits = null;
        String retrievalMode = null;
        String selectedFields = null;
        String sortOrder = null;
        String timeZone = null;
        ExtendedTimedValues response = api.streamGetRecordedAtTimes(webId, time, associations, desiredUnits, retrievalMode, selectedFields, sortOrder, timeZone);
        // TODO: test validations
    }

    /**
     * Returns a summary over the specified time range for the stream.
     *
     * Count is the only summary type supported on non-numeric streams. Requesting a summary for any other type will generate an error. Time-weighted totals are computed by integrating the rate tag values over the requested time range. If some of the data are bad in the time range, the calculated total is divided by the fraction of the time period for which there are good values. This approach is equivalent to assuming that during the period of bad data, the tag takes on the average values for the entire calculation time range. The PercentGood summary may be used to determine if the calculation results are suitable for the application&#39;s purposes. For time-weighted totals, if the time unit rate of the stream cannot be determined, then the value will be totaled assuming a unit of \&quot;per day\&quot; and no unit of measure will be assigned to the value. If the measured time component of the tag is not based on a day, the user of the data must convert the totalized value to the correct units.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamGetSummaryTest() throws ApiException {
        String webId = null;
        String calculationBasis = null;
        String endTime = null;
        String filterExpression = null;
        String sampleInterval = null;
        String sampleType = null;
        String selectedFields = null;
        String startTime = null;
        String summaryDuration = null;
        List<String> summaryType = null;
        String timeType = null;
        String timeZone = null;
        ItemsSummaryValue response = api.streamGetSummary(webId, calculationBasis, endTime, filterExpression, sampleInterval, sampleType, selectedFields, startTime, summaryDuration, summaryType, timeType, timeZone);
        // TODO: test validations
    }

    /**
     * Returns the value of the stream at the specified time. By default, this is usually the current value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamGetValueTest() throws ApiException {
        String webId = null;
        String desiredUnits = null;
        String selectedFields = null;
        String time = null;
        String timeZone = null;
        TimedValue response = api.streamGetValue(webId, desiredUnits, selectedFields, time, timeZone);
        // TODO: test validations
    }

    /**
     * Register for stream updates
     *
     * The supplied webId will register for stream updates. For a 201 or 204 response, the returned location header will contain the url for retrieving the next set of stream updates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamRegisterStreamUpdateTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        StreamUpdatesRegister response = api.streamRegisterStreamUpdate(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Receive stream updates
     *
     * The supplied marker will identify the set of stream updates to retrieve. For a 200 response, the returned location header will contain the url for retrieving the stream updates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamRetrieveStreamUpdateTest() throws ApiException {
        String marker = null;
        String desiredUnits = null;
        String selectedFields = null;
        String webIdType = null;
        StreamUpdatesRetrieve response = api.streamRetrieveStreamUpdate(marker, desiredUnits, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Updates a value for the specified stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamUpdateValueTest() throws ApiException {
        String webId = null;
        TimedValue value = null;
        String bufferOption = null;
        String updateOption = null;
        String webIdType = null;
        api.streamUpdateValue(webId, value, bufferOption, updateOption, webIdType);
        // TODO: test validations
    }

    /**
     * Updates multiple values for the specified stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void streamUpdateValuesTest() throws ApiException {
        String webId = null;
        List<TimedValue> values = null;
        String bufferOption = null;
        String updateOption = null;
        ItemsSubstatus response = api.streamUpdateValues(webId, values, bufferOption, updateOption);
        // TODO: test validations
    }

}
