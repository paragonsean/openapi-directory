/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnalysisTemplate;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsAnalysisCategory;
import org.openapitools.client.model.ItemsAnalysisTemplate;
import org.openapitools.client.model.ItemsSecurityEntry;
import org.openapitools.client.model.ItemsSecurityRights;
import org.openapitools.client.model.SecurityEntry;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnalysisTemplateApi
 */
@Disabled
public class AnalysisTemplateApiTest {

    private final AnalysisTemplateApi api = new AnalysisTemplateApi();

    /**
     * Create an Analysis template based upon a specified Analysis.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisTemplateCreateFromAnalysisTest() throws ApiException {
        String analysisWebId = null;
        String name = null;
        String webIdType = null;
        api.analysisTemplateCreateFromAnalysis(analysisWebId, name, webIdType);
        // TODO: test validations
    }

    /**
     * Create a security entry owned by the analysis template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisTemplateCreateSecurityEntryTest() throws ApiException {
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        String webIdType = null;
        api.analysisTemplateCreateSecurityEntry(webId, securityEntry, applyToChildren, webIdType);
        // TODO: test validations
    }

    /**
     * Delete an analysis template.
     *
     * Deleting an analysis template will delete any analysis which was created from it, unless the analysis is tied to a notification.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisTemplateDeleteTest() throws ApiException {
        String webId = null;
        api.analysisTemplateDelete(webId);
        // TODO: test validations
    }

    /**
     * Delete a security entry owned by the analysis template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisTemplateDeleteSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        Boolean applyToChildren = null;
        api.analysisTemplateDeleteSecurityEntry(name, webId, applyToChildren);
        // TODO: test validations
    }

    /**
     * Retrieve an analysis template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisTemplateGetTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        AnalysisTemplate response = api.analysisTemplateGet(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve analysis templates based on the specified conditions. By default, returns all analysis templates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisTemplateGetAnalysisTemplatesQueryTest() throws ApiException {
        String databaseWebId = null;
        Integer maxCount = null;
        String query = null;
        String selectedFields = null;
        Integer startIndex = null;
        String webIdType = null;
        ItemsAnalysisTemplate response = api.analysisTemplateGetAnalysisTemplatesQuery(databaseWebId, maxCount, query, selectedFields, startIndex, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve an analysis template by path.
     *
     * This method returns an analysis template based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisTemplateGetByPathTest() throws ApiException {
        String path = null;
        String selectedFields = null;
        String webIdType = null;
        AnalysisTemplate response = api.analysisTemplateGetByPath(path, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get an analysis template&#39;s categories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisTemplateGetCategoriesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsAnalysisCategory response = api.analysisTemplateGetCategories(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get the security information of the specified security item associated with the analysis template for a specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisTemplateGetSecurityTest() throws ApiException {
        String webId = null;
        List<String> userIdentity = null;
        Boolean forceRefresh = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityRights response = api.analysisTemplateGetSecurity(webId, userIdentity, forceRefresh, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entries associated with the analysis template based on the specified criteria. By default, all security entries for this analysis template are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisTemplateGetSecurityEntriesTest() throws ApiException {
        String webId = null;
        String nameFilter = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityEntry response = api.analysisTemplateGetSecurityEntries(webId, nameFilter, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entry associated with the analysis template with the specified name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisTemplateGetSecurityEntryByNameTest() throws ApiException {
        String name = null;
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        SecurityEntry response = api.analysisTemplateGetSecurityEntryByName(name, webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Update an analysis template by replacing items in its definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisTemplateUpdateTest() throws ApiException {
        String webId = null;
        AnalysisTemplate template = null;
        api.analysisTemplateUpdate(webId, template);
        // TODO: test validations
    }

    /**
     * Update a security entry owned by the analysis template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void analysisTemplateUpdateSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        api.analysisTemplateUpdateSecurityEntry(name, webId, securityEntry, applyToChildren);
        // TODO: test validations
    }

}
