/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Attribute;
import org.openapitools.client.model.ItemsAttribute;
import org.openapitools.client.model.ItemsAttributeCategory;
import org.openapitools.client.model.ItemsItemAttribute;
import org.openapitools.client.model.TimedValue;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AttributeApi
 */
@Disabled
public class AttributeApiTest {

    private final AttributeApi api = new AttributeApi();

    /**
     * Create a new attribute as a child of the specified attribute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeCreateAttributeTest() throws ApiException {
        String webId = null;
        Attribute attribute = null;
        String webIdType = null;
        api.attributeCreateAttribute(webId, attribute, webIdType);
        // TODO: test validations
    }

    /**
     * Create or update an attribute&#39;s DataReference configuration (Create/Update PI point for PI Point DataReference).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeCreateConfigTest() throws ApiException {
        String webId = null;
        String webIdType = null;
        api.attributeCreateConfig(webId, webIdType);
        // TODO: test validations
    }

    /**
     * Delete an attribute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeDeleteTest() throws ApiException {
        String webId = null;
        api.attributeDelete(webId);
        // TODO: test validations
    }

    /**
     * Retrieve an attribute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeGetTest() throws ApiException {
        String webId = null;
        String associations = null;
        String selectedFields = null;
        String webIdType = null;
        Attribute response = api.attributeGet(webId, associations, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get the child attributes of the specified attribute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeGetAttributesTest() throws ApiException {
        String webId = null;
        String associations = null;
        String categoryName = null;
        Integer maxCount = null;
        String nameFilter = null;
        Boolean searchFullHierarchy = null;
        String selectedFields = null;
        Boolean showExcluded = null;
        Boolean showHidden = null;
        String sortField = null;
        String sortOrder = null;
        Integer startIndex = null;
        String templateName = null;
        List<String> trait = null;
        List<String> traitCategory = null;
        String valueType = null;
        String webIdType = null;
        ItemsAttribute response = api.attributeGetAttributes(webId, associations, categoryName, maxCount, nameFilter, searchFullHierarchy, selectedFields, showExcluded, showHidden, sortField, sortOrder, startIndex, templateName, trait, traitCategory, valueType, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve attributes based on the specified conditions. Returns attributes using the specified search query string.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeGetAttributesQueryTest() throws ApiException {
        String associations = null;
        String databaseWebId = null;
        Integer maxCount = null;
        String query = null;
        String selectedFields = null;
        Integer startIndex = null;
        String webIdType = null;
        ItemsAttribute response = api.attributeGetAttributesQuery(associations, databaseWebId, maxCount, query, selectedFields, startIndex, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve an attribute by path.
     *
     * This method returns an attribute based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeGetByPathTest() throws ApiException {
        String path = null;
        String associations = null;
        String selectedFields = null;
        String webIdType = null;
        Attribute response = api.attributeGetByPath(path, associations, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get an attribute&#39;s categories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeGetCategoriesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsAttributeCategory response = api.attributeGetCategories(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve multiple attributes by web id or path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeGetMultipleTest() throws ApiException {
        Boolean asParallel = null;
        String associations = null;
        String includeMode = null;
        List<String> path = null;
        String selectedFields = null;
        List<String> webId = null;
        String webIdType = null;
        ItemsItemAttribute response = api.attributeGetMultiple(asParallel, associations, includeMode, path, selectedFields, webId, webIdType);
        // TODO: test validations
    }

    /**
     * Get the attribute&#39;s value. This call is intended for use with attributes that have no data reference only. For attributes with a data reference, consult the documentation for Streams.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeGetValueTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        TimedValue response = api.attributeGetValue(webId, selectedFields);
        // TODO: test validations
    }

    /**
     * Set the value of a configuration item attribute. For attributes with a data reference or non-configuration item attributes, consult the documentation for streams.
     *
     * Users must be aware of the value type that the attribute takes before changing the value. If a value entered by the user does not match the value type expressed in the attribute, it will not work or it will return an error. Users should also be careful of what the value type means, for instance, if a value type accepts strings and the user enters a number, the attribute will interpret it as a string of characters and not as the integer value that the user may have wanted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeSetValueTest() throws ApiException {
        String webId = null;
        TimedValue value = null;
        api.attributeSetValue(webId, value);
        // TODO: test validations
    }

    /**
     * Update an attribute by replacing items in its definition.
     *
     * If an attribute is based on a template, the user must make sure to update the attribute appropriately so that it does not conflict with the template&#39;s design. Once a template is applied to an attribute, it can not be changed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeUpdateTest() throws ApiException {
        String webId = null;
        Attribute attribute = null;
        api.attributeUpdate(webId, attribute);
        // TODO: test validations
    }

}
