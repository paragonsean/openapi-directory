/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssetDatabase;
import org.openapitools.client.model.AssetServer;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsAnalysisRulePlugIn;
import org.openapitools.client.model.ItemsAssetDatabase;
import org.openapitools.client.model.ItemsAssetServer;
import org.openapitools.client.model.ItemsNotificationContactTemplate;
import org.openapitools.client.model.ItemsNotificationPlugIn;
import org.openapitools.client.model.ItemsSecurityEntry;
import org.openapitools.client.model.ItemsSecurityIdentity;
import org.openapitools.client.model.ItemsSecurityMapping;
import org.openapitools.client.model.ItemsSecurityRights;
import org.openapitools.client.model.ItemsTimeRulePlugIn;
import org.openapitools.client.model.ItemsUnitClass;
import org.openapitools.client.model.NotificationContactTemplate;
import org.openapitools.client.model.SecurityEntry;
import org.openapitools.client.model.SecurityIdentity;
import org.openapitools.client.model.SecurityMapping;
import org.openapitools.client.model.UnitClass;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AssetServerApi
 */
@Disabled
public class AssetServerApiTest {

    private final AssetServerApi api = new AssetServerApi();

    /**
     * Create an asset database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerCreateAssetDatabaseTest() throws ApiException {
        String webId = null;
        AssetDatabase database = null;
        String webIdType = null;
        api.assetServerCreateAssetDatabase(webId, database, webIdType);
        // TODO: test validations
    }

    /**
     * Create a notification contact template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerCreateNotificationContactTemplateTest() throws ApiException {
        String webId = null;
        NotificationContactTemplate notificationContactTemplate = null;
        String webIdType = null;
        api.assetServerCreateNotificationContactTemplate(webId, notificationContactTemplate, webIdType);
        // TODO: test validations
    }

    /**
     * Create a security entry owned by the asset server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerCreateSecurityEntryTest() throws ApiException {
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        String securityItem = null;
        String webIdType = null;
        api.assetServerCreateSecurityEntry(webId, securityEntry, applyToChildren, securityItem, webIdType);
        // TODO: test validations
    }

    /**
     * Create a security identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerCreateSecurityIdentityTest() throws ApiException {
        String webId = null;
        SecurityIdentity securityIdentity = null;
        String webIdType = null;
        api.assetServerCreateSecurityIdentity(webId, securityIdentity, webIdType);
        // TODO: test validations
    }

    /**
     * Create a security mapping.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerCreateSecurityMappingTest() throws ApiException {
        String webId = null;
        SecurityMapping securityMapping = null;
        String webIdType = null;
        api.assetServerCreateSecurityMapping(webId, securityMapping, webIdType);
        // TODO: test validations
    }

    /**
     * Create a unit class in the specified Asset Server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerCreateUnitClassTest() throws ApiException {
        String webId = null;
        UnitClass unitClass = null;
        String webIdType = null;
        api.assetServerCreateUnitClass(webId, unitClass, webIdType);
        // TODO: test validations
    }

    /**
     * Delete a security entry owned by the asset server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerDeleteSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        Boolean applyToChildren = null;
        String securityItem = null;
        api.assetServerDeleteSecurityEntry(name, webId, applyToChildren, securityItem);
        // TODO: test validations
    }

    /**
     * Retrieve an Asset Server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerGetTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        AssetServer response = api.assetServerGet(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Analysis Rule Plug-in&#39;s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerGetAnalysisRulePlugInsTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsAnalysisRulePlugIn response = api.assetServerGetAnalysisRulePlugIns(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve an Asset Server by name.
     *
     * This method returns an asset server based on the name associated with it. Users should primarily search with the WebID when available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerGetByNameTest() throws ApiException {
        String name = null;
        String selectedFields = null;
        String webIdType = null;
        AssetServer response = api.assetServerGetByName(name, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve an Asset Server by path.
     *
     * This method returns an asset server based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerGetByPathTest() throws ApiException {
        String path = null;
        String selectedFields = null;
        String webIdType = null;
        AssetServer response = api.assetServerGetByPath(path, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Asset Databases on the specified Asset Server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerGetDatabasesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsAssetDatabase response = api.assetServerGetDatabases(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all notification contact templates on the specified Asset Server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerGetNotificationContactTemplatesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsNotificationContactTemplate response = api.assetServerGetNotificationContactTemplates(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all notification plugins on the specified Asset Server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerGetNotificationPlugInsTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsNotificationPlugIn response = api.assetServerGetNotificationPlugIns(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get the security information of the specified security item associated with the asset server for a specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerGetSecurityTest() throws ApiException {
        String webId = null;
        List<String> securityItem = null;
        List<String> userIdentity = null;
        Boolean forceRefresh = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityRights response = api.assetServerGetSecurity(webId, securityItem, userIdentity, forceRefresh, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entries of the specified security item associated with the asset server based on the specified criteria. By default, all security entries for this asset server are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerGetSecurityEntriesTest() throws ApiException {
        String webId = null;
        String nameFilter = null;
        String securityItem = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityEntry response = api.assetServerGetSecurityEntries(webId, nameFilter, securityItem, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entry of the specified security item associated with the asset server with the specified name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerGetSecurityEntryByNameTest() throws ApiException {
        String name = null;
        String webId = null;
        String securityItem = null;
        String selectedFields = null;
        String webIdType = null;
        SecurityEntry response = api.assetServerGetSecurityEntryByName(name, webId, securityItem, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve security identities based on the specified criteria. By default, all security identities in the specified Asset Server are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerGetSecurityIdentitiesTest() throws ApiException {
        String webId = null;
        String field = null;
        Integer maxCount = null;
        String query = null;
        String selectedFields = null;
        String sortField = null;
        String sortOrder = null;
        String webIdType = null;
        ItemsSecurityIdentity response = api.assetServerGetSecurityIdentities(webId, field, maxCount, query, selectedFields, sortField, sortOrder, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve security identities for a specific user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerGetSecurityIdentitiesForUserTest() throws ApiException {
        String webId = null;
        String userIdentity = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityIdentity response = api.assetServerGetSecurityIdentitiesForUser(webId, userIdentity, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve security mappings based on the specified criteria. By default, all security mappings in the specified Asset Server are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerGetSecurityMappingsTest() throws ApiException {
        String webId = null;
        String field = null;
        Integer maxCount = null;
        String query = null;
        String selectedFields = null;
        String sortField = null;
        String sortOrder = null;
        String webIdType = null;
        ItemsSecurityMapping response = api.assetServerGetSecurityMappings(webId, field, maxCount, query, selectedFields, sortField, sortOrder, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Time Rule Plug-in&#39;s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerGetTimeRulePlugInsTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsTimeRulePlugIn response = api.assetServerGetTimeRulePlugIns(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all unit classes on the specified Asset Server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerGetUnitClassesTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsUnitClass response = api.assetServerGetUnitClasses(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Asset Servers known to this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerListTest() throws ApiException {
        String selectedFields = null;
        String webIdType = null;
        ItemsAssetServer response = api.assetServerList(selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Update a security entry owned by the asset server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetServerUpdateSecurityEntryTest() throws ApiException {
        String name = null;
        String webId = null;
        SecurityEntry securityEntry = null;
        Boolean applyToChildren = null;
        String securityItem = null;
        api.assetServerUpdateSecurityEntry(name, webId, securityEntry, applyToChildren, securityItem);
        // TODO: test validations
    }

}
