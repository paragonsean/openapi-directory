/*
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.ItemsSecurityEntry;
import org.openapitools.client.model.ItemsSecurityMapping;
import org.openapitools.client.model.ItemsSecurityRights;
import org.openapitools.client.model.SecurityEntry;
import org.openapitools.client.model.SecurityIdentity;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SecurityIdentityApi
 */
@Disabled
public class SecurityIdentityApiTest {

    private final SecurityIdentityApi api = new SecurityIdentityApi();

    /**
     * Delete a security identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityIdentityDeleteTest() throws ApiException {
        String webId = null;
        api.securityIdentityDelete(webId);
        // TODO: test validations
    }

    /**
     * Retrieve a security identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityIdentityGetTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        SecurityIdentity response = api.securityIdentityGet(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve a security identity by path.
     *
     * This method returns a security identity based on the path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityIdentityGetByPathTest() throws ApiException {
        String path = null;
        String selectedFields = null;
        String webIdType = null;
        SecurityIdentity response = api.securityIdentityGetByPath(path, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get the security information of the specified security item associated with the security identity for a specified user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityIdentityGetSecurityTest() throws ApiException {
        String webId = null;
        List<String> userIdentity = null;
        Boolean forceRefresh = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityRights response = api.securityIdentityGetSecurity(webId, userIdentity, forceRefresh, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entries associated with the security identity based on the specified criteria. By default, all security entries for this security identity are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityIdentityGetSecurityEntriesTest() throws ApiException {
        String webId = null;
        String nameFilter = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityEntry response = api.securityIdentityGetSecurityEntries(webId, nameFilter, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Retrieve the security entry associated with the security identity with the specified name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityIdentityGetSecurityEntryByNameTest() throws ApiException {
        String name = null;
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        SecurityEntry response = api.securityIdentityGetSecurityEntryByName(name, webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Get security mappings for the specified security identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityIdentityGetSecurityMappingsTest() throws ApiException {
        String webId = null;
        String selectedFields = null;
        String webIdType = null;
        ItemsSecurityMapping response = api.securityIdentityGetSecurityMappings(webId, selectedFields, webIdType);
        // TODO: test validations
    }

    /**
     * Update a security identity by replacing items in its definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void securityIdentityUpdateTest() throws ApiException {
        String webId = null;
        SecurityIdentity securityIdentity = null;
        api.securityIdentityUpdate(webId, securityIdentity);
        // TODO: test validations
    }

}
