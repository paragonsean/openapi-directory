# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ElementTemplateLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_templates: str=None, attribute_templates: str=None, base_template: str=None, base_templates: str=None, categories: str=None, database: str=None, default_attribute: str=None, derived_templates: str=None, notification_rule_templates: str=None, security: str=None, security_entries: str=None, _self: str=None):
        """ElementTemplateLinks - a model defined in OpenAPI

        :param analysis_templates: The analysis_templates of this ElementTemplateLinks.
        :param attribute_templates: The attribute_templates of this ElementTemplateLinks.
        :param base_template: The base_template of this ElementTemplateLinks.
        :param base_templates: The base_templates of this ElementTemplateLinks.
        :param categories: The categories of this ElementTemplateLinks.
        :param database: The database of this ElementTemplateLinks.
        :param default_attribute: The default_attribute of this ElementTemplateLinks.
        :param derived_templates: The derived_templates of this ElementTemplateLinks.
        :param notification_rule_templates: The notification_rule_templates of this ElementTemplateLinks.
        :param security: The security of this ElementTemplateLinks.
        :param security_entries: The security_entries of this ElementTemplateLinks.
        :param _self: The _self of this ElementTemplateLinks.
        """
        self.openapi_types = {
            'analysis_templates': str,
            'attribute_templates': str,
            'base_template': str,
            'base_templates': str,
            'categories': str,
            'database': str,
            'default_attribute': str,
            'derived_templates': str,
            'notification_rule_templates': str,
            'security': str,
            'security_entries': str,
            '_self': str
        }

        self.attribute_map = {
            'analysis_templates': 'AnalysisTemplates',
            'attribute_templates': 'AttributeTemplates',
            'base_template': 'BaseTemplate',
            'base_templates': 'BaseTemplates',
            'categories': 'Categories',
            'database': 'Database',
            'default_attribute': 'DefaultAttribute',
            'derived_templates': 'DerivedTemplates',
            'notification_rule_templates': 'NotificationRuleTemplates',
            'security': 'Security',
            'security_entries': 'SecurityEntries',
            '_self': 'Self'
        }

        self._analysis_templates = analysis_templates
        self._attribute_templates = attribute_templates
        self._base_template = base_template
        self._base_templates = base_templates
        self._categories = categories
        self._database = database
        self._default_attribute = default_attribute
        self._derived_templates = derived_templates
        self._notification_rule_templates = notification_rule_templates
        self._security = security
        self._security_entries = security_entries
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElementTemplateLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElementTemplateLinks of this ElementTemplateLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_templates(self):
        """Gets the analysis_templates of this ElementTemplateLinks.


        :return: The analysis_templates of this ElementTemplateLinks.
        :rtype: str
        """
        return self._analysis_templates

    @analysis_templates.setter
    def analysis_templates(self, analysis_templates):
        """Sets the analysis_templates of this ElementTemplateLinks.


        :param analysis_templates: The analysis_templates of this ElementTemplateLinks.
        :type analysis_templates: str
        """

        self._analysis_templates = analysis_templates

    @property
    def attribute_templates(self):
        """Gets the attribute_templates of this ElementTemplateLinks.


        :return: The attribute_templates of this ElementTemplateLinks.
        :rtype: str
        """
        return self._attribute_templates

    @attribute_templates.setter
    def attribute_templates(self, attribute_templates):
        """Sets the attribute_templates of this ElementTemplateLinks.


        :param attribute_templates: The attribute_templates of this ElementTemplateLinks.
        :type attribute_templates: str
        """

        self._attribute_templates = attribute_templates

    @property
    def base_template(self):
        """Gets the base_template of this ElementTemplateLinks.


        :return: The base_template of this ElementTemplateLinks.
        :rtype: str
        """
        return self._base_template

    @base_template.setter
    def base_template(self, base_template):
        """Sets the base_template of this ElementTemplateLinks.


        :param base_template: The base_template of this ElementTemplateLinks.
        :type base_template: str
        """

        self._base_template = base_template

    @property
    def base_templates(self):
        """Gets the base_templates of this ElementTemplateLinks.


        :return: The base_templates of this ElementTemplateLinks.
        :rtype: str
        """
        return self._base_templates

    @base_templates.setter
    def base_templates(self, base_templates):
        """Sets the base_templates of this ElementTemplateLinks.


        :param base_templates: The base_templates of this ElementTemplateLinks.
        :type base_templates: str
        """

        self._base_templates = base_templates

    @property
    def categories(self):
        """Gets the categories of this ElementTemplateLinks.


        :return: The categories of this ElementTemplateLinks.
        :rtype: str
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ElementTemplateLinks.


        :param categories: The categories of this ElementTemplateLinks.
        :type categories: str
        """

        self._categories = categories

    @property
    def database(self):
        """Gets the database of this ElementTemplateLinks.


        :return: The database of this ElementTemplateLinks.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this ElementTemplateLinks.


        :param database: The database of this ElementTemplateLinks.
        :type database: str
        """

        self._database = database

    @property
    def default_attribute(self):
        """Gets the default_attribute of this ElementTemplateLinks.


        :return: The default_attribute of this ElementTemplateLinks.
        :rtype: str
        """
        return self._default_attribute

    @default_attribute.setter
    def default_attribute(self, default_attribute):
        """Sets the default_attribute of this ElementTemplateLinks.


        :param default_attribute: The default_attribute of this ElementTemplateLinks.
        :type default_attribute: str
        """

        self._default_attribute = default_attribute

    @property
    def derived_templates(self):
        """Gets the derived_templates of this ElementTemplateLinks.


        :return: The derived_templates of this ElementTemplateLinks.
        :rtype: str
        """
        return self._derived_templates

    @derived_templates.setter
    def derived_templates(self, derived_templates):
        """Sets the derived_templates of this ElementTemplateLinks.


        :param derived_templates: The derived_templates of this ElementTemplateLinks.
        :type derived_templates: str
        """

        self._derived_templates = derived_templates

    @property
    def notification_rule_templates(self):
        """Gets the notification_rule_templates of this ElementTemplateLinks.


        :return: The notification_rule_templates of this ElementTemplateLinks.
        :rtype: str
        """
        return self._notification_rule_templates

    @notification_rule_templates.setter
    def notification_rule_templates(self, notification_rule_templates):
        """Sets the notification_rule_templates of this ElementTemplateLinks.


        :param notification_rule_templates: The notification_rule_templates of this ElementTemplateLinks.
        :type notification_rule_templates: str
        """

        self._notification_rule_templates = notification_rule_templates

    @property
    def security(self):
        """Gets the security of this ElementTemplateLinks.


        :return: The security of this ElementTemplateLinks.
        :rtype: str
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this ElementTemplateLinks.


        :param security: The security of this ElementTemplateLinks.
        :type security: str
        """

        self._security = security

    @property
    def security_entries(self):
        """Gets the security_entries of this ElementTemplateLinks.


        :return: The security_entries of this ElementTemplateLinks.
        :rtype: str
        """
        return self._security_entries

    @security_entries.setter
    def security_entries(self, security_entries):
        """Sets the security_entries of this ElementTemplateLinks.


        :param security_entries: The security_entries of this ElementTemplateLinks.
        :type security_entries: str
        """

        self._security_entries = security_entries

    @property
    def _self(self):
        """Gets the _self of this ElementTemplateLinks.


        :return: The _self of this ElementTemplateLinks.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ElementTemplateLinks.


        :param _self: The _self of this ElementTemplateLinks.
        :type _self: str
        """

        self.__self = _self
