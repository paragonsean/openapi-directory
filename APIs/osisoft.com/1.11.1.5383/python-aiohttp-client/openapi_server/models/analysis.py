# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_links import AnalysisLinks
from openapi_server.models.web_exception import WebException
from openapi_server import util


class Analysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_rule_plug_in_name: str=None, auto_created: bool=None, category_names: List[str]=None, description: str=None, group_id: int=None, has_notification: bool=None, has_target: bool=None, has_template: bool=None, id: str=None, is_configured: bool=None, is_time_rule_defined_by_template: bool=None, links: AnalysisLinks=None, maximum_queue_size: int=None, name: str=None, output_time: str=None, path: str=None, priority: str=None, publish_results: bool=None, status: str=None, target_web_id: str=None, template_name: str=None, time_rule_plug_in_name: str=None, web_exception: WebException=None, web_id: str=None):
        """Analysis - a model defined in OpenAPI

        :param analysis_rule_plug_in_name: The analysis_rule_plug_in_name of this Analysis.
        :param auto_created: The auto_created of this Analysis.
        :param category_names: The category_names of this Analysis.
        :param description: The description of this Analysis.
        :param group_id: The group_id of this Analysis.
        :param has_notification: The has_notification of this Analysis.
        :param has_target: The has_target of this Analysis.
        :param has_template: The has_template of this Analysis.
        :param id: The id of this Analysis.
        :param is_configured: The is_configured of this Analysis.
        :param is_time_rule_defined_by_template: The is_time_rule_defined_by_template of this Analysis.
        :param links: The links of this Analysis.
        :param maximum_queue_size: The maximum_queue_size of this Analysis.
        :param name: The name of this Analysis.
        :param output_time: The output_time of this Analysis.
        :param path: The path of this Analysis.
        :param priority: The priority of this Analysis.
        :param publish_results: The publish_results of this Analysis.
        :param status: The status of this Analysis.
        :param target_web_id: The target_web_id of this Analysis.
        :param template_name: The template_name of this Analysis.
        :param time_rule_plug_in_name: The time_rule_plug_in_name of this Analysis.
        :param web_exception: The web_exception of this Analysis.
        :param web_id: The web_id of this Analysis.
        """
        self.openapi_types = {
            'analysis_rule_plug_in_name': str,
            'auto_created': bool,
            'category_names': List[str],
            'description': str,
            'group_id': int,
            'has_notification': bool,
            'has_target': bool,
            'has_template': bool,
            'id': str,
            'is_configured': bool,
            'is_time_rule_defined_by_template': bool,
            'links': AnalysisLinks,
            'maximum_queue_size': int,
            'name': str,
            'output_time': str,
            'path': str,
            'priority': str,
            'publish_results': bool,
            'status': str,
            'target_web_id': str,
            'template_name': str,
            'time_rule_plug_in_name': str,
            'web_exception': WebException,
            'web_id': str
        }

        self.attribute_map = {
            'analysis_rule_plug_in_name': 'AnalysisRulePlugInName',
            'auto_created': 'AutoCreated',
            'category_names': 'CategoryNames',
            'description': 'Description',
            'group_id': 'GroupId',
            'has_notification': 'HasNotification',
            'has_target': 'HasTarget',
            'has_template': 'HasTemplate',
            'id': 'Id',
            'is_configured': 'IsConfigured',
            'is_time_rule_defined_by_template': 'IsTimeRuleDefinedByTemplate',
            'links': 'Links',
            'maximum_queue_size': 'MaximumQueueSize',
            'name': 'Name',
            'output_time': 'OutputTime',
            'path': 'Path',
            'priority': 'Priority',
            'publish_results': 'PublishResults',
            'status': 'Status',
            'target_web_id': 'TargetWebId',
            'template_name': 'TemplateName',
            'time_rule_plug_in_name': 'TimeRulePlugInName',
            'web_exception': 'WebException',
            'web_id': 'WebId'
        }

        self._analysis_rule_plug_in_name = analysis_rule_plug_in_name
        self._auto_created = auto_created
        self._category_names = category_names
        self._description = description
        self._group_id = group_id
        self._has_notification = has_notification
        self._has_target = has_target
        self._has_template = has_template
        self._id = id
        self._is_configured = is_configured
        self._is_time_rule_defined_by_template = is_time_rule_defined_by_template
        self._links = links
        self._maximum_queue_size = maximum_queue_size
        self._name = name
        self._output_time = output_time
        self._path = path
        self._priority = priority
        self._publish_results = publish_results
        self._status = status
        self._target_web_id = target_web_id
        self._template_name = template_name
        self._time_rule_plug_in_name = time_rule_plug_in_name
        self._web_exception = web_exception
        self._web_id = web_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Analysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Analysis of this Analysis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_rule_plug_in_name(self):
        """Gets the analysis_rule_plug_in_name of this Analysis.


        :return: The analysis_rule_plug_in_name of this Analysis.
        :rtype: str
        """
        return self._analysis_rule_plug_in_name

    @analysis_rule_plug_in_name.setter
    def analysis_rule_plug_in_name(self, analysis_rule_plug_in_name):
        """Sets the analysis_rule_plug_in_name of this Analysis.


        :param analysis_rule_plug_in_name: The analysis_rule_plug_in_name of this Analysis.
        :type analysis_rule_plug_in_name: str
        """

        self._analysis_rule_plug_in_name = analysis_rule_plug_in_name

    @property
    def auto_created(self):
        """Gets the auto_created of this Analysis.


        :return: The auto_created of this Analysis.
        :rtype: bool
        """
        return self._auto_created

    @auto_created.setter
    def auto_created(self, auto_created):
        """Sets the auto_created of this Analysis.


        :param auto_created: The auto_created of this Analysis.
        :type auto_created: bool
        """

        self._auto_created = auto_created

    @property
    def category_names(self):
        """Gets the category_names of this Analysis.


        :return: The category_names of this Analysis.
        :rtype: List[str]
        """
        return self._category_names

    @category_names.setter
    def category_names(self, category_names):
        """Sets the category_names of this Analysis.


        :param category_names: The category_names of this Analysis.
        :type category_names: List[str]
        """

        self._category_names = category_names

    @property
    def description(self):
        """Gets the description of this Analysis.


        :return: The description of this Analysis.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Analysis.


        :param description: The description of this Analysis.
        :type description: str
        """

        self._description = description

    @property
    def group_id(self):
        """Gets the group_id of this Analysis.


        :return: The group_id of this Analysis.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Analysis.


        :param group_id: The group_id of this Analysis.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def has_notification(self):
        """Gets the has_notification of this Analysis.


        :return: The has_notification of this Analysis.
        :rtype: bool
        """
        return self._has_notification

    @has_notification.setter
    def has_notification(self, has_notification):
        """Sets the has_notification of this Analysis.


        :param has_notification: The has_notification of this Analysis.
        :type has_notification: bool
        """

        self._has_notification = has_notification

    @property
    def has_target(self):
        """Gets the has_target of this Analysis.


        :return: The has_target of this Analysis.
        :rtype: bool
        """
        return self._has_target

    @has_target.setter
    def has_target(self, has_target):
        """Sets the has_target of this Analysis.


        :param has_target: The has_target of this Analysis.
        :type has_target: bool
        """

        self._has_target = has_target

    @property
    def has_template(self):
        """Gets the has_template of this Analysis.


        :return: The has_template of this Analysis.
        :rtype: bool
        """
        return self._has_template

    @has_template.setter
    def has_template(self, has_template):
        """Sets the has_template of this Analysis.


        :param has_template: The has_template of this Analysis.
        :type has_template: bool
        """

        self._has_template = has_template

    @property
    def id(self):
        """Gets the id of this Analysis.


        :return: The id of this Analysis.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Analysis.


        :param id: The id of this Analysis.
        :type id: str
        """

        self._id = id

    @property
    def is_configured(self):
        """Gets the is_configured of this Analysis.


        :return: The is_configured of this Analysis.
        :rtype: bool
        """
        return self._is_configured

    @is_configured.setter
    def is_configured(self, is_configured):
        """Sets the is_configured of this Analysis.


        :param is_configured: The is_configured of this Analysis.
        :type is_configured: bool
        """

        self._is_configured = is_configured

    @property
    def is_time_rule_defined_by_template(self):
        """Gets the is_time_rule_defined_by_template of this Analysis.


        :return: The is_time_rule_defined_by_template of this Analysis.
        :rtype: bool
        """
        return self._is_time_rule_defined_by_template

    @is_time_rule_defined_by_template.setter
    def is_time_rule_defined_by_template(self, is_time_rule_defined_by_template):
        """Sets the is_time_rule_defined_by_template of this Analysis.


        :param is_time_rule_defined_by_template: The is_time_rule_defined_by_template of this Analysis.
        :type is_time_rule_defined_by_template: bool
        """

        self._is_time_rule_defined_by_template = is_time_rule_defined_by_template

    @property
    def links(self):
        """Gets the links of this Analysis.


        :return: The links of this Analysis.
        :rtype: AnalysisLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Analysis.


        :param links: The links of this Analysis.
        :type links: AnalysisLinks
        """

        self._links = links

    @property
    def maximum_queue_size(self):
        """Gets the maximum_queue_size of this Analysis.


        :return: The maximum_queue_size of this Analysis.
        :rtype: int
        """
        return self._maximum_queue_size

    @maximum_queue_size.setter
    def maximum_queue_size(self, maximum_queue_size):
        """Sets the maximum_queue_size of this Analysis.


        :param maximum_queue_size: The maximum_queue_size of this Analysis.
        :type maximum_queue_size: int
        """

        self._maximum_queue_size = maximum_queue_size

    @property
    def name(self):
        """Gets the name of this Analysis.


        :return: The name of this Analysis.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Analysis.


        :param name: The name of this Analysis.
        :type name: str
        """

        self._name = name

    @property
    def output_time(self):
        """Gets the output_time of this Analysis.


        :return: The output_time of this Analysis.
        :rtype: str
        """
        return self._output_time

    @output_time.setter
    def output_time(self, output_time):
        """Sets the output_time of this Analysis.


        :param output_time: The output_time of this Analysis.
        :type output_time: str
        """

        self._output_time = output_time

    @property
    def path(self):
        """Gets the path of this Analysis.


        :return: The path of this Analysis.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Analysis.


        :param path: The path of this Analysis.
        :type path: str
        """

        self._path = path

    @property
    def priority(self):
        """Gets the priority of this Analysis.


        :return: The priority of this Analysis.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Analysis.


        :param priority: The priority of this Analysis.
        :type priority: str
        """

        self._priority = priority

    @property
    def publish_results(self):
        """Gets the publish_results of this Analysis.


        :return: The publish_results of this Analysis.
        :rtype: bool
        """
        return self._publish_results

    @publish_results.setter
    def publish_results(self, publish_results):
        """Sets the publish_results of this Analysis.


        :param publish_results: The publish_results of this Analysis.
        :type publish_results: bool
        """

        self._publish_results = publish_results

    @property
    def status(self):
        """Gets the status of this Analysis.


        :return: The status of this Analysis.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Analysis.


        :param status: The status of this Analysis.
        :type status: str
        """

        self._status = status

    @property
    def target_web_id(self):
        """Gets the target_web_id of this Analysis.


        :return: The target_web_id of this Analysis.
        :rtype: str
        """
        return self._target_web_id

    @target_web_id.setter
    def target_web_id(self, target_web_id):
        """Sets the target_web_id of this Analysis.


        :param target_web_id: The target_web_id of this Analysis.
        :type target_web_id: str
        """

        self._target_web_id = target_web_id

    @property
    def template_name(self):
        """Gets the template_name of this Analysis.


        :return: The template_name of this Analysis.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this Analysis.


        :param template_name: The template_name of this Analysis.
        :type template_name: str
        """

        self._template_name = template_name

    @property
    def time_rule_plug_in_name(self):
        """Gets the time_rule_plug_in_name of this Analysis.


        :return: The time_rule_plug_in_name of this Analysis.
        :rtype: str
        """
        return self._time_rule_plug_in_name

    @time_rule_plug_in_name.setter
    def time_rule_plug_in_name(self, time_rule_plug_in_name):
        """Sets the time_rule_plug_in_name of this Analysis.


        :param time_rule_plug_in_name: The time_rule_plug_in_name of this Analysis.
        :type time_rule_plug_in_name: str
        """

        self._time_rule_plug_in_name = time_rule_plug_in_name

    @property
    def web_exception(self):
        """Gets the web_exception of this Analysis.


        :return: The web_exception of this Analysis.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this Analysis.


        :param web_exception: The web_exception of this Analysis.
        :type web_exception: WebException
        """

        self._web_exception = web_exception

    @property
    def web_id(self):
        """Gets the web_id of this Analysis.


        :return: The web_id of this Analysis.
        :rtype: str
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this Analysis.


        :param web_id: The web_id of this Analysis.
        :type web_id: str
        """

        self._web_id = web_id
