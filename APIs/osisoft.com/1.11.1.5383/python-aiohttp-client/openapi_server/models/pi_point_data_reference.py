# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PIPointDataReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, descriptor: str=None, digital_set_name: str=None, display_digits: int=None, engineering_units: str=None, future: bool=None, id: int=None, name: str=None, path: str=None, point_class: str=None, point_type: str=None, span: float=None, step: bool=None, web_id: str=None, zero: float=None):
        """PIPointDataReference - a model defined in OpenAPI

        :param descriptor: The descriptor of this PIPointDataReference.
        :param digital_set_name: The digital_set_name of this PIPointDataReference.
        :param display_digits: The display_digits of this PIPointDataReference.
        :param engineering_units: The engineering_units of this PIPointDataReference.
        :param future: The future of this PIPointDataReference.
        :param id: The id of this PIPointDataReference.
        :param name: The name of this PIPointDataReference.
        :param path: The path of this PIPointDataReference.
        :param point_class: The point_class of this PIPointDataReference.
        :param point_type: The point_type of this PIPointDataReference.
        :param span: The span of this PIPointDataReference.
        :param step: The step of this PIPointDataReference.
        :param web_id: The web_id of this PIPointDataReference.
        :param zero: The zero of this PIPointDataReference.
        """
        self.openapi_types = {
            'descriptor': str,
            'digital_set_name': str,
            'display_digits': int,
            'engineering_units': str,
            'future': bool,
            'id': int,
            'name': str,
            'path': str,
            'point_class': str,
            'point_type': str,
            'span': float,
            'step': bool,
            'web_id': str,
            'zero': float
        }

        self.attribute_map = {
            'descriptor': 'Descriptor',
            'digital_set_name': 'DigitalSetName',
            'display_digits': 'DisplayDigits',
            'engineering_units': 'EngineeringUnits',
            'future': 'Future',
            'id': 'Id',
            'name': 'Name',
            'path': 'Path',
            'point_class': 'PointClass',
            'point_type': 'PointType',
            'span': 'Span',
            'step': 'Step',
            'web_id': 'WebId',
            'zero': 'Zero'
        }

        self._descriptor = descriptor
        self._digital_set_name = digital_set_name
        self._display_digits = display_digits
        self._engineering_units = engineering_units
        self._future = future
        self._id = id
        self._name = name
        self._path = path
        self._point_class = point_class
        self._point_type = point_type
        self._span = span
        self._step = step
        self._web_id = web_id
        self._zero = zero

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PIPointDataReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PIPointDataReference of this PIPointDataReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def descriptor(self):
        """Gets the descriptor of this PIPointDataReference.


        :return: The descriptor of this PIPointDataReference.
        :rtype: str
        """
        return self._descriptor

    @descriptor.setter
    def descriptor(self, descriptor):
        """Sets the descriptor of this PIPointDataReference.


        :param descriptor: The descriptor of this PIPointDataReference.
        :type descriptor: str
        """

        self._descriptor = descriptor

    @property
    def digital_set_name(self):
        """Gets the digital_set_name of this PIPointDataReference.


        :return: The digital_set_name of this PIPointDataReference.
        :rtype: str
        """
        return self._digital_set_name

    @digital_set_name.setter
    def digital_set_name(self, digital_set_name):
        """Sets the digital_set_name of this PIPointDataReference.


        :param digital_set_name: The digital_set_name of this PIPointDataReference.
        :type digital_set_name: str
        """

        self._digital_set_name = digital_set_name

    @property
    def display_digits(self):
        """Gets the display_digits of this PIPointDataReference.


        :return: The display_digits of this PIPointDataReference.
        :rtype: int
        """
        return self._display_digits

    @display_digits.setter
    def display_digits(self, display_digits):
        """Sets the display_digits of this PIPointDataReference.


        :param display_digits: The display_digits of this PIPointDataReference.
        :type display_digits: int
        """

        self._display_digits = display_digits

    @property
    def engineering_units(self):
        """Gets the engineering_units of this PIPointDataReference.


        :return: The engineering_units of this PIPointDataReference.
        :rtype: str
        """
        return self._engineering_units

    @engineering_units.setter
    def engineering_units(self, engineering_units):
        """Sets the engineering_units of this PIPointDataReference.


        :param engineering_units: The engineering_units of this PIPointDataReference.
        :type engineering_units: str
        """

        self._engineering_units = engineering_units

    @property
    def future(self):
        """Gets the future of this PIPointDataReference.


        :return: The future of this PIPointDataReference.
        :rtype: bool
        """
        return self._future

    @future.setter
    def future(self, future):
        """Sets the future of this PIPointDataReference.


        :param future: The future of this PIPointDataReference.
        :type future: bool
        """

        self._future = future

    @property
    def id(self):
        """Gets the id of this PIPointDataReference.


        :return: The id of this PIPointDataReference.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PIPointDataReference.


        :param id: The id of this PIPointDataReference.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PIPointDataReference.


        :return: The name of this PIPointDataReference.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PIPointDataReference.


        :param name: The name of this PIPointDataReference.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this PIPointDataReference.


        :return: The path of this PIPointDataReference.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PIPointDataReference.


        :param path: The path of this PIPointDataReference.
        :type path: str
        """

        self._path = path

    @property
    def point_class(self):
        """Gets the point_class of this PIPointDataReference.


        :return: The point_class of this PIPointDataReference.
        :rtype: str
        """
        return self._point_class

    @point_class.setter
    def point_class(self, point_class):
        """Sets the point_class of this PIPointDataReference.


        :param point_class: The point_class of this PIPointDataReference.
        :type point_class: str
        """

        self._point_class = point_class

    @property
    def point_type(self):
        """Gets the point_type of this PIPointDataReference.


        :return: The point_type of this PIPointDataReference.
        :rtype: str
        """
        return self._point_type

    @point_type.setter
    def point_type(self, point_type):
        """Sets the point_type of this PIPointDataReference.


        :param point_type: The point_type of this PIPointDataReference.
        :type point_type: str
        """

        self._point_type = point_type

    @property
    def span(self):
        """Gets the span of this PIPointDataReference.


        :return: The span of this PIPointDataReference.
        :rtype: float
        """
        return self._span

    @span.setter
    def span(self, span):
        """Sets the span of this PIPointDataReference.


        :param span: The span of this PIPointDataReference.
        :type span: float
        """

        self._span = span

    @property
    def step(self):
        """Gets the step of this PIPointDataReference.


        :return: The step of this PIPointDataReference.
        :rtype: bool
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this PIPointDataReference.


        :param step: The step of this PIPointDataReference.
        :type step: bool
        """

        self._step = step

    @property
    def web_id(self):
        """Gets the web_id of this PIPointDataReference.


        :return: The web_id of this PIPointDataReference.
        :rtype: str
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this PIPointDataReference.


        :param web_id: The web_id of this PIPointDataReference.
        :type web_id: str
        """

        self._web_id = web_id

    @property
    def zero(self):
        """Gets the zero of this PIPointDataReference.


        :return: The zero of this PIPointDataReference.
        :rtype: float
        """
        return self._zero

    @zero.setter
    def zero(self, zero):
        """Sets the zero of this PIPointDataReference.


        :param zero: The zero of this PIPointDataReference.
        :type zero: float
        """

        self._zero = zero
