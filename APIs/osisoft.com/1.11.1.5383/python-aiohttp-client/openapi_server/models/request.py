# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.request_template import RequestTemplate
from openapi_server import util


class Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, headers: Dict[str, str]=None, method: str=None, parameters: List[str]=None, parent_ids: List[str]=None, request_template: RequestTemplate=None, resource: str=None):
        """Request - a model defined in OpenAPI

        :param content: The content of this Request.
        :param headers: The headers of this Request.
        :param method: The method of this Request.
        :param parameters: The parameters of this Request.
        :param parent_ids: The parent_ids of this Request.
        :param request_template: The request_template of this Request.
        :param resource: The resource of this Request.
        """
        self.openapi_types = {
            'content': str,
            'headers': Dict[str, str],
            'method': str,
            'parameters': List[str],
            'parent_ids': List[str],
            'request_template': RequestTemplate,
            'resource': str
        }

        self.attribute_map = {
            'content': 'Content',
            'headers': 'Headers',
            'method': 'Method',
            'parameters': 'Parameters',
            'parent_ids': 'ParentIds',
            'request_template': 'RequestTemplate',
            'resource': 'Resource'
        }

        self._content = content
        self._headers = headers
        self._method = method
        self._parameters = parameters
        self._parent_ids = parent_ids
        self._request_template = request_template
        self._resource = resource

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request of this Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this Request.


        :return: The content of this Request.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Request.


        :param content: The content of this Request.
        :type content: str
        """

        self._content = content

    @property
    def headers(self):
        """Gets the headers of this Request.


        :return: The headers of this Request.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Request.


        :param headers: The headers of this Request.
        :type headers: Dict[str, str]
        """

        self._headers = headers

    @property
    def method(self):
        """Gets the method of this Request.


        :return: The method of this Request.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Request.


        :param method: The method of this Request.
        :type method: str
        """

        self._method = method

    @property
    def parameters(self):
        """Gets the parameters of this Request.


        :return: The parameters of this Request.
        :rtype: List[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Request.


        :param parameters: The parameters of this Request.
        :type parameters: List[str]
        """

        self._parameters = parameters

    @property
    def parent_ids(self):
        """Gets the parent_ids of this Request.


        :return: The parent_ids of this Request.
        :rtype: List[str]
        """
        return self._parent_ids

    @parent_ids.setter
    def parent_ids(self, parent_ids):
        """Sets the parent_ids of this Request.


        :param parent_ids: The parent_ids of this Request.
        :type parent_ids: List[str]
        """

        self._parent_ids = parent_ids

    @property
    def request_template(self):
        """Gets the request_template of this Request.


        :return: The request_template of this Request.
        :rtype: RequestTemplate
        """
        return self._request_template

    @request_template.setter
    def request_template(self, request_template):
        """Sets the request_template of this Request.


        :param request_template: The request_template of this Request.
        :type request_template: RequestTemplate
        """

        self._request_template = request_template

    @property
    def resource(self):
        """Gets the resource of this Request.


        :return: The resource of this Request.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Request.


        :param resource: The resource of this Request.
        :type resource: str
        """

        self._resource = resource
