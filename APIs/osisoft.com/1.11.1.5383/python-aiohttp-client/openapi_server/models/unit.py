# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.unit_links import UnitLinks
from openapi_server.models.web_exception import WebException
from openapi_server import util


class Unit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abbreviation: str=None, description: str=None, factor: float=None, id: str=None, links: UnitLinks=None, name: str=None, offset: float=None, path: str=None, reference_factor: float=None, reference_offset: float=None, reference_unit_abbreviation: str=None, web_exception: WebException=None, web_id: str=None):
        """Unit - a model defined in OpenAPI

        :param abbreviation: The abbreviation of this Unit.
        :param description: The description of this Unit.
        :param factor: The factor of this Unit.
        :param id: The id of this Unit.
        :param links: The links of this Unit.
        :param name: The name of this Unit.
        :param offset: The offset of this Unit.
        :param path: The path of this Unit.
        :param reference_factor: The reference_factor of this Unit.
        :param reference_offset: The reference_offset of this Unit.
        :param reference_unit_abbreviation: The reference_unit_abbreviation of this Unit.
        :param web_exception: The web_exception of this Unit.
        :param web_id: The web_id of this Unit.
        """
        self.openapi_types = {
            'abbreviation': str,
            'description': str,
            'factor': float,
            'id': str,
            'links': UnitLinks,
            'name': str,
            'offset': float,
            'path': str,
            'reference_factor': float,
            'reference_offset': float,
            'reference_unit_abbreviation': str,
            'web_exception': WebException,
            'web_id': str
        }

        self.attribute_map = {
            'abbreviation': 'Abbreviation',
            'description': 'Description',
            'factor': 'Factor',
            'id': 'Id',
            'links': 'Links',
            'name': 'Name',
            'offset': 'Offset',
            'path': 'Path',
            'reference_factor': 'ReferenceFactor',
            'reference_offset': 'ReferenceOffset',
            'reference_unit_abbreviation': 'ReferenceUnitAbbreviation',
            'web_exception': 'WebException',
            'web_id': 'WebId'
        }

        self._abbreviation = abbreviation
        self._description = description
        self._factor = factor
        self._id = id
        self._links = links
        self._name = name
        self._offset = offset
        self._path = path
        self._reference_factor = reference_factor
        self._reference_offset = reference_offset
        self._reference_unit_abbreviation = reference_unit_abbreviation
        self._web_exception = web_exception
        self._web_id = web_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Unit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Unit of this Unit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abbreviation(self):
        """Gets the abbreviation of this Unit.


        :return: The abbreviation of this Unit.
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this Unit.


        :param abbreviation: The abbreviation of this Unit.
        :type abbreviation: str
        """

        self._abbreviation = abbreviation

    @property
    def description(self):
        """Gets the description of this Unit.


        :return: The description of this Unit.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Unit.


        :param description: The description of this Unit.
        :type description: str
        """

        self._description = description

    @property
    def factor(self):
        """Gets the factor of this Unit.


        :return: The factor of this Unit.
        :rtype: float
        """
        return self._factor

    @factor.setter
    def factor(self, factor):
        """Sets the factor of this Unit.


        :param factor: The factor of this Unit.
        :type factor: float
        """

        self._factor = factor

    @property
    def id(self):
        """Gets the id of this Unit.


        :return: The id of this Unit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Unit.


        :param id: The id of this Unit.
        :type id: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this Unit.


        :return: The links of this Unit.
        :rtype: UnitLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Unit.


        :param links: The links of this Unit.
        :type links: UnitLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this Unit.


        :return: The name of this Unit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Unit.


        :param name: The name of this Unit.
        :type name: str
        """

        self._name = name

    @property
    def offset(self):
        """Gets the offset of this Unit.


        :return: The offset of this Unit.
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Unit.


        :param offset: The offset of this Unit.
        :type offset: float
        """

        self._offset = offset

    @property
    def path(self):
        """Gets the path of this Unit.


        :return: The path of this Unit.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Unit.


        :param path: The path of this Unit.
        :type path: str
        """

        self._path = path

    @property
    def reference_factor(self):
        """Gets the reference_factor of this Unit.


        :return: The reference_factor of this Unit.
        :rtype: float
        """
        return self._reference_factor

    @reference_factor.setter
    def reference_factor(self, reference_factor):
        """Sets the reference_factor of this Unit.


        :param reference_factor: The reference_factor of this Unit.
        :type reference_factor: float
        """

        self._reference_factor = reference_factor

    @property
    def reference_offset(self):
        """Gets the reference_offset of this Unit.


        :return: The reference_offset of this Unit.
        :rtype: float
        """
        return self._reference_offset

    @reference_offset.setter
    def reference_offset(self, reference_offset):
        """Sets the reference_offset of this Unit.


        :param reference_offset: The reference_offset of this Unit.
        :type reference_offset: float
        """

        self._reference_offset = reference_offset

    @property
    def reference_unit_abbreviation(self):
        """Gets the reference_unit_abbreviation of this Unit.


        :return: The reference_unit_abbreviation of this Unit.
        :rtype: str
        """
        return self._reference_unit_abbreviation

    @reference_unit_abbreviation.setter
    def reference_unit_abbreviation(self, reference_unit_abbreviation):
        """Sets the reference_unit_abbreviation of this Unit.


        :param reference_unit_abbreviation: The reference_unit_abbreviation of this Unit.
        :type reference_unit_abbreviation: str
        """

        self._reference_unit_abbreviation = reference_unit_abbreviation

    @property
    def web_exception(self):
        """Gets the web_exception of this Unit.


        :return: The web_exception of this Unit.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this Unit.


        :param web_exception: The web_exception of this Unit.
        :type web_exception: WebException
        """

        self._web_exception = web_exception

    @property
    def web_id(self):
        """Gets the web_id of this Unit.


        :return: The web_id of this Unit.
        :rtype: str
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this Unit.


        :param web_id: The web_id of this Unit.
        :type web_id: str
        """

        self._web_id = web_id
