# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_template_links import AnalysisTemplateLinks
from openapi_server.models.web_exception import WebException
from openapi_server import util


class AnalysisTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_rule_plug_in_name: str=None, category_names: List[str]=None, create_enabled: bool=None, description: str=None, group_id: int=None, has_notification_template: bool=None, has_target: bool=None, id: str=None, links: AnalysisTemplateLinks=None, name: str=None, output_time: str=None, path: str=None, target_name: str=None, time_rule_plug_in_name: str=None, web_exception: WebException=None, web_id: str=None):
        """AnalysisTemplate - a model defined in OpenAPI

        :param analysis_rule_plug_in_name: The analysis_rule_plug_in_name of this AnalysisTemplate.
        :param category_names: The category_names of this AnalysisTemplate.
        :param create_enabled: The create_enabled of this AnalysisTemplate.
        :param description: The description of this AnalysisTemplate.
        :param group_id: The group_id of this AnalysisTemplate.
        :param has_notification_template: The has_notification_template of this AnalysisTemplate.
        :param has_target: The has_target of this AnalysisTemplate.
        :param id: The id of this AnalysisTemplate.
        :param links: The links of this AnalysisTemplate.
        :param name: The name of this AnalysisTemplate.
        :param output_time: The output_time of this AnalysisTemplate.
        :param path: The path of this AnalysisTemplate.
        :param target_name: The target_name of this AnalysisTemplate.
        :param time_rule_plug_in_name: The time_rule_plug_in_name of this AnalysisTemplate.
        :param web_exception: The web_exception of this AnalysisTemplate.
        :param web_id: The web_id of this AnalysisTemplate.
        """
        self.openapi_types = {
            'analysis_rule_plug_in_name': str,
            'category_names': List[str],
            'create_enabled': bool,
            'description': str,
            'group_id': int,
            'has_notification_template': bool,
            'has_target': bool,
            'id': str,
            'links': AnalysisTemplateLinks,
            'name': str,
            'output_time': str,
            'path': str,
            'target_name': str,
            'time_rule_plug_in_name': str,
            'web_exception': WebException,
            'web_id': str
        }

        self.attribute_map = {
            'analysis_rule_plug_in_name': 'AnalysisRulePlugInName',
            'category_names': 'CategoryNames',
            'create_enabled': 'CreateEnabled',
            'description': 'Description',
            'group_id': 'GroupId',
            'has_notification_template': 'HasNotificationTemplate',
            'has_target': 'HasTarget',
            'id': 'Id',
            'links': 'Links',
            'name': 'Name',
            'output_time': 'OutputTime',
            'path': 'Path',
            'target_name': 'TargetName',
            'time_rule_plug_in_name': 'TimeRulePlugInName',
            'web_exception': 'WebException',
            'web_id': 'WebId'
        }

        self._analysis_rule_plug_in_name = analysis_rule_plug_in_name
        self._category_names = category_names
        self._create_enabled = create_enabled
        self._description = description
        self._group_id = group_id
        self._has_notification_template = has_notification_template
        self._has_target = has_target
        self._id = id
        self._links = links
        self._name = name
        self._output_time = output_time
        self._path = path
        self._target_name = target_name
        self._time_rule_plug_in_name = time_rule_plug_in_name
        self._web_exception = web_exception
        self._web_id = web_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalysisTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalysisTemplate of this AnalysisTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_rule_plug_in_name(self):
        """Gets the analysis_rule_plug_in_name of this AnalysisTemplate.


        :return: The analysis_rule_plug_in_name of this AnalysisTemplate.
        :rtype: str
        """
        return self._analysis_rule_plug_in_name

    @analysis_rule_plug_in_name.setter
    def analysis_rule_plug_in_name(self, analysis_rule_plug_in_name):
        """Sets the analysis_rule_plug_in_name of this AnalysisTemplate.


        :param analysis_rule_plug_in_name: The analysis_rule_plug_in_name of this AnalysisTemplate.
        :type analysis_rule_plug_in_name: str
        """

        self._analysis_rule_plug_in_name = analysis_rule_plug_in_name

    @property
    def category_names(self):
        """Gets the category_names of this AnalysisTemplate.


        :return: The category_names of this AnalysisTemplate.
        :rtype: List[str]
        """
        return self._category_names

    @category_names.setter
    def category_names(self, category_names):
        """Sets the category_names of this AnalysisTemplate.


        :param category_names: The category_names of this AnalysisTemplate.
        :type category_names: List[str]
        """

        self._category_names = category_names

    @property
    def create_enabled(self):
        """Gets the create_enabled of this AnalysisTemplate.


        :return: The create_enabled of this AnalysisTemplate.
        :rtype: bool
        """
        return self._create_enabled

    @create_enabled.setter
    def create_enabled(self, create_enabled):
        """Sets the create_enabled of this AnalysisTemplate.


        :param create_enabled: The create_enabled of this AnalysisTemplate.
        :type create_enabled: bool
        """

        self._create_enabled = create_enabled

    @property
    def description(self):
        """Gets the description of this AnalysisTemplate.


        :return: The description of this AnalysisTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AnalysisTemplate.


        :param description: The description of this AnalysisTemplate.
        :type description: str
        """

        self._description = description

    @property
    def group_id(self):
        """Gets the group_id of this AnalysisTemplate.


        :return: The group_id of this AnalysisTemplate.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AnalysisTemplate.


        :param group_id: The group_id of this AnalysisTemplate.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def has_notification_template(self):
        """Gets the has_notification_template of this AnalysisTemplate.


        :return: The has_notification_template of this AnalysisTemplate.
        :rtype: bool
        """
        return self._has_notification_template

    @has_notification_template.setter
    def has_notification_template(self, has_notification_template):
        """Sets the has_notification_template of this AnalysisTemplate.


        :param has_notification_template: The has_notification_template of this AnalysisTemplate.
        :type has_notification_template: bool
        """

        self._has_notification_template = has_notification_template

    @property
    def has_target(self):
        """Gets the has_target of this AnalysisTemplate.


        :return: The has_target of this AnalysisTemplate.
        :rtype: bool
        """
        return self._has_target

    @has_target.setter
    def has_target(self, has_target):
        """Sets the has_target of this AnalysisTemplate.


        :param has_target: The has_target of this AnalysisTemplate.
        :type has_target: bool
        """

        self._has_target = has_target

    @property
    def id(self):
        """Gets the id of this AnalysisTemplate.


        :return: The id of this AnalysisTemplate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnalysisTemplate.


        :param id: The id of this AnalysisTemplate.
        :type id: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this AnalysisTemplate.


        :return: The links of this AnalysisTemplate.
        :rtype: AnalysisTemplateLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AnalysisTemplate.


        :param links: The links of this AnalysisTemplate.
        :type links: AnalysisTemplateLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this AnalysisTemplate.


        :return: The name of this AnalysisTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalysisTemplate.


        :param name: The name of this AnalysisTemplate.
        :type name: str
        """

        self._name = name

    @property
    def output_time(self):
        """Gets the output_time of this AnalysisTemplate.


        :return: The output_time of this AnalysisTemplate.
        :rtype: str
        """
        return self._output_time

    @output_time.setter
    def output_time(self, output_time):
        """Sets the output_time of this AnalysisTemplate.


        :param output_time: The output_time of this AnalysisTemplate.
        :type output_time: str
        """

        self._output_time = output_time

    @property
    def path(self):
        """Gets the path of this AnalysisTemplate.


        :return: The path of this AnalysisTemplate.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AnalysisTemplate.


        :param path: The path of this AnalysisTemplate.
        :type path: str
        """

        self._path = path

    @property
    def target_name(self):
        """Gets the target_name of this AnalysisTemplate.


        :return: The target_name of this AnalysisTemplate.
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this AnalysisTemplate.


        :param target_name: The target_name of this AnalysisTemplate.
        :type target_name: str
        """

        self._target_name = target_name

    @property
    def time_rule_plug_in_name(self):
        """Gets the time_rule_plug_in_name of this AnalysisTemplate.


        :return: The time_rule_plug_in_name of this AnalysisTemplate.
        :rtype: str
        """
        return self._time_rule_plug_in_name

    @time_rule_plug_in_name.setter
    def time_rule_plug_in_name(self, time_rule_plug_in_name):
        """Sets the time_rule_plug_in_name of this AnalysisTemplate.


        :param time_rule_plug_in_name: The time_rule_plug_in_name of this AnalysisTemplate.
        :type time_rule_plug_in_name: str
        """

        self._time_rule_plug_in_name = time_rule_plug_in_name

    @property
    def web_exception(self):
        """Gets the web_exception of this AnalysisTemplate.


        :return: The web_exception of this AnalysisTemplate.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this AnalysisTemplate.


        :param web_exception: The web_exception of this AnalysisTemplate.
        :type web_exception: WebException
        """

        self._web_exception = web_exception

    @property
    def web_id(self):
        """Gets the web_id of this AnalysisTemplate.


        :return: The web_id of this AnalysisTemplate.
        :rtype: str
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this AnalysisTemplate.


        :param web_id: The web_id of this AnalysisTemplate.
        :type web_id: str
        """

        self._web_id = web_id
