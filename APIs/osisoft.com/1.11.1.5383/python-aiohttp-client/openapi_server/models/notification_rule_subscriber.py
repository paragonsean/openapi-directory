# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.web_exception import WebException
from openapi_server import util


class NotificationRuleSubscriber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_string: str=None, contact_template_name: str=None, contact_type: str=None, delivery_format_name: str=None, description: str=None, escalation_timeout: str=None, id: str=None, maximum_retries: int=None, name: str=None, notify_option: str=None, path: str=None, plug_in_name: str=None, retry_interval: str=None, web_exception: WebException=None, web_id: str=None):
        """NotificationRuleSubscriber - a model defined in OpenAPI

        :param config_string: The config_string of this NotificationRuleSubscriber.
        :param contact_template_name: The contact_template_name of this NotificationRuleSubscriber.
        :param contact_type: The contact_type of this NotificationRuleSubscriber.
        :param delivery_format_name: The delivery_format_name of this NotificationRuleSubscriber.
        :param description: The description of this NotificationRuleSubscriber.
        :param escalation_timeout: The escalation_timeout of this NotificationRuleSubscriber.
        :param id: The id of this NotificationRuleSubscriber.
        :param maximum_retries: The maximum_retries of this NotificationRuleSubscriber.
        :param name: The name of this NotificationRuleSubscriber.
        :param notify_option: The notify_option of this NotificationRuleSubscriber.
        :param path: The path of this NotificationRuleSubscriber.
        :param plug_in_name: The plug_in_name of this NotificationRuleSubscriber.
        :param retry_interval: The retry_interval of this NotificationRuleSubscriber.
        :param web_exception: The web_exception of this NotificationRuleSubscriber.
        :param web_id: The web_id of this NotificationRuleSubscriber.
        """
        self.openapi_types = {
            'config_string': str,
            'contact_template_name': str,
            'contact_type': str,
            'delivery_format_name': str,
            'description': str,
            'escalation_timeout': str,
            'id': str,
            'maximum_retries': int,
            'name': str,
            'notify_option': str,
            'path': str,
            'plug_in_name': str,
            'retry_interval': str,
            'web_exception': WebException,
            'web_id': str
        }

        self.attribute_map = {
            'config_string': 'ConfigString',
            'contact_template_name': 'ContactTemplateName',
            'contact_type': 'ContactType',
            'delivery_format_name': 'DeliveryFormatName',
            'description': 'Description',
            'escalation_timeout': 'EscalationTimeout',
            'id': 'Id',
            'maximum_retries': 'MaximumRetries',
            'name': 'Name',
            'notify_option': 'NotifyOption',
            'path': 'Path',
            'plug_in_name': 'PlugInName',
            'retry_interval': 'RetryInterval',
            'web_exception': 'WebException',
            'web_id': 'WebId'
        }

        self._config_string = config_string
        self._contact_template_name = contact_template_name
        self._contact_type = contact_type
        self._delivery_format_name = delivery_format_name
        self._description = description
        self._escalation_timeout = escalation_timeout
        self._id = id
        self._maximum_retries = maximum_retries
        self._name = name
        self._notify_option = notify_option
        self._path = path
        self._plug_in_name = plug_in_name
        self._retry_interval = retry_interval
        self._web_exception = web_exception
        self._web_id = web_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationRuleSubscriber':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationRuleSubscriber of this NotificationRuleSubscriber.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_string(self):
        """Gets the config_string of this NotificationRuleSubscriber.


        :return: The config_string of this NotificationRuleSubscriber.
        :rtype: str
        """
        return self._config_string

    @config_string.setter
    def config_string(self, config_string):
        """Sets the config_string of this NotificationRuleSubscriber.


        :param config_string: The config_string of this NotificationRuleSubscriber.
        :type config_string: str
        """

        self._config_string = config_string

    @property
    def contact_template_name(self):
        """Gets the contact_template_name of this NotificationRuleSubscriber.


        :return: The contact_template_name of this NotificationRuleSubscriber.
        :rtype: str
        """
        return self._contact_template_name

    @contact_template_name.setter
    def contact_template_name(self, contact_template_name):
        """Sets the contact_template_name of this NotificationRuleSubscriber.


        :param contact_template_name: The contact_template_name of this NotificationRuleSubscriber.
        :type contact_template_name: str
        """

        self._contact_template_name = contact_template_name

    @property
    def contact_type(self):
        """Gets the contact_type of this NotificationRuleSubscriber.


        :return: The contact_type of this NotificationRuleSubscriber.
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this NotificationRuleSubscriber.


        :param contact_type: The contact_type of this NotificationRuleSubscriber.
        :type contact_type: str
        """

        self._contact_type = contact_type

    @property
    def delivery_format_name(self):
        """Gets the delivery_format_name of this NotificationRuleSubscriber.


        :return: The delivery_format_name of this NotificationRuleSubscriber.
        :rtype: str
        """
        return self._delivery_format_name

    @delivery_format_name.setter
    def delivery_format_name(self, delivery_format_name):
        """Sets the delivery_format_name of this NotificationRuleSubscriber.


        :param delivery_format_name: The delivery_format_name of this NotificationRuleSubscriber.
        :type delivery_format_name: str
        """

        self._delivery_format_name = delivery_format_name

    @property
    def description(self):
        """Gets the description of this NotificationRuleSubscriber.


        :return: The description of this NotificationRuleSubscriber.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NotificationRuleSubscriber.


        :param description: The description of this NotificationRuleSubscriber.
        :type description: str
        """

        self._description = description

    @property
    def escalation_timeout(self):
        """Gets the escalation_timeout of this NotificationRuleSubscriber.


        :return: The escalation_timeout of this NotificationRuleSubscriber.
        :rtype: str
        """
        return self._escalation_timeout

    @escalation_timeout.setter
    def escalation_timeout(self, escalation_timeout):
        """Sets the escalation_timeout of this NotificationRuleSubscriber.


        :param escalation_timeout: The escalation_timeout of this NotificationRuleSubscriber.
        :type escalation_timeout: str
        """

        self._escalation_timeout = escalation_timeout

    @property
    def id(self):
        """Gets the id of this NotificationRuleSubscriber.


        :return: The id of this NotificationRuleSubscriber.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationRuleSubscriber.


        :param id: The id of this NotificationRuleSubscriber.
        :type id: str
        """

        self._id = id

    @property
    def maximum_retries(self):
        """Gets the maximum_retries of this NotificationRuleSubscriber.


        :return: The maximum_retries of this NotificationRuleSubscriber.
        :rtype: int
        """
        return self._maximum_retries

    @maximum_retries.setter
    def maximum_retries(self, maximum_retries):
        """Sets the maximum_retries of this NotificationRuleSubscriber.


        :param maximum_retries: The maximum_retries of this NotificationRuleSubscriber.
        :type maximum_retries: int
        """

        self._maximum_retries = maximum_retries

    @property
    def name(self):
        """Gets the name of this NotificationRuleSubscriber.


        :return: The name of this NotificationRuleSubscriber.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationRuleSubscriber.


        :param name: The name of this NotificationRuleSubscriber.
        :type name: str
        """

        self._name = name

    @property
    def notify_option(self):
        """Gets the notify_option of this NotificationRuleSubscriber.


        :return: The notify_option of this NotificationRuleSubscriber.
        :rtype: str
        """
        return self._notify_option

    @notify_option.setter
    def notify_option(self, notify_option):
        """Sets the notify_option of this NotificationRuleSubscriber.


        :param notify_option: The notify_option of this NotificationRuleSubscriber.
        :type notify_option: str
        """

        self._notify_option = notify_option

    @property
    def path(self):
        """Gets the path of this NotificationRuleSubscriber.


        :return: The path of this NotificationRuleSubscriber.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this NotificationRuleSubscriber.


        :param path: The path of this NotificationRuleSubscriber.
        :type path: str
        """

        self._path = path

    @property
    def plug_in_name(self):
        """Gets the plug_in_name of this NotificationRuleSubscriber.


        :return: The plug_in_name of this NotificationRuleSubscriber.
        :rtype: str
        """
        return self._plug_in_name

    @plug_in_name.setter
    def plug_in_name(self, plug_in_name):
        """Sets the plug_in_name of this NotificationRuleSubscriber.


        :param plug_in_name: The plug_in_name of this NotificationRuleSubscriber.
        :type plug_in_name: str
        """

        self._plug_in_name = plug_in_name

    @property
    def retry_interval(self):
        """Gets the retry_interval of this NotificationRuleSubscriber.


        :return: The retry_interval of this NotificationRuleSubscriber.
        :rtype: str
        """
        return self._retry_interval

    @retry_interval.setter
    def retry_interval(self, retry_interval):
        """Sets the retry_interval of this NotificationRuleSubscriber.


        :param retry_interval: The retry_interval of this NotificationRuleSubscriber.
        :type retry_interval: str
        """

        self._retry_interval = retry_interval

    @property
    def web_exception(self):
        """Gets the web_exception of this NotificationRuleSubscriber.


        :return: The web_exception of this NotificationRuleSubscriber.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this NotificationRuleSubscriber.


        :param web_exception: The web_exception of this NotificationRuleSubscriber.
        :type web_exception: WebException
        """

        self._web_exception = web_exception

    @property
    def web_id(self):
        """Gets the web_id of this NotificationRuleSubscriber.


        :return: The web_id of this NotificationRuleSubscriber.
        :rtype: str
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this NotificationRuleSubscriber.


        :param web_id: The web_id of this NotificationRuleSubscriber.
        :type web_id: str
        """

        self._web_id = web_id
