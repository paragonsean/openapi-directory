# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_server_license_links import DataServerLicenseLinks
from openapi_server.models.web_exception import WebException
from openapi_server import util


class DataServerLicense(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_left: str=None, amount_used: str=None, links: DataServerLicenseLinks=None, name: str=None, total_amount: str=None, web_exception: WebException=None):
        """DataServerLicense - a model defined in OpenAPI

        :param amount_left: The amount_left of this DataServerLicense.
        :param amount_used: The amount_used of this DataServerLicense.
        :param links: The links of this DataServerLicense.
        :param name: The name of this DataServerLicense.
        :param total_amount: The total_amount of this DataServerLicense.
        :param web_exception: The web_exception of this DataServerLicense.
        """
        self.openapi_types = {
            'amount_left': str,
            'amount_used': str,
            'links': DataServerLicenseLinks,
            'name': str,
            'total_amount': str,
            'web_exception': WebException
        }

        self.attribute_map = {
            'amount_left': 'AmountLeft',
            'amount_used': 'AmountUsed',
            'links': 'Links',
            'name': 'Name',
            'total_amount': 'TotalAmount',
            'web_exception': 'WebException'
        }

        self._amount_left = amount_left
        self._amount_used = amount_used
        self._links = links
        self._name = name
        self._total_amount = total_amount
        self._web_exception = web_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataServerLicense':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataServerLicense of this DataServerLicense.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_left(self):
        """Gets the amount_left of this DataServerLicense.


        :return: The amount_left of this DataServerLicense.
        :rtype: str
        """
        return self._amount_left

    @amount_left.setter
    def amount_left(self, amount_left):
        """Sets the amount_left of this DataServerLicense.


        :param amount_left: The amount_left of this DataServerLicense.
        :type amount_left: str
        """

        self._amount_left = amount_left

    @property
    def amount_used(self):
        """Gets the amount_used of this DataServerLicense.


        :return: The amount_used of this DataServerLicense.
        :rtype: str
        """
        return self._amount_used

    @amount_used.setter
    def amount_used(self, amount_used):
        """Sets the amount_used of this DataServerLicense.


        :param amount_used: The amount_used of this DataServerLicense.
        :type amount_used: str
        """

        self._amount_used = amount_used

    @property
    def links(self):
        """Gets the links of this DataServerLicense.


        :return: The links of this DataServerLicense.
        :rtype: DataServerLicenseLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DataServerLicense.


        :param links: The links of this DataServerLicense.
        :type links: DataServerLicenseLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this DataServerLicense.


        :return: The name of this DataServerLicense.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataServerLicense.


        :param name: The name of this DataServerLicense.
        :type name: str
        """

        self._name = name

    @property
    def total_amount(self):
        """Gets the total_amount of this DataServerLicense.


        :return: The total_amount of this DataServerLicense.
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this DataServerLicense.


        :param total_amount: The total_amount of this DataServerLicense.
        :type total_amount: str
        """

        self._total_amount = total_amount

    @property
    def web_exception(self):
        """Gets the web_exception of this DataServerLicense.


        :return: The web_exception of this DataServerLicense.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this DataServerLicense.


        :param web_exception: The web_exception of this DataServerLicense.
        :type web_exception: WebException
        """

        self._web_exception = web_exception
