# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.value_query import ValueQuery
from openapi_server.models.web_exception import WebException
from openapi_server import util


class SearchByAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, element_template: str=None, search_root: str=None, value_queries: List[ValueQuery]=None, web_exception: WebException=None):
        """SearchByAttribute - a model defined in OpenAPI

        :param element_template: The element_template of this SearchByAttribute.
        :param search_root: The search_root of this SearchByAttribute.
        :param value_queries: The value_queries of this SearchByAttribute.
        :param web_exception: The web_exception of this SearchByAttribute.
        """
        self.openapi_types = {
            'element_template': str,
            'search_root': str,
            'value_queries': List[ValueQuery],
            'web_exception': WebException
        }

        self.attribute_map = {
            'element_template': 'ElementTemplate',
            'search_root': 'SearchRoot',
            'value_queries': 'ValueQueries',
            'web_exception': 'WebException'
        }

        self._element_template = element_template
        self._search_root = search_root
        self._value_queries = value_queries
        self._web_exception = web_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchByAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchByAttribute of this SearchByAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def element_template(self):
        """Gets the element_template of this SearchByAttribute.


        :return: The element_template of this SearchByAttribute.
        :rtype: str
        """
        return self._element_template

    @element_template.setter
    def element_template(self, element_template):
        """Sets the element_template of this SearchByAttribute.


        :param element_template: The element_template of this SearchByAttribute.
        :type element_template: str
        """

        self._element_template = element_template

    @property
    def search_root(self):
        """Gets the search_root of this SearchByAttribute.


        :return: The search_root of this SearchByAttribute.
        :rtype: str
        """
        return self._search_root

    @search_root.setter
    def search_root(self, search_root):
        """Sets the search_root of this SearchByAttribute.


        :param search_root: The search_root of this SearchByAttribute.
        :type search_root: str
        """

        self._search_root = search_root

    @property
    def value_queries(self):
        """Gets the value_queries of this SearchByAttribute.


        :return: The value_queries of this SearchByAttribute.
        :rtype: List[ValueQuery]
        """
        return self._value_queries

    @value_queries.setter
    def value_queries(self, value_queries):
        """Sets the value_queries of this SearchByAttribute.


        :param value_queries: The value_queries of this SearchByAttribute.
        :type value_queries: List[ValueQuery]
        """

        self._value_queries = value_queries

    @property
    def web_exception(self):
        """Gets the web_exception of this SearchByAttribute.


        :return: The web_exception of this SearchByAttribute.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this SearchByAttribute.


        :param web_exception: The web_exception of this SearchByAttribute.
        :type web_exception: WebException
        """

        self._web_exception = web_exception
