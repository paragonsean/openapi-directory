# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttributeTemplateLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_templates: str=None, categories: str=None, element_template: str=None, parent: str=None, _self: str=None, trait: str=None):
        """AttributeTemplateLinks - a model defined in OpenAPI

        :param attribute_templates: The attribute_templates of this AttributeTemplateLinks.
        :param categories: The categories of this AttributeTemplateLinks.
        :param element_template: The element_template of this AttributeTemplateLinks.
        :param parent: The parent of this AttributeTemplateLinks.
        :param _self: The _self of this AttributeTemplateLinks.
        :param trait: The trait of this AttributeTemplateLinks.
        """
        self.openapi_types = {
            'attribute_templates': str,
            'categories': str,
            'element_template': str,
            'parent': str,
            '_self': str,
            'trait': str
        }

        self.attribute_map = {
            'attribute_templates': 'AttributeTemplates',
            'categories': 'Categories',
            'element_template': 'ElementTemplate',
            'parent': 'Parent',
            '_self': 'Self',
            'trait': 'Trait'
        }

        self._attribute_templates = attribute_templates
        self._categories = categories
        self._element_template = element_template
        self._parent = parent
        self.__self = _self
        self._trait = trait

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeTemplateLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributeTemplateLinks of this AttributeTemplateLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_templates(self):
        """Gets the attribute_templates of this AttributeTemplateLinks.


        :return: The attribute_templates of this AttributeTemplateLinks.
        :rtype: str
        """
        return self._attribute_templates

    @attribute_templates.setter
    def attribute_templates(self, attribute_templates):
        """Sets the attribute_templates of this AttributeTemplateLinks.


        :param attribute_templates: The attribute_templates of this AttributeTemplateLinks.
        :type attribute_templates: str
        """

        self._attribute_templates = attribute_templates

    @property
    def categories(self):
        """Gets the categories of this AttributeTemplateLinks.


        :return: The categories of this AttributeTemplateLinks.
        :rtype: str
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this AttributeTemplateLinks.


        :param categories: The categories of this AttributeTemplateLinks.
        :type categories: str
        """

        self._categories = categories

    @property
    def element_template(self):
        """Gets the element_template of this AttributeTemplateLinks.


        :return: The element_template of this AttributeTemplateLinks.
        :rtype: str
        """
        return self._element_template

    @element_template.setter
    def element_template(self, element_template):
        """Sets the element_template of this AttributeTemplateLinks.


        :param element_template: The element_template of this AttributeTemplateLinks.
        :type element_template: str
        """

        self._element_template = element_template

    @property
    def parent(self):
        """Gets the parent of this AttributeTemplateLinks.


        :return: The parent of this AttributeTemplateLinks.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this AttributeTemplateLinks.


        :param parent: The parent of this AttributeTemplateLinks.
        :type parent: str
        """

        self._parent = parent

    @property
    def _self(self):
        """Gets the _self of this AttributeTemplateLinks.


        :return: The _self of this AttributeTemplateLinks.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this AttributeTemplateLinks.


        :param _self: The _self of this AttributeTemplateLinks.
        :type _self: str
        """

        self.__self = _self

    @property
    def trait(self):
        """Gets the trait of this AttributeTemplateLinks.


        :return: The trait of this AttributeTemplateLinks.
        :rtype: str
        """
        return self._trait

    @trait.setter
    def trait(self, trait):
        """Sets the trait of this AttributeTemplateLinks.


        :param trait: The trait of this AttributeTemplateLinks.
        :type trait: str
        """

        self._trait = trait
