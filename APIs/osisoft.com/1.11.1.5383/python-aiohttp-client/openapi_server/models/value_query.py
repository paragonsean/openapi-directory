# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.web_exception import WebException
from openapi_server import util


class ValueQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_name: str=None, attribute_uom: str=None, attribute_value: object=None, search_operator: str=None, web_exception: WebException=None):
        """ValueQuery - a model defined in OpenAPI

        :param attribute_name: The attribute_name of this ValueQuery.
        :param attribute_uom: The attribute_uom of this ValueQuery.
        :param attribute_value: The attribute_value of this ValueQuery.
        :param search_operator: The search_operator of this ValueQuery.
        :param web_exception: The web_exception of this ValueQuery.
        """
        self.openapi_types = {
            'attribute_name': str,
            'attribute_uom': str,
            'attribute_value': object,
            'search_operator': str,
            'web_exception': WebException
        }

        self.attribute_map = {
            'attribute_name': 'AttributeName',
            'attribute_uom': 'AttributeUOM',
            'attribute_value': 'AttributeValue',
            'search_operator': 'SearchOperator',
            'web_exception': 'WebException'
        }

        self._attribute_name = attribute_name
        self._attribute_uom = attribute_uom
        self._attribute_value = attribute_value
        self._search_operator = search_operator
        self._web_exception = web_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValueQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValueQuery of this ValueQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_name(self):
        """Gets the attribute_name of this ValueQuery.


        :return: The attribute_name of this ValueQuery.
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this ValueQuery.


        :param attribute_name: The attribute_name of this ValueQuery.
        :type attribute_name: str
        """

        self._attribute_name = attribute_name

    @property
    def attribute_uom(self):
        """Gets the attribute_uom of this ValueQuery.


        :return: The attribute_uom of this ValueQuery.
        :rtype: str
        """
        return self._attribute_uom

    @attribute_uom.setter
    def attribute_uom(self, attribute_uom):
        """Sets the attribute_uom of this ValueQuery.


        :param attribute_uom: The attribute_uom of this ValueQuery.
        :type attribute_uom: str
        """

        self._attribute_uom = attribute_uom

    @property
    def attribute_value(self):
        """Gets the attribute_value of this ValueQuery.


        :return: The attribute_value of this ValueQuery.
        :rtype: object
        """
        return self._attribute_value

    @attribute_value.setter
    def attribute_value(self, attribute_value):
        """Sets the attribute_value of this ValueQuery.


        :param attribute_value: The attribute_value of this ValueQuery.
        :type attribute_value: object
        """

        self._attribute_value = attribute_value

    @property
    def search_operator(self):
        """Gets the search_operator of this ValueQuery.


        :return: The search_operator of this ValueQuery.
        :rtype: str
        """
        return self._search_operator

    @search_operator.setter
    def search_operator(self, search_operator):
        """Sets the search_operator of this ValueQuery.


        :param search_operator: The search_operator of this ValueQuery.
        :type search_operator: str
        """

        self._search_operator = search_operator

    @property
    def web_exception(self):
        """Gets the web_exception of this ValueQuery.


        :return: The web_exception of this ValueQuery.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this ValueQuery.


        :param web_exception: The web_exception of this ValueQuery.
        :type web_exception: WebException
        """

        self._web_exception = web_exception
