# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.web_exception import WebException
from openapi_server import util


class Substatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, substatus: int=None, web_exception: WebException=None):
        """Substatus - a model defined in OpenAPI

        :param message: The message of this Substatus.
        :param substatus: The substatus of this Substatus.
        :param web_exception: The web_exception of this Substatus.
        """
        self.openapi_types = {
            'message': str,
            'substatus': int,
            'web_exception': WebException
        }

        self.attribute_map = {
            'message': 'Message',
            'substatus': 'Substatus',
            'web_exception': 'WebException'
        }

        self._message = message
        self._substatus = substatus
        self._web_exception = web_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Substatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Substatus of this Substatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this Substatus.


        :return: The message of this Substatus.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Substatus.


        :param message: The message of this Substatus.
        :type message: str
        """

        self._message = message

    @property
    def substatus(self):
        """Gets the substatus of this Substatus.


        :return: The substatus of this Substatus.
        :rtype: int
        """
        return self._substatus

    @substatus.setter
    def substatus(self, substatus):
        """Sets the substatus of this Substatus.


        :param substatus: The substatus of this Substatus.
        :type substatus: int
        """
        allowed_values = [100, 101, 200, 201, 202, 203, 204, 205, 206, 207, 300, 301, 302, 303, 304, 305, 306, 307, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 426, 500, 501, 502, 503, 504, 505]  # noqa: E501
        if substatus not in allowed_values:
            raise ValueError(
                "Invalid value for `substatus` ({0}), must be one of {1}"
                .format(substatus, allowed_values)
            )

        self._substatus = substatus

    @property
    def web_exception(self):
        """Gets the web_exception of this Substatus.


        :return: The web_exception of this Substatus.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this Substatus.


        :param web_exception: The web_exception of this Substatus.
        :type web_exception: WebException
        """

        self._web_exception = web_exception
