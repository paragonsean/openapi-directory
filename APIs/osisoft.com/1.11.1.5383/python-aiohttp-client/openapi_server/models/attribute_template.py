# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute_template_links import AttributeTemplateLinks
from openapi_server.models.web_exception import WebException
from openapi_server import util


class AttributeTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_names: List[str]=None, config_string: str=None, data_reference_plug_in: str=None, default_units_name: str=None, default_units_name_abbreviation: str=None, default_value: object=None, description: str=None, has_children: bool=None, id: str=None, is_configuration_item: bool=None, is_excluded: bool=None, is_hidden: bool=None, is_manual_data_entry: bool=None, links: AttributeTemplateLinks=None, name: str=None, path: str=None, trait_name: str=None, type: str=None, type_qualifier: str=None, web_exception: WebException=None, web_id: str=None):
        """AttributeTemplate - a model defined in OpenAPI

        :param category_names: The category_names of this AttributeTemplate.
        :param config_string: The config_string of this AttributeTemplate.
        :param data_reference_plug_in: The data_reference_plug_in of this AttributeTemplate.
        :param default_units_name: The default_units_name of this AttributeTemplate.
        :param default_units_name_abbreviation: The default_units_name_abbreviation of this AttributeTemplate.
        :param default_value: The default_value of this AttributeTemplate.
        :param description: The description of this AttributeTemplate.
        :param has_children: The has_children of this AttributeTemplate.
        :param id: The id of this AttributeTemplate.
        :param is_configuration_item: The is_configuration_item of this AttributeTemplate.
        :param is_excluded: The is_excluded of this AttributeTemplate.
        :param is_hidden: The is_hidden of this AttributeTemplate.
        :param is_manual_data_entry: The is_manual_data_entry of this AttributeTemplate.
        :param links: The links of this AttributeTemplate.
        :param name: The name of this AttributeTemplate.
        :param path: The path of this AttributeTemplate.
        :param trait_name: The trait_name of this AttributeTemplate.
        :param type: The type of this AttributeTemplate.
        :param type_qualifier: The type_qualifier of this AttributeTemplate.
        :param web_exception: The web_exception of this AttributeTemplate.
        :param web_id: The web_id of this AttributeTemplate.
        """
        self.openapi_types = {
            'category_names': List[str],
            'config_string': str,
            'data_reference_plug_in': str,
            'default_units_name': str,
            'default_units_name_abbreviation': str,
            'default_value': object,
            'description': str,
            'has_children': bool,
            'id': str,
            'is_configuration_item': bool,
            'is_excluded': bool,
            'is_hidden': bool,
            'is_manual_data_entry': bool,
            'links': AttributeTemplateLinks,
            'name': str,
            'path': str,
            'trait_name': str,
            'type': str,
            'type_qualifier': str,
            'web_exception': WebException,
            'web_id': str
        }

        self.attribute_map = {
            'category_names': 'CategoryNames',
            'config_string': 'ConfigString',
            'data_reference_plug_in': 'DataReferencePlugIn',
            'default_units_name': 'DefaultUnitsName',
            'default_units_name_abbreviation': 'DefaultUnitsNameAbbreviation',
            'default_value': 'DefaultValue',
            'description': 'Description',
            'has_children': 'HasChildren',
            'id': 'Id',
            'is_configuration_item': 'IsConfigurationItem',
            'is_excluded': 'IsExcluded',
            'is_hidden': 'IsHidden',
            'is_manual_data_entry': 'IsManualDataEntry',
            'links': 'Links',
            'name': 'Name',
            'path': 'Path',
            'trait_name': 'TraitName',
            'type': 'Type',
            'type_qualifier': 'TypeQualifier',
            'web_exception': 'WebException',
            'web_id': 'WebId'
        }

        self._category_names = category_names
        self._config_string = config_string
        self._data_reference_plug_in = data_reference_plug_in
        self._default_units_name = default_units_name
        self._default_units_name_abbreviation = default_units_name_abbreviation
        self._default_value = default_value
        self._description = description
        self._has_children = has_children
        self._id = id
        self._is_configuration_item = is_configuration_item
        self._is_excluded = is_excluded
        self._is_hidden = is_hidden
        self._is_manual_data_entry = is_manual_data_entry
        self._links = links
        self._name = name
        self._path = path
        self._trait_name = trait_name
        self._type = type
        self._type_qualifier = type_qualifier
        self._web_exception = web_exception
        self._web_id = web_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributeTemplate of this AttributeTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_names(self):
        """Gets the category_names of this AttributeTemplate.


        :return: The category_names of this AttributeTemplate.
        :rtype: List[str]
        """
        return self._category_names

    @category_names.setter
    def category_names(self, category_names):
        """Sets the category_names of this AttributeTemplate.


        :param category_names: The category_names of this AttributeTemplate.
        :type category_names: List[str]
        """

        self._category_names = category_names

    @property
    def config_string(self):
        """Gets the config_string of this AttributeTemplate.


        :return: The config_string of this AttributeTemplate.
        :rtype: str
        """
        return self._config_string

    @config_string.setter
    def config_string(self, config_string):
        """Sets the config_string of this AttributeTemplate.


        :param config_string: The config_string of this AttributeTemplate.
        :type config_string: str
        """

        self._config_string = config_string

    @property
    def data_reference_plug_in(self):
        """Gets the data_reference_plug_in of this AttributeTemplate.


        :return: The data_reference_plug_in of this AttributeTemplate.
        :rtype: str
        """
        return self._data_reference_plug_in

    @data_reference_plug_in.setter
    def data_reference_plug_in(self, data_reference_plug_in):
        """Sets the data_reference_plug_in of this AttributeTemplate.


        :param data_reference_plug_in: The data_reference_plug_in of this AttributeTemplate.
        :type data_reference_plug_in: str
        """

        self._data_reference_plug_in = data_reference_plug_in

    @property
    def default_units_name(self):
        """Gets the default_units_name of this AttributeTemplate.


        :return: The default_units_name of this AttributeTemplate.
        :rtype: str
        """
        return self._default_units_name

    @default_units_name.setter
    def default_units_name(self, default_units_name):
        """Sets the default_units_name of this AttributeTemplate.


        :param default_units_name: The default_units_name of this AttributeTemplate.
        :type default_units_name: str
        """

        self._default_units_name = default_units_name

    @property
    def default_units_name_abbreviation(self):
        """Gets the default_units_name_abbreviation of this AttributeTemplate.


        :return: The default_units_name_abbreviation of this AttributeTemplate.
        :rtype: str
        """
        return self._default_units_name_abbreviation

    @default_units_name_abbreviation.setter
    def default_units_name_abbreviation(self, default_units_name_abbreviation):
        """Sets the default_units_name_abbreviation of this AttributeTemplate.


        :param default_units_name_abbreviation: The default_units_name_abbreviation of this AttributeTemplate.
        :type default_units_name_abbreviation: str
        """

        self._default_units_name_abbreviation = default_units_name_abbreviation

    @property
    def default_value(self):
        """Gets the default_value of this AttributeTemplate.


        :return: The default_value of this AttributeTemplate.
        :rtype: object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this AttributeTemplate.


        :param default_value: The default_value of this AttributeTemplate.
        :type default_value: object
        """

        self._default_value = default_value

    @property
    def description(self):
        """Gets the description of this AttributeTemplate.


        :return: The description of this AttributeTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AttributeTemplate.


        :param description: The description of this AttributeTemplate.
        :type description: str
        """

        self._description = description

    @property
    def has_children(self):
        """Gets the has_children of this AttributeTemplate.


        :return: The has_children of this AttributeTemplate.
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this AttributeTemplate.


        :param has_children: The has_children of this AttributeTemplate.
        :type has_children: bool
        """

        self._has_children = has_children

    @property
    def id(self):
        """Gets the id of this AttributeTemplate.


        :return: The id of this AttributeTemplate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AttributeTemplate.


        :param id: The id of this AttributeTemplate.
        :type id: str
        """

        self._id = id

    @property
    def is_configuration_item(self):
        """Gets the is_configuration_item of this AttributeTemplate.


        :return: The is_configuration_item of this AttributeTemplate.
        :rtype: bool
        """
        return self._is_configuration_item

    @is_configuration_item.setter
    def is_configuration_item(self, is_configuration_item):
        """Sets the is_configuration_item of this AttributeTemplate.


        :param is_configuration_item: The is_configuration_item of this AttributeTemplate.
        :type is_configuration_item: bool
        """

        self._is_configuration_item = is_configuration_item

    @property
    def is_excluded(self):
        """Gets the is_excluded of this AttributeTemplate.


        :return: The is_excluded of this AttributeTemplate.
        :rtype: bool
        """
        return self._is_excluded

    @is_excluded.setter
    def is_excluded(self, is_excluded):
        """Sets the is_excluded of this AttributeTemplate.


        :param is_excluded: The is_excluded of this AttributeTemplate.
        :type is_excluded: bool
        """

        self._is_excluded = is_excluded

    @property
    def is_hidden(self):
        """Gets the is_hidden of this AttributeTemplate.


        :return: The is_hidden of this AttributeTemplate.
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this AttributeTemplate.


        :param is_hidden: The is_hidden of this AttributeTemplate.
        :type is_hidden: bool
        """

        self._is_hidden = is_hidden

    @property
    def is_manual_data_entry(self):
        """Gets the is_manual_data_entry of this AttributeTemplate.


        :return: The is_manual_data_entry of this AttributeTemplate.
        :rtype: bool
        """
        return self._is_manual_data_entry

    @is_manual_data_entry.setter
    def is_manual_data_entry(self, is_manual_data_entry):
        """Sets the is_manual_data_entry of this AttributeTemplate.


        :param is_manual_data_entry: The is_manual_data_entry of this AttributeTemplate.
        :type is_manual_data_entry: bool
        """

        self._is_manual_data_entry = is_manual_data_entry

    @property
    def links(self):
        """Gets the links of this AttributeTemplate.


        :return: The links of this AttributeTemplate.
        :rtype: AttributeTemplateLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AttributeTemplate.


        :param links: The links of this AttributeTemplate.
        :type links: AttributeTemplateLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this AttributeTemplate.


        :return: The name of this AttributeTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttributeTemplate.


        :param name: The name of this AttributeTemplate.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this AttributeTemplate.


        :return: The path of this AttributeTemplate.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AttributeTemplate.


        :param path: The path of this AttributeTemplate.
        :type path: str
        """

        self._path = path

    @property
    def trait_name(self):
        """Gets the trait_name of this AttributeTemplate.


        :return: The trait_name of this AttributeTemplate.
        :rtype: str
        """
        return self._trait_name

    @trait_name.setter
    def trait_name(self, trait_name):
        """Sets the trait_name of this AttributeTemplate.


        :param trait_name: The trait_name of this AttributeTemplate.
        :type trait_name: str
        """

        self._trait_name = trait_name

    @property
    def type(self):
        """Gets the type of this AttributeTemplate.


        :return: The type of this AttributeTemplate.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AttributeTemplate.


        :param type: The type of this AttributeTemplate.
        :type type: str
        """

        self._type = type

    @property
    def type_qualifier(self):
        """Gets the type_qualifier of this AttributeTemplate.


        :return: The type_qualifier of this AttributeTemplate.
        :rtype: str
        """
        return self._type_qualifier

    @type_qualifier.setter
    def type_qualifier(self, type_qualifier):
        """Sets the type_qualifier of this AttributeTemplate.


        :param type_qualifier: The type_qualifier of this AttributeTemplate.
        :type type_qualifier: str
        """

        self._type_qualifier = type_qualifier

    @property
    def web_exception(self):
        """Gets the web_exception of this AttributeTemplate.


        :return: The web_exception of this AttributeTemplate.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this AttributeTemplate.


        :param web_exception: The web_exception of this AttributeTemplate.
        :type web_exception: WebException
        """

        self._web_exception = web_exception

    @property
    def web_id(self):
        """Gets the web_id of this AttributeTemplate.


        :return: The web_id of this AttributeTemplate.
        :rtype: str
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this AttributeTemplate.


        :param web_id: The web_id of this AttributeTemplate.
        :type web_id: str
        """

        self._web_id = web_id
