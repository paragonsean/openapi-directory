# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_metadata_links import MediaMetadataLinks
from openapi_server.models.web_exception import WebException
from openapi_server import util


class MediaMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, change_date: datetime=None, description: str=None, links: MediaMetadataLinks=None, name: str=None, size: float=None, web_exception: WebException=None):
        """MediaMetadata - a model defined in OpenAPI

        :param author: The author of this MediaMetadata.
        :param change_date: The change_date of this MediaMetadata.
        :param description: The description of this MediaMetadata.
        :param links: The links of this MediaMetadata.
        :param name: The name of this MediaMetadata.
        :param size: The size of this MediaMetadata.
        :param web_exception: The web_exception of this MediaMetadata.
        """
        self.openapi_types = {
            'author': str,
            'change_date': datetime,
            'description': str,
            'links': MediaMetadataLinks,
            'name': str,
            'size': float,
            'web_exception': WebException
        }

        self.attribute_map = {
            'author': 'Author',
            'change_date': 'ChangeDate',
            'description': 'Description',
            'links': 'Links',
            'name': 'Name',
            'size': 'Size',
            'web_exception': 'WebException'
        }

        self._author = author
        self._change_date = change_date
        self._description = description
        self._links = links
        self._name = name
        self._size = size
        self._web_exception = web_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaMetadata of this MediaMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this MediaMetadata.


        :return: The author of this MediaMetadata.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this MediaMetadata.


        :param author: The author of this MediaMetadata.
        :type author: str
        """

        self._author = author

    @property
    def change_date(self):
        """Gets the change_date of this MediaMetadata.


        :return: The change_date of this MediaMetadata.
        :rtype: datetime
        """
        return self._change_date

    @change_date.setter
    def change_date(self, change_date):
        """Sets the change_date of this MediaMetadata.


        :param change_date: The change_date of this MediaMetadata.
        :type change_date: datetime
        """

        self._change_date = change_date

    @property
    def description(self):
        """Gets the description of this MediaMetadata.


        :return: The description of this MediaMetadata.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MediaMetadata.


        :param description: The description of this MediaMetadata.
        :type description: str
        """

        self._description = description

    @property
    def links(self):
        """Gets the links of this MediaMetadata.


        :return: The links of this MediaMetadata.
        :rtype: MediaMetadataLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MediaMetadata.


        :param links: The links of this MediaMetadata.
        :type links: MediaMetadataLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this MediaMetadata.


        :return: The name of this MediaMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MediaMetadata.


        :param name: The name of this MediaMetadata.
        :type name: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this MediaMetadata.


        :return: The size of this MediaMetadata.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this MediaMetadata.


        :param size: The size of this MediaMetadata.
        :type size: float
        """

        self._size = size

    @property
    def web_exception(self):
        """Gets the web_exception of this MediaMetadata.


        :return: The web_exception of this MediaMetadata.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this MediaMetadata.


        :param web_exception: The web_exception of this MediaMetadata.
        :type web_exception: WebException
        """

        self._web_exception = web_exception
