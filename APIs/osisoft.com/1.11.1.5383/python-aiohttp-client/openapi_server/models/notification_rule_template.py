# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.web_exception import WebException
from openapi_server import util


class NotificationRuleTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_names: List[str]=None, criteria: str=None, description: str=None, id: str=None, multi_trigger_event_option: str=None, name: str=None, nonrepetition_interval: str=None, path: str=None, resend_interval: str=None, status: str=None, template_name: str=None, web_exception: WebException=None, web_id: str=None):
        """NotificationRuleTemplate - a model defined in OpenAPI

        :param category_names: The category_names of this NotificationRuleTemplate.
        :param criteria: The criteria of this NotificationRuleTemplate.
        :param description: The description of this NotificationRuleTemplate.
        :param id: The id of this NotificationRuleTemplate.
        :param multi_trigger_event_option: The multi_trigger_event_option of this NotificationRuleTemplate.
        :param name: The name of this NotificationRuleTemplate.
        :param nonrepetition_interval: The nonrepetition_interval of this NotificationRuleTemplate.
        :param path: The path of this NotificationRuleTemplate.
        :param resend_interval: The resend_interval of this NotificationRuleTemplate.
        :param status: The status of this NotificationRuleTemplate.
        :param template_name: The template_name of this NotificationRuleTemplate.
        :param web_exception: The web_exception of this NotificationRuleTemplate.
        :param web_id: The web_id of this NotificationRuleTemplate.
        """
        self.openapi_types = {
            'category_names': List[str],
            'criteria': str,
            'description': str,
            'id': str,
            'multi_trigger_event_option': str,
            'name': str,
            'nonrepetition_interval': str,
            'path': str,
            'resend_interval': str,
            'status': str,
            'template_name': str,
            'web_exception': WebException,
            'web_id': str
        }

        self.attribute_map = {
            'category_names': 'CategoryNames',
            'criteria': 'Criteria',
            'description': 'Description',
            'id': 'Id',
            'multi_trigger_event_option': 'MultiTriggerEventOption',
            'name': 'Name',
            'nonrepetition_interval': 'NonrepetitionInterval',
            'path': 'Path',
            'resend_interval': 'ResendInterval',
            'status': 'Status',
            'template_name': 'TemplateName',
            'web_exception': 'WebException',
            'web_id': 'WebId'
        }

        self._category_names = category_names
        self._criteria = criteria
        self._description = description
        self._id = id
        self._multi_trigger_event_option = multi_trigger_event_option
        self._name = name
        self._nonrepetition_interval = nonrepetition_interval
        self._path = path
        self._resend_interval = resend_interval
        self._status = status
        self._template_name = template_name
        self._web_exception = web_exception
        self._web_id = web_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationRuleTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationRuleTemplate of this NotificationRuleTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_names(self):
        """Gets the category_names of this NotificationRuleTemplate.


        :return: The category_names of this NotificationRuleTemplate.
        :rtype: List[str]
        """
        return self._category_names

    @category_names.setter
    def category_names(self, category_names):
        """Sets the category_names of this NotificationRuleTemplate.


        :param category_names: The category_names of this NotificationRuleTemplate.
        :type category_names: List[str]
        """

        self._category_names = category_names

    @property
    def criteria(self):
        """Gets the criteria of this NotificationRuleTemplate.


        :return: The criteria of this NotificationRuleTemplate.
        :rtype: str
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this NotificationRuleTemplate.


        :param criteria: The criteria of this NotificationRuleTemplate.
        :type criteria: str
        """

        self._criteria = criteria

    @property
    def description(self):
        """Gets the description of this NotificationRuleTemplate.


        :return: The description of this NotificationRuleTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NotificationRuleTemplate.


        :param description: The description of this NotificationRuleTemplate.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this NotificationRuleTemplate.


        :return: The id of this NotificationRuleTemplate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationRuleTemplate.


        :param id: The id of this NotificationRuleTemplate.
        :type id: str
        """

        self._id = id

    @property
    def multi_trigger_event_option(self):
        """Gets the multi_trigger_event_option of this NotificationRuleTemplate.


        :return: The multi_trigger_event_option of this NotificationRuleTemplate.
        :rtype: str
        """
        return self._multi_trigger_event_option

    @multi_trigger_event_option.setter
    def multi_trigger_event_option(self, multi_trigger_event_option):
        """Sets the multi_trigger_event_option of this NotificationRuleTemplate.


        :param multi_trigger_event_option: The multi_trigger_event_option of this NotificationRuleTemplate.
        :type multi_trigger_event_option: str
        """

        self._multi_trigger_event_option = multi_trigger_event_option

    @property
    def name(self):
        """Gets the name of this NotificationRuleTemplate.


        :return: The name of this NotificationRuleTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationRuleTemplate.


        :param name: The name of this NotificationRuleTemplate.
        :type name: str
        """

        self._name = name

    @property
    def nonrepetition_interval(self):
        """Gets the nonrepetition_interval of this NotificationRuleTemplate.


        :return: The nonrepetition_interval of this NotificationRuleTemplate.
        :rtype: str
        """
        return self._nonrepetition_interval

    @nonrepetition_interval.setter
    def nonrepetition_interval(self, nonrepetition_interval):
        """Sets the nonrepetition_interval of this NotificationRuleTemplate.


        :param nonrepetition_interval: The nonrepetition_interval of this NotificationRuleTemplate.
        :type nonrepetition_interval: str
        """

        self._nonrepetition_interval = nonrepetition_interval

    @property
    def path(self):
        """Gets the path of this NotificationRuleTemplate.


        :return: The path of this NotificationRuleTemplate.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this NotificationRuleTemplate.


        :param path: The path of this NotificationRuleTemplate.
        :type path: str
        """

        self._path = path

    @property
    def resend_interval(self):
        """Gets the resend_interval of this NotificationRuleTemplate.


        :return: The resend_interval of this NotificationRuleTemplate.
        :rtype: str
        """
        return self._resend_interval

    @resend_interval.setter
    def resend_interval(self, resend_interval):
        """Sets the resend_interval of this NotificationRuleTemplate.


        :param resend_interval: The resend_interval of this NotificationRuleTemplate.
        :type resend_interval: str
        """

        self._resend_interval = resend_interval

    @property
    def status(self):
        """Gets the status of this NotificationRuleTemplate.


        :return: The status of this NotificationRuleTemplate.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NotificationRuleTemplate.


        :param status: The status of this NotificationRuleTemplate.
        :type status: str
        """

        self._status = status

    @property
    def template_name(self):
        """Gets the template_name of this NotificationRuleTemplate.


        :return: The template_name of this NotificationRuleTemplate.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this NotificationRuleTemplate.


        :param template_name: The template_name of this NotificationRuleTemplate.
        :type template_name: str
        """

        self._template_name = template_name

    @property
    def web_exception(self):
        """Gets the web_exception of this NotificationRuleTemplate.


        :return: The web_exception of this NotificationRuleTemplate.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this NotificationRuleTemplate.


        :param web_exception: The web_exception of this NotificationRuleTemplate.
        :type web_exception: WebException
        """

        self._web_exception = web_exception

    @property
    def web_id(self):
        """Gets the web_id of this NotificationRuleTemplate.


        :return: The web_id of this NotificationRuleTemplate.
        :rtype: str
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this NotificationRuleTemplate.


        :param web_id: The web_id of this NotificationRuleTemplate.
        :type web_id: str
        """

        self._web_id = web_id
