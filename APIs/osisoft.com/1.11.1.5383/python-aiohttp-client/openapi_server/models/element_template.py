# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.element_template_links import ElementTemplateLinks
from openapi_server.models.value import Value
from openapi_server.models.web_exception import WebException
from openapi_server import util


class ElementTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_element_to_extend: bool=None, base_template: str=None, can_be_acknowledged: bool=None, category_names: List[str]=None, description: str=None, extended_properties: Dict[str, Value]=None, id: str=None, instance_type: str=None, links: ElementTemplateLinks=None, name: str=None, naming_pattern: str=None, path: str=None, severity: str=None, web_exception: WebException=None, web_id: str=None):
        """ElementTemplate - a model defined in OpenAPI

        :param allow_element_to_extend: The allow_element_to_extend of this ElementTemplate.
        :param base_template: The base_template of this ElementTemplate.
        :param can_be_acknowledged: The can_be_acknowledged of this ElementTemplate.
        :param category_names: The category_names of this ElementTemplate.
        :param description: The description of this ElementTemplate.
        :param extended_properties: The extended_properties of this ElementTemplate.
        :param id: The id of this ElementTemplate.
        :param instance_type: The instance_type of this ElementTemplate.
        :param links: The links of this ElementTemplate.
        :param name: The name of this ElementTemplate.
        :param naming_pattern: The naming_pattern of this ElementTemplate.
        :param path: The path of this ElementTemplate.
        :param severity: The severity of this ElementTemplate.
        :param web_exception: The web_exception of this ElementTemplate.
        :param web_id: The web_id of this ElementTemplate.
        """
        self.openapi_types = {
            'allow_element_to_extend': bool,
            'base_template': str,
            'can_be_acknowledged': bool,
            'category_names': List[str],
            'description': str,
            'extended_properties': Dict[str, Value],
            'id': str,
            'instance_type': str,
            'links': ElementTemplateLinks,
            'name': str,
            'naming_pattern': str,
            'path': str,
            'severity': str,
            'web_exception': WebException,
            'web_id': str
        }

        self.attribute_map = {
            'allow_element_to_extend': 'AllowElementToExtend',
            'base_template': 'BaseTemplate',
            'can_be_acknowledged': 'CanBeAcknowledged',
            'category_names': 'CategoryNames',
            'description': 'Description',
            'extended_properties': 'ExtendedProperties',
            'id': 'Id',
            'instance_type': 'InstanceType',
            'links': 'Links',
            'name': 'Name',
            'naming_pattern': 'NamingPattern',
            'path': 'Path',
            'severity': 'Severity',
            'web_exception': 'WebException',
            'web_id': 'WebId'
        }

        self._allow_element_to_extend = allow_element_to_extend
        self._base_template = base_template
        self._can_be_acknowledged = can_be_acknowledged
        self._category_names = category_names
        self._description = description
        self._extended_properties = extended_properties
        self._id = id
        self._instance_type = instance_type
        self._links = links
        self._name = name
        self._naming_pattern = naming_pattern
        self._path = path
        self._severity = severity
        self._web_exception = web_exception
        self._web_id = web_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElementTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElementTemplate of this ElementTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_element_to_extend(self):
        """Gets the allow_element_to_extend of this ElementTemplate.


        :return: The allow_element_to_extend of this ElementTemplate.
        :rtype: bool
        """
        return self._allow_element_to_extend

    @allow_element_to_extend.setter
    def allow_element_to_extend(self, allow_element_to_extend):
        """Sets the allow_element_to_extend of this ElementTemplate.


        :param allow_element_to_extend: The allow_element_to_extend of this ElementTemplate.
        :type allow_element_to_extend: bool
        """

        self._allow_element_to_extend = allow_element_to_extend

    @property
    def base_template(self):
        """Gets the base_template of this ElementTemplate.


        :return: The base_template of this ElementTemplate.
        :rtype: str
        """
        return self._base_template

    @base_template.setter
    def base_template(self, base_template):
        """Sets the base_template of this ElementTemplate.


        :param base_template: The base_template of this ElementTemplate.
        :type base_template: str
        """

        self._base_template = base_template

    @property
    def can_be_acknowledged(self):
        """Gets the can_be_acknowledged of this ElementTemplate.


        :return: The can_be_acknowledged of this ElementTemplate.
        :rtype: bool
        """
        return self._can_be_acknowledged

    @can_be_acknowledged.setter
    def can_be_acknowledged(self, can_be_acknowledged):
        """Sets the can_be_acknowledged of this ElementTemplate.


        :param can_be_acknowledged: The can_be_acknowledged of this ElementTemplate.
        :type can_be_acknowledged: bool
        """

        self._can_be_acknowledged = can_be_acknowledged

    @property
    def category_names(self):
        """Gets the category_names of this ElementTemplate.


        :return: The category_names of this ElementTemplate.
        :rtype: List[str]
        """
        return self._category_names

    @category_names.setter
    def category_names(self, category_names):
        """Sets the category_names of this ElementTemplate.


        :param category_names: The category_names of this ElementTemplate.
        :type category_names: List[str]
        """

        self._category_names = category_names

    @property
    def description(self):
        """Gets the description of this ElementTemplate.


        :return: The description of this ElementTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ElementTemplate.


        :param description: The description of this ElementTemplate.
        :type description: str
        """

        self._description = description

    @property
    def extended_properties(self):
        """Gets the extended_properties of this ElementTemplate.


        :return: The extended_properties of this ElementTemplate.
        :rtype: Dict[str, Value]
        """
        return self._extended_properties

    @extended_properties.setter
    def extended_properties(self, extended_properties):
        """Sets the extended_properties of this ElementTemplate.


        :param extended_properties: The extended_properties of this ElementTemplate.
        :type extended_properties: Dict[str, Value]
        """

        self._extended_properties = extended_properties

    @property
    def id(self):
        """Gets the id of this ElementTemplate.


        :return: The id of this ElementTemplate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ElementTemplate.


        :param id: The id of this ElementTemplate.
        :type id: str
        """

        self._id = id

    @property
    def instance_type(self):
        """Gets the instance_type of this ElementTemplate.


        :return: The instance_type of this ElementTemplate.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this ElementTemplate.


        :param instance_type: The instance_type of this ElementTemplate.
        :type instance_type: str
        """

        self._instance_type = instance_type

    @property
    def links(self):
        """Gets the links of this ElementTemplate.


        :return: The links of this ElementTemplate.
        :rtype: ElementTemplateLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ElementTemplate.


        :param links: The links of this ElementTemplate.
        :type links: ElementTemplateLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this ElementTemplate.


        :return: The name of this ElementTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ElementTemplate.


        :param name: The name of this ElementTemplate.
        :type name: str
        """

        self._name = name

    @property
    def naming_pattern(self):
        """Gets the naming_pattern of this ElementTemplate.


        :return: The naming_pattern of this ElementTemplate.
        :rtype: str
        """
        return self._naming_pattern

    @naming_pattern.setter
    def naming_pattern(self, naming_pattern):
        """Sets the naming_pattern of this ElementTemplate.


        :param naming_pattern: The naming_pattern of this ElementTemplate.
        :type naming_pattern: str
        """

        self._naming_pattern = naming_pattern

    @property
    def path(self):
        """Gets the path of this ElementTemplate.


        :return: The path of this ElementTemplate.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ElementTemplate.


        :param path: The path of this ElementTemplate.
        :type path: str
        """

        self._path = path

    @property
    def severity(self):
        """Gets the severity of this ElementTemplate.


        :return: The severity of this ElementTemplate.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ElementTemplate.


        :param severity: The severity of this ElementTemplate.
        :type severity: str
        """

        self._severity = severity

    @property
    def web_exception(self):
        """Gets the web_exception of this ElementTemplate.


        :return: The web_exception of this ElementTemplate.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this ElementTemplate.


        :param web_exception: The web_exception of this ElementTemplate.
        :type web_exception: WebException
        """

        self._web_exception = web_exception

    @property
    def web_id(self):
        """Gets the web_id of this ElementTemplate.


        :return: The web_id of this ElementTemplate.
        :rtype: str
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this ElementTemplate.


        :param web_id: The web_id of this ElementTemplate.
        :type web_id: str
        """

        self._web_id = web_id
