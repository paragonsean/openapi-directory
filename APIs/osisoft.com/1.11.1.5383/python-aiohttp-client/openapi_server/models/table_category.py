# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_category_links import TableCategoryLinks
from openapi_server.models.web_exception import WebException
from openapi_server import util


class TableCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: str=None, links: TableCategoryLinks=None, name: str=None, path: str=None, web_exception: WebException=None, web_id: str=None):
        """TableCategory - a model defined in OpenAPI

        :param description: The description of this TableCategory.
        :param id: The id of this TableCategory.
        :param links: The links of this TableCategory.
        :param name: The name of this TableCategory.
        :param path: The path of this TableCategory.
        :param web_exception: The web_exception of this TableCategory.
        :param web_id: The web_id of this TableCategory.
        """
        self.openapi_types = {
            'description': str,
            'id': str,
            'links': TableCategoryLinks,
            'name': str,
            'path': str,
            'web_exception': WebException,
            'web_id': str
        }

        self.attribute_map = {
            'description': 'Description',
            'id': 'Id',
            'links': 'Links',
            'name': 'Name',
            'path': 'Path',
            'web_exception': 'WebException',
            'web_id': 'WebId'
        }

        self._description = description
        self._id = id
        self._links = links
        self._name = name
        self._path = path
        self._web_exception = web_exception
        self._web_id = web_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableCategory of this TableCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this TableCategory.


        :return: The description of this TableCategory.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TableCategory.


        :param description: The description of this TableCategory.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this TableCategory.


        :return: The id of this TableCategory.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TableCategory.


        :param id: The id of this TableCategory.
        :type id: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this TableCategory.


        :return: The links of this TableCategory.
        :rtype: TableCategoryLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this TableCategory.


        :param links: The links of this TableCategory.
        :type links: TableCategoryLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this TableCategory.


        :return: The name of this TableCategory.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TableCategory.


        :param name: The name of this TableCategory.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this TableCategory.


        :return: The path of this TableCategory.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this TableCategory.


        :param path: The path of this TableCategory.
        :type path: str
        """

        self._path = path

    @property
    def web_exception(self):
        """Gets the web_exception of this TableCategory.


        :return: The web_exception of this TableCategory.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this TableCategory.


        :param web_exception: The web_exception of this TableCategory.
        :type web_exception: WebException
        """

        self._web_exception = web_exception

    @property
    def web_id(self):
        """Gets the web_id of this TableCategory.


        :return: The web_id of this TableCategory.
        :rtype: str
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this TableCategory.


        :param web_id: The web_id of this TableCategory.
        :type web_id: str
        """

        self._web_id = web_id
