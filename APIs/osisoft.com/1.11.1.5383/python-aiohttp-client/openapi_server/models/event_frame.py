# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_frame_links import EventFrameLinks
from openapi_server.models.security import Security
from openapi_server.models.value import Value
from openapi_server.models.web_exception import WebException
from openapi_server import util


class EventFrame(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acknowledged_by: str=None, acknowledged_date: datetime=None, are_values_captured: bool=None, can_be_acknowledged: bool=None, category_names: List[str]=None, description: str=None, end_time: datetime=None, extended_properties: Dict[str, Value]=None, has_children: bool=None, id: str=None, is_acknowledged: bool=None, is_annotated: bool=None, is_locked: bool=None, links: EventFrameLinks=None, name: str=None, path: str=None, ref_element_web_ids: List[str]=None, security: Security=None, severity: str=None, start_time: datetime=None, template_name: str=None, web_exception: WebException=None, web_id: str=None):
        """EventFrame - a model defined in OpenAPI

        :param acknowledged_by: The acknowledged_by of this EventFrame.
        :param acknowledged_date: The acknowledged_date of this EventFrame.
        :param are_values_captured: The are_values_captured of this EventFrame.
        :param can_be_acknowledged: The can_be_acknowledged of this EventFrame.
        :param category_names: The category_names of this EventFrame.
        :param description: The description of this EventFrame.
        :param end_time: The end_time of this EventFrame.
        :param extended_properties: The extended_properties of this EventFrame.
        :param has_children: The has_children of this EventFrame.
        :param id: The id of this EventFrame.
        :param is_acknowledged: The is_acknowledged of this EventFrame.
        :param is_annotated: The is_annotated of this EventFrame.
        :param is_locked: The is_locked of this EventFrame.
        :param links: The links of this EventFrame.
        :param name: The name of this EventFrame.
        :param path: The path of this EventFrame.
        :param ref_element_web_ids: The ref_element_web_ids of this EventFrame.
        :param security: The security of this EventFrame.
        :param severity: The severity of this EventFrame.
        :param start_time: The start_time of this EventFrame.
        :param template_name: The template_name of this EventFrame.
        :param web_exception: The web_exception of this EventFrame.
        :param web_id: The web_id of this EventFrame.
        """
        self.openapi_types = {
            'acknowledged_by': str,
            'acknowledged_date': datetime,
            'are_values_captured': bool,
            'can_be_acknowledged': bool,
            'category_names': List[str],
            'description': str,
            'end_time': datetime,
            'extended_properties': Dict[str, Value],
            'has_children': bool,
            'id': str,
            'is_acknowledged': bool,
            'is_annotated': bool,
            'is_locked': bool,
            'links': EventFrameLinks,
            'name': str,
            'path': str,
            'ref_element_web_ids': List[str],
            'security': Security,
            'severity': str,
            'start_time': datetime,
            'template_name': str,
            'web_exception': WebException,
            'web_id': str
        }

        self.attribute_map = {
            'acknowledged_by': 'AcknowledgedBy',
            'acknowledged_date': 'AcknowledgedDate',
            'are_values_captured': 'AreValuesCaptured',
            'can_be_acknowledged': 'CanBeAcknowledged',
            'category_names': 'CategoryNames',
            'description': 'Description',
            'end_time': 'EndTime',
            'extended_properties': 'ExtendedProperties',
            'has_children': 'HasChildren',
            'id': 'Id',
            'is_acknowledged': 'IsAcknowledged',
            'is_annotated': 'IsAnnotated',
            'is_locked': 'IsLocked',
            'links': 'Links',
            'name': 'Name',
            'path': 'Path',
            'ref_element_web_ids': 'RefElementWebIds',
            'security': 'Security',
            'severity': 'Severity',
            'start_time': 'StartTime',
            'template_name': 'TemplateName',
            'web_exception': 'WebException',
            'web_id': 'WebId'
        }

        self._acknowledged_by = acknowledged_by
        self._acknowledged_date = acknowledged_date
        self._are_values_captured = are_values_captured
        self._can_be_acknowledged = can_be_acknowledged
        self._category_names = category_names
        self._description = description
        self._end_time = end_time
        self._extended_properties = extended_properties
        self._has_children = has_children
        self._id = id
        self._is_acknowledged = is_acknowledged
        self._is_annotated = is_annotated
        self._is_locked = is_locked
        self._links = links
        self._name = name
        self._path = path
        self._ref_element_web_ids = ref_element_web_ids
        self._security = security
        self._severity = severity
        self._start_time = start_time
        self._template_name = template_name
        self._web_exception = web_exception
        self._web_id = web_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventFrame':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventFrame of this EventFrame.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acknowledged_by(self):
        """Gets the acknowledged_by of this EventFrame.


        :return: The acknowledged_by of this EventFrame.
        :rtype: str
        """
        return self._acknowledged_by

    @acknowledged_by.setter
    def acknowledged_by(self, acknowledged_by):
        """Sets the acknowledged_by of this EventFrame.


        :param acknowledged_by: The acknowledged_by of this EventFrame.
        :type acknowledged_by: str
        """

        self._acknowledged_by = acknowledged_by

    @property
    def acknowledged_date(self):
        """Gets the acknowledged_date of this EventFrame.


        :return: The acknowledged_date of this EventFrame.
        :rtype: datetime
        """
        return self._acknowledged_date

    @acknowledged_date.setter
    def acknowledged_date(self, acknowledged_date):
        """Sets the acknowledged_date of this EventFrame.


        :param acknowledged_date: The acknowledged_date of this EventFrame.
        :type acknowledged_date: datetime
        """

        self._acknowledged_date = acknowledged_date

    @property
    def are_values_captured(self):
        """Gets the are_values_captured of this EventFrame.


        :return: The are_values_captured of this EventFrame.
        :rtype: bool
        """
        return self._are_values_captured

    @are_values_captured.setter
    def are_values_captured(self, are_values_captured):
        """Sets the are_values_captured of this EventFrame.


        :param are_values_captured: The are_values_captured of this EventFrame.
        :type are_values_captured: bool
        """

        self._are_values_captured = are_values_captured

    @property
    def can_be_acknowledged(self):
        """Gets the can_be_acknowledged of this EventFrame.


        :return: The can_be_acknowledged of this EventFrame.
        :rtype: bool
        """
        return self._can_be_acknowledged

    @can_be_acknowledged.setter
    def can_be_acknowledged(self, can_be_acknowledged):
        """Sets the can_be_acknowledged of this EventFrame.


        :param can_be_acknowledged: The can_be_acknowledged of this EventFrame.
        :type can_be_acknowledged: bool
        """

        self._can_be_acknowledged = can_be_acknowledged

    @property
    def category_names(self):
        """Gets the category_names of this EventFrame.


        :return: The category_names of this EventFrame.
        :rtype: List[str]
        """
        return self._category_names

    @category_names.setter
    def category_names(self, category_names):
        """Sets the category_names of this EventFrame.


        :param category_names: The category_names of this EventFrame.
        :type category_names: List[str]
        """

        self._category_names = category_names

    @property
    def description(self):
        """Gets the description of this EventFrame.


        :return: The description of this EventFrame.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventFrame.


        :param description: The description of this EventFrame.
        :type description: str
        """

        self._description = description

    @property
    def end_time(self):
        """Gets the end_time of this EventFrame.


        :return: The end_time of this EventFrame.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this EventFrame.


        :param end_time: The end_time of this EventFrame.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def extended_properties(self):
        """Gets the extended_properties of this EventFrame.


        :return: The extended_properties of this EventFrame.
        :rtype: Dict[str, Value]
        """
        return self._extended_properties

    @extended_properties.setter
    def extended_properties(self, extended_properties):
        """Sets the extended_properties of this EventFrame.


        :param extended_properties: The extended_properties of this EventFrame.
        :type extended_properties: Dict[str, Value]
        """

        self._extended_properties = extended_properties

    @property
    def has_children(self):
        """Gets the has_children of this EventFrame.


        :return: The has_children of this EventFrame.
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this EventFrame.


        :param has_children: The has_children of this EventFrame.
        :type has_children: bool
        """

        self._has_children = has_children

    @property
    def id(self):
        """Gets the id of this EventFrame.


        :return: The id of this EventFrame.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventFrame.


        :param id: The id of this EventFrame.
        :type id: str
        """

        self._id = id

    @property
    def is_acknowledged(self):
        """Gets the is_acknowledged of this EventFrame.


        :return: The is_acknowledged of this EventFrame.
        :rtype: bool
        """
        return self._is_acknowledged

    @is_acknowledged.setter
    def is_acknowledged(self, is_acknowledged):
        """Sets the is_acknowledged of this EventFrame.


        :param is_acknowledged: The is_acknowledged of this EventFrame.
        :type is_acknowledged: bool
        """

        self._is_acknowledged = is_acknowledged

    @property
    def is_annotated(self):
        """Gets the is_annotated of this EventFrame.


        :return: The is_annotated of this EventFrame.
        :rtype: bool
        """
        return self._is_annotated

    @is_annotated.setter
    def is_annotated(self, is_annotated):
        """Sets the is_annotated of this EventFrame.


        :param is_annotated: The is_annotated of this EventFrame.
        :type is_annotated: bool
        """

        self._is_annotated = is_annotated

    @property
    def is_locked(self):
        """Gets the is_locked of this EventFrame.


        :return: The is_locked of this EventFrame.
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this EventFrame.


        :param is_locked: The is_locked of this EventFrame.
        :type is_locked: bool
        """

        self._is_locked = is_locked

    @property
    def links(self):
        """Gets the links of this EventFrame.


        :return: The links of this EventFrame.
        :rtype: EventFrameLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EventFrame.


        :param links: The links of this EventFrame.
        :type links: EventFrameLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this EventFrame.


        :return: The name of this EventFrame.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventFrame.


        :param name: The name of this EventFrame.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this EventFrame.


        :return: The path of this EventFrame.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this EventFrame.


        :param path: The path of this EventFrame.
        :type path: str
        """

        self._path = path

    @property
    def ref_element_web_ids(self):
        """Gets the ref_element_web_ids of this EventFrame.


        :return: The ref_element_web_ids of this EventFrame.
        :rtype: List[str]
        """
        return self._ref_element_web_ids

    @ref_element_web_ids.setter
    def ref_element_web_ids(self, ref_element_web_ids):
        """Sets the ref_element_web_ids of this EventFrame.


        :param ref_element_web_ids: The ref_element_web_ids of this EventFrame.
        :type ref_element_web_ids: List[str]
        """

        self._ref_element_web_ids = ref_element_web_ids

    @property
    def security(self):
        """Gets the security of this EventFrame.


        :return: The security of this EventFrame.
        :rtype: Security
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this EventFrame.


        :param security: The security of this EventFrame.
        :type security: Security
        """

        self._security = security

    @property
    def severity(self):
        """Gets the severity of this EventFrame.


        :return: The severity of this EventFrame.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this EventFrame.


        :param severity: The severity of this EventFrame.
        :type severity: str
        """

        self._severity = severity

    @property
    def start_time(self):
        """Gets the start_time of this EventFrame.


        :return: The start_time of this EventFrame.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this EventFrame.


        :param start_time: The start_time of this EventFrame.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def template_name(self):
        """Gets the template_name of this EventFrame.


        :return: The template_name of this EventFrame.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this EventFrame.


        :param template_name: The template_name of this EventFrame.
        :type template_name: str
        """

        self._template_name = template_name

    @property
    def web_exception(self):
        """Gets the web_exception of this EventFrame.


        :return: The web_exception of this EventFrame.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this EventFrame.


        :param web_exception: The web_exception of this EventFrame.
        :type web_exception: WebException
        """

        self._web_exception = web_exception

    @property
    def web_id(self):
        """Gets the web_id of this EventFrame.


        :return: The web_id of this EventFrame.
        :rtype: str
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this EventFrame.


        :param web_id: The web_id of this EventFrame.
        :type web_id: str
        """

        self._web_id = web_id
