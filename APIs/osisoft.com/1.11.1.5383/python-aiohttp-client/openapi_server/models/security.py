# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.web_exception import WebException
from openapi_server import util


class Security(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_annotate: bool=None, can_delete: bool=None, can_execute: bool=None, can_read: bool=None, can_read_data: bool=None, can_subscribe: bool=None, can_subscribe_others: bool=None, can_write: bool=None, can_write_data: bool=None, has_admin: bool=None, rights: List[str]=None, web_exception: WebException=None):
        """Security - a model defined in OpenAPI

        :param can_annotate: The can_annotate of this Security.
        :param can_delete: The can_delete of this Security.
        :param can_execute: The can_execute of this Security.
        :param can_read: The can_read of this Security.
        :param can_read_data: The can_read_data of this Security.
        :param can_subscribe: The can_subscribe of this Security.
        :param can_subscribe_others: The can_subscribe_others of this Security.
        :param can_write: The can_write of this Security.
        :param can_write_data: The can_write_data of this Security.
        :param has_admin: The has_admin of this Security.
        :param rights: The rights of this Security.
        :param web_exception: The web_exception of this Security.
        """
        self.openapi_types = {
            'can_annotate': bool,
            'can_delete': bool,
            'can_execute': bool,
            'can_read': bool,
            'can_read_data': bool,
            'can_subscribe': bool,
            'can_subscribe_others': bool,
            'can_write': bool,
            'can_write_data': bool,
            'has_admin': bool,
            'rights': List[str],
            'web_exception': WebException
        }

        self.attribute_map = {
            'can_annotate': 'CanAnnotate',
            'can_delete': 'CanDelete',
            'can_execute': 'CanExecute',
            'can_read': 'CanRead',
            'can_read_data': 'CanReadData',
            'can_subscribe': 'CanSubscribe',
            'can_subscribe_others': 'CanSubscribeOthers',
            'can_write': 'CanWrite',
            'can_write_data': 'CanWriteData',
            'has_admin': 'HasAdmin',
            'rights': 'Rights',
            'web_exception': 'WebException'
        }

        self._can_annotate = can_annotate
        self._can_delete = can_delete
        self._can_execute = can_execute
        self._can_read = can_read
        self._can_read_data = can_read_data
        self._can_subscribe = can_subscribe
        self._can_subscribe_others = can_subscribe_others
        self._can_write = can_write
        self._can_write_data = can_write_data
        self._has_admin = has_admin
        self._rights = rights
        self._web_exception = web_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Security':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Security of this Security.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_annotate(self):
        """Gets the can_annotate of this Security.


        :return: The can_annotate of this Security.
        :rtype: bool
        """
        return self._can_annotate

    @can_annotate.setter
    def can_annotate(self, can_annotate):
        """Sets the can_annotate of this Security.


        :param can_annotate: The can_annotate of this Security.
        :type can_annotate: bool
        """

        self._can_annotate = can_annotate

    @property
    def can_delete(self):
        """Gets the can_delete of this Security.


        :return: The can_delete of this Security.
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this Security.


        :param can_delete: The can_delete of this Security.
        :type can_delete: bool
        """

        self._can_delete = can_delete

    @property
    def can_execute(self):
        """Gets the can_execute of this Security.


        :return: The can_execute of this Security.
        :rtype: bool
        """
        return self._can_execute

    @can_execute.setter
    def can_execute(self, can_execute):
        """Sets the can_execute of this Security.


        :param can_execute: The can_execute of this Security.
        :type can_execute: bool
        """

        self._can_execute = can_execute

    @property
    def can_read(self):
        """Gets the can_read of this Security.


        :return: The can_read of this Security.
        :rtype: bool
        """
        return self._can_read

    @can_read.setter
    def can_read(self, can_read):
        """Sets the can_read of this Security.


        :param can_read: The can_read of this Security.
        :type can_read: bool
        """

        self._can_read = can_read

    @property
    def can_read_data(self):
        """Gets the can_read_data of this Security.


        :return: The can_read_data of this Security.
        :rtype: bool
        """
        return self._can_read_data

    @can_read_data.setter
    def can_read_data(self, can_read_data):
        """Sets the can_read_data of this Security.


        :param can_read_data: The can_read_data of this Security.
        :type can_read_data: bool
        """

        self._can_read_data = can_read_data

    @property
    def can_subscribe(self):
        """Gets the can_subscribe of this Security.


        :return: The can_subscribe of this Security.
        :rtype: bool
        """
        return self._can_subscribe

    @can_subscribe.setter
    def can_subscribe(self, can_subscribe):
        """Sets the can_subscribe of this Security.


        :param can_subscribe: The can_subscribe of this Security.
        :type can_subscribe: bool
        """

        self._can_subscribe = can_subscribe

    @property
    def can_subscribe_others(self):
        """Gets the can_subscribe_others of this Security.


        :return: The can_subscribe_others of this Security.
        :rtype: bool
        """
        return self._can_subscribe_others

    @can_subscribe_others.setter
    def can_subscribe_others(self, can_subscribe_others):
        """Sets the can_subscribe_others of this Security.


        :param can_subscribe_others: The can_subscribe_others of this Security.
        :type can_subscribe_others: bool
        """

        self._can_subscribe_others = can_subscribe_others

    @property
    def can_write(self):
        """Gets the can_write of this Security.


        :return: The can_write of this Security.
        :rtype: bool
        """
        return self._can_write

    @can_write.setter
    def can_write(self, can_write):
        """Sets the can_write of this Security.


        :param can_write: The can_write of this Security.
        :type can_write: bool
        """

        self._can_write = can_write

    @property
    def can_write_data(self):
        """Gets the can_write_data of this Security.


        :return: The can_write_data of this Security.
        :rtype: bool
        """
        return self._can_write_data

    @can_write_data.setter
    def can_write_data(self, can_write_data):
        """Sets the can_write_data of this Security.


        :param can_write_data: The can_write_data of this Security.
        :type can_write_data: bool
        """

        self._can_write_data = can_write_data

    @property
    def has_admin(self):
        """Gets the has_admin of this Security.


        :return: The has_admin of this Security.
        :rtype: bool
        """
        return self._has_admin

    @has_admin.setter
    def has_admin(self, has_admin):
        """Sets the has_admin of this Security.


        :param has_admin: The has_admin of this Security.
        :type has_admin: bool
        """

        self._has_admin = has_admin

    @property
    def rights(self):
        """Gets the rights of this Security.


        :return: The rights of this Security.
        :rtype: List[str]
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this Security.


        :param rights: The rights of this Security.
        :type rights: List[str]
        """

        self._rights = rights

    @property
    def web_exception(self):
        """Gets the web_exception of this Security.


        :return: The web_exception of this Security.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this Security.


        :param web_exception: The web_exception of this Security.
        :type web_exception: WebException
        """

        self._web_exception = web_exception
