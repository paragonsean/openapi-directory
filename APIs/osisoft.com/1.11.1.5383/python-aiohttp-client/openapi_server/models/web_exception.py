# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebException(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[str]=None, status_code: int=None):
        """WebException - a model defined in OpenAPI

        :param errors: The errors of this WebException.
        :param status_code: The status_code of this WebException.
        """
        self.openapi_types = {
            'errors': List[str],
            'status_code': int
        }

        self.attribute_map = {
            'errors': 'Errors',
            'status_code': 'StatusCode'
        }

        self._errors = errors
        self._status_code = status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebException':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebException of this WebException.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this WebException.


        :return: The errors of this WebException.
        :rtype: List[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this WebException.


        :param errors: The errors of this WebException.
        :type errors: List[str]
        """

        self._errors = errors

    @property
    def status_code(self):
        """Gets the status_code of this WebException.


        :return: The status_code of this WebException.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this WebException.


        :param status_code: The status_code of this WebException.
        :type status_code: int
        """
        allowed_values = [100, 101, 200, 201, 202, 203, 204, 205, 206, 207, 300, 301, 302, 303, 304, 305, 306, 307, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 426, 500, 501, 502, 503, 504, 505]  # noqa: E501
        if status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"
                .format(status_code, allowed_values)
            )

        self._status_code = status_code
