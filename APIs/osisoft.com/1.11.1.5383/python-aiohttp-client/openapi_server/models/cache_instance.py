# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.web_exception import WebException
from openapi_server import util


class CacheInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, last_refresh_time: datetime=None, scheduled_expiration_time: datetime=None, user: str=None, web_exception: WebException=None, will_refresh_after: datetime=None):
        """CacheInstance - a model defined in OpenAPI

        :param id: The id of this CacheInstance.
        :param last_refresh_time: The last_refresh_time of this CacheInstance.
        :param scheduled_expiration_time: The scheduled_expiration_time of this CacheInstance.
        :param user: The user of this CacheInstance.
        :param web_exception: The web_exception of this CacheInstance.
        :param will_refresh_after: The will_refresh_after of this CacheInstance.
        """
        self.openapi_types = {
            'id': str,
            'last_refresh_time': datetime,
            'scheduled_expiration_time': datetime,
            'user': str,
            'web_exception': WebException,
            'will_refresh_after': datetime
        }

        self.attribute_map = {
            'id': 'Id',
            'last_refresh_time': 'LastRefreshTime',
            'scheduled_expiration_time': 'ScheduledExpirationTime',
            'user': 'User',
            'web_exception': 'WebException',
            'will_refresh_after': 'WillRefreshAfter'
        }

        self._id = id
        self._last_refresh_time = last_refresh_time
        self._scheduled_expiration_time = scheduled_expiration_time
        self._user = user
        self._web_exception = web_exception
        self._will_refresh_after = will_refresh_after

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CacheInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CacheInstance of this CacheInstance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CacheInstance.


        :return: The id of this CacheInstance.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CacheInstance.


        :param id: The id of this CacheInstance.
        :type id: str
        """

        self._id = id

    @property
    def last_refresh_time(self):
        """Gets the last_refresh_time of this CacheInstance.


        :return: The last_refresh_time of this CacheInstance.
        :rtype: datetime
        """
        return self._last_refresh_time

    @last_refresh_time.setter
    def last_refresh_time(self, last_refresh_time):
        """Sets the last_refresh_time of this CacheInstance.


        :param last_refresh_time: The last_refresh_time of this CacheInstance.
        :type last_refresh_time: datetime
        """

        self._last_refresh_time = last_refresh_time

    @property
    def scheduled_expiration_time(self):
        """Gets the scheduled_expiration_time of this CacheInstance.


        :return: The scheduled_expiration_time of this CacheInstance.
        :rtype: datetime
        """
        return self._scheduled_expiration_time

    @scheduled_expiration_time.setter
    def scheduled_expiration_time(self, scheduled_expiration_time):
        """Sets the scheduled_expiration_time of this CacheInstance.


        :param scheduled_expiration_time: The scheduled_expiration_time of this CacheInstance.
        :type scheduled_expiration_time: datetime
        """

        self._scheduled_expiration_time = scheduled_expiration_time

    @property
    def user(self):
        """Gets the user of this CacheInstance.


        :return: The user of this CacheInstance.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CacheInstance.


        :param user: The user of this CacheInstance.
        :type user: str
        """

        self._user = user

    @property
    def web_exception(self):
        """Gets the web_exception of this CacheInstance.


        :return: The web_exception of this CacheInstance.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this CacheInstance.


        :param web_exception: The web_exception of this CacheInstance.
        :type web_exception: WebException
        """

        self._web_exception = web_exception

    @property
    def will_refresh_after(self):
        """Gets the will_refresh_after of this CacheInstance.


        :return: The will_refresh_after of this CacheInstance.
        :rtype: datetime
        """
        return self._will_refresh_after

    @will_refresh_after.setter
    def will_refresh_after(self, will_refresh_after):
        """Sets the will_refresh_after of this CacheInstance.


        :param will_refresh_after: The will_refresh_after of this CacheInstance.
        :type will_refresh_after: datetime
        """

        self._will_refresh_after = will_refresh_after
