# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.web_exception import WebException
from openapi_server import util


class UserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity_type: str=None, impersonation_level: str=None, is_authenticated: bool=None, name: str=None, sid: str=None, web_exception: WebException=None):
        """UserInfo - a model defined in OpenAPI

        :param identity_type: The identity_type of this UserInfo.
        :param impersonation_level: The impersonation_level of this UserInfo.
        :param is_authenticated: The is_authenticated of this UserInfo.
        :param name: The name of this UserInfo.
        :param sid: The sid of this UserInfo.
        :param web_exception: The web_exception of this UserInfo.
        """
        self.openapi_types = {
            'identity_type': str,
            'impersonation_level': str,
            'is_authenticated': bool,
            'name': str,
            'sid': str,
            'web_exception': WebException
        }

        self.attribute_map = {
            'identity_type': 'IdentityType',
            'impersonation_level': 'ImpersonationLevel',
            'is_authenticated': 'IsAuthenticated',
            'name': 'Name',
            'sid': 'SID',
            'web_exception': 'WebException'
        }

        self._identity_type = identity_type
        self._impersonation_level = impersonation_level
        self._is_authenticated = is_authenticated
        self._name = name
        self._sid = sid
        self._web_exception = web_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserInfo of this UserInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_type(self):
        """Gets the identity_type of this UserInfo.


        :return: The identity_type of this UserInfo.
        :rtype: str
        """
        return self._identity_type

    @identity_type.setter
    def identity_type(self, identity_type):
        """Sets the identity_type of this UserInfo.


        :param identity_type: The identity_type of this UserInfo.
        :type identity_type: str
        """

        self._identity_type = identity_type

    @property
    def impersonation_level(self):
        """Gets the impersonation_level of this UserInfo.


        :return: The impersonation_level of this UserInfo.
        :rtype: str
        """
        return self._impersonation_level

    @impersonation_level.setter
    def impersonation_level(self, impersonation_level):
        """Sets the impersonation_level of this UserInfo.


        :param impersonation_level: The impersonation_level of this UserInfo.
        :type impersonation_level: str
        """

        self._impersonation_level = impersonation_level

    @property
    def is_authenticated(self):
        """Gets the is_authenticated of this UserInfo.


        :return: The is_authenticated of this UserInfo.
        :rtype: bool
        """
        return self._is_authenticated

    @is_authenticated.setter
    def is_authenticated(self, is_authenticated):
        """Sets the is_authenticated of this UserInfo.


        :param is_authenticated: The is_authenticated of this UserInfo.
        :type is_authenticated: bool
        """

        self._is_authenticated = is_authenticated

    @property
    def name(self):
        """Gets the name of this UserInfo.


        :return: The name of this UserInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserInfo.


        :param name: The name of this UserInfo.
        :type name: str
        """

        self._name = name

    @property
    def sid(self):
        """Gets the sid of this UserInfo.


        :return: The sid of this UserInfo.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this UserInfo.


        :param sid: The sid of this UserInfo.
        :type sid: str
        """

        self._sid = sid

    @property
    def web_exception(self):
        """Gets the web_exception of this UserInfo.


        :return: The web_exception of this UserInfo.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this UserInfo.


        :param web_exception: The web_exception of this UserInfo.
        :type web_exception: WebException
        """

        self._web_exception = web_exception
