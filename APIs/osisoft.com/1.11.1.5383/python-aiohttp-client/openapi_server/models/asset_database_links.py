# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetDatabaseLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_categories: str=None, analysis_templates: str=None, asset_server: str=None, attribute_categories: str=None, element_categories: str=None, element_templates: str=None, elements: str=None, enumeration_sets: str=None, event_frames: str=None, security: str=None, security_entries: str=None, _self: str=None, table_categories: str=None, tables: str=None):
        """AssetDatabaseLinks - a model defined in OpenAPI

        :param analysis_categories: The analysis_categories of this AssetDatabaseLinks.
        :param analysis_templates: The analysis_templates of this AssetDatabaseLinks.
        :param asset_server: The asset_server of this AssetDatabaseLinks.
        :param attribute_categories: The attribute_categories of this AssetDatabaseLinks.
        :param element_categories: The element_categories of this AssetDatabaseLinks.
        :param element_templates: The element_templates of this AssetDatabaseLinks.
        :param elements: The elements of this AssetDatabaseLinks.
        :param enumeration_sets: The enumeration_sets of this AssetDatabaseLinks.
        :param event_frames: The event_frames of this AssetDatabaseLinks.
        :param security: The security of this AssetDatabaseLinks.
        :param security_entries: The security_entries of this AssetDatabaseLinks.
        :param _self: The _self of this AssetDatabaseLinks.
        :param table_categories: The table_categories of this AssetDatabaseLinks.
        :param tables: The tables of this AssetDatabaseLinks.
        """
        self.openapi_types = {
            'analysis_categories': str,
            'analysis_templates': str,
            'asset_server': str,
            'attribute_categories': str,
            'element_categories': str,
            'element_templates': str,
            'elements': str,
            'enumeration_sets': str,
            'event_frames': str,
            'security': str,
            'security_entries': str,
            '_self': str,
            'table_categories': str,
            'tables': str
        }

        self.attribute_map = {
            'analysis_categories': 'AnalysisCategories',
            'analysis_templates': 'AnalysisTemplates',
            'asset_server': 'AssetServer',
            'attribute_categories': 'AttributeCategories',
            'element_categories': 'ElementCategories',
            'element_templates': 'ElementTemplates',
            'elements': 'Elements',
            'enumeration_sets': 'EnumerationSets',
            'event_frames': 'EventFrames',
            'security': 'Security',
            'security_entries': 'SecurityEntries',
            '_self': 'Self',
            'table_categories': 'TableCategories',
            'tables': 'Tables'
        }

        self._analysis_categories = analysis_categories
        self._analysis_templates = analysis_templates
        self._asset_server = asset_server
        self._attribute_categories = attribute_categories
        self._element_categories = element_categories
        self._element_templates = element_templates
        self._elements = elements
        self._enumeration_sets = enumeration_sets
        self._event_frames = event_frames
        self._security = security
        self._security_entries = security_entries
        self.__self = _self
        self._table_categories = table_categories
        self._tables = tables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetDatabaseLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetDatabaseLinks of this AssetDatabaseLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_categories(self):
        """Gets the analysis_categories of this AssetDatabaseLinks.


        :return: The analysis_categories of this AssetDatabaseLinks.
        :rtype: str
        """
        return self._analysis_categories

    @analysis_categories.setter
    def analysis_categories(self, analysis_categories):
        """Sets the analysis_categories of this AssetDatabaseLinks.


        :param analysis_categories: The analysis_categories of this AssetDatabaseLinks.
        :type analysis_categories: str
        """

        self._analysis_categories = analysis_categories

    @property
    def analysis_templates(self):
        """Gets the analysis_templates of this AssetDatabaseLinks.


        :return: The analysis_templates of this AssetDatabaseLinks.
        :rtype: str
        """
        return self._analysis_templates

    @analysis_templates.setter
    def analysis_templates(self, analysis_templates):
        """Sets the analysis_templates of this AssetDatabaseLinks.


        :param analysis_templates: The analysis_templates of this AssetDatabaseLinks.
        :type analysis_templates: str
        """

        self._analysis_templates = analysis_templates

    @property
    def asset_server(self):
        """Gets the asset_server of this AssetDatabaseLinks.


        :return: The asset_server of this AssetDatabaseLinks.
        :rtype: str
        """
        return self._asset_server

    @asset_server.setter
    def asset_server(self, asset_server):
        """Sets the asset_server of this AssetDatabaseLinks.


        :param asset_server: The asset_server of this AssetDatabaseLinks.
        :type asset_server: str
        """

        self._asset_server = asset_server

    @property
    def attribute_categories(self):
        """Gets the attribute_categories of this AssetDatabaseLinks.


        :return: The attribute_categories of this AssetDatabaseLinks.
        :rtype: str
        """
        return self._attribute_categories

    @attribute_categories.setter
    def attribute_categories(self, attribute_categories):
        """Sets the attribute_categories of this AssetDatabaseLinks.


        :param attribute_categories: The attribute_categories of this AssetDatabaseLinks.
        :type attribute_categories: str
        """

        self._attribute_categories = attribute_categories

    @property
    def element_categories(self):
        """Gets the element_categories of this AssetDatabaseLinks.


        :return: The element_categories of this AssetDatabaseLinks.
        :rtype: str
        """
        return self._element_categories

    @element_categories.setter
    def element_categories(self, element_categories):
        """Sets the element_categories of this AssetDatabaseLinks.


        :param element_categories: The element_categories of this AssetDatabaseLinks.
        :type element_categories: str
        """

        self._element_categories = element_categories

    @property
    def element_templates(self):
        """Gets the element_templates of this AssetDatabaseLinks.


        :return: The element_templates of this AssetDatabaseLinks.
        :rtype: str
        """
        return self._element_templates

    @element_templates.setter
    def element_templates(self, element_templates):
        """Sets the element_templates of this AssetDatabaseLinks.


        :param element_templates: The element_templates of this AssetDatabaseLinks.
        :type element_templates: str
        """

        self._element_templates = element_templates

    @property
    def elements(self):
        """Gets the elements of this AssetDatabaseLinks.


        :return: The elements of this AssetDatabaseLinks.
        :rtype: str
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this AssetDatabaseLinks.


        :param elements: The elements of this AssetDatabaseLinks.
        :type elements: str
        """

        self._elements = elements

    @property
    def enumeration_sets(self):
        """Gets the enumeration_sets of this AssetDatabaseLinks.


        :return: The enumeration_sets of this AssetDatabaseLinks.
        :rtype: str
        """
        return self._enumeration_sets

    @enumeration_sets.setter
    def enumeration_sets(self, enumeration_sets):
        """Sets the enumeration_sets of this AssetDatabaseLinks.


        :param enumeration_sets: The enumeration_sets of this AssetDatabaseLinks.
        :type enumeration_sets: str
        """

        self._enumeration_sets = enumeration_sets

    @property
    def event_frames(self):
        """Gets the event_frames of this AssetDatabaseLinks.


        :return: The event_frames of this AssetDatabaseLinks.
        :rtype: str
        """
        return self._event_frames

    @event_frames.setter
    def event_frames(self, event_frames):
        """Sets the event_frames of this AssetDatabaseLinks.


        :param event_frames: The event_frames of this AssetDatabaseLinks.
        :type event_frames: str
        """

        self._event_frames = event_frames

    @property
    def security(self):
        """Gets the security of this AssetDatabaseLinks.


        :return: The security of this AssetDatabaseLinks.
        :rtype: str
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this AssetDatabaseLinks.


        :param security: The security of this AssetDatabaseLinks.
        :type security: str
        """

        self._security = security

    @property
    def security_entries(self):
        """Gets the security_entries of this AssetDatabaseLinks.


        :return: The security_entries of this AssetDatabaseLinks.
        :rtype: str
        """
        return self._security_entries

    @security_entries.setter
    def security_entries(self, security_entries):
        """Sets the security_entries of this AssetDatabaseLinks.


        :param security_entries: The security_entries of this AssetDatabaseLinks.
        :type security_entries: str
        """

        self._security_entries = security_entries

    @property
    def _self(self):
        """Gets the _self of this AssetDatabaseLinks.


        :return: The _self of this AssetDatabaseLinks.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this AssetDatabaseLinks.


        :param _self: The _self of this AssetDatabaseLinks.
        :type _self: str
        """

        self.__self = _self

    @property
    def table_categories(self):
        """Gets the table_categories of this AssetDatabaseLinks.


        :return: The table_categories of this AssetDatabaseLinks.
        :rtype: str
        """
        return self._table_categories

    @table_categories.setter
    def table_categories(self, table_categories):
        """Sets the table_categories of this AssetDatabaseLinks.


        :param table_categories: The table_categories of this AssetDatabaseLinks.
        :type table_categories: str
        """

        self._table_categories = table_categories

    @property
    def tables(self):
        """Gets the tables of this AssetDatabaseLinks.


        :return: The tables of this AssetDatabaseLinks.
        :rtype: str
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """Sets the tables of this AssetDatabaseLinks.


        :param tables: The tables of this AssetDatabaseLinks.
        :type tables: str
        """

        self._tables = tables
