# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.element_links import ElementLinks
from openapi_server.models.property_error import PropertyError
from openapi_server.models.value import Value
from openapi_server.models.web_exception import WebException
from openapi_server import util


class Element(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_names: List[str]=None, description: str=None, errors: List[PropertyError]=None, extended_properties: Dict[str, Value]=None, has_children: bool=None, id: str=None, links: ElementLinks=None, name: str=None, path: str=None, paths: List[str]=None, template_name: str=None, web_exception: WebException=None, web_id: str=None):
        """Element - a model defined in OpenAPI

        :param category_names: The category_names of this Element.
        :param description: The description of this Element.
        :param errors: The errors of this Element.
        :param extended_properties: The extended_properties of this Element.
        :param has_children: The has_children of this Element.
        :param id: The id of this Element.
        :param links: The links of this Element.
        :param name: The name of this Element.
        :param path: The path of this Element.
        :param paths: The paths of this Element.
        :param template_name: The template_name of this Element.
        :param web_exception: The web_exception of this Element.
        :param web_id: The web_id of this Element.
        """
        self.openapi_types = {
            'category_names': List[str],
            'description': str,
            'errors': List[PropertyError],
            'extended_properties': Dict[str, Value],
            'has_children': bool,
            'id': str,
            'links': ElementLinks,
            'name': str,
            'path': str,
            'paths': List[str],
            'template_name': str,
            'web_exception': WebException,
            'web_id': str
        }

        self.attribute_map = {
            'category_names': 'CategoryNames',
            'description': 'Description',
            'errors': 'Errors',
            'extended_properties': 'ExtendedProperties',
            'has_children': 'HasChildren',
            'id': 'Id',
            'links': 'Links',
            'name': 'Name',
            'path': 'Path',
            'paths': 'Paths',
            'template_name': 'TemplateName',
            'web_exception': 'WebException',
            'web_id': 'WebId'
        }

        self._category_names = category_names
        self._description = description
        self._errors = errors
        self._extended_properties = extended_properties
        self._has_children = has_children
        self._id = id
        self._links = links
        self._name = name
        self._path = path
        self._paths = paths
        self._template_name = template_name
        self._web_exception = web_exception
        self._web_id = web_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Element':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Element of this Element.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_names(self):
        """Gets the category_names of this Element.


        :return: The category_names of this Element.
        :rtype: List[str]
        """
        return self._category_names

    @category_names.setter
    def category_names(self, category_names):
        """Sets the category_names of this Element.


        :param category_names: The category_names of this Element.
        :type category_names: List[str]
        """

        self._category_names = category_names

    @property
    def description(self):
        """Gets the description of this Element.


        :return: The description of this Element.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Element.


        :param description: The description of this Element.
        :type description: str
        """

        self._description = description

    @property
    def errors(self):
        """Gets the errors of this Element.


        :return: The errors of this Element.
        :rtype: List[PropertyError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Element.


        :param errors: The errors of this Element.
        :type errors: List[PropertyError]
        """

        self._errors = errors

    @property
    def extended_properties(self):
        """Gets the extended_properties of this Element.


        :return: The extended_properties of this Element.
        :rtype: Dict[str, Value]
        """
        return self._extended_properties

    @extended_properties.setter
    def extended_properties(self, extended_properties):
        """Sets the extended_properties of this Element.


        :param extended_properties: The extended_properties of this Element.
        :type extended_properties: Dict[str, Value]
        """

        self._extended_properties = extended_properties

    @property
    def has_children(self):
        """Gets the has_children of this Element.


        :return: The has_children of this Element.
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this Element.


        :param has_children: The has_children of this Element.
        :type has_children: bool
        """

        self._has_children = has_children

    @property
    def id(self):
        """Gets the id of this Element.


        :return: The id of this Element.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Element.


        :param id: The id of this Element.
        :type id: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this Element.


        :return: The links of this Element.
        :rtype: ElementLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Element.


        :param links: The links of this Element.
        :type links: ElementLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this Element.


        :return: The name of this Element.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Element.


        :param name: The name of this Element.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this Element.


        :return: The path of this Element.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Element.


        :param path: The path of this Element.
        :type path: str
        """

        self._path = path

    @property
    def paths(self):
        """Gets the paths of this Element.


        :return: The paths of this Element.
        :rtype: List[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this Element.


        :param paths: The paths of this Element.
        :type paths: List[str]
        """

        self._paths = paths

    @property
    def template_name(self):
        """Gets the template_name of this Element.


        :return: The template_name of this Element.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this Element.


        :param template_name: The template_name of this Element.
        :type template_name: str
        """

        self._template_name = template_name

    @property
    def web_exception(self):
        """Gets the web_exception of this Element.


        :return: The web_exception of this Element.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this Element.


        :param web_exception: The web_exception of this Element.
        :type web_exception: WebException
        """

        self._web_exception = web_exception

    @property
    def web_id(self):
        """Gets the web_id of this Element.


        :return: The web_id of this Element.
        :rtype: str
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this Element.


        :param web_id: The web_id of this Element.
        :type web_id: str
        """

        self._web_id = web_id
