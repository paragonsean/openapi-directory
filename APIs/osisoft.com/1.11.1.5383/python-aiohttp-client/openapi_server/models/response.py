# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: object=None, headers: Dict[str, str]=None, status: int=None):
        """Response - a model defined in OpenAPI

        :param content: The content of this Response.
        :param headers: The headers of this Response.
        :param status: The status of this Response.
        """
        self.openapi_types = {
            'content': object,
            'headers': Dict[str, str],
            'status': int
        }

        self.attribute_map = {
            'content': 'Content',
            'headers': 'Headers',
            'status': 'Status'
        }

        self._content = content
        self._headers = headers
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Response of this Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this Response.


        :return: The content of this Response.
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Response.


        :param content: The content of this Response.
        :type content: object
        """

        self._content = content

    @property
    def headers(self):
        """Gets the headers of this Response.


        :return: The headers of this Response.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Response.


        :param headers: The headers of this Response.
        :type headers: Dict[str, str]
        """

        self._headers = headers

    @property
    def status(self):
        """Gets the status of this Response.


        :return: The status of this Response.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Response.


        :param status: The status of this Response.
        :type status: int
        """
        allowed_values = [100, 101, 200, 201, 202, 203, 204, 205, 206, 207, 300, 301, 302, 303, 304, 305, 306, 307, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 426, 500, 501, 502, 503, 504, 505]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
