# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute_trait_links import AttributeTraitLinks
from openapi_server.models.web_exception import WebException
from openapi_server import util


class AttributeTrait(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abbreviation: str=None, allow_child_attributes: bool=None, allow_duplicates: bool=None, is_allowed_on_root_attribute: bool=None, is_type_inherited: bool=None, is_uom_inherited: bool=None, links: AttributeTraitLinks=None, name: str=None, require_numeric: bool=None, require_string: bool=None, web_exception: WebException=None):
        """AttributeTrait - a model defined in OpenAPI

        :param abbreviation: The abbreviation of this AttributeTrait.
        :param allow_child_attributes: The allow_child_attributes of this AttributeTrait.
        :param allow_duplicates: The allow_duplicates of this AttributeTrait.
        :param is_allowed_on_root_attribute: The is_allowed_on_root_attribute of this AttributeTrait.
        :param is_type_inherited: The is_type_inherited of this AttributeTrait.
        :param is_uom_inherited: The is_uom_inherited of this AttributeTrait.
        :param links: The links of this AttributeTrait.
        :param name: The name of this AttributeTrait.
        :param require_numeric: The require_numeric of this AttributeTrait.
        :param require_string: The require_string of this AttributeTrait.
        :param web_exception: The web_exception of this AttributeTrait.
        """
        self.openapi_types = {
            'abbreviation': str,
            'allow_child_attributes': bool,
            'allow_duplicates': bool,
            'is_allowed_on_root_attribute': bool,
            'is_type_inherited': bool,
            'is_uom_inherited': bool,
            'links': AttributeTraitLinks,
            'name': str,
            'require_numeric': bool,
            'require_string': bool,
            'web_exception': WebException
        }

        self.attribute_map = {
            'abbreviation': 'Abbreviation',
            'allow_child_attributes': 'AllowChildAttributes',
            'allow_duplicates': 'AllowDuplicates',
            'is_allowed_on_root_attribute': 'IsAllowedOnRootAttribute',
            'is_type_inherited': 'IsTypeInherited',
            'is_uom_inherited': 'IsUOMInherited',
            'links': 'Links',
            'name': 'Name',
            'require_numeric': 'RequireNumeric',
            'require_string': 'RequireString',
            'web_exception': 'WebException'
        }

        self._abbreviation = abbreviation
        self._allow_child_attributes = allow_child_attributes
        self._allow_duplicates = allow_duplicates
        self._is_allowed_on_root_attribute = is_allowed_on_root_attribute
        self._is_type_inherited = is_type_inherited
        self._is_uom_inherited = is_uom_inherited
        self._links = links
        self._name = name
        self._require_numeric = require_numeric
        self._require_string = require_string
        self._web_exception = web_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeTrait':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributeTrait of this AttributeTrait.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abbreviation(self):
        """Gets the abbreviation of this AttributeTrait.


        :return: The abbreviation of this AttributeTrait.
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this AttributeTrait.


        :param abbreviation: The abbreviation of this AttributeTrait.
        :type abbreviation: str
        """

        self._abbreviation = abbreviation

    @property
    def allow_child_attributes(self):
        """Gets the allow_child_attributes of this AttributeTrait.


        :return: The allow_child_attributes of this AttributeTrait.
        :rtype: bool
        """
        return self._allow_child_attributes

    @allow_child_attributes.setter
    def allow_child_attributes(self, allow_child_attributes):
        """Sets the allow_child_attributes of this AttributeTrait.


        :param allow_child_attributes: The allow_child_attributes of this AttributeTrait.
        :type allow_child_attributes: bool
        """

        self._allow_child_attributes = allow_child_attributes

    @property
    def allow_duplicates(self):
        """Gets the allow_duplicates of this AttributeTrait.


        :return: The allow_duplicates of this AttributeTrait.
        :rtype: bool
        """
        return self._allow_duplicates

    @allow_duplicates.setter
    def allow_duplicates(self, allow_duplicates):
        """Sets the allow_duplicates of this AttributeTrait.


        :param allow_duplicates: The allow_duplicates of this AttributeTrait.
        :type allow_duplicates: bool
        """

        self._allow_duplicates = allow_duplicates

    @property
    def is_allowed_on_root_attribute(self):
        """Gets the is_allowed_on_root_attribute of this AttributeTrait.


        :return: The is_allowed_on_root_attribute of this AttributeTrait.
        :rtype: bool
        """
        return self._is_allowed_on_root_attribute

    @is_allowed_on_root_attribute.setter
    def is_allowed_on_root_attribute(self, is_allowed_on_root_attribute):
        """Sets the is_allowed_on_root_attribute of this AttributeTrait.


        :param is_allowed_on_root_attribute: The is_allowed_on_root_attribute of this AttributeTrait.
        :type is_allowed_on_root_attribute: bool
        """

        self._is_allowed_on_root_attribute = is_allowed_on_root_attribute

    @property
    def is_type_inherited(self):
        """Gets the is_type_inherited of this AttributeTrait.


        :return: The is_type_inherited of this AttributeTrait.
        :rtype: bool
        """
        return self._is_type_inherited

    @is_type_inherited.setter
    def is_type_inherited(self, is_type_inherited):
        """Sets the is_type_inherited of this AttributeTrait.


        :param is_type_inherited: The is_type_inherited of this AttributeTrait.
        :type is_type_inherited: bool
        """

        self._is_type_inherited = is_type_inherited

    @property
    def is_uom_inherited(self):
        """Gets the is_uom_inherited of this AttributeTrait.


        :return: The is_uom_inherited of this AttributeTrait.
        :rtype: bool
        """
        return self._is_uom_inherited

    @is_uom_inherited.setter
    def is_uom_inherited(self, is_uom_inherited):
        """Sets the is_uom_inherited of this AttributeTrait.


        :param is_uom_inherited: The is_uom_inherited of this AttributeTrait.
        :type is_uom_inherited: bool
        """

        self._is_uom_inherited = is_uom_inherited

    @property
    def links(self):
        """Gets the links of this AttributeTrait.


        :return: The links of this AttributeTrait.
        :rtype: AttributeTraitLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AttributeTrait.


        :param links: The links of this AttributeTrait.
        :type links: AttributeTraitLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this AttributeTrait.


        :return: The name of this AttributeTrait.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttributeTrait.


        :param name: The name of this AttributeTrait.
        :type name: str
        """

        self._name = name

    @property
    def require_numeric(self):
        """Gets the require_numeric of this AttributeTrait.


        :return: The require_numeric of this AttributeTrait.
        :rtype: bool
        """
        return self._require_numeric

    @require_numeric.setter
    def require_numeric(self, require_numeric):
        """Sets the require_numeric of this AttributeTrait.


        :param require_numeric: The require_numeric of this AttributeTrait.
        :type require_numeric: bool
        """

        self._require_numeric = require_numeric

    @property
    def require_string(self):
        """Gets the require_string of this AttributeTrait.


        :return: The require_string of this AttributeTrait.
        :rtype: bool
        """
        return self._require_string

    @require_string.setter
    def require_string(self, require_string):
        """Sets the require_string of this AttributeTrait.


        :param require_string: The require_string of this AttributeTrait.
        :type require_string: bool
        """

        self._require_string = require_string

    @property
    def web_exception(self):
        """Gets the web_exception of this AttributeTrait.


        :return: The web_exception of this AttributeTrait.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this AttributeTrait.


        :param web_exception: The web_exception of this AttributeTrait.
        :type web_exception: WebException
        """

        self._web_exception = web_exception
