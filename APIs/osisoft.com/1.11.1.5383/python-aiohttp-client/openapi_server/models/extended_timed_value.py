# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.property_error import PropertyError
from openapi_server.models.stream_annotation import StreamAnnotation
from openapi_server.models.web_exception import WebException
from openapi_server import util


class ExtendedTimedValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotated: bool=None, annotations: List[StreamAnnotation]=None, errors: List[PropertyError]=None, good: bool=None, questionable: bool=None, substituted: bool=None, timestamp: datetime=None, units_abbreviation: str=None, value: object=None, web_exception: WebException=None):
        """ExtendedTimedValue - a model defined in OpenAPI

        :param annotated: The annotated of this ExtendedTimedValue.
        :param annotations: The annotations of this ExtendedTimedValue.
        :param errors: The errors of this ExtendedTimedValue.
        :param good: The good of this ExtendedTimedValue.
        :param questionable: The questionable of this ExtendedTimedValue.
        :param substituted: The substituted of this ExtendedTimedValue.
        :param timestamp: The timestamp of this ExtendedTimedValue.
        :param units_abbreviation: The units_abbreviation of this ExtendedTimedValue.
        :param value: The value of this ExtendedTimedValue.
        :param web_exception: The web_exception of this ExtendedTimedValue.
        """
        self.openapi_types = {
            'annotated': bool,
            'annotations': List[StreamAnnotation],
            'errors': List[PropertyError],
            'good': bool,
            'questionable': bool,
            'substituted': bool,
            'timestamp': datetime,
            'units_abbreviation': str,
            'value': object,
            'web_exception': WebException
        }

        self.attribute_map = {
            'annotated': 'Annotated',
            'annotations': 'Annotations',
            'errors': 'Errors',
            'good': 'Good',
            'questionable': 'Questionable',
            'substituted': 'Substituted',
            'timestamp': 'Timestamp',
            'units_abbreviation': 'UnitsAbbreviation',
            'value': 'Value',
            'web_exception': 'WebException'
        }

        self._annotated = annotated
        self._annotations = annotations
        self._errors = errors
        self._good = good
        self._questionable = questionable
        self._substituted = substituted
        self._timestamp = timestamp
        self._units_abbreviation = units_abbreviation
        self._value = value
        self._web_exception = web_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtendedTimedValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtendedTimedValue of this ExtendedTimedValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotated(self):
        """Gets the annotated of this ExtendedTimedValue.


        :return: The annotated of this ExtendedTimedValue.
        :rtype: bool
        """
        return self._annotated

    @annotated.setter
    def annotated(self, annotated):
        """Sets the annotated of this ExtendedTimedValue.


        :param annotated: The annotated of this ExtendedTimedValue.
        :type annotated: bool
        """

        self._annotated = annotated

    @property
    def annotations(self):
        """Gets the annotations of this ExtendedTimedValue.


        :return: The annotations of this ExtendedTimedValue.
        :rtype: List[StreamAnnotation]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this ExtendedTimedValue.


        :param annotations: The annotations of this ExtendedTimedValue.
        :type annotations: List[StreamAnnotation]
        """

        self._annotations = annotations

    @property
    def errors(self):
        """Gets the errors of this ExtendedTimedValue.


        :return: The errors of this ExtendedTimedValue.
        :rtype: List[PropertyError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ExtendedTimedValue.


        :param errors: The errors of this ExtendedTimedValue.
        :type errors: List[PropertyError]
        """

        self._errors = errors

    @property
    def good(self):
        """Gets the good of this ExtendedTimedValue.


        :return: The good of this ExtendedTimedValue.
        :rtype: bool
        """
        return self._good

    @good.setter
    def good(self, good):
        """Sets the good of this ExtendedTimedValue.


        :param good: The good of this ExtendedTimedValue.
        :type good: bool
        """

        self._good = good

    @property
    def questionable(self):
        """Gets the questionable of this ExtendedTimedValue.


        :return: The questionable of this ExtendedTimedValue.
        :rtype: bool
        """
        return self._questionable

    @questionable.setter
    def questionable(self, questionable):
        """Sets the questionable of this ExtendedTimedValue.


        :param questionable: The questionable of this ExtendedTimedValue.
        :type questionable: bool
        """

        self._questionable = questionable

    @property
    def substituted(self):
        """Gets the substituted of this ExtendedTimedValue.


        :return: The substituted of this ExtendedTimedValue.
        :rtype: bool
        """
        return self._substituted

    @substituted.setter
    def substituted(self, substituted):
        """Sets the substituted of this ExtendedTimedValue.


        :param substituted: The substituted of this ExtendedTimedValue.
        :type substituted: bool
        """

        self._substituted = substituted

    @property
    def timestamp(self):
        """Gets the timestamp of this ExtendedTimedValue.


        :return: The timestamp of this ExtendedTimedValue.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ExtendedTimedValue.


        :param timestamp: The timestamp of this ExtendedTimedValue.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def units_abbreviation(self):
        """Gets the units_abbreviation of this ExtendedTimedValue.


        :return: The units_abbreviation of this ExtendedTimedValue.
        :rtype: str
        """
        return self._units_abbreviation

    @units_abbreviation.setter
    def units_abbreviation(self, units_abbreviation):
        """Sets the units_abbreviation of this ExtendedTimedValue.


        :param units_abbreviation: The units_abbreviation of this ExtendedTimedValue.
        :type units_abbreviation: str
        """

        self._units_abbreviation = units_abbreviation

    @property
    def value(self):
        """Gets the value of this ExtendedTimedValue.


        :return: The value of this ExtendedTimedValue.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ExtendedTimedValue.


        :param value: The value of this ExtendedTimedValue.
        :type value: object
        """

        self._value = value

    @property
    def web_exception(self):
        """Gets the web_exception of this ExtendedTimedValue.


        :return: The web_exception of this ExtendedTimedValue.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this ExtendedTimedValue.


        :param web_exception: The web_exception of this ExtendedTimedValue.
        :type web_exception: WebException
        """

        self._web_exception = web_exception
