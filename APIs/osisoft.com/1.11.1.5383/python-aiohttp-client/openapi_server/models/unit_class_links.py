# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UnitClassLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_server: str=None, canonical_unit: str=None, _self: str=None, units: str=None):
        """UnitClassLinks - a model defined in OpenAPI

        :param asset_server: The asset_server of this UnitClassLinks.
        :param canonical_unit: The canonical_unit of this UnitClassLinks.
        :param _self: The _self of this UnitClassLinks.
        :param units: The units of this UnitClassLinks.
        """
        self.openapi_types = {
            'asset_server': str,
            'canonical_unit': str,
            '_self': str,
            'units': str
        }

        self.attribute_map = {
            'asset_server': 'AssetServer',
            'canonical_unit': 'CanonicalUnit',
            '_self': 'Self',
            'units': 'Units'
        }

        self._asset_server = asset_server
        self._canonical_unit = canonical_unit
        self.__self = _self
        self._units = units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnitClassLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UnitClassLinks of this UnitClassLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_server(self):
        """Gets the asset_server of this UnitClassLinks.


        :return: The asset_server of this UnitClassLinks.
        :rtype: str
        """
        return self._asset_server

    @asset_server.setter
    def asset_server(self, asset_server):
        """Sets the asset_server of this UnitClassLinks.


        :param asset_server: The asset_server of this UnitClassLinks.
        :type asset_server: str
        """

        self._asset_server = asset_server

    @property
    def canonical_unit(self):
        """Gets the canonical_unit of this UnitClassLinks.


        :return: The canonical_unit of this UnitClassLinks.
        :rtype: str
        """
        return self._canonical_unit

    @canonical_unit.setter
    def canonical_unit(self, canonical_unit):
        """Sets the canonical_unit of this UnitClassLinks.


        :param canonical_unit: The canonical_unit of this UnitClassLinks.
        :type canonical_unit: str
        """

        self._canonical_unit = canonical_unit

    @property
    def _self(self):
        """Gets the _self of this UnitClassLinks.


        :return: The _self of this UnitClassLinks.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this UnitClassLinks.


        :param _self: The _self of this UnitClassLinks.
        :type _self: str
        """

        self.__self = _self

    @property
    def units(self):
        """Gets the units of this UnitClassLinks.


        :return: The units of this UnitClassLinks.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this UnitClassLinks.


        :param units: The units of this UnitClassLinks.
        :type units: str
        """

        self._units = units
