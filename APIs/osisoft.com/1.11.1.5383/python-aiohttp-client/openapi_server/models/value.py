# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.errors import Errors
from openapi_server.models.web_exception import WebException
from openapi_server import util


class Value(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exception: Errors=None, value: object=None, web_exception: WebException=None):
        """Value - a model defined in OpenAPI

        :param exception: The exception of this Value.
        :param value: The value of this Value.
        :param web_exception: The web_exception of this Value.
        """
        self.openapi_types = {
            'exception': Errors,
            'value': object,
            'web_exception': WebException
        }

        self.attribute_map = {
            'exception': 'Exception',
            'value': 'Value',
            'web_exception': 'WebException'
        }

        self._exception = exception
        self._value = value
        self._web_exception = web_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Value':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Value of this Value.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exception(self):
        """Gets the exception of this Value.


        :return: The exception of this Value.
        :rtype: Errors
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this Value.


        :param exception: The exception of this Value.
        :type exception: Errors
        """

        self._exception = exception

    @property
    def value(self):
        """Gets the value of this Value.


        :return: The value of this Value.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Value.


        :param value: The value of this Value.
        :type value: object
        """

        self._value = value

    @property
    def web_exception(self):
        """Gets the web_exception of this Value.


        :return: The web_exception of this Value.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this Value.


        :param web_exception: The web_exception of this Value.
        :type web_exception: WebException
        """

        self._web_exception = web_exception
