# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.security_entry_links import SecurityEntryLinks
from openapi_server.models.web_exception import WebException
from openapi_server import util


class SecurityEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_rights: List[str]=None, deny_rights: List[str]=None, links: SecurityEntryLinks=None, name: str=None, security_identity_name: str=None, web_exception: WebException=None):
        """SecurityEntry - a model defined in OpenAPI

        :param allow_rights: The allow_rights of this SecurityEntry.
        :param deny_rights: The deny_rights of this SecurityEntry.
        :param links: The links of this SecurityEntry.
        :param name: The name of this SecurityEntry.
        :param security_identity_name: The security_identity_name of this SecurityEntry.
        :param web_exception: The web_exception of this SecurityEntry.
        """
        self.openapi_types = {
            'allow_rights': List[str],
            'deny_rights': List[str],
            'links': SecurityEntryLinks,
            'name': str,
            'security_identity_name': str,
            'web_exception': WebException
        }

        self.attribute_map = {
            'allow_rights': 'AllowRights',
            'deny_rights': 'DenyRights',
            'links': 'Links',
            'name': 'Name',
            'security_identity_name': 'SecurityIdentityName',
            'web_exception': 'WebException'
        }

        self._allow_rights = allow_rights
        self._deny_rights = deny_rights
        self._links = links
        self._name = name
        self._security_identity_name = security_identity_name
        self._web_exception = web_exception

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecurityEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecurityEntry of this SecurityEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_rights(self):
        """Gets the allow_rights of this SecurityEntry.


        :return: The allow_rights of this SecurityEntry.
        :rtype: List[str]
        """
        return self._allow_rights

    @allow_rights.setter
    def allow_rights(self, allow_rights):
        """Sets the allow_rights of this SecurityEntry.


        :param allow_rights: The allow_rights of this SecurityEntry.
        :type allow_rights: List[str]
        """

        self._allow_rights = allow_rights

    @property
    def deny_rights(self):
        """Gets the deny_rights of this SecurityEntry.


        :return: The deny_rights of this SecurityEntry.
        :rtype: List[str]
        """
        return self._deny_rights

    @deny_rights.setter
    def deny_rights(self, deny_rights):
        """Sets the deny_rights of this SecurityEntry.


        :param deny_rights: The deny_rights of this SecurityEntry.
        :type deny_rights: List[str]
        """

        self._deny_rights = deny_rights

    @property
    def links(self):
        """Gets the links of this SecurityEntry.


        :return: The links of this SecurityEntry.
        :rtype: SecurityEntryLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SecurityEntry.


        :param links: The links of this SecurityEntry.
        :type links: SecurityEntryLinks
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this SecurityEntry.


        :return: The name of this SecurityEntry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SecurityEntry.


        :param name: The name of this SecurityEntry.
        :type name: str
        """

        self._name = name

    @property
    def security_identity_name(self):
        """Gets the security_identity_name of this SecurityEntry.


        :return: The security_identity_name of this SecurityEntry.
        :rtype: str
        """
        return self._security_identity_name

    @security_identity_name.setter
    def security_identity_name(self, security_identity_name):
        """Sets the security_identity_name of this SecurityEntry.


        :param security_identity_name: The security_identity_name of this SecurityEntry.
        :type security_identity_name: str
        """

        self._security_identity_name = security_identity_name

    @property
    def web_exception(self):
        """Gets the web_exception of this SecurityEntry.


        :return: The web_exception of this SecurityEntry.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this SecurityEntry.


        :param web_exception: The web_exception of this SecurityEntry.
        :type web_exception: WebException
        """

        self._web_exception = web_exception
