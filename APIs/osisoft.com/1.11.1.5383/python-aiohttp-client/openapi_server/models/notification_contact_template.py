# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_contact_template_links import NotificationContactTemplateLinks
from openapi_server.models.web_exception import WebException
from openapi_server import util


class NotificationContactTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: bool=None, config_string: str=None, contact_type: str=None, description: str=None, escalation_timeout: str=None, has_children: bool=None, id: str=None, links: NotificationContactTemplateLinks=None, maximum_retries: int=None, minimum_acknowledgements: int=None, name: str=None, notify_when_instance_ended: bool=None, path: str=None, plug_in_name: str=None, retry_interval: str=None, web_exception: WebException=None, web_id: str=None):
        """NotificationContactTemplate - a model defined in OpenAPI

        :param available: The available of this NotificationContactTemplate.
        :param config_string: The config_string of this NotificationContactTemplate.
        :param contact_type: The contact_type of this NotificationContactTemplate.
        :param description: The description of this NotificationContactTemplate.
        :param escalation_timeout: The escalation_timeout of this NotificationContactTemplate.
        :param has_children: The has_children of this NotificationContactTemplate.
        :param id: The id of this NotificationContactTemplate.
        :param links: The links of this NotificationContactTemplate.
        :param maximum_retries: The maximum_retries of this NotificationContactTemplate.
        :param minimum_acknowledgements: The minimum_acknowledgements of this NotificationContactTemplate.
        :param name: The name of this NotificationContactTemplate.
        :param notify_when_instance_ended: The notify_when_instance_ended of this NotificationContactTemplate.
        :param path: The path of this NotificationContactTemplate.
        :param plug_in_name: The plug_in_name of this NotificationContactTemplate.
        :param retry_interval: The retry_interval of this NotificationContactTemplate.
        :param web_exception: The web_exception of this NotificationContactTemplate.
        :param web_id: The web_id of this NotificationContactTemplate.
        """
        self.openapi_types = {
            'available': bool,
            'config_string': str,
            'contact_type': str,
            'description': str,
            'escalation_timeout': str,
            'has_children': bool,
            'id': str,
            'links': NotificationContactTemplateLinks,
            'maximum_retries': int,
            'minimum_acknowledgements': int,
            'name': str,
            'notify_when_instance_ended': bool,
            'path': str,
            'plug_in_name': str,
            'retry_interval': str,
            'web_exception': WebException,
            'web_id': str
        }

        self.attribute_map = {
            'available': 'Available',
            'config_string': 'ConfigString',
            'contact_type': 'ContactType',
            'description': 'Description',
            'escalation_timeout': 'EscalationTimeout',
            'has_children': 'HasChildren',
            'id': 'Id',
            'links': 'Links',
            'maximum_retries': 'MaximumRetries',
            'minimum_acknowledgements': 'MinimumAcknowledgements',
            'name': 'Name',
            'notify_when_instance_ended': 'NotifyWhenInstanceEnded',
            'path': 'Path',
            'plug_in_name': 'PlugInName',
            'retry_interval': 'RetryInterval',
            'web_exception': 'WebException',
            'web_id': 'WebId'
        }

        self._available = available
        self._config_string = config_string
        self._contact_type = contact_type
        self._description = description
        self._escalation_timeout = escalation_timeout
        self._has_children = has_children
        self._id = id
        self._links = links
        self._maximum_retries = maximum_retries
        self._minimum_acknowledgements = minimum_acknowledgements
        self._name = name
        self._notify_when_instance_ended = notify_when_instance_ended
        self._path = path
        self._plug_in_name = plug_in_name
        self._retry_interval = retry_interval
        self._web_exception = web_exception
        self._web_id = web_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationContactTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationContactTemplate of this NotificationContactTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this NotificationContactTemplate.


        :return: The available of this NotificationContactTemplate.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this NotificationContactTemplate.


        :param available: The available of this NotificationContactTemplate.
        :type available: bool
        """

        self._available = available

    @property
    def config_string(self):
        """Gets the config_string of this NotificationContactTemplate.


        :return: The config_string of this NotificationContactTemplate.
        :rtype: str
        """
        return self._config_string

    @config_string.setter
    def config_string(self, config_string):
        """Sets the config_string of this NotificationContactTemplate.


        :param config_string: The config_string of this NotificationContactTemplate.
        :type config_string: str
        """

        self._config_string = config_string

    @property
    def contact_type(self):
        """Gets the contact_type of this NotificationContactTemplate.


        :return: The contact_type of this NotificationContactTemplate.
        :rtype: str
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this NotificationContactTemplate.


        :param contact_type: The contact_type of this NotificationContactTemplate.
        :type contact_type: str
        """

        self._contact_type = contact_type

    @property
    def description(self):
        """Gets the description of this NotificationContactTemplate.


        :return: The description of this NotificationContactTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NotificationContactTemplate.


        :param description: The description of this NotificationContactTemplate.
        :type description: str
        """

        self._description = description

    @property
    def escalation_timeout(self):
        """Gets the escalation_timeout of this NotificationContactTemplate.


        :return: The escalation_timeout of this NotificationContactTemplate.
        :rtype: str
        """
        return self._escalation_timeout

    @escalation_timeout.setter
    def escalation_timeout(self, escalation_timeout):
        """Sets the escalation_timeout of this NotificationContactTemplate.


        :param escalation_timeout: The escalation_timeout of this NotificationContactTemplate.
        :type escalation_timeout: str
        """

        self._escalation_timeout = escalation_timeout

    @property
    def has_children(self):
        """Gets the has_children of this NotificationContactTemplate.


        :return: The has_children of this NotificationContactTemplate.
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this NotificationContactTemplate.


        :param has_children: The has_children of this NotificationContactTemplate.
        :type has_children: bool
        """

        self._has_children = has_children

    @property
    def id(self):
        """Gets the id of this NotificationContactTemplate.


        :return: The id of this NotificationContactTemplate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationContactTemplate.


        :param id: The id of this NotificationContactTemplate.
        :type id: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this NotificationContactTemplate.


        :return: The links of this NotificationContactTemplate.
        :rtype: NotificationContactTemplateLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this NotificationContactTemplate.


        :param links: The links of this NotificationContactTemplate.
        :type links: NotificationContactTemplateLinks
        """

        self._links = links

    @property
    def maximum_retries(self):
        """Gets the maximum_retries of this NotificationContactTemplate.


        :return: The maximum_retries of this NotificationContactTemplate.
        :rtype: int
        """
        return self._maximum_retries

    @maximum_retries.setter
    def maximum_retries(self, maximum_retries):
        """Sets the maximum_retries of this NotificationContactTemplate.


        :param maximum_retries: The maximum_retries of this NotificationContactTemplate.
        :type maximum_retries: int
        """

        self._maximum_retries = maximum_retries

    @property
    def minimum_acknowledgements(self):
        """Gets the minimum_acknowledgements of this NotificationContactTemplate.


        :return: The minimum_acknowledgements of this NotificationContactTemplate.
        :rtype: int
        """
        return self._minimum_acknowledgements

    @minimum_acknowledgements.setter
    def minimum_acknowledgements(self, minimum_acknowledgements):
        """Sets the minimum_acknowledgements of this NotificationContactTemplate.


        :param minimum_acknowledgements: The minimum_acknowledgements of this NotificationContactTemplate.
        :type minimum_acknowledgements: int
        """

        self._minimum_acknowledgements = minimum_acknowledgements

    @property
    def name(self):
        """Gets the name of this NotificationContactTemplate.


        :return: The name of this NotificationContactTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationContactTemplate.


        :param name: The name of this NotificationContactTemplate.
        :type name: str
        """

        self._name = name

    @property
    def notify_when_instance_ended(self):
        """Gets the notify_when_instance_ended of this NotificationContactTemplate.


        :return: The notify_when_instance_ended of this NotificationContactTemplate.
        :rtype: bool
        """
        return self._notify_when_instance_ended

    @notify_when_instance_ended.setter
    def notify_when_instance_ended(self, notify_when_instance_ended):
        """Sets the notify_when_instance_ended of this NotificationContactTemplate.


        :param notify_when_instance_ended: The notify_when_instance_ended of this NotificationContactTemplate.
        :type notify_when_instance_ended: bool
        """

        self._notify_when_instance_ended = notify_when_instance_ended

    @property
    def path(self):
        """Gets the path of this NotificationContactTemplate.


        :return: The path of this NotificationContactTemplate.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this NotificationContactTemplate.


        :param path: The path of this NotificationContactTemplate.
        :type path: str
        """

        self._path = path

    @property
    def plug_in_name(self):
        """Gets the plug_in_name of this NotificationContactTemplate.


        :return: The plug_in_name of this NotificationContactTemplate.
        :rtype: str
        """
        return self._plug_in_name

    @plug_in_name.setter
    def plug_in_name(self, plug_in_name):
        """Sets the plug_in_name of this NotificationContactTemplate.


        :param plug_in_name: The plug_in_name of this NotificationContactTemplate.
        :type plug_in_name: str
        """

        self._plug_in_name = plug_in_name

    @property
    def retry_interval(self):
        """Gets the retry_interval of this NotificationContactTemplate.


        :return: The retry_interval of this NotificationContactTemplate.
        :rtype: str
        """
        return self._retry_interval

    @retry_interval.setter
    def retry_interval(self, retry_interval):
        """Sets the retry_interval of this NotificationContactTemplate.


        :param retry_interval: The retry_interval of this NotificationContactTemplate.
        :type retry_interval: str
        """

        self._retry_interval = retry_interval

    @property
    def web_exception(self):
        """Gets the web_exception of this NotificationContactTemplate.


        :return: The web_exception of this NotificationContactTemplate.
        :rtype: WebException
        """
        return self._web_exception

    @web_exception.setter
    def web_exception(self, web_exception):
        """Sets the web_exception of this NotificationContactTemplate.


        :param web_exception: The web_exception of this NotificationContactTemplate.
        :type web_exception: WebException
        """

        self._web_exception = web_exception

    @property
    def web_id(self):
        """Gets the web_id of this NotificationContactTemplate.


        :return: The web_id of this NotificationContactTemplate.
        :rtype: str
        """
        return self._web_id

    @web_id.setter
    def web_id(self, web_id):
        """Sets the web_id of this NotificationContactTemplate.


        :param web_id: The web_id of this NotificationContactTemplate.
        :type web_id: str
        """

        self._web_id = web_id
