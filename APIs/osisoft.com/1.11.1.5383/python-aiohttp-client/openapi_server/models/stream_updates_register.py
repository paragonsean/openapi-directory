# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.errors import Errors
from openapi_server import util


class StreamUpdatesRegister(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exception: Errors=None, latest_marker: str=None, source: str=None, source_name: str=None, source_path: str=None, status: str=None):
        """StreamUpdatesRegister - a model defined in OpenAPI

        :param exception: The exception of this StreamUpdatesRegister.
        :param latest_marker: The latest_marker of this StreamUpdatesRegister.
        :param source: The source of this StreamUpdatesRegister.
        :param source_name: The source_name of this StreamUpdatesRegister.
        :param source_path: The source_path of this StreamUpdatesRegister.
        :param status: The status of this StreamUpdatesRegister.
        """
        self.openapi_types = {
            'exception': Errors,
            'latest_marker': str,
            'source': str,
            'source_name': str,
            'source_path': str,
            'status': str
        }

        self.attribute_map = {
            'exception': 'Exception',
            'latest_marker': 'LatestMarker',
            'source': 'Source',
            'source_name': 'SourceName',
            'source_path': 'SourcePath',
            'status': 'Status'
        }

        self._exception = exception
        self._latest_marker = latest_marker
        self._source = source
        self._source_name = source_name
        self._source_path = source_path
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamUpdatesRegister':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamUpdatesRegister of this StreamUpdatesRegister.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exception(self):
        """Gets the exception of this StreamUpdatesRegister.


        :return: The exception of this StreamUpdatesRegister.
        :rtype: Errors
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this StreamUpdatesRegister.


        :param exception: The exception of this StreamUpdatesRegister.
        :type exception: Errors
        """

        self._exception = exception

    @property
    def latest_marker(self):
        """Gets the latest_marker of this StreamUpdatesRegister.


        :return: The latest_marker of this StreamUpdatesRegister.
        :rtype: str
        """
        return self._latest_marker

    @latest_marker.setter
    def latest_marker(self, latest_marker):
        """Sets the latest_marker of this StreamUpdatesRegister.


        :param latest_marker: The latest_marker of this StreamUpdatesRegister.
        :type latest_marker: str
        """

        self._latest_marker = latest_marker

    @property
    def source(self):
        """Gets the source of this StreamUpdatesRegister.


        :return: The source of this StreamUpdatesRegister.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this StreamUpdatesRegister.


        :param source: The source of this StreamUpdatesRegister.
        :type source: str
        """

        self._source = source

    @property
    def source_name(self):
        """Gets the source_name of this StreamUpdatesRegister.


        :return: The source_name of this StreamUpdatesRegister.
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this StreamUpdatesRegister.


        :param source_name: The source_name of this StreamUpdatesRegister.
        :type source_name: str
        """

        self._source_name = source_name

    @property
    def source_path(self):
        """Gets the source_path of this StreamUpdatesRegister.


        :return: The source_path of this StreamUpdatesRegister.
        :rtype: str
        """
        return self._source_path

    @source_path.setter
    def source_path(self, source_path):
        """Sets the source_path of this StreamUpdatesRegister.


        :param source_path: The source_path of this StreamUpdatesRegister.
        :type source_path: str
        """

        self._source_path = source_path

    @property
    def status(self):
        """Gets the status of this StreamUpdatesRegister.


        :return: The status of this StreamUpdatesRegister.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StreamUpdatesRegister.


        :param status: The status of this StreamUpdatesRegister.
        :type status: str
        """

        self._status = status
