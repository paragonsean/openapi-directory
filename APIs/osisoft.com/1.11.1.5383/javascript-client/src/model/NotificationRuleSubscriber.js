/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WebException from './WebException';

/**
 * The NotificationRuleSubscriber model module.
 * @module model/NotificationRuleSubscriber
 * @version 1.11.1.5383
 */
class NotificationRuleSubscriber {
    /**
     * Constructs a new <code>NotificationRuleSubscriber</code>.
     * @alias module:model/NotificationRuleSubscriber
     */
    constructor() { 
        
        NotificationRuleSubscriber.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotificationRuleSubscriber</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationRuleSubscriber} obj Optional instance to populate.
     * @return {module:model/NotificationRuleSubscriber} The populated <code>NotificationRuleSubscriber</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationRuleSubscriber();

            if (data.hasOwnProperty('ConfigString')) {
                obj['ConfigString'] = ApiClient.convertToType(data['ConfigString'], 'String');
            }
            if (data.hasOwnProperty('ContactTemplateName')) {
                obj['ContactTemplateName'] = ApiClient.convertToType(data['ContactTemplateName'], 'String');
            }
            if (data.hasOwnProperty('ContactType')) {
                obj['ContactType'] = ApiClient.convertToType(data['ContactType'], 'String');
            }
            if (data.hasOwnProperty('DeliveryFormatName')) {
                obj['DeliveryFormatName'] = ApiClient.convertToType(data['DeliveryFormatName'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('EscalationTimeout')) {
                obj['EscalationTimeout'] = ApiClient.convertToType(data['EscalationTimeout'], 'String');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('MaximumRetries')) {
                obj['MaximumRetries'] = ApiClient.convertToType(data['MaximumRetries'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NotifyOption')) {
                obj['NotifyOption'] = ApiClient.convertToType(data['NotifyOption'], 'String');
            }
            if (data.hasOwnProperty('Path')) {
                obj['Path'] = ApiClient.convertToType(data['Path'], 'String');
            }
            if (data.hasOwnProperty('PlugInName')) {
                obj['PlugInName'] = ApiClient.convertToType(data['PlugInName'], 'String');
            }
            if (data.hasOwnProperty('RetryInterval')) {
                obj['RetryInterval'] = ApiClient.convertToType(data['RetryInterval'], 'String');
            }
            if (data.hasOwnProperty('WebException')) {
                obj['WebException'] = WebException.constructFromObject(data['WebException']);
            }
            if (data.hasOwnProperty('WebId')) {
                obj['WebId'] = ApiClient.convertToType(data['WebId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationRuleSubscriber</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationRuleSubscriber</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ConfigString'] && !(typeof data['ConfigString'] === 'string' || data['ConfigString'] instanceof String)) {
            throw new Error("Expected the field `ConfigString` to be a primitive type in the JSON string but got " + data['ConfigString']);
        }
        // ensure the json data is a string
        if (data['ContactTemplateName'] && !(typeof data['ContactTemplateName'] === 'string' || data['ContactTemplateName'] instanceof String)) {
            throw new Error("Expected the field `ContactTemplateName` to be a primitive type in the JSON string but got " + data['ContactTemplateName']);
        }
        // ensure the json data is a string
        if (data['ContactType'] && !(typeof data['ContactType'] === 'string' || data['ContactType'] instanceof String)) {
            throw new Error("Expected the field `ContactType` to be a primitive type in the JSON string but got " + data['ContactType']);
        }
        // ensure the json data is a string
        if (data['DeliveryFormatName'] && !(typeof data['DeliveryFormatName'] === 'string' || data['DeliveryFormatName'] instanceof String)) {
            throw new Error("Expected the field `DeliveryFormatName` to be a primitive type in the JSON string but got " + data['DeliveryFormatName']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['EscalationTimeout'] && !(typeof data['EscalationTimeout'] === 'string' || data['EscalationTimeout'] instanceof String)) {
            throw new Error("Expected the field `EscalationTimeout` to be a primitive type in the JSON string but got " + data['EscalationTimeout']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['NotifyOption'] && !(typeof data['NotifyOption'] === 'string' || data['NotifyOption'] instanceof String)) {
            throw new Error("Expected the field `NotifyOption` to be a primitive type in the JSON string but got " + data['NotifyOption']);
        }
        // ensure the json data is a string
        if (data['Path'] && !(typeof data['Path'] === 'string' || data['Path'] instanceof String)) {
            throw new Error("Expected the field `Path` to be a primitive type in the JSON string but got " + data['Path']);
        }
        // ensure the json data is a string
        if (data['PlugInName'] && !(typeof data['PlugInName'] === 'string' || data['PlugInName'] instanceof String)) {
            throw new Error("Expected the field `PlugInName` to be a primitive type in the JSON string but got " + data['PlugInName']);
        }
        // ensure the json data is a string
        if (data['RetryInterval'] && !(typeof data['RetryInterval'] === 'string' || data['RetryInterval'] instanceof String)) {
            throw new Error("Expected the field `RetryInterval` to be a primitive type in the JSON string but got " + data['RetryInterval']);
        }
        // validate the optional field `WebException`
        if (data['WebException']) { // data not null
          WebException.validateJSON(data['WebException']);
        }
        // ensure the json data is a string
        if (data['WebId'] && !(typeof data['WebId'] === 'string' || data['WebId'] instanceof String)) {
            throw new Error("Expected the field `WebId` to be a primitive type in the JSON string but got " + data['WebId']);
        }

        return true;
    }


}



/**
 * @member {String} ConfigString
 */
NotificationRuleSubscriber.prototype['ConfigString'] = undefined;

/**
 * @member {String} ContactTemplateName
 */
NotificationRuleSubscriber.prototype['ContactTemplateName'] = undefined;

/**
 * @member {String} ContactType
 */
NotificationRuleSubscriber.prototype['ContactType'] = undefined;

/**
 * @member {String} DeliveryFormatName
 */
NotificationRuleSubscriber.prototype['DeliveryFormatName'] = undefined;

/**
 * @member {String} Description
 */
NotificationRuleSubscriber.prototype['Description'] = undefined;

/**
 * @member {String} EscalationTimeout
 */
NotificationRuleSubscriber.prototype['EscalationTimeout'] = undefined;

/**
 * @member {String} Id
 */
NotificationRuleSubscriber.prototype['Id'] = undefined;

/**
 * @member {Number} MaximumRetries
 */
NotificationRuleSubscriber.prototype['MaximumRetries'] = undefined;

/**
 * @member {String} Name
 */
NotificationRuleSubscriber.prototype['Name'] = undefined;

/**
 * @member {String} NotifyOption
 */
NotificationRuleSubscriber.prototype['NotifyOption'] = undefined;

/**
 * @member {String} Path
 */
NotificationRuleSubscriber.prototype['Path'] = undefined;

/**
 * @member {String} PlugInName
 */
NotificationRuleSubscriber.prototype['PlugInName'] = undefined;

/**
 * @member {String} RetryInterval
 */
NotificationRuleSubscriber.prototype['RetryInterval'] = undefined;

/**
 * @member {module:model/WebException} WebException
 */
NotificationRuleSubscriber.prototype['WebException'] = undefined;

/**
 * @member {String} WebId
 */
NotificationRuleSubscriber.prototype['WebId'] = undefined;






export default NotificationRuleSubscriber;

