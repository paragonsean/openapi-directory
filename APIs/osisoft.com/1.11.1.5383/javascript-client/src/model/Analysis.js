/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalysisLinks from './AnalysisLinks';
import WebException from './WebException';

/**
 * The Analysis model module.
 * @module model/Analysis
 * @version 1.11.1.5383
 */
class Analysis {
    /**
     * Constructs a new <code>Analysis</code>.
     * @alias module:model/Analysis
     */
    constructor() { 
        
        Analysis.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Analysis</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Analysis} obj Optional instance to populate.
     * @return {module:model/Analysis} The populated <code>Analysis</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Analysis();

            if (data.hasOwnProperty('AnalysisRulePlugInName')) {
                obj['AnalysisRulePlugInName'] = ApiClient.convertToType(data['AnalysisRulePlugInName'], 'String');
            }
            if (data.hasOwnProperty('AutoCreated')) {
                obj['AutoCreated'] = ApiClient.convertToType(data['AutoCreated'], 'Boolean');
            }
            if (data.hasOwnProperty('CategoryNames')) {
                obj['CategoryNames'] = ApiClient.convertToType(data['CategoryNames'], ['String']);
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('GroupId')) {
                obj['GroupId'] = ApiClient.convertToType(data['GroupId'], 'Number');
            }
            if (data.hasOwnProperty('HasNotification')) {
                obj['HasNotification'] = ApiClient.convertToType(data['HasNotification'], 'Boolean');
            }
            if (data.hasOwnProperty('HasTarget')) {
                obj['HasTarget'] = ApiClient.convertToType(data['HasTarget'], 'Boolean');
            }
            if (data.hasOwnProperty('HasTemplate')) {
                obj['HasTemplate'] = ApiClient.convertToType(data['HasTemplate'], 'Boolean');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('IsConfigured')) {
                obj['IsConfigured'] = ApiClient.convertToType(data['IsConfigured'], 'Boolean');
            }
            if (data.hasOwnProperty('IsTimeRuleDefinedByTemplate')) {
                obj['IsTimeRuleDefinedByTemplate'] = ApiClient.convertToType(data['IsTimeRuleDefinedByTemplate'], 'Boolean');
            }
            if (data.hasOwnProperty('Links')) {
                obj['Links'] = AnalysisLinks.constructFromObject(data['Links']);
            }
            if (data.hasOwnProperty('MaximumQueueSize')) {
                obj['MaximumQueueSize'] = ApiClient.convertToType(data['MaximumQueueSize'], 'Number');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('OutputTime')) {
                obj['OutputTime'] = ApiClient.convertToType(data['OutputTime'], 'String');
            }
            if (data.hasOwnProperty('Path')) {
                obj['Path'] = ApiClient.convertToType(data['Path'], 'String');
            }
            if (data.hasOwnProperty('Priority')) {
                obj['Priority'] = ApiClient.convertToType(data['Priority'], 'String');
            }
            if (data.hasOwnProperty('PublishResults')) {
                obj['PublishResults'] = ApiClient.convertToType(data['PublishResults'], 'Boolean');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('TargetWebId')) {
                obj['TargetWebId'] = ApiClient.convertToType(data['TargetWebId'], 'String');
            }
            if (data.hasOwnProperty('TemplateName')) {
                obj['TemplateName'] = ApiClient.convertToType(data['TemplateName'], 'String');
            }
            if (data.hasOwnProperty('TimeRulePlugInName')) {
                obj['TimeRulePlugInName'] = ApiClient.convertToType(data['TimeRulePlugInName'], 'String');
            }
            if (data.hasOwnProperty('WebException')) {
                obj['WebException'] = WebException.constructFromObject(data['WebException']);
            }
            if (data.hasOwnProperty('WebId')) {
                obj['WebId'] = ApiClient.convertToType(data['WebId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Analysis</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Analysis</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AnalysisRulePlugInName'] && !(typeof data['AnalysisRulePlugInName'] === 'string' || data['AnalysisRulePlugInName'] instanceof String)) {
            throw new Error("Expected the field `AnalysisRulePlugInName` to be a primitive type in the JSON string but got " + data['AnalysisRulePlugInName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['CategoryNames'])) {
            throw new Error("Expected the field `CategoryNames` to be an array in the JSON data but got " + data['CategoryNames']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // validate the optional field `Links`
        if (data['Links']) { // data not null
          AnalysisLinks.validateJSON(data['Links']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['OutputTime'] && !(typeof data['OutputTime'] === 'string' || data['OutputTime'] instanceof String)) {
            throw new Error("Expected the field `OutputTime` to be a primitive type in the JSON string but got " + data['OutputTime']);
        }
        // ensure the json data is a string
        if (data['Path'] && !(typeof data['Path'] === 'string' || data['Path'] instanceof String)) {
            throw new Error("Expected the field `Path` to be a primitive type in the JSON string but got " + data['Path']);
        }
        // ensure the json data is a string
        if (data['Priority'] && !(typeof data['Priority'] === 'string' || data['Priority'] instanceof String)) {
            throw new Error("Expected the field `Priority` to be a primitive type in the JSON string but got " + data['Priority']);
        }
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        // ensure the json data is a string
        if (data['TargetWebId'] && !(typeof data['TargetWebId'] === 'string' || data['TargetWebId'] instanceof String)) {
            throw new Error("Expected the field `TargetWebId` to be a primitive type in the JSON string but got " + data['TargetWebId']);
        }
        // ensure the json data is a string
        if (data['TemplateName'] && !(typeof data['TemplateName'] === 'string' || data['TemplateName'] instanceof String)) {
            throw new Error("Expected the field `TemplateName` to be a primitive type in the JSON string but got " + data['TemplateName']);
        }
        // ensure the json data is a string
        if (data['TimeRulePlugInName'] && !(typeof data['TimeRulePlugInName'] === 'string' || data['TimeRulePlugInName'] instanceof String)) {
            throw new Error("Expected the field `TimeRulePlugInName` to be a primitive type in the JSON string but got " + data['TimeRulePlugInName']);
        }
        // validate the optional field `WebException`
        if (data['WebException']) { // data not null
          WebException.validateJSON(data['WebException']);
        }
        // ensure the json data is a string
        if (data['WebId'] && !(typeof data['WebId'] === 'string' || data['WebId'] instanceof String)) {
            throw new Error("Expected the field `WebId` to be a primitive type in the JSON string but got " + data['WebId']);
        }

        return true;
    }


}



/**
 * @member {String} AnalysisRulePlugInName
 */
Analysis.prototype['AnalysisRulePlugInName'] = undefined;

/**
 * @member {Boolean} AutoCreated
 */
Analysis.prototype['AutoCreated'] = undefined;

/**
 * @member {Array.<String>} CategoryNames
 */
Analysis.prototype['CategoryNames'] = undefined;

/**
 * @member {String} Description
 */
Analysis.prototype['Description'] = undefined;

/**
 * @member {Number} GroupId
 */
Analysis.prototype['GroupId'] = undefined;

/**
 * @member {Boolean} HasNotification
 */
Analysis.prototype['HasNotification'] = undefined;

/**
 * @member {Boolean} HasTarget
 */
Analysis.prototype['HasTarget'] = undefined;

/**
 * @member {Boolean} HasTemplate
 */
Analysis.prototype['HasTemplate'] = undefined;

/**
 * @member {String} Id
 */
Analysis.prototype['Id'] = undefined;

/**
 * @member {Boolean} IsConfigured
 */
Analysis.prototype['IsConfigured'] = undefined;

/**
 * @member {Boolean} IsTimeRuleDefinedByTemplate
 */
Analysis.prototype['IsTimeRuleDefinedByTemplate'] = undefined;

/**
 * @member {module:model/AnalysisLinks} Links
 */
Analysis.prototype['Links'] = undefined;

/**
 * @member {Number} MaximumQueueSize
 */
Analysis.prototype['MaximumQueueSize'] = undefined;

/**
 * @member {String} Name
 */
Analysis.prototype['Name'] = undefined;

/**
 * @member {String} OutputTime
 */
Analysis.prototype['OutputTime'] = undefined;

/**
 * @member {String} Path
 */
Analysis.prototype['Path'] = undefined;

/**
 * @member {String} Priority
 */
Analysis.prototype['Priority'] = undefined;

/**
 * @member {Boolean} PublishResults
 */
Analysis.prototype['PublishResults'] = undefined;

/**
 * @member {String} Status
 */
Analysis.prototype['Status'] = undefined;

/**
 * @member {String} TargetWebId
 */
Analysis.prototype['TargetWebId'] = undefined;

/**
 * @member {String} TemplateName
 */
Analysis.prototype['TemplateName'] = undefined;

/**
 * @member {String} TimeRulePlugInName
 */
Analysis.prototype['TimeRulePlugInName'] = undefined;

/**
 * @member {module:model/WebException} WebException
 */
Analysis.prototype['WebException'] = undefined;

/**
 * @member {String} WebId
 */
Analysis.prototype['WebId'] = undefined;






export default Analysis;

