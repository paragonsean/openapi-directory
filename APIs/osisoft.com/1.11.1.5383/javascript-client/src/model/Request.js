/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RequestTemplate from './RequestTemplate';

/**
 * The Request model module.
 * @module model/Request
 * @version 1.11.1.5383
 */
class Request {
    /**
     * Constructs a new <code>Request</code>.
     * @alias module:model/Request
     */
    constructor() { 
        
        Request.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Request</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Request} obj Optional instance to populate.
     * @return {module:model/Request} The populated <code>Request</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Request();

            if (data.hasOwnProperty('Content')) {
                obj['Content'] = ApiClient.convertToType(data['Content'], 'String');
            }
            if (data.hasOwnProperty('Headers')) {
                obj['Headers'] = ApiClient.convertToType(data['Headers'], {'String': 'String'});
            }
            if (data.hasOwnProperty('Method')) {
                obj['Method'] = ApiClient.convertToType(data['Method'], 'String');
            }
            if (data.hasOwnProperty('Parameters')) {
                obj['Parameters'] = ApiClient.convertToType(data['Parameters'], ['String']);
            }
            if (data.hasOwnProperty('ParentIds')) {
                obj['ParentIds'] = ApiClient.convertToType(data['ParentIds'], ['String']);
            }
            if (data.hasOwnProperty('RequestTemplate')) {
                obj['RequestTemplate'] = RequestTemplate.constructFromObject(data['RequestTemplate']);
            }
            if (data.hasOwnProperty('Resource')) {
                obj['Resource'] = ApiClient.convertToType(data['Resource'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Request</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Request</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Content'] && !(typeof data['Content'] === 'string' || data['Content'] instanceof String)) {
            throw new Error("Expected the field `Content` to be a primitive type in the JSON string but got " + data['Content']);
        }
        // ensure the json data is a string
        if (data['Method'] && !(typeof data['Method'] === 'string' || data['Method'] instanceof String)) {
            throw new Error("Expected the field `Method` to be a primitive type in the JSON string but got " + data['Method']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Parameters'])) {
            throw new Error("Expected the field `Parameters` to be an array in the JSON data but got " + data['Parameters']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ParentIds'])) {
            throw new Error("Expected the field `ParentIds` to be an array in the JSON data but got " + data['ParentIds']);
        }
        // validate the optional field `RequestTemplate`
        if (data['RequestTemplate']) { // data not null
          RequestTemplate.validateJSON(data['RequestTemplate']);
        }
        // ensure the json data is a string
        if (data['Resource'] && !(typeof data['Resource'] === 'string' || data['Resource'] instanceof String)) {
            throw new Error("Expected the field `Resource` to be a primitive type in the JSON string but got " + data['Resource']);
        }

        return true;
    }


}



/**
 * @member {String} Content
 */
Request.prototype['Content'] = undefined;

/**
 * @member {Object.<String, String>} Headers
 */
Request.prototype['Headers'] = undefined;

/**
 * @member {String} Method
 */
Request.prototype['Method'] = undefined;

/**
 * @member {Array.<String>} Parameters
 */
Request.prototype['Parameters'] = undefined;

/**
 * @member {Array.<String>} ParentIds
 */
Request.prototype['ParentIds'] = undefined;

/**
 * @member {module:model/RequestTemplate} RequestTemplate
 */
Request.prototype['RequestTemplate'] = undefined;

/**
 * @member {String} Resource
 */
Request.prototype['Resource'] = undefined;






export default Request;

