/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeLinks from './AttributeLinks';
import DataReference from './DataReference';
import WebException from './WebException';

/**
 * The Attribute model module.
 * @module model/Attribute
 * @version 1.11.1.5383
 */
class Attribute {
    /**
     * Constructs a new <code>Attribute</code>.
     * @alias module:model/Attribute
     */
    constructor() { 
        
        Attribute.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attribute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attribute} obj Optional instance to populate.
     * @return {module:model/Attribute} The populated <code>Attribute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attribute();

            if (data.hasOwnProperty('CategoryNames')) {
                obj['CategoryNames'] = ApiClient.convertToType(data['CategoryNames'], ['String']);
            }
            if (data.hasOwnProperty('ConfigString')) {
                obj['ConfigString'] = ApiClient.convertToType(data['ConfigString'], 'String');
            }
            if (data.hasOwnProperty('DataReference')) {
                obj['DataReference'] = DataReference.constructFromObject(data['DataReference']);
            }
            if (data.hasOwnProperty('DataReferencePlugIn')) {
                obj['DataReferencePlugIn'] = ApiClient.convertToType(data['DataReferencePlugIn'], 'String');
            }
            if (data.hasOwnProperty('DefaultUnitsName')) {
                obj['DefaultUnitsName'] = ApiClient.convertToType(data['DefaultUnitsName'], 'String');
            }
            if (data.hasOwnProperty('DefaultUnitsNameAbbreviation')) {
                obj['DefaultUnitsNameAbbreviation'] = ApiClient.convertToType(data['DefaultUnitsNameAbbreviation'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('DisplayDigits')) {
                obj['DisplayDigits'] = ApiClient.convertToType(data['DisplayDigits'], 'Number');
            }
            if (data.hasOwnProperty('HasChildren')) {
                obj['HasChildren'] = ApiClient.convertToType(data['HasChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('IsConfigurationItem')) {
                obj['IsConfigurationItem'] = ApiClient.convertToType(data['IsConfigurationItem'], 'Boolean');
            }
            if (data.hasOwnProperty('IsExcluded')) {
                obj['IsExcluded'] = ApiClient.convertToType(data['IsExcluded'], 'Boolean');
            }
            if (data.hasOwnProperty('IsHidden')) {
                obj['IsHidden'] = ApiClient.convertToType(data['IsHidden'], 'Boolean');
            }
            if (data.hasOwnProperty('IsManualDataEntry')) {
                obj['IsManualDataEntry'] = ApiClient.convertToType(data['IsManualDataEntry'], 'Boolean');
            }
            if (data.hasOwnProperty('Links')) {
                obj['Links'] = AttributeLinks.constructFromObject(data['Links']);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Path')) {
                obj['Path'] = ApiClient.convertToType(data['Path'], 'String');
            }
            if (data.hasOwnProperty('Paths')) {
                obj['Paths'] = ApiClient.convertToType(data['Paths'], ['String']);
            }
            if (data.hasOwnProperty('Span')) {
                obj['Span'] = ApiClient.convertToType(data['Span'], 'Number');
            }
            if (data.hasOwnProperty('Step')) {
                obj['Step'] = ApiClient.convertToType(data['Step'], 'Boolean');
            }
            if (data.hasOwnProperty('TraitName')) {
                obj['TraitName'] = ApiClient.convertToType(data['TraitName'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('TypeQualifier')) {
                obj['TypeQualifier'] = ApiClient.convertToType(data['TypeQualifier'], 'String');
            }
            if (data.hasOwnProperty('WebException')) {
                obj['WebException'] = WebException.constructFromObject(data['WebException']);
            }
            if (data.hasOwnProperty('WebId')) {
                obj['WebId'] = ApiClient.convertToType(data['WebId'], 'String');
            }
            if (data.hasOwnProperty('Zero')) {
                obj['Zero'] = ApiClient.convertToType(data['Zero'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attribute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attribute</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['CategoryNames'])) {
            throw new Error("Expected the field `CategoryNames` to be an array in the JSON data but got " + data['CategoryNames']);
        }
        // ensure the json data is a string
        if (data['ConfigString'] && !(typeof data['ConfigString'] === 'string' || data['ConfigString'] instanceof String)) {
            throw new Error("Expected the field `ConfigString` to be a primitive type in the JSON string but got " + data['ConfigString']);
        }
        // validate the optional field `DataReference`
        if (data['DataReference']) { // data not null
          DataReference.validateJSON(data['DataReference']);
        }
        // ensure the json data is a string
        if (data['DataReferencePlugIn'] && !(typeof data['DataReferencePlugIn'] === 'string' || data['DataReferencePlugIn'] instanceof String)) {
            throw new Error("Expected the field `DataReferencePlugIn` to be a primitive type in the JSON string but got " + data['DataReferencePlugIn']);
        }
        // ensure the json data is a string
        if (data['DefaultUnitsName'] && !(typeof data['DefaultUnitsName'] === 'string' || data['DefaultUnitsName'] instanceof String)) {
            throw new Error("Expected the field `DefaultUnitsName` to be a primitive type in the JSON string but got " + data['DefaultUnitsName']);
        }
        // ensure the json data is a string
        if (data['DefaultUnitsNameAbbreviation'] && !(typeof data['DefaultUnitsNameAbbreviation'] === 'string' || data['DefaultUnitsNameAbbreviation'] instanceof String)) {
            throw new Error("Expected the field `DefaultUnitsNameAbbreviation` to be a primitive type in the JSON string but got " + data['DefaultUnitsNameAbbreviation']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // validate the optional field `Links`
        if (data['Links']) { // data not null
          AttributeLinks.validateJSON(data['Links']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Path'] && !(typeof data['Path'] === 'string' || data['Path'] instanceof String)) {
            throw new Error("Expected the field `Path` to be a primitive type in the JSON string but got " + data['Path']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Paths'])) {
            throw new Error("Expected the field `Paths` to be an array in the JSON data but got " + data['Paths']);
        }
        // ensure the json data is a string
        if (data['TraitName'] && !(typeof data['TraitName'] === 'string' || data['TraitName'] instanceof String)) {
            throw new Error("Expected the field `TraitName` to be a primitive type in the JSON string but got " + data['TraitName']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['TypeQualifier'] && !(typeof data['TypeQualifier'] === 'string' || data['TypeQualifier'] instanceof String)) {
            throw new Error("Expected the field `TypeQualifier` to be a primitive type in the JSON string but got " + data['TypeQualifier']);
        }
        // validate the optional field `WebException`
        if (data['WebException']) { // data not null
          WebException.validateJSON(data['WebException']);
        }
        // ensure the json data is a string
        if (data['WebId'] && !(typeof data['WebId'] === 'string' || data['WebId'] instanceof String)) {
            throw new Error("Expected the field `WebId` to be a primitive type in the JSON string but got " + data['WebId']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} CategoryNames
 */
Attribute.prototype['CategoryNames'] = undefined;

/**
 * @member {String} ConfigString
 */
Attribute.prototype['ConfigString'] = undefined;

/**
 * @member {module:model/DataReference} DataReference
 */
Attribute.prototype['DataReference'] = undefined;

/**
 * @member {String} DataReferencePlugIn
 */
Attribute.prototype['DataReferencePlugIn'] = undefined;

/**
 * @member {String} DefaultUnitsName
 */
Attribute.prototype['DefaultUnitsName'] = undefined;

/**
 * @member {String} DefaultUnitsNameAbbreviation
 */
Attribute.prototype['DefaultUnitsNameAbbreviation'] = undefined;

/**
 * @member {String} Description
 */
Attribute.prototype['Description'] = undefined;

/**
 * @member {Number} DisplayDigits
 */
Attribute.prototype['DisplayDigits'] = undefined;

/**
 * @member {Boolean} HasChildren
 */
Attribute.prototype['HasChildren'] = undefined;

/**
 * @member {String} Id
 */
Attribute.prototype['Id'] = undefined;

/**
 * @member {Boolean} IsConfigurationItem
 */
Attribute.prototype['IsConfigurationItem'] = undefined;

/**
 * @member {Boolean} IsExcluded
 */
Attribute.prototype['IsExcluded'] = undefined;

/**
 * @member {Boolean} IsHidden
 */
Attribute.prototype['IsHidden'] = undefined;

/**
 * @member {Boolean} IsManualDataEntry
 */
Attribute.prototype['IsManualDataEntry'] = undefined;

/**
 * @member {module:model/AttributeLinks} Links
 */
Attribute.prototype['Links'] = undefined;

/**
 * @member {String} Name
 */
Attribute.prototype['Name'] = undefined;

/**
 * @member {String} Path
 */
Attribute.prototype['Path'] = undefined;

/**
 * @member {Array.<String>} Paths
 */
Attribute.prototype['Paths'] = undefined;

/**
 * @member {Number} Span
 */
Attribute.prototype['Span'] = undefined;

/**
 * @member {Boolean} Step
 */
Attribute.prototype['Step'] = undefined;

/**
 * @member {String} TraitName
 */
Attribute.prototype['TraitName'] = undefined;

/**
 * @member {String} Type
 */
Attribute.prototype['Type'] = undefined;

/**
 * @member {String} TypeQualifier
 */
Attribute.prototype['TypeQualifier'] = undefined;

/**
 * @member {module:model/WebException} WebException
 */
Attribute.prototype['WebException'] = undefined;

/**
 * @member {String} WebId
 */
Attribute.prototype['WebId'] = undefined;

/**
 * @member {Number} Zero
 */
Attribute.prototype['Zero'] = undefined;






export default Attribute;

