/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attribute from './Attribute';
import Errors from './Errors';

/**
 * The ItemAttribute model module.
 * @module model/ItemAttribute
 * @version 1.11.1.5383
 */
class ItemAttribute {
    /**
     * Constructs a new <code>ItemAttribute</code>.
     * @alias module:model/ItemAttribute
     */
    constructor() { 
        
        ItemAttribute.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemAttribute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemAttribute} obj Optional instance to populate.
     * @return {module:model/ItemAttribute} The populated <code>ItemAttribute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemAttribute();

            if (data.hasOwnProperty('Exception')) {
                obj['Exception'] = Errors.constructFromObject(data['Exception']);
            }
            if (data.hasOwnProperty('Identifier')) {
                obj['Identifier'] = ApiClient.convertToType(data['Identifier'], 'String');
            }
            if (data.hasOwnProperty('IdentifierType')) {
                obj['IdentifierType'] = ApiClient.convertToType(data['IdentifierType'], 'String');
            }
            if (data.hasOwnProperty('Object')) {
                obj['Object'] = Attribute.constructFromObject(data['Object']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemAttribute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemAttribute</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Exception`
        if (data['Exception']) { // data not null
          Errors.validateJSON(data['Exception']);
        }
        // ensure the json data is a string
        if (data['Identifier'] && !(typeof data['Identifier'] === 'string' || data['Identifier'] instanceof String)) {
            throw new Error("Expected the field `Identifier` to be a primitive type in the JSON string but got " + data['Identifier']);
        }
        // ensure the json data is a string
        if (data['IdentifierType'] && !(typeof data['IdentifierType'] === 'string' || data['IdentifierType'] instanceof String)) {
            throw new Error("Expected the field `IdentifierType` to be a primitive type in the JSON string but got " + data['IdentifierType']);
        }
        // validate the optional field `Object`
        if (data['Object']) { // data not null
          Attribute.validateJSON(data['Object']);
        }

        return true;
    }


}



/**
 * @member {module:model/Errors} Exception
 */
ItemAttribute.prototype['Exception'] = undefined;

/**
 * @member {String} Identifier
 */
ItemAttribute.prototype['Identifier'] = undefined;

/**
 * @member {String} IdentifierType
 */
ItemAttribute.prototype['IdentifierType'] = undefined;

/**
 * @member {module:model/Attribute} Object
 */
ItemAttribute.prototype['Object'] = undefined;






export default ItemAttribute;

