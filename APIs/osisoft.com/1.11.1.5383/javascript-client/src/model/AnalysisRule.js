/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalysisRuleLinks from './AnalysisRuleLinks';
import WebException from './WebException';

/**
 * The AnalysisRule model module.
 * @module model/AnalysisRule
 * @version 1.11.1.5383
 */
class AnalysisRule {
    /**
     * Constructs a new <code>AnalysisRule</code>.
     * @alias module:model/AnalysisRule
     */
    constructor() { 
        
        AnalysisRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnalysisRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnalysisRule} obj Optional instance to populate.
     * @return {module:model/AnalysisRule} The populated <code>AnalysisRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnalysisRule();

            if (data.hasOwnProperty('ConfigString')) {
                obj['ConfigString'] = ApiClient.convertToType(data['ConfigString'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('DisplayString')) {
                obj['DisplayString'] = ApiClient.convertToType(data['DisplayString'], 'String');
            }
            if (data.hasOwnProperty('EditorType')) {
                obj['EditorType'] = ApiClient.convertToType(data['EditorType'], 'String');
            }
            if (data.hasOwnProperty('HasChildren')) {
                obj['HasChildren'] = ApiClient.convertToType(data['HasChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('IsConfigured')) {
                obj['IsConfigured'] = ApiClient.convertToType(data['IsConfigured'], 'Boolean');
            }
            if (data.hasOwnProperty('IsInitializing')) {
                obj['IsInitializing'] = ApiClient.convertToType(data['IsInitializing'], 'Boolean');
            }
            if (data.hasOwnProperty('Links')) {
                obj['Links'] = AnalysisRuleLinks.constructFromObject(data['Links']);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Path')) {
                obj['Path'] = ApiClient.convertToType(data['Path'], 'String');
            }
            if (data.hasOwnProperty('PlugInName')) {
                obj['PlugInName'] = ApiClient.convertToType(data['PlugInName'], 'String');
            }
            if (data.hasOwnProperty('SupportedBehaviors')) {
                obj['SupportedBehaviors'] = ApiClient.convertToType(data['SupportedBehaviors'], ['String']);
            }
            if (data.hasOwnProperty('VariableMapping')) {
                obj['VariableMapping'] = ApiClient.convertToType(data['VariableMapping'], 'String');
            }
            if (data.hasOwnProperty('WebException')) {
                obj['WebException'] = WebException.constructFromObject(data['WebException']);
            }
            if (data.hasOwnProperty('WebId')) {
                obj['WebId'] = ApiClient.convertToType(data['WebId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnalysisRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnalysisRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ConfigString'] && !(typeof data['ConfigString'] === 'string' || data['ConfigString'] instanceof String)) {
            throw new Error("Expected the field `ConfigString` to be a primitive type in the JSON string but got " + data['ConfigString']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['DisplayString'] && !(typeof data['DisplayString'] === 'string' || data['DisplayString'] instanceof String)) {
            throw new Error("Expected the field `DisplayString` to be a primitive type in the JSON string but got " + data['DisplayString']);
        }
        // ensure the json data is a string
        if (data['EditorType'] && !(typeof data['EditorType'] === 'string' || data['EditorType'] instanceof String)) {
            throw new Error("Expected the field `EditorType` to be a primitive type in the JSON string but got " + data['EditorType']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // validate the optional field `Links`
        if (data['Links']) { // data not null
          AnalysisRuleLinks.validateJSON(data['Links']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Path'] && !(typeof data['Path'] === 'string' || data['Path'] instanceof String)) {
            throw new Error("Expected the field `Path` to be a primitive type in the JSON string but got " + data['Path']);
        }
        // ensure the json data is a string
        if (data['PlugInName'] && !(typeof data['PlugInName'] === 'string' || data['PlugInName'] instanceof String)) {
            throw new Error("Expected the field `PlugInName` to be a primitive type in the JSON string but got " + data['PlugInName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SupportedBehaviors'])) {
            throw new Error("Expected the field `SupportedBehaviors` to be an array in the JSON data but got " + data['SupportedBehaviors']);
        }
        // ensure the json data is a string
        if (data['VariableMapping'] && !(typeof data['VariableMapping'] === 'string' || data['VariableMapping'] instanceof String)) {
            throw new Error("Expected the field `VariableMapping` to be a primitive type in the JSON string but got " + data['VariableMapping']);
        }
        // validate the optional field `WebException`
        if (data['WebException']) { // data not null
          WebException.validateJSON(data['WebException']);
        }
        // ensure the json data is a string
        if (data['WebId'] && !(typeof data['WebId'] === 'string' || data['WebId'] instanceof String)) {
            throw new Error("Expected the field `WebId` to be a primitive type in the JSON string but got " + data['WebId']);
        }

        return true;
    }


}



/**
 * @member {String} ConfigString
 */
AnalysisRule.prototype['ConfigString'] = undefined;

/**
 * @member {String} Description
 */
AnalysisRule.prototype['Description'] = undefined;

/**
 * @member {String} DisplayString
 */
AnalysisRule.prototype['DisplayString'] = undefined;

/**
 * @member {String} EditorType
 */
AnalysisRule.prototype['EditorType'] = undefined;

/**
 * @member {Boolean} HasChildren
 */
AnalysisRule.prototype['HasChildren'] = undefined;

/**
 * @member {String} Id
 */
AnalysisRule.prototype['Id'] = undefined;

/**
 * @member {Boolean} IsConfigured
 */
AnalysisRule.prototype['IsConfigured'] = undefined;

/**
 * @member {Boolean} IsInitializing
 */
AnalysisRule.prototype['IsInitializing'] = undefined;

/**
 * @member {module:model/AnalysisRuleLinks} Links
 */
AnalysisRule.prototype['Links'] = undefined;

/**
 * @member {String} Name
 */
AnalysisRule.prototype['Name'] = undefined;

/**
 * @member {String} Path
 */
AnalysisRule.prototype['Path'] = undefined;

/**
 * @member {String} PlugInName
 */
AnalysisRule.prototype['PlugInName'] = undefined;

/**
 * @member {Array.<String>} SupportedBehaviors
 */
AnalysisRule.prototype['SupportedBehaviors'] = undefined;

/**
 * @member {String} VariableMapping
 */
AnalysisRule.prototype['VariableMapping'] = undefined;

/**
 * @member {module:model/WebException} WebException
 */
AnalysisRule.prototype['WebException'] = undefined;

/**
 * @member {String} WebId
 */
AnalysisRule.prototype['WebId'] = undefined;






export default AnalysisRule;

