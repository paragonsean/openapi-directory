/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PointLinks from './PointLinks';
import WebException from './WebException';

/**
 * The Point model module.
 * @module model/Point
 * @version 1.11.1.5383
 */
class Point {
    /**
     * Constructs a new <code>Point</code>.
     * @alias module:model/Point
     */
    constructor() { 
        
        Point.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Point</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Point} obj Optional instance to populate.
     * @return {module:model/Point} The populated <code>Point</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Point();

            if (data.hasOwnProperty('Descriptor')) {
                obj['Descriptor'] = ApiClient.convertToType(data['Descriptor'], 'String');
            }
            if (data.hasOwnProperty('DigitalSetName')) {
                obj['DigitalSetName'] = ApiClient.convertToType(data['DigitalSetName'], 'String');
            }
            if (data.hasOwnProperty('DisplayDigits')) {
                obj['DisplayDigits'] = ApiClient.convertToType(data['DisplayDigits'], 'Number');
            }
            if (data.hasOwnProperty('EngineeringUnits')) {
                obj['EngineeringUnits'] = ApiClient.convertToType(data['EngineeringUnits'], 'String');
            }
            if (data.hasOwnProperty('Future')) {
                obj['Future'] = ApiClient.convertToType(data['Future'], 'Boolean');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'Number');
            }
            if (data.hasOwnProperty('Links')) {
                obj['Links'] = PointLinks.constructFromObject(data['Links']);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Path')) {
                obj['Path'] = ApiClient.convertToType(data['Path'], 'String');
            }
            if (data.hasOwnProperty('PointClass')) {
                obj['PointClass'] = ApiClient.convertToType(data['PointClass'], 'String');
            }
            if (data.hasOwnProperty('PointType')) {
                obj['PointType'] = ApiClient.convertToType(data['PointType'], 'String');
            }
            if (data.hasOwnProperty('Span')) {
                obj['Span'] = ApiClient.convertToType(data['Span'], 'Number');
            }
            if (data.hasOwnProperty('Step')) {
                obj['Step'] = ApiClient.convertToType(data['Step'], 'Boolean');
            }
            if (data.hasOwnProperty('WebException')) {
                obj['WebException'] = WebException.constructFromObject(data['WebException']);
            }
            if (data.hasOwnProperty('WebId')) {
                obj['WebId'] = ApiClient.convertToType(data['WebId'], 'String');
            }
            if (data.hasOwnProperty('Zero')) {
                obj['Zero'] = ApiClient.convertToType(data['Zero'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Point</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Point</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Descriptor'] && !(typeof data['Descriptor'] === 'string' || data['Descriptor'] instanceof String)) {
            throw new Error("Expected the field `Descriptor` to be a primitive type in the JSON string but got " + data['Descriptor']);
        }
        // ensure the json data is a string
        if (data['DigitalSetName'] && !(typeof data['DigitalSetName'] === 'string' || data['DigitalSetName'] instanceof String)) {
            throw new Error("Expected the field `DigitalSetName` to be a primitive type in the JSON string but got " + data['DigitalSetName']);
        }
        // ensure the json data is a string
        if (data['EngineeringUnits'] && !(typeof data['EngineeringUnits'] === 'string' || data['EngineeringUnits'] instanceof String)) {
            throw new Error("Expected the field `EngineeringUnits` to be a primitive type in the JSON string but got " + data['EngineeringUnits']);
        }
        // validate the optional field `Links`
        if (data['Links']) { // data not null
          PointLinks.validateJSON(data['Links']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Path'] && !(typeof data['Path'] === 'string' || data['Path'] instanceof String)) {
            throw new Error("Expected the field `Path` to be a primitive type in the JSON string but got " + data['Path']);
        }
        // ensure the json data is a string
        if (data['PointClass'] && !(typeof data['PointClass'] === 'string' || data['PointClass'] instanceof String)) {
            throw new Error("Expected the field `PointClass` to be a primitive type in the JSON string but got " + data['PointClass']);
        }
        // ensure the json data is a string
        if (data['PointType'] && !(typeof data['PointType'] === 'string' || data['PointType'] instanceof String)) {
            throw new Error("Expected the field `PointType` to be a primitive type in the JSON string but got " + data['PointType']);
        }
        // validate the optional field `WebException`
        if (data['WebException']) { // data not null
          WebException.validateJSON(data['WebException']);
        }
        // ensure the json data is a string
        if (data['WebId'] && !(typeof data['WebId'] === 'string' || data['WebId'] instanceof String)) {
            throw new Error("Expected the field `WebId` to be a primitive type in the JSON string but got " + data['WebId']);
        }

        return true;
    }


}



/**
 * @member {String} Descriptor
 */
Point.prototype['Descriptor'] = undefined;

/**
 * @member {String} DigitalSetName
 */
Point.prototype['DigitalSetName'] = undefined;

/**
 * @member {Number} DisplayDigits
 */
Point.prototype['DisplayDigits'] = undefined;

/**
 * @member {String} EngineeringUnits
 */
Point.prototype['EngineeringUnits'] = undefined;

/**
 * @member {Boolean} Future
 */
Point.prototype['Future'] = undefined;

/**
 * @member {Number} Id
 */
Point.prototype['Id'] = undefined;

/**
 * @member {module:model/PointLinks} Links
 */
Point.prototype['Links'] = undefined;

/**
 * @member {String} Name
 */
Point.prototype['Name'] = undefined;

/**
 * @member {String} Path
 */
Point.prototype['Path'] = undefined;

/**
 * @member {String} PointClass
 */
Point.prototype['PointClass'] = undefined;

/**
 * @member {String} PointType
 */
Point.prototype['PointType'] = undefined;

/**
 * @member {Number} Span
 */
Point.prototype['Span'] = undefined;

/**
 * @member {Boolean} Step
 */
Point.prototype['Step'] = undefined;

/**
 * @member {module:model/WebException} WebException
 */
Point.prototype['WebException'] = undefined;

/**
 * @member {String} WebId
 */
Point.prototype['WebId'] = undefined;

/**
 * @member {Number} Zero
 */
Point.prototype['Zero'] = undefined;






export default Point;

