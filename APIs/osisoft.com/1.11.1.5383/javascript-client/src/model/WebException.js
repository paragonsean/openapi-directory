/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WebException model module.
 * @module model/WebException
 * @version 1.11.1.5383
 */
class WebException {
    /**
     * Constructs a new <code>WebException</code>.
     * @alias module:model/WebException
     */
    constructor() { 
        
        WebException.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebException</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebException} obj Optional instance to populate.
     * @return {module:model/WebException} The populated <code>WebException</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebException();

            if (data.hasOwnProperty('Errors')) {
                obj['Errors'] = ApiClient.convertToType(data['Errors'], ['String']);
            }
            if (data.hasOwnProperty('StatusCode')) {
                obj['StatusCode'] = ApiClient.convertToType(data['StatusCode'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebException</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebException</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['Errors'])) {
            throw new Error("Expected the field `Errors` to be an array in the JSON data but got " + data['Errors']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} Errors
 */
WebException.prototype['Errors'] = undefined;

/**
 * @member {module:model/WebException.StatusCodeEnum} StatusCode
 */
WebException.prototype['StatusCode'] = undefined;





/**
 * Allowed values for the <code>StatusCode</code> property.
 * @enum {Number}
 * @readonly
 */
WebException['StatusCodeEnum'] = {

    /**
     * value: 100
     * @const
     */
    "100": 100,

    /**
     * value: 101
     * @const
     */
    "101": 101,

    /**
     * value: 200
     * @const
     */
    "200": 200,

    /**
     * value: 201
     * @const
     */
    "201": 201,

    /**
     * value: 202
     * @const
     */
    "202": 202,

    /**
     * value: 203
     * @const
     */
    "203": 203,

    /**
     * value: 204
     * @const
     */
    "204": 204,

    /**
     * value: 205
     * @const
     */
    "205": 205,

    /**
     * value: 206
     * @const
     */
    "206": 206,

    /**
     * value: 207
     * @const
     */
    "207": 207,

    /**
     * value: 300
     * @const
     */
    "300": 300,

    /**
     * value: 301
     * @const
     */
    "301": 301,

    /**
     * value: 302
     * @const
     */
    "302": 302,

    /**
     * value: 303
     * @const
     */
    "303": 303,

    /**
     * value: 304
     * @const
     */
    "304": 304,

    /**
     * value: 305
     * @const
     */
    "305": 305,

    /**
     * value: 306
     * @const
     */
    "306": 306,

    /**
     * value: 307
     * @const
     */
    "307": 307,

    /**
     * value: 400
     * @const
     */
    "400": 400,

    /**
     * value: 401
     * @const
     */
    "401": 401,

    /**
     * value: 402
     * @const
     */
    "402": 402,

    /**
     * value: 403
     * @const
     */
    "403": 403,

    /**
     * value: 404
     * @const
     */
    "404": 404,

    /**
     * value: 405
     * @const
     */
    "405": 405,

    /**
     * value: 406
     * @const
     */
    "406": 406,

    /**
     * value: 407
     * @const
     */
    "407": 407,

    /**
     * value: 408
     * @const
     */
    "408": 408,

    /**
     * value: 409
     * @const
     */
    "409": 409,

    /**
     * value: 410
     * @const
     */
    "410": 410,

    /**
     * value: 411
     * @const
     */
    "411": 411,

    /**
     * value: 412
     * @const
     */
    "412": 412,

    /**
     * value: 413
     * @const
     */
    "413": 413,

    /**
     * value: 414
     * @const
     */
    "414": 414,

    /**
     * value: 415
     * @const
     */
    "415": 415,

    /**
     * value: 416
     * @const
     */
    "416": 416,

    /**
     * value: 417
     * @const
     */
    "417": 417,

    /**
     * value: 426
     * @const
     */
    "426": 426,

    /**
     * value: 500
     * @const
     */
    "500": 500,

    /**
     * value: 501
     * @const
     */
    "501": 501,

    /**
     * value: 502
     * @const
     */
    "502": 502,

    /**
     * value: 503
     * @const
     */
    "503": 503,

    /**
     * value: 504
     * @const
     */
    "504": 504,

    /**
     * value: 505
     * @const
     */
    "505": 505
};



export default WebException;

