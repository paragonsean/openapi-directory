/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ElementLinks from './ElementLinks';
import PropertyError from './PropertyError';
import Value from './Value';
import WebException from './WebException';

/**
 * The Element model module.
 * @module model/Element
 * @version 1.11.1.5383
 */
class Element {
    /**
     * Constructs a new <code>Element</code>.
     * @alias module:model/Element
     */
    constructor() { 
        
        Element.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Element</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Element} obj Optional instance to populate.
     * @return {module:model/Element} The populated <code>Element</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Element();

            if (data.hasOwnProperty('CategoryNames')) {
                obj['CategoryNames'] = ApiClient.convertToType(data['CategoryNames'], ['String']);
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Errors')) {
                obj['Errors'] = ApiClient.convertToType(data['Errors'], [PropertyError]);
            }
            if (data.hasOwnProperty('ExtendedProperties')) {
                obj['ExtendedProperties'] = ApiClient.convertToType(data['ExtendedProperties'], {'String': Value});
            }
            if (data.hasOwnProperty('HasChildren')) {
                obj['HasChildren'] = ApiClient.convertToType(data['HasChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Links')) {
                obj['Links'] = ElementLinks.constructFromObject(data['Links']);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Path')) {
                obj['Path'] = ApiClient.convertToType(data['Path'], 'String');
            }
            if (data.hasOwnProperty('Paths')) {
                obj['Paths'] = ApiClient.convertToType(data['Paths'], ['String']);
            }
            if (data.hasOwnProperty('TemplateName')) {
                obj['TemplateName'] = ApiClient.convertToType(data['TemplateName'], 'String');
            }
            if (data.hasOwnProperty('WebException')) {
                obj['WebException'] = WebException.constructFromObject(data['WebException']);
            }
            if (data.hasOwnProperty('WebId')) {
                obj['WebId'] = ApiClient.convertToType(data['WebId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Element</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Element</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['CategoryNames'])) {
            throw new Error("Expected the field `CategoryNames` to be an array in the JSON data but got " + data['CategoryNames']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        if (data['Errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Errors'])) {
                throw new Error("Expected the field `Errors` to be an array in the JSON data but got " + data['Errors']);
            }
            // validate the optional field `Errors` (array)
            for (const item of data['Errors']) {
                PropertyError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // validate the optional field `Links`
        if (data['Links']) { // data not null
          ElementLinks.validateJSON(data['Links']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Path'] && !(typeof data['Path'] === 'string' || data['Path'] instanceof String)) {
            throw new Error("Expected the field `Path` to be a primitive type in the JSON string but got " + data['Path']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Paths'])) {
            throw new Error("Expected the field `Paths` to be an array in the JSON data but got " + data['Paths']);
        }
        // ensure the json data is a string
        if (data['TemplateName'] && !(typeof data['TemplateName'] === 'string' || data['TemplateName'] instanceof String)) {
            throw new Error("Expected the field `TemplateName` to be a primitive type in the JSON string but got " + data['TemplateName']);
        }
        // validate the optional field `WebException`
        if (data['WebException']) { // data not null
          WebException.validateJSON(data['WebException']);
        }
        // ensure the json data is a string
        if (data['WebId'] && !(typeof data['WebId'] === 'string' || data['WebId'] instanceof String)) {
            throw new Error("Expected the field `WebId` to be a primitive type in the JSON string but got " + data['WebId']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} CategoryNames
 */
Element.prototype['CategoryNames'] = undefined;

/**
 * @member {String} Description
 */
Element.prototype['Description'] = undefined;

/**
 * @member {Array.<module:model/PropertyError>} Errors
 */
Element.prototype['Errors'] = undefined;

/**
 * @member {Object.<String, module:model/Value>} ExtendedProperties
 */
Element.prototype['ExtendedProperties'] = undefined;

/**
 * @member {Boolean} HasChildren
 */
Element.prototype['HasChildren'] = undefined;

/**
 * @member {String} Id
 */
Element.prototype['Id'] = undefined;

/**
 * @member {module:model/ElementLinks} Links
 */
Element.prototype['Links'] = undefined;

/**
 * @member {String} Name
 */
Element.prototype['Name'] = undefined;

/**
 * @member {String} Path
 */
Element.prototype['Path'] = undefined;

/**
 * @member {Array.<String>} Paths
 */
Element.prototype['Paths'] = undefined;

/**
 * @member {String} TemplateName
 */
Element.prototype['TemplateName'] = undefined;

/**
 * @member {module:model/WebException} WebException
 */
Element.prototype['WebException'] = undefined;

/**
 * @member {String} WebId
 */
Element.prototype['WebId'] = undefined;






export default Element;

