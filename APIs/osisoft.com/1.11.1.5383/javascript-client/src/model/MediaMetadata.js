/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MediaMetadataLinks from './MediaMetadataLinks';
import WebException from './WebException';

/**
 * The MediaMetadata model module.
 * @module model/MediaMetadata
 * @version 1.11.1.5383
 */
class MediaMetadata {
    /**
     * Constructs a new <code>MediaMetadata</code>.
     * @alias module:model/MediaMetadata
     */
    constructor() { 
        
        MediaMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediaMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaMetadata} obj Optional instance to populate.
     * @return {module:model/MediaMetadata} The populated <code>MediaMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaMetadata();

            if (data.hasOwnProperty('Author')) {
                obj['Author'] = ApiClient.convertToType(data['Author'], 'String');
            }
            if (data.hasOwnProperty('ChangeDate')) {
                obj['ChangeDate'] = ApiClient.convertToType(data['ChangeDate'], 'Date');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Links')) {
                obj['Links'] = MediaMetadataLinks.constructFromObject(data['Links']);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Size')) {
                obj['Size'] = ApiClient.convertToType(data['Size'], 'Number');
            }
            if (data.hasOwnProperty('WebException')) {
                obj['WebException'] = WebException.constructFromObject(data['WebException']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Author'] && !(typeof data['Author'] === 'string' || data['Author'] instanceof String)) {
            throw new Error("Expected the field `Author` to be a primitive type in the JSON string but got " + data['Author']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // validate the optional field `Links`
        if (data['Links']) { // data not null
          MediaMetadataLinks.validateJSON(data['Links']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // validate the optional field `WebException`
        if (data['WebException']) { // data not null
          WebException.validateJSON(data['WebException']);
        }

        return true;
    }


}



/**
 * @member {String} Author
 */
MediaMetadata.prototype['Author'] = undefined;

/**
 * @member {Date} ChangeDate
 */
MediaMetadata.prototype['ChangeDate'] = undefined;

/**
 * @member {String} Description
 */
MediaMetadata.prototype['Description'] = undefined;

/**
 * @member {module:model/MediaMetadataLinks} Links
 */
MediaMetadata.prototype['Links'] = undefined;

/**
 * @member {String} Name
 */
MediaMetadata.prototype['Name'] = undefined;

/**
 * @member {Number} Size
 */
MediaMetadata.prototype['Size'] = undefined;

/**
 * @member {module:model/WebException} WebException
 */
MediaMetadata.prototype['WebException'] = undefined;






export default MediaMetadata;

