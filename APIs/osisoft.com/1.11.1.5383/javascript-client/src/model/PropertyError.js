/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PropertyError model module.
 * @module model/PropertyError
 * @version 1.11.1.5383
 */
class PropertyError {
    /**
     * Constructs a new <code>PropertyError</code>.
     * @alias module:model/PropertyError
     */
    constructor() { 
        
        PropertyError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PropertyError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropertyError} obj Optional instance to populate.
     * @return {module:model/PropertyError} The populated <code>PropertyError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropertyError();

            if (data.hasOwnProperty('FieldName')) {
                obj['FieldName'] = ApiClient.convertToType(data['FieldName'], 'String');
            }
            if (data.hasOwnProperty('Message')) {
                obj['Message'] = ApiClient.convertToType(data['Message'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PropertyError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PropertyError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['FieldName'] && !(typeof data['FieldName'] === 'string' || data['FieldName'] instanceof String)) {
            throw new Error("Expected the field `FieldName` to be a primitive type in the JSON string but got " + data['FieldName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Message'])) {
            throw new Error("Expected the field `Message` to be an array in the JSON data but got " + data['Message']);
        }

        return true;
    }


}



/**
 * @member {String} FieldName
 */
PropertyError.prototype['FieldName'] = undefined;

/**
 * @member {Array.<String>} Message
 */
PropertyError.prototype['Message'] = undefined;






export default PropertyError;

