/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Errors from '../model/Errors';
import ItemsSecurityEntry from '../model/ItemsSecurityEntry';
import ItemsSecurityMapping from '../model/ItemsSecurityMapping';
import ItemsSecurityRights from '../model/ItemsSecurityRights';
import SecurityEntry from '../model/SecurityEntry';
import SecurityIdentity from '../model/SecurityIdentity';

/**
* SecurityIdentity service.
* @module api/SecurityIdentityApi
* @version 1.11.1.5383
*/
export default class SecurityIdentityApi {

    /**
    * Constructs a new SecurityIdentityApi. 
    * @alias module:api/SecurityIdentityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the securityIdentityDelete operation.
     * @callback module:api/SecurityIdentityApi~securityIdentityDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a security identity.
     * @param {String} webId The ID of the security identity.
     * @param {module:api/SecurityIdentityApi~securityIdentityDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securityIdentityDelete(webId, callback) {
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling securityIdentityDelete");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/securityidentities/{webId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityIdentityGet operation.
     * @callback module:api/SecurityIdentityApi~securityIdentityGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityIdentity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a security identity.
     * @param {String} webId The ID of the security identity.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/SecurityIdentityApi~securityIdentityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityIdentity}
     */
    securityIdentityGet(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling securityIdentityGet");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = SecurityIdentity;
      return this.apiClient.callApi(
        '/securityidentities/{webId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityIdentityGetByPath operation.
     * @callback module:api/SecurityIdentityApi~securityIdentityGetByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityIdentity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a security identity by path.
     * This method returns a security identity based on the path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param {String} path The path to the security identity.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/SecurityIdentityApi~securityIdentityGetByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityIdentity}
     */
    securityIdentityGetByPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling securityIdentityGetByPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = SecurityIdentity;
      return this.apiClient.callApi(
        '/securityidentities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityIdentityGetSecurity operation.
     * @callback module:api/SecurityIdentityApi~securityIdentityGetSecurityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityRights} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the security information of the specified security item associated with the security identity for a specified user.
     * @param {String} webId The ID of the security identity for the security to be checked.
     * @param {Array.<String>} userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceRefresh] Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/SecurityIdentityApi~securityIdentityGetSecurityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityRights}
     */
    securityIdentityGetSecurity(webId, userIdentity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling securityIdentityGetSecurity");
      }
      // verify the required parameter 'userIdentity' is set
      if (userIdentity === undefined || userIdentity === null) {
        throw new Error("Missing the required parameter 'userIdentity' when calling securityIdentityGetSecurity");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'userIdentity': this.apiClient.buildCollectionParam(userIdentity, 'multi'),
        'forceRefresh': opts['forceRefresh'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityRights;
      return this.apiClient.callApi(
        '/securityidentities/{webId}/security', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityIdentityGetSecurityEntries operation.
     * @callback module:api/SecurityIdentityApi~securityIdentityGetSecurityEntriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the security entries associated with the security identity based on the specified criteria. By default, all security entries for this security identity are returned.
     * @param {String} webId The ID of the security identity.
     * @param {Object} opts Optional parameters
     * @param {String} [nameFilter] The name query string used for filtering security entries. The default is no filter.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/SecurityIdentityApi~securityIdentityGetSecurityEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityEntry}
     */
    securityIdentityGetSecurityEntries(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling securityIdentityGetSecurityEntries");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'nameFilter': opts['nameFilter'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityEntry;
      return this.apiClient.callApi(
        '/securityidentities/{webId}/securityentries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityIdentityGetSecurityEntryByName operation.
     * @callback module:api/SecurityIdentityApi~securityIdentityGetSecurityEntryByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the security entry associated with the security identity with the specified name.
     * @param {String} name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username.
     * @param {String} webId The ID of the security identity.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/SecurityIdentityApi~securityIdentityGetSecurityEntryByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityEntry}
     */
    securityIdentityGetSecurityEntryByName(name, webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling securityIdentityGetSecurityEntryByName");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling securityIdentityGetSecurityEntryByName");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = SecurityEntry;
      return this.apiClient.callApi(
        '/securityidentities/{webId}/securityentries/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityIdentityGetSecurityMappings operation.
     * @callback module:api/SecurityIdentityApi~securityIdentityGetSecurityMappingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get security mappings for the specified security identity.
     * @param {String} webId The ID of the security identity.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/SecurityIdentityApi~securityIdentityGetSecurityMappingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityMapping}
     */
    securityIdentityGetSecurityMappings(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling securityIdentityGetSecurityMappings");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityMapping;
      return this.apiClient.callApi(
        '/securityidentities/{webId}/securitymappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityIdentityUpdate operation.
     * @callback module:api/SecurityIdentityApi~securityIdentityUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a security identity by replacing items in its definition.
     * @param {String} webId The ID of the security identity.
     * @param {module:model/SecurityIdentity} securityIdentity A partial security identity containing the desired changes.
     * @param {module:api/SecurityIdentityApi~securityIdentityUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securityIdentityUpdate(webId, securityIdentity, callback) {
      let postBody = securityIdentity;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling securityIdentityUpdate");
      }
      // verify the required parameter 'securityIdentity' is set
      if (securityIdentity === undefined || securityIdentity === null) {
        throw new Error("Missing the required parameter 'securityIdentity' when calling securityIdentityUpdate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/securityidentities/{webId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
