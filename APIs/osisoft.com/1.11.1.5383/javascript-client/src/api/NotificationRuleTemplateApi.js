/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Errors from '../model/Errors';
import ItemsNotificationRuleSubscriber from '../model/ItemsNotificationRuleSubscriber';
import ItemsNotificationRuleTemplate from '../model/ItemsNotificationRuleTemplate';
import ItemsSecurityEntry from '../model/ItemsSecurityEntry';
import ItemsSecurityRights from '../model/ItemsSecurityRights';
import NotificationRuleSubscriber from '../model/NotificationRuleSubscriber';
import NotificationRuleTemplate from '../model/NotificationRuleTemplate';
import SecurityEntry from '../model/SecurityEntry';

/**
* NotificationRuleTemplate service.
* @module api/NotificationRuleTemplateApi
* @version 1.11.1.5383
*/
export default class NotificationRuleTemplateApi {

    /**
    * Constructs a new NotificationRuleTemplateApi. 
    * @alias module:api/NotificationRuleTemplateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the notificationRuleTemplateCreateNotificationRuleTemplateSubscriber operation.
     * @callback module:api/NotificationRuleTemplateApi~notificationRuleTemplateCreateNotificationRuleTemplateSubscriberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a notification rule subscriber.
     * @param {String} webId The ID of the notification rule template on which to create the notification rule subscriber.
     * @param {module:model/NotificationRuleSubscriber} notificationRuleSubscriber The new notification rule subscriber definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/NotificationRuleTemplateApi~notificationRuleTemplateCreateNotificationRuleTemplateSubscriberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationRuleTemplateCreateNotificationRuleTemplateSubscriber(webId, notificationRuleSubscriber, opts, callback) {
      opts = opts || {};
      let postBody = notificationRuleSubscriber;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling notificationRuleTemplateCreateNotificationRuleTemplateSubscriber");
      }
      // verify the required parameter 'notificationRuleSubscriber' is set
      if (notificationRuleSubscriber === undefined || notificationRuleSubscriber === null) {
        throw new Error("Missing the required parameter 'notificationRuleSubscriber' when calling notificationRuleTemplateCreateNotificationRuleTemplateSubscriber");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationruletemplates/{webId}/notificationrulesubscribers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationRuleTemplateCreateSecurityEntry operation.
     * @callback module:api/NotificationRuleTemplateApi~notificationRuleTemplateCreateSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a security entry owned by the notification rule template.
     * @param {String} webId The ID of the notification rule template, where the security entry will be created.
     * @param {module:model/SecurityEntry} securityEntry The new security entry definition. The full list of allow and deny rights must be supplied.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/NotificationRuleTemplateApi~notificationRuleTemplateCreateSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationRuleTemplateCreateSecurityEntry(webId, securityEntry, opts, callback) {
      opts = opts || {};
      let postBody = securityEntry;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling notificationRuleTemplateCreateSecurityEntry");
      }
      // verify the required parameter 'securityEntry' is set
      if (securityEntry === undefined || securityEntry === null) {
        throw new Error("Missing the required parameter 'securityEntry' when calling notificationRuleTemplateCreateSecurityEntry");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationruletemplates/{webId}/securityentries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationRuleTemplateDelete operation.
     * @callback module:api/NotificationRuleTemplateApi~notificationRuleTemplateDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a notification rule template.
     * @param {String} webId The ID of the notification rule template.
     * @param {module:api/NotificationRuleTemplateApi~notificationRuleTemplateDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationRuleTemplateDelete(webId, callback) {
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling notificationRuleTemplateDelete");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationruletemplates/{webId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationRuleTemplateDeleteSecurityEntry operation.
     * @callback module:api/NotificationRuleTemplateApi~notificationRuleTemplateDeleteSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a security entry owned by the notification rule template.
     * @param {String} name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username.
     * @param {String} webId The ID of the notification rule template, where the security entry will be deleted.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {module:api/NotificationRuleTemplateApi~notificationRuleTemplateDeleteSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationRuleTemplateDeleteSecurityEntry(name, webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling notificationRuleTemplateDeleteSecurityEntry");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling notificationRuleTemplateDeleteSecurityEntry");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationruletemplates/{webId}/securityentries/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationRuleTemplateGet operation.
     * @callback module:api/NotificationRuleTemplateApi~notificationRuleTemplateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationRuleTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the specified notification rule template.
     * @param {String} webId The ID of the notification rule template.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/NotificationRuleTemplateApi~notificationRuleTemplateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationRuleTemplate}
     */
    notificationRuleTemplateGet(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling notificationRuleTemplateGet");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = NotificationRuleTemplate;
      return this.apiClient.callApi(
        '/notificationruletemplates/{webId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationRuleTemplateGetByPath operation.
     * @callback module:api/NotificationRuleTemplateApi~notificationRuleTemplateGetByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationRuleTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a notification rule template by path.
     * This method returns a Notification Rule Template based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param {String} path The path to the notification rule template.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/NotificationRuleTemplateApi~notificationRuleTemplateGetByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationRuleTemplate}
     */
    notificationRuleTemplateGetByPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling notificationRuleTemplateGetByPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = NotificationRuleTemplate;
      return this.apiClient.callApi(
        '/notificationruletemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationRuleTemplateGetNotificationRuleTemplateSubscribers operation.
     * @callback module:api/NotificationRuleTemplateApi~notificationRuleTemplateGetNotificationRuleTemplateSubscribersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsNotificationRuleSubscriber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve notification rule template subscribers.
     * @param {String} webId The ID of the resource to use as the root of the search.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/NotificationRuleTemplateApi~notificationRuleTemplateGetNotificationRuleTemplateSubscribersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsNotificationRuleSubscriber}
     */
    notificationRuleTemplateGetNotificationRuleTemplateSubscribers(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling notificationRuleTemplateGetNotificationRuleTemplateSubscribers");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsNotificationRuleSubscriber;
      return this.apiClient.callApi(
        '/notificationruletemplates/{webId}/notificationrulesubscribers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationRuleTemplateGetNotificationRuleTemplatesQuery operation.
     * @callback module:api/NotificationRuleTemplateApi~notificationRuleTemplateGetNotificationRuleTemplatesQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsNotificationRuleTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Notification rule templates based on the specified conditions. Returns Notification rule templates using the specified search query string.
     * @param {Object} opts Optional parameters
     * @param {String} [databaseWebId] The ID of the asset database to use as the root of the query.
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [query] The query string is a list of filters used to perform an AFSearch for the Notification rule templates in the asset database. An example would be: \"query=NotificationRuleTemplate:{ Name:='MyNotificationRuleTemplate' } Type:=Int32\".
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/NotificationRuleTemplateApi~notificationRuleTemplateGetNotificationRuleTemplatesQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsNotificationRuleTemplate}
     */
    notificationRuleTemplateGetNotificationRuleTemplatesQuery(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'databaseWebId': opts['databaseWebId'],
        'maxCount': opts['maxCount'],
        'query': opts['query'],
        'selectedFields': opts['selectedFields'],
        'startIndex': opts['startIndex'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsNotificationRuleTemplate;
      return this.apiClient.callApi(
        '/notificationruletemplates/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationRuleTemplateGetSecurity operation.
     * @callback module:api/NotificationRuleTemplateApi~notificationRuleTemplateGetSecurityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityRights} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the security information of the specified security item associated with the notification rule template for a specified user.
     * @param {String} webId The ID of the notification rule template for the security to be checked.
     * @param {Array.<String>} userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceRefresh] Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/NotificationRuleTemplateApi~notificationRuleTemplateGetSecurityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityRights}
     */
    notificationRuleTemplateGetSecurity(webId, userIdentity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling notificationRuleTemplateGetSecurity");
      }
      // verify the required parameter 'userIdentity' is set
      if (userIdentity === undefined || userIdentity === null) {
        throw new Error("Missing the required parameter 'userIdentity' when calling notificationRuleTemplateGetSecurity");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'userIdentity': this.apiClient.buildCollectionParam(userIdentity, 'multi'),
        'forceRefresh': opts['forceRefresh'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityRights;
      return this.apiClient.callApi(
        '/notificationruletemplates/{webId}/security', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationRuleTemplateGetSecurityEntries operation.
     * @callback module:api/NotificationRuleTemplateApi~notificationRuleTemplateGetSecurityEntriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the security entries associated with the notification rule template based on the specified criteria. By default, all security entries for this notification rule template are returned.
     * @param {String} webId The ID of the notification rule template.
     * @param {Object} opts Optional parameters
     * @param {String} [nameFilter] The name query string used for filtering security entries. The default is no filter.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/NotificationRuleTemplateApi~notificationRuleTemplateGetSecurityEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityEntry}
     */
    notificationRuleTemplateGetSecurityEntries(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling notificationRuleTemplateGetSecurityEntries");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'nameFilter': opts['nameFilter'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityEntry;
      return this.apiClient.callApi(
        '/notificationruletemplates/{webId}/securityentries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationRuleTemplateGetSecurityEntryByName operation.
     * @callback module:api/NotificationRuleTemplateApi~notificationRuleTemplateGetSecurityEntryByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the security entry associated with the notification rule template with the specified name.
     * @param {String} name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username.
     * @param {String} webId The ID of the notification rule template.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/NotificationRuleTemplateApi~notificationRuleTemplateGetSecurityEntryByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityEntry}
     */
    notificationRuleTemplateGetSecurityEntryByName(name, webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling notificationRuleTemplateGetSecurityEntryByName");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling notificationRuleTemplateGetSecurityEntryByName");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = SecurityEntry;
      return this.apiClient.callApi(
        '/notificationruletemplates/{webId}/securityentries/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationRuleTemplateUpdate operation.
     * @callback module:api/NotificationRuleTemplateApi~notificationRuleTemplateUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a notification rule template by replacing items in its definition.
     * @param {String} webId The ID of the notification rule template to update.
     * @param {module:model/NotificationRuleTemplate} notificationRuleTemplate A partial notification rule template containing the desired changes.
     * @param {module:api/NotificationRuleTemplateApi~notificationRuleTemplateUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationRuleTemplateUpdate(webId, notificationRuleTemplate, callback) {
      let postBody = notificationRuleTemplate;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling notificationRuleTemplateUpdate");
      }
      // verify the required parameter 'notificationRuleTemplate' is set
      if (notificationRuleTemplate === undefined || notificationRuleTemplate === null) {
        throw new Error("Missing the required parameter 'notificationRuleTemplate' when calling notificationRuleTemplateUpdate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationruletemplates/{webId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationRuleTemplateUpdateSecurityEntry operation.
     * @callback module:api/NotificationRuleTemplateApi~notificationRuleTemplateUpdateSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a security entry owned by the notification rule template.
     * @param {String} name The name of the security entry.
     * @param {String} webId The ID of the notification rule template, where the security entry will be updated.
     * @param {module:model/SecurityEntry} securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {module:api/NotificationRuleTemplateApi~notificationRuleTemplateUpdateSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    notificationRuleTemplateUpdateSecurityEntry(name, webId, securityEntry, opts, callback) {
      opts = opts || {};
      let postBody = securityEntry;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling notificationRuleTemplateUpdateSecurityEntry");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling notificationRuleTemplateUpdateSecurityEntry");
      }
      // verify the required parameter 'securityEntry' is set
      if (securityEntry === undefined || securityEntry === null) {
        throw new Error("Missing the required parameter 'securityEntry' when calling notificationRuleTemplateUpdateSecurityEntry");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notificationruletemplates/{webId}/securityentries/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
