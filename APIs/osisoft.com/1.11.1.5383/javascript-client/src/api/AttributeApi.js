/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Attribute from '../model/Attribute';
import ItemsAttribute from '../model/ItemsAttribute';
import ItemsAttributeCategory from '../model/ItemsAttributeCategory';
import ItemsItemAttribute from '../model/ItemsItemAttribute';
import TimedValue from '../model/TimedValue';

/**
* Attribute service.
* @module api/AttributeApi
* @version 1.11.1.5383
*/
export default class AttributeApi {

    /**
    * Constructs a new AttributeApi. 
    * @alias module:api/AttributeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the attributeCreateAttribute operation.
     * @callback module:api/AttributeApi~attributeCreateAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new attribute as a child of the specified attribute.
     * @param {String} webId The ID of the parent attribute on which to create the attribute.
     * @param {module:model/Attribute} attribute The definition of the new attribute.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AttributeApi~attributeCreateAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attributeCreateAttribute(webId, attribute, opts, callback) {
      opts = opts || {};
      let postBody = attribute;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling attributeCreateAttribute");
      }
      // verify the required parameter 'attribute' is set
      if (attribute === undefined || attribute === null) {
        throw new Error("Missing the required parameter 'attribute' when calling attributeCreateAttribute");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attributes/{webId}/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeCreateConfig operation.
     * @callback module:api/AttributeApi~attributeCreateConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an attribute's DataReference configuration (Create/Update PI point for PI Point DataReference).
     * @param {String} webId The ID of the attribute.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AttributeApi~attributeCreateConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attributeCreateConfig(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling attributeCreateConfig");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attributes/{webId}/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeDelete operation.
     * @callback module:api/AttributeApi~attributeDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an attribute.
     * @param {String} webId The ID of the attribute.
     * @param {module:api/AttributeApi~attributeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attributeDelete(webId, callback) {
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling attributeDelete");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attributes/{webId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeGet operation.
     * @callback module:api/AttributeApi~attributeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an attribute.
     * @param {String} webId The ID of the attribute.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AttributeApi~attributeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attribute}
     */
    attributeGet(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling attributeGet");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'associations': opts['associations'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = Attribute;
      return this.apiClient.callApi(
        '/attributes/{webId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeGetAttributes operation.
     * @callback module:api/AttributeApi~attributeGetAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAttribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the child attributes of the specified attribute.
     * @param {String} webId The ID of the parent attribute.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
     * @param {String} [categoryName] Specify that returned attributes must have this category. The default is no category filter.
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [nameFilter] The name query string used for finding attributes. The default is no filter.
     * @param {Boolean} [searchFullHierarchy] Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Boolean} [showExcluded] Specified if the search should include attributes with the Excluded property set. The default is 'false'.
     * @param {Boolean} [showHidden] Specified if the search should include attributes with the Hidden property set. The default is 'false'.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [templateName] Specify that returned attributes must be members of this template. The default is no template filter.
     * @param {Array.<String>} [trait] The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter.
     * @param {Array.<String>} [traitCategory] The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \"all\", then all attribute traits of all categories will be returned.
     * @param {String} [valueType] Specify that returned attributes' value type must be the given value type. The default is no value type filter.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AttributeApi~attributeGetAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAttribute}
     */
    attributeGetAttributes(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling attributeGetAttributes");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'associations': opts['associations'],
        'categoryName': opts['categoryName'],
        'maxCount': opts['maxCount'],
        'nameFilter': opts['nameFilter'],
        'searchFullHierarchy': opts['searchFullHierarchy'],
        'selectedFields': opts['selectedFields'],
        'showExcluded': opts['showExcluded'],
        'showHidden': opts['showHidden'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'templateName': opts['templateName'],
        'trait': this.apiClient.buildCollectionParam(opts['trait'], 'multi'),
        'traitCategory': this.apiClient.buildCollectionParam(opts['traitCategory'], 'multi'),
        'valueType': opts['valueType'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAttribute;
      return this.apiClient.callApi(
        '/attributes/{webId}/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeGetAttributesQuery operation.
     * @callback module:api/AttributeApi~attributeGetAttributesQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAttribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve attributes based on the specified conditions. Returns attributes using the specified search query string.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
     * @param {String} [databaseWebId] The ID of the asset database to use as the root of the query.
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [query] The query string is a list of filters used to perform an AFSearch for the attributes in the asset database. An example would be: \"query=Element:{ Name:='MyElement' } Type:=Int32\".
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AttributeApi~attributeGetAttributesQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAttribute}
     */
    attributeGetAttributesQuery(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'associations': opts['associations'],
        'databaseWebId': opts['databaseWebId'],
        'maxCount': opts['maxCount'],
        'query': opts['query'],
        'selectedFields': opts['selectedFields'],
        'startIndex': opts['startIndex'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAttribute;
      return this.apiClient.callApi(
        '/attributes/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeGetByPath operation.
     * @callback module:api/AttributeApi~attributeGetByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an attribute by path.
     * This method returns an attribute based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param {String} path The path to the attribute.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AttributeApi~attributeGetByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attribute}
     */
    attributeGetByPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling attributeGetByPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'associations': opts['associations'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = Attribute;
      return this.apiClient.callApi(
        '/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeGetCategories operation.
     * @callback module:api/AttributeApi~attributeGetCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAttributeCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an attribute's categories.
     * @param {String} webId The ID of the attribute.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AttributeApi~attributeGetCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAttributeCategory}
     */
    attributeGetCategories(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling attributeGetCategories");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAttributeCategory;
      return this.apiClient.callApi(
        '/attributes/{webId}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeGetMultiple operation.
     * @callback module:api/AttributeApi~attributeGetMultipleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsItemAttribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve multiple attributes by web id or path.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [asParallel] Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is 'false'.
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
     * @param {String} [includeMode] The include mode for the return list. The default is 'All'.
     * @param {Array.<String>} [path] The path of an attribute. Multiple attributes may be specified with multiple instances of the parameter.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Array.<String>} [webId] The ID of an attribute. Multiple attributes may be specified with multiple instances of the parameter.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AttributeApi~attributeGetMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsItemAttribute}
     */
    attributeGetMultiple(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'asParallel': opts['asParallel'],
        'associations': opts['associations'],
        'includeMode': opts['includeMode'],
        'path': this.apiClient.buildCollectionParam(opts['path'], 'multi'),
        'selectedFields': opts['selectedFields'],
        'webId': this.apiClient.buildCollectionParam(opts['webId'], 'multi'),
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsItemAttribute;
      return this.apiClient.callApi(
        '/attributes/multiple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeGetValue operation.
     * @callback module:api/AttributeApi~attributeGetValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimedValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the attribute's value. This call is intended for use with attributes that have no data reference only. For attributes with a data reference, consult the documentation for Streams.
     * @param {String} webId The ID of the attribute.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {module:api/AttributeApi~attributeGetValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimedValue}
     */
    attributeGetValue(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling attributeGetValue");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = TimedValue;
      return this.apiClient.callApi(
        '/attributes/{webId}/value', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeSetValue operation.
     * @callback module:api/AttributeApi~attributeSetValueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the value of a configuration item attribute. For attributes with a data reference or non-configuration item attributes, consult the documentation for streams.
     * Users must be aware of the value type that the attribute takes before changing the value. If a value entered by the user does not match the value type expressed in the attribute, it will not work or it will return an error. Users should also be careful of what the value type means, for instance, if a value type accepts strings and the user enters a number, the attribute will interpret it as a string of characters and not as the integer value that the user may have wanted.
     * @param {String} webId The ID of the attribute.
     * @param {module:model/TimedValue} value The value to write.
     * @param {module:api/AttributeApi~attributeSetValueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attributeSetValue(webId, value, callback) {
      let postBody = value;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling attributeSetValue");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling attributeSetValue");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attributes/{webId}/value', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeUpdate operation.
     * @callback module:api/AttributeApi~attributeUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an attribute by replacing items in its definition.
     * If an attribute is based on a template, the user must make sure to update the attribute appropriately so that it does not conflict with the template's design. Once a template is applied to an attribute, it can not be changed.
     * @param {String} webId The ID of the attribute.
     * @param {module:model/Attribute} attribute A partial attribute containing the desired changes.
     * @param {module:api/AttributeApi~attributeUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attributeUpdate(webId, attribute, callback) {
      let postBody = attribute;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling attributeUpdate");
      }
      // verify the required parameter 'attribute' is set
      if (attribute === undefined || attribute === null) {
        throw new Error("Missing the required parameter 'attribute' when calling attributeUpdate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attributes/{webId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
