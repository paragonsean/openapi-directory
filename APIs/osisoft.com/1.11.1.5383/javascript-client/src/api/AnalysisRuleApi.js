/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalysisRule from '../model/AnalysisRule';
import ItemsAnalysisRule from '../model/ItemsAnalysisRule';

/**
* AnalysisRule service.
* @module api/AnalysisRuleApi
* @version 1.11.1.5383
*/
export default class AnalysisRuleApi {

    /**
    * Constructs a new AnalysisRuleApi. 
    * @alias module:api/AnalysisRuleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the analysisRuleCreateAnalysisRule operation.
     * @callback module:api/AnalysisRuleApi~analysisRuleCreateAnalysisRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Analysis Rule as a child of an existing Analysis Rule.
     * @param {String} webId The ID of the parent Analysis Rule, on which to create the child Analysis Rule.
     * @param {module:model/AnalysisRule} analysisRule The definition of the new Analysis Rule.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AnalysisRuleApi~analysisRuleCreateAnalysisRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    analysisRuleCreateAnalysisRule(webId, analysisRule, opts, callback) {
      opts = opts || {};
      let postBody = analysisRule;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling analysisRuleCreateAnalysisRule");
      }
      // verify the required parameter 'analysisRule' is set
      if (analysisRule === undefined || analysisRule === null) {
        throw new Error("Missing the required parameter 'analysisRule' when calling analysisRuleCreateAnalysisRule");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/analysisrules/{webId}/analysisrules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analysisRuleDelete operation.
     * @callback module:api/AnalysisRuleApi~analysisRuleDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Analysis Rule.
     * @param {String} webId The ID of the Analysis Rule.
     * @param {module:api/AnalysisRuleApi~analysisRuleDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    analysisRuleDelete(webId, callback) {
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling analysisRuleDelete");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/analysisrules/{webId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analysisRuleGet operation.
     * @callback module:api/AnalysisRuleApi~analysisRuleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Analysis Rule.
     * @param {String} webId The ID of the Analysis Rule.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AnalysisRuleApi~analysisRuleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisRule}
     */
    analysisRuleGet(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling analysisRuleGet");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = AnalysisRule;
      return this.apiClient.callApi(
        '/analysisrules/{webId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analysisRuleGetAnalysisRules operation.
     * @callback module:api/AnalysisRuleApi~analysisRuleGetAnalysisRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAnalysisRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the child Analysis Rules of the Analysis Rule.
     * @param {String} webId The ID of the parent Analysis Rule.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [nameFilter] The name query string used for finding Analysis Rules. The default is no filter.
     * @param {Boolean} [searchFullHierarchy] Specifies if the search should include Analysis Rules nested further than the immediate children of the searchRoot. The default is 'false'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AnalysisRuleApi~analysisRuleGetAnalysisRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAnalysisRule}
     */
    analysisRuleGetAnalysisRules(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling analysisRuleGetAnalysisRules");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'maxCount': opts['maxCount'],
        'nameFilter': opts['nameFilter'],
        'searchFullHierarchy': opts['searchFullHierarchy'],
        'selectedFields': opts['selectedFields'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAnalysisRule;
      return this.apiClient.callApi(
        '/analysisrules/{webId}/analysisrules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analysisRuleGetByPath operation.
     * @callback module:api/AnalysisRuleApi~analysisRuleGetByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Analysis Rule by path.
     * This method returns an Analysis Rule based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param {String} path The path to the Analysis Rule.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AnalysisRuleApi~analysisRuleGetByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisRule}
     */
    analysisRuleGetByPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling analysisRuleGetByPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = AnalysisRule;
      return this.apiClient.callApi(
        '/analysisrules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the analysisRuleUpdate operation.
     * @callback module:api/AnalysisRuleApi~analysisRuleUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Analysis Rule by replacing items in its definition.
     * @param {String} webId The ID of the Analysis Rule.
     * @param {module:model/AnalysisRule} analysisRule A partial Analysis Rule containing the desired changes.
     * @param {module:api/AnalysisRuleApi~analysisRuleUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    analysisRuleUpdate(webId, analysisRule, callback) {
      let postBody = analysisRule;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling analysisRuleUpdate");
      }
      // verify the required parameter 'analysisRule' is set
      if (analysisRule === undefined || analysisRule === null) {
        throw new Error("Missing the required parameter 'analysisRule' when calling analysisRuleUpdate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/analysisrules/{webId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
