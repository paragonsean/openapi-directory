/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EnumerationValue from '../model/EnumerationValue';

/**
* EnumerationValue service.
* @module api/EnumerationValueApi
* @version 1.11.1.5383
*/
export default class EnumerationValueApi {

    /**
    * Constructs a new EnumerationValueApi. 
    * @alias module:api/EnumerationValueApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the enumerationValueDeleteEnumerationValue operation.
     * @callback module:api/EnumerationValueApi~enumerationValueDeleteEnumerationValueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an enumeration value from an enumeration set.
     * Deleting a value will remove it from the enumeration set along with any value references within the PI Web API system.
     * @param {String} webId The ID of the enumeration value.
     * @param {module:api/EnumerationValueApi~enumerationValueDeleteEnumerationValueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enumerationValueDeleteEnumerationValue(webId, callback) {
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling enumerationValueDeleteEnumerationValue");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/enumerationvalues/{webId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enumerationValueGet operation.
     * @callback module:api/EnumerationValueApi~enumerationValueGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnumerationValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an enumeration value mapping
     * @param {String} webId The ID of the enumeration value.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EnumerationValueApi~enumerationValueGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnumerationValue}
     */
    enumerationValueGet(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling enumerationValueGet");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = EnumerationValue;
      return this.apiClient.callApi(
        '/enumerationvalues/{webId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enumerationValueGetByPath operation.
     * @callback module:api/EnumerationValueApi~enumerationValueGetByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnumerationValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an enumeration value by path.
     * This method returns a enumeration value based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param {String} path The path to the target enumeration value.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/EnumerationValueApi~enumerationValueGetByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnumerationValue}
     */
    enumerationValueGetByPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling enumerationValueGetByPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = EnumerationValue;
      return this.apiClient.callApi(
        '/enumerationvalues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enumerationValueUpdateEnumerationValue operation.
     * @callback module:api/EnumerationValueApi~enumerationValueUpdateEnumerationValueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an enumeration value by replacing items in its definition.
     * @param {String} webId The ID of the enumeration value to update.
     * @param {module:model/EnumerationValue} enumerationValue A partial enumeration value containing the desired changes.
     * @param {module:api/EnumerationValueApi~enumerationValueUpdateEnumerationValueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enumerationValueUpdateEnumerationValue(webId, enumerationValue, callback) {
      let postBody = enumerationValue;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling enumerationValueUpdateEnumerationValue");
      }
      // verify the required parameter 'enumerationValue' is set
      if (enumerationValue === undefined || enumerationValue === null) {
        throw new Error("Missing the required parameter 'enumerationValue' when calling enumerationValueUpdateEnumerationValue");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/enumerationvalues/{webId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
