/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Errors from '../model/Errors';
import ItemsItemPoint from '../model/ItemsItemPoint';
import ItemsPointAttribute from '../model/ItemsPointAttribute';
import Point from '../model/Point';
import PointAttribute from '../model/PointAttribute';

/**
* Point service.
* @module api/PointApi
* @version 1.11.1.5383
*/
export default class PointApi {

    /**
    * Constructs a new PointApi. 
    * @alias module:api/PointApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the pointDelete operation.
     * @callback module:api/PointApi~pointDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a point.
     * @param {String} webId The ID of the point.
     * @param {module:api/PointApi~pointDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pointDelete(webId, callback) {
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling pointDelete");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/points/{webId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pointGet operation.
     * @callback module:api/PointApi~pointGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Point} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a point.
     * @param {String} webId The ID of the point.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/PointApi~pointGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Point}
     */
    pointGet(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling pointGet");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = Point;
      return this.apiClient.callApi(
        '/points/{webId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pointGetAttributeByName operation.
     * @callback module:api/PointApi~pointGetAttributeByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointAttribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a point attribute by name.
     * @param {String} name The name of the attribute.
     * @param {String} webId The ID of the point.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/PointApi~pointGetAttributeByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointAttribute}
     */
    pointGetAttributeByName(name, webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling pointGetAttributeByName");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling pointGetAttributeByName");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = PointAttribute;
      return this.apiClient.callApi(
        '/points/{webId}/attributes/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pointGetAttributes operation.
     * @callback module:api/PointApi~pointGetAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsPointAttribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get point attributes.
     * @param {String} webId The ID of the point.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [name] The name of a point attribute to be returned. Multiple attributes may be specified with multiple instances of the parameter.
     * @param {String} [nameFilter] The filter to the names of the list of point attributes to be returned. The default is no filter.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/PointApi~pointGetAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsPointAttribute}
     */
    pointGetAttributes(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling pointGetAttributes");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'name': this.apiClient.buildCollectionParam(opts['name'], 'multi'),
        'nameFilter': opts['nameFilter'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsPointAttribute;
      return this.apiClient.callApi(
        '/points/{webId}/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pointGetByPath operation.
     * @callback module:api/PointApi~pointGetByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Point} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a point by path.
     * This method returns a PI Point based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param {String} path The path to the point.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/PointApi~pointGetByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Point}
     */
    pointGetByPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling pointGetByPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = Point;
      return this.apiClient.callApi(
        '/points', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pointGetMultiple operation.
     * @callback module:api/PointApi~pointGetMultipleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsItemPoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve multiple points by web id or path.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [asParallel] Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested points. The default is 'false'.
     * @param {String} [includeMode] The include mode for the return list. The default is 'All'.
     * @param {Array.<String>} [path] The path of a point. Multiple points may be specified with multiple instances of the parameter.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Array.<String>} [webId] The ID of a point. Multiple points may be specified with multiple instances of the parameter.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/PointApi~pointGetMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsItemPoint}
     */
    pointGetMultiple(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'asParallel': opts['asParallel'],
        'includeMode': opts['includeMode'],
        'path': this.apiClient.buildCollectionParam(opts['path'], 'multi'),
        'selectedFields': opts['selectedFields'],
        'webId': this.apiClient.buildCollectionParam(opts['webId'], 'multi'),
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsItemPoint;
      return this.apiClient.callApi(
        '/points/multiple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pointUpdate operation.
     * @callback module:api/PointApi~pointUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a point. The only PI Point attributes that can be updated include: Name, Descriptor, EngineeringUnits, Step, and DisplayDigits. Other PI Point attributes cannot be updated through PI Web API.
     * @param {String} webId The ID of the point.
     * @param {module:model/Point} pointDTO A partial point containing the desired changes.
     * @param {module:api/PointApi~pointUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pointUpdate(webId, pointDTO, callback) {
      let postBody = pointDTO;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling pointUpdate");
      }
      // verify the required parameter 'pointDTO' is set
      if (pointDTO === undefined || pointDTO === null) {
        throw new Error("Missing the required parameter 'pointDTO' when calling pointUpdate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/points/{webId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
