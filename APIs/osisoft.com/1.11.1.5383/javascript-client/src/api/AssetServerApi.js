/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssetDatabase from '../model/AssetDatabase';
import AssetServer from '../model/AssetServer';
import Errors from '../model/Errors';
import ItemsAnalysisRulePlugIn from '../model/ItemsAnalysisRulePlugIn';
import ItemsAssetDatabase from '../model/ItemsAssetDatabase';
import ItemsAssetServer from '../model/ItemsAssetServer';
import ItemsNotificationContactTemplate from '../model/ItemsNotificationContactTemplate';
import ItemsNotificationPlugIn from '../model/ItemsNotificationPlugIn';
import ItemsSecurityEntry from '../model/ItemsSecurityEntry';
import ItemsSecurityIdentity from '../model/ItemsSecurityIdentity';
import ItemsSecurityMapping from '../model/ItemsSecurityMapping';
import ItemsSecurityRights from '../model/ItemsSecurityRights';
import ItemsTimeRulePlugIn from '../model/ItemsTimeRulePlugIn';
import ItemsUnitClass from '../model/ItemsUnitClass';
import NotificationContactTemplate from '../model/NotificationContactTemplate';
import SecurityEntry from '../model/SecurityEntry';
import SecurityIdentity from '../model/SecurityIdentity';
import SecurityMapping from '../model/SecurityMapping';
import UnitClass from '../model/UnitClass';

/**
* AssetServer service.
* @module api/AssetServerApi
* @version 1.11.1.5383
*/
export default class AssetServerApi {

    /**
    * Constructs a new AssetServerApi. 
    * @alias module:api/AssetServerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assetServerCreateAssetDatabase operation.
     * @callback module:api/AssetServerApi~assetServerCreateAssetDatabaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an asset database.
     * @param {String} webId The ID of the asset server on which to create the database.
     * @param {module:model/AssetDatabase} database The new database definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerCreateAssetDatabaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetServerCreateAssetDatabase(webId, database, opts, callback) {
      opts = opts || {};
      let postBody = database;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerCreateAssetDatabase");
      }
      // verify the required parameter 'database' is set
      if (database === undefined || database === null) {
        throw new Error("Missing the required parameter 'database' when calling assetServerCreateAssetDatabase");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetservers/{webId}/assetdatabases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerCreateNotificationContactTemplate operation.
     * @callback module:api/AssetServerApi~assetServerCreateNotificationContactTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a notification contact template.
     * @param {String} webId The ID of the asset server on which to create the notification contact template.
     * @param {module:model/NotificationContactTemplate} notificationContactTemplate The new notification contact template definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerCreateNotificationContactTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetServerCreateNotificationContactTemplate(webId, notificationContactTemplate, opts, callback) {
      opts = opts || {};
      let postBody = notificationContactTemplate;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerCreateNotificationContactTemplate");
      }
      // verify the required parameter 'notificationContactTemplate' is set
      if (notificationContactTemplate === undefined || notificationContactTemplate === null) {
        throw new Error("Missing the required parameter 'notificationContactTemplate' when calling assetServerCreateNotificationContactTemplate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetservers/{webId}/notificationcontacttemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerCreateSecurityEntry operation.
     * @callback module:api/AssetServerApi~assetServerCreateSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a security entry owned by the asset server.
     * @param {String} webId The ID of the asset server where the security entry will be created.
     * @param {module:model/SecurityEntry} securityEntry The new security entry definition. The full list of allow and deny rights must be supplied.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {String} [securityItem] The security item of the desired security entries to be created. If the parameter is not specified, security entries of the 'Default' security item will be created.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerCreateSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetServerCreateSecurityEntry(webId, securityEntry, opts, callback) {
      opts = opts || {};
      let postBody = securityEntry;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerCreateSecurityEntry");
      }
      // verify the required parameter 'securityEntry' is set
      if (securityEntry === undefined || securityEntry === null) {
        throw new Error("Missing the required parameter 'securityEntry' when calling assetServerCreateSecurityEntry");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren'],
        'securityItem': opts['securityItem'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetservers/{webId}/securityentries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerCreateSecurityIdentity operation.
     * @callback module:api/AssetServerApi~assetServerCreateSecurityIdentityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a security identity.
     * @param {String} webId The ID of the asset server on which to create the security identity.
     * @param {module:model/SecurityIdentity} securityIdentity The new security identity definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerCreateSecurityIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetServerCreateSecurityIdentity(webId, securityIdentity, opts, callback) {
      opts = opts || {};
      let postBody = securityIdentity;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerCreateSecurityIdentity");
      }
      // verify the required parameter 'securityIdentity' is set
      if (securityIdentity === undefined || securityIdentity === null) {
        throw new Error("Missing the required parameter 'securityIdentity' when calling assetServerCreateSecurityIdentity");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetservers/{webId}/securityidentities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerCreateSecurityMapping operation.
     * @callback module:api/AssetServerApi~assetServerCreateSecurityMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a security mapping.
     * @param {String} webId The ID of the asset server on which to create the security mapping.
     * @param {module:model/SecurityMapping} securityMapping The new security mapping definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerCreateSecurityMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetServerCreateSecurityMapping(webId, securityMapping, opts, callback) {
      opts = opts || {};
      let postBody = securityMapping;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerCreateSecurityMapping");
      }
      // verify the required parameter 'securityMapping' is set
      if (securityMapping === undefined || securityMapping === null) {
        throw new Error("Missing the required parameter 'securityMapping' when calling assetServerCreateSecurityMapping");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetservers/{webId}/securitymappings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerCreateUnitClass operation.
     * @callback module:api/AssetServerApi~assetServerCreateUnitClassCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a unit class in the specified Asset Server.
     * @param {String} webId The ID of the server.
     * @param {module:model/UnitClass} unitClass The new unit class definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerCreateUnitClassCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetServerCreateUnitClass(webId, unitClass, opts, callback) {
      opts = opts || {};
      let postBody = unitClass;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerCreateUnitClass");
      }
      // verify the required parameter 'unitClass' is set
      if (unitClass === undefined || unitClass === null) {
        throw new Error("Missing the required parameter 'unitClass' when calling assetServerCreateUnitClass");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetservers/{webId}/unitclasses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerDeleteSecurityEntry operation.
     * @callback module:api/AssetServerApi~assetServerDeleteSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a security entry owned by the asset server.
     * @param {String} name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username.
     * @param {String} webId The ID of the asset server where the security entry will be deleted.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {String} [securityItem] The security item of the desired security entries to be deleted. If the parameter is not specified, security entries of the 'Default' security item will be deleted.
     * @param {module:api/AssetServerApi~assetServerDeleteSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetServerDeleteSecurityEntry(name, webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling assetServerDeleteSecurityEntry");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerDeleteSecurityEntry");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren'],
        'securityItem': opts['securityItem']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetservers/{webId}/securityentries/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerGet operation.
     * @callback module:api/AssetServerApi~assetServerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Asset Server.
     * @param {String} webId The ID of the server.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetServer}
     */
    assetServerGet(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerGet");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = AssetServer;
      return this.apiClient.callApi(
        '/assetservers/{webId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerGetAnalysisRulePlugIns operation.
     * @callback module:api/AssetServerApi~assetServerGetAnalysisRulePlugInsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAnalysisRulePlugIn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all Analysis Rule Plug-in's.
     * @param {String} webId The ID of the asset server, where the Analysis Rule Plug-in's are installed.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerGetAnalysisRulePlugInsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAnalysisRulePlugIn}
     */
    assetServerGetAnalysisRulePlugIns(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerGetAnalysisRulePlugIns");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAnalysisRulePlugIn;
      return this.apiClient.callApi(
        '/assetservers/{webId}/analysisruleplugins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerGetByName operation.
     * @callback module:api/AssetServerApi~assetServerGetByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Asset Server by name.
     * This method returns an asset server based on the name associated with it. Users should primarily search with the WebID when available.
     * @param {String} name The name of the server.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerGetByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetServer}
     */
    assetServerGetByName(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling assetServerGetByName");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = AssetServer;
      return this.apiClient.callApi(
        '/assetservers#name', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerGetByPath operation.
     * @callback module:api/AssetServerApi~assetServerGetByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Asset Server by path.
     * This method returns an asset server based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param {String} path The path to the server.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerGetByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetServer}
     */
    assetServerGetByPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling assetServerGetByPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = AssetServer;
      return this.apiClient.callApi(
        '/assetservers#path', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerGetDatabases operation.
     * @callback module:api/AssetServerApi~assetServerGetDatabasesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAssetDatabase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all Asset Databases on the specified Asset Server.
     * @param {String} webId The ID of the server.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerGetDatabasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAssetDatabase}
     */
    assetServerGetDatabases(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerGetDatabases");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAssetDatabase;
      return this.apiClient.callApi(
        '/assetservers/{webId}/assetdatabases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerGetNotificationContactTemplates operation.
     * @callback module:api/AssetServerApi~assetServerGetNotificationContactTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsNotificationContactTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all notification contact templates on the specified Asset Server.
     * @param {String} webId The ID of the server.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerGetNotificationContactTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsNotificationContactTemplate}
     */
    assetServerGetNotificationContactTemplates(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerGetNotificationContactTemplates");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsNotificationContactTemplate;
      return this.apiClient.callApi(
        '/assetservers/{webId}/notificationcontacttemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerGetNotificationPlugIns operation.
     * @callback module:api/AssetServerApi~assetServerGetNotificationPlugInsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsNotificationPlugIn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all notification plugins on the specified Asset Server.
     * @param {String} webId The ID of the server.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerGetNotificationPlugInsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsNotificationPlugIn}
     */
    assetServerGetNotificationPlugIns(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerGetNotificationPlugIns");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsNotificationPlugIn;
      return this.apiClient.callApi(
        '/assetservers/{webId}/notificationplugins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerGetSecurity operation.
     * @callback module:api/AssetServerApi~assetServerGetSecurityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityRights} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the security information of the specified security item associated with the asset server for a specified user.
     * @param {String} webId The ID of the asset server for the security to be checked.
     * @param {Array.<String>} securityItem The security item of the desired security information to be returned. Multiple security items may be specified with multiple instances of the parameter. If the parameter is not specified, only 'Default' security item of the security information will be returned.
     * @param {Array.<String>} userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceRefresh] Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerGetSecurityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityRights}
     */
    assetServerGetSecurity(webId, securityItem, userIdentity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerGetSecurity");
      }
      // verify the required parameter 'securityItem' is set
      if (securityItem === undefined || securityItem === null) {
        throw new Error("Missing the required parameter 'securityItem' when calling assetServerGetSecurity");
      }
      // verify the required parameter 'userIdentity' is set
      if (userIdentity === undefined || userIdentity === null) {
        throw new Error("Missing the required parameter 'userIdentity' when calling assetServerGetSecurity");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'securityItem': this.apiClient.buildCollectionParam(securityItem, 'multi'),
        'userIdentity': this.apiClient.buildCollectionParam(userIdentity, 'multi'),
        'forceRefresh': opts['forceRefresh'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityRights;
      return this.apiClient.callApi(
        '/assetservers/{webId}/security', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerGetSecurityEntries operation.
     * @callback module:api/AssetServerApi~assetServerGetSecurityEntriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the security entries of the specified security item associated with the asset server based on the specified criteria. By default, all security entries for this asset server are returned.
     * @param {String} webId The ID of the asset server.
     * @param {Object} opts Optional parameters
     * @param {String} [nameFilter] The name query string used for filtering security entries. The default is no filter.
     * @param {String} [securityItem] The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the 'Default' security item will be returned.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerGetSecurityEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityEntry}
     */
    assetServerGetSecurityEntries(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerGetSecurityEntries");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'nameFilter': opts['nameFilter'],
        'securityItem': opts['securityItem'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityEntry;
      return this.apiClient.callApi(
        '/assetservers/{webId}/securityentries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerGetSecurityEntryByName operation.
     * @callback module:api/AssetServerApi~assetServerGetSecurityEntryByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the security entry of the specified security item associated with the asset server with the specified name.
     * @param {String} name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username.
     * @param {String} webId The ID of the asset server.
     * @param {Object} opts Optional parameters
     * @param {String} [securityItem] The security item of the desired security entries information to be returned. If the parameter is not specified, security entries of the 'Default' security item will be returned.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerGetSecurityEntryByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityEntry}
     */
    assetServerGetSecurityEntryByName(name, webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling assetServerGetSecurityEntryByName");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerGetSecurityEntryByName");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'securityItem': opts['securityItem'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = SecurityEntry;
      return this.apiClient.callApi(
        '/assetservers/{webId}/securityentries/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerGetSecurityIdentities operation.
     * @callback module:api/AssetServerApi~assetServerGetSecurityIdentitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityIdentity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve security identities based on the specified criteria. By default, all security identities in the specified Asset Server are returned.
     * @param {String} webId The ID of the asset server to search.
     * @param {Object} opts Optional parameters
     * @param {String} [field] Specifies which of the object's properties are searched. The default is 'Name'.
     * @param {Number} [maxCount] The maximum number of objects to be returned. The default is 1000.
     * @param {String} [query] The query string used for finding objects. The default is no query string.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerGetSecurityIdentitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityIdentity}
     */
    assetServerGetSecurityIdentities(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerGetSecurityIdentities");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'field': opts['field'],
        'maxCount': opts['maxCount'],
        'query': opts['query'],
        'selectedFields': opts['selectedFields'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityIdentity;
      return this.apiClient.callApi(
        '/assetservers/{webId}/securityidentities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerGetSecurityIdentitiesForUser operation.
     * @callback module:api/AssetServerApi~assetServerGetSecurityIdentitiesForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityIdentity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve security identities for a specific user.
     * @param {String} webId The ID of the server.
     * @param {String} userIdentity The user identity to search for.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerGetSecurityIdentitiesForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityIdentity}
     */
    assetServerGetSecurityIdentitiesForUser(webId, userIdentity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerGetSecurityIdentitiesForUser");
      }
      // verify the required parameter 'userIdentity' is set
      if (userIdentity === undefined || userIdentity === null) {
        throw new Error("Missing the required parameter 'userIdentity' when calling assetServerGetSecurityIdentitiesForUser");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'userIdentity': userIdentity,
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityIdentity;
      return this.apiClient.callApi(
        '/assetservers/{webId}/securityidentities#userIdentity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerGetSecurityMappings operation.
     * @callback module:api/AssetServerApi~assetServerGetSecurityMappingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve security mappings based on the specified criteria. By default, all security mappings in the specified Asset Server are returned.
     * @param {String} webId The ID of the asset server to search.
     * @param {Object} opts Optional parameters
     * @param {String} [field] Specifies which of the object's properties are searched. The default is 'Name'.
     * @param {Number} [maxCount] The maximum number of objects to be returned. The default is 1000.
     * @param {String} [query] The query string used for finding objects. The default is no query string.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerGetSecurityMappingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityMapping}
     */
    assetServerGetSecurityMappings(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerGetSecurityMappings");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'field': opts['field'],
        'maxCount': opts['maxCount'],
        'query': opts['query'],
        'selectedFields': opts['selectedFields'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityMapping;
      return this.apiClient.callApi(
        '/assetservers/{webId}/securitymappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerGetTimeRulePlugIns operation.
     * @callback module:api/AssetServerApi~assetServerGetTimeRulePlugInsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsTimeRulePlugIn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all Time Rule Plug-in's.
     * @param {String} webId The ID of the asset server, where the Time Rule Plug-in's are installed.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerGetTimeRulePlugInsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsTimeRulePlugIn}
     */
    assetServerGetTimeRulePlugIns(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerGetTimeRulePlugIns");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsTimeRulePlugIn;
      return this.apiClient.callApi(
        '/assetservers/{webId}/timeruleplugins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerGetUnitClasses operation.
     * @callback module:api/AssetServerApi~assetServerGetUnitClassesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsUnitClass} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all unit classes on the specified Asset Server.
     * @param {String} webId The ID of the server.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerGetUnitClassesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsUnitClass}
     */
    assetServerGetUnitClasses(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerGetUnitClasses");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsUnitClass;
      return this.apiClient.callApi(
        '/assetservers/{webId}/unitclasses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerList operation.
     * @callback module:api/AssetServerApi~assetServerListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAssetServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of all Asset Servers known to this service.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/AssetServerApi~assetServerListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAssetServer}
     */
    assetServerList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAssetServer;
      return this.apiClient.callApi(
        '/assetservers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assetServerUpdateSecurityEntry operation.
     * @callback module:api/AssetServerApi~assetServerUpdateSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a security entry owned by the asset server.
     * @param {String} name The name of the security entry.
     * @param {String} webId The ID of the asset server where the security entry will be updated.
     * @param {module:model/SecurityEntry} securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {String} [securityItem] The security item of the desired security entries to be updated. If the parameter is not specified, security entries of the 'Default' security item will be updated.
     * @param {module:api/AssetServerApi~assetServerUpdateSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assetServerUpdateSecurityEntry(name, webId, securityEntry, opts, callback) {
      opts = opts || {};
      let postBody = securityEntry;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling assetServerUpdateSecurityEntry");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling assetServerUpdateSecurityEntry");
      }
      // verify the required parameter 'securityEntry' is set
      if (securityEntry === undefined || securityEntry === null) {
        throw new Error("Missing the required parameter 'securityEntry' when calling assetServerUpdateSecurityEntry");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren'],
        'securityItem': opts['securityItem']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assetservers/{webId}/securityentries/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
