/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttributeTemplate from '../model/AttributeTemplate';
import ElementTemplate from '../model/ElementTemplate';
import Errors from '../model/Errors';
import ItemsAnalysisTemplate from '../model/ItemsAnalysisTemplate';
import ItemsAttributeTemplate from '../model/ItemsAttributeTemplate';
import ItemsElementCategory from '../model/ItemsElementCategory';
import ItemsElementTemplate from '../model/ItemsElementTemplate';
import ItemsNotificationRuleTemplate from '../model/ItemsNotificationRuleTemplate';
import ItemsSecurityEntry from '../model/ItemsSecurityEntry';
import ItemsSecurityRights from '../model/ItemsSecurityRights';
import NotificationRuleTemplate from '../model/NotificationRuleTemplate';
import SecurityEntry from '../model/SecurityEntry';

/**
* ElementTemplate service.
* @module api/ElementTemplateApi
* @version 1.11.1.5383
*/
export default class ElementTemplateApi {

    /**
    * Constructs a new ElementTemplateApi. 
    * @alias module:api/ElementTemplateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the elementTemplateCreateAttributeTemplate operation.
     * @callback module:api/ElementTemplateApi~elementTemplateCreateAttributeTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an attribute template.
     * @param {String} webId The ID of the element template on which to create the attribute template.
     * @param {module:model/AttributeTemplate} template The attribute template definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementTemplateApi~elementTemplateCreateAttributeTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementTemplateCreateAttributeTemplate(webId, template, opts, callback) {
      opts = opts || {};
      let postBody = template;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateCreateAttributeTemplate");
      }
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling elementTemplateCreateAttributeTemplate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}/attributetemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateCreateNotificationRuleTemplate operation.
     * @callback module:api/ElementTemplateApi~elementTemplateCreateNotificationRuleTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a notification rule template.
     * @param {String} webId The ID of the element on which to create the notification rule template.
     * @param {module:model/NotificationRuleTemplate} notificationRuleTemplate The new notification rule template.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementTemplateApi~elementTemplateCreateNotificationRuleTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementTemplateCreateNotificationRuleTemplate(webId, notificationRuleTemplate, opts, callback) {
      opts = opts || {};
      let postBody = notificationRuleTemplate;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateCreateNotificationRuleTemplate");
      }
      // verify the required parameter 'notificationRuleTemplate' is set
      if (notificationRuleTemplate === undefined || notificationRuleTemplate === null) {
        throw new Error("Missing the required parameter 'notificationRuleTemplate' when calling elementTemplateCreateNotificationRuleTemplate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}/notificationruletemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateCreateSecurityEntry operation.
     * @callback module:api/ElementTemplateApi~elementTemplateCreateSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a security entry owned by the element template.
     * @param {String} webId The ID of the element template where the security entry will be created.
     * @param {module:model/SecurityEntry} securityEntry The new security entry definition. The full list of allow and deny rights must be supplied.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementTemplateApi~elementTemplateCreateSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementTemplateCreateSecurityEntry(webId, securityEntry, opts, callback) {
      opts = opts || {};
      let postBody = securityEntry;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateCreateSecurityEntry");
      }
      // verify the required parameter 'securityEntry' is set
      if (securityEntry === undefined || securityEntry === null) {
        throw new Error("Missing the required parameter 'securityEntry' when calling elementTemplateCreateSecurityEntry");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}/securityentries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateDelete operation.
     * @callback module:api/ElementTemplateApi~elementTemplateDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an element template.
     * Deleting an element template will delete all associated templated data from elements which were created from it.
     * @param {String} webId The ID of the element template to update.
     * @param {module:api/ElementTemplateApi~elementTemplateDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementTemplateDelete(webId, callback) {
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateDelete");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateDeleteSecurityEntry operation.
     * @callback module:api/ElementTemplateApi~elementTemplateDeleteSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a security entry owned by the element template.
     * @param {String} name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username.
     * @param {String} webId The ID of the element template where the security entry will be deleted.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {module:api/ElementTemplateApi~elementTemplateDeleteSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementTemplateDeleteSecurityEntry(name, webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling elementTemplateDeleteSecurityEntry");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateDeleteSecurityEntry");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}/securityentries/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateGet operation.
     * @callback module:api/ElementTemplateApi~elementTemplateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElementTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an element template.
     * @param {String} webId The ID of the element template.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementTemplateApi~elementTemplateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElementTemplate}
     */
    elementTemplateGet(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateGet");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ElementTemplate;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateGetAnalysisTemplates operation.
     * @callback module:api/ElementTemplateApi~elementTemplateGetAnalysisTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAnalysisTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get analysis templates for an element template.
     * @param {String} webId The ID of the element template.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementTemplateApi~elementTemplateGetAnalysisTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAnalysisTemplate}
     */
    elementTemplateGetAnalysisTemplates(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateGetAnalysisTemplates");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAnalysisTemplate;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}/analysistemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateGetAttributeTemplates operation.
     * @callback module:api/ElementTemplateApi~elementTemplateGetAttributeTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAttributeTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get child attribute templates for an element template.
     * If 'showInherited' and 'showDescendants' are 'true', it returns all the attribute templates from current element template and the base template.  If 'showInherited' is 'false', it returns all the attribute templates from the current element template.
     * @param {String} webId The ID of the element template.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [depthFirstTraverse] When 'true', a Depth First traversal will be performed; this starts at the root and explores as far as possible along each branch before backtracking. When 'false', a Breadth First traversal will be performed; this starts at the tree root and explores the neighbor nodes first, then moves onto the next level of neighbors. The default is 'false' (Breadth First).
     * @param {Number} [maxCount] The maximum number of objects to be returned. The default is 1000.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Boolean} [showDescendants] Specifies if the result should include all descendant attribute templates from the current element template, even indirect ones. The default is 'false'.
     * @param {Boolean} [showInherited] Specifies if the result should include attribute templates inherited from base element templates. The default is 'false'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementTemplateApi~elementTemplateGetAttributeTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAttributeTemplate}
     */
    elementTemplateGetAttributeTemplates(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateGetAttributeTemplates");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'depthFirstTraverse': opts['depthFirstTraverse'],
        'maxCount': opts['maxCount'],
        'selectedFields': opts['selectedFields'],
        'showDescendants': opts['showDescendants'],
        'showInherited': opts['showInherited'],
        'startIndex': opts['startIndex'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAttributeTemplate;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}/attributetemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateGetBaseElementTemplates operation.
     * @callback module:api/ElementTemplateApi~elementTemplateGetBaseElementTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsElementTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get base element templates for an element template.
     * The root template will be returned first, followed by successive templates in the inheritance chain.
     * @param {String} webId The ID of the element template.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxCount] The maximum number of objects to be returned. The default is 1000.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementTemplateApi~elementTemplateGetBaseElementTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsElementTemplate}
     */
    elementTemplateGetBaseElementTemplates(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateGetBaseElementTemplates");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'maxCount': opts['maxCount'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsElementTemplate;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}/baseelementtemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateGetByPath operation.
     * @callback module:api/ElementTemplateApi~elementTemplateGetByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElementTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an element template by path.
     * This method returns an element template based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param {String} path The path to the element template.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementTemplateApi~elementTemplateGetByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElementTemplate}
     */
    elementTemplateGetByPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling elementTemplateGetByPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ElementTemplate;
      return this.apiClient.callApi(
        '/elementtemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateGetCategories operation.
     * @callback module:api/ElementTemplateApi~elementTemplateGetCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsElementCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an element template's categories.
     * @param {String} webId The ID of the element template.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Boolean} [showInherited] Specifies if the result should include categories inherited from base element templates. The default is 'false'.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementTemplateApi~elementTemplateGetCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsElementCategory}
     */
    elementTemplateGetCategories(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateGetCategories");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'showInherited': opts['showInherited'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsElementCategory;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateGetDerivedElementTemplates operation.
     * @callback module:api/ElementTemplateApi~elementTemplateGetDerivedElementTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsElementTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get derived element templates for an element template.
     * @param {String} webId The ID of the element template.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxCount] The maximum number of objects to be returned. The default is 1000.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Boolean} [showDescendants] Specifies if the result should include all descendant element templates from the current element template, even indirect ones. The default is 'false'.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementTemplateApi~elementTemplateGetDerivedElementTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsElementTemplate}
     */
    elementTemplateGetDerivedElementTemplates(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateGetDerivedElementTemplates");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'maxCount': opts['maxCount'],
        'selectedFields': opts['selectedFields'],
        'showDescendants': opts['showDescendants'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsElementTemplate;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}/derivedelementtemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateGetNotificationRuleTemplates operation.
     * @callback module:api/ElementTemplateApi~elementTemplateGetNotificationRuleTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsNotificationRuleTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get notification rule templates for an element template
     * @param {String} webId The ID of the element template.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementTemplateApi~elementTemplateGetNotificationRuleTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsNotificationRuleTemplate}
     */
    elementTemplateGetNotificationRuleTemplates(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateGetNotificationRuleTemplates");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsNotificationRuleTemplate;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}/notificationruletemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateGetSecurity operation.
     * @callback module:api/ElementTemplateApi~elementTemplateGetSecurityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityRights} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the security information of the specified security item associated with the element template for a specified user.
     * @param {String} webId The ID of the element template for the security to be checked.
     * @param {Array.<String>} userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceRefresh] Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementTemplateApi~elementTemplateGetSecurityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityRights}
     */
    elementTemplateGetSecurity(webId, userIdentity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateGetSecurity");
      }
      // verify the required parameter 'userIdentity' is set
      if (userIdentity === undefined || userIdentity === null) {
        throw new Error("Missing the required parameter 'userIdentity' when calling elementTemplateGetSecurity");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'userIdentity': this.apiClient.buildCollectionParam(userIdentity, 'multi'),
        'forceRefresh': opts['forceRefresh'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityRights;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}/security', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateGetSecurityEntries operation.
     * @callback module:api/ElementTemplateApi~elementTemplateGetSecurityEntriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the security entries associated with the element template based on the specified criteria. By default, all security entries for this element template are returned.
     * @param {String} webId The ID of the element template.
     * @param {Object} opts Optional parameters
     * @param {String} [nameFilter] The name query string used for filtering security entries. The default is no filter.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementTemplateApi~elementTemplateGetSecurityEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityEntry}
     */
    elementTemplateGetSecurityEntries(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateGetSecurityEntries");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'nameFilter': opts['nameFilter'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityEntry;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}/securityentries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateGetSecurityEntryByName operation.
     * @callback module:api/ElementTemplateApi~elementTemplateGetSecurityEntryByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the security entry associated with the element template with the specified name.
     * @param {String} name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username.
     * @param {String} webId The ID of the element template.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementTemplateApi~elementTemplateGetSecurityEntryByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityEntry}
     */
    elementTemplateGetSecurityEntryByName(name, webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling elementTemplateGetSecurityEntryByName");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateGetSecurityEntryByName");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityEntry;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}/securityentries/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateUpdate operation.
     * @callback module:api/ElementTemplateApi~elementTemplateUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an element template by replacing items in its definition.
     * Updating the InstanceType property of an element template will not affect any elements that have already been created from this template; it will only affect any future elements created from this template. All other changes will be propagated to elements based on this template.
     * @param {String} webId The ID of the element template to update.
     * @param {module:model/ElementTemplate} template A partial element template containing the desired changes.
     * @param {module:api/ElementTemplateApi~elementTemplateUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementTemplateUpdate(webId, template, callback) {
      let postBody = template;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateUpdate");
      }
      // verify the required parameter 'template' is set
      if (template === undefined || template === null) {
        throw new Error("Missing the required parameter 'template' when calling elementTemplateUpdate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementTemplateUpdateSecurityEntry operation.
     * @callback module:api/ElementTemplateApi~elementTemplateUpdateSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a security entry owned by the element template.
     * @param {String} name The name of the security entry.
     * @param {String} webId The ID of the element template where the security entry will be updated.
     * @param {module:model/SecurityEntry} securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {module:api/ElementTemplateApi~elementTemplateUpdateSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementTemplateUpdateSecurityEntry(name, webId, securityEntry, opts, callback) {
      opts = opts || {};
      let postBody = securityEntry;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling elementTemplateUpdateSecurityEntry");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementTemplateUpdateSecurityEntry");
      }
      // verify the required parameter 'securityEntry' is set
      if (securityEntry === undefined || securityEntry === null) {
        throw new Error("Missing the required parameter 'securityEntry' when calling elementTemplateUpdateSecurityEntry");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elementtemplates/{webId}/securityentries/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
