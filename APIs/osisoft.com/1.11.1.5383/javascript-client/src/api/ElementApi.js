/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Analysis from '../model/Analysis';
import Attribute from '../model/Attribute';
import Element from '../model/Element';
import Errors from '../model/Errors';
import ItemsAnalysis from '../model/ItemsAnalysis';
import ItemsAttribute from '../model/ItemsAttribute';
import ItemsElement from '../model/ItemsElement';
import ItemsElementCategory from '../model/ItemsElementCategory';
import ItemsEventFrame from '../model/ItemsEventFrame';
import ItemsItemElement from '../model/ItemsItemElement';
import ItemsNotificationRule from '../model/ItemsNotificationRule';
import ItemsSecurityEntry from '../model/ItemsSecurityEntry';
import ItemsSecurityRights from '../model/ItemsSecurityRights';
import ItemsString from '../model/ItemsString';
import NotificationRule from '../model/NotificationRule';
import SearchByAttribute from '../model/SearchByAttribute';
import SecurityEntry from '../model/SecurityEntry';

/**
* Element service.
* @module api/ElementApi
* @version 1.11.1.5383
*/
export default class ElementApi {

    /**
    * Constructs a new ElementApi. 
    * @alias module:api/ElementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the elementAddReferencedElement operation.
     * @callback module:api/ElementApi~elementAddReferencedElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a reference to an existing element to the child elements collection.
     * @param {String} webId The ID of the element which the referenced element will be added to.
     * @param {Array.<String>} referencedElementWebId The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter.
     * @param {Object} opts Optional parameters
     * @param {String} [referenceType] The name of the reference type between the parent and the referenced element. The default is \"parent-child\".
     * @param {module:api/ElementApi~elementAddReferencedElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementAddReferencedElement(webId, referencedElementWebId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementAddReferencedElement");
      }
      // verify the required parameter 'referencedElementWebId' is set
      if (referencedElementWebId === undefined || referencedElementWebId === null) {
        throw new Error("Missing the required parameter 'referencedElementWebId' when calling elementAddReferencedElement");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'referencedElementWebId': this.apiClient.buildCollectionParam(referencedElementWebId, 'multi'),
        'referenceType': opts['referenceType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = null;
      return this.apiClient.callApi(
        '/elements/{webId}/referencedelements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementCreateAnalysis operation.
     * @callback module:api/ElementApi~elementCreateAnalysisCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Analysis.
     * @param {String} webId The ID of the element on which to create the Analysis.
     * @param {module:model/Analysis} analysis The new Analysis definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementCreateAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementCreateAnalysis(webId, analysis, opts, callback) {
      opts = opts || {};
      let postBody = analysis;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementCreateAnalysis");
      }
      // verify the required parameter 'analysis' is set
      if (analysis === undefined || analysis === null) {
        throw new Error("Missing the required parameter 'analysis' when calling elementCreateAnalysis");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elements/{webId}/analyses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementCreateAttribute operation.
     * @callback module:api/ElementApi~elementCreateAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new attribute of the specified element.
     * @param {String} webId The ID of the element on which to create the attribute.
     * @param {module:model/Attribute} attribute The definition of the new attribute.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementCreateAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementCreateAttribute(webId, attribute, opts, callback) {
      opts = opts || {};
      let postBody = attribute;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementCreateAttribute");
      }
      // verify the required parameter 'attribute' is set
      if (attribute === undefined || attribute === null) {
        throw new Error("Missing the required parameter 'attribute' when calling elementCreateAttribute");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elements/{webId}/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementCreateConfig operation.
     * @callback module:api/ElementApi~elementCreateConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes the create configuration function of the data references found within the attributes of the element, and optionally, its children.
     * @param {String} webId The ID of the element.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeChildElements] If true, includes the child elements of the specified element.
     * @param {module:api/ElementApi~elementCreateConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementCreateConfig(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementCreateConfig");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'includeChildElements': opts['includeChildElements']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elements/{webId}/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementCreateElement operation.
     * @callback module:api/ElementApi~elementCreateElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a child element.
     * @param {String} webId The ID of the parent element on which to create the element.
     * @param {module:model/Element} element The new element definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementCreateElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementCreateElement(webId, element, opts, callback) {
      opts = opts || {};
      let postBody = element;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementCreateElement");
      }
      // verify the required parameter 'element' is set
      if (element === undefined || element === null) {
        throw new Error("Missing the required parameter 'element' when calling elementCreateElement");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elements/{webId}/elements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementCreateNotificationRule operation.
     * @callback module:api/ElementApi~elementCreateNotificationRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a notification rule.
     * @param {String} webId The ID of the element on which to create the notification rule.
     * @param {module:model/NotificationRule} notificationRule The new notification rule.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementCreateNotificationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementCreateNotificationRule(webId, notificationRule, opts, callback) {
      opts = opts || {};
      let postBody = notificationRule;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementCreateNotificationRule");
      }
      // verify the required parameter 'notificationRule' is set
      if (notificationRule === undefined || notificationRule === null) {
        throw new Error("Missing the required parameter 'notificationRule' when calling elementCreateNotificationRule");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elements/{webId}/notificationrules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementCreateSearchByAttribute operation.
     * @callback module:api/ElementApi~elementCreateSearchByAttributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsElement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a link for a \"Search Elements By Attribute Value\" operation, whose queries are specified in the request content. The SearchRoot is specified by the Web Id of the root Element. If the SearchRoot is not specified, then the search starts at the Asset Database. ElementTemplate must be provided as the Web ID of the ElementTemplate, which are used to create the Elements. All the attributes in the queries must be defined as AttributeTemplates on the ElementTemplate. An array of attribute value queries are ANDed together to find the desired Element objects. At least one value query must be specified. There are limitations on SearchOperators.
     * @param {module:model/SearchByAttribute} query The query of search by attribute.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned.
     * @param {Boolean} [noResults] If false, the response content will contain the first page of the search results. If true, the response content will be empty. The default is false.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementCreateSearchByAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsElement}
     */
    elementCreateSearchByAttribute(query, opts, callback) {
      opts = opts || {};
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling elementCreateSearchByAttribute");
      }

      let pathParams = {
      };
      let queryParams = {
        'associations': opts['associations'],
        'noResults': opts['noResults'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsElement;
      return this.apiClient.callApi(
        '/elements/searchbyattribute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementCreateSecurityEntry operation.
     * @callback module:api/ElementApi~elementCreateSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a security entry owned by the element.
     * @param {String} webId The ID of the element where the security entry will be created.
     * @param {module:model/SecurityEntry} securityEntry The new security entry definition. The full list of allow and deny rights must be supplied.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementCreateSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementCreateSecurityEntry(webId, securityEntry, opts, callback) {
      opts = opts || {};
      let postBody = securityEntry;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementCreateSecurityEntry");
      }
      // verify the required parameter 'securityEntry' is set
      if (securityEntry === undefined || securityEntry === null) {
        throw new Error("Missing the required parameter 'securityEntry' when calling elementCreateSecurityEntry");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elements/{webId}/securityentries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementDelete operation.
     * @callback module:api/ElementApi~elementDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an element.
     * @param {String} webId The ID of the element.
     * @param {module:api/ElementApi~elementDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementDelete(webId, callback) {
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementDelete");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elements/{webId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementDeleteSecurityEntry operation.
     * @callback module:api/ElementApi~elementDeleteSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a security entry owned by the element.
     * @param {String} name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username.
     * @param {String} webId The ID of the element where the security entry will be deleted.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {module:api/ElementApi~elementDeleteSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementDeleteSecurityEntry(name, webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling elementDeleteSecurityEntry");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementDeleteSecurityEntry");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elements/{webId}/securityentries/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementExecuteSearchByAttribute operation.
     * @callback module:api/ElementApi~elementExecuteSearchByAttributeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsElement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a \"Search Elements By Attribute Value\" operation.
     * @param {String} searchId The encoded search Id of the \"Search Elements By Attribute Value\" operation.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned.
     * @param {String} [categoryName] Specify that the owner of the returned attributes must have this category. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
     * @param {String} [descriptionFilter] The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
     * @param {Number} [maxCount] The maximum number of objects to be returned. The default is 1000.
     * @param {String} [nameFilter] The name query string used for finding objects. The default is no filter.
     * @param {Boolean} [searchFullHierarchy] Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is 'false'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementExecuteSearchByAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsElement}
     */
    elementExecuteSearchByAttribute(searchId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'searchId' is set
      if (searchId === undefined || searchId === null) {
        throw new Error("Missing the required parameter 'searchId' when calling elementExecuteSearchByAttribute");
      }

      let pathParams = {
        'searchId': searchId
      };
      let queryParams = {
        'associations': opts['associations'],
        'categoryName': opts['categoryName'],
        'descriptionFilter': opts['descriptionFilter'],
        'maxCount': opts['maxCount'],
        'nameFilter': opts['nameFilter'],
        'searchFullHierarchy': opts['searchFullHierarchy'],
        'selectedFields': opts['selectedFields'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsElement;
      return this.apiClient.callApi(
        '/elements/searchbyattribute/{searchId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementFindElementAttributes operation.
     * @callback module:api/ElementApi~elementFindElementAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAttribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of element attributes matching the specified filters from the specified element.
     * @param {String} webId The ID of the element to use as the root of the search.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
     * @param {String} [attributeCategory] Specify that returned attributes must have this category. The default is no filter.
     * @param {String} [attributeDescriptionFilter] The attribute description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
     * @param {String} [attributeNameFilter] The attribute name filter string used for finding objects. The default is no filter.
     * @param {String} [attributeType] Specify that returned attributes' value type must be this value type. The default is no filter.
     * @param {String} [elementCategory] Specify that the owner of the returned attributes must have this category. The default is no filter.
     * @param {String} [elementDescriptionFilter] The element description filter string used for finding objects. Only the first 440 characters of the description will be searched. For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified. The default is no filter.
     * @param {String} [elementNameFilter] The element name filter string used for finding objects. The default is no filter.
     * @param {String} [elementTemplate] Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter.
     * @param {String} [elementType] Specify that the element of the returned attributes must have this AFElementType. The default is no filter.
     * @param {Number} [maxCount] The maximum number of objects to be returned (the page size). The default is 1000.
     * @param {Boolean} [searchFullHierarchy] Specifies if the search should include objects nested further than immediate children of the given resource. The default is 'false'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementFindElementAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAttribute}
     */
    elementFindElementAttributes(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementFindElementAttributes");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'associations': opts['associations'],
        'attributeCategory': opts['attributeCategory'],
        'attributeDescriptionFilter': opts['attributeDescriptionFilter'],
        'attributeNameFilter': opts['attributeNameFilter'],
        'attributeType': opts['attributeType'],
        'elementCategory': opts['elementCategory'],
        'elementDescriptionFilter': opts['elementDescriptionFilter'],
        'elementNameFilter': opts['elementNameFilter'],
        'elementTemplate': opts['elementTemplate'],
        'elementType': opts['elementType'],
        'maxCount': opts['maxCount'],
        'searchFullHierarchy': opts['searchFullHierarchy'],
        'selectedFields': opts['selectedFields'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAttribute;
      return this.apiClient.callApi(
        '/elements/{webId}/elementattributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementGet operation.
     * @callback module:api/ElementApi~elementGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Element} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an element.
     * @param {String} webId The ID of the element.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Element}
     */
    elementGet(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementGet");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'associations': opts['associations'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = Element;
      return this.apiClient.callApi(
        '/elements/{webId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementGetAnalyses operation.
     * @callback module:api/ElementApi~elementGetAnalysesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAnalysis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve analyses based on the specified conditions.
     * Users can search for the analyses based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the analyses that match the default search.
     * @param {String} webId The ID of the element, which is the Target of the analyses.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementGetAnalysesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAnalysis}
     */
    elementGetAnalyses(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementGetAnalyses");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'maxCount': opts['maxCount'],
        'selectedFields': opts['selectedFields'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAnalysis;
      return this.apiClient.callApi(
        '/elements/{webId}/analyses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementGetAttributes operation.
     * @callback module:api/ElementApi~elementGetAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsAttribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the attributes of the specified element.
     * @param {String} webId The ID of the element.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports DataReference to return attributes with data references. If this parameter is not specified, DataReference values are not returned.
     * @param {String} [categoryName] Specify that returned attributes must have this category. The default is no category filter.
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [nameFilter] The name query string used for finding attributes. The default is no filter.
     * @param {Boolean} [searchFullHierarchy] Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Boolean} [showExcluded] Specified if the search should include attributes with the Excluded property set. The default is 'false'.
     * @param {Boolean} [showHidden] Specified if the search should include attributes with the Hidden property set. The default is 'false'.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [templateName] Specify that returned attributes must be members of this template. The default is no template filter.
     * @param {Array.<String>} [trait] The name of the attribute trait. Multiple traits may be specified with multiple instances of the parameter.
     * @param {Array.<String>} [traitCategory] The category of the attribute traits. Multiple categories may be specified with multiple instances of the parameter. If the parameter is not specified, or if its value is \"all\", then all attribute traits of all categories will be returned.
     * @param {String} [valueType] Specify that returned attributes' value type must be the given value type. The default is no value type filter.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementGetAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsAttribute}
     */
    elementGetAttributes(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementGetAttributes");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'associations': opts['associations'],
        'categoryName': opts['categoryName'],
        'maxCount': opts['maxCount'],
        'nameFilter': opts['nameFilter'],
        'searchFullHierarchy': opts['searchFullHierarchy'],
        'selectedFields': opts['selectedFields'],
        'showExcluded': opts['showExcluded'],
        'showHidden': opts['showHidden'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'templateName': opts['templateName'],
        'trait': this.apiClient.buildCollectionParam(opts['trait'], 'multi'),
        'traitCategory': this.apiClient.buildCollectionParam(opts['traitCategory'], 'multi'),
        'valueType': opts['valueType'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsAttribute;
      return this.apiClient.callApi(
        '/elements/{webId}/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementGetByPath operation.
     * @callback module:api/ElementApi~elementGetByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Element} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an element by path.
     * This method returns an element based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param {String} path The path to the element.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementGetByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Element}
     */
    elementGetByPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling elementGetByPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'associations': opts['associations'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = Element;
      return this.apiClient.callApi(
        '/elements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementGetCategories operation.
     * @callback module:api/ElementApi~elementGetCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsElementCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an element's categories.
     * @param {String} webId The ID of the element.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementGetCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsElementCategory}
     */
    elementGetCategories(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementGetCategories");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsElementCategory;
      return this.apiClient.callApi(
        '/elements/{webId}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementGetElements operation.
     * @callback module:api/ElementApi~elementGetElementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsElement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve elements based on the specified conditions. By default, this method selects immediate children of the specified element.
     * Users can search for the elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
     * @param {String} webId The ID of the element to use as the root of the search.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned.
     * @param {String} [categoryName] Specify that returned elements must have this category. The default is no category filter.
     * @param {String} [descriptionFilter] Specify that returned elements must have this description. The default is no description filter.
     * @param {String} [elementType] Specify that returned elements must have this type. The default type is 'Any'.
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [nameFilter] The name query string used for finding objects. The default is no filter.
     * @param {Boolean} [searchFullHierarchy] Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is 'false'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [templateName] Specify that returned elements must have this template or a template derived from this template. The default is no template filter.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementGetElementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsElement}
     */
    elementGetElements(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementGetElements");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'associations': opts['associations'],
        'categoryName': opts['categoryName'],
        'descriptionFilter': opts['descriptionFilter'],
        'elementType': opts['elementType'],
        'maxCount': opts['maxCount'],
        'nameFilter': opts['nameFilter'],
        'searchFullHierarchy': opts['searchFullHierarchy'],
        'selectedFields': opts['selectedFields'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'templateName': opts['templateName'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsElement;
      return this.apiClient.callApi(
        '/elements/{webId}/elements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementGetElementsQuery operation.
     * @callback module:api/ElementApi~elementGetElementsQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsElement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve elements based on the specified conditions. By default, returns all the elements.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned.
     * @param {String} [databaseWebId] The ID of the asset database to use as the root of the query.
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [query] The query string is a list of filters used to perform an AFSearch for the elements in the asset database. An example would be: \"query=Name:=MyElement* Template:=ElementTemplate\".
     * @param {String} [queryDate] Optional parameter. Used to retrieve the relative the version of an object. A value of null or AFTime.MaxValue initializes the query date so the latest versions of sub-objects are retrieved. The value may be an AFTime, DateTime, PITime, String, or numeric. An integer numeric represents the number of ticks (100-nanosecond intervals) since January 1, 0001. A floating point numeric represents the number of seconds since January 1, 1970 UTC. A String is interpreted as local time, unless it contains a time zone indicator such as a trailing \"Z\" or \"GMT\".
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementGetElementsQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsElement}
     */
    elementGetElementsQuery(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'associations': opts['associations'],
        'databaseWebId': opts['databaseWebId'],
        'maxCount': opts['maxCount'],
        'query': opts['query'],
        'queryDate': opts['queryDate'],
        'selectedFields': opts['selectedFields'],
        'startIndex': opts['startIndex'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsElement;
      return this.apiClient.callApi(
        '/elements/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementGetEventFrames operation.
     * @callback module:api/ElementApi~elementGetEventFramesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsEventFrame} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve event frames that reference this element based on the specified conditions. By default, returns all event frames that reference this element that have been active in the past 8 hours.
     * @param {String} webId The ID of the element whose related event frames are sought.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [canBeAcknowledged] Specify the returned event frames' canBeAcknowledged property. The default is no canBeAcknowledged filter.
     * @param {String} [categoryName] Specify that returned event frames must have this category. The default is no category filter.
     * @param {String} [endTime] The ending time for the search. The endTime must be greater than or equal to the startTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*' if searchMode is not one of the 'Backward*' or 'Forward*' values.
     * @param {Boolean} [isAcknowledged] Specify the returned event frames' isAcknowledged property. The default no isAcknowledged filter.
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [nameFilter] The name query string used for finding event frames. The default is no filter.
     * @param {String} [searchMode] Determines how the startTime and endTime parameters are treated when searching for event frame objects to be included in the returned collection. If this parameter is one of the 'Backward*' or 'Forward*' values, none of endTime, sortField, or sortOrder may be specified. The default is 'Overlapped'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Array.<String>} [severity] Specify that returned event frames must have this severity. Multiple severity values may be specified with multiple instances of the parameter. The default is no severity filter.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name' if searchMode is not one of the 'Backward*' or 'Forward*' values.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending' if searchMode is not one of the 'Backward*' or 'Forward*' values.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [startTime] The starting time for the search. startTime must be less than or equal to the endTime. The searchMode parameter will control whether the comparison will be performed against the event frame's startTime or endTime. The default is '*-8h'.
     * @param {String} [templateName] Specify that returned event frames must have this template or a template derived from this template. The default is no template filter. Specify this parameter by name.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementGetEventFramesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsEventFrame}
     */
    elementGetEventFrames(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementGetEventFrames");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'canBeAcknowledged': opts['canBeAcknowledged'],
        'categoryName': opts['categoryName'],
        'endTime': opts['endTime'],
        'isAcknowledged': opts['isAcknowledged'],
        'maxCount': opts['maxCount'],
        'nameFilter': opts['nameFilter'],
        'searchMode': opts['searchMode'],
        'selectedFields': opts['selectedFields'],
        'severity': this.apiClient.buildCollectionParam(opts['severity'], 'multi'),
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'startTime': opts['startTime'],
        'templateName': opts['templateName'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsEventFrame;
      return this.apiClient.callApi(
        '/elements/{webId}/eventframes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementGetMultiple operation.
     * @callback module:api/ElementApi~elementGetMultipleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsItemElement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve multiple elements by web id or path.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [asParallel] Specifies if the retrieval processes should be run in parallel on the server. This may improve the response time for large amounts of requested attributes. The default is 'false'.
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned.
     * @param {String} [includeMode] The include mode for the return list. The default is 'All'.
     * @param {Array.<String>} [path] The path of an element. Multiple elements may be specified with multiple instances of the parameter.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Array.<String>} [webId] The ID of an element. Multiple elements may be specified with multiple instances of the parameter.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementGetMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsItemElement}
     */
    elementGetMultiple(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'asParallel': opts['asParallel'],
        'associations': opts['associations'],
        'includeMode': opts['includeMode'],
        'path': this.apiClient.buildCollectionParam(opts['path'], 'multi'),
        'selectedFields': opts['selectedFields'],
        'webId': this.apiClient.buildCollectionParam(opts['webId'], 'multi'),
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsItemElement;
      return this.apiClient.callApi(
        '/elements/multiple', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementGetNotificationRules operation.
     * @callback module:api/ElementApi~elementGetNotificationRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsNotificationRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve notification rules for an element
     * @param {String} webId The ID of the resource to use as the root of the search.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementGetNotificationRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsNotificationRule}
     */
    elementGetNotificationRules(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementGetNotificationRules");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsNotificationRule;
      return this.apiClient.callApi(
        '/elements/{webId}/notificationrules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementGetPaths operation.
     * @callback module:api/ElementApi~elementGetPathsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of the full or relative paths to this element.
     * This method will return paths with the primary path at the first index. If there is no primary path, then null will be at the first index. If relative path is specified but does not exist, null will be returned at the first index.
     * @param {String} webId The ID of the element.
     * @param {Object} opts Optional parameters
     * @param {String} [relativePath] The full path in ShortName format to the parent object that the returned paths should be relative. For example, \"\\\\Server1\\Database2\" would return all the paths to the element relative to the database. A path of \"\\\\Server1\\Database2\\RootElement\" would return all paths to the element relative to \"RootElement\". If null, then all the full paths to the element will be returned.
     * @param {module:api/ElementApi~elementGetPathsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsString}
     */
    elementGetPaths(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementGetPaths");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'relativePath': opts['relativePath']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsString;
      return this.apiClient.callApi(
        '/elements/{webId}/paths', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementGetReferencedElements operation.
     * @callback module:api/ElementApi~elementGetReferencedElementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsElement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve referenced elements based on the specified conditions. By default, this method selects all referenced elements of the current resource.
     * Users can search for the referenced elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.
     * @param {String} webId The ID of the resource to use as the root of the search.
     * @param {Object} opts Optional parameters
     * @param {String} [associations] Associated values to return in the response, separated by semicolons (;). This call supports Paths to return all paths to the element. If this parameter is not specified, paths are not returned.
     * @param {String} [categoryName] Specify that returned elements must have this category. The default is no category filter.
     * @param {String} [descriptionFilter] Specify that returned elements must have this description. The default is no description filter.
     * @param {String} [elementType] Specify that returned elements must have this type. The default type is 'Any'.
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [nameFilter] The name query string used for finding objects. The default is no filter.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [sortField] The field or property of the object used to sort the returned collection. The default is 'Name'.
     * @param {String} [sortOrder] The order that the returned collection is sorted. The default is 'Ascending'.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is 0.
     * @param {String} [templateName] Specify that returned elements must have this template or a template derived from this template. The default is no template filter.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementGetReferencedElementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsElement}
     */
    elementGetReferencedElements(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementGetReferencedElements");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'associations': opts['associations'],
        'categoryName': opts['categoryName'],
        'descriptionFilter': opts['descriptionFilter'],
        'elementType': opts['elementType'],
        'maxCount': opts['maxCount'],
        'nameFilter': opts['nameFilter'],
        'selectedFields': opts['selectedFields'],
        'sortField': opts['sortField'],
        'sortOrder': opts['sortOrder'],
        'startIndex': opts['startIndex'],
        'templateName': opts['templateName'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsElement;
      return this.apiClient.callApi(
        '/elements/{webId}/referencedelements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementGetSecurity operation.
     * @callback module:api/ElementApi~elementGetSecurityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityRights} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the security information of the specified security item associated with the element for a specified user.
     * @param {String} webId The ID of the element for the security to be checked.
     * @param {Array.<String>} userIdentity The user identity for the security information to be checked. Multiple security identities may be specified with multiple instances of the parameter. If the parameter is not specified, only the current user's security rights will be returned.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceRefresh] Indicates if the security cache should be refreshed before getting security information. The default is 'false'.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementGetSecurityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityRights}
     */
    elementGetSecurity(webId, userIdentity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementGetSecurity");
      }
      // verify the required parameter 'userIdentity' is set
      if (userIdentity === undefined || userIdentity === null) {
        throw new Error("Missing the required parameter 'userIdentity' when calling elementGetSecurity");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'userIdentity': this.apiClient.buildCollectionParam(userIdentity, 'multi'),
        'forceRefresh': opts['forceRefresh'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityRights;
      return this.apiClient.callApi(
        '/elements/{webId}/security', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementGetSecurityEntries operation.
     * @callback module:api/ElementApi~elementGetSecurityEntriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsSecurityEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the security entries associated with the element based on the specified criteria. By default, all security entries for this element are returned.
     * @param {String} webId The ID of the element.
     * @param {Object} opts Optional parameters
     * @param {String} [nameFilter] The name query string used for filtering security entries. The default is no filter.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementGetSecurityEntriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsSecurityEntry}
     */
    elementGetSecurityEntries(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementGetSecurityEntries");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'nameFilter': opts['nameFilter'],
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsSecurityEntry;
      return this.apiClient.callApi(
        '/elements/{webId}/securityentries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementGetSecurityEntryByName operation.
     * @callback module:api/ElementApi~elementGetSecurityEntryByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the security entry associated with the element with the specified name.
     * @param {String} name The name of the security entry. For every backslash character (\\) in the security entry name, replace with asterisk (*). As an example, use domain*username instead of domain\\username.
     * @param {String} webId The ID of the element.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/ElementApi~elementGetSecurityEntryByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityEntry}
     */
    elementGetSecurityEntryByName(name, webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling elementGetSecurityEntryByName");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementGetSecurityEntryByName");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = SecurityEntry;
      return this.apiClient.callApi(
        '/elements/{webId}/securityentries/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementRemoveReferencedElement operation.
     * @callback module:api/ElementApi~elementRemoveReferencedElementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a reference to an existing element from the child elements collection.
     * @param {String} webId The ID of the element which the referenced element will be removed from.
     * @param {Array.<String>} referencedElementWebId The ID of the referenced element. Multiple referenced elements may be specified with multiple instances of the parameter.
     * @param {module:api/ElementApi~elementRemoveReferencedElementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementRemoveReferencedElement(webId, referencedElementWebId, callback) {
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementRemoveReferencedElement");
      }
      // verify the required parameter 'referencedElementWebId' is set
      if (referencedElementWebId === undefined || referencedElementWebId === null) {
        throw new Error("Missing the required parameter 'referencedElementWebId' when calling elementRemoveReferencedElement");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'referencedElementWebId': this.apiClient.buildCollectionParam(referencedElementWebId, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elements/{webId}/referencedelements', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementUpdate operation.
     * @callback module:api/ElementApi~elementUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an element by replacing items in its definition.
     * @param {String} webId The ID of the element.
     * @param {module:model/Element} element A partial element containing the desired changes.
     * @param {module:api/ElementApi~elementUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementUpdate(webId, element, callback) {
      let postBody = element;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementUpdate");
      }
      // verify the required parameter 'element' is set
      if (element === undefined || element === null) {
        throw new Error("Missing the required parameter 'element' when calling elementUpdate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elements/{webId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elementUpdateSecurityEntry operation.
     * @callback module:api/ElementApi~elementUpdateSecurityEntryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a security entry owned by the element.
     * @param {String} name The name of the security entry.
     * @param {String} webId The ID of the element where the security entry will be updated.
     * @param {module:model/SecurityEntry} securityEntry The new security entry definition. The full list of allow and deny rights must be supplied or they will be removed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [applyToChildren] If false, the new access permissions are only applied to the associated object. If true, the access permissions of children with any parent-child reference types will change when the permissions on the primary parent change.
     * @param {module:api/ElementApi~elementUpdateSecurityEntryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elementUpdateSecurityEntry(name, webId, securityEntry, opts, callback) {
      opts = opts || {};
      let postBody = securityEntry;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling elementUpdateSecurityEntry");
      }
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling elementUpdateSecurityEntry");
      }
      // verify the required parameter 'securityEntry' is set
      if (securityEntry === undefined || securityEntry === null) {
        throw new Error("Missing the required parameter 'securityEntry' when calling elementUpdateSecurityEntry");
      }

      let pathParams = {
        'name': name,
        'webId': webId
      };
      let queryParams = {
        'applyToChildren': opts['applyToChildren']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/elements/{webId}/securityentries/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
