/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataServer from '../model/DataServer';
import DataServerLicense from '../model/DataServerLicense';
import EnumerationSet from '../model/EnumerationSet';
import Errors from '../model/Errors';
import ItemsDataServer from '../model/ItemsDataServer';
import ItemsEnumerationSet from '../model/ItemsEnumerationSet';
import ItemsPoint from '../model/ItemsPoint';
import Point from '../model/Point';

/**
* DataServer service.
* @module api/DataServerApi
* @version 1.11.1.5383
*/
export default class DataServerApi {

    /**
    * Constructs a new DataServerApi. 
    * @alias module:api/DataServerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dataServerCreateEnumerationSet operation.
     * @callback module:api/DataServerApi~dataServerCreateEnumerationSetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an enumeration set on the Data Server.
     * @param {String} webId The ID of the server on which to create the enumeration set.
     * @param {module:model/EnumerationSet} enumerationSet The new enumeration set definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/DataServerApi~dataServerCreateEnumerationSetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dataServerCreateEnumerationSet(webId, enumerationSet, opts, callback) {
      opts = opts || {};
      let postBody = enumerationSet;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling dataServerCreateEnumerationSet");
      }
      // verify the required parameter 'enumerationSet' is set
      if (enumerationSet === undefined || enumerationSet === null) {
        throw new Error("Missing the required parameter 'enumerationSet' when calling dataServerCreateEnumerationSet");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dataservers/{webId}/enumerationsets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataServerCreatePoint operation.
     * @callback module:api/DataServerApi~dataServerCreatePointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a point in the specified Data Server.
     * @param {String} webId The ID of the server.
     * @param {module:model/Point} pointDTO The new point definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/DataServerApi~dataServerCreatePointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dataServerCreatePoint(webId, pointDTO, opts, callback) {
      opts = opts || {};
      let postBody = pointDTO;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling dataServerCreatePoint");
      }
      // verify the required parameter 'pointDTO' is set
      if (pointDTO === undefined || pointDTO === null) {
        throw new Error("Missing the required parameter 'pointDTO' when calling dataServerCreatePoint");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dataservers/{webId}/points', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataServerGet operation.
     * @callback module:api/DataServerApi~dataServerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Data Server.
     * @param {String} webId The ID of the server.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/DataServerApi~dataServerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataServer}
     */
    dataServerGet(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling dataServerGet");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = DataServer;
      return this.apiClient.callApi(
        '/dataservers/{webId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataServerGetByName operation.
     * @callback module:api/DataServerApi~dataServerGetByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Data Server by name.
     * This method returns a data server based on the name. Users should primarily search with the WebID when available.
     * @param {String} name The name of the server.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/DataServerApi~dataServerGetByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataServer}
     */
    dataServerGetByName(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling dataServerGetByName");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = DataServer;
      return this.apiClient.callApi(
        '/dataservers#name', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataServerGetByPath operation.
     * @callback module:api/DataServerApi~dataServerGetByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Data Server by path.
     * This method returns a data server based on the hierarchical path associated with it, and should be used when a path has been received from a separate part of the PI System for use in the PI Web API. Users should primarily search with the WebID when available.
     * @param {String} path The path to the server. Note that the path supplied to this method must be of the form '\\\\servername'.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/DataServerApi~dataServerGetByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataServer}
     */
    dataServerGetByPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling dataServerGetByPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = DataServer;
      return this.apiClient.callApi(
        '/dataservers#path', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataServerGetEnumerationSets operation.
     * @callback module:api/DataServerApi~dataServerGetEnumerationSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsEnumerationSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve enumeration sets for given Data Server.
     * @param {String} webId The ID of the server.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/DataServerApi~dataServerGetEnumerationSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsEnumerationSet}
     */
    dataServerGetEnumerationSets(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling dataServerGetEnumerationSets");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsEnumerationSet;
      return this.apiClient.callApi(
        '/dataservers/{webId}/enumerationsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataServerGetLicense operation.
     * @callback module:api/DataServerApi~dataServerGetLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataServerLicense} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the specified license for the given Data Server. The fields of the response object are string representations of the numerical values reported by the Data Server, with \"Infinity\" representing a license field with no limit.
     * @param {String} webId The ID of the server.
     * @param {String} module The case-sensitive name of the module.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/DataServerApi~dataServerGetLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataServerLicense}
     */
    dataServerGetLicense(webId, module, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling dataServerGetLicense");
      }
      // verify the required parameter 'module' is set
      if (module === undefined || module === null) {
        throw new Error("Missing the required parameter 'module' when calling dataServerGetLicense");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'module': module,
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = DataServerLicense;
      return this.apiClient.callApi(
        '/dataservers/{webId}/license', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataServerGetPoints operation.
     * @callback module:api/DataServerApi~dataServerGetPointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsPoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of points on a specified Data Server.
     * Users can search for the data servers based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the data servers that match the default search.
     * @param {String} webId The ID of the server.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxCount] The maximum number of objects to be returned per call (page size). The default is 1000.
     * @param {String} [nameFilter] A query string for filtering by point name. The default is no filter.
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {Number} [startIndex] The starting index (zero based) of the items to be returned. The default is '0'.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/DataServerApi~dataServerGetPointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsPoint}
     */
    dataServerGetPoints(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling dataServerGetPoints");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'maxCount': opts['maxCount'],
        'nameFilter': opts['nameFilter'],
        'selectedFields': opts['selectedFields'],
        'startIndex': opts['startIndex'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsPoint;
      return this.apiClient.callApi(
        '/dataservers/{webId}/points', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataServerList operation.
     * @callback module:api/DataServerApi~dataServerListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemsDataServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of Data Servers known to this service.
     * This method returns a list of all available known Data Servers that the user can connect to. Even though a server may be returned in the list, the user may not have permission to access it.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/DataServerApi~dataServerListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemsDataServer}
     */
    dataServerList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = ItemsDataServer;
      return this.apiClient.callApi(
        '/dataservers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
