/**
 * PI Web API 2018 SP1 Swagger Spec
 * Swagger Spec file that describes PI Web API
 *
 * The version of the OpenAPI document: 1.11.1.5383
 * Contact: techsupport@osisoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Unit from '../model/Unit';
import UnitClass from '../model/UnitClass';

/**
* UnitClass service.
* @module api/UnitClassApi
* @version 1.11.1.5383
*/
export default class UnitClassApi {

    /**
    * Constructs a new UnitClassApi. 
    * @alias module:api/UnitClassApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the unitClassCreateUnit operation.
     * @callback module:api/UnitClassApi~unitClassCreateUnitCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a unit in the specified Unit Class.
     * @param {String} webId The ID of the server.
     * @param {module:model/Unit} unitDTO The new unit definition.
     * @param {Object} opts Optional parameters
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/UnitClassApi~unitClassCreateUnitCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unitClassCreateUnit(webId, unitDTO, opts, callback) {
      opts = opts || {};
      let postBody = unitDTO;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling unitClassCreateUnit");
      }
      // verify the required parameter 'unitDTO' is set
      if (unitDTO === undefined || unitDTO === null) {
        throw new Error("Missing the required parameter 'unitDTO' when calling unitClassCreateUnit");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/unitclasses/{webId}/units', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unitClassDelete operation.
     * @callback module:api/UnitClassApi~unitClassDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a unit class.
     * @param {String} webId The ID of the unit class.
     * @param {module:api/UnitClassApi~unitClassDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unitClassDelete(webId, callback) {
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling unitClassDelete");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/unitclasses/{webId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unitClassGet operation.
     * @callback module:api/UnitClassApi~unitClassGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnitClass} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a unit class.
     * @param {String} webId The ID of the unit class.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/UnitClassApi~unitClassGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnitClass}
     */
    unitClassGet(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling unitClassGet");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = UnitClass;
      return this.apiClient.callApi(
        '/unitclasses/{webId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unitClassGetByPath operation.
     * @callback module:api/UnitClassApi~unitClassGetByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnitClass} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a unit class by path.
     * @param {String} path The path to the unit class.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/UnitClassApi~unitClassGetByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnitClass}
     */
    unitClassGetByPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling unitClassGetByPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = UnitClass;
      return this.apiClient.callApi(
        '/unitclasses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unitClassGetCanonicalUnit operation.
     * @callback module:api/UnitClassApi~unitClassGetCanonicalUnitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Unit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the canonical unit of a unit class.
     * @param {String} webId The ID of unit class.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/UnitClassApi~unitClassGetCanonicalUnitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Unit}
     */
    unitClassGetCanonicalUnit(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling unitClassGetCanonicalUnit");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = Unit;
      return this.apiClient.callApi(
        '/unitclasses/{webId}/canonicalunit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unitClassGetUnits operation.
     * @callback module:api/UnitClassApi~unitClassGetUnitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Unit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all units belonging to the unit class.
     * @param {String} webId The ID of unit class.
     * @param {Object} opts Optional parameters
     * @param {String} [selectedFields] List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned.
     * @param {String} [webIdType] Optional parameter. Used to specify the type of WebID. Useful for URL brevity and other special cases. Default is the value of the configuration item \"WebIDType\".
     * @param {module:api/UnitClassApi~unitClassGetUnitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Unit}
     */
    unitClassGetUnits(webId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling unitClassGetUnits");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
        'selectedFields': opts['selectedFields'],
        'webIdType': opts['webIdType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/html', 'application/x-ms-application'];
      let returnType = Unit;
      return this.apiClient.callApi(
        '/unitclasses/{webId}/units', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unitClassUpdate operation.
     * @callback module:api/UnitClassApi~unitClassUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a unit class.
     * @param {String} webId The ID of the unit class.
     * @param {module:model/UnitClass} unitClassDTO A partial unit class containing the desired changes.
     * @param {module:api/UnitClassApi~unitClassUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unitClassUpdate(webId, unitClassDTO, callback) {
      let postBody = unitClassDTO;
      // verify the required parameter 'webId' is set
      if (webId === undefined || webId === null) {
        throw new Error("Missing the required parameter 'webId' when calling unitClassUpdate");
      }
      // verify the required parameter 'unitClassDTO' is set
      if (unitClassDTO === undefined || unitClassDTO === null) {
        throw new Error("Missing the required parameter 'unitClassDTO' when calling unitClassUpdate");
      }

      let pathParams = {
        'webId': webId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/unitclasses/{webId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
